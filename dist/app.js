!function(e){var t={};function i(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)i.d(n,a,function(t){return e[t]}.bind(null,a));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=132)}([function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var i=function(){};i.prototype=t.prototype,e.prototype=new i,e.prototype.constructor=e}}},function(e,t,i){var n=i(2),a=n.Buffer;function r(e,t){for(var i in e)t[i]=e[i]}function o(e,t,i){return a(e,t,i)}a.from&&a.alloc&&a.allocUnsafe&&a.allocUnsafeSlow?e.exports=n:(r(n,t),t.Buffer=o),o.prototype=Object.create(a.prototype),r(a,o),o.from=function(e,t,i){if("number"==typeof e)throw new TypeError("Argument must not be a number");return a(e,t,i)},o.alloc=function(e,t,i){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=a(e);return void 0!==t?"string"==typeof i?n.fill(t,i):n.fill(t):n.fill(0),n},o.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return a(e)},o.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},function(e,t,i){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=i(142),a=i(143),r=i(72);function o(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(o()<t)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=c.prototype:(null===e&&(e=new c(t)),e.length=t),e}function c(e,t,i){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(e,t,i);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return f(this,e)}return p(this,e,t,i)}function p(e,t,i,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,i,n){if(t.byteLength,i<0||t.byteLength<i)throw new RangeError("'offset' is out of bounds");if(t.byteLength<i+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===i&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,i):new Uint8Array(t,i,n);c.TYPED_ARRAY_SUPPORT?(e=t).__proto__=c.prototype:e=l(e,t);return e}(e,t,i,n):"string"==typeof t?function(e,t,i){"string"==typeof i&&""!==i||(i="utf8");if(!c.isEncoding(i))throw new TypeError('"encoding" must be a valid string encoding');var n=0|h(t,i),a=(e=s(e,n)).write(t,i);a!==n&&(e=e.slice(0,a));return e}(e,t,i):function(e,t){if(c.isBuffer(t)){var i=0|d(t.length);return 0===(e=s(e,i)).length||t.copy(e,0,0,i),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?s(e,0):l(e,t);if("Buffer"===t.type&&r(t.data))return l(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t){if(u(t),e=s(e,t<0?0:0|d(t)),!c.TYPED_ARRAY_SUPPORT)for(var i=0;i<t;++i)e[i]=0;return e}function l(e,t){var i=t.length<0?0:0|d(t.length);e=s(e,i);for(var n=0;n<i;n+=1)e[n]=255&t[n];return e}function d(e){if(e>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|e}function h(e,t){if(c.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var i=e.length;if(0===i)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return i;case"utf8":case"utf-8":case void 0:return D(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*i;case"hex":return i>>>1;case"base64":return U(e).length;default:if(n)return D(e).length;t=(""+t).toLowerCase(),n=!0}}function m(e,t,i){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===i||i>this.length)&&(i=this.length),i<=0)return"";if((i>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return I(this,t,i);case"utf8":case"utf-8":return A(this,t,i);case"ascii":return j(this,t,i);case"latin1":case"binary":return M(this,t,i);case"base64":return S(this,t,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,t,i);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function b(e,t,i){var n=e[t];e[t]=e[i],e[i]=n}function v(e,t,i,n,a){if(0===e.length)return-1;if("string"==typeof i?(n=i,i=0):i>2147483647?i=2147483647:i<-2147483648&&(i=-2147483648),i=+i,isNaN(i)&&(i=a?0:e.length-1),i<0&&(i=e.length+i),i>=e.length){if(a)return-1;i=e.length-1}else if(i<0){if(!a)return-1;i=0}if("string"==typeof t&&(t=c.from(t,n)),c.isBuffer(t))return 0===t.length?-1:g(e,t,i,n,a);if("number"==typeof t)return t&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?a?Uint8Array.prototype.indexOf.call(e,t,i):Uint8Array.prototype.lastIndexOf.call(e,t,i):g(e,[t],i,n,a);throw new TypeError("val must be string, number or Buffer")}function g(e,t,i,n,a){var r,o=1,s=e.length,c=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;o=2,s/=2,c/=2,i/=2}function p(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(a){var u=-1;for(r=i;r<s;r++)if(p(e,r)===p(t,-1===u?0:r-u)){if(-1===u&&(u=r),r-u+1===c)return u*o}else-1!==u&&(r-=r-u),u=-1}else for(i+c>s&&(i=s-c),r=i;r>=0;r--){for(var f=!0,l=0;l<c;l++)if(p(e,r+l)!==p(t,l)){f=!1;break}if(f)return r}return-1}function y(e,t,i,n){i=Number(i)||0;var a=e.length-i;n?(n=Number(n))>a&&(n=a):n=a;var r=t.length;if(r%2!=0)throw new TypeError("Invalid hex string");n>r/2&&(n=r/2);for(var o=0;o<n;++o){var s=parseInt(t.substr(2*o,2),16);if(isNaN(s))return o;e[i+o]=s}return o}function x(e,t,i,n){return F(D(t,e.length-i),e,i,n)}function w(e,t,i,n){return F(function(e){for(var t=[],i=0;i<e.length;++i)t.push(255&e.charCodeAt(i));return t}(t),e,i,n)}function _(e,t,i,n){return w(e,t,i,n)}function k(e,t,i,n){return F(U(t),e,i,n)}function E(e,t,i,n){return F(function(e,t){for(var i,n,a,r=[],o=0;o<e.length&&!((t-=2)<0);++o)i=e.charCodeAt(o),n=i>>8,a=i%256,r.push(a),r.push(n);return r}(t,e.length-i),e,i,n)}function S(e,t,i){return 0===t&&i===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,i))}function A(e,t,i){i=Math.min(e.length,i);for(var n=[],a=t;a<i;){var r,o,s,c,p=e[a],u=null,f=p>239?4:p>223?3:p>191?2:1;if(a+f<=i)switch(f){case 1:p<128&&(u=p);break;case 2:128==(192&(r=e[a+1]))&&(c=(31&p)<<6|63&r)>127&&(u=c);break;case 3:r=e[a+1],o=e[a+2],128==(192&r)&&128==(192&o)&&(c=(15&p)<<12|(63&r)<<6|63&o)>2047&&(c<55296||c>57343)&&(u=c);break;case 4:r=e[a+1],o=e[a+2],s=e[a+3],128==(192&r)&&128==(192&o)&&128==(192&s)&&(c=(15&p)<<18|(63&r)<<12|(63&o)<<6|63&s)>65535&&c<1114112&&(u=c)}null===u?(u=65533,f=1):u>65535&&(u-=65536,n.push(u>>>10&1023|55296),u=56320|1023&u),n.push(u),a+=f}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var i="",n=0;for(;n<t;)i+=String.fromCharCode.apply(String,e.slice(n,n+=4096));return i}(n)}t.Buffer=c,t.SlowBuffer=function(e){+e!=e&&(e=0);return c.alloc(+e)},t.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=o(),c.poolSize=8192,c._augment=function(e){return e.__proto__=c.prototype,e},c.from=function(e,t,i){return p(null,e,t,i)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(e,t,i){return function(e,t,i,n){return u(t),t<=0?s(e,t):void 0!==i?"string"==typeof n?s(e,t).fill(i,n):s(e,t).fill(i):s(e,t)}(null,e,t,i)},c.allocUnsafe=function(e){return f(null,e)},c.allocUnsafeSlow=function(e){return f(null,e)},c.isBuffer=function(e){return!(null==e||!e._isBuffer)},c.compare=function(e,t){if(!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var i=e.length,n=t.length,a=0,r=Math.min(i,n);a<r;++a)if(e[a]!==t[a]){i=e[a],n=t[a];break}return i<n?-1:n<i?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!r(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);var i;if(void 0===t)for(t=0,i=0;i<e.length;++i)t+=e[i].length;var n=c.allocUnsafe(t),a=0;for(i=0;i<e.length;++i){var o=e[i];if(!c.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,a),a+=o.length}return n},c.byteLength=h,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)b(this,t,t+1);return this},c.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)b(this,t,t+3),b(this,t+1,t+2);return this},c.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)b(this,t,t+7),b(this,t+1,t+6),b(this,t+2,t+5),b(this,t+3,t+4);return this},c.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?A(this,0,e):m.apply(this,arguments)},c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){var e="",i=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,i).match(/.{2}/g).join(" "),this.length>i&&(e+=" ... ")),"<Buffer "+e+">"},c.prototype.compare=function(e,t,i,n,a){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===i&&(i=e?e.length:0),void 0===n&&(n=0),void 0===a&&(a=this.length),t<0||i>e.length||n<0||a>this.length)throw new RangeError("out of range index");if(n>=a&&t>=i)return 0;if(n>=a)return-1;if(t>=i)return 1;if(this===e)return 0;for(var r=(a>>>=0)-(n>>>=0),o=(i>>>=0)-(t>>>=0),s=Math.min(r,o),p=this.slice(n,a),u=e.slice(t,i),f=0;f<s;++f)if(p[f]!==u[f]){r=p[f],o=u[f];break}return r<o?-1:o<r?1:0},c.prototype.includes=function(e,t,i){return-1!==this.indexOf(e,t,i)},c.prototype.indexOf=function(e,t,i){return v(this,e,t,i,!0)},c.prototype.lastIndexOf=function(e,t,i){return v(this,e,t,i,!1)},c.prototype.write=function(e,t,i,n){if(void 0===t)n="utf8",i=this.length,t=0;else if(void 0===i&&"string"==typeof t)n=t,i=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(i)?(i|=0,void 0===n&&(n="utf8")):(n=i,i=void 0)}var a=this.length-t;if((void 0===i||i>a)&&(i=a),e.length>0&&(i<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var r=!1;;)switch(n){case"hex":return y(this,e,t,i);case"utf8":case"utf-8":return x(this,e,t,i);case"ascii":return w(this,e,t,i);case"latin1":case"binary":return _(this,e,t,i);case"base64":return k(this,e,t,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,i);default:if(r)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),r=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function j(e,t,i){var n="";i=Math.min(e.length,i);for(var a=t;a<i;++a)n+=String.fromCharCode(127&e[a]);return n}function M(e,t,i){var n="";i=Math.min(e.length,i);for(var a=t;a<i;++a)n+=String.fromCharCode(e[a]);return n}function I(e,t,i){var n=e.length;(!t||t<0)&&(t=0),(!i||i<0||i>n)&&(i=n);for(var a="",r=t;r<i;++r)a+=N(e[r]);return a}function T(e,t,i){for(var n=e.slice(t,i),a="",r=0;r<n.length;r+=2)a+=String.fromCharCode(n[r]+256*n[r+1]);return a}function C(e,t,i){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>i)throw new RangeError("Trying to access beyond buffer length")}function O(e,t,i,n,a,r){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>a||t<r)throw new RangeError('"value" argument is out of bounds');if(i+n>e.length)throw new RangeError("Index out of range")}function B(e,t,i,n){t<0&&(t=65535+t+1);for(var a=0,r=Math.min(e.length-i,2);a<r;++a)e[i+a]=(t&255<<8*(n?a:1-a))>>>8*(n?a:1-a)}function R(e,t,i,n){t<0&&(t=4294967295+t+1);for(var a=0,r=Math.min(e.length-i,4);a<r;++a)e[i+a]=t>>>8*(n?a:3-a)&255}function z(e,t,i,n,a,r){if(i+n>e.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("Index out of range")}function q(e,t,i,n,r){return r||z(e,0,i,4),a.write(e,t,i,n,23,4),i+4}function P(e,t,i,n,r){return r||z(e,0,i,8),a.write(e,t,i,n,52,8),i+8}c.prototype.slice=function(e,t){var i,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),c.TYPED_ARRAY_SUPPORT)(i=this.subarray(e,t)).__proto__=c.prototype;else{var a=t-e;i=new c(a,void 0);for(var r=0;r<a;++r)i[r]=this[r+e]}return i},c.prototype.readUIntLE=function(e,t,i){e|=0,t|=0,i||C(e,t,this.length);for(var n=this[e],a=1,r=0;++r<t&&(a*=256);)n+=this[e+r]*a;return n},c.prototype.readUIntBE=function(e,t,i){e|=0,t|=0,i||C(e,t,this.length);for(var n=this[e+--t],a=1;t>0&&(a*=256);)n+=this[e+--t]*a;return n},c.prototype.readUInt8=function(e,t){return t||C(e,1,this.length),this[e]},c.prototype.readUInt16LE=function(e,t){return t||C(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUInt16BE=function(e,t){return t||C(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUInt32LE=function(e,t){return t||C(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUInt32BE=function(e,t){return t||C(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readIntLE=function(e,t,i){e|=0,t|=0,i||C(e,t,this.length);for(var n=this[e],a=1,r=0;++r<t&&(a*=256);)n+=this[e+r]*a;return n>=(a*=128)&&(n-=Math.pow(2,8*t)),n},c.prototype.readIntBE=function(e,t,i){e|=0,t|=0,i||C(e,t,this.length);for(var n=t,a=1,r=this[e+--n];n>0&&(a*=256);)r+=this[e+--n]*a;return r>=(a*=128)&&(r-=Math.pow(2,8*t)),r},c.prototype.readInt8=function(e,t){return t||C(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){t||C(e,2,this.length);var i=this[e]|this[e+1]<<8;return 32768&i?4294901760|i:i},c.prototype.readInt16BE=function(e,t){t||C(e,2,this.length);var i=this[e+1]|this[e]<<8;return 32768&i?4294901760|i:i},c.prototype.readInt32LE=function(e,t){return t||C(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return t||C(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readFloatLE=function(e,t){return t||C(e,4,this.length),a.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return t||C(e,4,this.length),a.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return t||C(e,8,this.length),a.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return t||C(e,8,this.length),a.read(this,e,!1,52,8)},c.prototype.writeUIntLE=function(e,t,i,n){(e=+e,t|=0,i|=0,n)||O(this,e,t,i,Math.pow(2,8*i)-1,0);var a=1,r=0;for(this[t]=255&e;++r<i&&(a*=256);)this[t+r]=e/a&255;return t+i},c.prototype.writeUIntBE=function(e,t,i,n){(e=+e,t|=0,i|=0,n)||O(this,e,t,i,Math.pow(2,8*i)-1,0);var a=i-1,r=1;for(this[t+a]=255&e;--a>=0&&(r*=256);)this[t+a]=e/r&255;return t+i},c.prototype.writeUInt8=function(e,t,i){return e=+e,t|=0,i||O(this,e,t,1,255,0),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},c.prototype.writeUInt16LE=function(e,t,i){return e=+e,t|=0,i||O(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):B(this,e,t,!0),t+2},c.prototype.writeUInt16BE=function(e,t,i){return e=+e,t|=0,i||O(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):B(this,e,t,!1),t+2},c.prototype.writeUInt32LE=function(e,t,i){return e=+e,t|=0,i||O(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):R(this,e,t,!0),t+4},c.prototype.writeUInt32BE=function(e,t,i){return e=+e,t|=0,i||O(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):R(this,e,t,!1),t+4},c.prototype.writeIntLE=function(e,t,i,n){if(e=+e,t|=0,!n){var a=Math.pow(2,8*i-1);O(this,e,t,i,a-1,-a)}var r=0,o=1,s=0;for(this[t]=255&e;++r<i&&(o*=256);)e<0&&0===s&&0!==this[t+r-1]&&(s=1),this[t+r]=(e/o>>0)-s&255;return t+i},c.prototype.writeIntBE=function(e,t,i,n){if(e=+e,t|=0,!n){var a=Math.pow(2,8*i-1);O(this,e,t,i,a-1,-a)}var r=i-1,o=1,s=0;for(this[t+r]=255&e;--r>=0&&(o*=256);)e<0&&0===s&&0!==this[t+r+1]&&(s=1),this[t+r]=(e/o>>0)-s&255;return t+i},c.prototype.writeInt8=function(e,t,i){return e=+e,t|=0,i||O(this,e,t,1,127,-128),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,i){return e=+e,t|=0,i||O(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):B(this,e,t,!0),t+2},c.prototype.writeInt16BE=function(e,t,i){return e=+e,t|=0,i||O(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):B(this,e,t,!1),t+2},c.prototype.writeInt32LE=function(e,t,i){return e=+e,t|=0,i||O(this,e,t,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):R(this,e,t,!0),t+4},c.prototype.writeInt32BE=function(e,t,i){return e=+e,t|=0,i||O(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):R(this,e,t,!1),t+4},c.prototype.writeFloatLE=function(e,t,i){return q(this,e,t,!0,i)},c.prototype.writeFloatBE=function(e,t,i){return q(this,e,t,!1,i)},c.prototype.writeDoubleLE=function(e,t,i){return P(this,e,t,!0,i)},c.prototype.writeDoubleBE=function(e,t,i){return P(this,e,t,!1,i)},c.prototype.copy=function(e,t,i,n){if(i||(i=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<i&&(n=i),n===i)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(i<0||i>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-i&&(n=e.length-t+i);var a,r=n-i;if(this===e&&i<t&&t<n)for(a=r-1;a>=0;--a)e[a+t]=this[a+i];else if(r<1e3||!c.TYPED_ARRAY_SUPPORT)for(a=0;a<r;++a)e[a+t]=this[a+i];else Uint8Array.prototype.set.call(e,this.subarray(i,i+r),t);return r},c.prototype.fill=function(e,t,i,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,i=this.length):"string"==typeof i&&(n=i,i=this.length),1===e.length){var a=e.charCodeAt(0);a<256&&(e=a)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<i)throw new RangeError("Out of range index");if(i<=t)return this;var r;if(t>>>=0,i=void 0===i?this.length:i>>>0,e||(e=0),"number"==typeof e)for(r=t;r<i;++r)this[r]=e;else{var o=c.isBuffer(e)?e:D(new c(e,n).toString()),s=o.length;for(r=0;r<i-t;++r)this[r+t]=o[r%s]}return this};var L=/[^+\/0-9A-Za-z-_]/g;function N(e){return e<16?"0"+e.toString(16):e.toString(16)}function D(e,t){var i;t=t||1/0;for(var n=e.length,a=null,r=[],o=0;o<n;++o){if((i=e.charCodeAt(o))>55295&&i<57344){if(!a){if(i>56319){(t-=3)>-1&&r.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&r.push(239,191,189);continue}a=i;continue}if(i<56320){(t-=3)>-1&&r.push(239,191,189),a=i;continue}i=65536+(a-55296<<10|i-56320)}else a&&(t-=3)>-1&&r.push(239,191,189);if(a=null,i<128){if((t-=1)<0)break;r.push(i)}else if(i<2048){if((t-=2)<0)break;r.push(i>>6|192,63&i|128)}else if(i<65536){if((t-=3)<0)break;r.push(i>>12|224,i>>6&63|128,63&i|128)}else{if(!(i<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;r.push(i>>18|240,i>>12&63|128,i>>6&63|128,63&i|128)}}return r}function U(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(L,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function F(e,t,i,n){for(var a=0;a<n&&!(a+i>=t.length||a>=e.length);++a)t[a+i]=e[a];return a}}).call(this,i(5))},function(e,t){var i,n,a=e.exports={};function r(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(e){if(i===setTimeout)return setTimeout(e,0);if((i===r||!i)&&setTimeout)return i=setTimeout,setTimeout(e,0);try{return i(e,0)}catch(t){try{return i.call(null,e,0)}catch(t){return i.call(this,e,0)}}}!function(){try{i="function"==typeof setTimeout?setTimeout:r}catch(e){i=r}try{n="function"==typeof clearTimeout?clearTimeout:o}catch(e){n=o}}();var c,p=[],u=!1,f=-1;function l(){u&&c&&(u=!1,c.length?p=c.concat(p):f=-1,p.length&&d())}function d(){if(!u){var e=s(l);u=!0;for(var t=p.length;t;){for(c=p,p=[];++f<t;)c&&c[f].run();f=-1,t=p.length}c=null,u=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===o||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)t[i-1]=arguments[i];p.push(new h(e,t)),1!==p.length||u||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=m,a.addListener=m,a.once=m,a.off=m,a.removeListener=m,a.removeAllListeners=m,a.emit=m,a.prependListener=m,a.prependOnceListener=m,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(e,t,i){(function(e){!function(e,t){"use strict";function n(e,t){if(!e)throw new Error(t||"Assertion failed")}function a(e,t){e.super_=t;var i=function(){};i.prototype=t.prototype,e.prototype=new i,e.prototype.constructor=e}function r(e,t,i){if(r.isBN(e))return e;this.negative=0,this.words=null,this.length=0,this.red=null,null!==e&&("le"!==t&&"be"!==t||(i=t,t=10),this._init(e||0,t||10,i||"be"))}var o;"object"==typeof e?e.exports=r:t.BN=r,r.BN=r,r.wordSize=26;try{o=i(235).Buffer}catch(e){}function s(e,t,i){for(var n=0,a=Math.min(e.length,i),r=t;r<a;r++){var o=e.charCodeAt(r)-48;n<<=4,n|=o>=49&&o<=54?o-49+10:o>=17&&o<=22?o-17+10:15&o}return n}function c(e,t,i,n){for(var a=0,r=Math.min(e.length,i),o=t;o<r;o++){var s=e.charCodeAt(o)-48;a*=n,a+=s>=49?s-49+10:s>=17?s-17+10:s}return a}r.isBN=function(e){return e instanceof r||null!==e&&"object"==typeof e&&e.constructor.wordSize===r.wordSize&&Array.isArray(e.words)},r.max=function(e,t){return e.cmp(t)>0?e:t},r.min=function(e,t){return e.cmp(t)<0?e:t},r.prototype._init=function(e,t,i){if("number"==typeof e)return this._initNumber(e,t,i);if("object"==typeof e)return this._initArray(e,t,i);"hex"===t&&(t=16),n(t===(0|t)&&t>=2&&t<=36);var a=0;"-"===(e=e.toString().replace(/\s+/g,""))[0]&&a++,16===t?this._parseHex(e,a):this._parseBase(e,t,a),"-"===e[0]&&(this.negative=1),this.strip(),"le"===i&&this._initArray(this.toArray(),t,i)},r.prototype._initNumber=function(e,t,i){e<0&&(this.negative=1,e=-e),e<67108864?(this.words=[67108863&e],this.length=1):e<4503599627370496?(this.words=[67108863&e,e/67108864&67108863],this.length=2):(n(e<9007199254740992),this.words=[67108863&e,e/67108864&67108863,1],this.length=3),"le"===i&&this._initArray(this.toArray(),t,i)},r.prototype._initArray=function(e,t,i){if(n("number"==typeof e.length),e.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(e.length/3),this.words=new Array(this.length);for(var a=0;a<this.length;a++)this.words[a]=0;var r,o,s=0;if("be"===i)for(a=e.length-1,r=0;a>=0;a-=3)o=e[a]|e[a-1]<<8|e[a-2]<<16,this.words[r]|=o<<s&67108863,this.words[r+1]=o>>>26-s&67108863,(s+=24)>=26&&(s-=26,r++);else if("le"===i)for(a=0,r=0;a<e.length;a+=3)o=e[a]|e[a+1]<<8|e[a+2]<<16,this.words[r]|=o<<s&67108863,this.words[r+1]=o>>>26-s&67108863,(s+=24)>=26&&(s-=26,r++);return this.strip()},r.prototype._parseHex=function(e,t){this.length=Math.ceil((e.length-t)/6),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var n,a,r=0;for(i=e.length-6,n=0;i>=t;i-=6)a=s(e,i,i+6),this.words[n]|=a<<r&67108863,this.words[n+1]|=a>>>26-r&4194303,(r+=24)>=26&&(r-=26,n++);i+6!==t&&(a=s(e,t,i+6),this.words[n]|=a<<r&67108863,this.words[n+1]|=a>>>26-r&4194303),this.strip()},r.prototype._parseBase=function(e,t,i){this.words=[0],this.length=1;for(var n=0,a=1;a<=67108863;a*=t)n++;n--,a=a/t|0;for(var r=e.length-i,o=r%n,s=Math.min(r,r-o)+i,p=0,u=i;u<s;u+=n)p=c(e,u,u+n,t),this.imuln(a),this.words[0]+p<67108864?this.words[0]+=p:this._iaddn(p);if(0!==o){var f=1;for(p=c(e,u,e.length,t),u=0;u<o;u++)f*=t;this.imuln(f),this.words[0]+p<67108864?this.words[0]+=p:this._iaddn(p)}},r.prototype.copy=function(e){e.words=new Array(this.length);for(var t=0;t<this.length;t++)e.words[t]=this.words[t];e.length=this.length,e.negative=this.negative,e.red=this.red},r.prototype.clone=function(){var e=new r(null);return this.copy(e),e},r.prototype._expand=function(e){for(;this.length<e;)this.words[this.length++]=0;return this},r.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},r.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},r.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var p=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],u=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],f=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function l(e,t,i){i.negative=t.negative^e.negative;var n=e.length+t.length|0;i.length=n,n=n-1|0;var a=0|e.words[0],r=0|t.words[0],o=a*r,s=67108863&o,c=o/67108864|0;i.words[0]=s;for(var p=1;p<n;p++){for(var u=c>>>26,f=67108863&c,l=Math.min(p,t.length-1),d=Math.max(0,p-e.length+1);d<=l;d++){var h=p-d|0;u+=(o=(a=0|e.words[h])*(r=0|t.words[d])+f)/67108864|0,f=67108863&o}i.words[p]=0|f,c=0|u}return 0!==c?i.words[p]=0|c:i.length--,i.strip()}r.prototype.toString=function(e,t){var i;if(t=0|t||1,16===(e=e||10)||"hex"===e){i="";for(var a=0,r=0,o=0;o<this.length;o++){var s=this.words[o],c=(16777215&(s<<a|r)).toString(16);i=0!==(r=s>>>24-a&16777215)||o!==this.length-1?p[6-c.length]+c+i:c+i,(a+=2)>=26&&(a-=26,o--)}for(0!==r&&(i=r.toString(16)+i);i.length%t!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}if(e===(0|e)&&e>=2&&e<=36){var l=u[e],d=f[e];i="";var h=this.clone();for(h.negative=0;!h.isZero();){var m=h.modn(d).toString(e);i=(h=h.idivn(d)).isZero()?m+i:p[l-m.length]+m+i}for(this.isZero()&&(i="0"+i);i.length%t!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}n(!1,"Base should be between 2 and 36")},r.prototype.toNumber=function(){var e=this.words[0];return 2===this.length?e+=67108864*this.words[1]:3===this.length&&1===this.words[2]?e+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-e:e},r.prototype.toJSON=function(){return this.toString(16)},r.prototype.toBuffer=function(e,t){return n(void 0!==o),this.toArrayLike(o,e,t)},r.prototype.toArray=function(e,t){return this.toArrayLike(Array,e,t)},r.prototype.toArrayLike=function(e,t,i){var a=this.byteLength(),r=i||Math.max(1,a);n(a<=r,"byte array longer than desired length"),n(r>0,"Requested array length <= 0"),this.strip();var o,s,c="le"===t,p=new e(r),u=this.clone();if(c){for(s=0;!u.isZero();s++)o=u.andln(255),u.iushrn(8),p[s]=o;for(;s<r;s++)p[s]=0}else{for(s=0;s<r-a;s++)p[s]=0;for(s=0;!u.isZero();s++)o=u.andln(255),u.iushrn(8),p[r-s-1]=o}return p},Math.clz32?r.prototype._countBits=function(e){return 32-Math.clz32(e)}:r.prototype._countBits=function(e){var t=e,i=0;return t>=4096&&(i+=13,t>>>=13),t>=64&&(i+=7,t>>>=7),t>=8&&(i+=4,t>>>=4),t>=2&&(i+=2,t>>>=2),i+t},r.prototype._zeroBits=function(e){if(0===e)return 26;var t=e,i=0;return 0==(8191&t)&&(i+=13,t>>>=13),0==(127&t)&&(i+=7,t>>>=7),0==(15&t)&&(i+=4,t>>>=4),0==(3&t)&&(i+=2,t>>>=2),0==(1&t)&&i++,i},r.prototype.bitLength=function(){var e=this.words[this.length-1],t=this._countBits(e);return 26*(this.length-1)+t},r.prototype.zeroBits=function(){if(this.isZero())return 0;for(var e=0,t=0;t<this.length;t++){var i=this._zeroBits(this.words[t]);if(e+=i,26!==i)break}return e},r.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},r.prototype.toTwos=function(e){return 0!==this.negative?this.abs().inotn(e).iaddn(1):this.clone()},r.prototype.fromTwos=function(e){return this.testn(e-1)?this.notn(e).iaddn(1).ineg():this.clone()},r.prototype.isNeg=function(){return 0!==this.negative},r.prototype.neg=function(){return this.clone().ineg()},r.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},r.prototype.iuor=function(e){for(;this.length<e.length;)this.words[this.length++]=0;for(var t=0;t<e.length;t++)this.words[t]=this.words[t]|e.words[t];return this.strip()},r.prototype.ior=function(e){return n(0==(this.negative|e.negative)),this.iuor(e)},r.prototype.or=function(e){return this.length>e.length?this.clone().ior(e):e.clone().ior(this)},r.prototype.uor=function(e){return this.length>e.length?this.clone().iuor(e):e.clone().iuor(this)},r.prototype.iuand=function(e){var t;t=this.length>e.length?e:this;for(var i=0;i<t.length;i++)this.words[i]=this.words[i]&e.words[i];return this.length=t.length,this.strip()},r.prototype.iand=function(e){return n(0==(this.negative|e.negative)),this.iuand(e)},r.prototype.and=function(e){return this.length>e.length?this.clone().iand(e):e.clone().iand(this)},r.prototype.uand=function(e){return this.length>e.length?this.clone().iuand(e):e.clone().iuand(this)},r.prototype.iuxor=function(e){var t,i;this.length>e.length?(t=this,i=e):(t=e,i=this);for(var n=0;n<i.length;n++)this.words[n]=t.words[n]^i.words[n];if(this!==t)for(;n<t.length;n++)this.words[n]=t.words[n];return this.length=t.length,this.strip()},r.prototype.ixor=function(e){return n(0==(this.negative|e.negative)),this.iuxor(e)},r.prototype.xor=function(e){return this.length>e.length?this.clone().ixor(e):e.clone().ixor(this)},r.prototype.uxor=function(e){return this.length>e.length?this.clone().iuxor(e):e.clone().iuxor(this)},r.prototype.inotn=function(e){n("number"==typeof e&&e>=0);var t=0|Math.ceil(e/26),i=e%26;this._expand(t),i>0&&t--;for(var a=0;a<t;a++)this.words[a]=67108863&~this.words[a];return i>0&&(this.words[a]=~this.words[a]&67108863>>26-i),this.strip()},r.prototype.notn=function(e){return this.clone().inotn(e)},r.prototype.setn=function(e,t){n("number"==typeof e&&e>=0);var i=e/26|0,a=e%26;return this._expand(i+1),this.words[i]=t?this.words[i]|1<<a:this.words[i]&~(1<<a),this.strip()},r.prototype.iadd=function(e){var t,i,n;if(0!==this.negative&&0===e.negative)return this.negative=0,t=this.isub(e),this.negative^=1,this._normSign();if(0===this.negative&&0!==e.negative)return e.negative=0,t=this.isub(e),e.negative=1,t._normSign();this.length>e.length?(i=this,n=e):(i=e,n=this);for(var a=0,r=0;r<n.length;r++)t=(0|i.words[r])+(0|n.words[r])+a,this.words[r]=67108863&t,a=t>>>26;for(;0!==a&&r<i.length;r++)t=(0|i.words[r])+a,this.words[r]=67108863&t,a=t>>>26;if(this.length=i.length,0!==a)this.words[this.length]=a,this.length++;else if(i!==this)for(;r<i.length;r++)this.words[r]=i.words[r];return this},r.prototype.add=function(e){var t;return 0!==e.negative&&0===this.negative?(e.negative=0,t=this.sub(e),e.negative^=1,t):0===e.negative&&0!==this.negative?(this.negative=0,t=e.sub(this),this.negative=1,t):this.length>e.length?this.clone().iadd(e):e.clone().iadd(this)},r.prototype.isub=function(e){if(0!==e.negative){e.negative=0;var t=this.iadd(e);return e.negative=1,t._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(e),this.negative=1,this._normSign();var i,n,a=this.cmp(e);if(0===a)return this.negative=0,this.length=1,this.words[0]=0,this;a>0?(i=this,n=e):(i=e,n=this);for(var r=0,o=0;o<n.length;o++)r=(t=(0|i.words[o])-(0|n.words[o])+r)>>26,this.words[o]=67108863&t;for(;0!==r&&o<i.length;o++)r=(t=(0|i.words[o])+r)>>26,this.words[o]=67108863&t;if(0===r&&o<i.length&&i!==this)for(;o<i.length;o++)this.words[o]=i.words[o];return this.length=Math.max(this.length,o),i!==this&&(this.negative=1),this.strip()},r.prototype.sub=function(e){return this.clone().isub(e)};var d=function(e,t,i){var n,a,r,o=e.words,s=t.words,c=i.words,p=0,u=0|o[0],f=8191&u,l=u>>>13,d=0|o[1],h=8191&d,m=d>>>13,b=0|o[2],v=8191&b,g=b>>>13,y=0|o[3],x=8191&y,w=y>>>13,_=0|o[4],k=8191&_,E=_>>>13,S=0|o[5],A=8191&S,j=S>>>13,M=0|o[6],I=8191&M,T=M>>>13,C=0|o[7],O=8191&C,B=C>>>13,R=0|o[8],z=8191&R,q=R>>>13,P=0|o[9],L=8191&P,N=P>>>13,D=0|s[0],U=8191&D,F=D>>>13,H=0|s[1],Z=8191&H,K=H>>>13,V=0|s[2],$=8191&V,W=V>>>13,G=0|s[3],Y=8191&G,X=G>>>13,J=0|s[4],Q=8191&J,ee=J>>>13,te=0|s[5],ie=8191&te,ne=te>>>13,ae=0|s[6],re=8191&ae,oe=ae>>>13,se=0|s[7],ce=8191&se,pe=se>>>13,ue=0|s[8],fe=8191&ue,le=ue>>>13,de=0|s[9],he=8191&de,me=de>>>13;i.negative=e.negative^t.negative,i.length=19;var be=(p+(n=Math.imul(f,U))|0)+((8191&(a=(a=Math.imul(f,F))+Math.imul(l,U)|0))<<13)|0;p=((r=Math.imul(l,F))+(a>>>13)|0)+(be>>>26)|0,be&=67108863,n=Math.imul(h,U),a=(a=Math.imul(h,F))+Math.imul(m,U)|0,r=Math.imul(m,F);var ve=(p+(n=n+Math.imul(f,Z)|0)|0)+((8191&(a=(a=a+Math.imul(f,K)|0)+Math.imul(l,Z)|0))<<13)|0;p=((r=r+Math.imul(l,K)|0)+(a>>>13)|0)+(ve>>>26)|0,ve&=67108863,n=Math.imul(v,U),a=(a=Math.imul(v,F))+Math.imul(g,U)|0,r=Math.imul(g,F),n=n+Math.imul(h,Z)|0,a=(a=a+Math.imul(h,K)|0)+Math.imul(m,Z)|0,r=r+Math.imul(m,K)|0;var ge=(p+(n=n+Math.imul(f,$)|0)|0)+((8191&(a=(a=a+Math.imul(f,W)|0)+Math.imul(l,$)|0))<<13)|0;p=((r=r+Math.imul(l,W)|0)+(a>>>13)|0)+(ge>>>26)|0,ge&=67108863,n=Math.imul(x,U),a=(a=Math.imul(x,F))+Math.imul(w,U)|0,r=Math.imul(w,F),n=n+Math.imul(v,Z)|0,a=(a=a+Math.imul(v,K)|0)+Math.imul(g,Z)|0,r=r+Math.imul(g,K)|0,n=n+Math.imul(h,$)|0,a=(a=a+Math.imul(h,W)|0)+Math.imul(m,$)|0,r=r+Math.imul(m,W)|0;var ye=(p+(n=n+Math.imul(f,Y)|0)|0)+((8191&(a=(a=a+Math.imul(f,X)|0)+Math.imul(l,Y)|0))<<13)|0;p=((r=r+Math.imul(l,X)|0)+(a>>>13)|0)+(ye>>>26)|0,ye&=67108863,n=Math.imul(k,U),a=(a=Math.imul(k,F))+Math.imul(E,U)|0,r=Math.imul(E,F),n=n+Math.imul(x,Z)|0,a=(a=a+Math.imul(x,K)|0)+Math.imul(w,Z)|0,r=r+Math.imul(w,K)|0,n=n+Math.imul(v,$)|0,a=(a=a+Math.imul(v,W)|0)+Math.imul(g,$)|0,r=r+Math.imul(g,W)|0,n=n+Math.imul(h,Y)|0,a=(a=a+Math.imul(h,X)|0)+Math.imul(m,Y)|0,r=r+Math.imul(m,X)|0;var xe=(p+(n=n+Math.imul(f,Q)|0)|0)+((8191&(a=(a=a+Math.imul(f,ee)|0)+Math.imul(l,Q)|0))<<13)|0;p=((r=r+Math.imul(l,ee)|0)+(a>>>13)|0)+(xe>>>26)|0,xe&=67108863,n=Math.imul(A,U),a=(a=Math.imul(A,F))+Math.imul(j,U)|0,r=Math.imul(j,F),n=n+Math.imul(k,Z)|0,a=(a=a+Math.imul(k,K)|0)+Math.imul(E,Z)|0,r=r+Math.imul(E,K)|0,n=n+Math.imul(x,$)|0,a=(a=a+Math.imul(x,W)|0)+Math.imul(w,$)|0,r=r+Math.imul(w,W)|0,n=n+Math.imul(v,Y)|0,a=(a=a+Math.imul(v,X)|0)+Math.imul(g,Y)|0,r=r+Math.imul(g,X)|0,n=n+Math.imul(h,Q)|0,a=(a=a+Math.imul(h,ee)|0)+Math.imul(m,Q)|0,r=r+Math.imul(m,ee)|0;var we=(p+(n=n+Math.imul(f,ie)|0)|0)+((8191&(a=(a=a+Math.imul(f,ne)|0)+Math.imul(l,ie)|0))<<13)|0;p=((r=r+Math.imul(l,ne)|0)+(a>>>13)|0)+(we>>>26)|0,we&=67108863,n=Math.imul(I,U),a=(a=Math.imul(I,F))+Math.imul(T,U)|0,r=Math.imul(T,F),n=n+Math.imul(A,Z)|0,a=(a=a+Math.imul(A,K)|0)+Math.imul(j,Z)|0,r=r+Math.imul(j,K)|0,n=n+Math.imul(k,$)|0,a=(a=a+Math.imul(k,W)|0)+Math.imul(E,$)|0,r=r+Math.imul(E,W)|0,n=n+Math.imul(x,Y)|0,a=(a=a+Math.imul(x,X)|0)+Math.imul(w,Y)|0,r=r+Math.imul(w,X)|0,n=n+Math.imul(v,Q)|0,a=(a=a+Math.imul(v,ee)|0)+Math.imul(g,Q)|0,r=r+Math.imul(g,ee)|0,n=n+Math.imul(h,ie)|0,a=(a=a+Math.imul(h,ne)|0)+Math.imul(m,ie)|0,r=r+Math.imul(m,ne)|0;var _e=(p+(n=n+Math.imul(f,re)|0)|0)+((8191&(a=(a=a+Math.imul(f,oe)|0)+Math.imul(l,re)|0))<<13)|0;p=((r=r+Math.imul(l,oe)|0)+(a>>>13)|0)+(_e>>>26)|0,_e&=67108863,n=Math.imul(O,U),a=(a=Math.imul(O,F))+Math.imul(B,U)|0,r=Math.imul(B,F),n=n+Math.imul(I,Z)|0,a=(a=a+Math.imul(I,K)|0)+Math.imul(T,Z)|0,r=r+Math.imul(T,K)|0,n=n+Math.imul(A,$)|0,a=(a=a+Math.imul(A,W)|0)+Math.imul(j,$)|0,r=r+Math.imul(j,W)|0,n=n+Math.imul(k,Y)|0,a=(a=a+Math.imul(k,X)|0)+Math.imul(E,Y)|0,r=r+Math.imul(E,X)|0,n=n+Math.imul(x,Q)|0,a=(a=a+Math.imul(x,ee)|0)+Math.imul(w,Q)|0,r=r+Math.imul(w,ee)|0,n=n+Math.imul(v,ie)|0,a=(a=a+Math.imul(v,ne)|0)+Math.imul(g,ie)|0,r=r+Math.imul(g,ne)|0,n=n+Math.imul(h,re)|0,a=(a=a+Math.imul(h,oe)|0)+Math.imul(m,re)|0,r=r+Math.imul(m,oe)|0;var ke=(p+(n=n+Math.imul(f,ce)|0)|0)+((8191&(a=(a=a+Math.imul(f,pe)|0)+Math.imul(l,ce)|0))<<13)|0;p=((r=r+Math.imul(l,pe)|0)+(a>>>13)|0)+(ke>>>26)|0,ke&=67108863,n=Math.imul(z,U),a=(a=Math.imul(z,F))+Math.imul(q,U)|0,r=Math.imul(q,F),n=n+Math.imul(O,Z)|0,a=(a=a+Math.imul(O,K)|0)+Math.imul(B,Z)|0,r=r+Math.imul(B,K)|0,n=n+Math.imul(I,$)|0,a=(a=a+Math.imul(I,W)|0)+Math.imul(T,$)|0,r=r+Math.imul(T,W)|0,n=n+Math.imul(A,Y)|0,a=(a=a+Math.imul(A,X)|0)+Math.imul(j,Y)|0,r=r+Math.imul(j,X)|0,n=n+Math.imul(k,Q)|0,a=(a=a+Math.imul(k,ee)|0)+Math.imul(E,Q)|0,r=r+Math.imul(E,ee)|0,n=n+Math.imul(x,ie)|0,a=(a=a+Math.imul(x,ne)|0)+Math.imul(w,ie)|0,r=r+Math.imul(w,ne)|0,n=n+Math.imul(v,re)|0,a=(a=a+Math.imul(v,oe)|0)+Math.imul(g,re)|0,r=r+Math.imul(g,oe)|0,n=n+Math.imul(h,ce)|0,a=(a=a+Math.imul(h,pe)|0)+Math.imul(m,ce)|0,r=r+Math.imul(m,pe)|0;var Ee=(p+(n=n+Math.imul(f,fe)|0)|0)+((8191&(a=(a=a+Math.imul(f,le)|0)+Math.imul(l,fe)|0))<<13)|0;p=((r=r+Math.imul(l,le)|0)+(a>>>13)|0)+(Ee>>>26)|0,Ee&=67108863,n=Math.imul(L,U),a=(a=Math.imul(L,F))+Math.imul(N,U)|0,r=Math.imul(N,F),n=n+Math.imul(z,Z)|0,a=(a=a+Math.imul(z,K)|0)+Math.imul(q,Z)|0,r=r+Math.imul(q,K)|0,n=n+Math.imul(O,$)|0,a=(a=a+Math.imul(O,W)|0)+Math.imul(B,$)|0,r=r+Math.imul(B,W)|0,n=n+Math.imul(I,Y)|0,a=(a=a+Math.imul(I,X)|0)+Math.imul(T,Y)|0,r=r+Math.imul(T,X)|0,n=n+Math.imul(A,Q)|0,a=(a=a+Math.imul(A,ee)|0)+Math.imul(j,Q)|0,r=r+Math.imul(j,ee)|0,n=n+Math.imul(k,ie)|0,a=(a=a+Math.imul(k,ne)|0)+Math.imul(E,ie)|0,r=r+Math.imul(E,ne)|0,n=n+Math.imul(x,re)|0,a=(a=a+Math.imul(x,oe)|0)+Math.imul(w,re)|0,r=r+Math.imul(w,oe)|0,n=n+Math.imul(v,ce)|0,a=(a=a+Math.imul(v,pe)|0)+Math.imul(g,ce)|0,r=r+Math.imul(g,pe)|0,n=n+Math.imul(h,fe)|0,a=(a=a+Math.imul(h,le)|0)+Math.imul(m,fe)|0,r=r+Math.imul(m,le)|0;var Se=(p+(n=n+Math.imul(f,he)|0)|0)+((8191&(a=(a=a+Math.imul(f,me)|0)+Math.imul(l,he)|0))<<13)|0;p=((r=r+Math.imul(l,me)|0)+(a>>>13)|0)+(Se>>>26)|0,Se&=67108863,n=Math.imul(L,Z),a=(a=Math.imul(L,K))+Math.imul(N,Z)|0,r=Math.imul(N,K),n=n+Math.imul(z,$)|0,a=(a=a+Math.imul(z,W)|0)+Math.imul(q,$)|0,r=r+Math.imul(q,W)|0,n=n+Math.imul(O,Y)|0,a=(a=a+Math.imul(O,X)|0)+Math.imul(B,Y)|0,r=r+Math.imul(B,X)|0,n=n+Math.imul(I,Q)|0,a=(a=a+Math.imul(I,ee)|0)+Math.imul(T,Q)|0,r=r+Math.imul(T,ee)|0,n=n+Math.imul(A,ie)|0,a=(a=a+Math.imul(A,ne)|0)+Math.imul(j,ie)|0,r=r+Math.imul(j,ne)|0,n=n+Math.imul(k,re)|0,a=(a=a+Math.imul(k,oe)|0)+Math.imul(E,re)|0,r=r+Math.imul(E,oe)|0,n=n+Math.imul(x,ce)|0,a=(a=a+Math.imul(x,pe)|0)+Math.imul(w,ce)|0,r=r+Math.imul(w,pe)|0,n=n+Math.imul(v,fe)|0,a=(a=a+Math.imul(v,le)|0)+Math.imul(g,fe)|0,r=r+Math.imul(g,le)|0;var Ae=(p+(n=n+Math.imul(h,he)|0)|0)+((8191&(a=(a=a+Math.imul(h,me)|0)+Math.imul(m,he)|0))<<13)|0;p=((r=r+Math.imul(m,me)|0)+(a>>>13)|0)+(Ae>>>26)|0,Ae&=67108863,n=Math.imul(L,$),a=(a=Math.imul(L,W))+Math.imul(N,$)|0,r=Math.imul(N,W),n=n+Math.imul(z,Y)|0,a=(a=a+Math.imul(z,X)|0)+Math.imul(q,Y)|0,r=r+Math.imul(q,X)|0,n=n+Math.imul(O,Q)|0,a=(a=a+Math.imul(O,ee)|0)+Math.imul(B,Q)|0,r=r+Math.imul(B,ee)|0,n=n+Math.imul(I,ie)|0,a=(a=a+Math.imul(I,ne)|0)+Math.imul(T,ie)|0,r=r+Math.imul(T,ne)|0,n=n+Math.imul(A,re)|0,a=(a=a+Math.imul(A,oe)|0)+Math.imul(j,re)|0,r=r+Math.imul(j,oe)|0,n=n+Math.imul(k,ce)|0,a=(a=a+Math.imul(k,pe)|0)+Math.imul(E,ce)|0,r=r+Math.imul(E,pe)|0,n=n+Math.imul(x,fe)|0,a=(a=a+Math.imul(x,le)|0)+Math.imul(w,fe)|0,r=r+Math.imul(w,le)|0;var je=(p+(n=n+Math.imul(v,he)|0)|0)+((8191&(a=(a=a+Math.imul(v,me)|0)+Math.imul(g,he)|0))<<13)|0;p=((r=r+Math.imul(g,me)|0)+(a>>>13)|0)+(je>>>26)|0,je&=67108863,n=Math.imul(L,Y),a=(a=Math.imul(L,X))+Math.imul(N,Y)|0,r=Math.imul(N,X),n=n+Math.imul(z,Q)|0,a=(a=a+Math.imul(z,ee)|0)+Math.imul(q,Q)|0,r=r+Math.imul(q,ee)|0,n=n+Math.imul(O,ie)|0,a=(a=a+Math.imul(O,ne)|0)+Math.imul(B,ie)|0,r=r+Math.imul(B,ne)|0,n=n+Math.imul(I,re)|0,a=(a=a+Math.imul(I,oe)|0)+Math.imul(T,re)|0,r=r+Math.imul(T,oe)|0,n=n+Math.imul(A,ce)|0,a=(a=a+Math.imul(A,pe)|0)+Math.imul(j,ce)|0,r=r+Math.imul(j,pe)|0,n=n+Math.imul(k,fe)|0,a=(a=a+Math.imul(k,le)|0)+Math.imul(E,fe)|0,r=r+Math.imul(E,le)|0;var Me=(p+(n=n+Math.imul(x,he)|0)|0)+((8191&(a=(a=a+Math.imul(x,me)|0)+Math.imul(w,he)|0))<<13)|0;p=((r=r+Math.imul(w,me)|0)+(a>>>13)|0)+(Me>>>26)|0,Me&=67108863,n=Math.imul(L,Q),a=(a=Math.imul(L,ee))+Math.imul(N,Q)|0,r=Math.imul(N,ee),n=n+Math.imul(z,ie)|0,a=(a=a+Math.imul(z,ne)|0)+Math.imul(q,ie)|0,r=r+Math.imul(q,ne)|0,n=n+Math.imul(O,re)|0,a=(a=a+Math.imul(O,oe)|0)+Math.imul(B,re)|0,r=r+Math.imul(B,oe)|0,n=n+Math.imul(I,ce)|0,a=(a=a+Math.imul(I,pe)|0)+Math.imul(T,ce)|0,r=r+Math.imul(T,pe)|0,n=n+Math.imul(A,fe)|0,a=(a=a+Math.imul(A,le)|0)+Math.imul(j,fe)|0,r=r+Math.imul(j,le)|0;var Ie=(p+(n=n+Math.imul(k,he)|0)|0)+((8191&(a=(a=a+Math.imul(k,me)|0)+Math.imul(E,he)|0))<<13)|0;p=((r=r+Math.imul(E,me)|0)+(a>>>13)|0)+(Ie>>>26)|0,Ie&=67108863,n=Math.imul(L,ie),a=(a=Math.imul(L,ne))+Math.imul(N,ie)|0,r=Math.imul(N,ne),n=n+Math.imul(z,re)|0,a=(a=a+Math.imul(z,oe)|0)+Math.imul(q,re)|0,r=r+Math.imul(q,oe)|0,n=n+Math.imul(O,ce)|0,a=(a=a+Math.imul(O,pe)|0)+Math.imul(B,ce)|0,r=r+Math.imul(B,pe)|0,n=n+Math.imul(I,fe)|0,a=(a=a+Math.imul(I,le)|0)+Math.imul(T,fe)|0,r=r+Math.imul(T,le)|0;var Te=(p+(n=n+Math.imul(A,he)|0)|0)+((8191&(a=(a=a+Math.imul(A,me)|0)+Math.imul(j,he)|0))<<13)|0;p=((r=r+Math.imul(j,me)|0)+(a>>>13)|0)+(Te>>>26)|0,Te&=67108863,n=Math.imul(L,re),a=(a=Math.imul(L,oe))+Math.imul(N,re)|0,r=Math.imul(N,oe),n=n+Math.imul(z,ce)|0,a=(a=a+Math.imul(z,pe)|0)+Math.imul(q,ce)|0,r=r+Math.imul(q,pe)|0,n=n+Math.imul(O,fe)|0,a=(a=a+Math.imul(O,le)|0)+Math.imul(B,fe)|0,r=r+Math.imul(B,le)|0;var Ce=(p+(n=n+Math.imul(I,he)|0)|0)+((8191&(a=(a=a+Math.imul(I,me)|0)+Math.imul(T,he)|0))<<13)|0;p=((r=r+Math.imul(T,me)|0)+(a>>>13)|0)+(Ce>>>26)|0,Ce&=67108863,n=Math.imul(L,ce),a=(a=Math.imul(L,pe))+Math.imul(N,ce)|0,r=Math.imul(N,pe),n=n+Math.imul(z,fe)|0,a=(a=a+Math.imul(z,le)|0)+Math.imul(q,fe)|0,r=r+Math.imul(q,le)|0;var Oe=(p+(n=n+Math.imul(O,he)|0)|0)+((8191&(a=(a=a+Math.imul(O,me)|0)+Math.imul(B,he)|0))<<13)|0;p=((r=r+Math.imul(B,me)|0)+(a>>>13)|0)+(Oe>>>26)|0,Oe&=67108863,n=Math.imul(L,fe),a=(a=Math.imul(L,le))+Math.imul(N,fe)|0,r=Math.imul(N,le);var Be=(p+(n=n+Math.imul(z,he)|0)|0)+((8191&(a=(a=a+Math.imul(z,me)|0)+Math.imul(q,he)|0))<<13)|0;p=((r=r+Math.imul(q,me)|0)+(a>>>13)|0)+(Be>>>26)|0,Be&=67108863;var Re=(p+(n=Math.imul(L,he))|0)+((8191&(a=(a=Math.imul(L,me))+Math.imul(N,he)|0))<<13)|0;return p=((r=Math.imul(N,me))+(a>>>13)|0)+(Re>>>26)|0,Re&=67108863,c[0]=be,c[1]=ve,c[2]=ge,c[3]=ye,c[4]=xe,c[5]=we,c[6]=_e,c[7]=ke,c[8]=Ee,c[9]=Se,c[10]=Ae,c[11]=je,c[12]=Me,c[13]=Ie,c[14]=Te,c[15]=Ce,c[16]=Oe,c[17]=Be,c[18]=Re,0!==p&&(c[19]=p,i.length++),i};function h(e,t,i){return(new m).mulp(e,t,i)}function m(e,t){this.x=e,this.y=t}Math.imul||(d=l),r.prototype.mulTo=function(e,t){var i=this.length+e.length;return 10===this.length&&10===e.length?d(this,e,t):i<63?l(this,e,t):i<1024?function(e,t,i){i.negative=t.negative^e.negative,i.length=e.length+t.length;for(var n=0,a=0,r=0;r<i.length-1;r++){var o=a;a=0;for(var s=67108863&n,c=Math.min(r,t.length-1),p=Math.max(0,r-e.length+1);p<=c;p++){var u=r-p,f=(0|e.words[u])*(0|t.words[p]),l=67108863&f;s=67108863&(l=l+s|0),a+=(o=(o=o+(f/67108864|0)|0)+(l>>>26)|0)>>>26,o&=67108863}i.words[r]=s,n=o,o=a}return 0!==n?i.words[r]=n:i.length--,i.strip()}(this,e,t):h(this,e,t)},m.prototype.makeRBT=function(e){for(var t=new Array(e),i=r.prototype._countBits(e)-1,n=0;n<e;n++)t[n]=this.revBin(n,i,e);return t},m.prototype.revBin=function(e,t,i){if(0===e||e===i-1)return e;for(var n=0,a=0;a<t;a++)n|=(1&e)<<t-a-1,e>>=1;return n},m.prototype.permute=function(e,t,i,n,a,r){for(var o=0;o<r;o++)n[o]=t[e[o]],a[o]=i[e[o]]},m.prototype.transform=function(e,t,i,n,a,r){this.permute(r,e,t,i,n,a);for(var o=1;o<a;o<<=1)for(var s=o<<1,c=Math.cos(2*Math.PI/s),p=Math.sin(2*Math.PI/s),u=0;u<a;u+=s)for(var f=c,l=p,d=0;d<o;d++){var h=i[u+d],m=n[u+d],b=i[u+d+o],v=n[u+d+o],g=f*b-l*v;v=f*v+l*b,b=g,i[u+d]=h+b,n[u+d]=m+v,i[u+d+o]=h-b,n[u+d+o]=m-v,d!==s&&(g=c*f-p*l,l=c*l+p*f,f=g)}},m.prototype.guessLen13b=function(e,t){var i=1|Math.max(t,e),n=1&i,a=0;for(i=i/2|0;i;i>>>=1)a++;return 1<<a+1+n},m.prototype.conjugate=function(e,t,i){if(!(i<=1))for(var n=0;n<i/2;n++){var a=e[n];e[n]=e[i-n-1],e[i-n-1]=a,a=t[n],t[n]=-t[i-n-1],t[i-n-1]=-a}},m.prototype.normalize13b=function(e,t){for(var i=0,n=0;n<t/2;n++){var a=8192*Math.round(e[2*n+1]/t)+Math.round(e[2*n]/t)+i;e[n]=67108863&a,i=a<67108864?0:a/67108864|0}return e},m.prototype.convert13b=function(e,t,i,a){for(var r=0,o=0;o<t;o++)r+=0|e[o],i[2*o]=8191&r,r>>>=13,i[2*o+1]=8191&r,r>>>=13;for(o=2*t;o<a;++o)i[o]=0;n(0===r),n(0==(-8192&r))},m.prototype.stub=function(e){for(var t=new Array(e),i=0;i<e;i++)t[i]=0;return t},m.prototype.mulp=function(e,t,i){var n=2*this.guessLen13b(e.length,t.length),a=this.makeRBT(n),r=this.stub(n),o=new Array(n),s=new Array(n),c=new Array(n),p=new Array(n),u=new Array(n),f=new Array(n),l=i.words;l.length=n,this.convert13b(e.words,e.length,o,n),this.convert13b(t.words,t.length,p,n),this.transform(o,r,s,c,n,a),this.transform(p,r,u,f,n,a);for(var d=0;d<n;d++){var h=s[d]*u[d]-c[d]*f[d];c[d]=s[d]*f[d]+c[d]*u[d],s[d]=h}return this.conjugate(s,c,n),this.transform(s,c,l,r,n,a),this.conjugate(l,r,n),this.normalize13b(l,n),i.negative=e.negative^t.negative,i.length=e.length+t.length,i.strip()},r.prototype.mul=function(e){var t=new r(null);return t.words=new Array(this.length+e.length),this.mulTo(e,t)},r.prototype.mulf=function(e){var t=new r(null);return t.words=new Array(this.length+e.length),h(this,e,t)},r.prototype.imul=function(e){return this.clone().mulTo(e,this)},r.prototype.imuln=function(e){n("number"==typeof e),n(e<67108864);for(var t=0,i=0;i<this.length;i++){var a=(0|this.words[i])*e,r=(67108863&a)+(67108863&t);t>>=26,t+=a/67108864|0,t+=r>>>26,this.words[i]=67108863&r}return 0!==t&&(this.words[i]=t,this.length++),this},r.prototype.muln=function(e){return this.clone().imuln(e)},r.prototype.sqr=function(){return this.mul(this)},r.prototype.isqr=function(){return this.imul(this.clone())},r.prototype.pow=function(e){var t=function(e){for(var t=new Array(e.bitLength()),i=0;i<t.length;i++){var n=i/26|0,a=i%26;t[i]=(e.words[n]&1<<a)>>>a}return t}(e);if(0===t.length)return new r(1);for(var i=this,n=0;n<t.length&&0===t[n];n++,i=i.sqr());if(++n<t.length)for(var a=i.sqr();n<t.length;n++,a=a.sqr())0!==t[n]&&(i=i.mul(a));return i},r.prototype.iushln=function(e){n("number"==typeof e&&e>=0);var t,i=e%26,a=(e-i)/26,r=67108863>>>26-i<<26-i;if(0!==i){var o=0;for(t=0;t<this.length;t++){var s=this.words[t]&r,c=(0|this.words[t])-s<<i;this.words[t]=c|o,o=s>>>26-i}o&&(this.words[t]=o,this.length++)}if(0!==a){for(t=this.length-1;t>=0;t--)this.words[t+a]=this.words[t];for(t=0;t<a;t++)this.words[t]=0;this.length+=a}return this.strip()},r.prototype.ishln=function(e){return n(0===this.negative),this.iushln(e)},r.prototype.iushrn=function(e,t,i){var a;n("number"==typeof e&&e>=0),a=t?(t-t%26)/26:0;var r=e%26,o=Math.min((e-r)/26,this.length),s=67108863^67108863>>>r<<r,c=i;if(a-=o,a=Math.max(0,a),c){for(var p=0;p<o;p++)c.words[p]=this.words[p];c.length=o}if(0===o);else if(this.length>o)for(this.length-=o,p=0;p<this.length;p++)this.words[p]=this.words[p+o];else this.words[0]=0,this.length=1;var u=0;for(p=this.length-1;p>=0&&(0!==u||p>=a);p--){var f=0|this.words[p];this.words[p]=u<<26-r|f>>>r,u=f&s}return c&&0!==u&&(c.words[c.length++]=u),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},r.prototype.ishrn=function(e,t,i){return n(0===this.negative),this.iushrn(e,t,i)},r.prototype.shln=function(e){return this.clone().ishln(e)},r.prototype.ushln=function(e){return this.clone().iushln(e)},r.prototype.shrn=function(e){return this.clone().ishrn(e)},r.prototype.ushrn=function(e){return this.clone().iushrn(e)},r.prototype.testn=function(e){n("number"==typeof e&&e>=0);var t=e%26,i=(e-t)/26,a=1<<t;return!(this.length<=i)&&!!(this.words[i]&a)},r.prototype.imaskn=function(e){n("number"==typeof e&&e>=0);var t=e%26,i=(e-t)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=i)return this;if(0!==t&&i++,this.length=Math.min(i,this.length),0!==t){var a=67108863^67108863>>>t<<t;this.words[this.length-1]&=a}return this.strip()},r.prototype.maskn=function(e){return this.clone().imaskn(e)},r.prototype.iaddn=function(e){return n("number"==typeof e),n(e<67108864),e<0?this.isubn(-e):0!==this.negative?1===this.length&&(0|this.words[0])<e?(this.words[0]=e-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(e),this.negative=1,this):this._iaddn(e)},r.prototype._iaddn=function(e){this.words[0]+=e;for(var t=0;t<this.length&&this.words[t]>=67108864;t++)this.words[t]-=67108864,t===this.length-1?this.words[t+1]=1:this.words[t+1]++;return this.length=Math.max(this.length,t+1),this},r.prototype.isubn=function(e){if(n("number"==typeof e),n(e<67108864),e<0)return this.iaddn(-e);if(0!==this.negative)return this.negative=0,this.iaddn(e),this.negative=1,this;if(this.words[0]-=e,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var t=0;t<this.length&&this.words[t]<0;t++)this.words[t]+=67108864,this.words[t+1]-=1;return this.strip()},r.prototype.addn=function(e){return this.clone().iaddn(e)},r.prototype.subn=function(e){return this.clone().isubn(e)},r.prototype.iabs=function(){return this.negative=0,this},r.prototype.abs=function(){return this.clone().iabs()},r.prototype._ishlnsubmul=function(e,t,i){var a,r,o=e.length+i;this._expand(o);var s=0;for(a=0;a<e.length;a++){r=(0|this.words[a+i])+s;var c=(0|e.words[a])*t;s=((r-=67108863&c)>>26)-(c/67108864|0),this.words[a+i]=67108863&r}for(;a<this.length-i;a++)s=(r=(0|this.words[a+i])+s)>>26,this.words[a+i]=67108863&r;if(0===s)return this.strip();for(n(-1===s),s=0,a=0;a<this.length;a++)s=(r=-(0|this.words[a])+s)>>26,this.words[a]=67108863&r;return this.negative=1,this.strip()},r.prototype._wordDiv=function(e,t){var i=(this.length,e.length),n=this.clone(),a=e,o=0|a.words[a.length-1];0!==(i=26-this._countBits(o))&&(a=a.ushln(i),n.iushln(i),o=0|a.words[a.length-1]);var s,c=n.length-a.length;if("mod"!==t){(s=new r(null)).length=c+1,s.words=new Array(s.length);for(var p=0;p<s.length;p++)s.words[p]=0}var u=n.clone()._ishlnsubmul(a,1,c);0===u.negative&&(n=u,s&&(s.words[c]=1));for(var f=c-1;f>=0;f--){var l=67108864*(0|n.words[a.length+f])+(0|n.words[a.length+f-1]);for(l=Math.min(l/o|0,67108863),n._ishlnsubmul(a,l,f);0!==n.negative;)l--,n.negative=0,n._ishlnsubmul(a,1,f),n.isZero()||(n.negative^=1);s&&(s.words[f]=l)}return s&&s.strip(),n.strip(),"div"!==t&&0!==i&&n.iushrn(i),{div:s||null,mod:n}},r.prototype.divmod=function(e,t,i){return n(!e.isZero()),this.isZero()?{div:new r(0),mod:new r(0)}:0!==this.negative&&0===e.negative?(s=this.neg().divmod(e,t),"mod"!==t&&(a=s.div.neg()),"div"!==t&&(o=s.mod.neg(),i&&0!==o.negative&&o.iadd(e)),{div:a,mod:o}):0===this.negative&&0!==e.negative?(s=this.divmod(e.neg(),t),"mod"!==t&&(a=s.div.neg()),{div:a,mod:s.mod}):0!=(this.negative&e.negative)?(s=this.neg().divmod(e.neg(),t),"div"!==t&&(o=s.mod.neg(),i&&0!==o.negative&&o.isub(e)),{div:s.div,mod:o}):e.length>this.length||this.cmp(e)<0?{div:new r(0),mod:this}:1===e.length?"div"===t?{div:this.divn(e.words[0]),mod:null}:"mod"===t?{div:null,mod:new r(this.modn(e.words[0]))}:{div:this.divn(e.words[0]),mod:new r(this.modn(e.words[0]))}:this._wordDiv(e,t);var a,o,s},r.prototype.div=function(e){return this.divmod(e,"div",!1).div},r.prototype.mod=function(e){return this.divmod(e,"mod",!1).mod},r.prototype.umod=function(e){return this.divmod(e,"mod",!0).mod},r.prototype.divRound=function(e){var t=this.divmod(e);if(t.mod.isZero())return t.div;var i=0!==t.div.negative?t.mod.isub(e):t.mod,n=e.ushrn(1),a=e.andln(1),r=i.cmp(n);return r<0||1===a&&0===r?t.div:0!==t.div.negative?t.div.isubn(1):t.div.iaddn(1)},r.prototype.modn=function(e){n(e<=67108863);for(var t=(1<<26)%e,i=0,a=this.length-1;a>=0;a--)i=(t*i+(0|this.words[a]))%e;return i},r.prototype.idivn=function(e){n(e<=67108863);for(var t=0,i=this.length-1;i>=0;i--){var a=(0|this.words[i])+67108864*t;this.words[i]=a/e|0,t=a%e}return this.strip()},r.prototype.divn=function(e){return this.clone().idivn(e)},r.prototype.egcd=function(e){n(0===e.negative),n(!e.isZero());var t=this,i=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var a=new r(1),o=new r(0),s=new r(0),c=new r(1),p=0;t.isEven()&&i.isEven();)t.iushrn(1),i.iushrn(1),++p;for(var u=i.clone(),f=t.clone();!t.isZero();){for(var l=0,d=1;0==(t.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(t.iushrn(l);l-- >0;)(a.isOdd()||o.isOdd())&&(a.iadd(u),o.isub(f)),a.iushrn(1),o.iushrn(1);for(var h=0,m=1;0==(i.words[0]&m)&&h<26;++h,m<<=1);if(h>0)for(i.iushrn(h);h-- >0;)(s.isOdd()||c.isOdd())&&(s.iadd(u),c.isub(f)),s.iushrn(1),c.iushrn(1);t.cmp(i)>=0?(t.isub(i),a.isub(s),o.isub(c)):(i.isub(t),s.isub(a),c.isub(o))}return{a:s,b:c,gcd:i.iushln(p)}},r.prototype._invmp=function(e){n(0===e.negative),n(!e.isZero());var t=this,i=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var a,o=new r(1),s=new r(0),c=i.clone();t.cmpn(1)>0&&i.cmpn(1)>0;){for(var p=0,u=1;0==(t.words[0]&u)&&p<26;++p,u<<=1);if(p>0)for(t.iushrn(p);p-- >0;)o.isOdd()&&o.iadd(c),o.iushrn(1);for(var f=0,l=1;0==(i.words[0]&l)&&f<26;++f,l<<=1);if(f>0)for(i.iushrn(f);f-- >0;)s.isOdd()&&s.iadd(c),s.iushrn(1);t.cmp(i)>=0?(t.isub(i),o.isub(s)):(i.isub(t),s.isub(o))}return(a=0===t.cmpn(1)?o:s).cmpn(0)<0&&a.iadd(e),a},r.prototype.gcd=function(e){if(this.isZero())return e.abs();if(e.isZero())return this.abs();var t=this.clone(),i=e.clone();t.negative=0,i.negative=0;for(var n=0;t.isEven()&&i.isEven();n++)t.iushrn(1),i.iushrn(1);for(;;){for(;t.isEven();)t.iushrn(1);for(;i.isEven();)i.iushrn(1);var a=t.cmp(i);if(a<0){var r=t;t=i,i=r}else if(0===a||0===i.cmpn(1))break;t.isub(i)}return i.iushln(n)},r.prototype.invm=function(e){return this.egcd(e).a.umod(e)},r.prototype.isEven=function(){return 0==(1&this.words[0])},r.prototype.isOdd=function(){return 1==(1&this.words[0])},r.prototype.andln=function(e){return this.words[0]&e},r.prototype.bincn=function(e){n("number"==typeof e);var t=e%26,i=(e-t)/26,a=1<<t;if(this.length<=i)return this._expand(i+1),this.words[i]|=a,this;for(var r=a,o=i;0!==r&&o<this.length;o++){var s=0|this.words[o];r=(s+=r)>>>26,s&=67108863,this.words[o]=s}return 0!==r&&(this.words[o]=r,this.length++),this},r.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},r.prototype.cmpn=function(e){var t,i=e<0;if(0!==this.negative&&!i)return-1;if(0===this.negative&&i)return 1;if(this.strip(),this.length>1)t=1;else{i&&(e=-e),n(e<=67108863,"Number is too big");var a=0|this.words[0];t=a===e?0:a<e?-1:1}return 0!==this.negative?0|-t:t},r.prototype.cmp=function(e){if(0!==this.negative&&0===e.negative)return-1;if(0===this.negative&&0!==e.negative)return 1;var t=this.ucmp(e);return 0!==this.negative?0|-t:t},r.prototype.ucmp=function(e){if(this.length>e.length)return 1;if(this.length<e.length)return-1;for(var t=0,i=this.length-1;i>=0;i--){var n=0|this.words[i],a=0|e.words[i];if(n!==a){n<a?t=-1:n>a&&(t=1);break}}return t},r.prototype.gtn=function(e){return 1===this.cmpn(e)},r.prototype.gt=function(e){return 1===this.cmp(e)},r.prototype.gten=function(e){return this.cmpn(e)>=0},r.prototype.gte=function(e){return this.cmp(e)>=0},r.prototype.ltn=function(e){return-1===this.cmpn(e)},r.prototype.lt=function(e){return-1===this.cmp(e)},r.prototype.lten=function(e){return this.cmpn(e)<=0},r.prototype.lte=function(e){return this.cmp(e)<=0},r.prototype.eqn=function(e){return 0===this.cmpn(e)},r.prototype.eq=function(e){return 0===this.cmp(e)},r.red=function(e){return new _(e)},r.prototype.toRed=function(e){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),e.convertTo(this)._forceRed(e)},r.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},r.prototype._forceRed=function(e){return this.red=e,this},r.prototype.forceRed=function(e){return n(!this.red,"Already a number in reduction context"),this._forceRed(e)},r.prototype.redAdd=function(e){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,e)},r.prototype.redIAdd=function(e){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,e)},r.prototype.redSub=function(e){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,e)},r.prototype.redISub=function(e){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,e)},r.prototype.redShl=function(e){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,e)},r.prototype.redMul=function(e){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.mul(this,e)},r.prototype.redIMul=function(e){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.imul(this,e)},r.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},r.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},r.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},r.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},r.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},r.prototype.redPow=function(e){return n(this.red&&!e.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,e)};var b={k256:null,p224:null,p192:null,p25519:null};function v(e,t){this.name=e,this.p=new r(t,16),this.n=this.p.bitLength(),this.k=new r(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function g(){v.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function y(){v.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function x(){v.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function w(){v.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function _(e){if("string"==typeof e){var t=r._prime(e);this.m=t.p,this.prime=t}else n(e.gtn(1),"modulus must be greater than 1"),this.m=e,this.prime=null}function k(e){_.call(this,e),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new r(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}v.prototype._tmp=function(){var e=new r(null);return e.words=new Array(Math.ceil(this.n/13)),e},v.prototype.ireduce=function(e){var t,i=e;do{this.split(i,this.tmp),t=(i=(i=this.imulK(i)).iadd(this.tmp)).bitLength()}while(t>this.n);var n=t<this.n?-1:i.ucmp(this.p);return 0===n?(i.words[0]=0,i.length=1):n>0?i.isub(this.p):i.strip(),i},v.prototype.split=function(e,t){e.iushrn(this.n,0,t)},v.prototype.imulK=function(e){return e.imul(this.k)},a(g,v),g.prototype.split=function(e,t){for(var i=Math.min(e.length,9),n=0;n<i;n++)t.words[n]=e.words[n];if(t.length=i,e.length<=9)return e.words[0]=0,void(e.length=1);var a=e.words[9];for(t.words[t.length++]=4194303&a,n=10;n<e.length;n++){var r=0|e.words[n];e.words[n-10]=(4194303&r)<<4|a>>>22,a=r}a>>>=22,e.words[n-10]=a,0===a&&e.length>10?e.length-=10:e.length-=9},g.prototype.imulK=function(e){e.words[e.length]=0,e.words[e.length+1]=0,e.length+=2;for(var t=0,i=0;i<e.length;i++){var n=0|e.words[i];t+=977*n,e.words[i]=67108863&t,t=64*n+(t/67108864|0)}return 0===e.words[e.length-1]&&(e.length--,0===e.words[e.length-1]&&e.length--),e},a(y,v),a(x,v),a(w,v),w.prototype.imulK=function(e){for(var t=0,i=0;i<e.length;i++){var n=19*(0|e.words[i])+t,a=67108863&n;n>>>=26,e.words[i]=a,t=n}return 0!==t&&(e.words[e.length++]=t),e},r._prime=function(e){if(b[e])return b[e];var t;if("k256"===e)t=new g;else if("p224"===e)t=new y;else if("p192"===e)t=new x;else{if("p25519"!==e)throw new Error("Unknown prime "+e);t=new w}return b[e]=t,t},_.prototype._verify1=function(e){n(0===e.negative,"red works only with positives"),n(e.red,"red works only with red numbers")},_.prototype._verify2=function(e,t){n(0==(e.negative|t.negative),"red works only with positives"),n(e.red&&e.red===t.red,"red works only with red numbers")},_.prototype.imod=function(e){return this.prime?this.prime.ireduce(e)._forceRed(this):e.umod(this.m)._forceRed(this)},_.prototype.neg=function(e){return e.isZero()?e.clone():this.m.sub(e)._forceRed(this)},_.prototype.add=function(e,t){this._verify2(e,t);var i=e.add(t);return i.cmp(this.m)>=0&&i.isub(this.m),i._forceRed(this)},_.prototype.iadd=function(e,t){this._verify2(e,t);var i=e.iadd(t);return i.cmp(this.m)>=0&&i.isub(this.m),i},_.prototype.sub=function(e,t){this._verify2(e,t);var i=e.sub(t);return i.cmpn(0)<0&&i.iadd(this.m),i._forceRed(this)},_.prototype.isub=function(e,t){this._verify2(e,t);var i=e.isub(t);return i.cmpn(0)<0&&i.iadd(this.m),i},_.prototype.shl=function(e,t){return this._verify1(e),this.imod(e.ushln(t))},_.prototype.imul=function(e,t){return this._verify2(e,t),this.imod(e.imul(t))},_.prototype.mul=function(e,t){return this._verify2(e,t),this.imod(e.mul(t))},_.prototype.isqr=function(e){return this.imul(e,e.clone())},_.prototype.sqr=function(e){return this.mul(e,e)},_.prototype.sqrt=function(e){if(e.isZero())return e.clone();var t=this.m.andln(3);if(n(t%2==1),3===t){var i=this.m.add(new r(1)).iushrn(2);return this.pow(e,i)}for(var a=this.m.subn(1),o=0;!a.isZero()&&0===a.andln(1);)o++,a.iushrn(1);n(!a.isZero());var s=new r(1).toRed(this),c=s.redNeg(),p=this.m.subn(1).iushrn(1),u=this.m.bitLength();for(u=new r(2*u*u).toRed(this);0!==this.pow(u,p).cmp(c);)u.redIAdd(c);for(var f=this.pow(u,a),l=this.pow(e,a.addn(1).iushrn(1)),d=this.pow(e,a),h=o;0!==d.cmp(s);){for(var m=d,b=0;0!==m.cmp(s);b++)m=m.redSqr();n(b<h);var v=this.pow(f,new r(1).iushln(h-b-1));l=l.redMul(v),f=v.redSqr(),d=d.redMul(f),h=b}return l},_.prototype.invm=function(e){var t=e._invmp(this.m);return 0!==t.negative?(t.negative=0,this.imod(t).redNeg()):this.imod(t)},_.prototype.pow=function(e,t){if(t.isZero())return new r(1).toRed(this);if(0===t.cmpn(1))return e.clone();var i=new Array(16);i[0]=new r(1).toRed(this),i[1]=e;for(var n=2;n<i.length;n++)i[n]=this.mul(i[n-1],e);var a=i[0],o=0,s=0,c=t.bitLength()%26;for(0===c&&(c=26),n=t.length-1;n>=0;n--){for(var p=t.words[n],u=c-1;u>=0;u--){var f=p>>u&1;a!==i[0]&&(a=this.sqr(a)),0!==f||0!==o?(o<<=1,o|=f,(4===++s||0===n&&0===u)&&(a=this.mul(a,i[o]),s=0,o=0)):s=0}c=26}return a},_.prototype.convertTo=function(e){var t=e.umod(this.m);return t===e?t.clone():t},_.prototype.convertFrom=function(e){var t=e.clone();return t.red=null,t},r.mont=function(e){return new k(e)},a(k,_),k.prototype.convertTo=function(e){return this.imod(e.ushln(this.shift))},k.prototype.convertFrom=function(e){var t=this.imod(e.mul(this.rinv));return t.red=null,t},k.prototype.imul=function(e,t){if(e.isZero()||t.isZero())return e.words[0]=0,e.length=1,e;var i=e.imul(t),n=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),a=i.isub(n).iushrn(this.shift),r=a;return a.cmp(this.m)>=0?r=a.isub(this.m):a.cmpn(0)<0&&(r=a.iadd(this.m)),r._forceRed(this)},k.prototype.mul=function(e,t){if(e.isZero()||t.isZero())return new r(0)._forceRed(this);var i=e.mul(t),n=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),a=i.isub(n).iushrn(this.shift),o=a;return a.cmp(this.m)>=0?o=a.isub(this.m):a.cmpn(0)<0&&(o=a.iadd(this.m)),o._forceRed(this)},k.prototype.invm=function(e){return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)}}(e,this)}).call(this,i(56)(e))},function(e,t){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(e){"object"==typeof window&&(i=window)}e.exports=i},function(e,t){function i(e,t){if(!e)throw new Error(t||"Assertion failed")}e.exports=i,i.equal=function(e,t,i){if(e!=t)throw new Error(i||"Assertion failed: "+e+" != "+t)}},function(e,t,i){"use strict";var n=t,a=i(4),r=i(6),o=i(116);n.assert=r,n.toArray=o.toArray,n.zero2=o.zero2,n.toHex=o.toHex,n.encode=o.encode,n.getNAF=function(e,t,i){var n=new Array(Math.max(e.bitLength(),i)+1);n.fill(0);for(var a=1<<t+1,r=e.clone(),o=0;o<n.length;o++){var s,c=r.andln(a-1);r.isOdd()?(s=c>(a>>1)-1?(a>>1)-c:c,r.isubn(s)):s=0,n[o]=s,r.iushrn(1)}return n},n.getJSF=function(e,t){var i=[[],[]];e=e.clone(),t=t.clone();for(var n=0,a=0;e.cmpn(-n)>0||t.cmpn(-a)>0;){var r,o,s,c=e.andln(3)+n&3,p=t.andln(3)+a&3;if(3===c&&(c=-1),3===p&&(p=-1),0==(1&c))r=0;else r=3!==(s=e.andln(7)+n&7)&&5!==s||2!==p?c:-c;if(i[0].push(r),0==(1&p))o=0;else o=3!==(s=t.andln(7)+a&7)&&5!==s||2!==c?p:-p;i[1].push(o),2*n===r+1&&(n=1-n),2*a===o+1&&(a=1-a),e.iushrn(1),t.iushrn(1)}return i},n.cachedProperty=function(e,t,i){var n="_"+t;e.prototype[t]=function(){return void 0!==this[n]?this[n]:this[n]=i.call(this)}},n.parseBytes=function(e){return"string"==typeof e?n.toArray(e,"hex"):e},n.intFromLE=function(e){return new a(e,"hex","le")}},function(e,t,i){(function(n){function a(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==n&&"env"in n&&(e=n.env.DEBUG),e}(t=e.exports=i(139)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var i=this.useColors;if(e[0]=(i?"%c":"")+this.namespace+(i?" %c":" ")+e[0]+(i?"%c ":" ")+"+"+t.humanize(this.diff),!i)return;var n="color: "+this.color;e.splice(1,0,n,"color: inherit");var a=0,r=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(a++,"%c"===e&&(r=a))})),e.splice(r,0,n)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=a,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(a())}).call(this,i(3))},function(e,t,i){"use strict";
/*!
 * depd
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */function n(e,t){if("function"!=typeof e)throw new TypeError("argument fn must be a function");return e}function a(e,t,i){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("argument obj must be object");var n=Object.getOwnPropertyDescriptor(e,t);if(!n)throw new TypeError("must call property on owner object");if(!n.configurable)throw new TypeError("property must be configurable")}e.exports=function(e){if(!e)throw new TypeError("argument namespace is required");function t(e){}return t._file=void 0,t._ignored=!0,t._namespace=e,t._traced=!1,t._warned=Object.create(null),t.function=n,t.property=a,t}},function(e,t,i){"use strict";var n=i(6),a=i(0);function r(e,t){return 55296==(64512&e.charCodeAt(t))&&(!(t<0||t+1>=e.length)&&56320==(64512&e.charCodeAt(t+1)))}function o(e){return(e>>>24|e>>>8&65280|e<<8&16711680|(255&e)<<24)>>>0}function s(e){return 1===e.length?"0"+e:e}function c(e){return 7===e.length?"0"+e:6===e.length?"00"+e:5===e.length?"000"+e:4===e.length?"0000"+e:3===e.length?"00000"+e:2===e.length?"000000"+e:1===e.length?"0000000"+e:e}t.inherits=a,t.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var i=[];if("string"==typeof e)if(t){if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),a=0;a<e.length;a+=2)i.push(parseInt(e[a]+e[a+1],16))}else for(var n=0,a=0;a<e.length;a++){var o=e.charCodeAt(a);o<128?i[n++]=o:o<2048?(i[n++]=o>>6|192,i[n++]=63&o|128):r(e,a)?(o=65536+((1023&o)<<10)+(1023&e.charCodeAt(++a)),i[n++]=o>>18|240,i[n++]=o>>12&63|128,i[n++]=o>>6&63|128,i[n++]=63&o|128):(i[n++]=o>>12|224,i[n++]=o>>6&63|128,i[n++]=63&o|128)}else for(a=0;a<e.length;a++)i[a]=0|e[a];return i},t.toHex=function(e){for(var t="",i=0;i<e.length;i++)t+=s(e[i].toString(16));return t},t.htonl=o,t.toHex32=function(e,t){for(var i="",n=0;n<e.length;n++){var a=e[n];"little"===t&&(a=o(a)),i+=c(a.toString(16))}return i},t.zero2=s,t.zero8=c,t.join32=function(e,t,i,a){var r=i-t;n(r%4==0);for(var o=new Array(r/4),s=0,c=t;s<o.length;s++,c+=4){var p;p="big"===a?e[c]<<24|e[c+1]<<16|e[c+2]<<8|e[c+3]:e[c+3]<<24|e[c+2]<<16|e[c+1]<<8|e[c],o[s]=p>>>0}return o},t.split32=function(e,t){for(var i=new Array(4*e.length),n=0,a=0;n<e.length;n++,a+=4){var r=e[n];"big"===t?(i[a]=r>>>24,i[a+1]=r>>>16&255,i[a+2]=r>>>8&255,i[a+3]=255&r):(i[a+3]=r>>>24,i[a+2]=r>>>16&255,i[a+1]=r>>>8&255,i[a]=255&r)}return i},t.rotr32=function(e,t){return e>>>t|e<<32-t},t.rotl32=function(e,t){return e<<t|e>>>32-t},t.sum32=function(e,t){return e+t>>>0},t.sum32_3=function(e,t,i){return e+t+i>>>0},t.sum32_4=function(e,t,i,n){return e+t+i+n>>>0},t.sum32_5=function(e,t,i,n,a){return e+t+i+n+a>>>0},t.sum64=function(e,t,i,n){var a=e[t],r=n+e[t+1]>>>0,o=(r<n?1:0)+i+a;e[t]=o>>>0,e[t+1]=r},t.sum64_hi=function(e,t,i,n){return(t+n>>>0<t?1:0)+e+i>>>0},t.sum64_lo=function(e,t,i,n){return t+n>>>0},t.sum64_4_hi=function(e,t,i,n,a,r,o,s){var c=0,p=t;return c+=(p=p+n>>>0)<t?1:0,c+=(p=p+r>>>0)<r?1:0,e+i+a+o+(c+=(p=p+s>>>0)<s?1:0)>>>0},t.sum64_4_lo=function(e,t,i,n,a,r,o,s){return t+n+r+s>>>0},t.sum64_5_hi=function(e,t,i,n,a,r,o,s,c,p){var u=0,f=t;return u+=(f=f+n>>>0)<t?1:0,u+=(f=f+r>>>0)<r?1:0,u+=(f=f+s>>>0)<s?1:0,e+i+a+o+c+(u+=(f=f+p>>>0)<p?1:0)>>>0},t.sum64_5_lo=function(e,t,i,n,a,r,o,s,c,p){return t+n+r+s+p>>>0},t.rotr64_hi=function(e,t,i){return(t<<32-i|e>>>i)>>>0},t.rotr64_lo=function(e,t,i){return(e<<32-i|t>>>i)>>>0},t.shr64_hi=function(e,t,i){return e>>>i},t.shr64_lo=function(e,t,i){return(e<<32-i|t>>>i)>>>0}},function(e,t,i){(function(e){function i(e,t){for(var i=0,n=e.length-1;n>=0;n--){var a=e[n];"."===a?e.splice(n,1):".."===a?(e.splice(n,1),i++):i&&(e.splice(n,1),i--)}if(t)for(;i--;i)e.unshift("..");return e}function n(e,t){if(e.filter)return e.filter(t);for(var i=[],n=0;n<e.length;n++)t(e[n],n,e)&&i.push(e[n]);return i}t.resolve=function(){for(var t="",a=!1,r=arguments.length-1;r>=-1&&!a;r--){var o=r>=0?arguments[r]:e.cwd();if("string"!=typeof o)throw new TypeError("Arguments to path.resolve must be strings");o&&(t=o+"/"+t,a="/"===o.charAt(0))}return(a?"/":"")+(t=i(n(t.split("/"),(function(e){return!!e})),!a).join("/"))||"."},t.normalize=function(e){var r=t.isAbsolute(e),o="/"===a(e,-1);return(e=i(n(e.split("/"),(function(e){return!!e})),!r).join("/"))||r||(e="."),e&&o&&(e+="/"),(r?"/":"")+e},t.isAbsolute=function(e){return"/"===e.charAt(0)},t.join=function(){var e=Array.prototype.slice.call(arguments,0);return t.normalize(n(e,(function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e})).join("/"))},t.relative=function(e,i){function n(e){for(var t=0;t<e.length&&""===e[t];t++);for(var i=e.length-1;i>=0&&""===e[i];i--);return t>i?[]:e.slice(t,i-t+1)}e=t.resolve(e).substr(1),i=t.resolve(i).substr(1);for(var a=n(e.split("/")),r=n(i.split("/")),o=Math.min(a.length,r.length),s=o,c=0;c<o;c++)if(a[c]!==r[c]){s=c;break}var p=[];for(c=s;c<a.length;c++)p.push("..");return(p=p.concat(r.slice(s))).join("/")},t.sep="/",t.delimiter=":",t.dirname=function(e){if("string"!=typeof e&&(e+=""),0===e.length)return".";for(var t=e.charCodeAt(0),i=47===t,n=-1,a=!0,r=e.length-1;r>=1;--r)if(47===(t=e.charCodeAt(r))){if(!a){n=r;break}}else a=!1;return-1===n?i?"/":".":i&&1===n?"/":e.slice(0,n)},t.basename=function(e,t){var i=function(e){"string"!=typeof e&&(e+="");var t,i=0,n=-1,a=!0;for(t=e.length-1;t>=0;--t)if(47===e.charCodeAt(t)){if(!a){i=t+1;break}}else-1===n&&(a=!1,n=t+1);return-1===n?"":e.slice(i,n)}(e);return t&&i.substr(-1*t.length)===t&&(i=i.substr(0,i.length-t.length)),i},t.extname=function(e){"string"!=typeof e&&(e+="");for(var t=-1,i=0,n=-1,a=!0,r=0,o=e.length-1;o>=0;--o){var s=e.charCodeAt(o);if(47!==s)-1===n&&(a=!1,n=o+1),46===s?-1===t?t=o:1!==r&&(r=1):-1!==t&&(r=-1);else if(!a){i=o+1;break}}return-1===t||-1===n||0===r||1===r&&t===n-1&&t===i+1?"":e.slice(t,n)};var a="b"==="ab".substr(-1)?function(e,t,i){return e.substr(t,i)}:function(e,t,i){return t<0&&(t=e.length+t),e.substr(t,i)}}).call(this,i(3))},function(e,t,i){var n=i(1).Buffer,a=i(16).Transform,r=i(36).StringDecoder;function o(e){a.call(this),this.hashMode="string"==typeof e,this.hashMode?this[e]=this._finalOrDigest:this.final=this._finalOrDigest,this._final&&(this.__final=this._final,this._final=null),this._decoder=null,this._encoding=null}i(0)(o,a),o.prototype.update=function(e,t,i){"string"==typeof e&&(e=n.from(e,t));var a=this._update(e);return this.hashMode?this:(i&&(a=this._toString(a,i)),a)},o.prototype.setAutoPadding=function(){},o.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},o.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},o.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},o.prototype._transform=function(e,t,i){var n;try{this.hashMode?this._update(e):this.push(this._update(e))}catch(e){n=e}finally{i(n)}},o.prototype._flush=function(e){var t;try{this.push(this.__final())}catch(e){t=e}e(t)},o.prototype._finalOrDigest=function(e){var t=this.__final()||n.alloc(0);return e&&(t=this._toString(t,e,!0)),t},o.prototype._toString=function(e,t,i){if(this._decoder||(this._decoder=new r(t),this._encoding=t),this._encoding!==t)throw new Error("can't switch encodings");var n=this._decoder.write(e);return i&&(n+=this._decoder.end()),n},e.exports=o},function(e,t,i){"use strict";var n=i(39),a=Object.keys||function(e){var t=[];for(var i in e)t.push(i);return t};e.exports=f;var r=Object.create(i(25));r.inherits=i(0);var o=i(77),s=i(51);r.inherits(f,o);for(var c=a(s.prototype),p=0;p<c.length;p++){var u=c[p];f.prototype[u]||(f.prototype[u]=s.prototype[u])}function f(e){if(!(this instanceof f))return new f(e);o.call(this,e),s.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",l)}function l(){this.allowHalfOpen||this._writableState.ended||n.nextTick(d,this)}function d(e){e.end()}Object.defineProperty(f.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(f.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),f.prototype._destroy=function(e,t){this.push(null),this.end(),n.nextTick(t,e)}},function(e,t,i){"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(93).Buffer,a=i(94),r=i(33),o=i(9)("express"),s=i(43),c=i(59).mime,p=i(95),u=i(131),f=i(53),l=i(54);function d(e){return function(t,i){var a=n.isBuffer(t)?t:n.from(t,i);return p(a,e)}}function h(e){return f.parse(e,{allowPrototypes:!0})}function m(){return{}}t.etag=d({weak:!1}),t.wetag=d({weak:!0}),t.isAbsolute=function(e){return"/"===e[0]||(":"===e[1]&&("\\"===e[2]||"/"===e[2])||("\\\\"===e.substring(0,2)||void 0))},t.flatten=o.function(s,"utils.flatten: use array-flatten npm module instead"),t.normalizeType=function(e){return~e.indexOf("/")?function(e,t){for(var i=e.split(/ *; */),n={value:i[0],quality:1,params:{},originalIndex:t},a=1;a<i.length;++a){var r=i[a].split(/ *= */);"q"===r[0]?n.quality=parseFloat(r[1]):n.params[r[0]]=r[1]}return n}(e):{value:c.lookup(e),params:{}}},t.normalizeTypes=function(e){for(var i=[],n=0;n<e.length;++n)i.push(t.normalizeType(e[n]));return i},t.contentDisposition=o.function(a,"utils.contentDisposition: use content-disposition npm module instead"),t.compileETag=function(e){var i;if("function"==typeof e)return e;switch(e){case!0:i=t.wetag;break;case!1:break;case"strong":i=t.etag;break;case"weak":i=t.wetag;break;default:throw new TypeError("unknown value for etag function: "+e)}return i},t.compileQueryParser=function(e){var t;if("function"==typeof e)return e;switch(e){case!0:t=l.parse;break;case!1:t=m;break;case"extended":t=h;break;case"simple":t=l.parse;break;default:throw new TypeError("unknown value for query parser function: "+e)}return t},t.compileTrust=function(e){return"function"==typeof e?e:!0===e?function(){return!0}:"number"==typeof e?function(t,i){return i<e}:("string"==typeof e&&(e=e.split(/ *, */)),u.compile(e||[]))},t.setCharset=function(e,t){if(!e||!t)return e;var i=r.parse(e);return i.parameters.charset=t,r.format(i)}},function(e,t,i){"use strict";(function(t){var n,a=i(2),r=a.Buffer,o={};for(n in a)a.hasOwnProperty(n)&&"SlowBuffer"!==n&&"Buffer"!==n&&(o[n]=a[n]);var s=o.Buffer={};for(n in r)r.hasOwnProperty(n)&&"allocUnsafe"!==n&&"allocUnsafeSlow"!==n&&(s[n]=r[n]);if(o.Buffer.prototype=r.prototype,s.from&&s.from!==Uint8Array.from||(s.from=function(e,t,i){if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type '+typeof e);if(e&&void 0===e.length)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);return r(e,t,i)}),s.alloc||(s.alloc=function(e,t,i){if("number"!=typeof e)throw new TypeError('The "size" argument must be of type number. Received type '+typeof e);if(e<0||e>=2*(1<<30))throw new RangeError('The value "'+e+'" is invalid for option "size"');var n=r(e);return t&&0!==t.length?"string"==typeof i?n.fill(t,i):n.fill(t):n.fill(0),n}),!o.kStringMaxLength)try{o.kStringMaxLength=t.binding("buffer").kStringMaxLength}catch(e){}o.constants||(o.constants={MAX_LENGTH:o.kMaxLength},o.kStringMaxLength&&(o.constants.MAX_STRING_LENGTH=o.kStringMaxLength)),e.exports=o}).call(this,i(3))},function(e,t,i){e.exports=a;var n=i(38).EventEmitter;function a(){n.call(this)}i(0)(a,n),a.Readable=i(24),a.Writable=i(169),a.Duplex=i(170),a.Transform=i(171),a.PassThrough=i(172),a.Stream=a,a.prototype.pipe=function(e,t){var i=this;function a(t){e.writable&&!1===e.write(t)&&i.pause&&i.pause()}function r(){i.readable&&i.resume&&i.resume()}i.on("data",a),e.on("drain",r),e._isStdio||t&&!1===t.end||(i.on("end",s),i.on("close",c));var o=!1;function s(){o||(o=!0,e.end())}function c(){o||(o=!0,"function"==typeof e.destroy&&e.destroy())}function p(e){if(u(),0===n.listenerCount(this,"error"))throw e}function u(){i.removeListener("data",a),e.removeListener("drain",r),i.removeListener("end",s),i.removeListener("close",c),i.removeListener("error",p),e.removeListener("error",p),i.removeListener("end",u),i.removeListener("close",u),e.removeListener("close",u)}return i.on("error",p),e.on("error",p),i.on("end",u),i.on("close",u),e.on("close",u),e.emit("pipe",i),e}},function(e,t){},function(e,t,i){"use strict";(function(t,n){var a=i(1).Buffer,r=t.crypto||t.msCrypto;r&&r.getRandomValues?e.exports=function(e,t){if(e>4294967295)throw new RangeError("requested too many random bytes");var i=a.allocUnsafe(e);if(e>0)if(e>65536)for(var o=0;o<e;o+=65536)r.getRandomValues(i.slice(o,o+65536));else r.getRandomValues(i);if("function"==typeof t)return n.nextTick((function(){t(null,i)}));return i}:e.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}}).call(this,i(5),i(3))},function(e,t,i){var n=i(1).Buffer;function a(e,t){this._block=n.alloc(e),this._finalSize=t,this._blockSize=e,this._len=0}a.prototype.update=function(e,t){"string"==typeof e&&(t=t||"utf8",e=n.from(e,t));for(var i=this._block,a=this._blockSize,r=e.length,o=this._len,s=0;s<r;){for(var c=o%a,p=Math.min(r-s,a-c),u=0;u<p;u++)i[c+u]=e[s+u];s+=p,(o+=p)%a==0&&this._update(i)}return this._len+=r,this},a.prototype.digest=function(e){var t=this._len%this._blockSize;this._block[t]=128,this._block.fill(0,t+1),t>=this._finalSize&&(this._update(this._block),this._block.fill(0));var i=8*this._len;if(i<=4294967295)this._block.writeUInt32BE(i,this._blockSize-4);else{var n=(4294967295&i)>>>0,a=(i-n)/4294967296;this._block.writeUInt32BE(a,this._blockSize-8),this._block.writeUInt32BE(n,this._blockSize-4)}this._update(this._block);var r=this._hash();return e?r.toString(e):r},a.prototype._update=function(){throw new Error("_update must be implemented by subclass")},e.exports=a},function(e,t,i){"use strict";
/*!
 * bytes
 * Copyright(c) 2012-2014 TJ Holowaychuk
 * Copyright(c) 2015 Jed Watson
 * MIT Licensed
 */e.exports=function(e,t){if("string"==typeof e)return c(e);if("number"==typeof e)return s(e,t);return null},e.exports.format=s,e.exports.parse=c;var n=/\B(?=(\d{3})+(?!\d))/g,a=/(?:\.0*|(\.[^0]+)0+)$/,r={b:1,kb:1024,mb:1<<20,gb:1<<30,tb:Math.pow(1024,4),pb:Math.pow(1024,5)},o=/^((-|\+)?(\d+(?:\.\d+)?)) *(kb|mb|gb|tb|pb)$/i;function s(e,t){if(!Number.isFinite(e))return null;var i=Math.abs(e),o=t&&t.thousandsSeparator||"",s=t&&t.unitSeparator||"",c=t&&void 0!==t.decimalPlaces?t.decimalPlaces:2,p=Boolean(t&&t.fixedDecimals),u=t&&t.unit||"";u&&r[u.toLowerCase()]||(u=i>=r.pb?"PB":i>=r.tb?"TB":i>=r.gb?"GB":i>=r.mb?"MB":i>=r.kb?"KB":"B");var f=(e/r[u.toLowerCase()]).toFixed(c);return p||(f=f.replace(a,"$1")),o&&(f=f.replace(n,o)),f+s+u}function c(e){if("number"==typeof e&&!isNaN(e))return e;if("string"!=typeof e)return null;var t,i=o.exec(e),n="b";return i?(t=parseFloat(i[1]),n=i[4].toLowerCase()):(t=parseInt(e,10),n="b"),Math.floor(r[n]*t)}},function(e,t,i){"use strict";e.exports=Object.setPrototypeOf||({__proto__:[]}instanceof Array?function(e,t){return e.__proto__=t,e}:function(e,t){for(var i in t)e.hasOwnProperty(i)||(e[i]=t[i]);return e})},function(e,t,i){"use strict";
/*!
 * statuses
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(137);function a(e){if("number"==typeof e){if(!a[e])throw new Error("invalid status code: "+e);return e}if("string"!=typeof e)throw new TypeError("code must be a number or string");var t=parseInt(e,10);if(!isNaN(t)){if(!a[t])throw new Error("invalid status code: "+t);return t}if(!(t=a[e.toLowerCase()]))throw new Error('invalid status message: "'+e+'"');return t}e.exports=a,a.STATUS_CODES=n,a.codes=function(e,t){var i=[];return Object.keys(t).forEach((function(n){var a=t[n],r=Number(n);e[r]=a,e[a]=r,e[a.toLowerCase()]=r,i.push(r)})),i}(a,n),a.redirect={300:!0,301:!0,302:!0,303:!0,305:!0,307:!0,308:!0},a.empty={204:!0,205:!0,304:!0},a.retry={502:!0,503:!0,504:!0}},function(e,t,i){(function(e){var n=void 0!==e&&e||"undefined"!=typeof self&&self||window,a=Function.prototype.apply;function r(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new r(a.call(setTimeout,n,arguments),clearTimeout)},t.setInterval=function(){return new r(a.call(setInterval,n,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},r.prototype.unref=r.prototype.ref=function(){},r.prototype.close=function(){this._clearFn.call(n,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},i(161),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,i(5))},function(e,t,i){(t=e.exports=i(77)).Stream=t,t.Readable=t,t.Writable=i(51),t.Duplex=i(13),t.Transform=i(80),t.PassThrough=i(168)},function(e,t,i){(function(e){function i(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===i(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===i(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===i(e)},t.isError=function(e){return"[object Error]"===i(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(this,i(2).Buffer)},function(e,t,i){"use strict";
/*!
 * type-is
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(185),a=i(84);function r(e,t){var i,n,a=t,r=p(e);if(!r)return!1;if(a&&!Array.isArray(a))for(a=new Array(arguments.length-1),i=0;i<a.length;i++)a[i]=arguments[i+1];if(!a||!a.length)return r;for(i=0;i<a.length;i++)if(c(s(n=a[i]),r))return"+"===n[0]||-1!==n.indexOf("*")?r:n;return!1}function o(e){return void 0!==e.headers["transfer-encoding"]||!isNaN(e.headers["content-length"])}function s(e){if("string"!=typeof e)return!1;switch(e){case"urlencoded":return"application/x-www-form-urlencoded";case"multipart":return"multipart/*"}return"+"===e[0]?"*/*"+e:-1===e.indexOf("/")?a.lookup(e):e}function c(e,t){if(!1===e)return!1;var i=t.split("/"),n=e.split("/");return 2===i.length&&2===n.length&&(("*"===n[0]||n[0]===i[0])&&("*+"===n[1].substr(0,2)?n[1].length<=i[1].length+1&&n[1].substr(1)===i[1].substr(1-n[1].length):"*"===n[1]||n[1]===i[1]))}function p(e){if(!e)return null;try{return function(e){var t=n.parse(e);return t.parameters=void 0,n.format(t)}(e)}catch(e){return null}}e.exports=function(e,t){var i=t;if(!o(e))return null;if(arguments.length>2){i=new Array(arguments.length-1);for(var n=0;n<i.length;n++)i[n]=arguments[n+1]}var a=e.headers["content-type"];return r(a,i)},e.exports.is=r,e.exports.hasBody=o,e.exports.normalize=s,e.exports.match=c},function(e,t,i){"use strict";
/*!
 * parseurl
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(55),a=n.parse,r=n.Url;function o(e){var t=e.url;if(void 0!==t){var i=e._parsedUrl;return c(t,i)?i:((i=s(t))._raw=t,e._parsedUrl=i)}}function s(e){if("string"!=typeof e||47!==e.charCodeAt(0))return a(e);for(var t=e,i=null,n=null,o=1;o<e.length;o++)switch(e.charCodeAt(o)){case 63:null===n&&(t=e.substring(0,o),i=e.substring(o+1),n=e.substring(o));break;case 9:case 10:case 12:case 13:case 32:case 35:case 160:case 65279:return a(e)}var s=void 0!==r?new r:{};return s.path=e,s.href=e,s.pathname=t,null!==n&&(s.query=i,s.search=n),s}function c(e,t){return"object"==typeof t&&null!==t&&(void 0===r||t instanceof r)&&t._raw===e}e.exports=o,e.exports.original=function(e){var t=e.originalUrl;if("string"!=typeof t)return o(e);var i=e._parsedOriginalUrl;if(c(t,i))return i;return(i=s(t))._raw=t,e._parsedOriginalUrl=i}},function(e,t,i){"use strict";var n=i(0),a=i(60),r=i(61),o=i(62),s=i(12);function c(e){s.call(this,"digest"),this._hash=e}n(c,s),c.prototype._update=function(e){this._hash.update(e)},c.prototype._final=function(){return this._hash.digest()},e.exports=function(e){return"md5"===(e=e.toLowerCase())?new a:"rmd160"===e||"ripemd160"===e?new r:new c(o(e))}},function(e,t,i){(function(t){e.exports=function(e,i){for(var n=Math.min(e.length,i.length),a=new t(n),r=0;r<n;++r)a[r]=e[r]^i[r];return a}}).call(this,i(2).Buffer)},function(e,t,i){"use strict";var n=i(10),a=i(6);function r(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}t.BlockHash=r,r.prototype.update=function(e,t){if(e=n.toArray(e,t),this.pending?this.pending=this.pending.concat(e):this.pending=e,this.pendingTotal+=e.length,this.pending.length>=this._delta8){var i=(e=this.pending).length%this._delta8;this.pending=e.slice(e.length-i,e.length),0===this.pending.length&&(this.pending=null),e=n.join32(e,0,e.length-i,this.endian);for(var a=0;a<e.length;a+=this._delta32)this._update(e,a,a+this._delta32)}return this},r.prototype.digest=function(e){return this.update(this._pad()),a(null===this.pending),this._digest(e)},r.prototype._pad=function(){var e=this.pendingTotal,t=this._delta8,i=t-(e+this.padLength)%t,n=new Array(i+this.padLength);n[0]=128;for(var a=1;a<i;a++)n[a]=0;if(e<<=3,"big"===this.endian){for(var r=8;r<this.padLength;r++)n[a++]=0;n[a++]=0,n[a++]=0,n[a++]=0,n[a++]=0,n[a++]=e>>>24&255,n[a++]=e>>>16&255,n[a++]=e>>>8&255,n[a++]=255&e}else for(n[a++]=255&e,n[a++]=e>>>8&255,n[a++]=e>>>16&255,n[a++]=e>>>24&255,n[a++]=0,n[a++]=0,n[a++]=0,n[a++]=0,r=8;r<this.padLength;r++)n[a++]=0;return n}},function(e,t,i){var n=t;n.bignum=i(4),n.define=i(260).define,n.base=i(32),n.constants=i(122),n.decoders=i(265),n.encoders=i(267)},function(e,t,i){var n=t;n.Reporter=i(262).Reporter,n.DecoderBuffer=i(121).DecoderBuffer,n.EncoderBuffer=i(121).EncoderBuffer,n.Node=i(263)},function(e,t,i){"use strict";
/*!
 * content-type
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=/; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g,a=/^[\u000b\u0020-\u007e\u0080-\u00ff]+$/,r=/^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/,o=/\\([\u000b\u0020-\u00ff])/g,s=/([\\"])/g,c=/^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;function p(e){var t=String(e);if(r.test(t))return t;if(t.length>0&&!a.test(t))throw new TypeError("invalid parameter value");return'"'+t.replace(s,"\\$1")+'"'}function u(e){this.parameters=Object.create(null),this.type=e}t.format=function(e){if(!e||"object"!=typeof e)throw new TypeError("argument obj is required");var t=e.parameters,i=e.type;if(!i||!c.test(i))throw new TypeError("invalid type");var n=i;if(t&&"object"==typeof t)for(var a,o=Object.keys(t).sort(),s=0;s<o.length;s++){if(a=o[s],!r.test(a))throw new TypeError("invalid parameter name");n+="; "+a+"="+p(t[a])}return n},t.parse=function(e){if(!e)throw new TypeError("argument string is required");var t="object"==typeof e?function(e){var t;"function"==typeof e.getHeader?t=e.getHeader("content-type"):"object"==typeof e.headers&&(t=e.headers&&e.headers["content-type"]);if("string"!=typeof t)throw new TypeError("content-type header is missing from object");return t}(e):e;if("string"!=typeof t)throw new TypeError("argument string is required to be a string");var i=t.indexOf(";"),a=-1!==i?t.substr(0,i).trim():t.trim();if(!c.test(a))throw new TypeError("invalid media type");var r=new u(a.toLowerCase());if(-1!==i){var s,p,f;for(n.lastIndex=i;p=n.exec(t);){if(p.index!==i)throw new TypeError("invalid parameter format");i+=p[0].length,s=p[1].toLowerCase(),'"'===(f=p[2])[0]&&(f=f.substr(1,f.length-2).replace(o,"$1")),r.parameters[s]=f}if(i!==t.length)throw new TypeError("invalid parameter format")}return r}},function(e,t,i){"use strict";
/*!
 * http-errors
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(9)("http-errors"),a=i(21),r=i(22),o=i(138),s=i(71);function c(e){return Number(String(e).charAt(0)+"00")}function p(e,t){var i=Object.getOwnPropertyDescriptor(e,"name");i&&i.configurable&&(i.value=t,Object.defineProperty(e,"name",i))}e.exports=function e(){for(var t,i,a=500,o={},s=0;s<arguments.length;s++){var p=arguments[s];if(p instanceof Error)a=(t=p).status||t.statusCode||a;else switch(typeof p){case"string":i=p;break;case"number":a=p,0!==s&&n("non-first-argument status code; replace with createError("+p+", ...)");break;case"object":o=p}}"number"==typeof a&&(a<400||a>=600)&&n("non-error status code; use only 4xx or 5xx status codes");("number"!=typeof a||!r[a]&&(a<400||a>=600))&&(a=500);var u=e[a]||e[c(a)];t||(t=u?new u(i):new Error(i||r[a]),Error.captureStackTrace(t,e));u&&t instanceof u&&t.status===a||(t.expose=a<500,t.status=t.statusCode=a);for(var f in o)"status"!==f&&"statusCode"!==f&&(t[f]=o[f]);return t},e.exports.HttpError=function(){function e(){throw new TypeError("cannot construct abstract class")}return o(e,Error),e}(),function(e,t,i){t.forEach((function(t){var n,u=s(r[t]);switch(c(t)){case 400:n=function(e,t,i){var n=t.match(/Error$/)?t:t+"Error";function s(e){var t=null!=e?e:r[i],o=new Error(t);return Error.captureStackTrace(o,s),a(o,s.prototype),Object.defineProperty(o,"message",{enumerable:!0,configurable:!0,value:t,writable:!0}),Object.defineProperty(o,"name",{enumerable:!1,configurable:!0,value:n,writable:!0}),o}return o(s,e),p(s,n),s.prototype.status=i,s.prototype.statusCode=i,s.prototype.expose=!0,s}(i,u,t);break;case 500:n=function(e,t,i){var n=t.match(/Error$/)?t:t+"Error";function s(e){var t=null!=e?e:r[i],o=new Error(t);return Error.captureStackTrace(o,s),a(o,s.prototype),Object.defineProperty(o,"message",{enumerable:!0,configurable:!0,value:t,writable:!0}),Object.defineProperty(o,"name",{enumerable:!1,configurable:!0,value:n,writable:!0}),o}return o(s,e),p(s,n),s.prototype.status=i,s.prototype.statusCode=i,s.prototype.expose=!1,s}(i,u,t)}n&&(e[t]=n,e[u]=n)})),e["I'mateapot"]=n.function(e.ImATeapot,'"I\'mateapot"; use "ImATeapot" instead')}(e.exports,r.codes,e.exports.HttpError)},function(e,t,i){"use strict";
/*!
 * body-parser
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(34),a=i(141),r=i(73),o=i(37),s=i(163);e.exports=function(e,t,i,c,p,u){var f,l,d=u;e._body=!0;var h=null!==d.encoding?d.encoding:null,m=d.verify;try{l=function(e,t,i){var a,r=(e.headers["content-encoding"]||"identity").toLowerCase(),o=e.headers["content-length"];if(t('content-encoding "%s"',r),!1===i&&"identity"!==r)throw n(415,"content encoding unsupported",{encoding:r,type:"encoding.unsupported"});switch(r){case"deflate":a=s.createInflate(),t("inflate body"),e.pipe(a);break;case"gzip":a=s.createGunzip(),t("gunzip body"),e.pipe(a);break;case"identity":(a=e).length=o;break;default:throw n(415,'unsupported content encoding "'+r+'"',{encoding:r,type:"encoding.unsupported"})}return a}(e,p,d.inflate),f=l.length,l.length=void 0}catch(e){return i(e)}if(d.length=f,d.encoding=m?null:h,null===d.encoding&&null!==h&&!r.encodingExists(h))return i(n(415,'unsupported charset "'+h.toUpperCase()+'"',{charset:h.toLowerCase(),type:"charset.unsupported"}));p("read body"),a(l,d,(function(a,s){var u;if(a)return u="encoding.unsupported"===a.type?n(415,'unsupported charset "'+h.toUpperCase()+'"',{charset:h.toLowerCase(),type:"charset.unsupported"}):n(400,a),l.resume(),void o(e,(function(){i(n(400,u))}));if(m)try{p("verify body"),m(e,t,s,h)}catch(e){return void i(n(403,e,{body:s,type:e.type||"entity.verify.failed"}))}var f=s;try{p("parse body"),f="string"!=typeof s&&null!==h?r.decode(s,h):s,e.body=c(f)}catch(e){return void i(n(400,e,{body:f,type:e.type||"entity.parse.failed"}))}i()}))}},function(e,t,i){"use strict";var n=i(1).Buffer,a=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function r(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===a||!a(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=c,this.end=p,t=4;break;case"utf8":this.fillLast=s,t=4;break;case"base64":this.text=u,this.end=f,t=3;break;default:return this.write=l,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function o(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var t=this.lastTotal-this.lastNeed,i=function(e,t,i){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==i?i:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function c(e,t){if((e.length-t)%2==0){var i=e.toString("utf16le",t);if(i){var n=i.charCodeAt(i.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],i.slice(0,-1)}return i}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function p(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var i=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,i)}return t}function u(e,t){var i=(e.length-t)%3;return 0===i?e.toString("base64",t):(this.lastNeed=3-i,this.lastTotal=3,1===i?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-i))}function f(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function l(e){return e.toString(this.encoding)}function d(e){return e&&e.length?this.write(e):""}t.StringDecoder=r,r.prototype.write=function(e){if(0===e.length)return"";var t,i;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";i=this.lastNeed,this.lastNeed=0}else i=0;return i<e.length?t?t+this.text(e,i):this.text(e,i):t||""},r.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},r.prototype.text=function(e,t){var i=function(e,t,i){var n=t.length-1;if(n<i)return 0;var a=o(t[n]);if(a>=0)return a>0&&(e.lastNeed=a-1),a;if(--n<i||-2===a)return 0;if((a=o(t[n]))>=0)return a>0&&(e.lastNeed=a-2),a;if(--n<i||-2===a)return 0;if((a=o(t[n]))>=0)return a>0&&(2===a?a=0:e.lastNeed=a-3),a;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=i;var n=e.length-(i-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},r.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,i){"use strict";(function(t,n){
/*!
 * on-finished
 * Copyright(c) 2013 Jonathan Ong
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */
e.exports=function(e,t){if(!1!==o(e))return r(t,null,e),e;return function(e,t){var i=e.__onFinished;i&&i.queue||(i=e.__onFinished=function(e){function t(i){if(e.__onFinished===t&&(e.__onFinished=null),t.queue){var n=t.queue;t.queue=null;for(var a=0;a<n.length;a++)n[a](i,e)}}return t.queue=[],t}(e),function(e,t){var i,n,r=!1;function o(e){i.cancel(),n.cancel(),r=!0,t(e)}function s(t){e.removeListener("socket",s),r||i===n&&(n=a([[t,"error","close"]],o))}if(i=n=a([[e,"end","finish"]],o),e.socket)return void s(e.socket);e.on("socket",s),void 0===e.socket&&function(e,t){var i=e.assignSocket;if("function"!=typeof i)return;e.assignSocket=function(e){i.call(this,e),t(e)}}(e,s)}(e,i));i.queue.push(t)}(e,t),e},e.exports.isFinished=o;var a=i(162),r="function"==typeof t?t:function(e){n.nextTick(e.bind.apply(e,arguments))};function o(e){var t=e.socket;return"boolean"==typeof e.finished?Boolean(e.finished||t&&!t.writable):"boolean"==typeof e.complete?Boolean(e.upgrade||!t||!t.readable||e.complete&&!e.readable):void 0}}).call(this,i(23).setImmediate,i(3))},function(e,t,i){"use strict";var n,a="object"==typeof Reflect?Reflect:null,r=a&&"function"==typeof a.apply?a.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};n=a&&"function"==typeof a.ownKeys?a.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var c=10;function p(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function u(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function f(e,t,i,n){var a,r,o,s;if(p(i),void 0===(r=e._events)?(r=e._events=Object.create(null),e._eventsCount=0):(void 0!==r.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),r=e._events),o=r[t]),void 0===o)o=r[t]=i,++e._eventsCount;else if("function"==typeof o?o=r[t]=n?[i,o]:[o,i]:n?o.unshift(i):o.push(i),(a=u(e))>0&&o.length>a&&!o.warned){o.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=o.length,s=c,console&&console.warn&&console.warn(s)}return e}function l(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,i){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},a=l.bind(n);return a.listener=i,n.wrapFn=a,a}function h(e,t,i){var n=e._events;if(void 0===n)return[];var a=n[t];return void 0===a?[]:"function"==typeof a?i?[a.listener||a]:[a]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(a):b(a,a.length)}function m(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function b(e,t){for(var i=new Array(t),n=0;n<t;++n)i[n]=e[n];return i}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");c=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return u(this)},s.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var n="error"===e,a=this._events;if(void 0!==a)n=n&&void 0===a.error;else if(!n)return!1;if(n){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var s=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw s.context=o,s}var c=a[e];if(void 0===c)return!1;if("function"==typeof c)r(c,this,t);else{var p=c.length,u=b(c,p);for(i=0;i<p;++i)r(u[i],this,t)}return!0},s.prototype.addListener=function(e,t){return f(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return f(this,e,t,!0)},s.prototype.once=function(e,t){return p(t),this.on(e,d(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){return p(t),this.prependListener(e,d(this,e,t)),this},s.prototype.removeListener=function(e,t){var i,n,a,r,o;if(p(t),void 0===(n=this._events))return this;if(void 0===(i=n[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(a=-1,r=i.length-1;r>=0;r--)if(i[r]===t||i[r].listener===t){o=i[r].listener,a=r;break}if(a<0)return this;0===a?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,a),1===i.length&&(n[e]=i[0]),void 0!==n.removeListener&&this.emit("removeListener",e,o||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,i,n;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var a,r=Object.keys(i);for(n=0;n<r.length;++n)"removeListener"!==(a=r[n])&&this.removeAllListeners(a);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},s.prototype.listeners=function(e){return h(this,e,!0)},s.prototype.rawListeners=function(e){return h(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):m.call(e,t)},s.prototype.listenerCount=m,s.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},function(e,t,i){"use strict";(function(t){void 0===t||!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,i,n,a){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var r,o,s=arguments.length;switch(s){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick((function(){e.call(null,i)}));case 3:return t.nextTick((function(){e.call(null,i,n)}));case 4:return t.nextTick((function(){e.call(null,i,n,a)}));default:for(r=new Array(s-1),o=0;o<r.length;)r[o++]=arguments[o];return t.nextTick((function(){e.apply(null,r)}))}}}:e.exports=t}).call(this,i(3))},function(e,t,i){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function a(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var i=t.shift();if(i){if("object"!=typeof i)throw new TypeError(i+"must be non-object");for(var n in i)a(i,n)&&(e[n]=i[n])}}return e},t.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var r={arraySet:function(e,t,i,n,a){if(t.subarray&&e.subarray)e.set(t.subarray(i,i+n),a);else for(var r=0;r<n;r++)e[a+r]=t[i+r]},flattenChunks:function(e){var t,i,n,a,r,o;for(n=0,t=0,i=e.length;t<i;t++)n+=e[t].length;for(o=new Uint8Array(n),a=0,t=0,i=e.length;t<i;t++)r=e[t],o.set(r,a),a+=r.length;return o}},o={arraySet:function(e,t,i,n,a){for(var r=0;r<n;r++)e[a+r]=t[i+r]},flattenChunks:function(e){return[].concat.apply([],e)}};t.setTyped=function(e){e?(t.Buf8=Uint8Array,t.Buf16=Uint16Array,t.Buf32=Int32Array,t.assign(t,r)):(t.Buf8=Array,t.Buf16=Array,t.Buf32=Array,t.assign(t,o))},t.setTyped(n)},function(e,t,i){"use strict";
/*!
 * encodeurl
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e){return String(e).replace(a,"$1�$2").replace(n,encodeURI)};var n=/(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g,a=/(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g},function(e,t,i){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var n=/["'&<>]/;e.exports=function(e){var t,i=""+e,a=n.exec(i);if(!a)return i;var r="",o=0,s=0;for(o=a.index;o<i.length;o++){switch(i.charCodeAt(o)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#39;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}s!==o&&(r+=i.substring(s,o)),s=o+1,r+=t}return s!==o?r+i.substring(s,o):r}},function(e,t,i){"use strict";e.exports=function(e,t){if(null==t)return function e(t,i){for(var n=0;n<t.length;n++){var a=t[n];Array.isArray(a)?e(a,i):i.push(a)}return i}(e,[]);return function e(t,i,n){for(var a=0;a<t.length;a++){var r=t[a];n>0&&Array.isArray(r)?e(r,i,n-1):i.push(r)}return i}(e,[],t)}},function(e,t){e.exports=function(e,t){if(e&&t)for(var i in t)e[i]=t[i];return e}},function(e,t,i){var n=i(1).Buffer;function a(e){n.isBuffer(e)||(e=n.from(e));for(var t=e.length/4|0,i=new Array(t),a=0;a<t;a++)i[a]=e.readUInt32BE(4*a);return i}function r(e){for(;0<e.length;e++)e[0]=0}function o(e,t,i,n,a){for(var r,o,s,c,p=i[0],u=i[1],f=i[2],l=i[3],d=e[0]^t[0],h=e[1]^t[1],m=e[2]^t[2],b=e[3]^t[3],v=4,g=1;g<a;g++)r=p[d>>>24]^u[h>>>16&255]^f[m>>>8&255]^l[255&b]^t[v++],o=p[h>>>24]^u[m>>>16&255]^f[b>>>8&255]^l[255&d]^t[v++],s=p[m>>>24]^u[b>>>16&255]^f[d>>>8&255]^l[255&h]^t[v++],c=p[b>>>24]^u[d>>>16&255]^f[h>>>8&255]^l[255&m]^t[v++],d=r,h=o,m=s,b=c;return r=(n[d>>>24]<<24|n[h>>>16&255]<<16|n[m>>>8&255]<<8|n[255&b])^t[v++],o=(n[h>>>24]<<24|n[m>>>16&255]<<16|n[b>>>8&255]<<8|n[255&d])^t[v++],s=(n[m>>>24]<<24|n[b>>>16&255]<<16|n[d>>>8&255]<<8|n[255&h])^t[v++],c=(n[b>>>24]<<24|n[d>>>16&255]<<16|n[h>>>8&255]<<8|n[255&m])^t[v++],[r>>>=0,o>>>=0,s>>>=0,c>>>=0]}var s=[0,1,2,4,8,16,32,64,128,27,54],c=function(){for(var e=new Array(256),t=0;t<256;t++)e[t]=t<128?t<<1:t<<1^283;for(var i=[],n=[],a=[[],[],[],[]],r=[[],[],[],[]],o=0,s=0,c=0;c<256;++c){var p=s^s<<1^s<<2^s<<3^s<<4;p=p>>>8^255&p^99,i[o]=p,n[p]=o;var u=e[o],f=e[u],l=e[f],d=257*e[p]^16843008*p;a[0][o]=d<<24|d>>>8,a[1][o]=d<<16|d>>>16,a[2][o]=d<<8|d>>>24,a[3][o]=d,d=16843009*l^65537*f^257*u^16843008*o,r[0][p]=d<<24|d>>>8,r[1][p]=d<<16|d>>>16,r[2][p]=d<<8|d>>>24,r[3][p]=d,0===o?o=s=1:(o=u^e[e[e[l^u]]],s^=e[e[s]])}return{SBOX:i,INV_SBOX:n,SUB_MIX:a,INV_SUB_MIX:r}}();function p(e){this._key=a(e),this._reset()}p.blockSize=16,p.keySize=32,p.prototype.blockSize=p.blockSize,p.prototype.keySize=p.keySize,p.prototype._reset=function(){for(var e=this._key,t=e.length,i=t+6,n=4*(i+1),a=[],r=0;r<t;r++)a[r]=e[r];for(r=t;r<n;r++){var o=a[r-1];r%t==0?(o=o<<8|o>>>24,o=c.SBOX[o>>>24]<<24|c.SBOX[o>>>16&255]<<16|c.SBOX[o>>>8&255]<<8|c.SBOX[255&o],o^=s[r/t|0]<<24):t>6&&r%t==4&&(o=c.SBOX[o>>>24]<<24|c.SBOX[o>>>16&255]<<16|c.SBOX[o>>>8&255]<<8|c.SBOX[255&o]),a[r]=a[r-t]^o}for(var p=[],u=0;u<n;u++){var f=n-u,l=a[f-(u%4?0:4)];p[u]=u<4||f<=4?l:c.INV_SUB_MIX[0][c.SBOX[l>>>24]]^c.INV_SUB_MIX[1][c.SBOX[l>>>16&255]]^c.INV_SUB_MIX[2][c.SBOX[l>>>8&255]]^c.INV_SUB_MIX[3][c.SBOX[255&l]]}this._nRounds=i,this._keySchedule=a,this._invKeySchedule=p},p.prototype.encryptBlockRaw=function(e){return o(e=a(e),this._keySchedule,c.SUB_MIX,c.SBOX,this._nRounds)},p.prototype.encryptBlock=function(e){var t=this.encryptBlockRaw(e),i=n.allocUnsafe(16);return i.writeUInt32BE(t[0],0),i.writeUInt32BE(t[1],4),i.writeUInt32BE(t[2],8),i.writeUInt32BE(t[3],12),i},p.prototype.decryptBlock=function(e){var t=(e=a(e))[1];e[1]=e[3],e[3]=t;var i=o(e,this._invKeySchedule,c.INV_SUB_MIX,c.INV_SBOX,this._nRounds),r=n.allocUnsafe(16);return r.writeUInt32BE(i[0],0),r.writeUInt32BE(i[3],4),r.writeUInt32BE(i[2],8),r.writeUInt32BE(i[1],12),r},p.prototype.scrub=function(){r(this._keySchedule),r(this._invKeySchedule),r(this._key)},e.exports.AES=p},function(e,t,i){var n=i(1).Buffer,a=i(60);e.exports=function(e,t,i,r){if(n.isBuffer(e)||(e=n.from(e,"binary")),t&&(n.isBuffer(t)||(t=n.from(t,"binary")),8!==t.length))throw new RangeError("salt should be Buffer with 8 byte length");for(var o=i/8,s=n.alloc(o),c=n.alloc(r||0),p=n.alloc(0);o>0||r>0;){var u=new a;u.update(p),u.update(e),t&&u.update(t),p=u.digest();var f=0;if(o>0){var l=s.length-o;f=Math.min(o,p.length),p.copy(s,l,0,f),o-=f}if(f<p.length&&r>0){var d=c.length-r,h=Math.min(r,p.length-f);p.copy(c,d,f,f+h),r-=h}}return p.fill(0),{key:s,iv:c}}},function(e,t,i){"use strict";var n=i(4),a=i(7),r=a.getNAF,o=a.getJSF,s=a.assert;function c(e,t){this.type=e,this.p=new n(t.p,16),this.red=t.prime?n.red(t.prime):n.mont(this.p),this.zero=new n(0).toRed(this.red),this.one=new n(1).toRed(this.red),this.two=new n(2).toRed(this.red),this.n=t.n&&new n(t.n,16),this.g=t.g&&this.pointFromJSON(t.g,t.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4),this._bitLength=this.n?this.n.bitLength():0;var i=this.n&&this.p.div(this.n);!i||i.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}function p(e,t){this.curve=e,this.type=t,this.precomputed=null}e.exports=c,c.prototype.point=function(){throw new Error("Not implemented")},c.prototype.validate=function(){throw new Error("Not implemented")},c.prototype._fixedNafMul=function(e,t){s(e.precomputed);var i=e._getDoubles(),n=r(t,1,this._bitLength),a=(1<<i.step+1)-(i.step%2==0?2:1);a/=3;for(var o=[],c=0;c<n.length;c+=i.step){var p=0;for(t=c+i.step-1;t>=c;t--)p=(p<<1)+n[t];o.push(p)}for(var u=this.jpoint(null,null,null),f=this.jpoint(null,null,null),l=a;l>0;l--){for(c=0;c<o.length;c++){(p=o[c])===l?f=f.mixedAdd(i.points[c]):p===-l&&(f=f.mixedAdd(i.points[c].neg()))}u=u.add(f)}return u.toP()},c.prototype._wnafMul=function(e,t){var i=4,n=e._getNAFPoints(i);i=n.wnd;for(var a=n.points,o=r(t,i,this._bitLength),c=this.jpoint(null,null,null),p=o.length-1;p>=0;p--){for(t=0;p>=0&&0===o[p];p--)t++;if(p>=0&&t++,c=c.dblp(t),p<0)break;var u=o[p];s(0!==u),c="affine"===e.type?u>0?c.mixedAdd(a[u-1>>1]):c.mixedAdd(a[-u-1>>1].neg()):u>0?c.add(a[u-1>>1]):c.add(a[-u-1>>1].neg())}return"affine"===e.type?c.toP():c},c.prototype._wnafMulAdd=function(e,t,i,n,a){for(var s=this._wnafT1,c=this._wnafT2,p=this._wnafT3,u=0,f=0;f<n;f++){var l=(S=t[f])._getNAFPoints(e);s[f]=l.wnd,c[f]=l.points}for(f=n-1;f>=1;f-=2){var d=f-1,h=f;if(1===s[d]&&1===s[h]){var m=[t[d],null,null,t[h]];0===t[d].y.cmp(t[h].y)?(m[1]=t[d].add(t[h]),m[2]=t[d].toJ().mixedAdd(t[h].neg())):0===t[d].y.cmp(t[h].y.redNeg())?(m[1]=t[d].toJ().mixedAdd(t[h]),m[2]=t[d].add(t[h].neg())):(m[1]=t[d].toJ().mixedAdd(t[h]),m[2]=t[d].toJ().mixedAdd(t[h].neg()));var b=[-3,-1,-5,-7,0,7,5,1,3],v=o(i[d],i[h]);u=Math.max(v[0].length,u),p[d]=new Array(u),p[h]=new Array(u);for(var g=0;g<u;g++){var y=0|v[0][g],x=0|v[1][g];p[d][g]=b[3*(y+1)+(x+1)],p[h][g]=0,c[d]=m}}else p[d]=r(i[d],s[d],this._bitLength),p[h]=r(i[h],s[h],this._bitLength),u=Math.max(p[d].length,u),u=Math.max(p[h].length,u)}var w=this.jpoint(null,null,null),_=this._wnafT4;for(f=u;f>=0;f--){for(var k=0;f>=0;){var E=!0;for(g=0;g<n;g++)_[g]=0|p[g][f],0!==_[g]&&(E=!1);if(!E)break;k++,f--}if(f>=0&&k++,w=w.dblp(k),f<0)break;for(g=0;g<n;g++){var S,A=_[g];0!==A&&(A>0?S=c[g][A-1>>1]:A<0&&(S=c[g][-A-1>>1].neg()),w="affine"===S.type?w.mixedAdd(S):w.add(S))}}for(f=0;f<n;f++)c[f]=null;return a?w:w.toP()},c.BasePoint=p,p.prototype.eq=function(){throw new Error("Not implemented")},p.prototype.validate=function(){return this.curve.validate(this)},c.prototype.decodePoint=function(e,t){e=a.toArray(e,t);var i=this.p.byteLength();if((4===e[0]||6===e[0]||7===e[0])&&e.length-1==2*i)return 6===e[0]?s(e[e.length-1]%2==0):7===e[0]&&s(e[e.length-1]%2==1),this.point(e.slice(1,1+i),e.slice(1+i,1+2*i));if((2===e[0]||3===e[0])&&e.length-1===i)return this.pointFromX(e.slice(1,1+i),3===e[0]);throw new Error("Unknown point format")},p.prototype.encodeCompressed=function(e){return this.encode(e,!0)},p.prototype._encode=function(e){var t=this.curve.p.byteLength(),i=this.getX().toArray("be",t);return e?[this.getY().isEven()?2:3].concat(i):[4].concat(i,this.getY().toArray("be",t))},p.prototype.encode=function(e,t){return a.encode(this._encode(t),e)},p.prototype.precompute=function(e){if(this.precomputed)return this;var t={doubles:null,naf:null,beta:null};return t.naf=this._getNAFPoints(8),t.doubles=this._getDoubles(4,e),t.beta=this._getBeta(),this.precomputed=t,this},p.prototype._hasDoubles=function(e){if(!this.precomputed)return!1;var t=this.precomputed.doubles;return!!t&&t.points.length>=Math.ceil((e.bitLength()+1)/t.step)},p.prototype._getDoubles=function(e,t){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var i=[this],n=this,a=0;a<t;a+=e){for(var r=0;r<e;r++)n=n.dbl();i.push(n)}return{step:e,points:i}},p.prototype._getNAFPoints=function(e){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var t=[this],i=(1<<e)-1,n=1===i?null:this.dbl(),a=1;a<i;a++)t[a]=t[a-1].add(n);return{wnd:e,points:t}},p.prototype._getBeta=function(){return null},p.prototype.dblp=function(e){for(var t=this,i=0;i<e;i++)t=t.dbl();return t}},function(e,t,i){var n=i(259),a=i(270),r=i(271),o=i(64),s=i(103),c=i(1).Buffer;function p(e){var t;"object"!=typeof e||c.isBuffer(e)||(t=e.passphrase,e=e.key),"string"==typeof e&&(e=c.from(e));var i,p,u=r(e,t),f=u.tag,l=u.data;switch(f){case"CERTIFICATE":p=n.certificate.decode(l,"der").tbsCertificate.subjectPublicKeyInfo;case"PUBLIC KEY":switch(p||(p=n.PublicKey.decode(l,"der")),i=p.algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return n.RSAPublicKey.decode(p.subjectPublicKey.data,"der");case"1.2.840.10045.2.1":return p.subjectPrivateKey=p.subjectPublicKey,{type:"ec",data:p};case"1.2.840.10040.4.1":return p.algorithm.params.pub_key=n.DSAparam.decode(p.subjectPublicKey.data,"der"),{type:"dsa",data:p.algorithm.params};default:throw new Error("unknown key id "+i)}throw new Error("unknown key type "+f);case"ENCRYPTED PRIVATE KEY":l=function(e,t){var i=e.algorithm.decrypt.kde.kdeparams.salt,n=parseInt(e.algorithm.decrypt.kde.kdeparams.iters.toString(),10),r=a[e.algorithm.decrypt.cipher.algo.join(".")],p=e.algorithm.decrypt.cipher.iv,u=e.subjectPrivateKey,f=parseInt(r.split("-")[1],10)/8,l=s.pbkdf2Sync(t,i,n,f,"sha1"),d=o.createDecipheriv(r,l,p),h=[];return h.push(d.update(u)),h.push(d.final()),c.concat(h)}(l=n.EncryptedPrivateKey.decode(l,"der"),t);case"PRIVATE KEY":switch(i=(p=n.PrivateKey.decode(l,"der")).algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return n.RSAPrivateKey.decode(p.subjectPrivateKey,"der");case"1.2.840.10045.2.1":return{curve:p.algorithm.curve,privateKey:n.ECPrivateKey.decode(p.subjectPrivateKey,"der").privateKey};case"1.2.840.10040.4.1":return p.algorithm.params.priv_key=n.DSAparam.decode(p.subjectPrivateKey,"der"),{type:"dsa",params:p.algorithm.params};default:throw new Error("unknown key id "+i)}throw new Error("unknown key type "+f);case"RSA PUBLIC KEY":return n.RSAPublicKey.decode(l,"der");case"RSA PRIVATE KEY":return n.RSAPrivateKey.decode(l,"der");case"DSA PRIVATE KEY":return{type:"dsa",params:n.DSAPrivateKey.decode(l,"der")};case"EC PRIVATE KEY":return{curve:(l=n.ECPrivateKey.decode(l,"der")).parameters.value,privateKey:l.privateKey};default:throw new Error("unknown key type "+f)}}e.exports=p,p.signature=n.signature},function(e){e.exports=JSON.parse('[["0","\\u0000",127,"€"],["8140","丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪",5,"乲乴",9,"乿",6,"亇亊"],["8180","亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂",6,"伋伌伒",4,"伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾",4,"佄佅佇",5,"佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢"],["8240","侤侫侭侰",4,"侶",8,"俀俁係俆俇俈俉俋俌俍俒",4,"俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿",11],["8280","個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯",10,"倻倽倿偀偁偂偄偅偆偉偊偋偍偐",4,"偖偗偘偙偛偝",7,"偦",5,"偭",8,"偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎",20,"傤傦傪傫傭",4,"傳",6,"傼"],["8340","傽",17,"僐",5,"僗僘僙僛",10,"僨僩僪僫僯僰僱僲僴僶",4,"僼",9,"儈"],["8380","儉儊儌",5,"儓",13,"儢",28,"兂兇兊兌兎兏児兒兓兗兘兙兛兝",4,"兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦",4,"冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒",5],["8440","凘凙凚凜凞凟凢凣凥",5,"凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄",5,"剋剎剏剒剓剕剗剘"],["8480","剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳",9,"剾劀劃",4,"劉",6,"劑劒劔",6,"劜劤劥劦劧劮劯劰労",9,"勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務",5,"勠勡勢勣勥",10,"勱",7,"勻勼勽匁匂匃匄匇匉匊匋匌匎"],["8540","匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯",9,"匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏"],["8580","厐",4,"厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯",6,"厷厸厹厺厼厽厾叀參",4,"収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝",4,"呣呥呧呩",7,"呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡"],["8640","咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠",4,"哫哬哯哰哱哴",5,"哻哾唀唂唃唄唅唈唊",4,"唒唓唕",5,"唜唝唞唟唡唥唦"],["8680","唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋",4,"啑啒啓啔啗",4,"啝啞啟啠啢啣啨啩啫啯",5,"啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠",6,"喨",8,"喲喴営喸喺喼喿",4,"嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗",4,"嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸",4,"嗿嘂嘃嘄嘅"],["8740","嘆嘇嘊嘋嘍嘐",7,"嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀",11,"噏",4,"噕噖噚噛噝",4],["8780","噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽",7,"嚇",6,"嚐嚑嚒嚔",14,"嚤",10,"嚰",6,"嚸嚹嚺嚻嚽",12,"囋",8,"囕囖囘囙囜団囥",5,"囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國",6],["8840","園",9,"圝圞圠圡圢圤圥圦圧圫圱圲圴",4,"圼圽圿坁坃坄坅坆坈坉坋坒",4,"坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀"],["8880","垁垇垈垉垊垍",4,"垔",6,"垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹",8,"埄",6,"埌埍埐埑埓埖埗埛埜埞埡埢埣埥",7,"埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥",4,"堫",4,"報堲堳場堶",7],["8940","堾",5,"塅",6,"塎塏塐塒塓塕塖塗塙",4,"塟",5,"塦",4,"塭",16,"塿墂墄墆墇墈墊墋墌"],["8980","墍",4,"墔",4,"墛墜墝墠",7,"墪",17,"墽墾墿壀壂壃壄壆",10,"壒壓壔壖",13,"壥",5,"壭壯壱売壴壵壷壸壺",7,"夃夅夆夈",4,"夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻"],["8a40","夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛",4,"奡奣奤奦",12,"奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦"],["8a80","妧妬妭妰妱妳",5,"妺妼妽妿",6,"姇姈姉姌姍姎姏姕姖姙姛姞",4,"姤姦姧姩姪姫姭",11,"姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪",6,"娳娵娷",4,"娽娾娿婁",4,"婇婈婋",9,"婖婗婘婙婛",5],["8b40","婡婣婤婥婦婨婩婫",8,"婸婹婻婼婽婾媀",17,"媓",6,"媜",13,"媫媬"],["8b80","媭",4,"媴媶媷媹",4,"媿嫀嫃",5,"嫊嫋嫍",4,"嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬",4,"嫲",22,"嬊",11,"嬘",25,"嬳嬵嬶嬸",7,"孁",6],["8c40","孈",7,"孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏"],["8c80","寑寔",8,"寠寢寣實寧審",4,"寯寱",6,"寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧",6,"屰屲",6,"屻屼屽屾岀岃",4,"岉岊岋岎岏岒岓岕岝",4,"岤",4],["8d40","岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅",5,"峌",5,"峓",5,"峚",6,"峢峣峧峩峫峬峮峯峱",9,"峼",4],["8d80","崁崄崅崈",5,"崏",4,"崕崗崘崙崚崜崝崟",4,"崥崨崪崫崬崯",4,"崵",7,"崿",7,"嵈嵉嵍",10,"嵙嵚嵜嵞",10,"嵪嵭嵮嵰嵱嵲嵳嵵",12,"嶃",21,"嶚嶛嶜嶞嶟嶠"],["8e40","嶡",21,"嶸",12,"巆",6,"巎",12,"巜巟巠巣巤巪巬巭"],["8e80","巰巵巶巸",4,"巿帀帄帇帉帊帋帍帎帒帓帗帞",7,"帨",4,"帯帰帲",4,"帹帺帾帿幀幁幃幆",5,"幍",6,"幖",4,"幜幝幟幠幣",14,"幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨",4,"庮",4,"庴庺庻庼庽庿",6],["8f40","廆廇廈廋",5,"廔廕廗廘廙廚廜",11,"廩廫",8,"廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤"],["8f80","弨弫弬弮弰弲",6,"弻弽弾弿彁",14,"彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢",5,"復徫徬徯",5,"徶徸徹徺徻徾",4,"忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇"],["9040","怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰",4,"怶",4,"怽怾恀恄",6,"恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀"],["9080","悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽",7,"惇惈惉惌",4,"惒惓惔惖惗惙惛惞惡",4,"惪惱惲惵惷惸惻",4,"愂愃愄愅愇愊愋愌愐",4,"愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬",18,"慀",6],["9140","慇慉態慍慏慐慒慓慔慖",6,"慞慟慠慡慣慤慥慦慩",6,"慱慲慳慴慶慸",18,"憌憍憏",4,"憕"],["9180","憖",6,"憞",8,"憪憫憭",9,"憸",5,"憿懀懁懃",4,"應懌",4,"懓懕",16,"懧",13,"懶",8,"戀",5,"戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸",4,"扂扄扅扆扊"],["9240","扏扐払扖扗扙扚扜",6,"扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋",5,"抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁"],["9280","拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳",5,"挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖",7,"捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙",6,"採掤掦掫掯掱掲掵掶掹掻掽掿揀"],["9340","揁揂揃揅揇揈揊揋揌揑揓揔揕揗",6,"揟揢揤",4,"揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆",4,"損搎搑搒搕",5,"搝搟搢搣搤"],["9380","搥搧搨搩搫搮",5,"搵",4,"搻搼搾摀摂摃摉摋",6,"摓摕摖摗摙",4,"摟",7,"摨摪摫摬摮",9,"摻",6,"撃撆撈",8,"撓撔撗撘撚撛撜撝撟",4,"撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆",6,"擏擑擓擔擕擖擙據"],["9440","擛擜擝擟擠擡擣擥擧",24,"攁",7,"攊",7,"攓",4,"攙",8],["9480","攢攣攤攦",4,"攬攭攰攱攲攳攷攺攼攽敀",4,"敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數",14,"斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱",7,"斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘",7,"旡旣旤旪旫"],["9540","旲旳旴旵旸旹旻",4,"昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷",4,"昽昿晀時晄",6,"晍晎晐晑晘"],["9580","晙晛晜晝晞晠晢晣晥晧晩",4,"晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘",4,"暞",8,"暩",4,"暯",4,"暵暶暷暸暺暻暼暽暿",25,"曚曞",7,"曧曨曪",5,"曱曵曶書曺曻曽朁朂會"],["9640","朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠",5,"朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗",4,"杝杢杣杤杦杧杫杬杮東杴杶"],["9680","杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹",7,"柂柅",9,"柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵",7,"柾栁栂栃栄栆栍栐栒栔栕栘",4,"栞栟栠栢",6,"栫",6,"栴栵栶栺栻栿桇桋桍桏桒桖",5],["9740","桜桝桞桟桪桬",7,"桵桸",8,"梂梄梇",7,"梐梑梒梔梕梖梘",9,"梣梤梥梩梪梫梬梮梱梲梴梶梷梸"],["9780","梹",6,"棁棃",5,"棊棌棎棏棐棑棓棔棖棗棙棛",4,"棡棢棤",9,"棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆",4,"椌椏椑椓",11,"椡椢椣椥",7,"椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃",16,"楕楖楘楙楛楜楟"],["9840","楡楢楤楥楧楨楩楪楬業楯楰楲",4,"楺楻楽楾楿榁榃榅榊榋榌榎",5,"榖榗榙榚榝",9,"榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽"],["9880","榾榿槀槂",7,"構槍槏槑槒槓槕",5,"槜槝槞槡",11,"槮槯槰槱槳",9,"槾樀",9,"樋",11,"標",5,"樠樢",5,"権樫樬樭樮樰樲樳樴樶",6,"樿",4,"橅橆橈",7,"橑",6,"橚"],["9940","橜",4,"橢橣橤橦",10,"橲",6,"橺橻橽橾橿檁檂檃檅",8,"檏檒",4,"檘",7,"檡",5],["9980","檧檨檪檭",114,"欥欦欨",6],["9a40","欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍",11,"歚",7,"歨歩歫",13,"歺歽歾歿殀殅殈"],["9a80","殌殎殏殐殑殔殕殗殘殙殜",4,"殢",7,"殫",7,"殶殸",6,"毀毃毄毆",4,"毌毎毐毑毘毚毜",4,"毢",7,"毬毭毮毰毱毲毴毶毷毸毺毻毼毾",6,"氈",4,"氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋",4,"汑汒汓汖汘"],["9b40","汙汚汢汣汥汦汧汫",4,"汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘"],["9b80","泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟",5,"洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽",4,"涃涄涆涇涊涋涍涏涐涒涖",4,"涜涢涥涬涭涰涱涳涴涶涷涹",5,"淁淂淃淈淉淊"],["9c40","淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽",7,"渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵"],["9c80","渶渷渹渻",7,"湅",7,"湏湐湑湒湕湗湙湚湜湝湞湠",10,"湬湭湯",14,"満溁溂溄溇溈溊",4,"溑",6,"溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪",5],["9d40","滰滱滲滳滵滶滷滸滺",7,"漃漄漅漇漈漊",4,"漐漑漒漖",9,"漡漢漣漥漦漧漨漬漮漰漲漴漵漷",6,"漿潀潁潂"],["9d80","潃潄潅潈潉潊潌潎",9,"潙潚潛潝潟潠潡潣潤潥潧",5,"潯潰潱潳潵潶潷潹潻潽",6,"澅澆澇澊澋澏",12,"澝澞澟澠澢",4,"澨",10,"澴澵澷澸澺",5,"濁濃",5,"濊",6,"濓",10,"濟濢濣濤濥"],["9e40","濦",7,"濰",32,"瀒",7,"瀜",6,"瀤",6],["9e80","瀫",9,"瀶瀷瀸瀺",17,"灍灎灐",13,"灟",11,"灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞",12,"炰炲炴炵炶為炾炿烄烅烆烇烉烋",12,"烚"],["9f40","烜烝烞烠烡烢烣烥烪烮烰",6,"烸烺烻烼烾",10,"焋",4,"焑焒焔焗焛",10,"焧",7,"焲焳焴"],["9f80","焵焷",13,"煆煇煈煉煋煍煏",12,"煝煟",4,"煥煩",4,"煯煰煱煴煵煶煷煹煻煼煾",5,"熅",4,"熋熌熍熎熐熑熒熓熕熖熗熚",4,"熡",6,"熩熪熫熭",5,"熴熶熷熸熺",8,"燄",9,"燏",4],["a040","燖",9,"燡燢燣燤燦燨",5,"燯",9,"燺",11,"爇",19],["a080","爛爜爞",9,"爩爫爭爮爯爲爳爴爺爼爾牀",6,"牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅",4,"犌犎犐犑犓",11,"犠",11,"犮犱犲犳犵犺",6,"狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"],["a1a1","　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈",7,"〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"],["a2a1","ⅰ",9],["a2b1","⒈",19,"⑴",19,"①",9],["a2e5","㈠",9],["a2f1","Ⅰ",11],["a3a1","！＂＃￥％",88,"￣"],["a4a1","ぁ",82],["a5a1","ァ",85],["a6a1","Α",16,"Σ",6],["a6c1","α",16,"σ",6],["a6e0","︵︶︹︺︿﹀︽︾﹁﹂﹃﹄"],["a6ee","︻︼︷︸︱"],["a6f4","︳︴"],["a7a1","А",5,"ЁЖ",25],["a7d1","а",5,"ёж",25],["a840","ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═",35,"▁",6],["a880","█",7,"▓▔▕▼▽◢◣◤◥☉⊕〒〝〞"],["a8a1","āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ"],["a8bd","ńň"],["a8c0","ɡ"],["a8c5","ㄅ",36],["a940","〡",8,"㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤"],["a959","℡㈱"],["a95c","‐"],["a960","ー゛゜ヽヾ〆ゝゞ﹉",9,"﹔﹕﹖﹗﹙",8],["a980","﹢",4,"﹨﹩﹪﹫"],["a996","〇"],["a9a4","─",75],["aa40","狜狝狟狢",5,"狪狫狵狶狹狽狾狿猀猂猄",5,"猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀",8],["aa80","獉獊獋獌獎獏獑獓獔獕獖獘",7,"獡",10,"獮獰獱"],["ab40","獲",11,"獿",4,"玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣",5,"玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃",4],["ab80","珋珌珎珒",6,"珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳",4],["ac40","珸",10,"琄琇琈琋琌琍琎琑",8,"琜",5,"琣琤琧琩琫琭琯琱琲琷",4,"琽琾琿瑀瑂",11],["ac80","瑎",6,"瑖瑘瑝瑠",12,"瑮瑯瑱",4,"瑸瑹瑺"],["ad40","瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑",10,"璝璟",7,"璪",15,"璻",12],["ad80","瓈",9,"瓓",8,"瓝瓟瓡瓥瓧",6,"瓰瓱瓲"],["ae40","瓳瓵瓸",6,"甀甁甂甃甅",7,"甎甐甒甔甕甖甗甛甝甞甠",4,"甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘"],["ae80","畝",7,"畧畨畩畫",6,"畳畵當畷畺",4,"疀疁疂疄疅疇"],["af40","疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦",4,"疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇"],["af80","瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄"],["b040","癅",6,"癎",5,"癕癗",4,"癝癟癠癡癢癤",6,"癬癭癮癰",7,"癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛"],["b080","皜",7,"皥",8,"皯皰皳皵",9,"盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥"],["b140","盄盇盉盋盌盓盕盙盚盜盝盞盠",4,"盦",7,"盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎",10,"眛眜眝眞眡眣眤眥眧眪眫"],["b180","眬眮眰",4,"眹眻眽眾眿睂睄睅睆睈",7,"睒",7,"睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳"],["b240","睝睞睟睠睤睧睩睪睭",11,"睺睻睼瞁瞂瞃瞆",5,"瞏瞐瞓",11,"瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶",4],["b280","瞼瞾矀",12,"矎",8,"矘矙矚矝",4,"矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖"],["b340","矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃",5,"砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚"],["b380","硛硜硞",11,"硯",7,"硸硹硺硻硽",6,"场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚"],["b440","碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨",7,"碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚",9],["b480","磤磥磦磧磩磪磫磭",4,"磳磵磶磸磹磻",5,"礂礃礄礆",6,"础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮"],["b540","礍",5,"礔",9,"礟",4,"礥",14,"礵",4,"礽礿祂祃祄祅祇祊",8,"祔祕祘祙祡祣"],["b580","祤祦祩祪祫祬祮祰",6,"祹祻",4,"禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠"],["b640","禓",6,"禛",11,"禨",10,"禴",4,"禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙",5,"秠秡秢秥秨秪"],["b680","秬秮秱",6,"秹秺秼秾秿稁稄稅稇稈稉稊稌稏",4,"稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二"],["b740","稝稟稡稢稤",14,"稴稵稶稸稺稾穀",5,"穇",9,"穒",4,"穘",16],["b780","穩",6,"穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服"],["b840","窣窤窧窩窪窫窮",4,"窴",10,"竀",10,"竌",9,"竗竘竚竛竜竝竡竢竤竧",5,"竮竰竱竲竳"],["b880","竴",4,"竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹"],["b940","笯笰笲笴笵笶笷笹笻笽笿",5,"筆筈筊筍筎筓筕筗筙筜筞筟筡筣",10,"筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆",6,"箎箏"],["b980","箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹",7,"篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈"],["ba40","篅篈築篊篋篍篎篏篐篒篔",4,"篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲",4,"篸篹篺篻篽篿",7,"簈簉簊簍簎簐",5,"簗簘簙"],["ba80","簚",4,"簠",5,"簨簩簫",12,"簹",5,"籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖"],["bb40","籃",9,"籎",36,"籵",5,"籾",9],["bb80","粈粊",6,"粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴",4,"粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕"],["bc40","粿糀糂糃糄糆糉糋糎",6,"糘糚糛糝糞糡",6,"糩",5,"糰",7,"糹糺糼",13,"紋",5],["bc80","紑",14,"紡紣紤紥紦紨紩紪紬紭紮細",6,"肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件"],["bd40","紷",54,"絯",7],["bd80","絸",32,"健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸"],["be40","継",12,"綧",6,"綯",42],["be80","線",32,"尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻"],["bf40","緻",62],["bf80","縺縼",4,"繂",4,"繈",21,"俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀"],["c040","繞",35,"纃",23,"纜纝纞"],["c080","纮纴纻纼绖绤绬绹缊缐缞缷缹缻",6,"罃罆",9,"罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐"],["c140","罖罙罛罜罝罞罠罣",4,"罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂",7,"羋羍羏",4,"羕",4,"羛羜羠羢羣羥羦羨",6,"羱"],["c180","羳",4,"羺羻羾翀翂翃翄翆翇翈翉翋翍翏",4,"翖翗翙",5,"翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿"],["c240","翤翧翨翪翫翬翭翯翲翴",6,"翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫",5,"耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗"],["c280","聙聛",13,"聫",5,"聲",11,"隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫"],["c340","聾肁肂肅肈肊肍",5,"肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇",4,"胏",6,"胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋"],["c380","脌脕脗脙脛脜脝脟",12,"脭脮脰脳脴脵脷脹",4,"脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸"],["c440","腀",5,"腇腉腍腎腏腒腖腗腘腛",4,"腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃",4,"膉膋膌膍膎膐膒",5,"膙膚膞",4,"膤膥"],["c480","膧膩膫",7,"膴",5,"膼膽膾膿臄臅臇臈臉臋臍",6,"摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁"],["c540","臔",14,"臤臥臦臨臩臫臮",4,"臵",5,"臽臿舃與",4,"舎舏舑舓舕",5,"舝舠舤舥舦舧舩舮舲舺舼舽舿"],["c580","艀艁艂艃艅艆艈艊艌艍艎艐",7,"艙艛艜艝艞艠",7,"艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗"],["c640","艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸"],["c680","苺苼",4,"茊茋茍茐茒茓茖茘茙茝",9,"茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐"],["c740","茾茿荁荂荄荅荈荊",4,"荓荕",4,"荝荢荰",6,"荹荺荾",6,"莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡",6,"莬莭莮"],["c780","莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠"],["c840","菮華菳",4,"菺菻菼菾菿萀萂萅萇萈萉萊萐萒",5,"萙萚萛萞",5,"萩",7,"萲",5,"萹萺萻萾",7,"葇葈葉"],["c880","葊",6,"葒",4,"葘葝葞葟葠葢葤",4,"葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁"],["c940","葽",4,"蒃蒄蒅蒆蒊蒍蒏",7,"蒘蒚蒛蒝蒞蒟蒠蒢",12,"蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗"],["c980","蓘",4,"蓞蓡蓢蓤蓧",4,"蓭蓮蓯蓱",10,"蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳"],["ca40","蔃",8,"蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢",8,"蔭",9,"蔾",4,"蕄蕅蕆蕇蕋",10],["ca80","蕗蕘蕚蕛蕜蕝蕟",4,"蕥蕦蕧蕩",8,"蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱"],["cb40","薂薃薆薈",6,"薐",10,"薝",6,"薥薦薧薩薫薬薭薱",5,"薸薺",6,"藂",6,"藊",4,"藑藒"],["cb80","藔藖",5,"藝",6,"藥藦藧藨藪",14,"恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔"],["cc40","藹藺藼藽藾蘀",4,"蘆",10,"蘒蘓蘔蘕蘗",15,"蘨蘪",13,"蘹蘺蘻蘽蘾蘿虀"],["cc80","虁",11,"虒虓處",4,"虛虜虝號虠虡虣",7,"獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃"],["cd40","虭虯虰虲",6,"蚃",6,"蚎",4,"蚔蚖",5,"蚞",4,"蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻",4,"蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜"],["cd80","蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威"],["ce40","蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀",6,"蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚",5,"蝡蝢蝦",7,"蝯蝱蝲蝳蝵"],["ce80","蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎",4,"螔螕螖螘",6,"螠",4,"巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺"],["cf40","螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁",4,"蟇蟈蟉蟌",4,"蟔",6,"蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯",9],["cf80","蟺蟻蟼蟽蟿蠀蠁蠂蠄",5,"蠋",7,"蠔蠗蠘蠙蠚蠜",4,"蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓"],["d040","蠤",13,"蠳",5,"蠺蠻蠽蠾蠿衁衂衃衆",5,"衎",5,"衕衖衘衚",6,"衦衧衪衭衯衱衳衴衵衶衸衹衺"],["d080","衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗",4,"袝",4,"袣袥",5,"小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄"],["d140","袬袮袯袰袲",4,"袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚",4,"裠裡裦裧裩",6,"裲裵裶裷裺裻製裿褀褁褃",5],["d180","褉褋",4,"褑褔",4,"褜",4,"褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶"],["d240","褸",8,"襂襃襅",24,"襠",5,"襧",19,"襼"],["d280","襽襾覀覂覄覅覇",26,"摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐"],["d340","覢",30,"觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴",6],["d380","觻",4,"訁",5,"計",21,"印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉"],["d440","訞",31,"訿",8,"詉",21],["d480","詟",25,"詺",6,"浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧"],["d540","誁",7,"誋",7,"誔",46],["d580","諃",32,"铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政"],["d640","諤",34,"謈",27],["d680","謤謥謧",30,"帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑"],["d740","譆",31,"譧",4,"譭",25],["d780","讇",24,"讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座"],["d840","谸",8,"豂豃豄豅豈豊豋豍",7,"豖豗豘豙豛",5,"豣",6,"豬",6,"豴豵豶豷豻",6,"貃貄貆貇"],["d880","貈貋貍",6,"貕貖貗貙",20,"亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝"],["d940","貮",62],["d980","賭",32,"佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼"],["da40","贎",14,"贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸",8,"趂趃趆趇趈趉趌",4,"趒趓趕",9,"趠趡"],["da80","趢趤",12,"趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺"],["db40","跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾",6,"踆踇踈踋踍踎踐踑踒踓踕",7,"踠踡踤",4,"踫踭踰踲踳踴踶踷踸踻踼踾"],["db80","踿蹃蹅蹆蹌",4,"蹓",5,"蹚",11,"蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝"],["dc40","蹳蹵蹷",4,"蹽蹾躀躂躃躄躆躈",6,"躑躒躓躕",6,"躝躟",11,"躭躮躰躱躳",6,"躻",7],["dc80","軃",10,"軏",21,"堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥"],["dd40","軥",62],["dd80","輤",32,"荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺"],["de40","轅",32,"轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆"],["de80","迉",4,"迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖"],["df40","這逜連逤逥逧",5,"逰",4,"逷逹逺逽逿遀遃遅遆遈",4,"過達違遖遙遚遜",5,"遤遦遧適遪遫遬遯",4,"遶",6,"遾邁"],["df80","還邅邆邇邉邊邌",4,"邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼"],["e040","郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅",19,"鄚鄛鄜"],["e080","鄝鄟鄠鄡鄤",10,"鄰鄲",6,"鄺",8,"酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼"],["e140","酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀",4,"醆醈醊醎醏醓",6,"醜",5,"醤",5,"醫醬醰醱醲醳醶醷醸醹醻"],["e180","醼",10,"釈釋釐釒",9,"針",8,"帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺"],["e240","釦",62],["e280","鈥",32,"狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧",5,"饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂"],["e340","鉆",45,"鉵",16],["e380","銆",7,"銏",24,"恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾"],["e440","銨",5,"銯",24,"鋉",31],["e480","鋩",32,"洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑"],["e540","錊",51,"錿",10],["e580","鍊",31,"鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣"],["e640","鍬",34,"鎐",27],["e680","鎬",29,"鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩"],["e740","鏎",7,"鏗",54],["e780","鐎",32,"纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡",6,"缪缫缬缭缯",4,"缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬"],["e840","鐯",14,"鐿",43,"鑬鑭鑮鑯"],["e880","鑰",20,"钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹"],["e940","锧锳锽镃镈镋镕镚镠镮镴镵長",7,"門",42],["e980","閫",32,"椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋"],["ea40","闌",27,"闬闿阇阓阘阛阞阠阣",6,"阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗"],["ea80","陘陙陚陜陝陞陠陣陥陦陫陭",4,"陳陸",12,"隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰"],["eb40","隌階隑隒隓隕隖隚際隝",9,"隨",7,"隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖",9,"雡",6,"雫"],["eb80","雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗",4,"霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻"],["ec40","霡",8,"霫霬霮霯霱霳",4,"霺霻霼霽霿",18,"靔靕靗靘靚靜靝靟靣靤靦靧靨靪",7],["ec80","靲靵靷",4,"靽",7,"鞆",4,"鞌鞎鞏鞐鞓鞕鞖鞗鞙",4,"臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐"],["ed40","鞞鞟鞡鞢鞤",6,"鞬鞮鞰鞱鞳鞵",46],["ed80","韤韥韨韮",4,"韴韷",23,"怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨"],["ee40","頏",62],["ee80","顎",32,"睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶",4,"钼钽钿铄铈",6,"铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪"],["ef40","顯",5,"颋颎颒颕颙颣風",37,"飏飐飔飖飗飛飜飝飠",4],["ef80","飥飦飩",30,"铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒",4,"锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤",8,"镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔"],["f040","餈",4,"餎餏餑",28,"餯",26],["f080","饊",9,"饖",12,"饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨",4,"鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦",6,"鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙"],["f140","馌馎馚",10,"馦馧馩",47],["f180","駙",32,"瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃"],["f240","駺",62],["f280","騹",32,"颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒"],["f340","驚",17,"驲骃骉骍骎骔骕骙骦骩",6,"骲骳骴骵骹骻骽骾骿髃髄髆",4,"髍髎髏髐髒體髕髖髗髙髚髛髜"],["f380","髝髞髠髢髣髤髥髧髨髩髪髬髮髰",8,"髺髼",6,"鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋"],["f440","鬇鬉",5,"鬐鬑鬒鬔",10,"鬠鬡鬢鬤",10,"鬰鬱鬳",7,"鬽鬾鬿魀魆魊魋魌魎魐魒魓魕",5],["f480","魛",32,"簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤"],["f540","魼",62],["f580","鮻",32,"酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜"],["f640","鯜",62],["f680","鰛",32,"觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅",5,"龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞",5,"鲥",4,"鲫鲭鲮鲰",7,"鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋"],["f740","鰼",62],["f780","鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾",4,"鳈鳉鳑鳒鳚鳛鳠鳡鳌",4,"鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄"],["f840","鳣",62],["f880","鴢",32],["f940","鵃",62],["f980","鶂",32],["fa40","鶣",62],["fa80","鷢",32],["fb40","鸃",27,"鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴",9,"麀"],["fb80","麁麃麄麅麆麉麊麌",5,"麔",8,"麞麠",5,"麧麨麩麪"],["fc40","麫",8,"麵麶麷麹麺麼麿",4,"黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰",8,"黺黽黿",6],["fc80","鼆",4,"鼌鼏鼑鼒鼔鼕鼖鼘鼚",5,"鼡鼣",8,"鼭鼮鼰鼱"],["fd40","鼲",4,"鼸鼺鼼鼿",4,"齅",10,"齒",38],["fd80","齹",5,"龁龂龍",11,"龜龝龞龡",4,"郎凉秊裏隣"],["fe40","兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩"]]')},function(e,t,i){var n=i(2),a=n.Buffer;function r(e,t){for(var i in e)t[i]=e[i]}function o(e,t,i){return a(e,t,i)}a.from&&a.alloc&&a.allocUnsafe&&a.allocUnsafeSlow?e.exports=n:(r(n,t),t.Buffer=o),r(a,o),o.from=function(e,t,i){if("number"==typeof e)throw new TypeError("Argument must not be a number");return a(e,t,i)},o.alloc=function(e,t,i){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=a(e);return void 0!==t?"string"==typeof i?n.fill(t,i):n.fill(t):n.fill(0),n},o.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return a(e)},o.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},function(e,t,i){"use strict";(function(t,n,a){var r=i(39);function o(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,i){var n=e.entry;e.entry=null;for(;n;){var a=n.callback;t.pendingcb--,a(i),n=n.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=g;var s,c=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?n:r.nextTick;g.WritableState=v;var p=Object.create(i(25));p.inherits=i(0);var u={deprecate:i(167)},f=i(78),l=i(50).Buffer,d=a.Uint8Array||function(){};var h,m=i(79);function b(){}function v(e,t){s=s||i(13),e=e||{};var n=t instanceof s;this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var a=e.highWaterMark,p=e.writableHighWaterMark,u=this.objectMode?16:16384;this.highWaterMark=a||0===a?a:n&&(p||0===p)?p:u,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var f=!1===e.decodeStrings;this.decodeStrings=!f,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var i=e._writableState,n=i.sync,a=i.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(i),t)!function(e,t,i,n,a){--t.pendingcb,i?(r.nextTick(a,n),r.nextTick(E,e,t),e._writableState.errorEmitted=!0,e.emit("error",n)):(a(n),e._writableState.errorEmitted=!0,e.emit("error",n),E(e,t))}(e,i,n,t,a);else{var o=_(i);o||i.corked||i.bufferProcessing||!i.bufferedRequest||w(e,i),n?c(x,e,i,o,a):x(e,i,o,a)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function g(e){if(s=s||i(13),!(h.call(g,this)||this instanceof s))return new g(e);this._writableState=new v(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),f.call(this)}function y(e,t,i,n,a,r,o){t.writelen=n,t.writecb=o,t.writing=!0,t.sync=!0,i?e._writev(a,t.onwrite):e._write(a,r,t.onwrite),t.sync=!1}function x(e,t,i,n){i||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),E(e,t)}function w(e,t){t.bufferProcessing=!0;var i=t.bufferedRequest;if(e._writev&&i&&i.next){var n=t.bufferedRequestCount,a=new Array(n),r=t.corkedRequestsFree;r.entry=i;for(var s=0,c=!0;i;)a[s]=i,i.isBuf||(c=!1),i=i.next,s+=1;a.allBuffers=c,y(e,t,!0,t.length,a,"",r.finish),t.pendingcb++,t.lastBufferedRequest=null,r.next?(t.corkedRequestsFree=r.next,r.next=null):t.corkedRequestsFree=new o(t),t.bufferedRequestCount=0}else{for(;i;){var p=i.chunk,u=i.encoding,f=i.callback;if(y(e,t,!1,t.objectMode?1:p.length,p,u,f),i=i.next,t.bufferedRequestCount--,t.writing)break}null===i&&(t.lastBufferedRequest=null)}t.bufferedRequest=i,t.bufferProcessing=!1}function _(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function k(e,t){e._final((function(i){t.pendingcb--,i&&e.emit("error",i),t.prefinished=!0,e.emit("prefinish"),E(e,t)}))}function E(e,t){var i=_(t);return i&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,r.nextTick(k,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),i}p.inherits(g,f),v.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(v.prototype,"buffer",{get:u.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(h=Function.prototype[Symbol.hasInstance],Object.defineProperty(g,Symbol.hasInstance,{value:function(e){return!!h.call(this,e)||this===g&&(e&&e._writableState instanceof v)}})):h=function(e){return e instanceof this},g.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},g.prototype.write=function(e,t,i){var n,a=this._writableState,o=!1,s=!a.objectMode&&(n=e,l.isBuffer(n)||n instanceof d);return s&&!l.isBuffer(e)&&(e=function(e){return l.from(e)}(e)),"function"==typeof t&&(i=t,t=null),s?t="buffer":t||(t=a.defaultEncoding),"function"!=typeof i&&(i=b),a.ended?function(e,t){var i=new Error("write after end");e.emit("error",i),r.nextTick(t,i)}(this,i):(s||function(e,t,i,n){var a=!0,o=!1;return null===i?o=new TypeError("May not write null values to stream"):"string"==typeof i||void 0===i||t.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(e.emit("error",o),r.nextTick(n,o),a=!1),a}(this,a,e,i))&&(a.pendingcb++,o=function(e,t,i,n,a,r){if(!i){var o=function(e,t,i){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=l.from(t,i));return t}(t,n,a);n!==o&&(i=!0,a="buffer",n=o)}var s=t.objectMode?1:n.length;t.length+=s;var c=t.length<t.highWaterMark;c||(t.needDrain=!0);if(t.writing||t.corked){var p=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:a,isBuf:i,callback:r,next:null},p?p.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else y(e,t,!1,s,n,a,r);return c}(this,a,s,e,t,i)),o},g.prototype.cork=function(){this._writableState.corked++},g.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||w(this,e))},g.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(g.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),g.prototype._write=function(e,t,i){i(new Error("_write() is not implemented"))},g.prototype._writev=null,g.prototype.end=function(e,t,i){var n=this._writableState;"function"==typeof e?(i=e,e=null,t=null):"function"==typeof t&&(i=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(e,t,i){t.ending=!0,E(e,t),i&&(t.finished?r.nextTick(i):e.once("finish",i));t.ended=!0,e.writable=!1}(this,n,i)},Object.defineProperty(g.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),g.prototype.destroy=m.destroy,g.prototype._undestroy=m.undestroy,g.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,i(3),i(23).setImmediate,i(5))},function(e,t,i){(function(e){var n=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),i={},n=0;n<t.length;n++)i[t[n]]=Object.getOwnPropertyDescriptor(e,t[n]);return i},a=/%[sdj%]/g;t.format=function(e){if(!v(e)){for(var t=[],i=0;i<arguments.length;i++)t.push(s(arguments[i]));return t.join(" ")}i=1;for(var n=arguments,r=n.length,o=String(e).replace(a,(function(e){if("%%"===e)return"%";if(i>=r)return e;switch(e){case"%s":return String(n[i++]);case"%d":return Number(n[i++]);case"%j":try{return JSON.stringify(n[i++])}catch(e){return"[Circular]"}default:return e}})),c=n[i];i<r;c=n[++i])m(c)||!x(c)?o+=" "+c:o+=" "+s(c);return o},t.deprecate=function(i,n){if(void 0!==e&&!0===e.noDeprecation)return i;if(void 0===e)return function(){return t.deprecate(i,n).apply(this,arguments)};var a=!1;return function(){if(!a){if(e.throwDeprecation)throw new Error(n);e.traceDeprecation?console.trace(n):console.error(n),a=!0}return i.apply(this,arguments)}};var r,o={};function s(e,i){var n={seen:[],stylize:p};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),h(i)?n.showHidden=i:i&&t._extend(n,i),g(n.showHidden)&&(n.showHidden=!1),g(n.depth)&&(n.depth=2),g(n.colors)&&(n.colors=!1),g(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=c),u(n,e,n.depth)}function c(e,t){var i=s.styles[t];return i?"["+s.colors[i][0]+"m"+e+"["+s.colors[i][1]+"m":e}function p(e,t){return e}function u(e,i,n){if(e.customInspect&&i&&k(i.inspect)&&i.inspect!==t.inspect&&(!i.constructor||i.constructor.prototype!==i)){var a=i.inspect(n,e);return v(a)||(a=u(e,a,n)),a}var r=function(e,t){if(g(t))return e.stylize("undefined","undefined");if(v(t)){var i="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(i,"string")}if(b(t))return e.stylize(""+t,"number");if(h(t))return e.stylize(""+t,"boolean");if(m(t))return e.stylize("null","null")}(e,i);if(r)return r;var o=Object.keys(i),s=function(e){var t={};return e.forEach((function(e,i){t[e]=!0})),t}(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(i)),_(i)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return f(i);if(0===o.length){if(k(i)){var c=i.name?": "+i.name:"";return e.stylize("[Function"+c+"]","special")}if(y(i))return e.stylize(RegExp.prototype.toString.call(i),"regexp");if(w(i))return e.stylize(Date.prototype.toString.call(i),"date");if(_(i))return f(i)}var p,x="",E=!1,S=["{","}"];(d(i)&&(E=!0,S=["[","]"]),k(i))&&(x=" [Function"+(i.name?": "+i.name:"")+"]");return y(i)&&(x=" "+RegExp.prototype.toString.call(i)),w(i)&&(x=" "+Date.prototype.toUTCString.call(i)),_(i)&&(x=" "+f(i)),0!==o.length||E&&0!=i.length?n<0?y(i)?e.stylize(RegExp.prototype.toString.call(i),"regexp"):e.stylize("[Object]","special"):(e.seen.push(i),p=E?function(e,t,i,n,a){for(var r=[],o=0,s=t.length;o<s;++o)M(t,String(o))?r.push(l(e,t,i,n,String(o),!0)):r.push("");return a.forEach((function(a){a.match(/^\d+$/)||r.push(l(e,t,i,n,a,!0))})),r}(e,i,n,s,o):o.map((function(t){return l(e,i,n,s,t,E)})),e.seen.pop(),function(e,t,i){if(e.reduce((function(e,t){return t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return i[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+i[1];return i[0]+t+" "+e.join(", ")+" "+i[1]}(p,x,S)):S[0]+x+S[1]}function f(e){return"["+Error.prototype.toString.call(e)+"]"}function l(e,t,i,n,a,r){var o,s,c;if((c=Object.getOwnPropertyDescriptor(t,a)||{value:t[a]}).get?s=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(s=e.stylize("[Setter]","special")),M(n,a)||(o="["+a+"]"),s||(e.seen.indexOf(c.value)<0?(s=m(i)?u(e,c.value,null):u(e,c.value,i-1)).indexOf("\n")>-1&&(s=r?s.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+s.split("\n").map((function(e){return"   "+e})).join("\n")):s=e.stylize("[Circular]","special")),g(o)){if(r&&a.match(/^\d+$/))return s;(o=JSON.stringify(""+a)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.substr(1,o.length-2),o=e.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=e.stylize(o,"string"))}return o+": "+s}function d(e){return Array.isArray(e)}function h(e){return"boolean"==typeof e}function m(e){return null===e}function b(e){return"number"==typeof e}function v(e){return"string"==typeof e}function g(e){return void 0===e}function y(e){return x(e)&&"[object RegExp]"===E(e)}function x(e){return"object"==typeof e&&null!==e}function w(e){return x(e)&&"[object Date]"===E(e)}function _(e){return x(e)&&("[object Error]"===E(e)||e instanceof Error)}function k(e){return"function"==typeof e}function E(e){return Object.prototype.toString.call(e)}function S(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(i){if(g(r)&&(r=e.env.NODE_DEBUG||""),i=i.toUpperCase(),!o[i])if(new RegExp("\\b"+i+"\\b","i").test(r)){var n=e.pid;o[i]=function(){var e=t.format.apply(t,arguments);console.error("%s %d: %s",i,n,e)}}else o[i]=function(){};return o[i]},t.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=d,t.isBoolean=h,t.isNull=m,t.isNullOrUndefined=function(e){return null==e},t.isNumber=b,t.isString=v,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=g,t.isRegExp=y,t.isObject=x,t.isDate=w,t.isError=_,t.isFunction=k,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=i(175);var A=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function j(){var e=new Date,t=[S(e.getHours()),S(e.getMinutes()),S(e.getSeconds())].join(":");return[e.getDate(),A[e.getMonth()],t].join(" ")}function M(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){console.log("%s - %s",j(),t.format.apply(t,arguments))},t.inherits=i(176),t._extend=function(e,t){if(!t||!x(t))return e;for(var i=Object.keys(t),n=i.length;n--;)e[i[n]]=t[i[n]];return e};var I="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function T(e,t){if(!e){var i=new Error("Promise was rejected with a falsy value");i.reason=e,e=i}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(I&&e[I]){var t;if("function"!=typeof(t=e[I]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,I,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,i,n=new Promise((function(e,n){t=e,i=n})),a=[],r=0;r<arguments.length;r++)a.push(arguments[r]);a.push((function(e,n){e?i(e):t(n)}));try{e.apply(this,a)}catch(e){i(e)}return n}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),I&&Object.defineProperty(t,I,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,n(e))},t.promisify.custom=I,t.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function i(){for(var i=[],n=0;n<arguments.length;n++)i.push(arguments[n]);var a=i.pop();if("function"!=typeof a)throw new TypeError("The last argument must be of type Function");var r=this,o=function(){return a.apply(r,arguments)};t.apply(this,i).then((function(t){e.nextTick(o,null,t)}),(function(t){e.nextTick(T,t,o)}))}return Object.setPrototypeOf(i,Object.getPrototypeOf(t)),Object.defineProperties(i,n(t)),i}}).call(this,i(3))},function(e,t,i){"use strict";var n=i(191),a=i(192),r=i(86);e.exports={formats:r,parse:a,stringify:n}},function(e,t,i){"use strict";t.decode=t.parse=i(193),t.encode=t.stringify=i(194)},function(e,t,i){"use strict";var n=i(198),a=i(199);function r(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=y,t.resolve=function(e,t){return y(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?y(e,!1,!0).resolveObject(t):t},t.format=function(e){a.isString(e)&&(e=y(e));return e instanceof r?e.format():r.prototype.format.call(e)},t.Url=r;var o=/^([a-z0-9.+-]+:)/i,s=/:[0-9]*$/,c=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,p=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),u=["'"].concat(p),f=["%","/","?",";","#"].concat(u),l=["/","?","#"],d=/^[+a-z0-9A-Z_-]{0,63}$/,h=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,"javascript:":!0},b={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},g=i(54);function y(e,t,i){if(e&&a.isObject(e)&&e instanceof r)return e;var n=new r;return n.parse(e,t,i),n}r.prototype.parse=function(e,t,i){if(!a.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var r=e.indexOf("?"),s=-1!==r&&r<e.indexOf("#")?"?":"#",p=e.split(s);p[0]=p[0].replace(/\\/g,"/");var y=e=p.join(s);if(y=y.trim(),!i&&1===e.split("#").length){var x=c.exec(y);if(x)return this.path=y,this.href=y,this.pathname=x[1],x[2]?(this.search=x[2],this.query=t?g.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var w=o.exec(y);if(w){var _=(w=w[0]).toLowerCase();this.protocol=_,y=y.substr(w.length)}if(i||w||y.match(/^\/\/[^@\/]+@[^@\/]+/)){var k="//"===y.substr(0,2);!k||w&&b[w]||(y=y.substr(2),this.slashes=!0)}if(!b[w]&&(k||w&&!v[w])){for(var E,S,A=-1,j=0;j<l.length;j++){-1!==(M=y.indexOf(l[j]))&&(-1===A||M<A)&&(A=M)}-1!==(S=-1===A?y.lastIndexOf("@"):y.lastIndexOf("@",A))&&(E=y.slice(0,S),y=y.slice(S+1),this.auth=decodeURIComponent(E)),A=-1;for(j=0;j<f.length;j++){var M;-1!==(M=y.indexOf(f[j]))&&(-1===A||M<A)&&(A=M)}-1===A&&(A=y.length),this.host=y.slice(0,A),y=y.slice(A),this.parseHost(),this.hostname=this.hostname||"";var I="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!I)for(var T=this.hostname.split(/\./),C=(j=0,T.length);j<C;j++){var O=T[j];if(O&&!O.match(d)){for(var B="",R=0,z=O.length;R<z;R++)O.charCodeAt(R)>127?B+="x":B+=O[R];if(!B.match(d)){var q=T.slice(0,j),P=T.slice(j+1),L=O.match(h);L&&(q.push(L[1]),P.unshift(L[2])),P.length&&(y="/"+P.join(".")+y),this.hostname=q.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),I||(this.hostname=n.toASCII(this.hostname));var N=this.port?":"+this.port:"",D=this.hostname||"";this.host=D+N,this.href+=this.host,I&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==y[0]&&(y="/"+y))}if(!m[_])for(j=0,C=u.length;j<C;j++){var U=u[j];if(-1!==y.indexOf(U)){var F=encodeURIComponent(U);F===U&&(F=escape(U)),y=y.split(U).join(F)}}var H=y.indexOf("#");-1!==H&&(this.hash=y.substr(H),y=y.slice(0,H));var Z=y.indexOf("?");if(-1!==Z?(this.search=y.substr(Z),this.query=y.substr(Z+1),t&&(this.query=g.parse(this.query)),y=y.slice(0,Z)):t&&(this.search="",this.query={}),y&&(this.pathname=y),v[_]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){N=this.pathname||"";var K=this.search||"";this.path=N+K}return this.href=this.format(),this},r.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",i=this.pathname||"",n=this.hash||"",r=!1,o="";this.host?r=e+this.host:this.hostname&&(r=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(r+=":"+this.port)),this.query&&a.isObject(this.query)&&Object.keys(this.query).length&&(o=g.stringify(this.query));var s=this.search||o&&"?"+o||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||v[t])&&!1!==r?(r="//"+(r||""),i&&"/"!==i.charAt(0)&&(i="/"+i)):r||(r=""),n&&"#"!==n.charAt(0)&&(n="#"+n),s&&"?"!==s.charAt(0)&&(s="?"+s),t+r+(i=i.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(s=s.replace("#","%23"))+n},r.prototype.resolve=function(e){return this.resolveObject(y(e,!1,!0)).format()},r.prototype.resolveObject=function(e){if(a.isString(e)){var t=new r;t.parse(e,!1,!0),e=t}for(var i=new r,n=Object.keys(this),o=0;o<n.length;o++){var s=n[o];i[s]=this[s]}if(i.hash=e.hash,""===e.href)return i.href=i.format(),i;if(e.slashes&&!e.protocol){for(var c=Object.keys(e),p=0;p<c.length;p++){var u=c[p];"protocol"!==u&&(i[u]=e[u])}return v[i.protocol]&&i.hostname&&!i.pathname&&(i.path=i.pathname="/"),i.href=i.format(),i}if(e.protocol&&e.protocol!==i.protocol){if(!v[e.protocol]){for(var f=Object.keys(e),l=0;l<f.length;l++){var d=f[l];i[d]=e[d]}return i.href=i.format(),i}if(i.protocol=e.protocol,e.host||b[e.protocol])i.pathname=e.pathname;else{for(var h=(e.pathname||"").split("/");h.length&&!(e.host=h.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==h[0]&&h.unshift(""),h.length<2&&h.unshift(""),i.pathname=h.join("/")}if(i.search=e.search,i.query=e.query,i.host=e.host||"",i.auth=e.auth,i.hostname=e.hostname||e.host,i.port=e.port,i.pathname||i.search){var m=i.pathname||"",g=i.search||"";i.path=m+g}return i.slashes=i.slashes||e.slashes,i.href=i.format(),i}var y=i.pathname&&"/"===i.pathname.charAt(0),x=e.host||e.pathname&&"/"===e.pathname.charAt(0),w=x||y||i.host&&e.pathname,_=w,k=i.pathname&&i.pathname.split("/")||[],E=(h=e.pathname&&e.pathname.split("/")||[],i.protocol&&!v[i.protocol]);if(E&&(i.hostname="",i.port=null,i.host&&(""===k[0]?k[0]=i.host:k.unshift(i.host)),i.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===h[0]?h[0]=e.host:h.unshift(e.host)),e.host=null),w=w&&(""===h[0]||""===k[0])),x)i.host=e.host||""===e.host?e.host:i.host,i.hostname=e.hostname||""===e.hostname?e.hostname:i.hostname,i.search=e.search,i.query=e.query,k=h;else if(h.length)k||(k=[]),k.pop(),k=k.concat(h),i.search=e.search,i.query=e.query;else if(!a.isNullOrUndefined(e.search)){if(E)i.hostname=i.host=k.shift(),(I=!!(i.host&&i.host.indexOf("@")>0)&&i.host.split("@"))&&(i.auth=I.shift(),i.host=i.hostname=I.shift());return i.search=e.search,i.query=e.query,a.isNull(i.pathname)&&a.isNull(i.search)||(i.path=(i.pathname?i.pathname:"")+(i.search?i.search:"")),i.href=i.format(),i}if(!k.length)return i.pathname=null,i.search?i.path="/"+i.search:i.path=null,i.href=i.format(),i;for(var S=k.slice(-1)[0],A=(i.host||e.host||k.length>1)&&("."===S||".."===S)||""===S,j=0,M=k.length;M>=0;M--)"."===(S=k[M])?k.splice(M,1):".."===S?(k.splice(M,1),j++):j&&(k.splice(M,1),j--);if(!w&&!_)for(;j--;j)k.unshift("..");!w||""===k[0]||k[0]&&"/"===k[0].charAt(0)||k.unshift(""),A&&"/"!==k.join("/").substr(-1)&&k.push("");var I,T=""===k[0]||k[0]&&"/"===k[0].charAt(0);E&&(i.hostname=i.host=T?"":k.length?k.shift():"",(I=!!(i.host&&i.host.indexOf("@")>0)&&i.host.split("@"))&&(i.auth=I.shift(),i.host=i.hostname=I.shift()));return(w=w||i.host&&k.length)&&!T&&k.unshift(""),k.length?i.pathname=k.join("/"):(i.pathname=null,i.path=null),a.isNull(i.pathname)&&a.isNull(i.search)||(i.path=(i.pathname?i.pathname:"")+(i.search?i.search:"")),i.auth=e.auth||i.auth,i.slashes=i.slashes||e.slashes,i.href=i.format(),i},r.prototype.parseHost=function(){var e=this.host,t=s.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,i){"use strict";
/*!
 * methods
 * Copyright(c) 2013-2014 TJ Holowaychuk
 * Copyright(c) 2015-2016 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(201);e.exports=n.METHODS&&n.METHODS.map((function(e){return e.toLowerCase()}))||["get","post","put","head","delete","options","trace","copy","lock","mkcol","move","purge","propfind","proppatch","unlock","report","mkactivity","checkout","merge","m-search","notify","subscribe","unsubscribe","patch","search","connect"]},function(e,t,i){(function(e){var n=i(205),a=i(92),r=i(207),o=i(208),s=i(55),c=t;c.request=function(t,i){t="string"==typeof t?s.parse(t):r(t);var a=-1===e.location.protocol.search(/^https?:$/)?"http:":"",o=t.protocol||a,c=t.hostname||t.host,p=t.port,u=t.path||"/";c&&-1!==c.indexOf(":")&&(c="["+c+"]"),t.url=(c?o+"//"+c:"")+(p?":"+p:"")+u,t.method=(t.method||"GET").toUpperCase(),t.headers=t.headers||{};var f=new n(t);return i&&f.on("response",i),f},c.get=function(e,t){var i=c.request(e,t);return i.end(),i},c.ClientRequest=n,c.IncomingMessage=a.IncomingMessage,c.Agent=function(){},c.Agent.defaultMaxSockets=4,c.globalAgent=new c.Agent,c.STATUS_CODES=o,c.METHODS=["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"]}).call(this,i(5))},function(e,t,i){"use strict";(function(t){
/*!
 * send
 * Copyright(c) 2012 TJ Holowaychuk
 * Copyright(c) 2014-2016 Douglas Christopher Wilson
 * MIT Licensed
 */
var n=i(210),a=i(8)("send"),r=i(9)("send"),o=i(211),s=i(41),c=i(42),p=i(95),u=i(129),f=i(17),l=i(278),d=i(280),h=i(37),m=i(130),b=i(11),v=i(22),g=i(16),y=i(52),x=b.extname,w=b.join,_=b.normalize,k=b.resolve,E=b.sep,S=/^ *bytes=/,A=/(?:^|[\\/])\.\.(?:[\\/]|$)/;function j(e,t,i){g.call(this);var n=i||{};if(this.options=n,this.path=t,this.req=e,this._acceptRanges=void 0===n.acceptRanges||Boolean(n.acceptRanges),this._cacheControl=void 0===n.cacheControl||Boolean(n.cacheControl),this._etag=void 0===n.etag||Boolean(n.etag),this._dotfiles=void 0!==n.dotfiles?n.dotfiles:"ignore","ignore"!==this._dotfiles&&"allow"!==this._dotfiles&&"deny"!==this._dotfiles)throw new TypeError('dotfiles option must be "allow", "deny", or "ignore"');this._hidden=Boolean(n.hidden),void 0!==n.hidden&&r("hidden: use dotfiles: '"+(this._hidden?"allow":"ignore")+"' instead"),void 0===n.dotfiles&&(this._dotfiles=void 0),this._extensions=void 0!==n.extensions?O(n.extensions,"extensions option"):[],this._immutable=void 0!==n.immutable&&Boolean(n.immutable),this._index=void 0!==n.index?O(n.index,"index option"):["index.html"],this._lastModified=void 0===n.lastModified||Boolean(n.lastModified),this._maxage=n.maxAge||n.maxage,this._maxage="string"==typeof this._maxage?d(this._maxage):Number(this._maxage),this._maxage=isNaN(this._maxage)?0:Math.min(Math.max(0,this._maxage),31536e6),this._root=n.root?k(n.root):null,!this._root&&n.from&&this.from(n.from)}function M(e,t,i){return e+" "+(i?i.start+"-"+i.end:"*")+"/"+t}function I(e,t){return'<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>'+e+"</title>\n</head>\n<body>\n<pre>"+t+"</pre>\n</body>\n</html>\n"}function T(e){return"function"!=typeof e.getHeaderNames?Object.keys(e._headers||{}):e.getHeaderNames()}function C(e,t){return("function"!=typeof e.listenerCount?e.listeners(t).length:e.listenerCount(t))>0}function O(e,t){for(var i=[].concat(e||[]),n=0;n<i.length;n++)if("string"!=typeof i[n])throw new TypeError(t+" must be array of strings or false");return i}function B(e){var t=e&&Date.parse(e);return"number"==typeof t?t:NaN}e.exports=function(e,t,i){return new j(e,t,i)},e.exports.mime=l,y.inherits(j,g),j.prototype.etag=r.function((function(e){return this._etag=Boolean(e),a("etag %s",this._etag),this}),"send.etag: pass etag as option"),j.prototype.hidden=r.function((function(e){return this._hidden=Boolean(e),this._dotfiles=void 0,a("hidden %s",this._hidden),this}),"send.hidden: use dotfiles option"),j.prototype.index=r.function((function(e){var t=e?O(e,"paths argument"):[];return a("index %o",e),this._index=t,this}),"send.index: pass index as option"),j.prototype.root=function(e){return this._root=k(String(e)),a("root %s",this._root),this},j.prototype.from=r.function(j.prototype.root,"send.from: pass root as option"),j.prototype.root=r.function(j.prototype.root,"send.root: pass root as option"),j.prototype.maxage=r.function((function(e){return this._maxage="string"==typeof e?d(e):Number(e),this._maxage=isNaN(this._maxage)?0:Math.min(Math.max(0,this._maxage),31536e6),a("max-age %d",this._maxage),this}),"send.maxage: pass maxAge as option"),j.prototype.error=function(e,i){if(C(this,"error"))return this.emit("error",n(e,i,{expose:!1}));var a=this.res,r=v[e]||String(e),o=I("Error",c(r));!function(e){for(var t=T(e),i=0;i<t.length;i++)e.removeHeader(t[i])}(a),i&&i.headers&&function(e,t){for(var i=Object.keys(t),n=0;n<i.length;n++){var a=i[n];e.setHeader(a,t[a])}}(a,i.headers),a.statusCode=e,a.setHeader("Content-Type","text/html; charset=UTF-8"),a.setHeader("Content-Length",t.byteLength(o)),a.setHeader("Content-Security-Policy","default-src 'none'"),a.setHeader("X-Content-Type-Options","nosniff"),a.end(o)},j.prototype.hasTrailingSlash=function(){return"/"===this.path[this.path.length-1]},j.prototype.isConditionalGET=function(){return this.req.headers["if-match"]||this.req.headers["if-unmodified-since"]||this.req.headers["if-none-match"]||this.req.headers["if-modified-since"]},j.prototype.isPreconditionFailure=function(){var e=this.req,t=this.res,i=e.headers["if-match"];if(i){var n=t.getHeader("ETag");return!n||"*"!==i&&function(e){for(var t=0,i=[],n=0,a=0,r=e.length;a<r;a++)switch(e.charCodeAt(a)){case 32:n===t&&(n=t=a+1);break;case 44:i.push(e.substring(n,t)),n=t=a+1;break;default:t=a+1}return i.push(e.substring(n,t)),i}(i).every((function(e){return e!==n&&e!=="W/"+n&&"W/"+e!==n}))}var a=B(e.headers["if-unmodified-since"]);if(!isNaN(a)){var r=B(t.getHeader("Last-Modified"));return isNaN(r)||r>a}return!1},j.prototype.removeContentHeaderFields=function(){for(var e=this.res,t=T(e),i=0;i<t.length;i++){var n=t[i];"content-"===n.substr(0,8)&&"content-location"!==n&&e.removeHeader(n)}},j.prototype.notModified=function(){var e=this.res;a("not modified"),this.removeContentHeaderFields(),e.statusCode=304,e.end()},j.prototype.headersAlreadySent=function(){var e=new Error("Can't set headers after they are sent.");a("headers already sent"),this.error(500,e)},j.prototype.isCachable=function(){var e=this.res.statusCode;return e>=200&&e<300||304===e},j.prototype.onStatError=function(e){switch(e.code){case"ENAMETOOLONG":case"ENOENT":case"ENOTDIR":this.error(404,e);break;default:this.error(500,e)}},j.prototype.isFresh=function(){return u(this.req.headers,{etag:this.res.getHeader("ETag"),"last-modified":this.res.getHeader("Last-Modified")})},j.prototype.isRangeFresh=function(){var e=this.req.headers["if-range"];if(!e)return!0;if(-1!==e.indexOf('"')){var t=this.res.getHeader("ETag");return Boolean(t&&-1!==e.indexOf(t))}return B(this.res.getHeader("Last-Modified"))<=B(e)},j.prototype.redirect=function(e){var i=this.res;if(C(this,"directory"))this.emit("directory",i,e);else if(this.hasTrailingSlash())this.error(403);else{var n=s(function(e){for(var t=0;t<e.length&&"/"===e[t];t++);return t>1?"/"+e.substr(t):e}(this.path+"/")),a=I("Redirecting",'Redirecting to <a href="'+c(n)+'">'+c(n)+"</a>");i.statusCode=301,i.setHeader("Content-Type","text/html; charset=UTF-8"),i.setHeader("Content-Length",t.byteLength(a)),i.setHeader("Content-Security-Policy","default-src 'none'"),i.setHeader("X-Content-Type-Options","nosniff"),i.setHeader("Location",n),i.end(a)}},j.prototype.pipe=function(e){var t=this._root;this.res=e;var i,n=function(e){try{return decodeURIComponent(e)}catch(e){return-1}}(this.path);if(-1===n)return this.error(400),e;if(~n.indexOf("\0"))return this.error(400),e;if(null!==t){if(n&&(n=_("."+E+n)),A.test(n))return a('malicious path "%s"',n),this.error(403),e;i=n.split(E),n=_(w(t,n))}else{if(A.test(n))return a('malicious path "%s"',n),this.error(403),e;i=_(n).split(E),n=k(n)}if(function(e){for(var t=0;t<e.length;t++){var i=e[t];if(i.length>1&&"."===i[0])return!0}return!1}(i)){var r=this._dotfiles;switch(void 0===r&&(r="."===i[i.length-1][0]?this._hidden?"allow":"ignore":"allow"),a('%s dotfile "%s"',r,n),r){case"allow":break;case"deny":return this.error(403),e;case"ignore":default:return this.error(404),e}}return this._index.length&&this.hasTrailingSlash()?(this.sendIndex(n),e):(this.sendFile(n),e)},j.prototype.send=function(e,t){var i=t.size,n=this.options,r={},o=this.res,s=this.req,c=s.headers.range,p=n.start||0;if(function(e){return"boolean"!=typeof e.headersSent?Boolean(e._header):e.headersSent}(o))this.headersAlreadySent();else{if(a('pipe "%s"',e),this.setHeader(e,t),this.type(e),this.isConditionalGET()){if(this.isPreconditionFailure())return void this.error(412);if(this.isCachable()&&this.isFresh())return void this.notModified()}if(i=Math.max(0,i-p),void 0!==n.end){var u=n.end-p+1;i>u&&(i=u)}if(this._acceptRanges&&S.test(c)){if(c=m(i,c,{combine:!0}),this.isRangeFresh()||(a("range stale"),c=-2),-1===c)return a("range unsatisfiable"),o.setHeader("Content-Range",M("bytes",i)),this.error(416,{headers:{"Content-Range":o.getHeader("Content-Range")}});-2!==c&&1===c.length&&(a("range %j",c),o.statusCode=206,o.setHeader("Content-Range",M("bytes",i,c[0])),p+=c[0].start,i=c[0].end-c[0].start+1)}for(var f in n)r[f]=n[f];r.start=p,r.end=Math.max(p,p+i-1),o.setHeader("Content-Length",i),"HEAD"!==s.method?this.stream(e,r):o.end()}},j.prototype.sendFile=function(e){var t=0,i=this;a('stat "%s"',e),f.stat(e,(function(n,r){return n&&"ENOENT"===n.code&&!x(e)&&e[e.length-1]!==E?function n(r){if(i._extensions.length<=t)return r?i.onStatError(r):i.error(404);var o=e+"."+i._extensions[t++];a('stat "%s"',o),f.stat(o,(function(e,t){return e?n(e):t.isDirectory()?n():(i.emit("file",o,t),void i.send(o,t))}))}(n):n?i.onStatError(n):r.isDirectory()?i.redirect(e):(i.emit("file",e,r),void i.send(e,r))}))},j.prototype.sendIndex=function(e){var t=-1,i=this;!function n(r){if(++t>=i._index.length)return r?i.onStatError(r):i.error(404);var o=w(e,i._index[t]);a('stat "%s"',o),f.stat(o,(function(e,t){return e?n(e):t.isDirectory()?n():(i.emit("file",o,t),void i.send(o,t))}))}()},j.prototype.stream=function(e,t){var i=!1,n=this,a=this.res,r=f.createReadStream(e,t);this.emit("stream",r),r.pipe(a),h(a,(function(){i=!0,o(r)})),r.on("error",(function(e){i||(i=!0,o(r),n.onStatError(e))})),r.on("end",(function(){n.emit("end")}))},j.prototype.type=function(e){var t=this.res;if(!t.getHeader("Content-Type")){var i=l.lookup(e);if(i){var n=l.charsets.lookup(i);a("content-type %s",i),t.setHeader("Content-Type",i+(n?"; charset="+n:""))}else a("no content-type")}},j.prototype.setHeader=function(e,t){var i=this.res;if(this.emit("headers",i,e,t),this._acceptRanges&&!i.getHeader("Accept-Ranges")&&(a("accept ranges"),i.setHeader("Accept-Ranges","bytes")),this._cacheControl&&!i.getHeader("Cache-Control")){var n="public, max-age="+Math.floor(this._maxage/1e3);this._immutable&&(n+=", immutable"),a("cache-control %s",n),i.setHeader("Cache-Control",n)}if(this._lastModified&&!i.getHeader("Last-Modified")){var r=t.mtime.toUTCString();a("modified %s",r),i.setHeader("Last-Modified",r)}if(this._etag&&!i.getHeader("ETag")){var o=p(t);a("etag %s",o),i.setHeader("ETag",o)}}}).call(this,i(2).Buffer)},function(e,t,i){"use strict";var n=i(0),a=i(97),r=i(1).Buffer,o=new Array(16);function s(){a.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878}function c(e,t){return e<<t|e>>>32-t}function p(e,t,i,n,a,r,o){return c(e+(t&i|~t&n)+a+r|0,o)+t|0}function u(e,t,i,n,a,r,o){return c(e+(t&n|i&~n)+a+r|0,o)+t|0}function f(e,t,i,n,a,r,o){return c(e+(t^i^n)+a+r|0,o)+t|0}function l(e,t,i,n,a,r,o){return c(e+(i^(t|~n))+a+r|0,o)+t|0}n(s,a),s.prototype._update=function(){for(var e=o,t=0;t<16;++t)e[t]=this._block.readInt32LE(4*t);var i=this._a,n=this._b,a=this._c,r=this._d;i=p(i,n,a,r,e[0],3614090360,7),r=p(r,i,n,a,e[1],3905402710,12),a=p(a,r,i,n,e[2],606105819,17),n=p(n,a,r,i,e[3],3250441966,22),i=p(i,n,a,r,e[4],4118548399,7),r=p(r,i,n,a,e[5],1200080426,12),a=p(a,r,i,n,e[6],2821735955,17),n=p(n,a,r,i,e[7],4249261313,22),i=p(i,n,a,r,e[8],1770035416,7),r=p(r,i,n,a,e[9],2336552879,12),a=p(a,r,i,n,e[10],4294925233,17),n=p(n,a,r,i,e[11],2304563134,22),i=p(i,n,a,r,e[12],1804603682,7),r=p(r,i,n,a,e[13],4254626195,12),a=p(a,r,i,n,e[14],2792965006,17),i=u(i,n=p(n,a,r,i,e[15],1236535329,22),a,r,e[1],4129170786,5),r=u(r,i,n,a,e[6],3225465664,9),a=u(a,r,i,n,e[11],643717713,14),n=u(n,a,r,i,e[0],3921069994,20),i=u(i,n,a,r,e[5],3593408605,5),r=u(r,i,n,a,e[10],38016083,9),a=u(a,r,i,n,e[15],3634488961,14),n=u(n,a,r,i,e[4],3889429448,20),i=u(i,n,a,r,e[9],568446438,5),r=u(r,i,n,a,e[14],3275163606,9),a=u(a,r,i,n,e[3],4107603335,14),n=u(n,a,r,i,e[8],1163531501,20),i=u(i,n,a,r,e[13],2850285829,5),r=u(r,i,n,a,e[2],4243563512,9),a=u(a,r,i,n,e[7],1735328473,14),i=f(i,n=u(n,a,r,i,e[12],2368359562,20),a,r,e[5],4294588738,4),r=f(r,i,n,a,e[8],2272392833,11),a=f(a,r,i,n,e[11],1839030562,16),n=f(n,a,r,i,e[14],4259657740,23),i=f(i,n,a,r,e[1],2763975236,4),r=f(r,i,n,a,e[4],1272893353,11),a=f(a,r,i,n,e[7],4139469664,16),n=f(n,a,r,i,e[10],3200236656,23),i=f(i,n,a,r,e[13],681279174,4),r=f(r,i,n,a,e[0],3936430074,11),a=f(a,r,i,n,e[3],3572445317,16),n=f(n,a,r,i,e[6],76029189,23),i=f(i,n,a,r,e[9],3654602809,4),r=f(r,i,n,a,e[12],3873151461,11),a=f(a,r,i,n,e[15],530742520,16),i=l(i,n=f(n,a,r,i,e[2],3299628645,23),a,r,e[0],4096336452,6),r=l(r,i,n,a,e[7],1126891415,10),a=l(a,r,i,n,e[14],2878612391,15),n=l(n,a,r,i,e[5],4237533241,21),i=l(i,n,a,r,e[12],1700485571,6),r=l(r,i,n,a,e[3],2399980690,10),a=l(a,r,i,n,e[10],4293915773,15),n=l(n,a,r,i,e[1],2240044497,21),i=l(i,n,a,r,e[8],1873313359,6),r=l(r,i,n,a,e[15],4264355552,10),a=l(a,r,i,n,e[6],2734768916,15),n=l(n,a,r,i,e[13],1309151649,21),i=l(i,n,a,r,e[4],4149444226,6),r=l(r,i,n,a,e[11],3174756917,10),a=l(a,r,i,n,e[2],718787259,15),n=l(n,a,r,i,e[9],3951481745,21),this._a=this._a+i|0,this._b=this._b+n|0,this._c=this._c+a|0,this._d=this._d+r|0},s.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var e=r.allocUnsafe(16);return e.writeInt32LE(this._a,0),e.writeInt32LE(this._b,4),e.writeInt32LE(this._c,8),e.writeInt32LE(this._d,12),e},e.exports=s},function(e,t,i){"use strict";var n=i(2).Buffer,a=i(0),r=i(97),o=new Array(16),s=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],c=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],p=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],u=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],f=[0,1518500249,1859775393,2400959708,2840853838],l=[1352829926,1548603684,1836072691,2053994217,0];function d(){r.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520}function h(e,t){return e<<t|e>>>32-t}function m(e,t,i,n,a,r,o,s){return h(e+(t^i^n)+r+o|0,s)+a|0}function b(e,t,i,n,a,r,o,s){return h(e+(t&i|~t&n)+r+o|0,s)+a|0}function v(e,t,i,n,a,r,o,s){return h(e+((t|~i)^n)+r+o|0,s)+a|0}function g(e,t,i,n,a,r,o,s){return h(e+(t&n|i&~n)+r+o|0,s)+a|0}function y(e,t,i,n,a,r,o,s){return h(e+(t^(i|~n))+r+o|0,s)+a|0}a(d,r),d.prototype._update=function(){for(var e=o,t=0;t<16;++t)e[t]=this._block.readInt32LE(4*t);for(var i=0|this._a,n=0|this._b,a=0|this._c,r=0|this._d,d=0|this._e,x=0|this._a,w=0|this._b,_=0|this._c,k=0|this._d,E=0|this._e,S=0;S<80;S+=1){var A,j;S<16?(A=m(i,n,a,r,d,e[s[S]],f[0],p[S]),j=y(x,w,_,k,E,e[c[S]],l[0],u[S])):S<32?(A=b(i,n,a,r,d,e[s[S]],f[1],p[S]),j=g(x,w,_,k,E,e[c[S]],l[1],u[S])):S<48?(A=v(i,n,a,r,d,e[s[S]],f[2],p[S]),j=v(x,w,_,k,E,e[c[S]],l[2],u[S])):S<64?(A=g(i,n,a,r,d,e[s[S]],f[3],p[S]),j=b(x,w,_,k,E,e[c[S]],l[3],u[S])):(A=y(i,n,a,r,d,e[s[S]],f[4],p[S]),j=m(x,w,_,k,E,e[c[S]],l[4],u[S])),i=d,d=r,r=h(a,10),a=n,n=A,x=E,E=k,k=h(_,10),_=w,w=j}var M=this._b+a+k|0;this._b=this._c+r+E|0,this._c=this._d+d+x|0,this._d=this._e+i+w|0,this._e=this._a+n+_|0,this._a=M},d.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var e=n.alloc?n.alloc(20):new n(20);return e.writeInt32LE(this._a,0),e.writeInt32LE(this._b,4),e.writeInt32LE(this._c,8),e.writeInt32LE(this._d,12),e.writeInt32LE(this._e,16),e},e.exports=d},function(e,t,i){(t=e.exports=function(e){e=e.toLowerCase();var i=t[e];if(!i)throw new Error(e+" is not supported (we accept pull requests)");return new i}).sha=i(212),t.sha1=i(213),t.sha224=i(214),t.sha256=i(98),t.sha384=i(215),t.sha512=i(99)},function(e,t,i){"use strict";var n=i(6);function a(e){this.options=e,this.type=this.options.type,this.blockSize=8,this._init(),this.buffer=new Array(this.blockSize),this.bufferOff=0}e.exports=a,a.prototype._init=function(){},a.prototype.update=function(e){return 0===e.length?[]:"decrypt"===this.type?this._updateDecrypt(e):this._updateEncrypt(e)},a.prototype._buffer=function(e,t){for(var i=Math.min(this.buffer.length-this.bufferOff,e.length-t),n=0;n<i;n++)this.buffer[this.bufferOff+n]=e[t+n];return this.bufferOff+=i,i},a.prototype._flushBuffer=function(e,t){return this._update(this.buffer,0,e,t),this.bufferOff=0,this.blockSize},a.prototype._updateEncrypt=function(e){var t=0,i=0,n=(this.bufferOff+e.length)/this.blockSize|0,a=new Array(n*this.blockSize);0!==this.bufferOff&&(t+=this._buffer(e,t),this.bufferOff===this.buffer.length&&(i+=this._flushBuffer(a,i)));for(var r=e.length-(e.length-t)%this.blockSize;t<r;t+=this.blockSize)this._update(e,t,a,i),i+=this.blockSize;for(;t<e.length;t++,this.bufferOff++)this.buffer[this.bufferOff]=e[t];return a},a.prototype._updateDecrypt=function(e){for(var t=0,i=0,n=Math.ceil((this.bufferOff+e.length)/this.blockSize)-1,a=new Array(n*this.blockSize);n>0;n--)t+=this._buffer(e,t),i+=this._flushBuffer(a,i);return t+=this._buffer(e,t),a},a.prototype.final=function(e){var t,i;return e&&(t=this.update(e)),i="encrypt"===this.type?this._finalEncrypt():this._finalDecrypt(),t?t.concat(i):i},a.prototype._pad=function(e,t){if(0===t)return!1;for(;t<e.length;)e[t++]=0;return!0},a.prototype._finalEncrypt=function(){if(!this._pad(this.buffer,this.bufferOff))return[];var e=new Array(this.blockSize);return this._update(this.buffer,0,e,0),e},a.prototype._unpad=function(e){return e},a.prototype._finalDecrypt=function(){n.equal(this.bufferOff,this.blockSize,"Not enough data to decrypt");var e=new Array(this.blockSize);return this._flushBuffer(e,0),this._unpad(e)}},function(e,t,i){var n=i(224),a=i(232),r=i(111);t.createCipher=t.Cipher=n.createCipher,t.createCipheriv=t.Cipheriv=n.createCipheriv,t.createDecipher=t.Decipher=a.createDecipher,t.createDecipheriv=t.Decipheriv=a.createDecipheriv,t.listCiphers=t.getCiphers=function(){return Object.keys(r)}},function(e,t,i){var n={ECB:i(225),CBC:i(226),CFB:i(227),CFB8:i(228),CFB1:i(229),OFB:i(230),CTR:i(109),GCM:i(109)},a=i(111);for(var r in a)a[r].module=n[a[r].mode];e.exports=a},function(e,t,i){var n;function a(e){this.rand=e}if(e.exports=function(e){return n||(n=new a(null)),n.generate(e)},e.exports.Rand=a,a.prototype.generate=function(e){return this._rand(e)},a.prototype._rand=function(e){if(this.rand.getBytes)return this.rand.getBytes(e);for(var t=new Uint8Array(e),i=0;i<t.length;i++)t[i]=this.rand.getByte();return t},"object"==typeof self)self.crypto&&self.crypto.getRandomValues?a.prototype._rand=function(e){var t=new Uint8Array(e);return self.crypto.getRandomValues(t),t}:self.msCrypto&&self.msCrypto.getRandomValues?a.prototype._rand=function(e){var t=new Uint8Array(e);return self.msCrypto.getRandomValues(t),t}:"object"==typeof window&&(a.prototype._rand=function(){throw new Error("Not implemented yet")});else try{var r=i(236);if("function"!=typeof r.randomBytes)throw new Error("Not supported");a.prototype._rand=function(e){return r.randomBytes(e)}}catch(e){}},function(e,t,i){(function(t){var n=i(4),a=i(18);function r(e,i){var a=function(e){var t=o(e);return{blinder:t.toRed(n.mont(e.modulus)).redPow(new n(e.publicExponent)).fromRed(),unblinder:t.invm(e.modulus)}}(i),r=i.modulus.byteLength(),s=(n.mont(i.modulus),new n(e).mul(a.blinder).umod(i.modulus)),c=s.toRed(n.mont(i.prime1)),p=s.toRed(n.mont(i.prime2)),u=i.coefficient,f=i.prime1,l=i.prime2,d=c.redPow(i.exponent1),h=p.redPow(i.exponent2);d=d.fromRed(),h=h.fromRed();var m=d.isub(h).imul(u).umod(f);return m.imul(l),h.iadd(m),new t(h.imul(a.unblinder).umod(i.modulus).toArray(!1,r))}function o(e){for(var t=e.modulus.byteLength(),i=new n(a(t));i.cmp(e.modulus)>=0||!i.umod(e.prime1)||!i.umod(e.prime2);)i=new n(a(t));return i}e.exports=r,r.getr=o}).call(this,i(2).Buffer)},function(e,t,i){"use strict";var n=t;n.version=i(241).version,n.utils=i(7),n.rand=i(66),n.curve=i(117),n.curves=i(69),n.ec=i(252),n.eddsa=i(256)},function(e,t,i){"use strict";var n,a=t,r=i(70),o=i(117),s=i(7).assert;function c(e){"short"===e.type?this.curve=new o.short(e):"edwards"===e.type?this.curve=new o.edwards(e):this.curve=new o.mont(e),this.g=this.curve.g,this.n=this.curve.n,this.hash=e.hash,s(this.g.validate(),"Invalid curve"),s(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function p(e,t){Object.defineProperty(a,e,{configurable:!0,enumerable:!0,get:function(){var i=new c(t);return Object.defineProperty(a,e,{configurable:!0,enumerable:!0,value:i}),i}})}a.PresetCurve=c,p("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:r.sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),p("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:r.sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),p("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:r.sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),p("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:r.sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),p("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:r.sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),p("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:r.sha256,gRed:!1,g:["9"]}),p("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:r.sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{n=i(251)}catch(e){n=void 0}p("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:r.sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",n]})},function(e,t,i){var n=t;n.utils=i(10),n.common=i(30),n.sha=i(245),n.ripemd=i(249),n.hmac=i(250),n.sha1=n.sha.sha1,n.sha256=n.sha.sha256,n.sha224=n.sha.sha224,n.sha384=n.sha.sha384,n.sha512=n.sha.sha512,n.ripemd160=n.ripemd.ripemd160},function(e,t){
/*!
 * toidentifier
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */
e.exports=function(e){return e.split(" ").map((function(e){return e.slice(0,1).toUpperCase()+e.slice(1)})).join("").replace(/[^ _0-9a-z]/gi,"")}},function(e,t){var i={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==i.call(e)}},function(e,t,i){"use strict";(function(t){var n=i(15).Buffer,a=i(144),r=e.exports;r.encodings=null,r.defaultCharUnicode="�",r.defaultCharSingleByte="?",r.encode=function(e,t,i){e=""+(e||"");var a=r.getEncoder(t,i),o=a.write(e),s=a.end();return s&&s.length>0?n.concat([o,s]):o},r.decode=function(e,t,i){"string"==typeof e&&(r.skipDecodeWarning||(console.error("Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding"),r.skipDecodeWarning=!0),e=n.from(""+(e||""),"binary"));var a=r.getDecoder(t,i),o=a.write(e),s=a.end();return s?o+s:o},r.encodingExists=function(e){try{return r.getCodec(e),!0}catch(e){return!1}},r.toEncoding=r.encode,r.fromEncoding=r.decode,r._codecDataCache={},r.getCodec=function(e){r.encodings||(r.encodings=i(145));for(var t=r._canonicalizeEncoding(e),n={};;){var a=r._codecDataCache[t];if(a)return a;var o=r.encodings[t];switch(typeof o){case"string":t=o;break;case"object":for(var s in o)n[s]=o[s];n.encodingName||(n.encodingName=t),t=o.type;break;case"function":return n.encodingName||(n.encodingName=t),a=new o(n,r),r._codecDataCache[n.encodingName]=a,a;default:throw new Error("Encoding not recognized: '"+e+"' (searched as: '"+t+"')")}}},r._canonicalizeEncoding=function(e){return(""+e).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g,"")},r.getEncoder=function(e,t){var i=r.getCodec(e),n=new i.encoder(t,i);return i.bomAware&&t&&t.addBOM&&(n=new a.PrependBOM(n,t)),n},r.getDecoder=function(e,t){var i=r.getCodec(e),n=new i.decoder(t,i);return!i.bomAware||t&&!1===t.stripBOM||(n=new a.StripBOM(n,t)),n};var o=void 0!==t&&t.versions&&t.versions.node;if(o){var s=o.split(".").map(Number);(s[0]>0||s[1]>=10)&&i(159)(r),i(160)(r)}}).call(this,i(3))},function(e){e.exports=JSON.parse('[["a140","",62],["a180","",32],["a240","",62],["a280","",32],["a2ab","",5],["a2e3","€"],["a2ef",""],["a2fd",""],["a340","",62],["a380","",31,"　"],["a440","",62],["a480","",32],["a4f4","",10],["a540","",62],["a580","",32],["a5f7","",7],["a640","",62],["a680","",32],["a6b9","",7],["a6d9","",6],["a6ec",""],["a6f3",""],["a6f6","",8],["a740","",62],["a780","",32],["a7c2","",14],["a7f2","",12],["a896","",10],["a8bc",""],["a8bf","ǹ"],["a8c1",""],["a8ea","",20],["a958",""],["a95b",""],["a95d",""],["a989","〾⿰",11],["a997","",12],["a9f0","",14],["aaa1","",93],["aba1","",93],["aca1","",93],["ada1","",93],["aea1","",93],["afa1","",93],["d7fa","",4],["f8a1","",93],["f9a1","",93],["faa1","",93],["fba1","",93],["fca1","",93],["fda1","",93],["fe50","⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"],["fe80","䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓",6,"䶮",93]]')},function(e){e.exports=JSON.parse('[["0","\\u0000",127],["a140","　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"],["a1a1","﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢",4,"～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"],["a240","＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁",7,"▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"],["a2a1","╮╰╯═╞╪╡◢◣◥◤╱╲╳０",9,"Ⅰ",9,"〡",8,"十卄卅Ａ",25,"ａ",21],["a340","ｗｘｙｚΑ",16,"Σ",6,"α",16,"σ",6,"ㄅ",10],["a3a1","ㄐ",25,"˙ˉˊˇˋ"],["a3e1","€"],["a440","一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才"],["a4a1","丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙"],["a540","世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外"],["a5a1","央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全"],["a640","共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年"],["a6a1","式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣"],["a740","作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍"],["a7a1","均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠"],["a840","杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒"],["a8a1","芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵"],["a940","咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居"],["a9a1","屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊"],["aa40","昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠"],["aaa1","炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附"],["ab40","陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品"],["aba1","哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷"],["ac40","拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗"],["aca1","活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄"],["ad40","耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥"],["ada1","迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪"],["ae40","哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙"],["aea1","恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓"],["af40","浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷"],["afa1","砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃"],["b040","虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡"],["b0a1","陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀"],["b140","娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽"],["b1a1","情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺"],["b240","毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶"],["b2a1","瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼"],["b340","莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途"],["b3a1","部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠"],["b440","婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍"],["b4a1","插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋"],["b540","溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘"],["b5a1","窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁"],["b640","詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑"],["b6a1","間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼"],["b740","媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業"],["b7a1","楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督"],["b840","睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫"],["b8a1","腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊"],["b940","辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴"],["b9a1","飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇"],["ba40","愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢"],["baa1","滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬"],["bb40","罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤"],["bba1","說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜"],["bc40","劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂"],["bca1","慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃"],["bd40","瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯"],["bda1","翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞"],["be40","輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉"],["bea1","鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡"],["bf40","濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊"],["bfa1","縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚"],["c040","錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇"],["c0a1","嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬"],["c140","瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪"],["c1a1","薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁"],["c240","駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘"],["c2a1","癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦"],["c340","鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸"],["c3a1","獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類"],["c440","願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼"],["c4a1","纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴"],["c540","護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬"],["c5a1","禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒"],["c640","讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲"],["c940","乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕"],["c9a1","氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋"],["ca40","汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘"],["caa1","吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇"],["cb40","杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓"],["cba1","芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢"],["cc40","坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋"],["cca1","怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲"],["cd40","泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺"],["cda1","矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏"],["ce40","哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛"],["cea1","峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺"],["cf40","柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂"],["cfa1","洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀"],["d040","穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪"],["d0a1","苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱"],["d140","唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧"],["d1a1","恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤"],["d240","毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸"],["d2a1","牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐"],["d340","笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢"],["d3a1","荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐"],["d440","酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅"],["d4a1","唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏"],["d540","崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟"],["d5a1","捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉"],["d640","淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏"],["d6a1","痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟"],["d740","耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷"],["d7a1","蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪"],["d840","釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷"],["d8a1","堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔"],["d940","惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒"],["d9a1","晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞"],["da40","湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖"],["daa1","琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥"],["db40","罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳"],["dba1","菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺"],["dc40","軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈"],["dca1","隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆"],["dd40","媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤"],["dda1","搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼"],["de40","毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓"],["dea1","煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓"],["df40","稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯"],["dfa1","腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤"],["e040","觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿"],["e0a1","遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠"],["e140","凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠"],["e1a1","寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉"],["e240","榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊"],["e2a1","漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓"],["e340","禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞"],["e3a1","耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻"],["e440","裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍"],["e4a1","銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘"],["e540","噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉"],["e5a1","憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒"],["e640","澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙"],["e6a1","獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟"],["e740","膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢"],["e7a1","蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧"],["e840","踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓"],["e8a1","銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮"],["e940","噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺"],["e9a1","憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸"],["ea40","澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙"],["eaa1","瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘"],["eb40","蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠"],["eba1","諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌"],["ec40","錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕"],["eca1","魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎"],["ed40","檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶"],["eda1","瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞"],["ee40","蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞"],["eea1","謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜"],["ef40","鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰"],["efa1","鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶"],["f040","璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒"],["f0a1","臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧"],["f140","蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪"],["f1a1","鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰"],["f240","徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛"],["f2a1","礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕"],["f340","譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦"],["f3a1","鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲"],["f440","嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩"],["f4a1","禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿"],["f540","鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛"],["f5a1","鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥"],["f640","蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺"],["f6a1","騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚"],["f740","糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊"],["f7a1","驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾"],["f840","讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏"],["f8a1","齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚"],["f940","纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊"],["f9a1","龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓"]]')},function(e,t,i){"use strict";
/*!
 * unpipe
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e){if(!e)throw new TypeError("argument stream is required");if("function"==typeof e.unpipe)return void e.unpipe();if(!function(e){for(var t=e.listeners("data"),i=0;i<t.length;i++)if("ondata"===t[i].name)return!0;return!1}(e))return;for(var t,i=e.listeners("close"),n=0;n<i.length;n++)"cleanup"!==(t=i[n]).name&&"onclose"!==t.name||t.call(e)}},function(e,t,i){"use strict";(function(t,n){var a=i(39);e.exports=y;var r,o=i(72);y.ReadableState=g;i(38).EventEmitter;var s=function(e,t){return e.listeners(t).length},c=i(78),p=i(50).Buffer,u=t.Uint8Array||function(){};var f=Object.create(i(25));f.inherits=i(0);var l=i(164),d=void 0;d=l&&l.debuglog?l.debuglog("stream"):function(){};var h,m=i(165),b=i(79);f.inherits(y,c);var v=["error","close","destroy","pause","resume"];function g(e,t){e=e||{};var n=t instanceof(r=r||i(13));this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var a=e.highWaterMark,o=e.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=a||0===a?a:n&&(o||0===o)?o:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new m,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(h||(h=i(36).StringDecoder),this.decoder=new h(e.encoding),this.encoding=e.encoding)}function y(e){if(r=r||i(13),!(this instanceof y))return new y(e);this._readableState=new g(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),c.call(this)}function x(e,t,i,n,a){var r,o=e._readableState;null===t?(o.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var i=t.decoder.end();i&&i.length&&(t.buffer.push(i),t.length+=t.objectMode?1:i.length)}t.ended=!0,k(e)}(e,o)):(a||(r=function(e,t){var i;n=t,p.isBuffer(n)||n instanceof u||"string"==typeof t||void 0===t||e.objectMode||(i=new TypeError("Invalid non-string/buffer chunk"));var n;return i}(o,t)),r?e.emit("error",r):o.objectMode||t&&t.length>0?("string"==typeof t||o.objectMode||Object.getPrototypeOf(t)===p.prototype||(t=function(e){return p.from(e)}(t)),n?o.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):w(e,o,t,!0):o.ended?e.emit("error",new Error("stream.push() after EOF")):(o.reading=!1,o.decoder&&!i?(t=o.decoder.write(t),o.objectMode||0!==t.length?w(e,o,t,!1):S(e,o)):w(e,o,t,!1))):n||(o.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(o)}function w(e,t,i,n){t.flowing&&0===t.length&&!t.sync?(e.emit("data",i),e.read(0)):(t.length+=t.objectMode?1:i.length,n?t.buffer.unshift(i):t.buffer.push(i),t.needReadable&&k(e)),S(e,t)}Object.defineProperty(y.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),y.prototype.destroy=b.destroy,y.prototype._undestroy=b.undestroy,y.prototype._destroy=function(e,t){this.push(null),t(e)},y.prototype.push=function(e,t){var i,n=this._readableState;return n.objectMode?i=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=p.from(e,t),t=""),i=!0),x(this,e,t,!1,i)},y.prototype.unshift=function(e){return x(this,e,null,!0,!1)},y.prototype.isPaused=function(){return!1===this._readableState.flowing},y.prototype.setEncoding=function(e){return h||(h=i(36).StringDecoder),this._readableState.decoder=new h(e),this._readableState.encoding=e,this};function _(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=8388608?e=8388608:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function k(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(d("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?a.nextTick(E,e):E(e))}function E(e){d("emit readable"),e.emit("readable"),I(e)}function S(e,t){t.readingMore||(t.readingMore=!0,a.nextTick(A,e,t))}function A(e,t){for(var i=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(d("maybeReadMore read 0"),e.read(0),i!==t.length);)i=t.length;t.readingMore=!1}function j(e){d("readable nexttick read 0"),e.read(0)}function M(e,t){t.reading||(d("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),I(e),t.flowing&&!t.reading&&e.read(0)}function I(e){var t=e._readableState;for(d("flow",t.flowing);t.flowing&&null!==e.read(););}function T(e,t){return 0===t.length?null:(t.objectMode?i=t.buffer.shift():!e||e>=t.length?(i=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):i=function(e,t,i){var n;e<t.head.data.length?(n=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):n=e===t.head.data.length?t.shift():i?function(e,t){var i=t.head,n=1,a=i.data;e-=a.length;for(;i=i.next;){var r=i.data,o=e>r.length?r.length:e;if(o===r.length?a+=r:a+=r.slice(0,e),0===(e-=o)){o===r.length?(++n,i.next?t.head=i.next:t.head=t.tail=null):(t.head=i,i.data=r.slice(o));break}++n}return t.length-=n,a}(e,t):function(e,t){var i=p.allocUnsafe(e),n=t.head,a=1;n.data.copy(i),e-=n.data.length;for(;n=n.next;){var r=n.data,o=e>r.length?r.length:e;if(r.copy(i,i.length-e,0,o),0===(e-=o)){o===r.length?(++a,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=r.slice(o));break}++a}return t.length-=a,i}(e,t);return n}(e,t.buffer,t.decoder),i);var i}function C(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,a.nextTick(O,t,e))}function O(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function B(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1}y.prototype.read=function(e){d("read",e),e=parseInt(e,10);var t=this._readableState,i=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return d("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?C(this):k(this),null;if(0===(e=_(e,t))&&t.ended)return 0===t.length&&C(this),null;var n,a=t.needReadable;return d("need readable",a),(0===t.length||t.length-e<t.highWaterMark)&&d("length less than watermark",a=!0),t.ended||t.reading?d("reading or ended",a=!1):a&&(d("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=_(i,t))),null===(n=e>0?T(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),i!==e&&t.ended&&C(this)),null!==n&&this.emit("data",n),n},y.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},y.prototype.pipe=function(e,t){var i=this,r=this._readableState;switch(r.pipesCount){case 0:r.pipes=e;break;case 1:r.pipes=[r.pipes,e];break;default:r.pipes.push(e)}r.pipesCount+=1,d("pipe count=%d opts=%j",r.pipesCount,t);var c=(!t||!1!==t.end)&&e!==n.stdout&&e!==n.stderr?u:y;function p(t,n){d("onunpipe"),t===i&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,d("cleanup"),e.removeListener("close",v),e.removeListener("finish",g),e.removeListener("drain",f),e.removeListener("error",b),e.removeListener("unpipe",p),i.removeListener("end",u),i.removeListener("end",y),i.removeListener("data",m),l=!0,!r.awaitDrain||e._writableState&&!e._writableState.needDrain||f())}function u(){d("onend"),e.end()}r.endEmitted?a.nextTick(c):i.once("end",c),e.on("unpipe",p);var f=function(e){return function(){var t=e._readableState;d("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&s(e,"data")&&(t.flowing=!0,I(e))}}(i);e.on("drain",f);var l=!1;var h=!1;function m(t){d("ondata"),h=!1,!1!==e.write(t)||h||((1===r.pipesCount&&r.pipes===e||r.pipesCount>1&&-1!==B(r.pipes,e))&&!l&&(d("false write response, pause",i._readableState.awaitDrain),i._readableState.awaitDrain++,h=!0),i.pause())}function b(t){d("onerror",t),y(),e.removeListener("error",b),0===s(e,"error")&&e.emit("error",t)}function v(){e.removeListener("finish",g),y()}function g(){d("onfinish"),e.removeListener("close",v),y()}function y(){d("unpipe"),i.unpipe(e)}return i.on("data",m),function(e,t,i){if("function"==typeof e.prependListener)return e.prependListener(t,i);e._events&&e._events[t]?o(e._events[t])?e._events[t].unshift(i):e._events[t]=[i,e._events[t]]:e.on(t,i)}(e,"error",b),e.once("close",v),e.once("finish",g),e.emit("pipe",i),r.flowing||(d("pipe resume"),i.resume()),e},y.prototype.unpipe=function(e){var t=this._readableState,i={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,i)),this;if(!e){var n=t.pipes,a=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var r=0;r<a;r++)n[r].emit("unpipe",this,i);return this}var o=B(t.pipes,e);return-1===o||(t.pipes.splice(o,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,i)),this},y.prototype.on=function(e,t){var i=c.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&k(this):a.nextTick(j,this))}return i},y.prototype.addListener=y.prototype.on,y.prototype.resume=function(){var e=this._readableState;return e.flowing||(d("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,a.nextTick(M,e,t))}(this,e)),this},y.prototype.pause=function(){return d("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(d("pause"),this._readableState.flowing=!1,this.emit("pause")),this},y.prototype.wrap=function(e){var t=this,i=this._readableState,n=!1;for(var a in e.on("end",(function(){if(d("wrapped end"),i.decoder&&!i.ended){var e=i.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(a){(d("wrapped data"),i.decoder&&(a=i.decoder.write(a)),i.objectMode&&null==a)||(i.objectMode||a&&a.length)&&(t.push(a)||(n=!0,e.pause()))})),e)void 0===this[a]&&"function"==typeof e[a]&&(this[a]=function(t){return function(){return e[t].apply(e,arguments)}}(a));for(var r=0;r<v.length;r++)e.on(v[r],this.emit.bind(this,v[r]));return this._read=function(t){d("wrapped _read",t),n&&(n=!1,e.resume())},this},Object.defineProperty(y.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),y._fromList=T}).call(this,i(5),i(3))},function(e,t,i){e.exports=i(38).EventEmitter},function(e,t,i){"use strict";var n=i(39);function a(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var i=this,r=this._readableState&&this._readableState.destroyed,o=this._writableState&&this._writableState.destroyed;return r||o?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||n.nextTick(a,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!t&&e?(n.nextTick(a,i,e),i._writableState&&(i._writableState.errorEmitted=!0)):t&&t(e)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,i){"use strict";e.exports=o;var n=i(13),a=Object.create(i(25));function r(e,t){var i=this._transformState;i.transforming=!1;var n=i.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));i.writechunk=null,i.writecb=null,null!=t&&this.push(t),n(e);var a=this._readableState;a.reading=!1,(a.needReadable||a.length<a.highWaterMark)&&this._read(a.highWaterMark)}function o(e){if(!(this instanceof o))return new o(e);n.call(this,e),this._transformState={afterTransform:r.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",s)}function s(){var e=this;"function"==typeof this._flush?this._flush((function(t,i){c(e,t,i)})):c(this,null,null)}function c(e,t,i){if(t)return e.emit("error",t);if(null!=i&&e.push(i),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}a.inherits=i(0),a.inherits(o,n),o.prototype.push=function(e,t){return this._transformState.needTransform=!1,n.prototype.push.call(this,e,t)},o.prototype._transform=function(e,t,i){throw new Error("_transform() is not implemented")},o.prototype._write=function(e,t,i){var n=this._transformState;if(n.writecb=i,n.writechunk=e,n.writeencoding=t,!n.transforming){var a=this._readableState;(n.needTransform||a.needReadable||a.length<a.highWaterMark)&&this._read(a.highWaterMark)}},o.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},o.prototype._destroy=function(e,t){var i=this;n.prototype._destroy.call(this,e,(function(e){t(e),i.emit("close")}))}},function(e,t,i){"use strict";(function(t){var n=i(174);
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */function a(e,t){if(e===t)return 0;for(var i=e.length,n=t.length,a=0,r=Math.min(i,n);a<r;++a)if(e[a]!==t[a]){i=e[a],n=t[a];break}return i<n?-1:n<i?1:0}function r(e){return t.Buffer&&"function"==typeof t.Buffer.isBuffer?t.Buffer.isBuffer(e):!(null==e||!e._isBuffer)}var o=i(52),s=Object.prototype.hasOwnProperty,c=Array.prototype.slice,p="foo"===function(){}.name;function u(e){return Object.prototype.toString.call(e)}function f(e){return!r(e)&&("function"==typeof t.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer))))}var l=e.exports=g,d=/\s*function\s+([^\(\s]*)\s*/;function h(e){if(o.isFunction(e)){if(p)return e.name;var t=e.toString().match(d);return t&&t[1]}}function m(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function b(e){if(p||!o.isFunction(e))return o.inspect(e);var t=h(e);return"[Function"+(t?": "+t:"")+"]"}function v(e,t,i,n,a){throw new l.AssertionError({message:i,actual:e,expected:t,operator:n,stackStartFunction:a})}function g(e,t){e||v(e,!0,t,"==",l.ok)}function y(e,t,i,n){if(e===t)return!0;if(r(e)&&r(t))return 0===a(e,t);if(o.isDate(e)&&o.isDate(t))return e.getTime()===t.getTime();if(o.isRegExp(e)&&o.isRegExp(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(f(e)&&f(t)&&u(e)===u(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===a(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(r(e)!==r(t))return!1;var s=(n=n||{actual:[],expected:[]}).actual.indexOf(e);return-1!==s&&s===n.expected.indexOf(t)||(n.actual.push(e),n.expected.push(t),function(e,t,i,n){if(null==e||null==t)return!1;if(o.isPrimitive(e)||o.isPrimitive(t))return e===t;if(i&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var a=x(e),r=x(t);if(a&&!r||!a&&r)return!1;if(a)return e=c.call(e),t=c.call(t),y(e,t,i);var s,p,u=k(e),f=k(t);if(u.length!==f.length)return!1;for(u.sort(),f.sort(),p=u.length-1;p>=0;p--)if(u[p]!==f[p])return!1;for(p=u.length-1;p>=0;p--)if(s=u[p],!y(e[s],t[s],i,n))return!1;return!0}(e,t,i,n))}return i?e===t:e==t}function x(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function w(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&!0===t.call({},e)}function _(e,t,i,n){var a;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof i&&(n=i,i=null),a=function(e){var t;try{e()}catch(e){t=e}return t}(t),n=(i&&i.name?" ("+i.name+").":".")+(n?" "+n:"."),e&&!a&&v(a,i,"Missing expected exception"+n);var r="string"==typeof n,s=!e&&a&&!i;if((!e&&o.isError(a)&&r&&w(a,i)||s)&&v(a,i,"Got unwanted exception"+n),e&&a&&i&&!w(a,i)||!e&&a)throw a}l.AssertionError=function(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=function(e){return m(b(e.actual),128)+" "+e.operator+" "+m(b(e.expected),128)}(this),this.generatedMessage=!0);var t=e.stackStartFunction||v;if(Error.captureStackTrace)Error.captureStackTrace(this,t);else{var i=new Error;if(i.stack){var n=i.stack,a=h(t),r=n.indexOf("\n"+a);if(r>=0){var o=n.indexOf("\n",r+1);n=n.substring(o+1)}this.stack=n}}},o.inherits(l.AssertionError,Error),l.fail=v,l.ok=g,l.equal=function(e,t,i){e!=t&&v(e,t,i,"==",l.equal)},l.notEqual=function(e,t,i){e==t&&v(e,t,i,"!=",l.notEqual)},l.deepEqual=function(e,t,i){y(e,t,!1)||v(e,t,i,"deepEqual",l.deepEqual)},l.deepStrictEqual=function(e,t,i){y(e,t,!0)||v(e,t,i,"deepStrictEqual",l.deepStrictEqual)},l.notDeepEqual=function(e,t,i){y(e,t,!1)&&v(e,t,i,"notDeepEqual",l.notDeepEqual)},l.notDeepStrictEqual=function e(t,i,n){y(t,i,!0)&&v(t,i,n,"notDeepStrictEqual",e)},l.strictEqual=function(e,t,i){e!==t&&v(e,t,i,"===",l.strictEqual)},l.notStrictEqual=function(e,t,i){e===t&&v(e,t,i,"!==",l.notStrictEqual)},l.throws=function(e,t,i){_(!0,e,t,i)},l.doesNotThrow=function(e,t,i){_(!1,e,t,i)},l.ifError=function(e){if(e)throw e},l.strict=n((function e(t,i){t||v(t,!0,i,"==",e)}),l,{equal:l.strictEqual,deepEqual:l.deepStrictEqual,notEqual:l.notStrictEqual,notDeepEqual:l.notDeepStrictEqual}),l.strict.strict=l.strict;var k=Object.keys||function(e){var t=[];for(var i in e)s.call(e,i)&&t.push(i);return t}}).call(this,i(5))},function(e,t,i){"use strict";e.exports=function(e,t,i,n){for(var a=65535&e|0,r=e>>>16&65535|0,o=0;0!==i;){i-=o=i>2e3?2e3:i;do{r=r+(a=a+t[n++]|0)|0}while(--o);a%=65521,r%=65521}return a|r<<16|0}},function(e,t,i){"use strict";var n=function(){for(var e,t=[],i=0;i<256;i++){e=i;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[i]=e}return t}();e.exports=function(e,t,i,a){var r=n,o=a+i;e^=-1;for(var s=a;s<o;s++)e=e>>>8^r[255&(e^t[s])];return-1^e}},function(e,t,i){"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n,a,r,o=i(186),s=i(11).extname,c=/^\s*([^;\s]*)(?:;|\s|$)/,p=/^text\//i;function u(e){if(!e||"string"!=typeof e)return!1;var t=c.exec(e),i=t&&o[t[1].toLowerCase()];return i&&i.charset?i.charset:!(!t||!p.test(t[1]))&&"UTF-8"}t.charset=u,t.charsets={lookup:u},t.contentType=function(e){if(!e||"string"!=typeof e)return!1;var i=-1===e.indexOf("/")?t.lookup(e):e;if(!i)return!1;if(-1===i.indexOf("charset")){var n=t.charset(i);n&&(i+="; charset="+n.toLowerCase())}return i},t.extension=function(e){if(!e||"string"!=typeof e)return!1;var i=c.exec(e),n=i&&t.extensions[i[1].toLowerCase()];if(!n||!n.length)return!1;return n[0]},t.extensions=Object.create(null),t.lookup=function(e){if(!e||"string"!=typeof e)return!1;var i=s("x."+e).toLowerCase().substr(1);if(!i)return!1;return t.types[i]||!1},t.types=Object.create(null),n=t.extensions,a=t.types,r=["nginx","apache",void 0,"iana"],Object.keys(o).forEach((function(e){var t=o[e],i=t.extensions;if(i&&i.length){n[e]=i;for(var s=0;s<i.length;s++){var c=i[s];if(a[c]){var p=r.indexOf(o[a[c]].source),u=r.indexOf(t.source);if("application/octet-stream"!==a[c]&&(p>u||p===u&&"application/"===a[c].substr(0,12)))continue}a[c]=e}}}))},function(e,t,i){"use strict";var n=Object.prototype.hasOwnProperty,a=Array.isArray,r=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),o=function(e,t){for(var i=t&&t.plainObjects?Object.create(null):{},n=0;n<e.length;++n)void 0!==e[n]&&(i[n]=e[n]);return i};e.exports={arrayToObject:o,assign:function(e,t){return Object.keys(t).reduce((function(e,i){return e[i]=t[i],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],i=[],n=0;n<t.length;++n)for(var r=t[n],o=r.obj[r.prop],s=Object.keys(o),c=0;c<s.length;++c){var p=s[c],u=o[p];"object"==typeof u&&null!==u&&-1===i.indexOf(u)&&(t.push({obj:o,prop:p}),i.push(u))}return function(e){for(;e.length>1;){var t=e.pop(),i=t.obj[t.prop];if(a(i)){for(var n=[],r=0;r<i.length;++r)void 0!==i[r]&&n.push(i[r]);t.obj[t.prop]=n}}}(t),e},decode:function(e,t,i){var n=e.replace(/\+/g," ");if("iso-8859-1"===i)return n.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(n)}catch(e){return n}},encode:function(e,t,i){if(0===e.length)return e;var n="string"==typeof e?e:String(e);if("iso-8859-1"===i)return escape(n).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var a="",o=0;o<n.length;++o){var s=n.charCodeAt(o);45===s||46===s||95===s||126===s||s>=48&&s<=57||s>=65&&s<=90||s>=97&&s<=122?a+=n.charAt(o):s<128?a+=r[s]:s<2048?a+=r[192|s>>6]+r[128|63&s]:s<55296||s>=57344?a+=r[224|s>>12]+r[128|s>>6&63]+r[128|63&s]:(o+=1,s=65536+((1023&s)<<10|1023&n.charCodeAt(o)),a+=r[240|s>>18]+r[128|s>>12&63]+r[128|s>>6&63]+r[128|63&s])}return a},isBuffer:function(e){return!(!e||"object"!=typeof e)&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},merge:function e(t,i,r){if(!i)return t;if("object"!=typeof i){if(a(t))t.push(i);else{if(!t||"object"!=typeof t)return[t,i];(r&&(r.plainObjects||r.allowPrototypes)||!n.call(Object.prototype,i))&&(t[i]=!0)}return t}if(!t||"object"!=typeof t)return[t].concat(i);var s=t;return a(t)&&!a(i)&&(s=o(t,r)),a(t)&&a(i)?(i.forEach((function(i,a){if(n.call(t,a)){var o=t[a];o&&"object"==typeof o&&i&&"object"==typeof i?t[a]=e(o,i,r):t.push(i)}else t[a]=i})),t):Object.keys(i).reduce((function(t,a){var o=i[a];return n.call(t,a)?t[a]=e(t[a],o,r):t[a]=o,t}),s)}}},function(e,t,i){"use strict";var n=String.prototype.replace,a=/%20/g;e.exports={default:"RFC3986",formatters:{RFC1738:function(e){return n.call(e,a,"+")},RFC3986:function(e){return e}},RFC1738:"RFC1738",RFC3986:"RFC3986"}},function(e,t,i){"use strict";(function(t){
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */
var n=i(88),a=i(89),r=i(57),o=i(44),s=i(8)("express:router"),c=i(9)("express"),p=i(43),u=i(27),f=i(21),l=/^\[object (\S+)\]$/,d=Array.prototype.slice,h=Object.prototype.toString,m=e.exports=function(e){var t=e||{};function i(e,t,n){i.handle(e,t,n)}return f(i,m),i.params={},i._params=[],i.caseSensitive=t.caseSensitive,i.mergeParams=t.mergeParams,i.strict=t.strict,i.stack=[],i};function b(e,t){for(var i=0;i<t.length;i++){var n=t[i];-1===e.indexOf(n)&&e.push(n)}}function v(e){var t=typeof e;return"object"!==t?t:h.call(e).replace(l,"$1")}function g(e,t){try{return e.match(t)}catch(e){return e}}m.param=function(e,t){if("function"==typeof e)return c("router.param(fn): Refactor to use path params"),void this._params.push(e);var i,n=this._params,a=n.length;":"===e[0]&&(c("router.param("+JSON.stringify(e)+", fn): Use router.param("+JSON.stringify(e.substr(1))+", fn) instead"),e=e.substr(1));for(var r=0;r<a;++r)(i=n[r](e,t))&&(t=i);if("function"!=typeof t)throw new Error("invalid param() call for "+e+", got "+t);return(this.params[e]=this.params[e]||[]).push(t),this},m.handle=function(e,i,n){var a=this;s("dispatching %s %s",e.method,e.url);var r=0,c=function(e){if("string"!=typeof e||0===e.length||"/"===e[0])return;var t=e.indexOf("?"),i=-1!==t?t:e.length,n=e.substr(0,i).indexOf("://");return-1!==n?e.substr(0,e.indexOf("/",3+n)):void 0}(e.url)||"",p="",f=!1,l={},d=[],h=a.stack,m=e.params,v=e.baseUrl||"",y=function(e,t){for(var i=new Array(arguments.length-2),n=new Array(arguments.length-2),a=0;a<i.length;a++)i[a]=arguments[a+2],n[a]=t[i[a]];return function(){for(var a=0;a<i.length;a++)t[i[a]]=n[a];return e.apply(this,arguments)}}(n,e,"baseUrl","next","params");function x(n){var w="route"===n?null:n;if(f&&(e.url=e.url.substr(1),f=!1),0!==p.length&&(e.baseUrl=v,e.url=c+p+e.url.substr(c.length),p=""),"router"!==w)if(r>=h.length)t(y,w);else{var _,k,E,S=function(e){try{return u(e).pathname}catch(e){return}}(e);if(null==S)return y(w);for(;!0!==k&&r<h.length;)if(k=g(_=h[r++],S),E=_.route,"boolean"!=typeof k&&(w=w||k),!0===k&&E)if(w)k=!1;else{var A=e.method,j=E._handles_method(A);j||"OPTIONS"!==A||b(d,E._options()),j||"HEAD"===A||(k=!1)}if(!0!==k)return y(w);E&&(e.route=E),e.params=a.mergeParams?function(e,t){if("object"!=typeof t||!t)return e;var i=o({},t);if(!(0 in e&&0 in t))return o(i,e);var n=0,a=0;for(;n in e;)n++;for(;a in t;)a++;for(n--;n>=0;n--)e[n+a]=e[n],n<a&&delete e[n];return o(i,e)}(_.params,m):_.params;var M=_.path;a.process_params(_,l,e,i,(function(t){return t?x(w||t):E?_.handle_request(e,i,x):void function(t,n,a,r){if(0!==a.length){var o=r[a.length];if(o&&"/"!==o&&"."!==o)return x(n);s("trim prefix (%s) from url %s",a,e.url),p=a,e.url=c+e.url.substr(c.length+p.length),c||"/"===e.url[0]||(e.url="/"+e.url,f=!0),e.baseUrl=v+("/"===p[p.length-1]?p.substring(0,p.length-1):p)}s("%s %s : %s",t.name,a,e.originalUrl),n?t.handle_error(n,e,i,x):t.handle_request(e,i,x)}(_,w,M,S)}))}else t(y,null)}e.next=x,"OPTIONS"===e.method&&(y=function(e,t){return function(){var i=new Array(arguments.length+1);i[0]=e;for(var n=0,a=arguments.length;n<a;n++)i[n+1]=arguments[n];t.apply(this,i)}}(y,(function(e,t){if(t||0===d.length)return e(t);!function(e,t,i){try{var n=t.join(",");e.set("Allow",n),e.send(n)}catch(e){i(e)}}(i,d,e)}))),e.baseUrl=v,e.originalUrl=e.originalUrl||e.url,x()},m.process_params=function(e,t,i,n,a){var r=this.params,o=e.keys;if(!o||0===o.length)return a();var s,c,p,u,f,l=0,d=0;function h(e){return e?a(e):l>=o.length?a():(d=0,c=o[l++],s=c.name,p=i.params[s],u=r[s],f=t[s],void 0!==p&&u?f&&(f.match===p||f.error&&"route"!==f.error)?(i.params[s]=f.value,h(f.error)):(t[s]=f={error:null,match:p,value:p},void m()):h())}function m(e){var t=u[d++];if(f.value=i.params[c.name],e)return f.error=e,void h(e);if(!t)return h();try{t(i,n,m,p,c.name)}catch(e){m(e)}}h()},m.use=function(e){var t=0,i="/";if("function"!=typeof e){for(var n=e;Array.isArray(n)&&0!==n.length;)n=n[0];"function"!=typeof n&&(t=1,i=e)}var r=p(d.call(arguments,t));if(0===r.length)throw new TypeError("Router.use() requires a middleware function");for(var o=0;o<r.length;o++){if("function"!=typeof(e=r[o]))throw new TypeError("Router.use() requires a middleware function but got a "+v(e));s("use %o %s",i,e.name||"<anonymous>");var c=new a(i,{sensitive:this.caseSensitive,strict:!1,end:!1},e);c.route=void 0,this.stack.push(c)}return this},m.route=function(e){var t=new n(e),i=new a(e,{sensitive:this.caseSensitive,strict:this.strict,end:!0},t.dispatch.bind(t));return i.route=t,this.stack.push(i),t},r.concat("all").forEach((function(e){m[e]=function(t){var i=this.route(t);return i[e].apply(i,d.call(arguments,1)),this}}))}).call(this,i(23).setImmediate)},function(e,t,i){"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(8)("express:router:route"),a=i(43),r=i(89),o=i(57),s=Array.prototype.slice,c=Object.prototype.toString;function p(e){this.path=e,this.stack=[],n("new %o",e),this.methods={}}e.exports=p,p.prototype._handles_method=function(e){if(this.methods._all)return!0;var t=e.toLowerCase();return"head"!==t||this.methods.head||(t="get"),Boolean(this.methods[t])},p.prototype._options=function(){var e=Object.keys(this.methods);this.methods.get&&!this.methods.head&&e.push("head");for(var t=0;t<e.length;t++)e[t]=e[t].toUpperCase();return e},p.prototype.dispatch=function(e,t,i){var n=0,a=this.stack;if(0===a.length)return i();var r=e.method.toLowerCase();"head"!==r||this.methods.head||(r="get"),e.route=this,function o(s){if(s&&"route"===s)return i();if(s&&"router"===s)return i(s);var c=a[n++];if(!c)return i(s);if(c.method&&c.method!==r)return o(s);s?c.handle_error(s,e,t,o):c.handle_request(e,t,o)}()},p.prototype.all=function(){for(var e=a(s.call(arguments)),t=0;t<e.length;t++){var i=e[t];if("function"!=typeof i){var n=c.call(i),o="Route.all() requires a callback function but got a "+n;throw new TypeError(o)}var p=r("/",{},i);p.method=void 0,this.methods._all=!0,this.stack.push(p)}return this},o.forEach((function(e){p.prototype[e]=function(){for(var t=a(s.call(arguments)),i=0;i<t.length;i++){var o=t[i];if("function"!=typeof o){var p=c.call(o),u="Route."+e+"() requires a callback function but got a "+p;throw new Error(u)}n("%s %o",e,this.path);var f=r("/",{},o);f.method=e,this.methods[e]=!0,this.stack.push(f)}return this}}))},function(e,t,i){"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(200),a=i(8)("express:router:layer"),r=Object.prototype.hasOwnProperty;function o(e,t,i){if(!(this instanceof o))return new o(e,t,i);a("new %o",e);var r=t||{};this.handle=i,this.name=i.name||"<anonymous>",this.params=void 0,this.path=void 0,this.regexp=n(e,this.keys=[],r),this.regexp.fast_star="*"===e,this.regexp.fast_slash="/"===e&&!1===r.end}function s(e){if("string"!=typeof e||0===e.length)return e;try{return decodeURIComponent(e)}catch(t){throw t instanceof URIError&&(t.message="Failed to decode param '"+e+"'",t.status=t.statusCode=400),t}}e.exports=o,o.prototype.handle_error=function(e,t,i,n){var a=this.handle;if(4!==a.length)return n(e);try{a(e,t,i,n)}catch(e){n(e)}},o.prototype.handle_request=function(e,t,i){var n=this.handle;if(n.length>3)return i();try{n(e,t,i)}catch(e){i(e)}},o.prototype.match=function(e){var t;if(null!=e){if(this.regexp.fast_slash)return this.params={},this.path="",!0;if(this.regexp.fast_star)return this.params={0:s(e)},this.path=e,!0;t=this.regexp.exec(e)}if(!t)return this.params=void 0,this.path=void 0,!1;this.params={},this.path=t[0];for(var i=this.keys,n=this.params,a=1;a<t.length;a++){var o=i[a-1].name,c=s(t[a]);void 0===c&&r.call(n,o)||(n[o]=c)}return!0}},function(e,t,i){"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(44),a=i(27),r=i(53);e.exports=function(e){var t=n({},e),i=r.parse;return"function"==typeof e&&(i=e,t=void 0),void 0!==t&&void 0===t.allowPrototypes&&(t.allowPrototypes=!0),function(e,n,r){if(!e.query){var o=a(e).query;e.query=i(o,t)}r()}}},function(e,t,i){(function(e){t.fetch=s(e.fetch)&&s(e.ReadableStream),t.writableStream=s(e.WritableStream),t.abortController=s(e.AbortController),t.blobConstructor=!1;try{new Blob([new ArrayBuffer(1)]),t.blobConstructor=!0}catch(e){}var i;function n(){if(void 0!==i)return i;if(e.XMLHttpRequest){i=new e.XMLHttpRequest;try{i.open("GET",e.XDomainRequest?"/":"https://example.com")}catch(e){i=null}}else i=null;return i}function a(e){var t=n();if(!t)return!1;try{return t.responseType=e,t.responseType===e}catch(e){}return!1}var r=void 0!==e.ArrayBuffer,o=r&&s(e.ArrayBuffer.prototype.slice);function s(e){return"function"==typeof e}t.arraybuffer=t.fetch||r&&a("arraybuffer"),t.msstream=!t.fetch&&o&&a("ms-stream"),t.mozchunkedarraybuffer=!t.fetch&&r&&a("moz-chunked-arraybuffer"),t.overrideMimeType=t.fetch||!!n()&&s(n().overrideMimeType),t.vbArray=s(e.VBArray),i=null}).call(this,i(5))},function(e,t,i){(function(e,n,a){var r=i(91),o=i(0),s=i(24),c=t.readyStates={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4},p=t.IncomingMessage=function(t,i,o,c){var p=this;if(s.Readable.call(p),p._mode=o,p.headers={},p.rawHeaders=[],p.trailers={},p.rawTrailers=[],p.on("end",(function(){e.nextTick((function(){p.emit("close")}))})),"fetch"===o){if(p._fetchResponse=i,p.url=i.url,p.statusCode=i.status,p.statusMessage=i.statusText,i.headers.forEach((function(e,t){p.headers[t.toLowerCase()]=e,p.rawHeaders.push(t,e)})),r.writableStream){var u=new WritableStream({write:function(e){return new Promise((function(t,i){p._destroyed?i():p.push(new n(e))?t():p._resumeFetch=t}))},close:function(){a.clearTimeout(c),p._destroyed||p.push(null)},abort:function(e){p._destroyed||p.emit("error",e)}});try{return void i.body.pipeTo(u).catch((function(e){a.clearTimeout(c),p._destroyed||p.emit("error",e)}))}catch(e){}}var f=i.body.getReader();!function e(){f.read().then((function(t){if(!p._destroyed){if(t.done)return a.clearTimeout(c),void p.push(null);p.push(new n(t.value)),e()}})).catch((function(e){a.clearTimeout(c),p._destroyed||p.emit("error",e)}))}()}else{if(p._xhr=t,p._pos=0,p.url=t.responseURL,p.statusCode=t.status,p.statusMessage=t.statusText,t.getAllResponseHeaders().split(/\r?\n/).forEach((function(e){var t=e.match(/^([^:]+):\s*(.*)/);if(t){var i=t[1].toLowerCase();"set-cookie"===i?(void 0===p.headers[i]&&(p.headers[i]=[]),p.headers[i].push(t[2])):void 0!==p.headers[i]?p.headers[i]+=", "+t[2]:p.headers[i]=t[2],p.rawHeaders.push(t[1],t[2])}})),p._charset="x-user-defined",!r.overrideMimeType){var l=p.rawHeaders["mime-type"];if(l){var d=l.match(/;\s*charset=([^;])(;|$)/);d&&(p._charset=d[1].toLowerCase())}p._charset||(p._charset="utf-8")}}};o(p,s.Readable),p.prototype._read=function(){var e=this._resumeFetch;e&&(this._resumeFetch=null,e())},p.prototype._onXHRProgress=function(){var e=this,t=e._xhr,i=null;switch(e._mode){case"text:vbarray":if(t.readyState!==c.DONE)break;try{i=new a.VBArray(t.responseBody).toArray()}catch(e){}if(null!==i){e.push(new n(i));break}case"text":try{i=t.responseText}catch(t){e._mode="text:vbarray";break}if(i.length>e._pos){var r=i.substr(e._pos);if("x-user-defined"===e._charset){for(var o=new n(r.length),s=0;s<r.length;s++)o[s]=255&r.charCodeAt(s);e.push(o)}else e.push(r,e._charset);e._pos=i.length}break;case"arraybuffer":if(t.readyState!==c.DONE||!t.response)break;i=t.response,e.push(new n(new Uint8Array(i)));break;case"moz-chunked-arraybuffer":if(i=t.response,t.readyState!==c.LOADING||!i)break;e.push(new n(new Uint8Array(i)));break;case"ms-stream":if(i=t.response,t.readyState!==c.LOADING)break;var p=new a.MSStreamReader;p.onprogress=function(){p.result.byteLength>e._pos&&(e.push(new n(new Uint8Array(p.result.slice(e._pos)))),e._pos=p.result.byteLength)},p.onload=function(){e.push(null)},p.readAsArrayBuffer(i)}e._xhr.readyState===c.DONE&&"ms-stream"!==e._mode&&e.push(null)}}).call(this,i(3),i(2).Buffer,i(5))},function(e,t,i){var n=i(2),a=n.Buffer;function r(e,t){for(var i in e)t[i]=e[i]}function o(e,t,i){return a(e,t,i)}a.from&&a.alloc&&a.allocUnsafe&&a.allocUnsafeSlow?e.exports=n:(r(n,t),t.Buffer=o),r(a,o),o.from=function(e,t,i){if("number"==typeof e)throw new TypeError("Argument must not be a number");return a(e,t,i)},o.alloc=function(e,t,i){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=a(e);return void 0!==t?"string"==typeof i?n.fill(t,i):n.fill(t):n.fill(0),n},o.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return a(e)},o.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},function(e,t,i){"use strict";
/*!
 * content-disposition
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e,t){var i=t||{},a=i.type||"attachment",r=function(e,t){if(void 0===e)return;var i={};if("string"!=typeof e)throw new TypeError("filename must be a string");void 0===t&&(t=!0);if("string"!=typeof t&&"boolean"!=typeof t)throw new TypeError("fallback must be a string or boolean");if("string"==typeof t&&c.test(t))throw new TypeError("fallback must be ISO-8859-1 string");var a=n(e),r=l.test(a),s="string"!=typeof t?t&&v(a):n(t),p="string"==typeof s&&s!==a;(p||!r||o.test(a))&&(i["filename*"]=a);(r||p)&&(i.filename=p?s:a);return i}(e,i.fallback);return function(e){var t=e.parameters,i=e.type;if(!i||"string"!=typeof i||!d.test(i))throw new TypeError("invalid type");var n=String(i).toLowerCase();if(t&&"object"==typeof t)for(var a,r=Object.keys(t).sort(),o=0;o<r.length;o++){var s="*"===(a=r[o]).substr(-1)?w(t[a]):x(t[a]);n+="; "+a+"="+s}return n}(new _(a,r))},e.exports.parse=function(e){if(!e||"string"!=typeof e)throw new TypeError("argument string is required");var t=m.exec(e);if(!t)throw new TypeError("invalid type format");var i,n,a=t[0].length,r=t[1].toLowerCase(),o=[],s={};a=f.lastIndex=";"===t[0].substr(-1)?a-1:a;for(;t=f.exec(e);){if(t.index!==a)throw new TypeError("invalid parameter format");if(a+=t[0].length,i=t[1].toLowerCase(),n=t[2],-1!==o.indexOf(i))throw new TypeError("invalid duplicate parameter");o.push(i),i.indexOf("*")+1!==i.length?"string"!=typeof s[i]&&('"'===n[0]&&(n=n.substr(1,n.length-2).replace(p,"$1")),s[i]=n):(i=i.slice(0,-1),n=b(n),s[i]=n)}if(-1!==a&&a!==e.length)throw new TypeError("invalid parameter format");return new _(r,s)};var n=i(11).basename,a=i(209).Buffer,r=/[\x00-\x20"'()*,/:;<=>?@[\\\]{}\x7f]/g,o=/%[0-9A-Fa-f]{2}/,s=/%([0-9A-Fa-f]{2})/g,c=/[^\x20-\x7e\xa0-\xff]/g,p=/\\([\u0000-\u007f])/g,u=/([\\"])/g,f=/;[\x09\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*=[\x09\x20]*("(?:[\x20!\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*/g,l=/^[\x20-\x7e\x80-\xff]+$/,d=/^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/,h=/^([A-Za-z0-9!#$%&+\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/,m=/^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*(?:$|;)/;function b(e){var t=h.exec(e);if(!t)throw new TypeError("invalid extended field value");var i,n=t[1].toLowerCase(),r=t[2].replace(s,g);switch(n){case"iso-8859-1":i=v(r);break;case"utf-8":i=a.from(r,"binary").toString("utf8");break;default:throw new TypeError("unsupported charset in extended field")}return i}function v(e){return String(e).replace(c,"?")}function g(e,t){return String.fromCharCode(parseInt(t,16))}function y(e){return"%"+String(e).charCodeAt(0).toString(16).toUpperCase()}function x(e){return'"'+String(e).replace(u,"\\$1")+'"'}function w(e){var t=String(e);return"UTF-8''"+encodeURIComponent(t).replace(r,y)}function _(e,t){this.type=e,this.parameters=t}},function(e,t,i){"use strict";(function(t){
/*!
 * etag
 * Copyright(c) 2014-2016 Douglas Christopher Wilson
 * MIT Licensed
 */
e.exports=function(e,i){if(null==e)throw new TypeError("argument entity is required");var o=function(e){if("function"==typeof a&&e instanceof a)return!0;return e&&"object"==typeof e&&"ctime"in e&&"[object Date]"===r.call(e.ctime)&&"mtime"in e&&"[object Date]"===r.call(e.mtime)&&"ino"in e&&"number"==typeof e.ino&&"size"in e&&"number"==typeof e.size}(e),s=i&&"boolean"==typeof i.weak?i.weak:o;if(!o&&"string"!=typeof e&&!t.isBuffer(e))throw new TypeError("argument entity must be string, Buffer, or fs.Stats");var c=o?(p=e,u=p.mtime.getTime().toString(16),'"'+p.size.toString(16)+"-"+u+'"'):function(e){if(0===e.length)return'"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk"';var i=n.createHash("sha1").update(e,"utf8").digest("base64").substring(0,27);return'"'+("string"==typeof e?t.byteLength(e,"utf8"):e.length).toString(16)+"-"+i+'"'}(e);var p,u;return s?"W/"+c:c};var n=i(96),a=i(17).Stats,r=Object.prototype.toString}).call(this,i(2).Buffer)},function(e,t,i){"use strict";t.randomBytes=t.rng=t.pseudoRandomBytes=t.prng=i(18),t.createHash=t.Hash=i(28),t.createHmac=t.Hmac=i(100);var n=i(217),a=Object.keys(n),r=["sha1","sha224","sha256","sha384","sha512","md5","rmd160"].concat(a);t.getHashes=function(){return r};var o=i(103);t.pbkdf2=o.pbkdf2,t.pbkdf2Sync=o.pbkdf2Sync;var s=i(219);t.Cipher=s.Cipher,t.createCipher=s.createCipher,t.Cipheriv=s.Cipheriv,t.createCipheriv=s.createCipheriv,t.Decipher=s.Decipher,t.createDecipher=s.createDecipher,t.Decipheriv=s.Decipheriv,t.createDecipheriv=s.createDecipheriv,t.getCiphers=s.getCiphers,t.listCiphers=s.listCiphers;var c=i(234);t.DiffieHellmanGroup=c.DiffieHellmanGroup,t.createDiffieHellmanGroup=c.createDiffieHellmanGroup,t.getDiffieHellman=c.getDiffieHellman,t.createDiffieHellman=c.createDiffieHellman,t.DiffieHellman=c.DiffieHellman;var p=i(239);t.createSign=p.createSign,t.Sign=p.Sign,t.createVerify=p.createVerify,t.Verify=p.Verify,t.createECDH=i(273);var u=i(274);t.publicEncrypt=u.publicEncrypt,t.privateEncrypt=u.privateEncrypt,t.publicDecrypt=u.publicDecrypt,t.privateDecrypt=u.privateDecrypt;var f=i(277);t.randomFill=f.randomFill,t.randomFillSync=f.randomFillSync,t.createCredentials=function(){throw new Error(["sorry, createCredentials is not implemented yet","we accept pull requests","https://github.com/crypto-browserify/crypto-browserify"].join("\n"))},t.constants={DH_CHECK_P_NOT_SAFE_PRIME:2,DH_CHECK_P_NOT_PRIME:1,DH_UNABLE_TO_CHECK_GENERATOR:4,DH_NOT_SUITABLE_GENERATOR:8,NPN_ENABLED:1,ALPN_ENABLED:1,RSA_PKCS1_PADDING:1,RSA_SSLV23_PADDING:2,RSA_NO_PADDING:3,RSA_PKCS1_OAEP_PADDING:4,RSA_X931_PADDING:5,RSA_PKCS1_PSS_PADDING:6,POINT_CONVERSION_COMPRESSED:2,POINT_CONVERSION_UNCOMPRESSED:4,POINT_CONVERSION_HYBRID:6}},function(e,t,i){"use strict";var n=i(1).Buffer,a=i(16).Transform;function r(e){a.call(this),this._block=n.allocUnsafe(e),this._blockSize=e,this._blockOffset=0,this._length=[0,0,0,0],this._finalized=!1}i(0)(r,a),r.prototype._transform=function(e,t,i){var n=null;try{this.update(e,t)}catch(e){n=e}i(n)},r.prototype._flush=function(e){var t=null;try{this.push(this.digest())}catch(e){t=e}e(t)},r.prototype.update=function(e,t){if(function(e,t){if(!n.isBuffer(e)&&"string"!=typeof e)throw new TypeError(t+" must be a string or a buffer")}(e,"Data"),this._finalized)throw new Error("Digest already called");n.isBuffer(e)||(e=n.from(e,t));for(var i=this._block,a=0;this._blockOffset+e.length-a>=this._blockSize;){for(var r=this._blockOffset;r<this._blockSize;)i[r++]=e[a++];this._update(),this._blockOffset=0}for(;a<e.length;)i[this._blockOffset++]=e[a++];for(var o=0,s=8*e.length;s>0;++o)this._length[o]+=s,(s=this._length[o]/4294967296|0)>0&&(this._length[o]-=4294967296*s);return this},r.prototype._update=function(){throw new Error("_update is not implemented")},r.prototype.digest=function(e){if(this._finalized)throw new Error("Digest already called");this._finalized=!0;var t=this._digest();void 0!==e&&(t=t.toString(e)),this._block.fill(0),this._blockOffset=0;for(var i=0;i<4;++i)this._length[i]=0;return t},r.prototype._digest=function(){throw new Error("_digest is not implemented")},e.exports=r},function(e,t,i){var n=i(0),a=i(19),r=i(1).Buffer,o=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],s=new Array(64);function c(){this.init(),this._w=s,a.call(this,64,56)}function p(e,t,i){return i^e&(t^i)}function u(e,t,i){return e&t|i&(e|t)}function f(e){return(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10)}function l(e){return(e>>>6|e<<26)^(e>>>11|e<<21)^(e>>>25|e<<7)}function d(e){return(e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3}n(c,a),c.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},c.prototype._update=function(e){for(var t,i=this._w,n=0|this._a,a=0|this._b,r=0|this._c,s=0|this._d,c=0|this._e,h=0|this._f,m=0|this._g,b=0|this._h,v=0;v<16;++v)i[v]=e.readInt32BE(4*v);for(;v<64;++v)i[v]=0|(((t=i[v-2])>>>17|t<<15)^(t>>>19|t<<13)^t>>>10)+i[v-7]+d(i[v-15])+i[v-16];for(var g=0;g<64;++g){var y=b+l(c)+p(c,h,m)+o[g]+i[g]|0,x=f(n)+u(n,a,r)|0;b=m,m=h,h=c,c=s+y|0,s=r,r=a,a=n,n=y+x|0}this._a=n+this._a|0,this._b=a+this._b|0,this._c=r+this._c|0,this._d=s+this._d|0,this._e=c+this._e|0,this._f=h+this._f|0,this._g=m+this._g|0,this._h=b+this._h|0},c.prototype._hash=function(){var e=r.allocUnsafe(32);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e.writeInt32BE(this._h,28),e},e.exports=c},function(e,t,i){var n=i(0),a=i(19),r=i(1).Buffer,o=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],s=new Array(160);function c(){this.init(),this._w=s,a.call(this,128,112)}function p(e,t,i){return i^e&(t^i)}function u(e,t,i){return e&t|i&(e|t)}function f(e,t){return(e>>>28|t<<4)^(t>>>2|e<<30)^(t>>>7|e<<25)}function l(e,t){return(e>>>14|t<<18)^(e>>>18|t<<14)^(t>>>9|e<<23)}function d(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^e>>>7}function h(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^(e>>>7|t<<25)}function m(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^e>>>6}function b(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^(e>>>6|t<<26)}function v(e,t){return e>>>0<t>>>0?1:0}n(c,a),c.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},c.prototype._update=function(e){for(var t=this._w,i=0|this._ah,n=0|this._bh,a=0|this._ch,r=0|this._dh,s=0|this._eh,c=0|this._fh,g=0|this._gh,y=0|this._hh,x=0|this._al,w=0|this._bl,_=0|this._cl,k=0|this._dl,E=0|this._el,S=0|this._fl,A=0|this._gl,j=0|this._hl,M=0;M<32;M+=2)t[M]=e.readInt32BE(4*M),t[M+1]=e.readInt32BE(4*M+4);for(;M<160;M+=2){var I=t[M-30],T=t[M-30+1],C=d(I,T),O=h(T,I),B=m(I=t[M-4],T=t[M-4+1]),R=b(T,I),z=t[M-14],q=t[M-14+1],P=t[M-32],L=t[M-32+1],N=O+q|0,D=C+z+v(N,O)|0;D=(D=D+B+v(N=N+R|0,R)|0)+P+v(N=N+L|0,L)|0,t[M]=D,t[M+1]=N}for(var U=0;U<160;U+=2){D=t[U],N=t[U+1];var F=u(i,n,a),H=u(x,w,_),Z=f(i,x),K=f(x,i),V=l(s,E),$=l(E,s),W=o[U],G=o[U+1],Y=p(s,c,g),X=p(E,S,A),J=j+$|0,Q=y+V+v(J,j)|0;Q=(Q=(Q=Q+Y+v(J=J+X|0,X)|0)+W+v(J=J+G|0,G)|0)+D+v(J=J+N|0,N)|0;var ee=K+H|0,te=Z+F+v(ee,K)|0;y=g,j=A,g=c,A=S,c=s,S=E,s=r+Q+v(E=k+J|0,k)|0,r=a,k=_,a=n,_=w,n=i,w=x,i=Q+te+v(x=J+ee|0,J)|0}this._al=this._al+x|0,this._bl=this._bl+w|0,this._cl=this._cl+_|0,this._dl=this._dl+k|0,this._el=this._el+E|0,this._fl=this._fl+S|0,this._gl=this._gl+A|0,this._hl=this._hl+j|0,this._ah=this._ah+i+v(this._al,x)|0,this._bh=this._bh+n+v(this._bl,w)|0,this._ch=this._ch+a+v(this._cl,_)|0,this._dh=this._dh+r+v(this._dl,k)|0,this._eh=this._eh+s+v(this._el,E)|0,this._fh=this._fh+c+v(this._fl,S)|0,this._gh=this._gh+g+v(this._gl,A)|0,this._hh=this._hh+y+v(this._hl,j)|0},c.prototype._hash=function(){var e=r.allocUnsafe(64);function t(t,i,n){e.writeInt32BE(t,n),e.writeInt32BE(i,n+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),t(this._gh,this._gl,48),t(this._hh,this._hl,56),e},e.exports=c},function(e,t,i){"use strict";var n=i(0),a=i(216),r=i(12),o=i(1).Buffer,s=i(101),c=i(61),p=i(62),u=o.alloc(128);function f(e,t){r.call(this,"digest"),"string"==typeof t&&(t=o.from(t));var i="sha512"===e||"sha384"===e?128:64;(this._alg=e,this._key=t,t.length>i)?t=("rmd160"===e?new c:p(e)).update(t).digest():t.length<i&&(t=o.concat([t,u],i));for(var n=this._ipad=o.allocUnsafe(i),a=this._opad=o.allocUnsafe(i),s=0;s<i;s++)n[s]=54^t[s],a[s]=92^t[s];this._hash="rmd160"===e?new c:p(e),this._hash.update(n)}n(f,r),f.prototype._update=function(e){this._hash.update(e)},f.prototype._final=function(){var e=this._hash.digest();return("rmd160"===this._alg?new c:p(this._alg)).update(this._opad).update(e).digest()},e.exports=function(e,t){return"rmd160"===(e=e.toLowerCase())||"ripemd160"===e?new f("rmd160",t):"md5"===e?new a(s,t):new f(e,t)}},function(e,t,i){var n=i(60);e.exports=function(e){return(new n).update(e).digest()}},function(e){e.exports=JSON.parse('{"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}}')},function(e,t,i){t.pbkdf2=i(218),t.pbkdf2Sync=i(106)},function(e,t,i){(function(t){var i=Math.pow(2,30)-1;function n(e,i){if("string"!=typeof e&&!t.isBuffer(e))throw new TypeError(i+" must be a buffer or string")}e.exports=function(e,t,a,r){if(n(e,"Password"),n(t,"Salt"),"number"!=typeof a)throw new TypeError("Iterations not a number");if(a<0)throw new TypeError("Bad iterations");if("number"!=typeof r)throw new TypeError("Key length not a number");if(r<0||r>i||r!=r)throw new TypeError("Bad key length")}}).call(this,i(2).Buffer)},function(e,t,i){(function(t){var i;t.browser?i="utf-8":i=parseInt(t.version.split(".")[0].slice(1),10)>=6?"utf-8":"binary";e.exports=i}).call(this,i(3))},function(e,t,i){var n=i(101),a=i(61),r=i(62),o=i(104),s=i(105),c=i(1).Buffer,p=c.alloc(128),u={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,rmd160:20,ripemd160:20};function f(e,t,i){var o=function(e){function t(t){return r(e).update(t).digest()}return"rmd160"===e||"ripemd160"===e?function(e){return(new a).update(e).digest()}:"md5"===e?n:t}(e),s="sha512"===e||"sha384"===e?128:64;t.length>s?t=o(t):t.length<s&&(t=c.concat([t,p],s));for(var f=c.allocUnsafe(s+u[e]),l=c.allocUnsafe(s+u[e]),d=0;d<s;d++)f[d]=54^t[d],l[d]=92^t[d];var h=c.allocUnsafe(s+i+4);f.copy(h,0,0,s),this.ipad1=h,this.ipad2=f,this.opad=l,this.alg=e,this.blocksize=s,this.hash=o,this.size=u[e]}f.prototype.run=function(e,t){return e.copy(t,this.blocksize),this.hash(t).copy(this.opad,this.blocksize),this.hash(this.opad)},e.exports=function(e,t,i,n,a){o(e,t,i,n),c.isBuffer(e)||(e=c.from(e,s)),c.isBuffer(t)||(t=c.from(t,s));var r=new f(a=a||"sha1",e,t.length),p=c.allocUnsafe(n),l=c.allocUnsafe(t.length+4);t.copy(l,0,0,t.length);for(var d=0,h=u[a],m=Math.ceil(n/h),b=1;b<=m;b++){l.writeUInt32BE(b,t.length);for(var v=r.run(l,r.ipad1),g=v,y=1;y<i;y++){g=r.run(g,r.ipad2);for(var x=0;x<h;x++)v[x]^=g[x]}v.copy(p,d),d+=h}return p}},function(e,t,i){"use strict";t.readUInt32BE=function(e,t){return(e[0+t]<<24|e[1+t]<<16|e[2+t]<<8|e[3+t])>>>0},t.writeUInt32BE=function(e,t,i){e[0+i]=t>>>24,e[1+i]=t>>>16&255,e[2+i]=t>>>8&255,e[3+i]=255&t},t.ip=function(e,t,i,n){for(var a=0,r=0,o=6;o>=0;o-=2){for(var s=0;s<=24;s+=8)a<<=1,a|=t>>>s+o&1;for(s=0;s<=24;s+=8)a<<=1,a|=e>>>s+o&1}for(o=6;o>=0;o-=2){for(s=1;s<=25;s+=8)r<<=1,r|=t>>>s+o&1;for(s=1;s<=25;s+=8)r<<=1,r|=e>>>s+o&1}i[n+0]=a>>>0,i[n+1]=r>>>0},t.rip=function(e,t,i,n){for(var a=0,r=0,o=0;o<4;o++)for(var s=24;s>=0;s-=8)a<<=1,a|=t>>>s+o&1,a<<=1,a|=e>>>s+o&1;for(o=4;o<8;o++)for(s=24;s>=0;s-=8)r<<=1,r|=t>>>s+o&1,r<<=1,r|=e>>>s+o&1;i[n+0]=a>>>0,i[n+1]=r>>>0},t.pc1=function(e,t,i,n){for(var a=0,r=0,o=7;o>=5;o--){for(var s=0;s<=24;s+=8)a<<=1,a|=t>>s+o&1;for(s=0;s<=24;s+=8)a<<=1,a|=e>>s+o&1}for(s=0;s<=24;s+=8)a<<=1,a|=t>>s+o&1;for(o=1;o<=3;o++){for(s=0;s<=24;s+=8)r<<=1,r|=t>>s+o&1;for(s=0;s<=24;s+=8)r<<=1,r|=e>>s+o&1}for(s=0;s<=24;s+=8)r<<=1,r|=e>>s+o&1;i[n+0]=a>>>0,i[n+1]=r>>>0},t.r28shl=function(e,t){return e<<t&268435455|e>>>28-t};var n=[14,11,17,4,27,23,25,0,13,22,7,18,5,9,16,24,2,20,12,21,1,8,15,26,15,4,25,19,9,1,26,16,5,11,23,8,12,7,17,0,22,3,10,14,6,20,27,24];t.pc2=function(e,t,i,a){for(var r=0,o=0,s=n.length>>>1,c=0;c<s;c++)r<<=1,r|=e>>>n[c]&1;for(c=s;c<n.length;c++)o<<=1,o|=t>>>n[c]&1;i[a+0]=r>>>0,i[a+1]=o>>>0},t.expand=function(e,t,i){var n=0,a=0;n=(1&e)<<5|e>>>27;for(var r=23;r>=15;r-=4)n<<=6,n|=e>>>r&63;for(r=11;r>=3;r-=4)a|=e>>>r&63,a<<=6;a|=(31&e)<<1|e>>>31,t[i+0]=n>>>0,t[i+1]=a>>>0};var a=[14,0,4,15,13,7,1,4,2,14,15,2,11,13,8,1,3,10,10,6,6,12,12,11,5,9,9,5,0,3,7,8,4,15,1,12,14,8,8,2,13,4,6,9,2,1,11,7,15,5,12,11,9,3,7,14,3,10,10,0,5,6,0,13,15,3,1,13,8,4,14,7,6,15,11,2,3,8,4,14,9,12,7,0,2,1,13,10,12,6,0,9,5,11,10,5,0,13,14,8,7,10,11,1,10,3,4,15,13,4,1,2,5,11,8,6,12,7,6,12,9,0,3,5,2,14,15,9,10,13,0,7,9,0,14,9,6,3,3,4,15,6,5,10,1,2,13,8,12,5,7,14,11,12,4,11,2,15,8,1,13,1,6,10,4,13,9,0,8,6,15,9,3,8,0,7,11,4,1,15,2,14,12,3,5,11,10,5,14,2,7,12,7,13,13,8,14,11,3,5,0,6,6,15,9,0,10,3,1,4,2,7,8,2,5,12,11,1,12,10,4,14,15,9,10,3,6,15,9,0,0,6,12,10,11,1,7,13,13,8,15,9,1,4,3,5,14,11,5,12,2,7,8,2,4,14,2,14,12,11,4,2,1,12,7,4,10,7,11,13,6,1,8,5,5,0,3,15,15,10,13,3,0,9,14,8,9,6,4,11,2,8,1,12,11,7,10,1,13,14,7,2,8,13,15,6,9,15,12,0,5,9,6,10,3,4,0,5,14,3,12,10,1,15,10,4,15,2,9,7,2,12,6,9,8,5,0,6,13,1,3,13,4,14,14,0,7,11,5,3,11,8,9,4,14,3,15,2,5,12,2,9,8,5,12,15,3,10,7,11,0,14,4,1,10,7,1,6,13,0,11,8,6,13,4,13,11,0,2,11,14,7,15,4,0,9,8,1,13,10,3,14,12,3,9,5,7,12,5,2,10,15,6,8,1,6,1,6,4,11,11,13,13,8,12,1,3,4,7,10,14,7,10,9,15,5,6,0,8,15,0,14,5,2,9,3,2,12,13,1,2,15,8,13,4,8,6,10,15,3,11,7,1,4,10,12,9,5,3,6,14,11,5,0,0,14,12,9,7,2,7,2,11,1,4,14,1,7,9,4,12,10,14,8,2,13,0,15,6,12,10,9,13,0,15,3,3,5,5,6,8,11];t.substitute=function(e,t){for(var i=0,n=0;n<4;n++){i<<=4,i|=a[64*n+(e>>>18-6*n&63)]}for(n=0;n<4;n++){i<<=4,i|=a[256+64*n+(t>>>18-6*n&63)]}return i>>>0};var r=[16,25,12,11,3,20,4,15,31,17,9,6,27,14,1,22,30,24,8,18,0,5,29,23,13,19,2,26,10,21,28,7];t.permute=function(e){for(var t=0,i=0;i<r.length;i++)t<<=1,t|=e>>>r[i]&1;return t>>>0},t.padSplit=function(e,t,i){for(var n=e.toString(2);n.length<t;)n="0"+n;for(var a=[],r=0;r<t;r+=i)a.push(n.slice(r,r+i));return a.join(" ")}},function(e,t,i){"use strict";var n=i(6),a=i(0),r=i(107),o=i(63);function s(){this.tmp=new Array(2),this.keys=null}function c(e){o.call(this,e);var t=new s;this._desState=t,this.deriveKeys(t,e.key)}a(c,o),e.exports=c,c.create=function(e){return new c(e)};var p=[1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1];c.prototype.deriveKeys=function(e,t){e.keys=new Array(32),n.equal(t.length,this.blockSize,"Invalid key length");var i=r.readUInt32BE(t,0),a=r.readUInt32BE(t,4);r.pc1(i,a,e.tmp,0),i=e.tmp[0],a=e.tmp[1];for(var o=0;o<e.keys.length;o+=2){var s=p[o>>>1];i=r.r28shl(i,s),a=r.r28shl(a,s),r.pc2(i,a,e.keys,o)}},c.prototype._update=function(e,t,i,n){var a=this._desState,o=r.readUInt32BE(e,t),s=r.readUInt32BE(e,t+4);r.ip(o,s,a.tmp,0),o=a.tmp[0],s=a.tmp[1],"encrypt"===this.type?this._encrypt(a,o,s,a.tmp,0):this._decrypt(a,o,s,a.tmp,0),o=a.tmp[0],s=a.tmp[1],r.writeUInt32BE(i,o,n),r.writeUInt32BE(i,s,n+4)},c.prototype._pad=function(e,t){for(var i=e.length-t,n=t;n<e.length;n++)e[n]=i;return!0},c.prototype._unpad=function(e){for(var t=e[e.length-1],i=e.length-t;i<e.length;i++)n.equal(e[i],t);return e.slice(0,e.length-t)},c.prototype._encrypt=function(e,t,i,n,a){for(var o=t,s=i,c=0;c<e.keys.length;c+=2){var p=e.keys[c],u=e.keys[c+1];r.expand(s,e.tmp,0),p^=e.tmp[0],u^=e.tmp[1];var f=r.substitute(p,u),l=s;s=(o^r.permute(f))>>>0,o=l}r.rip(s,o,n,a)},c.prototype._decrypt=function(e,t,i,n,a){for(var o=i,s=t,c=e.keys.length-2;c>=0;c-=2){var p=e.keys[c],u=e.keys[c+1];r.expand(o,e.tmp,0),p^=e.tmp[0],u^=e.tmp[1];var f=r.substitute(p,u),l=o;o=(s^r.permute(f))>>>0,s=l}r.rip(o,s,n,a)}},function(e,t,i){var n=i(29),a=i(1).Buffer,r=i(110);function o(e){var t=e._cipher.encryptBlockRaw(e._prev);return r(e._prev),t}t.encrypt=function(e,t){var i=Math.ceil(t.length/16),r=e._cache.length;e._cache=a.concat([e._cache,a.allocUnsafe(16*i)]);for(var s=0;s<i;s++){var c=o(e),p=r+16*s;e._cache.writeUInt32BE(c[0],p+0),e._cache.writeUInt32BE(c[1],p+4),e._cache.writeUInt32BE(c[2],p+8),e._cache.writeUInt32BE(c[3],p+12)}var u=e._cache.slice(0,t.length);return e._cache=e._cache.slice(t.length),n(t,u)}},function(e,t){e.exports=function(e){for(var t,i=e.length;i--;){if(255!==(t=e.readUInt8(i))){t++,e.writeUInt8(t,i);break}e.writeUInt8(0,i)}}},function(e){e.exports=JSON.parse('{"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}}')},function(e,t,i){var n=i(45),a=i(1).Buffer,r=i(12),o=i(0),s=i(231),c=i(29),p=i(110);function u(e,t,i,o){r.call(this);var c=a.alloc(4,0);this._cipher=new n.AES(t);var u=this._cipher.encryptBlock(c);this._ghash=new s(u),i=function(e,t,i){if(12===t.length)return e._finID=a.concat([t,a.from([0,0,0,1])]),a.concat([t,a.from([0,0,0,2])]);var n=new s(i),r=t.length,o=r%16;n.update(t),o&&(o=16-o,n.update(a.alloc(o,0))),n.update(a.alloc(8,0));var c=8*r,u=a.alloc(8);u.writeUIntBE(c,0,8),n.update(u),e._finID=n.state;var f=a.from(e._finID);return p(f),f}(this,i,u),this._prev=a.from(i),this._cache=a.allocUnsafe(0),this._secCache=a.allocUnsafe(0),this._decrypt=o,this._alen=0,this._len=0,this._mode=e,this._authTag=null,this._called=!1}o(u,r),u.prototype._update=function(e){if(!this._called&&this._alen){var t=16-this._alen%16;t<16&&(t=a.alloc(t,0),this._ghash.update(t))}this._called=!0;var i=this._mode.encrypt(this,e);return this._decrypt?this._ghash.update(e):this._ghash.update(i),this._len+=e.length,i},u.prototype._final=function(){if(this._decrypt&&!this._authTag)throw new Error("Unsupported state or unable to authenticate data");var e=c(this._ghash.final(8*this._alen,8*this._len),this._cipher.encryptBlock(this._finID));if(this._decrypt&&function(e,t){var i=0;e.length!==t.length&&i++;for(var n=Math.min(e.length,t.length),a=0;a<n;++a)i+=e[a]^t[a];return i}(e,this._authTag))throw new Error("Unsupported state or unable to authenticate data");this._authTag=e,this._cipher.scrub()},u.prototype.getAuthTag=function(){if(this._decrypt||!a.isBuffer(this._authTag))throw new Error("Attempting to get auth tag in unsupported state");return this._authTag},u.prototype.setAuthTag=function(e){if(!this._decrypt)throw new Error("Attempting to set auth tag in unsupported state");this._authTag=e},u.prototype.setAAD=function(e){if(this._called)throw new Error("Attempting to set AAD in unsupported state");this._ghash.update(e),this._alen+=e.length},e.exports=u},function(e,t,i){var n=i(45),a=i(1).Buffer,r=i(12);function o(e,t,i,o){r.call(this),this._cipher=new n.AES(t),this._prev=a.from(i),this._cache=a.allocUnsafe(0),this._secCache=a.allocUnsafe(0),this._decrypt=o,this._mode=e}i(0)(o,r),o.prototype._update=function(e){return this._mode.encrypt(this,e,this._decrypt)},o.prototype._final=function(){this._cipher.scrub()},e.exports=o},function(e,t,i){var n=i(18);e.exports=g,g.simpleSieve=b,g.fermatTest=v;var a=i(4),r=new a(24),o=new(i(115)),s=new a(1),c=new a(2),p=new a(5),u=(new a(16),new a(8),new a(10)),f=new a(3),l=(new a(7),new a(11)),d=new a(4),h=(new a(12),null);function m(){if(null!==h)return h;var e=[];e[0]=2;for(var t=1,i=3;i<1048576;i+=2){for(var n=Math.ceil(Math.sqrt(i)),a=0;a<t&&e[a]<=n&&i%e[a]!=0;a++);t!==a&&e[a]<=n||(e[t++]=i)}return h=e,e}function b(e){for(var t=m(),i=0;i<t.length;i++)if(0===e.modn(t[i]))return 0===e.cmpn(t[i]);return!0}function v(e){var t=a.mont(e);return 0===c.toRed(t).redPow(e.subn(1)).fromRed().cmpn(1)}function g(e,t){if(e<16)return new a(2===t||5===t?[140,123]:[140,39]);var i,h;for(t=new a(t);;){for(i=new a(n(Math.ceil(e/8)));i.bitLength()>e;)i.ishrn(1);if(i.isEven()&&i.iadd(s),i.testn(1)||i.iadd(c),t.cmp(c)){if(!t.cmp(p))for(;i.mod(u).cmp(f);)i.iadd(d)}else for(;i.mod(r).cmp(l);)i.iadd(d);if(b(h=i.shrn(1))&&b(i)&&v(h)&&v(i)&&o.test(h)&&o.test(i))return i}}},function(e,t,i){var n=i(4),a=i(66);function r(e){this.rand=e||new a.Rand}e.exports=r,r.create=function(e){return new r(e)},r.prototype._randbelow=function(e){var t=e.bitLength(),i=Math.ceil(t/8);do{var a=new n(this.rand.generate(i))}while(a.cmp(e)>=0);return a},r.prototype._randrange=function(e,t){var i=t.sub(e);return e.add(this._randbelow(i))},r.prototype.test=function(e,t,i){var a=e.bitLength(),r=n.mont(e),o=new n(1).toRed(r);t||(t=Math.max(1,a/48|0));for(var s=e.subn(1),c=0;!s.testn(c);c++);for(var p=e.shrn(c),u=s.toRed(r);t>0;t--){var f=this._randrange(new n(2),s);i&&i(f);var l=f.toRed(r).redPow(p);if(0!==l.cmp(o)&&0!==l.cmp(u)){for(var d=1;d<c;d++){if(0===(l=l.redSqr()).cmp(o))return!1;if(0===l.cmp(u))break}if(d===c)return!1}}return!0},r.prototype.getDivisor=function(e,t){var i=e.bitLength(),a=n.mont(e),r=new n(1).toRed(a);t||(t=Math.max(1,i/48|0));for(var o=e.subn(1),s=0;!o.testn(s);s++);for(var c=e.shrn(s),p=o.toRed(a);t>0;t--){var u=this._randrange(new n(2),o),f=e.gcd(u);if(0!==f.cmpn(1))return f;var l=u.toRed(a).redPow(c);if(0!==l.cmp(r)&&0!==l.cmp(p)){for(var d=1;d<s;d++){if(0===(l=l.redSqr()).cmp(r))return l.fromRed().subn(1).gcd(e);if(0===l.cmp(p))break}if(d===s)return(l=l.redSqr()).fromRed().subn(1).gcd(e)}}return!1}},function(e,t,i){"use strict";var n=t;function a(e){return 1===e.length?"0"+e:e}function r(e){for(var t="",i=0;i<e.length;i++)t+=a(e[i].toString(16));return t}n.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var i=[];if("string"!=typeof e){for(var n=0;n<e.length;n++)i[n]=0|e[n];return i}if("hex"===t){(e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e);for(n=0;n<e.length;n+=2)i.push(parseInt(e[n]+e[n+1],16))}else for(n=0;n<e.length;n++){var a=e.charCodeAt(n),r=a>>8,o=255&a;r?i.push(r,o):i.push(o)}return i},n.zero2=a,n.toHex=r,n.encode=function(e,t){return"hex"===t?r(e):e}},function(e,t,i){"use strict";var n=t;n.base=i(47),n.short=i(242),n.mont=i(243),n.edwards=i(244)},function(e,t,i){"use strict";var n=i(10).rotr32;function a(e,t,i){return e&t^~e&i}function r(e,t,i){return e&t^e&i^t&i}function o(e,t,i){return e^t^i}t.ft_1=function(e,t,i,n){return 0===e?a(t,i,n):1===e||3===e?o(t,i,n):2===e?r(t,i,n):void 0},t.ch32=a,t.maj32=r,t.p32=o,t.s0_256=function(e){return n(e,2)^n(e,13)^n(e,22)},t.s1_256=function(e){return n(e,6)^n(e,11)^n(e,25)},t.g0_256=function(e){return n(e,7)^n(e,18)^e>>>3},t.g1_256=function(e){return n(e,17)^n(e,19)^e>>>10}},function(e,t,i){"use strict";var n=i(10),a=i(30),r=i(118),o=i(6),s=n.sum32,c=n.sum32_4,p=n.sum32_5,u=r.ch32,f=r.maj32,l=r.s0_256,d=r.s1_256,h=r.g0_256,m=r.g1_256,b=a.BlockHash,v=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function g(){if(!(this instanceof g))return new g;b.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=v,this.W=new Array(64)}n.inherits(g,b),e.exports=g,g.blockSize=512,g.outSize=256,g.hmacStrength=192,g.padLength=64,g.prototype._update=function(e,t){for(var i=this.W,n=0;n<16;n++)i[n]=e[t+n];for(;n<i.length;n++)i[n]=c(m(i[n-2]),i[n-7],h(i[n-15]),i[n-16]);var a=this.h[0],r=this.h[1],b=this.h[2],v=this.h[3],g=this.h[4],y=this.h[5],x=this.h[6],w=this.h[7];for(o(this.k.length===i.length),n=0;n<i.length;n++){var _=p(w,d(g),u(g,y,x),this.k[n],i[n]),k=s(l(a),f(a,r,b));w=x,x=y,y=g,g=s(v,_),v=b,b=r,r=a,a=s(_,k)}this.h[0]=s(this.h[0],a),this.h[1]=s(this.h[1],r),this.h[2]=s(this.h[2],b),this.h[3]=s(this.h[3],v),this.h[4]=s(this.h[4],g),this.h[5]=s(this.h[5],y),this.h[6]=s(this.h[6],x),this.h[7]=s(this.h[7],w)},g.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},function(e,t,i){"use strict";var n=i(10),a=i(30),r=i(6),o=n.rotr64_hi,s=n.rotr64_lo,c=n.shr64_hi,p=n.shr64_lo,u=n.sum64,f=n.sum64_hi,l=n.sum64_lo,d=n.sum64_4_hi,h=n.sum64_4_lo,m=n.sum64_5_hi,b=n.sum64_5_lo,v=a.BlockHash,g=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function y(){if(!(this instanceof y))return new y;v.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=g,this.W=new Array(160)}function x(e,t,i,n,a){var r=e&i^~e&a;return r<0&&(r+=4294967296),r}function w(e,t,i,n,a,r){var o=t&n^~t&r;return o<0&&(o+=4294967296),o}function _(e,t,i,n,a){var r=e&i^e&a^i&a;return r<0&&(r+=4294967296),r}function k(e,t,i,n,a,r){var o=t&n^t&r^n&r;return o<0&&(o+=4294967296),o}function E(e,t){var i=o(e,t,28)^o(t,e,2)^o(t,e,7);return i<0&&(i+=4294967296),i}function S(e,t){var i=s(e,t,28)^s(t,e,2)^s(t,e,7);return i<0&&(i+=4294967296),i}function A(e,t){var i=o(e,t,14)^o(e,t,18)^o(t,e,9);return i<0&&(i+=4294967296),i}function j(e,t){var i=s(e,t,14)^s(e,t,18)^s(t,e,9);return i<0&&(i+=4294967296),i}function M(e,t){var i=o(e,t,1)^o(e,t,8)^c(e,t,7);return i<0&&(i+=4294967296),i}function I(e,t){var i=s(e,t,1)^s(e,t,8)^p(e,t,7);return i<0&&(i+=4294967296),i}function T(e,t){var i=o(e,t,19)^o(t,e,29)^c(e,t,6);return i<0&&(i+=4294967296),i}function C(e,t){var i=s(e,t,19)^s(t,e,29)^p(e,t,6);return i<0&&(i+=4294967296),i}n.inherits(y,v),e.exports=y,y.blockSize=1024,y.outSize=512,y.hmacStrength=192,y.padLength=128,y.prototype._prepareBlock=function(e,t){for(var i=this.W,n=0;n<32;n++)i[n]=e[t+n];for(;n<i.length;n+=2){var a=T(i[n-4],i[n-3]),r=C(i[n-4],i[n-3]),o=i[n-14],s=i[n-13],c=M(i[n-30],i[n-29]),p=I(i[n-30],i[n-29]),u=i[n-32],f=i[n-31];i[n]=d(a,r,o,s,c,p,u,f),i[n+1]=h(a,r,o,s,c,p,u,f)}},y.prototype._update=function(e,t){this._prepareBlock(e,t);var i=this.W,n=this.h[0],a=this.h[1],o=this.h[2],s=this.h[3],c=this.h[4],p=this.h[5],d=this.h[6],h=this.h[7],v=this.h[8],g=this.h[9],y=this.h[10],M=this.h[11],I=this.h[12],T=this.h[13],C=this.h[14],O=this.h[15];r(this.k.length===i.length);for(var B=0;B<i.length;B+=2){var R=C,z=O,q=A(v,g),P=j(v,g),L=x(v,g,y,M,I),N=w(v,g,y,M,I,T),D=this.k[B],U=this.k[B+1],F=i[B],H=i[B+1],Z=m(R,z,q,P,L,N,D,U,F,H),K=b(R,z,q,P,L,N,D,U,F,H);R=E(n,a),z=S(n,a),q=_(n,a,o,s,c),P=k(n,a,o,s,c,p);var V=f(R,z,q,P),$=l(R,z,q,P);C=I,O=T,I=y,T=M,y=v,M=g,v=f(d,h,Z,K),g=l(h,h,Z,K),d=c,h=p,c=o,p=s,o=n,s=a,n=f(Z,K,V,$),a=l(Z,K,V,$)}u(this.h,0,n,a),u(this.h,2,o,s),u(this.h,4,c,p),u(this.h,6,d,h),u(this.h,8,v,g),u(this.h,10,y,M),u(this.h,12,I,T),u(this.h,14,C,O)},y.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},function(e,t,i){var n=i(0),a=i(32).Reporter,r=i(2).Buffer;function o(e,t){a.call(this,t),r.isBuffer(e)?(this.base=e,this.offset=0,this.length=e.length):this.error("Input not Buffer")}function s(e,t){if(Array.isArray(e))this.length=0,this.value=e.map((function(e){return e instanceof s||(e=new s(e,t)),this.length+=e.length,e}),this);else if("number"==typeof e){if(!(0<=e&&e<=255))return t.error("non-byte EncoderBuffer value");this.value=e,this.length=1}else if("string"==typeof e)this.value=e,this.length=r.byteLength(e);else{if(!r.isBuffer(e))return t.error("Unsupported type: "+typeof e);this.value=e,this.length=e.length}}n(o,a),t.DecoderBuffer=o,o.prototype.save=function(){return{offset:this.offset,reporter:a.prototype.save.call(this)}},o.prototype.restore=function(e){var t=new o(this.base);return t.offset=e.offset,t.length=this.offset,this.offset=e.offset,a.prototype.restore.call(this,e.reporter),t},o.prototype.isEmpty=function(){return this.offset===this.length},o.prototype.readUInt8=function(e){return this.offset+1<=this.length?this.base.readUInt8(this.offset++,!0):this.error(e||"DecoderBuffer overrun")},o.prototype.skip=function(e,t){if(!(this.offset+e<=this.length))return this.error(t||"DecoderBuffer overrun");var i=new o(this.base);return i._reporterState=this._reporterState,i.offset=this.offset,i.length=this.offset+e,this.offset+=e,i},o.prototype.raw=function(e){return this.base.slice(e?e.offset:this.offset,this.length)},t.EncoderBuffer=s,s.prototype.join=function(e,t){return e||(e=new r(this.length)),t||(t=0),0===this.length||(Array.isArray(this.value)?this.value.forEach((function(i){i.join(e,t),t+=i.length})):("number"==typeof this.value?e[t]=this.value:"string"==typeof this.value?e.write(this.value,t):r.isBuffer(this.value)&&this.value.copy(e,t),t+=this.length)),e}},function(e,t,i){var n=t;n._reverse=function(e){var t={};return Object.keys(e).forEach((function(i){(0|i)==i&&(i|=0);var n=e[i];t[n]=i})),t},n.der=i(264)},function(e,t,i){var n=i(0),a=i(31),r=a.base,o=a.bignum,s=a.constants.der;function c(e){this.enc="der",this.name=e.name,this.entity=e,this.tree=new p,this.tree._init(e.body)}function p(e){r.Node.call(this,"der",e)}function u(e,t){var i=e.readUInt8(t);if(e.isError(i))return i;var n=s.tagClass[i>>6],a=0==(32&i);if(31==(31&i)){var r=i;for(i=0;128==(128&r);){if(r=e.readUInt8(t),e.isError(r))return r;i<<=7,i|=127&r}}else i&=31;return{cls:n,primitive:a,tag:i,tagStr:s.tag[i]}}function f(e,t,i){var n=e.readUInt8(i);if(e.isError(n))return n;if(!t&&128===n)return null;if(0==(128&n))return n;var a=127&n;if(a>4)return e.error("length octect is too long");n=0;for(var r=0;r<a;r++){n<<=8;var o=e.readUInt8(i);if(e.isError(o))return o;n|=o}return n}e.exports=c,c.prototype.decode=function(e,t){return e instanceof r.DecoderBuffer||(e=new r.DecoderBuffer(e,t)),this.tree._decode(e,t)},n(p,r.Node),p.prototype._peekTag=function(e,t,i){if(e.isEmpty())return!1;var n=e.save(),a=u(e,'Failed to peek tag: "'+t+'"');return e.isError(a)?a:(e.restore(n),a.tag===t||a.tagStr===t||a.tagStr+"of"===t||i)},p.prototype._decodeTag=function(e,t,i){var n=u(e,'Failed to decode tag of "'+t+'"');if(e.isError(n))return n;var a=f(e,n.primitive,'Failed to get length of "'+t+'"');if(e.isError(a))return a;if(!i&&n.tag!==t&&n.tagStr!==t&&n.tagStr+"of"!==t)return e.error('Failed to match tag: "'+t+'"');if(n.primitive||null!==a)return e.skip(a,'Failed to match body of: "'+t+'"');var r=e.save(),o=this._skipUntilEnd(e,'Failed to skip indefinite length body: "'+this.tag+'"');return e.isError(o)?o:(a=e.offset-r.offset,e.restore(r),e.skip(a,'Failed to match body of: "'+t+'"'))},p.prototype._skipUntilEnd=function(e,t){for(;;){var i=u(e,t);if(e.isError(i))return i;var n,a=f(e,i.primitive,t);if(e.isError(a))return a;if(n=i.primitive||null!==a?e.skip(a):this._skipUntilEnd(e,t),e.isError(n))return n;if("end"===i.tagStr)break}},p.prototype._decodeList=function(e,t,i,n){for(var a=[];!e.isEmpty();){var r=this._peekTag(e,"end");if(e.isError(r))return r;var o=i.decode(e,"der",n);if(e.isError(o)&&r)break;a.push(o)}return a},p.prototype._decodeStr=function(e,t){if("bitstr"===t){var i=e.readUInt8();return e.isError(i)?i:{unused:i,data:e.raw()}}if("bmpstr"===t){var n=e.raw();if(n.length%2==1)return e.error("Decoding of string type: bmpstr length mismatch");for(var a="",r=0;r<n.length/2;r++)a+=String.fromCharCode(n.readUInt16BE(2*r));return a}if("numstr"===t){var o=e.raw().toString("ascii");return this._isNumstr(o)?o:e.error("Decoding of string type: numstr unsupported characters")}if("octstr"===t)return e.raw();if("objDesc"===t)return e.raw();if("printstr"===t){var s=e.raw().toString("ascii");return this._isPrintstr(s)?s:e.error("Decoding of string type: printstr unsupported characters")}return/str$/.test(t)?e.raw().toString():e.error("Decoding of string type: "+t+" unsupported")},p.prototype._decodeObjid=function(e,t,i){for(var n,a=[],r=0;!e.isEmpty();){var o=e.readUInt8();r<<=7,r|=127&o,0==(128&o)&&(a.push(r),r=0)}128&o&&a.push(r);var s=a[0]/40|0,c=a[0]%40;if(n=i?a:[s,c].concat(a.slice(1)),t){var p=t[n.join(" ")];void 0===p&&(p=t[n.join(".")]),void 0!==p&&(n=p)}return n},p.prototype._decodeTime=function(e,t){var i=e.raw().toString();if("gentime"===t)var n=0|i.slice(0,4),a=0|i.slice(4,6),r=0|i.slice(6,8),o=0|i.slice(8,10),s=0|i.slice(10,12),c=0|i.slice(12,14);else{if("utctime"!==t)return e.error("Decoding "+t+" time is not supported yet");n=0|i.slice(0,2),a=0|i.slice(2,4),r=0|i.slice(4,6),o=0|i.slice(6,8),s=0|i.slice(8,10),c=0|i.slice(10,12);n=n<70?2e3+n:1900+n}return Date.UTC(n,a-1,r,o,s,c,0)},p.prototype._decodeNull=function(e){return null},p.prototype._decodeBool=function(e){var t=e.readUInt8();return e.isError(t)?t:0!==t},p.prototype._decodeInt=function(e,t){var i=e.raw(),n=new o(i);return t&&(n=t[n.toString(10)]||n),n},p.prototype._use=function(e,t){return"function"==typeof e&&(e=e(t)),e._getDecoder("der").tree}},function(e,t,i){var n=i(0),a=i(2).Buffer,r=i(31),o=r.base,s=r.constants.der;function c(e){this.enc="der",this.name=e.name,this.entity=e,this.tree=new p,this.tree._init(e.body)}function p(e){o.Node.call(this,"der",e)}function u(e){return e<10?"0"+e:e}e.exports=c,c.prototype.encode=function(e,t){return this.tree._encode(e,t).join()},n(p,o.Node),p.prototype._encodeComposite=function(e,t,i,n){var r,o=function(e,t,i,n){var a;"seqof"===e?e="seq":"setof"===e&&(e="set");if(s.tagByName.hasOwnProperty(e))a=s.tagByName[e];else{if("number"!=typeof e||(0|e)!==e)return n.error("Unknown tag: "+e);a=e}if(a>=31)return n.error("Multi-octet tag encoding unsupported");t||(a|=32);return a|=s.tagClassByName[i||"universal"]<<6}(e,t,i,this.reporter);if(n.length<128)return(r=new a(2))[0]=o,r[1]=n.length,this._createEncoderBuffer([r,n]);for(var c=1,p=n.length;p>=256;p>>=8)c++;(r=new a(2+c))[0]=o,r[1]=128|c;p=1+c;for(var u=n.length;u>0;p--,u>>=8)r[p]=255&u;return this._createEncoderBuffer([r,n])},p.prototype._encodeStr=function(e,t){if("bitstr"===t)return this._createEncoderBuffer([0|e.unused,e.data]);if("bmpstr"===t){for(var i=new a(2*e.length),n=0;n<e.length;n++)i.writeUInt16BE(e.charCodeAt(n),2*n);return this._createEncoderBuffer(i)}return"numstr"===t?this._isNumstr(e)?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: numstr supports only digits and space"):"printstr"===t?this._isPrintstr(e)?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark"):/str$/.test(t)||"objDesc"===t?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: "+t+" unsupported")},p.prototype._encodeObjid=function(e,t,i){if("string"==typeof e){if(!t)return this.reporter.error("string objid given, but no values map found");if(!t.hasOwnProperty(e))return this.reporter.error("objid not found in values map");e=t[e].split(/[\s\.]+/g);for(var n=0;n<e.length;n++)e[n]|=0}else if(Array.isArray(e)){e=e.slice();for(n=0;n<e.length;n++)e[n]|=0}if(!Array.isArray(e))return this.reporter.error("objid() should be either array or string, got: "+JSON.stringify(e));if(!i){if(e[1]>=40)return this.reporter.error("Second objid identifier OOB");e.splice(0,2,40*e[0]+e[1])}var r=0;for(n=0;n<e.length;n++){var o=e[n];for(r++;o>=128;o>>=7)r++}var s=new a(r),c=s.length-1;for(n=e.length-1;n>=0;n--){o=e[n];for(s[c--]=127&o;(o>>=7)>0;)s[c--]=128|127&o}return this._createEncoderBuffer(s)},p.prototype._encodeTime=function(e,t){var i,n=new Date(e);return"gentime"===t?i=[u(n.getFullYear()),u(n.getUTCMonth()+1),u(n.getUTCDate()),u(n.getUTCHours()),u(n.getUTCMinutes()),u(n.getUTCSeconds()),"Z"].join(""):"utctime"===t?i=[u(n.getFullYear()%100),u(n.getUTCMonth()+1),u(n.getUTCDate()),u(n.getUTCHours()),u(n.getUTCMinutes()),u(n.getUTCSeconds()),"Z"].join(""):this.reporter.error("Encoding "+t+" time is not supported yet"),this._encodeStr(i,"octstr")},p.prototype._encodeNull=function(){return this._createEncoderBuffer("")},p.prototype._encodeInt=function(e,t){if("string"==typeof e){if(!t)return this.reporter.error("String int or enum given, but no values map");if(!t.hasOwnProperty(e))return this.reporter.error("Values map doesn't contain: "+JSON.stringify(e));e=t[e]}if("number"!=typeof e&&!a.isBuffer(e)){var i=e.toArray();!e.sign&&128&i[0]&&i.unshift(0),e=new a(i)}if(a.isBuffer(e)){var n=e.length;0===e.length&&n++;var r=new a(n);return e.copy(r),0===e.length&&(r[0]=0),this._createEncoderBuffer(r)}if(e<128)return this._createEncoderBuffer(e);if(e<256)return this._createEncoderBuffer([0,e]);n=1;for(var o=e;o>=256;o>>=8)n++;for(o=(r=new Array(n)).length-1;o>=0;o--)r[o]=255&e,e>>=8;return 128&r[0]&&r.unshift(0),this._createEncoderBuffer(new a(r))},p.prototype._encodeBool=function(e){return this._createEncoderBuffer(e?255:0)},p.prototype._use=function(e,t){return"function"==typeof e&&(e=e(t)),e._getEncoder("der").tree},p.prototype._skipDefault=function(e,t,i){var n,a=this._baseState;if(null===a.default)return!1;var r=e.join();if(void 0===a.defaultBuffer&&(a.defaultBuffer=this._encodeValue(a.default,t,i).join()),r.length!==a.defaultBuffer.length)return!1;for(n=0;n<r.length;n++)if(r[n]!==a.defaultBuffer[n])return!1;return!0}},function(e){e.exports=JSON.parse('{"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}')},function(e,t,i){var n=i(28),a=i(1).Buffer;function r(e){var t=a.allocUnsafe(4);return t.writeUInt32BE(e,0),t}e.exports=function(e,t){for(var i,o=a.alloc(0),s=0;o.length<t;)i=r(s++),o=a.concat([o,n("sha1").update(e).update(i).digest()]);return o.slice(0,t)}},function(e,t){e.exports=function(e,t){for(var i=e.length,n=-1;++n<i;)e[n]^=t[n];return e}},function(e,t,i){var n=i(4),a=i(1).Buffer;e.exports=function(e,t){return a.from(e.toRed(n.mont(t.modulus)).redPow(new n(t.publicExponent)).fromRed().toArray())}},function(e,t,i){"use strict";
/*!
 * fresh
 * Copyright(c) 2012 TJ Holowaychuk
 * Copyright(c) 2016-2017 Douglas Christopher Wilson
 * MIT Licensed
 */var n=/(?:^|,)\s*?no-cache\s*?(?:,|$)/;function a(e){var t=e&&Date.parse(e);return"number"==typeof t?t:NaN}e.exports=function(e,t){var i=e["if-modified-since"],r=e["if-none-match"];if(!i&&!r)return!1;var o=e["cache-control"];if(o&&n.test(o))return!1;if(r&&"*"!==r){var s=t.etag;if(!s)return!1;for(var c=!0,p=function(e){for(var t=0,i=[],n=0,a=0,r=e.length;a<r;a++)switch(e.charCodeAt(a)){case 32:n===t&&(n=t=a+1);break;case 44:i.push(e.substring(n,t)),n=t=a+1;break;default:t=a+1}return i.push(e.substring(n,t)),i}(r),u=0;u<p.length;u++){var f=p[u];if(f===s||f==="W/"+s||"W/"+f===s){c=!1;break}}if(c)return!1}if(i){var l=t["last-modified"];if(!(l&&a(l)<=a(i)))return!1}return!0}},function(e,t,i){"use strict";
/*!
 * range-parser
 * Copyright(c) 2012-2014 TJ Holowaychuk
 * Copyright(c) 2015-2016 Douglas Christopher Wilson
 * MIT Licensed
 */function n(e,t){return{start:e.start,end:e.end,index:t}}function a(e){return{start:e.start,end:e.end}}function r(e,t){return e.index-t.index}function o(e,t){return e.start-t.start}e.exports=function(e,t,i){if("string"!=typeof t)throw new TypeError("argument str must be a string");var s=t.indexOf("=");if(-1===s)return-2;var c=t.slice(s+1).split(","),p=[];p.type=t.slice(0,s);for(var u=0;u<c.length;u++){var f=c[u].split("-"),l=parseInt(f[0],10),d=parseInt(f[1],10);isNaN(l)?(l=e-d,d=e-1):isNaN(d)&&(d=e-1),d>e-1&&(d=e-1),isNaN(l)||isNaN(d)||l>d||l<0||p.push({start:l,end:d})}if(p.length<1)return-1;return i&&i.combine?function(e){for(var t=e.map(n).sort(o),i=0,s=1;s<t.length;s++){var c=t[s],p=t[i];c.start>p.end+1?t[++i]=c:c.end>p.end&&(p.end=c.end,p.index=Math.min(p.index,c.index))}t.length=i+1;var u=t.sort(r).map(a);return u.type=e.type,u}(p):p}},function(e,t,i){"use strict";
/*!
 * proxy-addr
 * Copyright(c) 2014-2016 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e,t){if(!e)throw new TypeError("req argument is required");if(!t)throw new TypeError("trust argument is required");var i=p(e,t);return i[i.length-1]},e.exports.all=p,e.exports.compile=u;var n=i(281),a=i(282),r=/^[0-9]+$/,o=a.isValid,s=a.parse,c={linklocal:["169.254.0.0/16","fe80::/10"],loopback:["127.0.0.1/8","::1/128"],uniquelocal:["10.0.0.0/8","172.16.0.0/12","192.168.0.0/16","fc00::/7"]};function p(e,t){var i=n(e);if(!t)return i;"function"!=typeof t&&(t=u(t));for(var a=0;a<i.length-1;a++)t(i[a],a)||(i.length=a+1);return i}function u(e){if(!e)throw new TypeError("argument is required");var t;if("string"==typeof e)t=[e];else{if(!Array.isArray(e))throw new TypeError("unsupported trust argument");t=e.slice()}for(var i=0;i<t.length;i++)e=t[i],Object.prototype.hasOwnProperty.call(c,e)&&(e=c[e],t.splice.apply(t,[i,1].concat(e)),i+=e.length-1);return function(e){var t=e.length;return 0===t?l:1===t?(n=e[0],a=n[0],r=a.kind(),c="ipv4"===r,p=n[1],function(e){if(!o(e))return!1;var t=s(e);if(t.kind()!==r){if(c&&!t.isIPv4MappedAddress())return!1;t=c?t.toIPv4Address():t.toIPv4MappedAddress()}return t.match(a,p)}):(i=e,function(e){if(!o(e))return!1;for(var t,n=s(e),a=n.kind(),r=0;r<i.length;r++){var c=i[r],p=c[0],u=p.kind(),f=c[1],l=n;if(a!==u){if("ipv4"===u&&!n.isIPv4MappedAddress())continue;t||(t="ipv4"===u?n.toIPv4Address():n.toIPv4MappedAddress()),l=t}if(l.match(p,f))return!0}return!1});var i;var n,a,r,c,p}(function(e){for(var t=new Array(e.length),i=0;i<e.length;i++)t[i]=f(e[i]);return t}(t))}function f(e){var t=e.lastIndexOf("/"),i=-1!==t?e.substring(0,t):e;if(!o(i))throw new TypeError("invalid IP address: "+i);var n=s(i);-1===t&&"ipv6"===n.kind()&&n.isIPv4MappedAddress()&&(n=n.toIPv4Address());var a="ipv6"===n.kind()?128:32,c=-1!==t?e.substring(t+1,e.length):null;if((c=null===c?a:r.test(c)?parseInt(c,10):"ipv4"===n.kind()&&o(c)?function(e){var t=s(e);return"ipv4"===t.kind()?t.prefixLengthFromSubnetMask():null}(c):null)<=0||c>a)throw new TypeError("invalid range on address: "+e);return[n,c]}function l(){return!1}},function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(i(133)).default();a.get("/",(e,t)=>{t.send("welcome")}),a.listen(80)},function(e,t,i){"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=i(134)},function(e,t,i){"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(135),a=i(38).EventEmitter,r=i(195),o=i(196),s=i(88),c=i(87),p=i(283),u=i(290);(t=e.exports=function(){var e=function(t,i,n){e.handle(t,i,n)};return r(e,a.prototype,!1),r(e,o,!1),e.request=Object.create(p,{app:{configurable:!0,enumerable:!0,writable:!0,value:e}}),e.response=Object.create(u,{app:{configurable:!0,enumerable:!0,writable:!0,value:e}}),e.init(),e}).application=o,t.request=p,t.response=u,t.Route=s,t.Router=c,t.json=n.json,t.query=i(90),t.raw=n.raw,t.static=i(294),t.text=n.text,t.urlencoded=n.urlencoded;["bodyParser","compress","cookieSession","session","logger","cookieParser","favicon","responseTime","errorHandler","timeout","methodOverride","vhost","csrf","directory","limit","multipart","staticCache"].forEach((function(e){Object.defineProperty(t,e,{get:function(){throw new Error("Most middleware (like "+e+") is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.")},configurable:!0})}))},function(e,t,i){"use strict";
/*!
 * body-parser
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(9)("body-parser"),a=Object.create(null);function r(e){return function(){return function(e){var t=a[e];if(void 0!==t)return t;switch(e){case"json":t=i(136);break;case"raw":t=i(188);break;case"text":t=i(189);break;case"urlencoded":t=i(190)}return a[e]=t}(e)}}t=e.exports=n.function((function(e){var i={};if(e)for(var n in e)"type"!==n&&(i[n]=e[n]);var a=t.urlencoded(i),r=t.json(i);return function(e,t,i){r(e,t,(function(n){if(n)return i(n);a(e,t,i)}))}}),"bodyParser: use individual json/urlencoded middlewares"),Object.defineProperty(t,"json",{configurable:!0,enumerable:!0,get:r("json")}),Object.defineProperty(t,"raw",{configurable:!0,enumerable:!0,get:r("raw")}),Object.defineProperty(t,"text",{configurable:!0,enumerable:!0,get:r("text")}),Object.defineProperty(t,"urlencoded",{configurable:!0,enumerable:!0,get:r("urlencoded")})},function(e,t,i){"use strict";
/*!
 * body-parser
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(20),a=i(33),r=i(34),o=i(8)("body-parser:json"),s=i(35),c=i(26);e.exports=function(e){var t=e||{},i="number"!=typeof t.limit?n.parse(t.limit||"100kb"):t.limit,f=!1!==t.inflate,l=t.reviver,d=!1!==t.strict,h=t.type||"application/json",m=t.verify||!1;if(!1!==m&&"function"!=typeof m)throw new TypeError("option verify must be function");var b="function"!=typeof h?function(e){return function(t){return Boolean(c(t,e))}}(h):h;function v(e){if(0===e.length)return{};if(d){var t=(i=e,p.exec(i)[1]);if("{"!==t&&"["!==t)throw o("strict violation"),function(e,t){var i=e.indexOf(t),n=e.substring(0,i)+"#";try{throw JSON.parse(n),new SyntaxError("strict violation")}catch(e){return u(e,{message:e.message.replace("#",t),stack:e.stack})}}(e,t)}var i;try{return o("parse json"),JSON.parse(e,l)}catch(e){throw u(e,{message:e.message,stack:e.stack})}}return function(e,t,n){if(e._body)return o("body already parsed"),void n();if(e.body=e.body||{},!c.hasBody(e))return o("skip empty body"),void n();if(o("content-type %j",e.headers["content-type"]),!b(e))return o("skip parsing"),void n();var p=function(e){try{return(a.parse(e).parameters.charset||"").toLowerCase()}catch(e){return}}(e)||"utf-8";if("utf-"!==p.substr(0,4))return o("invalid charset"),void n(r(415,'unsupported charset "'+p.toUpperCase()+'"',{charset:p,type:"charset.unsupported"}));s(e,t,n,v,o,{encoding:p,inflate:f,limit:i,verify:m})}};var p=/^[\x20\x09\x0a\x0d]*(.)/;function u(e,t){for(var i=Object.getOwnPropertyNames(e),n=0;n<i.length;n++){var a=i[n];"stack"!==a&&"message"!==a&&delete e[a]}return e.stack=t.stack.replace(e.message,t.message),e.message=t.message,e}},function(e){e.exports=JSON.parse('{"100":"Continue","101":"Switching Protocols","102":"Processing","103":"Early Hints","200":"OK","201":"Created","202":"Accepted","203":"Non-Authoritative Information","204":"No Content","205":"Reset Content","206":"Partial Content","207":"Multi-Status","208":"Already Reported","226":"IM Used","300":"Multiple Choices","301":"Moved Permanently","302":"Found","303":"See Other","304":"Not Modified","305":"Use Proxy","306":"(Unused)","307":"Temporary Redirect","308":"Permanent Redirect","400":"Bad Request","401":"Unauthorized","402":"Payment Required","403":"Forbidden","404":"Not Found","405":"Method Not Allowed","406":"Not Acceptable","407":"Proxy Authentication Required","408":"Request Timeout","409":"Conflict","410":"Gone","411":"Length Required","412":"Precondition Failed","413":"Payload Too Large","414":"URI Too Long","415":"Unsupported Media Type","416":"Range Not Satisfiable","417":"Expectation Failed","418":"I\'m a teapot","421":"Misdirected Request","422":"Unprocessable Entity","423":"Locked","424":"Failed Dependency","425":"Unordered Collection","426":"Upgrade Required","428":"Precondition Required","429":"Too Many Requests","431":"Request Header Fields Too Large","451":"Unavailable For Legal Reasons","500":"Internal Server Error","501":"Not Implemented","502":"Bad Gateway","503":"Service Unavailable","504":"Gateway Timeout","505":"HTTP Version Not Supported","506":"Variant Also Negotiates","507":"Insufficient Storage","508":"Loop Detected","509":"Bandwidth Limit Exceeded","510":"Not Extended","511":"Network Authentication Required"}')},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var i=function(){};i.prototype=t.prototype,e.prototype=new i,e.prototype.constructor=e}},function(e,t,i){var n;function a(e){function i(){if(i.enabled){var e=i,a=+new Date,r=a-(n||a);e.diff=r,e.prev=n,e.curr=a,n=a;for(var o=new Array(arguments.length),s=0;s<o.length;s++)o[s]=arguments[s];o[0]=t.coerce(o[0]),"string"!=typeof o[0]&&o.unshift("%O");var c=0;o[0]=o[0].replace(/%([a-zA-Z%])/g,(function(i,n){if("%%"===i)return i;c++;var a=t.formatters[n];if("function"==typeof a){var r=o[c];i=a.call(e,r),o.splice(c,1),c--}return i})),t.formatArgs.call(e,o);var p=i.log||t.log||console.log.bind(console);p.apply(e,o)}}return i.namespace=e,i.enabled=t.enabled(e),i.useColors=t.useColors(),i.color=function(e){var i,n=0;for(i in e)n=(n<<5)-n+e.charCodeAt(i),n|=0;return t.colors[Math.abs(n)%t.colors.length]}(e),"function"==typeof t.init&&t.init(i),i}(t=e.exports=a.debug=a.default=a).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){t.save(e),t.names=[],t.skips=[];for(var i=("string"==typeof e?e:"").split(/[\s,]+/),n=i.length,a=0;a<n;a++)i[a]&&("-"===(e=i[a].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){var i,n;for(i=0,n=t.skips.length;i<n;i++)if(t.skips[i].test(e))return!1;for(i=0,n=t.names.length;i<n;i++)if(t.names[i].test(e))return!0;return!1},t.humanize=i(140),t.names=[],t.skips=[],t.formatters={}},function(e,t){var i=1e3,n=6e4,a=36e5,r=24*a;function o(e,t,i){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+i:Math.ceil(e/t)+" "+i+"s"}e.exports=function(e,t){t=t||{};var s,c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var o=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"days":case"day":case"d":return o*r;case"hours":case"hour":case"hrs":case"hr":case"h":return o*a;case"minutes":case"minute":case"mins":case"min":case"m":return o*n;case"seconds":case"second":case"secs":case"sec":case"s":return o*i;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}(e);if("number"===c&&!1===isNaN(e))return t.long?o(s=e,r,"day")||o(s,a,"hour")||o(s,n,"minute")||o(s,i,"second")||s+" ms":function(e){if(e>=r)return Math.round(e/r)+"d";if(e>=a)return Math.round(e/a)+"h";if(e>=n)return Math.round(e/n)+"m";if(e>=i)return Math.round(e/i)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,i){"use strict";(function(t,n,a){
/*!
 * raw-body
 * Copyright(c) 2013-2014 Jonathan Ong
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */
var r=i(20),o=i(34),s=i(73),c=i(76);e.exports=function(e,i,n){var a=n,o=i||{};!0!==i&&"string"!=typeof i||(o={encoding:i});"function"==typeof i&&(a=i,o={});if(void 0!==a&&"function"!=typeof a)throw new TypeError("argument callback must be a function");if(!a&&!t.Promise)throw new TypeError("argument callback is required");var s=!0!==o.encoding?o.encoding:"utf-8",c=r.parse(o.limit),p=null==o.length||isNaN(o.length)?null:parseInt(o.length,10);if(a)return f(e,s,p,c,a);return new Promise((function(t,i){f(e,s,p,c,(function(e,n){if(e)return i(e);t(n)}))}))};var p=/^Encoding not recognized: /;function u(e){c(e),"function"==typeof e.pause&&e.pause()}function f(e,t,i,n,r){var c=!1;if(null!==n&&null!==i&&i>n)return m(o(413,"request entity too large",{expected:i,length:i,limit:n,type:"entity.too.large"}));var f=e._readableState;if(e._decoder||f&&(f.encoding||f.decoder))return m(o(500,"stream encoding should not be set",{type:"stream.encoding.set"}));var l,d=0;try{l=function(e){if(!e)return null;try{return s.getDecoder(e)}catch(t){if(!p.test(t.message))throw t;throw o(415,"specified encoding unsupported",{encoding:e,type:"encoding.unsupported"})}}(t)}catch(e){return m(e)}var h=l?"":[];function m(){for(var t=new Array(arguments.length),i=0;i<t.length;i++)t[i]=arguments[i];function n(){y(),t[0]&&u(e),r.apply(null,t)}c=!0,n()}function b(){c||m(o(400,"request aborted",{code:"ECONNABORTED",expected:i,length:i,received:d,type:"request.aborted"}))}function v(e){c||(d+=e.length,null!==n&&d>n?m(o(413,"request entity too large",{limit:n,received:d,type:"entity.too.large"})):l?h+=l.write(e):h.push(e))}function g(e){if(!c){if(e)return m(e);if(null!==i&&d!==i)m(o(400,"request size did not match content length",{expected:i,length:i,received:d,type:"request.size.invalid"}));else m(null,l?h+(l.end()||""):a.concat(h))}}function y(){h=null,e.removeListener("aborted",b),e.removeListener("data",v),e.removeListener("end",g),e.removeListener("error",g),e.removeListener("close",y)}e.on("aborted",b),e.on("close",y),e.on("data",v),e.on("end",g),e.on("error",g)}}).call(this,i(5),i(3),i(2).Buffer)},function(e,t,i){"use strict";t.byteLength=function(e){var t=p(e),i=t[0],n=t[1];return 3*(i+n)/4-n},t.toByteArray=function(e){var t,i,n=p(e),o=n[0],s=n[1],c=new r(function(e,t,i){return 3*(t+i)/4-i}(0,o,s)),u=0,f=s>0?o-4:o;for(i=0;i<f;i+=4)t=a[e.charCodeAt(i)]<<18|a[e.charCodeAt(i+1)]<<12|a[e.charCodeAt(i+2)]<<6|a[e.charCodeAt(i+3)],c[u++]=t>>16&255,c[u++]=t>>8&255,c[u++]=255&t;2===s&&(t=a[e.charCodeAt(i)]<<2|a[e.charCodeAt(i+1)]>>4,c[u++]=255&t);1===s&&(t=a[e.charCodeAt(i)]<<10|a[e.charCodeAt(i+1)]<<4|a[e.charCodeAt(i+2)]>>2,c[u++]=t>>8&255,c[u++]=255&t);return c},t.fromByteArray=function(e){for(var t,i=e.length,a=i%3,r=[],o=0,s=i-a;o<s;o+=16383)r.push(u(e,o,o+16383>s?s:o+16383));1===a?(t=e[i-1],r.push(n[t>>2]+n[t<<4&63]+"==")):2===a&&(t=(e[i-2]<<8)+e[i-1],r.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return r.join("")};for(var n=[],a=[],r="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,c=o.length;s<c;++s)n[s]=o[s],a[o.charCodeAt(s)]=s;function p(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var i=e.indexOf("=");return-1===i&&(i=t),[i,i===t?0:4-i%4]}function u(e,t,i){for(var a,r,o=[],s=t;s<i;s+=3)a=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),o.push(n[(r=a)>>18&63]+n[r>>12&63]+n[r>>6&63]+n[63&r]);return o.join("")}a["-".charCodeAt(0)]=62,a["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,i,n,a){var r,o,s=8*a-n-1,c=(1<<s)-1,p=c>>1,u=-7,f=i?a-1:0,l=i?-1:1,d=e[t+f];for(f+=l,r=d&(1<<-u)-1,d>>=-u,u+=s;u>0;r=256*r+e[t+f],f+=l,u-=8);for(o=r&(1<<-u)-1,r>>=-u,u+=n;u>0;o=256*o+e[t+f],f+=l,u-=8);if(0===r)r=1-p;else{if(r===c)return o?NaN:1/0*(d?-1:1);o+=Math.pow(2,n),r-=p}return(d?-1:1)*o*Math.pow(2,r-n)},t.write=function(e,t,i,n,a,r){var o,s,c,p=8*r-a-1,u=(1<<p)-1,f=u>>1,l=23===a?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:r-1,h=n?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,o=u):(o=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-o))<1&&(o--,c*=2),(t+=o+f>=1?l/c:l*Math.pow(2,1-f))*c>=2&&(o++,c/=2),o+f>=u?(s=0,o=u):o+f>=1?(s=(t*c-1)*Math.pow(2,a),o+=f):(s=t*Math.pow(2,f-1)*Math.pow(2,a),o=0));a>=8;e[i+d]=255&s,d+=h,s/=256,a-=8);for(o=o<<a|s,p+=a;p>0;e[i+d]=255&o,d+=h,o/=256,p-=8);e[i+d-h]|=128*m}},function(e,t,i){"use strict";function n(e,t){this.encoder=e,this.addBOM=!0}function a(e,t){this.decoder=e,this.pass=!1,this.options=t||{}}t.PrependBOM=n,n.prototype.write=function(e){return this.addBOM&&(e="\ufeff"+e,this.addBOM=!1),this.encoder.write(e)},n.prototype.end=function(){return this.encoder.end()},t.StripBOM=a,a.prototype.write=function(e){var t=this.decoder.write(e);return this.pass||!t||("\ufeff"===t[0]&&(t=t.slice(1),"function"==typeof this.options.stripBOM&&this.options.stripBOM()),this.pass=!0),t},a.prototype.end=function(){return this.decoder.end()}},function(e,t,i){"use strict";for(var n=[i(146),i(147),i(148),i(149),i(150),i(151),i(152),i(153)],a=0;a<n.length;a++){e=n[a];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}},function(e,t,i){"use strict";var n=i(15).Buffer;function a(e,t){this.enc=e.encodingName,this.bomAware=e.bomAware,"base64"===this.enc?this.encoder=c:"cesu8"===this.enc&&(this.enc="utf8",this.encoder=p,"💩"!==n.from("eda0bdedb2a9","hex").toString()&&(this.decoder=u,this.defaultCharUnicode=t.defaultCharUnicode))}e.exports={utf8:{type:"_internal",bomAware:!0},cesu8:{type:"_internal",bomAware:!0},unicode11utf8:"utf8",ucs2:{type:"_internal",bomAware:!0},utf16le:"ucs2",binary:{type:"_internal"},base64:{type:"_internal"},hex:{type:"_internal"},_internal:a},a.prototype.encoder=s,a.prototype.decoder=o;var r=i(36).StringDecoder;function o(e,t){r.call(this,t.enc)}function s(e,t){this.enc=t.enc}function c(e,t){this.prevStr=""}function p(e,t){}function u(e,t){this.acc=0,this.contBytes=0,this.accBytes=0,this.defaultCharUnicode=t.defaultCharUnicode}r.prototype.end||(r.prototype.end=function(){}),o.prototype=r.prototype,s.prototype.write=function(e){return n.from(e,this.enc)},s.prototype.end=function(){},c.prototype.write=function(e){var t=(e=this.prevStr+e).length-e.length%4;return this.prevStr=e.slice(t),e=e.slice(0,t),n.from(e,"base64")},c.prototype.end=function(){return n.from(this.prevStr,"base64")},p.prototype.write=function(e){for(var t=n.alloc(3*e.length),i=0,a=0;a<e.length;a++){var r=e.charCodeAt(a);r<128?t[i++]=r:r<2048?(t[i++]=192+(r>>>6),t[i++]=128+(63&r)):(t[i++]=224+(r>>>12),t[i++]=128+(r>>>6&63),t[i++]=128+(63&r))}return t.slice(0,i)},p.prototype.end=function(){},u.prototype.write=function(e){for(var t=this.acc,i=this.contBytes,n=this.accBytes,a="",r=0;r<e.length;r++){var o=e[r];128!=(192&o)?(i>0&&(a+=this.defaultCharUnicode,i=0),o<128?a+=String.fromCharCode(o):o<224?(t=31&o,i=1,n=1):o<240?(t=15&o,i=2,n=1):a+=this.defaultCharUnicode):i>0?(t=t<<6|63&o,n++,0===--i&&(a+=2===n&&t<128&&t>0||3===n&&t<2048?this.defaultCharUnicode:String.fromCharCode(t))):a+=this.defaultCharUnicode}return this.acc=t,this.contBytes=i,this.accBytes=n,a},u.prototype.end=function(){var e=0;return this.contBytes>0&&(e+=this.defaultCharUnicode),e}},function(e,t,i){"use strict";var n=i(15).Buffer;function a(){}function r(){}function o(){this.overflowByte=-1}function s(e,t){this.iconv=t}function c(e,t){void 0===(e=e||{}).addBOM&&(e.addBOM=!0),this.encoder=t.iconv.getEncoder("utf-16le",e)}function p(e,t){this.decoder=null,this.initialBytes=[],this.initialBytesLen=0,this.options=e||{},this.iconv=t.iconv}function u(e,t){var i=t||"utf-16le";if(e.length>=2)if(254==e[0]&&255==e[1])i="utf-16be";else if(255==e[0]&&254==e[1])i="utf-16le";else{for(var n=0,a=0,r=Math.min(e.length-e.length%2,64),o=0;o<r;o+=2)0===e[o]&&0!==e[o+1]&&a++,0!==e[o]&&0===e[o+1]&&n++;a>n?i="utf-16be":a<n&&(i="utf-16le")}return i}t.utf16be=a,a.prototype.encoder=r,a.prototype.decoder=o,a.prototype.bomAware=!0,r.prototype.write=function(e){for(var t=n.from(e,"ucs2"),i=0;i<t.length;i+=2){var a=t[i];t[i]=t[i+1],t[i+1]=a}return t},r.prototype.end=function(){},o.prototype.write=function(e){if(0==e.length)return"";var t=n.alloc(e.length+1),i=0,a=0;for(-1!==this.overflowByte&&(t[0]=e[0],t[1]=this.overflowByte,i=1,a=2);i<e.length-1;i+=2,a+=2)t[a]=e[i+1],t[a+1]=e[i];return this.overflowByte=i==e.length-1?e[e.length-1]:-1,t.slice(0,a).toString("ucs2")},o.prototype.end=function(){},t.utf16=s,s.prototype.encoder=c,s.prototype.decoder=p,c.prototype.write=function(e){return this.encoder.write(e)},c.prototype.end=function(){return this.encoder.end()},p.prototype.write=function(e){if(!this.decoder){if(this.initialBytes.push(e),this.initialBytesLen+=e.length,this.initialBytesLen<16)return"";var t=u(e=n.concat(this.initialBytes),this.options.defaultEncoding);this.decoder=this.iconv.getDecoder(t,this.options),this.initialBytes.length=this.initialBytesLen=0}return this.decoder.write(e)},p.prototype.end=function(){if(!this.decoder){var e=n.concat(this.initialBytes),t=u(e,this.options.defaultEncoding);this.decoder=this.iconv.getDecoder(t,this.options);var i=this.decoder.write(e),a=this.decoder.end();return a?i+a:i}return this.decoder.end()}},function(e,t,i){"use strict";var n=i(15).Buffer;function a(e,t){this.iconv=t}t.utf7=a,t.unicode11utf7="utf7",a.prototype.encoder=o,a.prototype.decoder=s,a.prototype.bomAware=!0;var r=/[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;function o(e,t){this.iconv=t.iconv}function s(e,t){this.iconv=t.iconv,this.inBase64=!1,this.base64Accum=""}o.prototype.write=function(e){return n.from(e.replace(r,function(e){return"+"+("+"===e?"":this.iconv.encode(e,"utf16-be").toString("base64").replace(/=+$/,""))+"-"}.bind(this)))},o.prototype.end=function(){};for(var c=/[A-Za-z0-9\/+]/,p=[],u=0;u<256;u++)p[u]=c.test(String.fromCharCode(u));var f="+".charCodeAt(0),l="-".charCodeAt(0),d="&".charCodeAt(0);function h(e,t){this.iconv=t}function m(e,t){this.iconv=t.iconv,this.inBase64=!1,this.base64Accum=n.alloc(6),this.base64AccumIdx=0}function b(e,t){this.iconv=t.iconv,this.inBase64=!1,this.base64Accum=""}s.prototype.write=function(e){for(var t="",i=0,a=this.inBase64,r=this.base64Accum,o=0;o<e.length;o++)if(a){if(!p[e[o]]){if(o==i&&e[o]==l)t+="+";else{var s=r+e.slice(i,o).toString();t+=this.iconv.decode(n.from(s,"base64"),"utf16-be")}e[o]!=l&&o--,i=o+1,a=!1,r=""}}else e[o]==f&&(t+=this.iconv.decode(e.slice(i,o),"ascii"),i=o+1,a=!0);if(a){var c=(s=r+e.slice(i).toString()).length-s.length%8;r=s.slice(c),s=s.slice(0,c),t+=this.iconv.decode(n.from(s,"base64"),"utf16-be")}else t+=this.iconv.decode(e.slice(i),"ascii");return this.inBase64=a,this.base64Accum=r,t},s.prototype.end=function(){var e="";return this.inBase64&&this.base64Accum.length>0&&(e=this.iconv.decode(n.from(this.base64Accum,"base64"),"utf16-be")),this.inBase64=!1,this.base64Accum="",e},t.utf7imap=h,h.prototype.encoder=m,h.prototype.decoder=b,h.prototype.bomAware=!0,m.prototype.write=function(e){for(var t=this.inBase64,i=this.base64Accum,a=this.base64AccumIdx,r=n.alloc(5*e.length+10),o=0,s=0;s<e.length;s++){var c=e.charCodeAt(s);32<=c&&c<=126?(t&&(a>0&&(o+=r.write(i.slice(0,a).toString("base64").replace(/\//g,",").replace(/=+$/,""),o),a=0),r[o++]=l,t=!1),t||(r[o++]=c,c===d&&(r[o++]=l))):(t||(r[o++]=d,t=!0),t&&(i[a++]=c>>8,i[a++]=255&c,a==i.length&&(o+=r.write(i.toString("base64").replace(/\//g,","),o),a=0)))}return this.inBase64=t,this.base64AccumIdx=a,r.slice(0,o)},m.prototype.end=function(){var e=n.alloc(10),t=0;return this.inBase64&&(this.base64AccumIdx>0&&(t+=e.write(this.base64Accum.slice(0,this.base64AccumIdx).toString("base64").replace(/\//g,",").replace(/=+$/,""),t),this.base64AccumIdx=0),e[t++]=l,this.inBase64=!1),e.slice(0,t)};var v=p.slice();v[",".charCodeAt(0)]=!0,b.prototype.write=function(e){for(var t="",i=0,a=this.inBase64,r=this.base64Accum,o=0;o<e.length;o++)if(a){if(!v[e[o]]){if(o==i&&e[o]==l)t+="&";else{var s=r+e.slice(i,o).toString().replace(/,/g,"/");t+=this.iconv.decode(n.from(s,"base64"),"utf16-be")}e[o]!=l&&o--,i=o+1,a=!1,r=""}}else e[o]==d&&(t+=this.iconv.decode(e.slice(i,o),"ascii"),i=o+1,a=!0);if(a){var c=(s=r+e.slice(i).toString().replace(/,/g,"/")).length-s.length%8;r=s.slice(c),s=s.slice(0,c),t+=this.iconv.decode(n.from(s,"base64"),"utf16-be")}else t+=this.iconv.decode(e.slice(i),"ascii");return this.inBase64=a,this.base64Accum=r,t},b.prototype.end=function(){var e="";return this.inBase64&&this.base64Accum.length>0&&(e=this.iconv.decode(n.from(this.base64Accum,"base64"),"utf16-be")),this.inBase64=!1,this.base64Accum="",e}},function(e,t,i){"use strict";var n=i(15).Buffer;function a(e,t){if(!e)throw new Error("SBCS codec is called without the data.");if(!e.chars||128!==e.chars.length&&256!==e.chars.length)throw new Error("Encoding '"+e.type+"' has incorrect 'chars' (must be of len 128 or 256)");if(128===e.chars.length){for(var i="",a=0;a<128;a++)i+=String.fromCharCode(a);e.chars=i+e.chars}this.decodeBuf=n.from(e.chars,"ucs2");var r=n.alloc(65536,t.defaultCharSingleByte.charCodeAt(0));for(a=0;a<e.chars.length;a++)r[e.chars.charCodeAt(a)]=a;this.encodeBuf=r}function r(e,t){this.encodeBuf=t.encodeBuf}function o(e,t){this.decodeBuf=t.decodeBuf}t._sbcs=a,a.prototype.encoder=r,a.prototype.decoder=o,r.prototype.write=function(e){for(var t=n.alloc(e.length),i=0;i<e.length;i++)t[i]=this.encodeBuf[e.charCodeAt(i)];return t},r.prototype.end=function(){},o.prototype.write=function(e){for(var t=this.decodeBuf,i=n.alloc(2*e.length),a=0,r=0,o=0;o<e.length;o++)a=2*e[o],i[r=2*o]=t[a],i[r+1]=t[a+1];return i.toString("ucs2")},o.prototype.end=function(){}},function(e,t,i){"use strict";e.exports={10029:"maccenteuro",maccenteuro:{type:"_sbcs",chars:"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"},808:"cp808",ibm808:"cp808",cp808:{type:"_sbcs",chars:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "},mik:{type:"_sbcs",chars:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ascii8bit:"ascii",usascii:"ascii",ansix34:"ascii",ansix341968:"ascii",ansix341986:"ascii",csascii:"ascii",cp367:"ascii",ibm367:"ascii",isoir6:"ascii",iso646us:"ascii",iso646irv:"ascii",us:"ascii",latin1:"iso88591",latin2:"iso88592",latin3:"iso88593",latin4:"iso88594",latin5:"iso88599",latin6:"iso885910",latin7:"iso885913",latin8:"iso885914",latin9:"iso885915",latin10:"iso885916",csisolatin1:"iso88591",csisolatin2:"iso88592",csisolatin3:"iso88593",csisolatin4:"iso88594",csisolatincyrillic:"iso88595",csisolatinarabic:"iso88596",csisolatingreek:"iso88597",csisolatinhebrew:"iso88598",csisolatin5:"iso88599",csisolatin6:"iso885910",l1:"iso88591",l2:"iso88592",l3:"iso88593",l4:"iso88594",l5:"iso88599",l6:"iso885910",l7:"iso885913",l8:"iso885914",l9:"iso885915",l10:"iso885916",isoir14:"iso646jp",isoir57:"iso646cn",isoir100:"iso88591",isoir101:"iso88592",isoir109:"iso88593",isoir110:"iso88594",isoir144:"iso88595",isoir127:"iso88596",isoir126:"iso88597",isoir138:"iso88598",isoir148:"iso88599",isoir157:"iso885910",isoir166:"tis620",isoir179:"iso885913",isoir199:"iso885914",isoir203:"iso885915",isoir226:"iso885916",cp819:"iso88591",ibm819:"iso88591",cyrillic:"iso88595",arabic:"iso88596",arabic8:"iso88596",ecma114:"iso88596",asmo708:"iso88596",greek:"iso88597",greek8:"iso88597",ecma118:"iso88597",elot928:"iso88597",hebrew:"iso88598",hebrew8:"iso88598",turkish:"iso88599",turkish8:"iso88599",thai:"iso885911",thai8:"iso885911",celtic:"iso885914",celtic8:"iso885914",isoceltic:"iso885914",tis6200:"tis620",tis62025291:"tis620",tis62025330:"tis620",1e4:"macroman",10006:"macgreek",10007:"maccyrillic",10079:"maciceland",10081:"macturkish",cspc8codepage437:"cp437",cspc775baltic:"cp775",cspc850multilingual:"cp850",cspcp852:"cp852",cspc862latinhebrew:"cp862",cpgr:"cp869",msee:"cp1250",mscyrl:"cp1251",msansi:"cp1252",msgreek:"cp1253",msturk:"cp1254",mshebr:"cp1255",msarab:"cp1256",winbaltrim:"cp1257",cp20866:"koi8r",20866:"koi8r",ibm878:"koi8r",cskoi8r:"koi8r",cp21866:"koi8u",21866:"koi8u",ibm1168:"koi8u",strk10482002:"rk1048",tcvn5712:"tcvn",tcvn57121:"tcvn",gb198880:"iso646cn",cn:"iso646cn",csiso14jisc6220ro:"iso646jp",jisc62201969ro:"iso646jp",jp:"iso646jp",cshproman8:"hproman8",r8:"hproman8",roman8:"hproman8",xroman8:"hproman8",ibm1051:"hproman8",mac:"macintosh",csmacintosh:"macintosh"}},function(e,t,i){"use strict";e.exports={437:"cp437",737:"cp737",775:"cp775",850:"cp850",852:"cp852",855:"cp855",856:"cp856",857:"cp857",858:"cp858",860:"cp860",861:"cp861",862:"cp862",863:"cp863",864:"cp864",865:"cp865",866:"cp866",869:"cp869",874:"windows874",922:"cp922",1046:"cp1046",1124:"cp1124",1125:"cp1125",1129:"cp1129",1133:"cp1133",1161:"cp1161",1162:"cp1162",1163:"cp1163",1250:"windows1250",1251:"windows1251",1252:"windows1252",1253:"windows1253",1254:"windows1254",1255:"windows1255",1256:"windows1256",1257:"windows1257",1258:"windows1258",28591:"iso88591",28592:"iso88592",28593:"iso88593",28594:"iso88594",28595:"iso88595",28596:"iso88596",28597:"iso88597",28598:"iso88598",28599:"iso88599",28600:"iso885910",28601:"iso885911",28603:"iso885913",28604:"iso885914",28605:"iso885915",28606:"iso885916",windows874:{type:"_sbcs",chars:"€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"},win874:"windows874",cp874:"windows874",windows1250:{type:"_sbcs",chars:"€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"},win1250:"windows1250",cp1250:"windows1250",windows1251:{type:"_sbcs",chars:"ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"},win1251:"windows1251",cp1251:"windows1251",windows1252:{type:"_sbcs",chars:"€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"},win1252:"windows1252",cp1252:"windows1252",windows1253:{type:"_sbcs",chars:"€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"},win1253:"windows1253",cp1253:"windows1253",windows1254:{type:"_sbcs",chars:"€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"},win1254:"windows1254",cp1254:"windows1254",windows1255:{type:"_sbcs",chars:"€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"},win1255:"windows1255",cp1255:"windows1255",windows1256:{type:"_sbcs",chars:"€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"},win1256:"windows1256",cp1256:"windows1256",windows1257:{type:"_sbcs",chars:"€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"},win1257:"windows1257",cp1257:"windows1257",windows1258:{type:"_sbcs",chars:"€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"},win1258:"windows1258",cp1258:"windows1258",iso88591:{type:"_sbcs",chars:" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"},cp28591:"iso88591",iso88592:{type:"_sbcs",chars:" Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"},cp28592:"iso88592",iso88593:{type:"_sbcs",chars:" Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"},cp28593:"iso88593",iso88594:{type:"_sbcs",chars:" ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"},cp28594:"iso88594",iso88595:{type:"_sbcs",chars:" ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"},cp28595:"iso88595",iso88596:{type:"_sbcs",chars:" ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"},cp28596:"iso88596",iso88597:{type:"_sbcs",chars:" ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"},cp28597:"iso88597",iso88598:{type:"_sbcs",chars:" �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"},cp28598:"iso88598",iso88599:{type:"_sbcs",chars:" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"},cp28599:"iso88599",iso885910:{type:"_sbcs",chars:" ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"},cp28600:"iso885910",iso885911:{type:"_sbcs",chars:" กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"},cp28601:"iso885911",iso885913:{type:"_sbcs",chars:" ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"},cp28603:"iso885913",iso885914:{type:"_sbcs",chars:" Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"},cp28604:"iso885914",iso885915:{type:"_sbcs",chars:" ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"},cp28605:"iso885915",iso885916:{type:"_sbcs",chars:" ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"},cp28606:"iso885916",cp437:{type:"_sbcs",chars:"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm437:"cp437",csibm437:"cp437",cp737:{type:"_sbcs",chars:"ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "},ibm737:"cp737",csibm737:"cp737",cp775:{type:"_sbcs",chars:"ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "},ibm775:"cp775",csibm775:"cp775",cp850:{type:"_sbcs",chars:"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "},ibm850:"cp850",csibm850:"cp850",cp852:{type:"_sbcs",chars:"ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "},ibm852:"cp852",csibm852:"cp852",cp855:{type:"_sbcs",chars:"ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "},ibm855:"cp855",csibm855:"cp855",cp856:{type:"_sbcs",chars:"אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "},ibm856:"cp856",csibm856:"cp856",cp857:{type:"_sbcs",chars:"ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "},ibm857:"cp857",csibm857:"cp857",cp858:{type:"_sbcs",chars:"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "},ibm858:"cp858",csibm858:"cp858",cp860:{type:"_sbcs",chars:"ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm860:"cp860",csibm860:"cp860",cp861:{type:"_sbcs",chars:"ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm861:"cp861",csibm861:"cp861",cp862:{type:"_sbcs",chars:"אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm862:"cp862",csibm862:"cp862",cp863:{type:"_sbcs",chars:"ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm863:"cp863",csibm863:"cp863",cp864:{type:"_sbcs",chars:"\0\b\t\n\v\f\r !\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�"},ibm864:"cp864",csibm864:"cp864",cp865:{type:"_sbcs",chars:"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "},ibm865:"cp865",csibm865:"cp865",cp866:{type:"_sbcs",chars:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "},ibm866:"cp866",csibm866:"cp866",cp869:{type:"_sbcs",chars:"������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "},ibm869:"cp869",csibm869:"cp869",cp922:{type:"_sbcs",chars:" ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"},ibm922:"cp922",csibm922:"cp922",cp1046:{type:"_sbcs",chars:"ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"},ibm1046:"cp1046",csibm1046:"cp1046",cp1124:{type:"_sbcs",chars:" ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"},ibm1124:"cp1124",csibm1124:"cp1124",cp1125:{type:"_sbcs",chars:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "},ibm1125:"cp1125",csibm1125:"cp1125",cp1129:{type:"_sbcs",chars:" ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"},ibm1129:"cp1129",csibm1129:"cp1129",cp1133:{type:"_sbcs",chars:" ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"},ibm1133:"cp1133",csibm1133:"cp1133",cp1161:{type:"_sbcs",chars:"��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "},ibm1161:"cp1161",csibm1161:"cp1161",cp1162:{type:"_sbcs",chars:"€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"},ibm1162:"cp1162",csibm1162:"cp1162",cp1163:{type:"_sbcs",chars:" ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"},ibm1163:"cp1163",csibm1163:"cp1163",maccroatian:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"},maccyrillic:{type:"_sbcs",chars:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"},macgreek:{type:"_sbcs",chars:"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"},maciceland:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"},macroman:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"},macromania:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"},macthai:{type:"_sbcs",chars:"«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู\ufeff​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"},macturkish:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"},macukraine:{type:"_sbcs",chars:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"},koi8r:{type:"_sbcs",chars:"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"},koi8u:{type:"_sbcs",chars:"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"},koi8ru:{type:"_sbcs",chars:"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"},koi8t:{type:"_sbcs",chars:"қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"},armscii8:{type:"_sbcs",chars:" �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"},rk1048:{type:"_sbcs",chars:"ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"},tcvn:{type:"_sbcs",chars:"\0ÚỤỪỬỮ\b\t\n\v\f\rỨỰỲỶỸÝỴ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ"},georgianacademy:{type:"_sbcs",chars:"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"},georgianps:{type:"_sbcs",chars:"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"},pt154:{type:"_sbcs",chars:"ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"},viscii:{type:"_sbcs",chars:"\0ẲẴẪ\b\t\n\v\f\rỶỸỴ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ"},iso646cn:{type:"_sbcs",chars:"\0\b\t\n\v\f\r !\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"},iso646jp:{type:"_sbcs",chars:"\0\b\t\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"},hproman8:{type:"_sbcs",chars:" ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"},macintosh:{type:"_sbcs",chars:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"},ascii:{type:"_sbcs",chars:"��������������������������������������������������������������������������������������������������������������������������������"},tis620:{type:"_sbcs",chars:"���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"}}},function(e,t,i){"use strict";var n=i(15).Buffer;t._dbcs=o;for(var a=new Array(256),r=0;r<256;r++)a[r]=-1;function o(e,t){if(this.encodingName=e.encodingName,!e)throw new Error("DBCS codec is called without the data.");if(!e.table)throw new Error("Encoding '"+this.encodingName+"' has no data.");var i=e.table();this.decodeTables=[],this.decodeTables[0]=a.slice(0),this.decodeTableSeq=[];for(var n=0;n<i.length;n++)this._addDecodeChunk(i[n]);this.defaultCharUnicode=t.defaultCharUnicode,this.encodeTable=[],this.encodeTableSeq=[];var r={};if(e.encodeSkipVals)for(n=0;n<e.encodeSkipVals.length;n++){var o=e.encodeSkipVals[n];if("number"==typeof o)r[o]=!0;else for(var s=o.from;s<=o.to;s++)r[s]=!0}if(this._fillEncodeTable(0,0,r),e.encodeAdd)for(var c in e.encodeAdd)Object.prototype.hasOwnProperty.call(e.encodeAdd,c)&&this._setEncodeChar(c.charCodeAt(0),e.encodeAdd[c]);if(this.defCharSB=this.encodeTable[0][t.defaultCharSingleByte.charCodeAt(0)],-1===this.defCharSB&&(this.defCharSB=this.encodeTable[0]["?"]),-1===this.defCharSB&&(this.defCharSB="?".charCodeAt(0)),"function"==typeof e.gb18030){this.gb18030=e.gb18030();var p=this.decodeTables.length,u=this.decodeTables[p]=a.slice(0),f=this.decodeTables.length,l=this.decodeTables[f]=a.slice(0);for(n=129;n<=254;n++){var d=-1e3-this.decodeTables[0][n],h=this.decodeTables[d];for(s=48;s<=57;s++)h[s]=-1e3-p}for(n=129;n<=254;n++)u[n]=-1e3-f;for(n=48;n<=57;n++)l[n]=-2}}function s(e,t){this.leadSurrogate=-1,this.seqObj=void 0,this.encodeTable=t.encodeTable,this.encodeTableSeq=t.encodeTableSeq,this.defaultCharSingleByte=t.defCharSB,this.gb18030=t.gb18030}function c(e,t){this.nodeIdx=0,this.prevBuf=n.alloc(0),this.decodeTables=t.decodeTables,this.decodeTableSeq=t.decodeTableSeq,this.defaultCharUnicode=t.defaultCharUnicode,this.gb18030=t.gb18030}function p(e,t){if(e[0]>t)return-1;for(var i=0,n=e.length;i<n-1;){var a=i+Math.floor((n-i+1)/2);e[a]<=t?i=a:n=a}return i}o.prototype.encoder=s,o.prototype.decoder=c,o.prototype._getDecodeTrieNode=function(e){for(var t=[];e>0;e>>=8)t.push(255&e);0==t.length&&t.push(0);for(var i=this.decodeTables[0],n=t.length-1;n>0;n--){var r=i[t[n]];if(-1==r)i[t[n]]=-1e3-this.decodeTables.length,this.decodeTables.push(i=a.slice(0));else{if(!(r<=-1e3))throw new Error("Overwrite byte in "+this.encodingName+", addr: "+e.toString(16));i=this.decodeTables[-1e3-r]}}return i},o.prototype._addDecodeChunk=function(e){var t=parseInt(e[0],16),i=this._getDecodeTrieNode(t);t&=255;for(var n=1;n<e.length;n++){var a=e[n];if("string"==typeof a)for(var r=0;r<a.length;){var o=a.charCodeAt(r++);if(55296<=o&&o<56320){var s=a.charCodeAt(r++);if(!(56320<=s&&s<57344))throw new Error("Incorrect surrogate pair in "+this.encodingName+" at chunk "+e[0]);i[t++]=65536+1024*(o-55296)+(s-56320)}else if(4080<o&&o<=4095){for(var c=4095-o+2,p=[],u=0;u<c;u++)p.push(a.charCodeAt(r++));i[t++]=-10-this.decodeTableSeq.length,this.decodeTableSeq.push(p)}else i[t++]=o}else{if("number"!=typeof a)throw new Error("Incorrect type '"+typeof a+"' given in "+this.encodingName+" at chunk "+e[0]);var f=i[t-1]+1;for(r=0;r<a;r++)i[t++]=f++}}if(t>255)throw new Error("Incorrect chunk in "+this.encodingName+" at addr "+e[0]+": too long"+t)},o.prototype._getEncodeBucket=function(e){var t=e>>8;return void 0===this.encodeTable[t]&&(this.encodeTable[t]=a.slice(0)),this.encodeTable[t]},o.prototype._setEncodeChar=function(e,t){var i=this._getEncodeBucket(e),n=255&e;i[n]<=-10?this.encodeTableSeq[-10-i[n]][-1]=t:-1==i[n]&&(i[n]=t)},o.prototype._setEncodeSequence=function(e,t){var i,n=e[0],a=this._getEncodeBucket(n),r=255&n;a[r]<=-10?i=this.encodeTableSeq[-10-a[r]]:(i={},-1!==a[r]&&(i[-1]=a[r]),a[r]=-10-this.encodeTableSeq.length,this.encodeTableSeq.push(i));for(var o=1;o<e.length-1;o++){var s=i[n];"object"==typeof s?i=s:(i=i[n]={},void 0!==s&&(i[-1]=s))}i[n=e[e.length-1]]=t},o.prototype._fillEncodeTable=function(e,t,i){for(var n=this.decodeTables[e],a=0;a<256;a++){var r=n[a],o=t+a;i[o]||(r>=0?this._setEncodeChar(r,o):r<=-1e3?this._fillEncodeTable(-1e3-r,o<<8,i):r<=-10&&this._setEncodeSequence(this.decodeTableSeq[-10-r],o))}},s.prototype.write=function(e){for(var t=n.alloc(e.length*(this.gb18030?4:3)),i=this.leadSurrogate,a=this.seqObj,r=-1,o=0,s=0;;){if(-1===r){if(o==e.length)break;var c=e.charCodeAt(o++)}else{c=r;r=-1}if(55296<=c&&c<57344)if(c<56320){if(-1===i){i=c;continue}i=c,c=-1}else-1!==i?(c=65536+1024*(i-55296)+(c-56320),i=-1):c=-1;else-1!==i&&(r=c,c=-1,i=-1);var u=-1;if(void 0!==a&&-1!=c){var f=a[c];if("object"==typeof f){a=f;continue}"number"==typeof f?u=f:null==f&&void 0!==(f=a[-1])&&(u=f,r=c),a=void 0}else if(c>=0){var l=this.encodeTable[c>>8];if(void 0!==l&&(u=l[255&c]),u<=-10){a=this.encodeTableSeq[-10-u];continue}if(-1==u&&this.gb18030){var d=p(this.gb18030.uChars,c);if(-1!=d){u=this.gb18030.gbChars[d]+(c-this.gb18030.uChars[d]);t[s++]=129+Math.floor(u/12600),u%=12600,t[s++]=48+Math.floor(u/1260),u%=1260,t[s++]=129+Math.floor(u/10),u%=10,t[s++]=48+u;continue}}}-1===u&&(u=this.defaultCharSingleByte),u<256?t[s++]=u:u<65536?(t[s++]=u>>8,t[s++]=255&u):(t[s++]=u>>16,t[s++]=u>>8&255,t[s++]=255&u)}return this.seqObj=a,this.leadSurrogate=i,t.slice(0,s)},s.prototype.end=function(){if(-1!==this.leadSurrogate||void 0!==this.seqObj){var e=n.alloc(10),t=0;if(this.seqObj){var i=this.seqObj[-1];void 0!==i&&(i<256?e[t++]=i:(e[t++]=i>>8,e[t++]=255&i)),this.seqObj=void 0}return-1!==this.leadSurrogate&&(e[t++]=this.defaultCharSingleByte,this.leadSurrogate=-1),e.slice(0,t)}},s.prototype.findIdx=p,c.prototype.write=function(e){var t=n.alloc(2*e.length),i=this.nodeIdx,a=this.prevBuf,r=this.prevBuf.length,o=-this.prevBuf.length;r>0&&(a=n.concat([a,e.slice(0,10)]));for(var s=0,c=0;s<e.length;s++){var u,f=s>=0?e[s]:a[s+r];if((u=this.decodeTables[i][f])>=0);else if(-1===u)s=o,u=this.defaultCharUnicode.charCodeAt(0);else if(-2===u){var l=o>=0?e.slice(o,s+1):a.slice(o+r,s+1+r),d=12600*(l[0]-129)+1260*(l[1]-48)+10*(l[2]-129)+(l[3]-48),h=p(this.gb18030.gbChars,d);u=this.gb18030.uChars[h]+d-this.gb18030.gbChars[h]}else{if(u<=-1e3){i=-1e3-u;continue}if(!(u<=-10))throw new Error("iconv-lite internal error: invalid decoding table value "+u+" at "+i+"/"+f);for(var m=this.decodeTableSeq[-10-u],b=0;b<m.length-1;b++)u=m[b],t[c++]=255&u,t[c++]=u>>8;u=m[m.length-1]}if(u>65535){u-=65536;var v=55296+Math.floor(u/1024);t[c++]=255&v,t[c++]=v>>8,u=56320+u%1024}t[c++]=255&u,t[c++]=u>>8,i=0,o=s+1}return this.nodeIdx=i,this.prevBuf=o>=0?e.slice(o):a.slice(o+r),t.slice(0,c).toString("ucs2")},c.prototype.end=function(){for(var e="";this.prevBuf.length>0;){e+=this.defaultCharUnicode;var t=this.prevBuf.slice(1);this.prevBuf=n.alloc(0),this.nodeIdx=0,t.length>0&&(e+=this.write(t))}return this.nodeIdx=0,e}},function(e,t,i){"use strict";e.exports={shiftjis:{type:"_dbcs",table:function(){return i(154)},encodeAdd:{"¥":92,"‾":126},encodeSkipVals:[{from:60736,to:63808}]},csshiftjis:"shiftjis",mskanji:"shiftjis",sjis:"shiftjis",windows31j:"shiftjis",ms31j:"shiftjis",xsjis:"shiftjis",windows932:"shiftjis",ms932:"shiftjis",932:"shiftjis",cp932:"shiftjis",eucjp:{type:"_dbcs",table:function(){return i(155)},encodeAdd:{"¥":92,"‾":126}},gb2312:"cp936",gb231280:"cp936",gb23121980:"cp936",csgb2312:"cp936",csiso58gb231280:"cp936",euccn:"cp936",windows936:"cp936",ms936:"cp936",936:"cp936",cp936:{type:"_dbcs",table:function(){return i(49)}},gbk:{type:"_dbcs",table:function(){return i(49).concat(i(74))}},xgbk:"gbk",isoir58:"gbk",gb18030:{type:"_dbcs",table:function(){return i(49).concat(i(74))},gb18030:function(){return i(156)},encodeSkipVals:[128],encodeAdd:{"€":41699}},chinese:"gb18030",windows949:"cp949",ms949:"cp949",949:"cp949",cp949:{type:"_dbcs",table:function(){return i(157)}},cseuckr:"cp949",csksc56011987:"cp949",euckr:"cp949",isoir149:"cp949",korean:"cp949",ksc56011987:"cp949",ksc56011989:"cp949",ksc5601:"cp949",windows950:"cp950",ms950:"cp950",950:"cp950",cp950:{type:"_dbcs",table:function(){return i(75)}},big5:"big5hkscs",big5hkscs:{type:"_dbcs",table:function(){return i(75).concat(i(158))},encodeSkipVals:[41676]},cnbig5:"big5hkscs",csbig5:"big5hkscs",xxbig5:"big5hkscs"}},function(e){e.exports=JSON.parse('[["0","\\u0000",128],["a1","｡",62],["8140","　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",9,"＋－±×"],["8180","÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"],["81b8","∈∋⊆⊇⊂⊃∪∩"],["81c8","∧∨￢⇒⇔∀∃"],["81da","∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],["81f0","Å‰♯♭♪†‡¶"],["81fc","◯"],["824f","０",9],["8260","Ａ",25],["8281","ａ",25],["829f","ぁ",82],["8340","ァ",62],["8380","ム",22],["839f","Α",16,"Σ",6],["83bf","α",16,"σ",6],["8440","А",5,"ЁЖ",25],["8470","а",5,"ёж",7],["8480","о",17],["849f","─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],["8740","①",19,"Ⅰ",9],["875f","㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],["877e","㍻"],["8780","〝〟№㏍℡㊤",4,"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],["889f","亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],["8940","院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"],["8980","園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],["8a40","魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"],["8a80","橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],["8b40","機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"],["8b80","朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],["8c40","掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"],["8c80","劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],["8d40","后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"],["8d80","項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],["8e40","察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"],["8e80","死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],["8f40","宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"],["8f80","準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],["9040","拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"],["9080","逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],["9140","繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"],["9180","操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],["9240","叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"],["9280","逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],["9340","邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"],["9380","凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],["9440","如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"],["9480","楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],["9540","鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"],["9580","斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],["9640","法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"],["9680","摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],["9740","諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"],["9780","沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],["9840","蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],["989f","弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],["9940","僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"],["9980","凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],["9a40","咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"],["9a80","噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],["9b40","奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"],["9b80","它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],["9c40","廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"],["9c80","怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],["9d40","戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"],["9d80","捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],["9e40","曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"],["9e80","梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],["9f40","檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"],["9f80","麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],["e040","漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"],["e080","烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],["e140","瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"],["e180","痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],["e240","磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"],["e280","窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],["e340","紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"],["e380","縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],["e440","隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"],["e480","艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],["e540","蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"],["e580","蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],["e640","襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"],["e680","諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],["e740","蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"],["e780","轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],["e840","錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"],["e880","閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],["e940","顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"],["e980","騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],["ea40","鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"],["ea80","黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"],["ed40","纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"],["ed80","塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],["ee40","犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"],["ee80","蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],["eeef","ⅰ",9,"￢￤＇＂"],["f040","",62],["f080","",124],["f140","",62],["f180","",124],["f240","",62],["f280","",124],["f340","",62],["f380","",124],["f440","",62],["f480","",124],["f540","",62],["f580","",124],["f640","",62],["f680","",124],["f740","",62],["f780","",124],["f840","",62],["f880","",124],["f940",""],["fa40","ⅰ",9,"Ⅰ",9,"￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"],["fa80","兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"],["fb40","涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"],["fb80","祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"],["fc40","髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"]]')},function(e){e.exports=JSON.parse('[["0","\\u0000",127],["8ea1","｡",62],["a1a1","　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",9,"＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"],["a2a1","◆□■△▲▽▼※〒→←↑↓〓"],["a2ba","∈∋⊆⊇⊂⊃∪∩"],["a2ca","∧∨￢⇒⇔∀∃"],["a2dc","∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],["a2f2","Å‰♯♭♪†‡¶"],["a2fe","◯"],["a3b0","０",9],["a3c1","Ａ",25],["a3e1","ａ",25],["a4a1","ぁ",82],["a5a1","ァ",85],["a6a1","Α",16,"Σ",6],["a6c1","α",16,"σ",6],["a7a1","А",5,"ЁЖ",25],["a7d1","а",5,"ёж",25],["a8a1","─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],["ada1","①",19,"Ⅰ",9],["adc0","㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],["addf","㍻〝〟№㏍℡㊤",4,"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],["b0a1","亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],["b1a1","院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"],["b2a1","押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],["b3a1","魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"],["b4a1","粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],["b5a1","機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"],["b6a1","供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],["b7a1","掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"],["b8a1","検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],["b9a1","后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"],["baa1","此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],["bba1","察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"],["bca1","次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],["bda1","宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"],["bea1","勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],["bfa1","拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"],["c0a1","澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],["c1a1","繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"],["c2a1","臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],["c3a1","叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"],["c4a1","帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],["c5a1","邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"],["c6a1","董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],["c7a1","如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"],["c8a1","函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],["c9a1","鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"],["caa1","福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],["cba1","法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"],["cca1","漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],["cda1","諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"],["cea1","痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],["cfa1","蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],["d0a1","弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],["d1a1","僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"],["d2a1","辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],["d3a1","咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"],["d4a1","圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],["d5a1","奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"],["d6a1","屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],["d7a1","廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"],["d8a1","悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],["d9a1","戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"],["daa1","據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],["dba1","曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"],["dca1","棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],["dda1","檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"],["dea1","沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],["dfa1","漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"],["e0a1","燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],["e1a1","瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"],["e2a1","癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],["e3a1","磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"],["e4a1","筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],["e5a1","紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"],["e6a1","罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],["e7a1","隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"],["e8a1","茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],["e9a1","蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"],["eaa1","蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],["eba1","襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"],["eca1","譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],["eda1","蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"],["eea1","遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],["efa1","錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"],["f0a1","陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],["f1a1","顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"],["f2a1","髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],["f3a1","鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"],["f4a1","堯槇遙瑤凜熙"],["f9a1","纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"],["faa1","忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],["fba1","犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"],["fca1","釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],["fcf1","ⅰ",9,"￢￤＇＂"],["8fa2af","˘ˇ¸˙˝¯˛˚～΄΅"],["8fa2c2","¡¦¿"],["8fa2eb","ºª©®™¤№"],["8fa6e1","ΆΈΉΊΪ"],["8fa6e7","Ό"],["8fa6e9","ΎΫ"],["8fa6ec","Ώ"],["8fa6f1","άέήίϊΐόςύϋΰώ"],["8fa7c2","Ђ",10,"ЎЏ"],["8fa7f2","ђ",10,"ўџ"],["8fa9a1","ÆĐ"],["8fa9a4","Ħ"],["8fa9a6","Ĳ"],["8fa9a8","ŁĿ"],["8fa9ab","ŊØŒ"],["8fa9af","ŦÞ"],["8fa9c1","æđðħıĳĸłŀŉŋøœßŧþ"],["8faaa1","ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"],["8faaba","ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"],["8faba1","áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"],["8fabbd","ġĥíìïîǐ"],["8fabc5","īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"],["8fb0a1","丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"],["8fb1a1","侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"],["8fb2a1","傒傓傔傖傛傜傞",4,"傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"],["8fb3a1","凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"],["8fb4a1","匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"],["8fb5a1","咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"],["8fb6a1","嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍",5,"嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤",4,"囱囫园"],["8fb7a1","囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭",4,"坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"],["8fb8a1","堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"],["8fb9a1","奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"],["8fbaa1","嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖",4,"寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"],["8fbba1","屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"],["8fbca1","巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪",4,"幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"],["8fbda1","彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐",4,"忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"],["8fbea1","悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐",4,"愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"],["8fbfa1","懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"],["8fc0a1","捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"],["8fc1a1","擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"],["8fc2a1","昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"],["8fc3a1","杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮",4,"桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"],["8fc4a1","棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"],["8fc5a1","樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"],["8fc6a1","歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"],["8fc7a1","泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"],["8fc8a1","湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"],["8fc9a1","濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔",4,"炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃",4,"焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"],["8fcaa1","煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"],["8fcba1","狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"],["8fcca1","珿琀琁琄琇琊琑琚琛琤琦琨",9,"琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"],["8fcda1","甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹",5,"疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"],["8fcea1","瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢",6,"皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"],["8fcfa1","睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"],["8fd0a1","碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"],["8fd1a1","秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"],["8fd2a1","笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙",5],["8fd3a1","籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"],["8fd4a1","綞綦綧綪綳綶綷綹緂",4,"緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"],["8fd5a1","罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"],["8fd6a1","胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"],["8fd7a1","艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"],["8fd8a1","荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"],["8fd9a1","蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏",4,"蕖蕙蕜",6,"蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"],["8fdaa1","藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠",4,"虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"],["8fdba1","蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃",6,"螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"],["8fdca1","蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊",4,"裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"],["8fdda1","襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔",4,"觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"],["8fdea1","誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂",4,"譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"],["8fdfa1","貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"],["8fe0a1","踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"],["8fe1a1","轃轇轏轑",4,"轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"],["8fe2a1","郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"],["8fe3a1","釂釃釅釓釔釗釙釚釞釤釥釩釪釬",5,"釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵",4,"鉻鉼鉽鉿銈銉銊銍銎銒銗"],["8fe4a1","銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿",4,"鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"],["8fe5a1","鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉",4,"鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"],["8fe6a1","镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"],["8fe7a1","霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"],["8fe8a1","頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱",4,"餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"],["8fe9a1","馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿",4],["8feaa1","鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪",4,"魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"],["8feba1","鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦",4,"鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"],["8feca1","鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"],["8feda1","黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃",4,"齓齕齖齗齘齚齝齞齨齩齭",4,"齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"]]')},function(e){e.exports=JSON.parse('{"uChars":[128,165,169,178,184,216,226,235,238,244,248,251,253,258,276,284,300,325,329,334,364,463,465,467,469,471,473,475,477,506,594,610,712,716,730,930,938,962,970,1026,1104,1106,8209,8215,8218,8222,8231,8241,8244,8246,8252,8365,8452,8454,8458,8471,8482,8556,8570,8596,8602,8713,8720,8722,8726,8731,8737,8740,8742,8748,8751,8760,8766,8777,8781,8787,8802,8808,8816,8854,8858,8870,8896,8979,9322,9372,9548,9588,9616,9622,9634,9652,9662,9672,9676,9680,9702,9735,9738,9793,9795,11906,11909,11913,11917,11928,11944,11947,11951,11956,11960,11964,11979,12284,12292,12312,12319,12330,12351,12436,12447,12535,12543,12586,12842,12850,12964,13200,13215,13218,13253,13263,13267,13270,13384,13428,13727,13839,13851,14617,14703,14801,14816,14964,15183,15471,15585,16471,16736,17208,17325,17330,17374,17623,17997,18018,18212,18218,18301,18318,18760,18811,18814,18820,18823,18844,18848,18872,19576,19620,19738,19887,40870,59244,59336,59367,59413,59417,59423,59431,59437,59443,59452,59460,59478,59493,63789,63866,63894,63976,63986,64016,64018,64021,64025,64034,64037,64042,65074,65093,65107,65112,65127,65132,65375,65510,65536],"gbChars":[0,36,38,45,50,81,89,95,96,100,103,104,105,109,126,133,148,172,175,179,208,306,307,308,309,310,311,312,313,341,428,443,544,545,558,741,742,749,750,805,819,820,7922,7924,7925,7927,7934,7943,7944,7945,7950,8062,8148,8149,8152,8164,8174,8236,8240,8262,8264,8374,8380,8381,8384,8388,8390,8392,8393,8394,8396,8401,8406,8416,8419,8424,8437,8439,8445,8482,8485,8496,8521,8603,8936,8946,9046,9050,9063,9066,9076,9092,9100,9108,9111,9113,9131,9162,9164,9218,9219,11329,11331,11334,11336,11346,11361,11363,11366,11370,11372,11375,11389,11682,11686,11687,11692,11694,11714,11716,11723,11725,11730,11736,11982,11989,12102,12336,12348,12350,12384,12393,12395,12397,12510,12553,12851,12962,12973,13738,13823,13919,13933,14080,14298,14585,14698,15583,15847,16318,16434,16438,16481,16729,17102,17122,17315,17320,17402,17418,17859,17909,17911,17915,17916,17936,17939,17961,18664,18703,18814,18962,19043,33469,33470,33471,33484,33485,33490,33497,33501,33505,33513,33520,33536,33550,37845,37921,37948,38029,38038,38064,38065,38066,38069,38075,38076,38078,39108,39109,39113,39114,39115,39116,39265,39394,189000]}')},function(e){e.exports=JSON.parse('[["0","\\u0000",127],["8141","갂갃갅갆갋",4,"갘갞갟갡갢갣갥",6,"갮갲갳갴"],["8161","갵갶갷갺갻갽갾갿걁",9,"걌걎",5,"걕"],["8181","걖걗걙걚걛걝",18,"걲걳걵걶걹걻",4,"겂겇겈겍겎겏겑겒겓겕",6,"겞겢",5,"겫겭겮겱",6,"겺겾겿곀곂곃곅곆곇곉곊곋곍",7,"곖곘",7,"곢곣곥곦곩곫곭곮곲곴곷",4,"곾곿괁괂괃괅괇",4,"괎괐괒괓"],["8241","괔괕괖괗괙괚괛괝괞괟괡",7,"괪괫괮",5],["8261","괶괷괹괺괻괽",6,"굆굈굊",5,"굑굒굓굕굖굗"],["8281","굙",7,"굢굤",7,"굮굯굱굲굷굸굹굺굾궀궃",4,"궊궋궍궎궏궑",10,"궞",5,"궥",17,"궸",7,"귂귃귅귆귇귉",6,"귒귔",7,"귝귞귟귡귢귣귥",18],["8341","귺귻귽귾긂",5,"긊긌긎",5,"긕",7],["8361","긝",18,"긲긳긵긶긹긻긼"],["8381","긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗",4,"깞깢깣깤깦깧깪깫깭깮깯깱",6,"깺깾",5,"꺆",5,"꺍",46,"꺿껁껂껃껅",6,"껎껒",5,"껚껛껝",8],["8441","껦껧껩껪껬껮",5,"껵껶껷껹껺껻껽",8],["8461","꼆꼉꼊꼋꼌꼎꼏꼑",18],["8481","꼤",7,"꼮꼯꼱꼳꼵",6,"꼾꽀꽄꽅꽆꽇꽊",5,"꽑",10,"꽞",5,"꽦",18,"꽺",5,"꾁꾂꾃꾅꾆꾇꾉",6,"꾒꾓꾔꾖",5,"꾝",26,"꾺꾻꾽꾾"],["8541","꾿꿁",5,"꿊꿌꿏",4,"꿕",6,"꿝",4],["8561","꿢",5,"꿪",5,"꿲꿳꿵꿶꿷꿹",6,"뀂뀃"],["8581","뀅",6,"뀍뀎뀏뀑뀒뀓뀕",6,"뀞",9,"뀩",26,"끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞",29,"끾끿낁낂낃낅",6,"낎낐낒",5,"낛낝낞낣낤"],["8641","낥낦낧낪낰낲낶낷낹낺낻낽",6,"냆냊",5,"냒"],["8661","냓냕냖냗냙",6,"냡냢냣냤냦",10],["8681","냱",22,"넊넍넎넏넑넔넕넖넗넚넞",4,"넦넧넩넪넫넭",6,"넶넺",5,"녂녃녅녆녇녉",6,"녒녓녖녗녙녚녛녝녞녟녡",22,"녺녻녽녾녿놁놃",4,"놊놌놎놏놐놑놕놖놗놙놚놛놝"],["8741","놞",9,"놩",15],["8761","놹",18,"뇍뇎뇏뇑뇒뇓뇕"],["8781","뇖",5,"뇞뇠",7,"뇪뇫뇭뇮뇯뇱",7,"뇺뇼뇾",5,"눆눇눉눊눍",6,"눖눘눚",5,"눡",18,"눵",6,"눽",26,"뉙뉚뉛뉝뉞뉟뉡",6,"뉪",4],["8841","뉯",4,"뉶",5,"뉽",6,"늆늇늈늊",4],["8861","늏늒늓늕늖늗늛",4,"늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷"],["8881","늸",15,"닊닋닍닎닏닑닓",4,"닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉",6,"댒댖",5,"댝",54,"덗덙덚덝덠덡덢덣"],["8941","덦덨덪덬덭덯덲덳덵덶덷덹",6,"뎂뎆",5,"뎍"],["8961","뎎뎏뎑뎒뎓뎕",10,"뎢",5,"뎩뎪뎫뎭"],["8981","뎮",21,"돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩",18,"돽",18,"됑",6,"됙됚됛됝됞됟됡",6,"됪됬",7,"됵",15],["8a41","둅",10,"둒둓둕둖둗둙",6,"둢둤둦"],["8a61","둧",4,"둭",18,"뒁뒂"],["8a81","뒃",4,"뒉",19,"뒞",5,"뒥뒦뒧뒩뒪뒫뒭",7,"뒶뒸뒺",5,"듁듂듃듅듆듇듉",6,"듑듒듓듔듖",5,"듞듟듡듢듥듧",4,"듮듰듲",5,"듹",26,"딖딗딙딚딝"],["8b41","딞",5,"딦딫",4,"딲딳딵딶딷딹",6,"땂땆"],["8b61","땇땈땉땊땎땏땑땒땓땕",6,"땞땢",8],["8b81","땫",52,"떢떣떥떦떧떩떬떭떮떯떲떶",4,"떾떿뗁뗂뗃뗅",6,"뗎뗒",5,"뗙",18,"뗭",18],["8c41","똀",15,"똒똓똕똖똗똙",4],["8c61","똞",6,"똦",5,"똭",6,"똵",5],["8c81","똻",12,"뙉",26,"뙥뙦뙧뙩",50,"뚞뚟뚡뚢뚣뚥",5,"뚭뚮뚯뚰뚲",16],["8d41","뛃",16,"뛕",8],["8d61","뛞",17,"뛱뛲뛳뛵뛶뛷뛹뛺"],["8d81","뛻",4,"뜂뜃뜄뜆",33,"뜪뜫뜭뜮뜱",6,"뜺뜼",7,"띅띆띇띉띊띋띍",6,"띖",9,"띡띢띣띥띦띧띩",6,"띲띴띶",5,"띾띿랁랂랃랅",6,"랎랓랔랕랚랛랝랞"],["8e41","랟랡",6,"랪랮",5,"랶랷랹",8],["8e61","럂",4,"럈럊",19],["8e81","럞",13,"럮럯럱럲럳럵",6,"럾렂",4,"렊렋렍렎렏렑",6,"렚렜렞",5,"렦렧렩렪렫렭",6,"렶렺",5,"롁롂롃롅",11,"롒롔",7,"롞롟롡롢롣롥",6,"롮롰롲",5,"롹롺롻롽",7],["8f41","뢅",7,"뢎",17],["8f61","뢠",7,"뢩",6,"뢱뢲뢳뢵뢶뢷뢹",4],["8f81","뢾뢿룂룄룆",5,"룍룎룏룑룒룓룕",7,"룞룠룢",5,"룪룫룭룮룯룱",6,"룺룼룾",5,"뤅",18,"뤙",6,"뤡",26,"뤾뤿륁륂륃륅",6,"륍륎륐륒",5],["9041","륚륛륝륞륟륡",6,"륪륬륮",5,"륶륷륹륺륻륽"],["9061","륾",5,"릆릈릋릌릏",15],["9081","릟",12,"릮릯릱릲릳릵",6,"릾맀맂",5,"맊맋맍맓",4,"맚맜맟맠맢맦맧맩맪맫맭",6,"맶맻",4,"먂",5,"먉",11,"먖",33,"먺먻먽먾먿멁멃멄멅멆"],["9141","멇멊멌멏멐멑멒멖멗멙멚멛멝",6,"멦멪",5],["9161","멲멳멵멶멷멹",9,"몆몈몉몊몋몍",5],["9181","몓",20,"몪몭몮몯몱몳",4,"몺몼몾",5,"뫅뫆뫇뫉",14,"뫚",33,"뫽뫾뫿묁묂묃묅",7,"묎묐묒",5,"묙묚묛묝묞묟묡",6],["9241","묨묪묬",7,"묷묹묺묿",4,"뭆뭈뭊뭋뭌뭎뭑뭒"],["9261","뭓뭕뭖뭗뭙",7,"뭢뭤",7,"뭭",4],["9281","뭲",21,"뮉뮊뮋뮍뮎뮏뮑",18,"뮥뮦뮧뮩뮪뮫뮭",6,"뮵뮶뮸",7,"믁믂믃믅믆믇믉",6,"믑믒믔",35,"믺믻믽믾밁"],["9341","밃",4,"밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵"],["9361","밶밷밹",6,"뱂뱆뱇뱈뱊뱋뱎뱏뱑",8],["9381","뱚뱛뱜뱞",37,"벆벇벉벊벍벏",4,"벖벘벛",4,"벢벣벥벦벩",6,"벲벶",5,"벾벿볁볂볃볅",7,"볎볒볓볔볖볗볙볚볛볝",22,"볷볹볺볻볽"],["9441","볾",5,"봆봈봊",5,"봑봒봓봕",8],["9461","봞",5,"봥",6,"봭",12],["9481","봺",5,"뵁",6,"뵊뵋뵍뵎뵏뵑",6,"뵚",9,"뵥뵦뵧뵩",22,"붂붃붅붆붋",4,"붒붔붖붗붘붛붝",6,"붥",10,"붱",6,"붹",24],["9541","뷒뷓뷖뷗뷙뷚뷛뷝",11,"뷪",5,"뷱"],["9561","뷲뷳뷵뷶뷷뷹",6,"븁븂븄븆",5,"븎븏븑븒븓"],["9581","븕",6,"븞븠",35,"빆빇빉빊빋빍빏",4,"빖빘빜빝빞빟빢빣빥빦빧빩빫",4,"빲빶",4,"빾빿뺁뺂뺃뺅",6,"뺎뺒",5,"뺚",13,"뺩",14],["9641","뺸",23,"뻒뻓"],["9661","뻕뻖뻙",6,"뻡뻢뻦",5,"뻭",8],["9681","뻶",10,"뼂",5,"뼊",13,"뼚뼞",33,"뽂뽃뽅뽆뽇뽉",6,"뽒뽓뽔뽖",44],["9741","뾃",16,"뾕",8],["9761","뾞",17,"뾱",7],["9781","뾹",11,"뿆",5,"뿎뿏뿑뿒뿓뿕",6,"뿝뿞뿠뿢",89,"쀽쀾쀿"],["9841","쁀",16,"쁒",5,"쁙쁚쁛"],["9861","쁝쁞쁟쁡",6,"쁪",15],["9881","쁺",21,"삒삓삕삖삗삙",6,"삢삤삦",5,"삮삱삲삷",4,"삾샂샃샄샆샇샊샋샍샎샏샑",6,"샚샞",5,"샦샧샩샪샫샭",6,"샶샸샺",5,"섁섂섃섅섆섇섉",6,"섑섒섓섔섖",5,"섡섢섥섨섩섪섫섮"],["9941","섲섳섴섵섷섺섻섽섾섿셁",6,"셊셎",5,"셖셗"],["9961","셙셚셛셝",6,"셦셪",5,"셱셲셳셵셶셷셹셺셻"],["9981","셼",8,"솆",5,"솏솑솒솓솕솗",4,"솞솠솢솣솤솦솧솪솫솭솮솯솱",11,"솾",5,"쇅쇆쇇쇉쇊쇋쇍",6,"쇕쇖쇙",6,"쇡쇢쇣쇥쇦쇧쇩",6,"쇲쇴",7,"쇾쇿숁숂숃숅",6,"숎숐숒",5,"숚숛숝숞숡숢숣"],["9a41","숤숥숦숧숪숬숮숰숳숵",16],["9a61","쉆쉇쉉",6,"쉒쉓쉕쉖쉗쉙",6,"쉡쉢쉣쉤쉦"],["9a81","쉧",4,"쉮쉯쉱쉲쉳쉵",6,"쉾슀슂",5,"슊",5,"슑",6,"슙슚슜슞",5,"슦슧슩슪슫슮",5,"슶슸슺",33,"싞싟싡싢싥",5,"싮싰싲싳싴싵싷싺싽싾싿쌁",6,"쌊쌋쌎쌏"],["9b41","쌐쌑쌒쌖쌗쌙쌚쌛쌝",6,"쌦쌧쌪",8],["9b61","쌳",17,"썆",7],["9b81","썎",25,"썪썫썭썮썯썱썳",4,"썺썻썾",5,"쎅쎆쎇쎉쎊쎋쎍",50,"쏁",22,"쏚"],["9c41","쏛쏝쏞쏡쏣",4,"쏪쏫쏬쏮",5,"쏶쏷쏹",5],["9c61","쏿",8,"쐉",6,"쐑",9],["9c81","쐛",8,"쐥",6,"쐭쐮쐯쐱쐲쐳쐵",6,"쐾",9,"쑉",26,"쑦쑧쑩쑪쑫쑭",6,"쑶쑷쑸쑺",5,"쒁",18,"쒕",6,"쒝",12],["9d41","쒪",13,"쒹쒺쒻쒽",8],["9d61","쓆",25],["9d81","쓠",8,"쓪",5,"쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂",9,"씍씎씏씑씒씓씕",6,"씝",10,"씪씫씭씮씯씱",6,"씺씼씾",5,"앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩",6,"앲앶",5,"앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔"],["9e41","얖얙얚얛얝얞얟얡",7,"얪",9,"얶"],["9e61","얷얺얿",4,"엋엍엏엒엓엕엖엗엙",6,"엢엤엦엧"],["9e81","엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑",6,"옚옝",6,"옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉",6,"왒왖",5,"왞왟왡",10,"왭왮왰왲",5,"왺왻왽왾왿욁",6,"욊욌욎",5,"욖욗욙욚욛욝",6,"욦"],["9f41","욨욪",5,"욲욳욵욶욷욻",4,"웂웄웆",5,"웎"],["9f61","웏웑웒웓웕",6,"웞웟웢",5,"웪웫웭웮웯웱웲"],["9f81","웳",4,"웺웻웼웾",5,"윆윇윉윊윋윍",6,"윖윘윚",5,"윢윣윥윦윧윩",6,"윲윴윶윸윹윺윻윾윿읁읂읃읅",4,"읋읎읐읙읚읛읝읞읟읡",6,"읩읪읬",7,"읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛",4,"잢잧",4,"잮잯잱잲잳잵잶잷"],["a041","잸잹잺잻잾쟂",5,"쟊쟋쟍쟏쟑",6,"쟙쟚쟛쟜"],["a061","쟞",5,"쟥쟦쟧쟩쟪쟫쟭",13],["a081","쟻",4,"젂젃젅젆젇젉젋",4,"젒젔젗",4,"젞젟젡젢젣젥",6,"젮젰젲",5,"젹젺젻젽젾젿졁",6,"졊졋졎",5,"졕",26,"졲졳졵졶졷졹졻",4,"좂좄좈좉좊좎",5,"좕",7,"좞좠좢좣좤"],["a141","좥좦좧좩",18,"좾좿죀죁"],["a161","죂죃죅죆죇죉죊죋죍",6,"죖죘죚",5,"죢죣죥"],["a181","죦",14,"죶",5,"죾죿줁줂줃줇",4,"줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈",9,"±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"],["a241","줐줒",5,"줙",18],["a261","줭",6,"줵",18],["a281","쥈",7,"쥒쥓쥕쥖쥗쥙",6,"쥢쥤",7,"쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®"],["a341","쥱쥲쥳쥵",6,"쥽",10,"즊즋즍즎즏"],["a361","즑",6,"즚즜즞",16],["a381","즯",16,"짂짃짅짆짉짋",4,"짒짔짗짘짛！",58,"￦］",32,"￣"],["a441","짞짟짡짣짥짦짨짩짪짫짮짲",5,"짺짻짽짾짿쨁쨂쨃쨄"],["a461","쨅쨆쨇쨊쨎",5,"쨕쨖쨗쨙",12],["a481","쨦쨧쨨쨪",28,"ㄱ",93],["a541","쩇",4,"쩎쩏쩑쩒쩓쩕",6,"쩞쩢",5,"쩩쩪"],["a561","쩫",17,"쩾",5,"쪅쪆"],["a581","쪇",16,"쪙",14,"ⅰ",9],["a5b0","Ⅰ",9],["a5c1","Α",16,"Σ",6],["a5e1","α",16,"σ",6],["a641","쪨",19,"쪾쪿쫁쫂쫃쫅"],["a661","쫆",5,"쫎쫐쫒쫔쫕쫖쫗쫚",5,"쫡",6],["a681","쫨쫩쫪쫫쫭",6,"쫵",18,"쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃",7],["a741","쬋",4,"쬑쬒쬓쬕쬖쬗쬙",6,"쬢",7],["a761","쬪",22,"쭂쭃쭄"],["a781","쭅쭆쭇쭊쭋쭍쭎쭏쭑",6,"쭚쭛쭜쭞",5,"쭥",7,"㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙",9,"㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰",9,"㎀",4,"㎺",5,"㎐",4,"Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆"],["a841","쭭",10,"쭺",14],["a861","쮉",18,"쮝",6],["a881","쮤",19,"쮹",11,"ÆÐªĦ"],["a8a6","Ĳ"],["a8a8","ĿŁØŒºÞŦŊ"],["a8b1","㉠",27,"ⓐ",25,"①",14,"½⅓⅔¼¾⅛⅜⅝⅞"],["a941","쯅",14,"쯕",10],["a961","쯠쯡쯢쯣쯥쯦쯨쯪",18],["a981","쯽",14,"찎찏찑찒찓찕",6,"찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀",27,"⒜",25,"⑴",14,"¹²³⁴ⁿ₁₂₃₄"],["aa41","찥찦찪찫찭찯찱",6,"찺찿",4,"챆챇챉챊챋챍챎"],["aa61","챏",4,"챖챚",5,"챡챢챣챥챧챩",6,"챱챲"],["aa81","챳챴챶",29,"ぁ",82],["ab41","첔첕첖첗첚첛첝첞첟첡",6,"첪첮",5,"첶첷첹"],["ab61","첺첻첽",6,"쳆쳈쳊",5,"쳑쳒쳓쳕",5],["ab81","쳛",8,"쳥",6,"쳭쳮쳯쳱",12,"ァ",85],["ac41","쳾쳿촀촂",5,"촊촋촍촎촏촑",6,"촚촜촞촟촠"],["ac61","촡촢촣촥촦촧촩촪촫촭",11,"촺",4],["ac81","촿",28,"쵝쵞쵟А",5,"ЁЖ",25],["acd1","а",5,"ёж",25],["ad41","쵡쵢쵣쵥",6,"쵮쵰쵲",5,"쵹",7],["ad61","춁",6,"춉",10,"춖춗춙춚춛춝춞춟"],["ad81","춠춡춢춣춦춨춪",5,"춱",18,"췅"],["ae41","췆",5,"췍췎췏췑",16],["ae61","췢",5,"췩췪췫췭췮췯췱",6,"췺췼췾",4],["ae81","츃츅츆츇츉츊츋츍",6,"츕츖츗츘츚",5,"츢츣츥츦츧츩츪츫"],["af41","츬츭츮츯츲츴츶",19],["af61","칊",13,"칚칛칝칞칢",5,"칪칬"],["af81","칮",5,"칶칷칹칺칻칽",6,"캆캈캊",5,"캒캓캕캖캗캙"],["b041","캚",5,"캢캦",5,"캮",12],["b061","캻",5,"컂",19],["b081","컖",13,"컦컧컩컪컭",6,"컶컺",5,"가각간갇갈갉갊감",7,"같",4,"갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆"],["b141","켂켃켅켆켇켉",6,"켒켔켖",5,"켝켞켟켡켢켣"],["b161","켥",6,"켮켲",5,"켹",11],["b181","콅",14,"콖콗콙콚콛콝",6,"콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸"],["b241","콭콮콯콲콳콵콶콷콹",6,"쾁쾂쾃쾄쾆",5,"쾍"],["b261","쾎",18,"쾢",5,"쾩"],["b281","쾪",5,"쾱",18,"쿅",6,"깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙"],["b341","쿌",19,"쿢쿣쿥쿦쿧쿩"],["b361","쿪",5,"쿲쿴쿶",5,"쿽쿾쿿퀁퀂퀃퀅",5],["b381","퀋",5,"퀒",5,"퀙",19,"끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫",4,"낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝"],["b441","퀮",5,"퀶퀷퀹퀺퀻퀽",6,"큆큈큊",5],["b461","큑큒큓큕큖큗큙",6,"큡",10,"큮큯"],["b481","큱큲큳큵",6,"큾큿킀킂",18,"뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫",4,"닳담답닷",4,"닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥"],["b541","킕",14,"킦킧킩킪킫킭",5],["b561","킳킶킸킺",5,"탂탃탅탆탇탊",5,"탒탖",4],["b581","탛탞탟탡탢탣탥",6,"탮탲",5,"탹",11,"덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸"],["b641","턅",7,"턎",17],["b661","턠",15,"턲턳턵턶턷턹턻턼턽턾"],["b681","턿텂텆",5,"텎텏텑텒텓텕",6,"텞텠텢",5,"텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗"],["b741","텮",13,"텽",6,"톅톆톇톉톊"],["b761","톋",20,"톢톣톥톦톧"],["b781","톩",6,"톲톴톶톷톸톹톻톽톾톿퇁",14,"래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩"],["b841","퇐",7,"퇙",17],["b861","퇫",8,"퇵퇶퇷퇹",13],["b881","툈툊",5,"툑",24,"륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많",4,"맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼"],["b941","툪툫툮툯툱툲툳툵",6,"툾퉀퉂",5,"퉉퉊퉋퉌"],["b961","퉍",14,"퉝",6,"퉥퉦퉧퉨"],["b981","퉩",22,"튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바",4,"받",4,"밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗"],["ba41","튍튎튏튒튓튔튖",5,"튝튞튟튡튢튣튥",6,"튭"],["ba61","튮튯튰튲",5,"튺튻튽튾틁틃",4,"틊틌",5],["ba81","틒틓틕틖틗틙틚틛틝",6,"틦",9,"틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤"],["bb41","틻",4,"팂팄팆",5,"팏팑팒팓팕팗",4,"팞팢팣"],["bb61","팤팦팧팪팫팭팮팯팱",6,"팺팾",5,"퍆퍇퍈퍉"],["bb81","퍊",31,"빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤"],["bc41","퍪",17,"퍾퍿펁펂펃펅펆펇"],["bc61","펈펉펊펋펎펒",5,"펚펛펝펞펟펡",6,"펪펬펮"],["bc81","펯",4,"펵펶펷펹펺펻펽",6,"폆폇폊",5,"폑",5,"샥샨샬샴샵샷샹섀섄섈섐섕서",4,"섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭"],["bd41","폗폙",7,"폢폤",7,"폮폯폱폲폳폵폶폷"],["bd61","폸폹폺폻폾퐀퐂",5,"퐉",13],["bd81","퐗",5,"퐞",25,"숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰"],["be41","퐸",7,"푁푂푃푅",14],["be61","푔",7,"푝푞푟푡푢푣푥",7,"푮푰푱푲"],["be81","푳",4,"푺푻푽푾풁풃",4,"풊풌풎",5,"풕",8,"쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄",6,"엌엎"],["bf41","풞",10,"풪",14],["bf61","풹",18,"퓍퓎퓏퓑퓒퓓퓕"],["bf81","퓖",5,"퓝퓞퓠",7,"퓩퓪퓫퓭퓮퓯퓱",6,"퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염",5,"옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨"],["c041","퓾",5,"픅픆픇픉픊픋픍",6,"픖픘",5],["c061","픞",25],["c081","픸픹픺픻픾픿핁핂핃핅",6,"핎핐핒",5,"핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응",7,"읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊"],["c141","핤핦핧핪핬핮",5,"핶핷핹핺핻핽",6,"햆햊햋"],["c161","햌햍햎햏햑",19,"햦햧"],["c181","햨",31,"점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓"],["c241","헊헋헍헎헏헑헓",4,"헚헜헞",5,"헦헧헩헪헫헭헮"],["c261","헯",4,"헶헸헺",5,"혂혃혅혆혇혉",6,"혒"],["c281","혖",5,"혝혞혟혡혢혣혥",7,"혮",9,"혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻"],["c341","혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝",4],["c361","홢",4,"홨홪",5,"홲홳홵",11],["c381","횁횂횄횆",5,"횎횏횑횒횓횕",7,"횞횠횢",5,"횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층"],["c441","횫횭횮횯횱",7,"횺횼",7,"훆훇훉훊훋"],["c461","훍훎훏훐훒훓훕훖훘훚",5,"훡훢훣훥훦훧훩",4],["c481","훮훯훱훲훳훴훶",5,"훾훿휁휂휃휅",11,"휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼"],["c541","휕휖휗휚휛휝휞휟휡",6,"휪휬휮",5,"휶휷휹"],["c561","휺휻휽",6,"흅흆흈흊",5,"흒흓흕흚",4],["c581","흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵",6,"흾흿힀힂",5,"힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜"],["c641","힍힎힏힑",6,"힚힜힞",5],["c6a1","퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁"],["c7a1","퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠"],["c8a1","혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝"],["caa1","伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕"],["cba1","匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢"],["cca1","瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械"],["cda1","棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜"],["cea1","科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾"],["cfa1","區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴"],["d0a1","鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣"],["d1a1","朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩",5,"那樂",4,"諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉"],["d2a1","納臘蠟衲囊娘廊",4,"乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧",5,"駑魯",10,"濃籠聾膿農惱牢磊腦賂雷尿壘",7,"嫩訥杻紐勒",5,"能菱陵尼泥匿溺多茶"],["d3a1","丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃"],["d4a1","棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅"],["d5a1","蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣"],["d6a1","煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼"],["d7a1","遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬"],["d8a1","立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅"],["d9a1","蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文"],["daa1","汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑"],["dba1","發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖"],["dca1","碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦"],["dda1","孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥"],["dea1","脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索"],["dfa1","傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署"],["e0a1","胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬"],["e1a1","聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁"],["e2a1","戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧"],["e3a1","嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁"],["e4a1","沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額"],["e5a1","櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬"],["e6a1","旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒"],["e7a1","簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳"],["e8a1","烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療"],["e9a1","窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓"],["eaa1","運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜"],["eba1","濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼"],["eca1","議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄"],["eda1","立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長"],["eea1","障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱"],["efa1","煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖"],["f0a1","靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫"],["f1a1","踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只"],["f2a1","咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯"],["f3a1","鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策"],["f4a1","責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢"],["f5a1","椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃"],["f6a1","贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託"],["f7a1","鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑"],["f8a1","阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃"],["f9a1","品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航"],["faa1","行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型"],["fba1","形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵"],["fca1","禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆"],["fda1","爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰"]]')},function(e){e.exports=JSON.parse('[["8740","䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻"],["8767","綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬"],["87a1","𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋"],["8840","㇀",4,"𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ"],["88a1","ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛"],["8940","𪎩𡅅"],["8943","攊"],["8946","丽滝鵎釟"],["894c","𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮"],["89a1","琑糼緍楆竉刧"],["89ab","醌碸酞肼"],["89b0","贋胶𠧧"],["89b5","肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁"],["89c1","溚舾甙"],["89c5","䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅"],["8a40","𧶄唥"],["8a43","𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓"],["8a64","𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕"],["8a76","䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯"],["8aa1","𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱"],["8aac","䠋𠆩㿺塳𢶍"],["8ab2","𤗈𠓼𦂗𠽌𠶖啹䂻䎺"],["8abb","䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃"],["8ac9","𪘁𠸉𢫏𢳉"],["8ace","𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻"],["8adf","𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌"],["8af6","𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭"],["8b40","𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹"],["8b55","𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑"],["8ba1","𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁"],["8bde","𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢"],["8c40","倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋"],["8ca1","𣏹椙橃𣱣泿"],["8ca7","爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚"],["8cc9","顨杫䉶圽"],["8cce","藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶"],["8ce6","峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻"],["8d40","𠮟"],["8d42","𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱"],["8da1","㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘"],["8e40","𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎"],["8ea1","繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛"],["8f40","蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖"],["8fa1","𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起"],["9040","趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛"],["90a1","𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜"],["9140","𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈"],["91a1","鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨"],["9240","𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘"],["92a1","働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃"],["9340","媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍"],["93a1","摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋"],["9440","銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻"],["94a1","㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡"],["9540","𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂"],["95a1","衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰"],["9640","桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸"],["96a1","𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉"],["9740","愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫"],["97a1","𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎"],["9840","𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦"],["98a1","咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃"],["9940","䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚"],["99a1","䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿"],["9a40","鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺"],["9aa1","黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪"],["9b40","𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌"],["9b62","𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎"],["9ba1","椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊"],["9c40","嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶"],["9ca1","㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏"],["9d40","𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁"],["9da1","辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢"],["9e40","𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺"],["9ea1","鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭"],["9ead","𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹"],["9ec5","㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲"],["9ef5","噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼"],["9f40","籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱"],["9f4f","凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰"],["9fa1","椬叚鰊鴂䰻陁榀傦畆𡝭駚剳"],["9fae","酙隁酜"],["9fb2","酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽"],["9fc1","𤤙盖鮝个𠳔莾衂"],["9fc9","届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳"],["9fdb","歒酼龥鮗頮颴骺麨麄煺笔"],["9fe7","毺蠘罸"],["9feb","嘠𪙊蹷齓"],["9ff0","跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇"],["a040","𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷"],["a055","𡠻𦸅"],["a058","詾𢔛"],["a05b","惽癧髗鵄鍮鮏蟵"],["a063","蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽"],["a073","坟慯抦戹拎㩜懢厪𣏵捤栂㗒"],["a0a1","嵗𨯂迚𨸹"],["a0a6","僙𡵆礆匲阸𠼻䁥"],["a0ae","矾"],["a0b0","糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦"],["a0d4","覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷"],["a0e2","罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫"],["a3c0","␀",31,"␡"],["c6a1","①",9,"⑴",9,"ⅰ",9,"丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ",23],["c740","す",58,"ァアィイ"],["c7a1","ゥ",81,"А",5,"ЁЖ",4],["c840","Л",26,"ёж",25,"⇧↸↹㇏𠃌乚𠂊刂䒑"],["c8a1","龰冈龱𧘇"],["c8cd","￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣"],["c8f5","ʃɐɛɔɵœøŋʊɪ"],["f9fe","￭"],["fa40","𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸"],["faa1","鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍"],["fb40","𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙"],["fba1","𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂"],["fc40","廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷"],["fca1","𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝"],["fd40","𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀"],["fda1","𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎"],["fe40","鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌"],["fea1","𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔"]]')},function(e,t){},function(e,t){},function(e,t,i){(function(e,t){!function(e,i){"use strict";if(!e.setImmediate){var n,a,r,o,s,c=1,p={},u=!1,f=e.document,l=Object.getPrototypeOf&&Object.getPrototypeOf(e);l=l&&l.setTimeout?l:e,"[object process]"==={}.toString.call(e.process)?n=function(e){t.nextTick((function(){h(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,i=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=i,t}}()?e.MessageChannel?((r=new MessageChannel).port1.onmessage=function(e){h(e.data)},n=function(e){r.port2.postMessage(e)}):f&&"onreadystatechange"in f.createElement("script")?(a=f.documentElement,n=function(e){var t=f.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,a.removeChild(t),t=null},a.appendChild(t)}):n=function(e){setTimeout(h,0,e)}:(o="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(o)&&h(+t.data.slice(o.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),n=function(t){e.postMessage(o+t,"*")}),l.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),i=0;i<t.length;i++)t[i]=arguments[i+1];var a={callback:e,args:t};return p[c]=a,n(c),c++},l.clearImmediate=d}function d(e){delete p[e]}function h(e){if(u)setTimeout(h,0,e);else{var t=p[e];if(t){u=!0;try{!function(e){var t=e.callback,i=e.args;switch(i.length){case 0:t();break;case 1:t(i[0]);break;case 2:t(i[0],i[1]);break;case 3:t(i[0],i[1],i[2]);break;default:t.apply(void 0,i)}}(t)}finally{d(e),u=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,i(5),i(3))},function(e,t,i){"use strict";
/*!
 * ee-first
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */function n(e,t){return function(i){for(var n=new Array(arguments.length),a=this,r="error"===e?i:null,o=0;o<n.length;o++)n[o]=arguments[o];t(r,a,e,n)}}e.exports=function(e,t){if(!Array.isArray(e))throw new TypeError("arg must be an array of [ee, events...] arrays");for(var i=[],a=0;a<e.length;a++){var r=e[a];if(!Array.isArray(r)||r.length<2)throw new TypeError("each array member must be [ee, events...]");for(var o=r[0],s=1;s<r.length;s++){var c=r[s],p=n(c,u);o.on(c,p),i.push({ee:o,event:c,fn:p})}}function u(){f(),t.apply(null,arguments)}function f(){for(var e,t=0;t<i.length;t++)(e=i[t]).ee.removeListener(e.event,e.fn)}function l(e){t=e}return l.cancel=f,l}},function(e,t,i){"use strict";(function(e){var n=i(2).Buffer,a=i(16).Transform,r=i(173),o=i(52),s=i(81).ok,c=i(2).kMaxLength,p="Cannot create final Buffer. It would be larger than 0x"+c.toString(16)+" bytes";r.Z_MIN_WINDOWBITS=8,r.Z_MAX_WINDOWBITS=15,r.Z_DEFAULT_WINDOWBITS=15,r.Z_MIN_CHUNK=64,r.Z_MAX_CHUNK=1/0,r.Z_DEFAULT_CHUNK=16384,r.Z_MIN_MEMLEVEL=1,r.Z_MAX_MEMLEVEL=9,r.Z_DEFAULT_MEMLEVEL=8,r.Z_MIN_LEVEL=-1,r.Z_MAX_LEVEL=9,r.Z_DEFAULT_LEVEL=r.Z_DEFAULT_COMPRESSION;for(var u=Object.keys(r),f=0;f<u.length;f++){var l=u[f];l.match(/^Z/)&&Object.defineProperty(t,l,{enumerable:!0,value:r[l],writable:!1})}for(var d={Z_OK:r.Z_OK,Z_STREAM_END:r.Z_STREAM_END,Z_NEED_DICT:r.Z_NEED_DICT,Z_ERRNO:r.Z_ERRNO,Z_STREAM_ERROR:r.Z_STREAM_ERROR,Z_DATA_ERROR:r.Z_DATA_ERROR,Z_MEM_ERROR:r.Z_MEM_ERROR,Z_BUF_ERROR:r.Z_BUF_ERROR,Z_VERSION_ERROR:r.Z_VERSION_ERROR},h=Object.keys(d),m=0;m<h.length;m++){var b=h[m];d[d[b]]=b}function v(e,t,i){var a=[],r=0;function o(){for(var t;null!==(t=e.read());)a.push(t),r+=t.length;e.once("readable",o)}function s(){var t,o=null;r>=c?o=new RangeError(p):t=n.concat(a,r),a=[],e.close(),i(o,t)}e.on("error",(function(t){e.removeListener("end",s),e.removeListener("readable",o),i(t)})),e.on("end",s),e.end(t),o()}function g(e,t){if("string"==typeof t&&(t=n.from(t)),!n.isBuffer(t))throw new TypeError("Not a string or buffer");var i=e._finishFlushFlag;return e._processChunk(t,i)}function y(e){if(!(this instanceof y))return new y(e);j.call(this,e,r.DEFLATE)}function x(e){if(!(this instanceof x))return new x(e);j.call(this,e,r.INFLATE)}function w(e){if(!(this instanceof w))return new w(e);j.call(this,e,r.GZIP)}function _(e){if(!(this instanceof _))return new _(e);j.call(this,e,r.GUNZIP)}function k(e){if(!(this instanceof k))return new k(e);j.call(this,e,r.DEFLATERAW)}function E(e){if(!(this instanceof E))return new E(e);j.call(this,e,r.INFLATERAW)}function S(e){if(!(this instanceof S))return new S(e);j.call(this,e,r.UNZIP)}function A(e){return e===r.Z_NO_FLUSH||e===r.Z_PARTIAL_FLUSH||e===r.Z_SYNC_FLUSH||e===r.Z_FULL_FLUSH||e===r.Z_FINISH||e===r.Z_BLOCK}function j(e,i){var o=this;if(this._opts=e=e||{},this._chunkSize=e.chunkSize||t.Z_DEFAULT_CHUNK,a.call(this,e),e.flush&&!A(e.flush))throw new Error("Invalid flush flag: "+e.flush);if(e.finishFlush&&!A(e.finishFlush))throw new Error("Invalid flush flag: "+e.finishFlush);if(this._flushFlag=e.flush||r.Z_NO_FLUSH,this._finishFlushFlag=void 0!==e.finishFlush?e.finishFlush:r.Z_FINISH,e.chunkSize&&(e.chunkSize<t.Z_MIN_CHUNK||e.chunkSize>t.Z_MAX_CHUNK))throw new Error("Invalid chunk size: "+e.chunkSize);if(e.windowBits&&(e.windowBits<t.Z_MIN_WINDOWBITS||e.windowBits>t.Z_MAX_WINDOWBITS))throw new Error("Invalid windowBits: "+e.windowBits);if(e.level&&(e.level<t.Z_MIN_LEVEL||e.level>t.Z_MAX_LEVEL))throw new Error("Invalid compression level: "+e.level);if(e.memLevel&&(e.memLevel<t.Z_MIN_MEMLEVEL||e.memLevel>t.Z_MAX_MEMLEVEL))throw new Error("Invalid memLevel: "+e.memLevel);if(e.strategy&&e.strategy!=t.Z_FILTERED&&e.strategy!=t.Z_HUFFMAN_ONLY&&e.strategy!=t.Z_RLE&&e.strategy!=t.Z_FIXED&&e.strategy!=t.Z_DEFAULT_STRATEGY)throw new Error("Invalid strategy: "+e.strategy);if(e.dictionary&&!n.isBuffer(e.dictionary))throw new Error("Invalid dictionary: it should be a Buffer instance");this._handle=new r.Zlib(i);var s=this;this._hadError=!1,this._handle.onerror=function(e,i){M(s),s._hadError=!0;var n=new Error(e);n.errno=i,n.code=t.codes[i],s.emit("error",n)};var c=t.Z_DEFAULT_COMPRESSION;"number"==typeof e.level&&(c=e.level);var p=t.Z_DEFAULT_STRATEGY;"number"==typeof e.strategy&&(p=e.strategy),this._handle.init(e.windowBits||t.Z_DEFAULT_WINDOWBITS,c,e.memLevel||t.Z_DEFAULT_MEMLEVEL,p,e.dictionary),this._buffer=n.allocUnsafe(this._chunkSize),this._offset=0,this._level=c,this._strategy=p,this.once("end",this.close),Object.defineProperty(this,"_closed",{get:function(){return!o._handle},configurable:!0,enumerable:!0})}function M(t,i){i&&e.nextTick(i),t._handle&&(t._handle.close(),t._handle=null)}function I(e){e.emit("close")}Object.defineProperty(t,"codes",{enumerable:!0,value:Object.freeze(d),writable:!1}),t.Deflate=y,t.Inflate=x,t.Gzip=w,t.Gunzip=_,t.DeflateRaw=k,t.InflateRaw=E,t.Unzip=S,t.createDeflate=function(e){return new y(e)},t.createInflate=function(e){return new x(e)},t.createDeflateRaw=function(e){return new k(e)},t.createInflateRaw=function(e){return new E(e)},t.createGzip=function(e){return new w(e)},t.createGunzip=function(e){return new _(e)},t.createUnzip=function(e){return new S(e)},t.deflate=function(e,t,i){return"function"==typeof t&&(i=t,t={}),v(new y(t),e,i)},t.deflateSync=function(e,t){return g(new y(t),e)},t.gzip=function(e,t,i){return"function"==typeof t&&(i=t,t={}),v(new w(t),e,i)},t.gzipSync=function(e,t){return g(new w(t),e)},t.deflateRaw=function(e,t,i){return"function"==typeof t&&(i=t,t={}),v(new k(t),e,i)},t.deflateRawSync=function(e,t){return g(new k(t),e)},t.unzip=function(e,t,i){return"function"==typeof t&&(i=t,t={}),v(new S(t),e,i)},t.unzipSync=function(e,t){return g(new S(t),e)},t.inflate=function(e,t,i){return"function"==typeof t&&(i=t,t={}),v(new x(t),e,i)},t.inflateSync=function(e,t){return g(new x(t),e)},t.gunzip=function(e,t,i){return"function"==typeof t&&(i=t,t={}),v(new _(t),e,i)},t.gunzipSync=function(e,t){return g(new _(t),e)},t.inflateRaw=function(e,t,i){return"function"==typeof t&&(i=t,t={}),v(new E(t),e,i)},t.inflateRawSync=function(e,t){return g(new E(t),e)},o.inherits(j,a),j.prototype.params=function(i,n,a){if(i<t.Z_MIN_LEVEL||i>t.Z_MAX_LEVEL)throw new RangeError("Invalid compression level: "+i);if(n!=t.Z_FILTERED&&n!=t.Z_HUFFMAN_ONLY&&n!=t.Z_RLE&&n!=t.Z_FIXED&&n!=t.Z_DEFAULT_STRATEGY)throw new TypeError("Invalid strategy: "+n);if(this._level!==i||this._strategy!==n){var o=this;this.flush(r.Z_SYNC_FLUSH,(function(){s(o._handle,"zlib binding closed"),o._handle.params(i,n),o._hadError||(o._level=i,o._strategy=n,a&&a())}))}else e.nextTick(a)},j.prototype.reset=function(){return s(this._handle,"zlib binding closed"),this._handle.reset()},j.prototype._flush=function(e){this._transform(n.alloc(0),"",e)},j.prototype.flush=function(t,i){var a=this,o=this._writableState;("function"==typeof t||void 0===t&&!i)&&(i=t,t=r.Z_FULL_FLUSH),o.ended?i&&e.nextTick(i):o.ending?i&&this.once("end",i):o.needDrain?i&&this.once("drain",(function(){return a.flush(t,i)})):(this._flushFlag=t,this.write(n.alloc(0),"",i))},j.prototype.close=function(t){M(this,t),e.nextTick(I,this)},j.prototype._transform=function(e,t,i){var a,o=this._writableState,s=(o.ending||o.ended)&&(!e||o.length===e.length);return null===e||n.isBuffer(e)?this._handle?(s?a=this._finishFlushFlag:(a=this._flushFlag,e.length>=o.length&&(this._flushFlag=this._opts.flush||r.Z_NO_FLUSH)),void this._processChunk(e,a,i)):i(new Error("zlib binding closed")):i(new Error("invalid input"))},j.prototype._processChunk=function(e,t,i){var a=e&&e.length,r=this._chunkSize-this._offset,o=0,u=this,f="function"==typeof i;if(!f){var l,d=[],h=0;this.on("error",(function(e){l=e})),s(this._handle,"zlib binding closed");do{var m=this._handle.writeSync(t,e,o,a,this._buffer,this._offset,r)}while(!this._hadError&&g(m[0],m[1]));if(this._hadError)throw l;if(h>=c)throw M(this),new RangeError(p);var b=n.concat(d,h);return M(this),b}s(this._handle,"zlib binding closed");var v=this._handle.write(t,e,o,a,this._buffer,this._offset,r);function g(c,p){if(this&&(this.buffer=null,this.callback=null),!u._hadError){var l=r-p;if(s(l>=0,"have should not go down"),l>0){var m=u._buffer.slice(u._offset,u._offset+l);u._offset+=l,f?u.push(m):(d.push(m),h+=m.length)}if((0===p||u._offset>=u._chunkSize)&&(r=u._chunkSize,u._offset=0,u._buffer=n.allocUnsafe(u._chunkSize)),0===p){if(o+=a-c,a=c,!f)return!0;var b=u._handle.write(t,e,o,a,u._buffer,u._offset,u._chunkSize);return b.callback=g,void(b.buffer=e)}if(!f)return!1;i()}}v.buffer=e,v.callback=g},o.inherits(y,j),o.inherits(x,j),o.inherits(w,j),o.inherits(_,j),o.inherits(k,j),o.inherits(E,j),o.inherits(S,j)}).call(this,i(3))},function(e,t){},function(e,t,i){"use strict";var n=i(50).Buffer,a=i(166);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,i=""+t.data;t=t.next;)i+=e+t.data;return i},e.prototype.concat=function(e){if(0===this.length)return n.alloc(0);if(1===this.length)return this.head.data;for(var t,i,a,r=n.allocUnsafe(e>>>0),o=this.head,s=0;o;)t=o.data,i=r,a=s,t.copy(i,a),s+=o.data.length,o=o.next;return r},e}(),a&&a.inspect&&a.inspect.custom&&(e.exports.prototype[a.inspect.custom]=function(){var e=a.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,i){(function(t){function i(e){try{if(!t.localStorage)return!1}catch(e){return!1}var i=t.localStorage[e];return null!=i&&"true"===String(i).toLowerCase()}e.exports=function(e,t){if(i("noDeprecation"))return e;var n=!1;return function(){if(!n){if(i("throwDeprecation"))throw new Error(t);i("traceDeprecation")?console.trace(t):console.warn(t),n=!0}return e.apply(this,arguments)}}}).call(this,i(5))},function(e,t,i){"use strict";e.exports=r;var n=i(80),a=Object.create(i(25));function r(e){if(!(this instanceof r))return new r(e);n.call(this,e)}a.inherits=i(0),a.inherits(r,n),r.prototype._transform=function(e,t,i){i(null,e)}},function(e,t,i){e.exports=i(51)},function(e,t,i){e.exports=i(13)},function(e,t,i){e.exports=i(24).Transform},function(e,t,i){e.exports=i(24).PassThrough},function(e,t,i){"use strict";(function(e,n){var a=i(81),r=i(177),o=i(178),s=i(181),c=i(184);for(var p in c)t[p]=c[p];t.NONE=0,t.DEFLATE=1,t.INFLATE=2,t.GZIP=3,t.GUNZIP=4,t.DEFLATERAW=5,t.INFLATERAW=6,t.UNZIP=7;function u(e){if("number"!=typeof e||e<t.DEFLATE||e>t.UNZIP)throw new TypeError("Bad argument");this.dictionary=null,this.err=0,this.flush=0,this.init_done=!1,this.level=0,this.memLevel=0,this.mode=e,this.strategy=0,this.windowBits=0,this.write_in_progress=!1,this.pending_close=!1,this.gzip_id_bytes_read=0}u.prototype.close=function(){this.write_in_progress?this.pending_close=!0:(this.pending_close=!1,a(this.init_done,"close before init"),a(this.mode<=t.UNZIP),this.mode===t.DEFLATE||this.mode===t.GZIP||this.mode===t.DEFLATERAW?o.deflateEnd(this.strm):this.mode!==t.INFLATE&&this.mode!==t.GUNZIP&&this.mode!==t.INFLATERAW&&this.mode!==t.UNZIP||s.inflateEnd(this.strm),this.mode=t.NONE,this.dictionary=null)},u.prototype.write=function(e,t,i,n,a,r,o){return this._write(!0,e,t,i,n,a,r,o)},u.prototype.writeSync=function(e,t,i,n,a,r,o){return this._write(!1,e,t,i,n,a,r,o)},u.prototype._write=function(i,r,o,s,c,p,u,f){if(a.equal(arguments.length,8),a(this.init_done,"write before init"),a(this.mode!==t.NONE,"already finalized"),a.equal(!1,this.write_in_progress,"write already in progress"),a.equal(!1,this.pending_close,"close is pending"),this.write_in_progress=!0,a.equal(!1,void 0===r,"must provide flush value"),this.write_in_progress=!0,r!==t.Z_NO_FLUSH&&r!==t.Z_PARTIAL_FLUSH&&r!==t.Z_SYNC_FLUSH&&r!==t.Z_FULL_FLUSH&&r!==t.Z_FINISH&&r!==t.Z_BLOCK)throw new Error("Invalid flush value");if(null==o&&(o=e.alloc(0),c=0,s=0),this.strm.avail_in=c,this.strm.input=o,this.strm.next_in=s,this.strm.avail_out=f,this.strm.output=p,this.strm.next_out=u,this.flush=r,!i)return this._process(),this._checkError()?this._afterSync():void 0;var l=this;return n.nextTick((function(){l._process(),l._after()})),this},u.prototype._afterSync=function(){var e=this.strm.avail_out,t=this.strm.avail_in;return this.write_in_progress=!1,[t,e]},u.prototype._process=function(){var e=null;switch(this.mode){case t.DEFLATE:case t.GZIP:case t.DEFLATERAW:this.err=o.deflate(this.strm,this.flush);break;case t.UNZIP:switch(this.strm.avail_in>0&&(e=this.strm.next_in),this.gzip_id_bytes_read){case 0:if(null===e)break;if(31!==this.strm.input[e]){this.mode=t.INFLATE;break}if(this.gzip_id_bytes_read=1,e++,1===this.strm.avail_in)break;case 1:if(null===e)break;139===this.strm.input[e]?(this.gzip_id_bytes_read=2,this.mode=t.GUNZIP):this.mode=t.INFLATE;break;default:throw new Error("invalid number of gzip magic number bytes read")}case t.INFLATE:case t.GUNZIP:case t.INFLATERAW:for(this.err=s.inflate(this.strm,this.flush),this.err===t.Z_NEED_DICT&&this.dictionary&&(this.err=s.inflateSetDictionary(this.strm,this.dictionary),this.err===t.Z_OK?this.err=s.inflate(this.strm,this.flush):this.err===t.Z_DATA_ERROR&&(this.err=t.Z_NEED_DICT));this.strm.avail_in>0&&this.mode===t.GUNZIP&&this.err===t.Z_STREAM_END&&0!==this.strm.next_in[0];)this.reset(),this.err=s.inflate(this.strm,this.flush);break;default:throw new Error("Unknown mode "+this.mode)}},u.prototype._checkError=function(){switch(this.err){case t.Z_OK:case t.Z_BUF_ERROR:if(0!==this.strm.avail_out&&this.flush===t.Z_FINISH)return this._error("unexpected end of file"),!1;break;case t.Z_STREAM_END:break;case t.Z_NEED_DICT:return null==this.dictionary?this._error("Missing dictionary"):this._error("Bad dictionary"),!1;default:return this._error("Zlib error"),!1}return!0},u.prototype._after=function(){if(this._checkError()){var e=this.strm.avail_out,t=this.strm.avail_in;this.write_in_progress=!1,this.callback(t,e),this.pending_close&&this.close()}},u.prototype._error=function(e){this.strm.msg&&(e=this.strm.msg),this.onerror(e,this.err),this.write_in_progress=!1,this.pending_close&&this.close()},u.prototype.init=function(e,i,n,r,o){a(4===arguments.length||5===arguments.length,"init(windowBits, level, memLevel, strategy, [dictionary])"),a(e>=8&&e<=15,"invalid windowBits"),a(i>=-1&&i<=9,"invalid compression level"),a(n>=1&&n<=9,"invalid memlevel"),a(r===t.Z_FILTERED||r===t.Z_HUFFMAN_ONLY||r===t.Z_RLE||r===t.Z_FIXED||r===t.Z_DEFAULT_STRATEGY,"invalid strategy"),this._init(i,e,n,r,o),this._setDictionary()},u.prototype.params=function(){throw new Error("deflateParams Not supported")},u.prototype.reset=function(){this._reset(),this._setDictionary()},u.prototype._init=function(e,i,n,a,c){switch(this.level=e,this.windowBits=i,this.memLevel=n,this.strategy=a,this.flush=t.Z_NO_FLUSH,this.err=t.Z_OK,this.mode!==t.GZIP&&this.mode!==t.GUNZIP||(this.windowBits+=16),this.mode===t.UNZIP&&(this.windowBits+=32),this.mode!==t.DEFLATERAW&&this.mode!==t.INFLATERAW||(this.windowBits=-1*this.windowBits),this.strm=new r,this.mode){case t.DEFLATE:case t.GZIP:case t.DEFLATERAW:this.err=o.deflateInit2(this.strm,this.level,t.Z_DEFLATED,this.windowBits,this.memLevel,this.strategy);break;case t.INFLATE:case t.GUNZIP:case t.INFLATERAW:case t.UNZIP:this.err=s.inflateInit2(this.strm,this.windowBits);break;default:throw new Error("Unknown mode "+this.mode)}this.err!==t.Z_OK&&this._error("Init error"),this.dictionary=c,this.write_in_progress=!1,this.init_done=!0},u.prototype._setDictionary=function(){if(null!=this.dictionary){switch(this.err=t.Z_OK,this.mode){case t.DEFLATE:case t.DEFLATERAW:this.err=o.deflateSetDictionary(this.strm,this.dictionary)}this.err!==t.Z_OK&&this._error("Failed to set dictionary")}},u.prototype._reset=function(){switch(this.err=t.Z_OK,this.mode){case t.DEFLATE:case t.DEFLATERAW:case t.GZIP:this.err=o.deflateReset(this.strm);break;case t.INFLATE:case t.INFLATERAW:case t.GUNZIP:this.err=s.inflateReset(this.strm)}this.err!==t.Z_OK&&this._error("Failed to reset stream")},t.Zlib=u}).call(this,i(2).Buffer,i(3))},function(e,t,i){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var n=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},i=0;i<10;i++)t["_"+String.fromCharCode(i)]=i;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var i,s,c=o(e),p=1;p<arguments.length;p++){for(var u in i=Object(arguments[p]))a.call(i,u)&&(c[u]=i[u]);if(n){s=n(i);for(var f=0;f<s.length;f++)r.call(i,s[f])&&(c[s[f]]=i[s[f]])}}return c}},function(e,t){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var i=function(){};i.prototype=t.prototype,e.prototype=new i,e.prototype.constructor=e}},function(e,t,i){"use strict";e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},function(e,t,i){"use strict";var n,a=i(40),r=i(179),o=i(82),s=i(83),c=i(180);function p(e,t){return e.msg=c[t],t}function u(e){return(e<<1)-(e>4?9:0)}function f(e){for(var t=e.length;--t>=0;)e[t]=0}function l(e){var t=e.state,i=t.pending;i>e.avail_out&&(i=e.avail_out),0!==i&&(a.arraySet(e.output,t.pending_buf,t.pending_out,i,e.next_out),e.next_out+=i,t.pending_out+=i,e.total_out+=i,e.avail_out-=i,t.pending-=i,0===t.pending&&(t.pending_out=0))}function d(e,t){r._tr_flush_block(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,l(e.strm)}function h(e,t){e.pending_buf[e.pending++]=t}function m(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function b(e,t){var i,n,a=e.max_chain_length,r=e.strstart,o=e.prev_length,s=e.nice_match,c=e.strstart>e.w_size-262?e.strstart-(e.w_size-262):0,p=e.window,u=e.w_mask,f=e.prev,l=e.strstart+258,d=p[r+o-1],h=p[r+o];e.prev_length>=e.good_match&&(a>>=2),s>e.lookahead&&(s=e.lookahead);do{if(p[(i=t)+o]===h&&p[i+o-1]===d&&p[i]===p[r]&&p[++i]===p[r+1]){r+=2,i++;do{}while(p[++r]===p[++i]&&p[++r]===p[++i]&&p[++r]===p[++i]&&p[++r]===p[++i]&&p[++r]===p[++i]&&p[++r]===p[++i]&&p[++r]===p[++i]&&p[++r]===p[++i]&&r<l);if(n=258-(l-r),r=l-258,n>o){if(e.match_start=t,o=n,n>=s)break;d=p[r+o-1],h=p[r+o]}}}while((t=f[t&u])>c&&0!=--a);return o<=e.lookahead?o:e.lookahead}function v(e){var t,i,n,r,c,p,u,f,l,d,h=e.w_size;do{if(r=e.window_size-e.lookahead-e.strstart,e.strstart>=h+(h-262)){a.arraySet(e.window,e.window,h,h,0),e.match_start-=h,e.strstart-=h,e.block_start-=h,t=i=e.hash_size;do{n=e.head[--t],e.head[t]=n>=h?n-h:0}while(--i);t=i=h;do{n=e.prev[--t],e.prev[t]=n>=h?n-h:0}while(--i);r+=h}if(0===e.strm.avail_in)break;if(p=e.strm,u=e.window,f=e.strstart+e.lookahead,l=r,d=void 0,(d=p.avail_in)>l&&(d=l),i=0===d?0:(p.avail_in-=d,a.arraySet(u,p.input,p.next_in,d,f),1===p.state.wrap?p.adler=o(p.adler,u,d,f):2===p.state.wrap&&(p.adler=s(p.adler,u,d,f)),p.next_in+=d,p.total_in+=d,d),e.lookahead+=i,e.lookahead+e.insert>=3)for(c=e.strstart-e.insert,e.ins_h=e.window[c],e.ins_h=(e.ins_h<<e.hash_shift^e.window[c+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[c+3-1])&e.hash_mask,e.prev[c&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=c,c++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<262&&0!==e.strm.avail_in)}function g(e,t){for(var i,n;;){if(e.lookahead<262){if(v(e),e.lookahead<262&&0===t)return 1;if(0===e.lookahead)break}if(i=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==i&&e.strstart-i<=e.w_size-262&&(e.match_length=b(e,i)),e.match_length>=3)if(n=r._tr_tally(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){e.match_length--;do{e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=r._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(d(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,4===t?(d(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(d(e,!1),0===e.strm.avail_out)?1:2}function y(e,t){for(var i,n,a;;){if(e.lookahead<262){if(v(e),e.lookahead<262&&0===t)return 1;if(0===e.lookahead)break}if(i=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==i&&e.prev_length<e.max_lazy_match&&e.strstart-i<=e.w_size-262&&(e.match_length=b(e,i),e.match_length<=5&&(1===e.strategy||3===e.match_length&&e.strstart-e.match_start>4096)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){a=e.strstart+e.lookahead-3,n=r._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=a&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=2,e.strstart++,n&&(d(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((n=r._tr_tally(e,0,e.window[e.strstart-1]))&&d(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=r._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,4===t?(d(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(d(e,!1),0===e.strm.avail_out)?1:2}function x(e,t,i,n,a){this.good_length=e,this.max_lazy=t,this.nice_length=i,this.max_chain=n,this.func=a}function w(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new a.Buf16(1146),this.dyn_dtree=new a.Buf16(122),this.bl_tree=new a.Buf16(78),f(this.dyn_ltree),f(this.dyn_dtree),f(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new a.Buf16(16),this.heap=new a.Buf16(573),f(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new a.Buf16(573),f(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function _(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=2,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?42:113,e.adler=2===t.wrap?0:1,t.last_flush=0,r._tr_init(t),0):p(e,-2)}function k(e){var t,i=_(e);return 0===i&&((t=e.state).window_size=2*t.w_size,f(t.head),t.max_lazy_match=n[t.level].max_lazy,t.good_match=n[t.level].good_length,t.nice_match=n[t.level].nice_length,t.max_chain_length=n[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=2,t.match_available=0,t.ins_h=0),i}function E(e,t,i,n,r,o){if(!e)return-2;var s=1;if(-1===t&&(t=6),n<0?(s=0,n=-n):n>15&&(s=2,n-=16),r<1||r>9||8!==i||n<8||n>15||t<0||t>9||o<0||o>4)return p(e,-2);8===n&&(n=9);var c=new w;return e.state=c,c.strm=e,c.wrap=s,c.gzhead=null,c.w_bits=n,c.w_size=1<<c.w_bits,c.w_mask=c.w_size-1,c.hash_bits=r+7,c.hash_size=1<<c.hash_bits,c.hash_mask=c.hash_size-1,c.hash_shift=~~((c.hash_bits+3-1)/3),c.window=new a.Buf8(2*c.w_size),c.head=new a.Buf16(c.hash_size),c.prev=new a.Buf16(c.w_size),c.lit_bufsize=1<<r+6,c.pending_buf_size=4*c.lit_bufsize,c.pending_buf=new a.Buf8(c.pending_buf_size),c.d_buf=1*c.lit_bufsize,c.l_buf=3*c.lit_bufsize,c.level=t,c.strategy=o,c.method=i,k(e)}n=[new x(0,0,0,0,(function(e,t){var i=65535;for(i>e.pending_buf_size-5&&(i=e.pending_buf_size-5);;){if(e.lookahead<=1){if(v(e),0===e.lookahead&&0===t)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+i;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,d(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-262&&(d(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(d(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(d(e,!1),e.strm.avail_out),1)})),new x(4,4,8,4,g),new x(4,5,16,8,g),new x(4,6,32,32,g),new x(4,4,16,16,y),new x(8,16,32,32,y),new x(8,16,128,128,y),new x(8,32,128,256,y),new x(32,128,258,1024,y),new x(32,258,258,4096,y)],t.deflateInit=function(e,t){return E(e,t,8,15,8,0)},t.deflateInit2=E,t.deflateReset=k,t.deflateResetKeep=_,t.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?-2:(e.state.gzhead=t,0):-2},t.deflate=function(e,t){var i,a,o,c;if(!e||!e.state||t>5||t<0)return e?p(e,-2):-2;if(a=e.state,!e.output||!e.input&&0!==e.avail_in||666===a.status&&4!==t)return p(e,0===e.avail_out?-5:-2);if(a.strm=e,i=a.last_flush,a.last_flush=t,42===a.status)if(2===a.wrap)e.adler=0,h(a,31),h(a,139),h(a,8),a.gzhead?(h(a,(a.gzhead.text?1:0)+(a.gzhead.hcrc?2:0)+(a.gzhead.extra?4:0)+(a.gzhead.name?8:0)+(a.gzhead.comment?16:0)),h(a,255&a.gzhead.time),h(a,a.gzhead.time>>8&255),h(a,a.gzhead.time>>16&255),h(a,a.gzhead.time>>24&255),h(a,9===a.level?2:a.strategy>=2||a.level<2?4:0),h(a,255&a.gzhead.os),a.gzhead.extra&&a.gzhead.extra.length&&(h(a,255&a.gzhead.extra.length),h(a,a.gzhead.extra.length>>8&255)),a.gzhead.hcrc&&(e.adler=s(e.adler,a.pending_buf,a.pending,0)),a.gzindex=0,a.status=69):(h(a,0),h(a,0),h(a,0),h(a,0),h(a,0),h(a,9===a.level?2:a.strategy>=2||a.level<2?4:0),h(a,3),a.status=113);else{var b=8+(a.w_bits-8<<4)<<8;b|=(a.strategy>=2||a.level<2?0:a.level<6?1:6===a.level?2:3)<<6,0!==a.strstart&&(b|=32),b+=31-b%31,a.status=113,m(a,b),0!==a.strstart&&(m(a,e.adler>>>16),m(a,65535&e.adler)),e.adler=1}if(69===a.status)if(a.gzhead.extra){for(o=a.pending;a.gzindex<(65535&a.gzhead.extra.length)&&(a.pending!==a.pending_buf_size||(a.gzhead.hcrc&&a.pending>o&&(e.adler=s(e.adler,a.pending_buf,a.pending-o,o)),l(e),o=a.pending,a.pending!==a.pending_buf_size));)h(a,255&a.gzhead.extra[a.gzindex]),a.gzindex++;a.gzhead.hcrc&&a.pending>o&&(e.adler=s(e.adler,a.pending_buf,a.pending-o,o)),a.gzindex===a.gzhead.extra.length&&(a.gzindex=0,a.status=73)}else a.status=73;if(73===a.status)if(a.gzhead.name){o=a.pending;do{if(a.pending===a.pending_buf_size&&(a.gzhead.hcrc&&a.pending>o&&(e.adler=s(e.adler,a.pending_buf,a.pending-o,o)),l(e),o=a.pending,a.pending===a.pending_buf_size)){c=1;break}c=a.gzindex<a.gzhead.name.length?255&a.gzhead.name.charCodeAt(a.gzindex++):0,h(a,c)}while(0!==c);a.gzhead.hcrc&&a.pending>o&&(e.adler=s(e.adler,a.pending_buf,a.pending-o,o)),0===c&&(a.gzindex=0,a.status=91)}else a.status=91;if(91===a.status)if(a.gzhead.comment){o=a.pending;do{if(a.pending===a.pending_buf_size&&(a.gzhead.hcrc&&a.pending>o&&(e.adler=s(e.adler,a.pending_buf,a.pending-o,o)),l(e),o=a.pending,a.pending===a.pending_buf_size)){c=1;break}c=a.gzindex<a.gzhead.comment.length?255&a.gzhead.comment.charCodeAt(a.gzindex++):0,h(a,c)}while(0!==c);a.gzhead.hcrc&&a.pending>o&&(e.adler=s(e.adler,a.pending_buf,a.pending-o,o)),0===c&&(a.status=103)}else a.status=103;if(103===a.status&&(a.gzhead.hcrc?(a.pending+2>a.pending_buf_size&&l(e),a.pending+2<=a.pending_buf_size&&(h(a,255&e.adler),h(a,e.adler>>8&255),e.adler=0,a.status=113)):a.status=113),0!==a.pending){if(l(e),0===e.avail_out)return a.last_flush=-1,0}else if(0===e.avail_in&&u(t)<=u(i)&&4!==t)return p(e,-5);if(666===a.status&&0!==e.avail_in)return p(e,-5);if(0!==e.avail_in||0!==a.lookahead||0!==t&&666!==a.status){var g=2===a.strategy?function(e,t){for(var i;;){if(0===e.lookahead&&(v(e),0===e.lookahead)){if(0===t)return 1;break}if(e.match_length=0,i=r._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,i&&(d(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(d(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(d(e,!1),0===e.strm.avail_out)?1:2}(a,t):3===a.strategy?function(e,t){for(var i,n,a,o,s=e.window;;){if(e.lookahead<=258){if(v(e),e.lookahead<=258&&0===t)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&e.strstart>0&&(n=s[a=e.strstart-1])===s[++a]&&n===s[++a]&&n===s[++a]){o=e.strstart+258;do{}while(n===s[++a]&&n===s[++a]&&n===s[++a]&&n===s[++a]&&n===s[++a]&&n===s[++a]&&n===s[++a]&&n===s[++a]&&a<o);e.match_length=258-(o-a),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(i=r._tr_tally(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(i=r._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),i&&(d(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(d(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(d(e,!1),0===e.strm.avail_out)?1:2}(a,t):n[a.level].func(a,t);if(3!==g&&4!==g||(a.status=666),1===g||3===g)return 0===e.avail_out&&(a.last_flush=-1),0;if(2===g&&(1===t?r._tr_align(a):5!==t&&(r._tr_stored_block(a,0,0,!1),3===t&&(f(a.head),0===a.lookahead&&(a.strstart=0,a.block_start=0,a.insert=0))),l(e),0===e.avail_out))return a.last_flush=-1,0}return 4!==t?0:a.wrap<=0?1:(2===a.wrap?(h(a,255&e.adler),h(a,e.adler>>8&255),h(a,e.adler>>16&255),h(a,e.adler>>24&255),h(a,255&e.total_in),h(a,e.total_in>>8&255),h(a,e.total_in>>16&255),h(a,e.total_in>>24&255)):(m(a,e.adler>>>16),m(a,65535&e.adler)),l(e),a.wrap>0&&(a.wrap=-a.wrap),0!==a.pending?0:1)},t.deflateEnd=function(e){var t;return e&&e.state?42!==(t=e.state.status)&&69!==t&&73!==t&&91!==t&&103!==t&&113!==t&&666!==t?p(e,-2):(e.state=null,113===t?p(e,-3):0):-2},t.deflateSetDictionary=function(e,t){var i,n,r,s,c,p,u,l,d=t.length;if(!e||!e.state)return-2;if(2===(s=(i=e.state).wrap)||1===s&&42!==i.status||i.lookahead)return-2;for(1===s&&(e.adler=o(e.adler,t,d,0)),i.wrap=0,d>=i.w_size&&(0===s&&(f(i.head),i.strstart=0,i.block_start=0,i.insert=0),l=new a.Buf8(i.w_size),a.arraySet(l,t,d-i.w_size,i.w_size,0),t=l,d=i.w_size),c=e.avail_in,p=e.next_in,u=e.input,e.avail_in=d,e.next_in=0,e.input=t,v(i);i.lookahead>=3;){n=i.strstart,r=i.lookahead-2;do{i.ins_h=(i.ins_h<<i.hash_shift^i.window[n+3-1])&i.hash_mask,i.prev[n&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=n,n++}while(--r);i.strstart=n,i.lookahead=2,v(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=2,i.match_available=0,e.next_in=p,e.input=u,e.avail_in=c,i.wrap=s,0},t.deflateInfo="pako deflate (from Nodeca project)"},function(e,t,i){"use strict";var n=i(40);function a(e){for(var t=e.length;--t>=0;)e[t]=0}var r=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],o=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],s=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],c=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],p=new Array(576);a(p);var u=new Array(60);a(u);var f=new Array(512);a(f);var l=new Array(256);a(l);var d=new Array(29);a(d);var h,m,b,v=new Array(30);function g(e,t,i,n,a){this.static_tree=e,this.extra_bits=t,this.extra_base=i,this.elems=n,this.max_length=a,this.has_stree=e&&e.length}function y(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function x(e){return e<256?f[e]:f[256+(e>>>7)]}function w(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function _(e,t,i){e.bi_valid>16-i?(e.bi_buf|=t<<e.bi_valid&65535,w(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=i-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=i)}function k(e,t,i){_(e,i[2*t],i[2*t+1])}function E(e,t){var i=0;do{i|=1&e,e>>>=1,i<<=1}while(--t>0);return i>>>1}function S(e,t,i){var n,a,r=new Array(16),o=0;for(n=1;n<=15;n++)r[n]=o=o+i[n-1]<<1;for(a=0;a<=t;a++){var s=e[2*a+1];0!==s&&(e[2*a]=E(r[s]++,s))}}function A(e){var t;for(t=0;t<286;t++)e.dyn_ltree[2*t]=0;for(t=0;t<30;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function j(e){e.bi_valid>8?w(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function M(e,t,i,n){var a=2*t,r=2*i;return e[a]<e[r]||e[a]===e[r]&&n[t]<=n[i]}function I(e,t,i){for(var n=e.heap[i],a=i<<1;a<=e.heap_len&&(a<e.heap_len&&M(t,e.heap[a+1],e.heap[a],e.depth)&&a++,!M(t,n,e.heap[a],e.depth));)e.heap[i]=e.heap[a],i=a,a<<=1;e.heap[i]=n}function T(e,t,i){var n,a,s,c,p=0;if(0!==e.last_lit)do{n=e.pending_buf[e.d_buf+2*p]<<8|e.pending_buf[e.d_buf+2*p+1],a=e.pending_buf[e.l_buf+p],p++,0===n?k(e,a,t):(k(e,(s=l[a])+256+1,t),0!==(c=r[s])&&_(e,a-=d[s],c),k(e,s=x(--n),i),0!==(c=o[s])&&_(e,n-=v[s],c))}while(p<e.last_lit);k(e,256,t)}function C(e,t){var i,n,a,r=t.dyn_tree,o=t.stat_desc.static_tree,s=t.stat_desc.has_stree,c=t.stat_desc.elems,p=-1;for(e.heap_len=0,e.heap_max=573,i=0;i<c;i++)0!==r[2*i]?(e.heap[++e.heap_len]=p=i,e.depth[i]=0):r[2*i+1]=0;for(;e.heap_len<2;)r[2*(a=e.heap[++e.heap_len]=p<2?++p:0)]=1,e.depth[a]=0,e.opt_len--,s&&(e.static_len-=o[2*a+1]);for(t.max_code=p,i=e.heap_len>>1;i>=1;i--)I(e,r,i);a=c;do{i=e.heap[1],e.heap[1]=e.heap[e.heap_len--],I(e,r,1),n=e.heap[1],e.heap[--e.heap_max]=i,e.heap[--e.heap_max]=n,r[2*a]=r[2*i]+r[2*n],e.depth[a]=(e.depth[i]>=e.depth[n]?e.depth[i]:e.depth[n])+1,r[2*i+1]=r[2*n+1]=a,e.heap[1]=a++,I(e,r,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],function(e,t){var i,n,a,r,o,s,c=t.dyn_tree,p=t.max_code,u=t.stat_desc.static_tree,f=t.stat_desc.has_stree,l=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,h=t.stat_desc.max_length,m=0;for(r=0;r<=15;r++)e.bl_count[r]=0;for(c[2*e.heap[e.heap_max]+1]=0,i=e.heap_max+1;i<573;i++)(r=c[2*c[2*(n=e.heap[i])+1]+1]+1)>h&&(r=h,m++),c[2*n+1]=r,n>p||(e.bl_count[r]++,o=0,n>=d&&(o=l[n-d]),s=c[2*n],e.opt_len+=s*(r+o),f&&(e.static_len+=s*(u[2*n+1]+o)));if(0!==m){do{for(r=h-1;0===e.bl_count[r];)r--;e.bl_count[r]--,e.bl_count[r+1]+=2,e.bl_count[h]--,m-=2}while(m>0);for(r=h;0!==r;r--)for(n=e.bl_count[r];0!==n;)(a=e.heap[--i])>p||(c[2*a+1]!==r&&(e.opt_len+=(r-c[2*a+1])*c[2*a],c[2*a+1]=r),n--)}}(e,t),S(r,p,e.bl_count)}function O(e,t,i){var n,a,r=-1,o=t[1],s=0,c=7,p=4;for(0===o&&(c=138,p=3),t[2*(i+1)+1]=65535,n=0;n<=i;n++)a=o,o=t[2*(n+1)+1],++s<c&&a===o||(s<p?e.bl_tree[2*a]+=s:0!==a?(a!==r&&e.bl_tree[2*a]++,e.bl_tree[32]++):s<=10?e.bl_tree[34]++:e.bl_tree[36]++,s=0,r=a,0===o?(c=138,p=3):a===o?(c=6,p=3):(c=7,p=4))}function B(e,t,i){var n,a,r=-1,o=t[1],s=0,c=7,p=4;for(0===o&&(c=138,p=3),n=0;n<=i;n++)if(a=o,o=t[2*(n+1)+1],!(++s<c&&a===o)){if(s<p)do{k(e,a,e.bl_tree)}while(0!=--s);else 0!==a?(a!==r&&(k(e,a,e.bl_tree),s--),k(e,16,e.bl_tree),_(e,s-3,2)):s<=10?(k(e,17,e.bl_tree),_(e,s-3,3)):(k(e,18,e.bl_tree),_(e,s-11,7));s=0,r=a,0===o?(c=138,p=3):a===o?(c=6,p=3):(c=7,p=4)}}a(v);var R=!1;function z(e,t,i,a){_(e,0+(a?1:0),3),function(e,t,i,a){j(e),a&&(w(e,i),w(e,~i)),n.arraySet(e.pending_buf,e.window,t,i,e.pending),e.pending+=i}(e,t,i,!0)}t._tr_init=function(e){R||(!function(){var e,t,i,n,a,c=new Array(16);for(i=0,n=0;n<28;n++)for(d[n]=i,e=0;e<1<<r[n];e++)l[i++]=n;for(l[i-1]=n,a=0,n=0;n<16;n++)for(v[n]=a,e=0;e<1<<o[n];e++)f[a++]=n;for(a>>=7;n<30;n++)for(v[n]=a<<7,e=0;e<1<<o[n]-7;e++)f[256+a++]=n;for(t=0;t<=15;t++)c[t]=0;for(e=0;e<=143;)p[2*e+1]=8,e++,c[8]++;for(;e<=255;)p[2*e+1]=9,e++,c[9]++;for(;e<=279;)p[2*e+1]=7,e++,c[7]++;for(;e<=287;)p[2*e+1]=8,e++,c[8]++;for(S(p,287,c),e=0;e<30;e++)u[2*e+1]=5,u[2*e]=E(e,5);h=new g(p,r,257,286,15),m=new g(u,o,0,30,15),b=new g(new Array(0),s,0,19,7)}(),R=!0),e.l_desc=new y(e.dyn_ltree,h),e.d_desc=new y(e.dyn_dtree,m),e.bl_desc=new y(e.bl_tree,b),e.bi_buf=0,e.bi_valid=0,A(e)},t._tr_stored_block=z,t._tr_flush_block=function(e,t,i,n){var a,r,o=0;e.level>0?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,i=4093624447;for(t=0;t<=31;t++,i>>>=1)if(1&i&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<256;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),C(e,e.l_desc),C(e,e.d_desc),o=function(e){var t;for(O(e,e.dyn_ltree,e.l_desc.max_code),O(e,e.dyn_dtree,e.d_desc.max_code),C(e,e.bl_desc),t=18;t>=3&&0===e.bl_tree[2*c[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),a=e.opt_len+3+7>>>3,(r=e.static_len+3+7>>>3)<=a&&(a=r)):a=r=i+5,i+4<=a&&-1!==t?z(e,t,i,n):4===e.strategy||r===a?(_(e,2+(n?1:0),3),T(e,p,u)):(_(e,4+(n?1:0),3),function(e,t,i,n){var a;for(_(e,t-257,5),_(e,i-1,5),_(e,n-4,4),a=0;a<n;a++)_(e,e.bl_tree[2*c[a]+1],3);B(e,e.dyn_ltree,t-1),B(e,e.dyn_dtree,i-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,o+1),T(e,e.dyn_ltree,e.dyn_dtree)),A(e),n&&j(e)},t._tr_tally=function(e,t,i){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&i,e.last_lit++,0===t?e.dyn_ltree[2*i]++:(e.matches++,t--,e.dyn_ltree[2*(l[i]+256+1)]++,e.dyn_dtree[2*x(t)]++),e.last_lit===e.lit_bufsize-1},t._tr_align=function(e){_(e,2,3),k(e,256,p),function(e){16===e.bi_valid?(w(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},function(e,t,i){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},function(e,t,i){"use strict";var n=i(40),a=i(82),r=i(83),o=i(182),s=i(183);function c(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function p(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function u(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new n.Buf32(852),t.distcode=t.distdyn=new n.Buf32(592),t.sane=1,t.back=-1,0):-2}function f(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,u(e)):-2}function l(e,t){var i,n;return e&&e.state?(n=e.state,t<0?(i=0,t=-t):(i=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?-2:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=i,n.wbits=t,f(e))):-2}function d(e,t){var i,n;return e?(n=new p,e.state=n,n.window=null,0!==(i=l(e,t))&&(e.state=null),i):-2}var h,m,b=!0;function v(e){if(b){var t;for(h=new n.Buf32(512),m=new n.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(s(1,e.lens,0,288,h,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;s(2,e.lens,0,32,m,0,e.work,{bits:5}),b=!1}e.lencode=h,e.lenbits=9,e.distcode=m,e.distbits=5}function g(e,t,i,a){var r,o=e.state;return null===o.window&&(o.wsize=1<<o.wbits,o.wnext=0,o.whave=0,o.window=new n.Buf8(o.wsize)),a>=o.wsize?(n.arraySet(o.window,t,i-o.wsize,o.wsize,0),o.wnext=0,o.whave=o.wsize):((r=o.wsize-o.wnext)>a&&(r=a),n.arraySet(o.window,t,i-a,r,o.wnext),(a-=r)?(n.arraySet(o.window,t,i-a,a,0),o.wnext=a,o.whave=o.wsize):(o.wnext+=r,o.wnext===o.wsize&&(o.wnext=0),o.whave<o.wsize&&(o.whave+=r))),0}t.inflateReset=f,t.inflateReset2=l,t.inflateResetKeep=u,t.inflateInit=function(e){return d(e,15)},t.inflateInit2=d,t.inflate=function(e,t){var i,p,u,f,l,d,h,m,b,y,x,w,_,k,E,S,A,j,M,I,T,C,O,B,R=0,z=new n.Buf8(4),q=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return-2;12===(i=e.state).mode&&(i.mode=13),l=e.next_out,u=e.output,h=e.avail_out,f=e.next_in,p=e.input,d=e.avail_in,m=i.hold,b=i.bits,y=d,x=h,C=0;e:for(;;)switch(i.mode){case 1:if(0===i.wrap){i.mode=13;break}for(;b<16;){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}if(2&i.wrap&&35615===m){i.check=0,z[0]=255&m,z[1]=m>>>8&255,i.check=r(i.check,z,2,0),m=0,b=0,i.mode=2;break}if(i.flags=0,i.head&&(i.head.done=!1),!(1&i.wrap)||(((255&m)<<8)+(m>>8))%31){e.msg="incorrect header check",i.mode=30;break}if(8!=(15&m)){e.msg="unknown compression method",i.mode=30;break}if(b-=4,T=8+(15&(m>>>=4)),0===i.wbits)i.wbits=T;else if(T>i.wbits){e.msg="invalid window size",i.mode=30;break}i.dmax=1<<T,e.adler=i.check=1,i.mode=512&m?10:12,m=0,b=0;break;case 2:for(;b<16;){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}if(i.flags=m,8!=(255&i.flags)){e.msg="unknown compression method",i.mode=30;break}if(57344&i.flags){e.msg="unknown header flags set",i.mode=30;break}i.head&&(i.head.text=m>>8&1),512&i.flags&&(z[0]=255&m,z[1]=m>>>8&255,i.check=r(i.check,z,2,0)),m=0,b=0,i.mode=3;case 3:for(;b<32;){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}i.head&&(i.head.time=m),512&i.flags&&(z[0]=255&m,z[1]=m>>>8&255,z[2]=m>>>16&255,z[3]=m>>>24&255,i.check=r(i.check,z,4,0)),m=0,b=0,i.mode=4;case 4:for(;b<16;){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}i.head&&(i.head.xflags=255&m,i.head.os=m>>8),512&i.flags&&(z[0]=255&m,z[1]=m>>>8&255,i.check=r(i.check,z,2,0)),m=0,b=0,i.mode=5;case 5:if(1024&i.flags){for(;b<16;){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}i.length=m,i.head&&(i.head.extra_len=m),512&i.flags&&(z[0]=255&m,z[1]=m>>>8&255,i.check=r(i.check,z,2,0)),m=0,b=0}else i.head&&(i.head.extra=null);i.mode=6;case 6:if(1024&i.flags&&((w=i.length)>d&&(w=d),w&&(i.head&&(T=i.head.extra_len-i.length,i.head.extra||(i.head.extra=new Array(i.head.extra_len)),n.arraySet(i.head.extra,p,f,w,T)),512&i.flags&&(i.check=r(i.check,p,w,f)),d-=w,f+=w,i.length-=w),i.length))break e;i.length=0,i.mode=7;case 7:if(2048&i.flags){if(0===d)break e;w=0;do{T=p[f+w++],i.head&&T&&i.length<65536&&(i.head.name+=String.fromCharCode(T))}while(T&&w<d);if(512&i.flags&&(i.check=r(i.check,p,w,f)),d-=w,f+=w,T)break e}else i.head&&(i.head.name=null);i.length=0,i.mode=8;case 8:if(4096&i.flags){if(0===d)break e;w=0;do{T=p[f+w++],i.head&&T&&i.length<65536&&(i.head.comment+=String.fromCharCode(T))}while(T&&w<d);if(512&i.flags&&(i.check=r(i.check,p,w,f)),d-=w,f+=w,T)break e}else i.head&&(i.head.comment=null);i.mode=9;case 9:if(512&i.flags){for(;b<16;){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}if(m!==(65535&i.check)){e.msg="header crc mismatch",i.mode=30;break}m=0,b=0}i.head&&(i.head.hcrc=i.flags>>9&1,i.head.done=!0),e.adler=i.check=0,i.mode=12;break;case 10:for(;b<32;){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}e.adler=i.check=c(m),m=0,b=0,i.mode=11;case 11:if(0===i.havedict)return e.next_out=l,e.avail_out=h,e.next_in=f,e.avail_in=d,i.hold=m,i.bits=b,2;e.adler=i.check=1,i.mode=12;case 12:if(5===t||6===t)break e;case 13:if(i.last){m>>>=7&b,b-=7&b,i.mode=27;break}for(;b<3;){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}switch(i.last=1&m,b-=1,3&(m>>>=1)){case 0:i.mode=14;break;case 1:if(v(i),i.mode=20,6===t){m>>>=2,b-=2;break e}break;case 2:i.mode=17;break;case 3:e.msg="invalid block type",i.mode=30}m>>>=2,b-=2;break;case 14:for(m>>>=7&b,b-=7&b;b<32;){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}if((65535&m)!=(m>>>16^65535)){e.msg="invalid stored block lengths",i.mode=30;break}if(i.length=65535&m,m=0,b=0,i.mode=15,6===t)break e;case 15:i.mode=16;case 16:if(w=i.length){if(w>d&&(w=d),w>h&&(w=h),0===w)break e;n.arraySet(u,p,f,w,l),d-=w,f+=w,h-=w,l+=w,i.length-=w;break}i.mode=12;break;case 17:for(;b<14;){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}if(i.nlen=257+(31&m),m>>>=5,b-=5,i.ndist=1+(31&m),m>>>=5,b-=5,i.ncode=4+(15&m),m>>>=4,b-=4,i.nlen>286||i.ndist>30){e.msg="too many length or distance symbols",i.mode=30;break}i.have=0,i.mode=18;case 18:for(;i.have<i.ncode;){for(;b<3;){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}i.lens[q[i.have++]]=7&m,m>>>=3,b-=3}for(;i.have<19;)i.lens[q[i.have++]]=0;if(i.lencode=i.lendyn,i.lenbits=7,O={bits:i.lenbits},C=s(0,i.lens,0,19,i.lencode,0,i.work,O),i.lenbits=O.bits,C){e.msg="invalid code lengths set",i.mode=30;break}i.have=0,i.mode=19;case 19:for(;i.have<i.nlen+i.ndist;){for(;S=(R=i.lencode[m&(1<<i.lenbits)-1])>>>16&255,A=65535&R,!((E=R>>>24)<=b);){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}if(A<16)m>>>=E,b-=E,i.lens[i.have++]=A;else{if(16===A){for(B=E+2;b<B;){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}if(m>>>=E,b-=E,0===i.have){e.msg="invalid bit length repeat",i.mode=30;break}T=i.lens[i.have-1],w=3+(3&m),m>>>=2,b-=2}else if(17===A){for(B=E+3;b<B;){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}b-=E,T=0,w=3+(7&(m>>>=E)),m>>>=3,b-=3}else{for(B=E+7;b<B;){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}b-=E,T=0,w=11+(127&(m>>>=E)),m>>>=7,b-=7}if(i.have+w>i.nlen+i.ndist){e.msg="invalid bit length repeat",i.mode=30;break}for(;w--;)i.lens[i.have++]=T}}if(30===i.mode)break;if(0===i.lens[256]){e.msg="invalid code -- missing end-of-block",i.mode=30;break}if(i.lenbits=9,O={bits:i.lenbits},C=s(1,i.lens,0,i.nlen,i.lencode,0,i.work,O),i.lenbits=O.bits,C){e.msg="invalid literal/lengths set",i.mode=30;break}if(i.distbits=6,i.distcode=i.distdyn,O={bits:i.distbits},C=s(2,i.lens,i.nlen,i.ndist,i.distcode,0,i.work,O),i.distbits=O.bits,C){e.msg="invalid distances set",i.mode=30;break}if(i.mode=20,6===t)break e;case 20:i.mode=21;case 21:if(d>=6&&h>=258){e.next_out=l,e.avail_out=h,e.next_in=f,e.avail_in=d,i.hold=m,i.bits=b,o(e,x),l=e.next_out,u=e.output,h=e.avail_out,f=e.next_in,p=e.input,d=e.avail_in,m=i.hold,b=i.bits,12===i.mode&&(i.back=-1);break}for(i.back=0;S=(R=i.lencode[m&(1<<i.lenbits)-1])>>>16&255,A=65535&R,!((E=R>>>24)<=b);){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}if(S&&0==(240&S)){for(j=E,M=S,I=A;S=(R=i.lencode[I+((m&(1<<j+M)-1)>>j)])>>>16&255,A=65535&R,!(j+(E=R>>>24)<=b);){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}m>>>=j,b-=j,i.back+=j}if(m>>>=E,b-=E,i.back+=E,i.length=A,0===S){i.mode=26;break}if(32&S){i.back=-1,i.mode=12;break}if(64&S){e.msg="invalid literal/length code",i.mode=30;break}i.extra=15&S,i.mode=22;case 22:if(i.extra){for(B=i.extra;b<B;){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}i.length+=m&(1<<i.extra)-1,m>>>=i.extra,b-=i.extra,i.back+=i.extra}i.was=i.length,i.mode=23;case 23:for(;S=(R=i.distcode[m&(1<<i.distbits)-1])>>>16&255,A=65535&R,!((E=R>>>24)<=b);){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}if(0==(240&S)){for(j=E,M=S,I=A;S=(R=i.distcode[I+((m&(1<<j+M)-1)>>j)])>>>16&255,A=65535&R,!(j+(E=R>>>24)<=b);){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}m>>>=j,b-=j,i.back+=j}if(m>>>=E,b-=E,i.back+=E,64&S){e.msg="invalid distance code",i.mode=30;break}i.offset=A,i.extra=15&S,i.mode=24;case 24:if(i.extra){for(B=i.extra;b<B;){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}i.offset+=m&(1<<i.extra)-1,m>>>=i.extra,b-=i.extra,i.back+=i.extra}if(i.offset>i.dmax){e.msg="invalid distance too far back",i.mode=30;break}i.mode=25;case 25:if(0===h)break e;if(w=x-h,i.offset>w){if((w=i.offset-w)>i.whave&&i.sane){e.msg="invalid distance too far back",i.mode=30;break}w>i.wnext?(w-=i.wnext,_=i.wsize-w):_=i.wnext-w,w>i.length&&(w=i.length),k=i.window}else k=u,_=l-i.offset,w=i.length;w>h&&(w=h),h-=w,i.length-=w;do{u[l++]=k[_++]}while(--w);0===i.length&&(i.mode=21);break;case 26:if(0===h)break e;u[l++]=i.length,h--,i.mode=21;break;case 27:if(i.wrap){for(;b<32;){if(0===d)break e;d--,m|=p[f++]<<b,b+=8}if(x-=h,e.total_out+=x,i.total+=x,x&&(e.adler=i.check=i.flags?r(i.check,u,x,l-x):a(i.check,u,x,l-x)),x=h,(i.flags?m:c(m))!==i.check){e.msg="incorrect data check",i.mode=30;break}m=0,b=0}i.mode=28;case 28:if(i.wrap&&i.flags){for(;b<32;){if(0===d)break e;d--,m+=p[f++]<<b,b+=8}if(m!==(4294967295&i.total)){e.msg="incorrect length check",i.mode=30;break}m=0,b=0}i.mode=29;case 29:C=1;break e;case 30:C=-3;break e;case 31:return-4;case 32:default:return-2}return e.next_out=l,e.avail_out=h,e.next_in=f,e.avail_in=d,i.hold=m,i.bits=b,(i.wsize||x!==e.avail_out&&i.mode<30&&(i.mode<27||4!==t))&&g(e,e.output,e.next_out,x-e.avail_out)?(i.mode=31,-4):(y-=e.avail_in,x-=e.avail_out,e.total_in+=y,e.total_out+=x,i.total+=x,i.wrap&&x&&(e.adler=i.check=i.flags?r(i.check,u,x,e.next_out-x):a(i.check,u,x,e.next_out-x)),e.data_type=i.bits+(i.last?64:0)+(12===i.mode?128:0)+(20===i.mode||15===i.mode?256:0),(0===y&&0===x||4===t)&&0===C&&(C=-5),C)},t.inflateEnd=function(e){if(!e||!e.state)return-2;var t=e.state;return t.window&&(t.window=null),e.state=null,0},t.inflateGetHeader=function(e,t){var i;return e&&e.state?0==(2&(i=e.state).wrap)?-2:(i.head=t,t.done=!1,0):-2},t.inflateSetDictionary=function(e,t){var i,n=t.length;return e&&e.state?0!==(i=e.state).wrap&&11!==i.mode?-2:11===i.mode&&a(1,t,n,0)!==i.check?-3:g(e,t,n,n)?(i.mode=31,-4):(i.havedict=1,0):-2},t.inflateInfo="pako inflate (from Nodeca project)"},function(e,t,i){"use strict";e.exports=function(e,t){var i,n,a,r,o,s,c,p,u,f,l,d,h,m,b,v,g,y,x,w,_,k,E,S,A;i=e.state,n=e.next_in,S=e.input,a=n+(e.avail_in-5),r=e.next_out,A=e.output,o=r-(t-e.avail_out),s=r+(e.avail_out-257),c=i.dmax,p=i.wsize,u=i.whave,f=i.wnext,l=i.window,d=i.hold,h=i.bits,m=i.lencode,b=i.distcode,v=(1<<i.lenbits)-1,g=(1<<i.distbits)-1;e:do{h<15&&(d+=S[n++]<<h,h+=8,d+=S[n++]<<h,h+=8),y=m[d&v];t:for(;;){if(d>>>=x=y>>>24,h-=x,0===(x=y>>>16&255))A[r++]=65535&y;else{if(!(16&x)){if(0==(64&x)){y=m[(65535&y)+(d&(1<<x)-1)];continue t}if(32&x){i.mode=12;break e}e.msg="invalid literal/length code",i.mode=30;break e}w=65535&y,(x&=15)&&(h<x&&(d+=S[n++]<<h,h+=8),w+=d&(1<<x)-1,d>>>=x,h-=x),h<15&&(d+=S[n++]<<h,h+=8,d+=S[n++]<<h,h+=8),y=b[d&g];i:for(;;){if(d>>>=x=y>>>24,h-=x,!(16&(x=y>>>16&255))){if(0==(64&x)){y=b[(65535&y)+(d&(1<<x)-1)];continue i}e.msg="invalid distance code",i.mode=30;break e}if(_=65535&y,h<(x&=15)&&(d+=S[n++]<<h,(h+=8)<x&&(d+=S[n++]<<h,h+=8)),(_+=d&(1<<x)-1)>c){e.msg="invalid distance too far back",i.mode=30;break e}if(d>>>=x,h-=x,_>(x=r-o)){if((x=_-x)>u&&i.sane){e.msg="invalid distance too far back",i.mode=30;break e}if(k=0,E=l,0===f){if(k+=p-x,x<w){w-=x;do{A[r++]=l[k++]}while(--x);k=r-_,E=A}}else if(f<x){if(k+=p+f-x,(x-=f)<w){w-=x;do{A[r++]=l[k++]}while(--x);if(k=0,f<w){w-=x=f;do{A[r++]=l[k++]}while(--x);k=r-_,E=A}}}else if(k+=f-x,x<w){w-=x;do{A[r++]=l[k++]}while(--x);k=r-_,E=A}for(;w>2;)A[r++]=E[k++],A[r++]=E[k++],A[r++]=E[k++],w-=3;w&&(A[r++]=E[k++],w>1&&(A[r++]=E[k++]))}else{k=r-_;do{A[r++]=A[k++],A[r++]=A[k++],A[r++]=A[k++],w-=3}while(w>2);w&&(A[r++]=A[k++],w>1&&(A[r++]=A[k++]))}break}}break}}while(n<a&&r<s);n-=w=h>>3,d&=(1<<(h-=w<<3))-1,e.next_in=n,e.next_out=r,e.avail_in=n<a?a-n+5:5-(n-a),e.avail_out=r<s?s-r+257:257-(r-s),i.hold=d,i.bits=h}},function(e,t,i){"use strict";var n=i(40),a=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],r=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],o=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(e,t,i,c,p,u,f,l){var d,h,m,b,v,g,y,x,w,_=l.bits,k=0,E=0,S=0,A=0,j=0,M=0,I=0,T=0,C=0,O=0,B=null,R=0,z=new n.Buf16(16),q=new n.Buf16(16),P=null,L=0;for(k=0;k<=15;k++)z[k]=0;for(E=0;E<c;E++)z[t[i+E]]++;for(j=_,A=15;A>=1&&0===z[A];A--);if(j>A&&(j=A),0===A)return p[u++]=20971520,p[u++]=20971520,l.bits=1,0;for(S=1;S<A&&0===z[S];S++);for(j<S&&(j=S),T=1,k=1;k<=15;k++)if(T<<=1,(T-=z[k])<0)return-1;if(T>0&&(0===e||1!==A))return-1;for(q[1]=0,k=1;k<15;k++)q[k+1]=q[k]+z[k];for(E=0;E<c;E++)0!==t[i+E]&&(f[q[t[i+E]]++]=E);if(0===e?(B=P=f,g=19):1===e?(B=a,R-=257,P=r,L-=257,g=256):(B=o,P=s,g=-1),O=0,E=0,k=S,v=u,M=j,I=0,m=-1,b=(C=1<<j)-1,1===e&&C>852||2===e&&C>592)return 1;for(;;){y=k-I,f[E]<g?(x=0,w=f[E]):f[E]>g?(x=P[L+f[E]],w=B[R+f[E]]):(x=96,w=0),d=1<<k-I,S=h=1<<M;do{p[v+(O>>I)+(h-=d)]=y<<24|x<<16|w|0}while(0!==h);for(d=1<<k-1;O&d;)d>>=1;if(0!==d?(O&=d-1,O+=d):O=0,E++,0==--z[k]){if(k===A)break;k=t[i+f[E]]}if(k>j&&(O&b)!==m){for(0===I&&(I=j),v+=S,T=1<<(M=k-I);M+I<A&&!((T-=z[M+I])<=0);)M++,T<<=1;if(C+=1<<M,1===e&&C>852||2===e&&C>592)return 1;p[m=O&b]=j<<24|M<<16|v-u|0}}return 0!==O&&(p[v+O]=k-I<<24|64<<16|0),l.bits=j,0}},function(e,t,i){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},function(e,t){
/*!
 * media-typer
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */
var i=/; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u0020-\u007e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g,n=/^[\u0020-\u007e\u0080-\u00ff]+$/,a=/^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/,r=/\\([\u0000-\u007f])/g,o=/([\\"])/g,s=/^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/,c=/^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/,p=/^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;function u(e){var t=String(e);if(a.test(t))return t;if(t.length>0&&!n.test(t))throw new TypeError("invalid parameter value");return'"'+t.replace(o,"\\$1")+'"'}t.format=function(e){if(!e||"object"!=typeof e)throw new TypeError("argument obj is required");var t=e.parameters,i=e.subtype,n=e.suffix,r=e.type;if(!r||!c.test(r))throw new TypeError("invalid type");if(!i||!s.test(i))throw new TypeError("invalid subtype");var o=r+"/"+i;if(n){if(!c.test(n))throw new TypeError("invalid suffix");o+="+"+n}if(t&&"object"==typeof t)for(var p,f=Object.keys(t).sort(),l=0;l<f.length;l++){if(p=f[l],!a.test(p))throw new TypeError("invalid parameter name");o+="; "+p+"="+u(t[p])}return o},t.parse=function(e){if(!e)throw new TypeError("argument string is required");"object"==typeof e&&(e=function(e){if("function"==typeof e.getHeader)return e.getHeader("content-type");if("object"==typeof e.headers)return e.headers&&e.headers["content-type"]}(e));if("string"!=typeof e)throw new TypeError("argument string is required to be a string");var t,n,a,o=e.indexOf(";"),s=function(e){var t=p.exec(e.toLowerCase());if(!t)throw new TypeError("invalid media type");var i,n=t[1],a=t[2],r=a.lastIndexOf("+");-1!==r&&(i=a.substr(r+1),a=a.substr(0,r));return{type:n,subtype:a,suffix:i}}(-1!==o?e.substr(0,o):e),c={};i.lastIndex=o;for(;n=i.exec(e);){if(n.index!==o)throw new TypeError("invalid parameter format");o+=n[0].length,t=n[1].toLowerCase(),'"'===(a=n[2])[0]&&(a=a.substr(1,a.length-2).replace(r,"$1")),c[t]=a}if(-1!==o&&o!==e.length)throw new TypeError("invalid parameter format");return s.parameters=c,s}},function(e,t,i){
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */
e.exports=i(187)},function(e){e.exports=JSON.parse('{"application/1d-interleaved-parityfec":{"source":"iana"},"application/3gpdash-qoe-report+xml":{"source":"iana","compressible":true},"application/3gpp-ims+xml":{"source":"iana","compressible":true},"application/a2l":{"source":"iana"},"application/activemessage":{"source":"iana"},"application/activity+json":{"source":"iana","compressible":true},"application/alto-costmap+json":{"source":"iana","compressible":true},"application/alto-costmapfilter+json":{"source":"iana","compressible":true},"application/alto-directory+json":{"source":"iana","compressible":true},"application/alto-endpointcost+json":{"source":"iana","compressible":true},"application/alto-endpointcostparams+json":{"source":"iana","compressible":true},"application/alto-endpointprop+json":{"source":"iana","compressible":true},"application/alto-endpointpropparams+json":{"source":"iana","compressible":true},"application/alto-error+json":{"source":"iana","compressible":true},"application/alto-networkmap+json":{"source":"iana","compressible":true},"application/alto-networkmapfilter+json":{"source":"iana","compressible":true},"application/aml":{"source":"iana"},"application/andrew-inset":{"source":"iana","extensions":["ez"]},"application/applefile":{"source":"iana"},"application/applixware":{"source":"apache","extensions":["aw"]},"application/atf":{"source":"iana"},"application/atfx":{"source":"iana"},"application/atom+xml":{"source":"iana","compressible":true,"extensions":["atom"]},"application/atomcat+xml":{"source":"iana","compressible":true,"extensions":["atomcat"]},"application/atomdeleted+xml":{"source":"iana","compressible":true,"extensions":["atomdeleted"]},"application/atomicmail":{"source":"iana"},"application/atomsvc+xml":{"source":"iana","compressible":true,"extensions":["atomsvc"]},"application/atsc-dwd+xml":{"source":"iana","compressible":true,"extensions":["dwd"]},"application/atsc-held+xml":{"source":"iana","compressible":true,"extensions":["held"]},"application/atsc-rdt+json":{"source":"iana","compressible":true},"application/atsc-rsat+xml":{"source":"iana","compressible":true,"extensions":["rsat"]},"application/atxml":{"source":"iana"},"application/auth-policy+xml":{"source":"iana","compressible":true},"application/bacnet-xdd+zip":{"source":"iana","compressible":false},"application/batch-smtp":{"source":"iana"},"application/bdoc":{"compressible":false,"extensions":["bdoc"]},"application/beep+xml":{"source":"iana","compressible":true},"application/calendar+json":{"source":"iana","compressible":true},"application/calendar+xml":{"source":"iana","compressible":true,"extensions":["xcs"]},"application/call-completion":{"source":"iana"},"application/cals-1840":{"source":"iana"},"application/cbor":{"source":"iana"},"application/cbor-seq":{"source":"iana"},"application/cccex":{"source":"iana"},"application/ccmp+xml":{"source":"iana","compressible":true},"application/ccxml+xml":{"source":"iana","compressible":true,"extensions":["ccxml"]},"application/cdfx+xml":{"source":"iana","compressible":true,"extensions":["cdfx"]},"application/cdmi-capability":{"source":"iana","extensions":["cdmia"]},"application/cdmi-container":{"source":"iana","extensions":["cdmic"]},"application/cdmi-domain":{"source":"iana","extensions":["cdmid"]},"application/cdmi-object":{"source":"iana","extensions":["cdmio"]},"application/cdmi-queue":{"source":"iana","extensions":["cdmiq"]},"application/cdni":{"source":"iana"},"application/cea":{"source":"iana"},"application/cea-2018+xml":{"source":"iana","compressible":true},"application/cellml+xml":{"source":"iana","compressible":true},"application/cfw":{"source":"iana"},"application/clue+xml":{"source":"iana","compressible":true},"application/clue_info+xml":{"source":"iana","compressible":true},"application/cms":{"source":"iana"},"application/cnrp+xml":{"source":"iana","compressible":true},"application/coap-group+json":{"source":"iana","compressible":true},"application/coap-payload":{"source":"iana"},"application/commonground":{"source":"iana"},"application/conference-info+xml":{"source":"iana","compressible":true},"application/cose":{"source":"iana"},"application/cose-key":{"source":"iana"},"application/cose-key-set":{"source":"iana"},"application/cpl+xml":{"source":"iana","compressible":true},"application/csrattrs":{"source":"iana"},"application/csta+xml":{"source":"iana","compressible":true},"application/cstadata+xml":{"source":"iana","compressible":true},"application/csvm+json":{"source":"iana","compressible":true},"application/cu-seeme":{"source":"apache","extensions":["cu"]},"application/cwt":{"source":"iana"},"application/cybercash":{"source":"iana"},"application/dart":{"compressible":true},"application/dash+xml":{"source":"iana","compressible":true,"extensions":["mpd"]},"application/dashdelta":{"source":"iana"},"application/davmount+xml":{"source":"iana","compressible":true,"extensions":["davmount"]},"application/dca-rft":{"source":"iana"},"application/dcd":{"source":"iana"},"application/dec-dx":{"source":"iana"},"application/dialog-info+xml":{"source":"iana","compressible":true},"application/dicom":{"source":"iana"},"application/dicom+json":{"source":"iana","compressible":true},"application/dicom+xml":{"source":"iana","compressible":true},"application/dii":{"source":"iana"},"application/dit":{"source":"iana"},"application/dns":{"source":"iana"},"application/dns+json":{"source":"iana","compressible":true},"application/dns-message":{"source":"iana"},"application/docbook+xml":{"source":"apache","compressible":true,"extensions":["dbk"]},"application/dskpp+xml":{"source":"iana","compressible":true},"application/dssc+der":{"source":"iana","extensions":["dssc"]},"application/dssc+xml":{"source":"iana","compressible":true,"extensions":["xdssc"]},"application/dvcs":{"source":"iana"},"application/ecmascript":{"source":"iana","compressible":true,"extensions":["ecma","es"]},"application/edi-consent":{"source":"iana"},"application/edi-x12":{"source":"iana","compressible":false},"application/edifact":{"source":"iana","compressible":false},"application/efi":{"source":"iana"},"application/emergencycalldata.comment+xml":{"source":"iana","compressible":true},"application/emergencycalldata.control+xml":{"source":"iana","compressible":true},"application/emergencycalldata.deviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.ecall.msd":{"source":"iana"},"application/emergencycalldata.providerinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.serviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.subscriberinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.veds+xml":{"source":"iana","compressible":true},"application/emma+xml":{"source":"iana","compressible":true,"extensions":["emma"]},"application/emotionml+xml":{"source":"iana","compressible":true,"extensions":["emotionml"]},"application/encaprtp":{"source":"iana"},"application/epp+xml":{"source":"iana","compressible":true},"application/epub+zip":{"source":"iana","compressible":false,"extensions":["epub"]},"application/eshop":{"source":"iana"},"application/exi":{"source":"iana","extensions":["exi"]},"application/expect-ct-report+json":{"source":"iana","compressible":true},"application/fastinfoset":{"source":"iana"},"application/fastsoap":{"source":"iana"},"application/fdt+xml":{"source":"iana","compressible":true,"extensions":["fdt"]},"application/fhir+json":{"source":"iana","compressible":true},"application/fhir+xml":{"source":"iana","compressible":true},"application/fido.trusted-apps+json":{"compressible":true},"application/fits":{"source":"iana"},"application/flexfec":{"source":"iana"},"application/font-sfnt":{"source":"iana"},"application/font-tdpfr":{"source":"iana","extensions":["pfr"]},"application/font-woff":{"source":"iana","compressible":false},"application/framework-attributes+xml":{"source":"iana","compressible":true},"application/geo+json":{"source":"iana","compressible":true,"extensions":["geojson"]},"application/geo+json-seq":{"source":"iana"},"application/geopackage+sqlite3":{"source":"iana"},"application/geoxacml+xml":{"source":"iana","compressible":true},"application/gltf-buffer":{"source":"iana"},"application/gml+xml":{"source":"iana","compressible":true,"extensions":["gml"]},"application/gpx+xml":{"source":"apache","compressible":true,"extensions":["gpx"]},"application/gxf":{"source":"apache","extensions":["gxf"]},"application/gzip":{"source":"iana","compressible":false,"extensions":["gz"]},"application/h224":{"source":"iana"},"application/held+xml":{"source":"iana","compressible":true},"application/hjson":{"extensions":["hjson"]},"application/http":{"source":"iana"},"application/hyperstudio":{"source":"iana","extensions":["stk"]},"application/ibe-key-request+xml":{"source":"iana","compressible":true},"application/ibe-pkg-reply+xml":{"source":"iana","compressible":true},"application/ibe-pp-data":{"source":"iana"},"application/iges":{"source":"iana"},"application/im-iscomposing+xml":{"source":"iana","compressible":true},"application/index":{"source":"iana"},"application/index.cmd":{"source":"iana"},"application/index.obj":{"source":"iana"},"application/index.response":{"source":"iana"},"application/index.vnd":{"source":"iana"},"application/inkml+xml":{"source":"iana","compressible":true,"extensions":["ink","inkml"]},"application/iotp":{"source":"iana"},"application/ipfix":{"source":"iana","extensions":["ipfix"]},"application/ipp":{"source":"iana"},"application/isup":{"source":"iana"},"application/its+xml":{"source":"iana","compressible":true,"extensions":["its"]},"application/java-archive":{"source":"apache","compressible":false,"extensions":["jar","war","ear"]},"application/java-serialized-object":{"source":"apache","compressible":false,"extensions":["ser"]},"application/java-vm":{"source":"apache","compressible":false,"extensions":["class"]},"application/javascript":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},"application/jf2feed+json":{"source":"iana","compressible":true},"application/jose":{"source":"iana"},"application/jose+json":{"source":"iana","compressible":true},"application/jrd+json":{"source":"iana","compressible":true},"application/json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},"application/json-patch+json":{"source":"iana","compressible":true},"application/json-seq":{"source":"iana"},"application/json5":{"extensions":["json5"]},"application/jsonml+json":{"source":"apache","compressible":true,"extensions":["jsonml"]},"application/jwk+json":{"source":"iana","compressible":true},"application/jwk-set+json":{"source":"iana","compressible":true},"application/jwt":{"source":"iana"},"application/kpml-request+xml":{"source":"iana","compressible":true},"application/kpml-response+xml":{"source":"iana","compressible":true},"application/ld+json":{"source":"iana","compressible":true,"extensions":["jsonld"]},"application/lgr+xml":{"source":"iana","compressible":true,"extensions":["lgr"]},"application/link-format":{"source":"iana"},"application/load-control+xml":{"source":"iana","compressible":true},"application/lost+xml":{"source":"iana","compressible":true,"extensions":["lostxml"]},"application/lostsync+xml":{"source":"iana","compressible":true},"application/lxf":{"source":"iana"},"application/mac-binhex40":{"source":"iana","extensions":["hqx"]},"application/mac-compactpro":{"source":"apache","extensions":["cpt"]},"application/macwriteii":{"source":"iana"},"application/mads+xml":{"source":"iana","compressible":true,"extensions":["mads"]},"application/manifest+json":{"charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},"application/marc":{"source":"iana","extensions":["mrc"]},"application/marcxml+xml":{"source":"iana","compressible":true,"extensions":["mrcx"]},"application/mathematica":{"source":"iana","extensions":["ma","nb","mb"]},"application/mathml+xml":{"source":"iana","compressible":true,"extensions":["mathml"]},"application/mathml-content+xml":{"source":"iana","compressible":true},"application/mathml-presentation+xml":{"source":"iana","compressible":true},"application/mbms-associated-procedure-description+xml":{"source":"iana","compressible":true},"application/mbms-deregister+xml":{"source":"iana","compressible":true},"application/mbms-envelope+xml":{"source":"iana","compressible":true},"application/mbms-msk+xml":{"source":"iana","compressible":true},"application/mbms-msk-response+xml":{"source":"iana","compressible":true},"application/mbms-protection-description+xml":{"source":"iana","compressible":true},"application/mbms-reception-report+xml":{"source":"iana","compressible":true},"application/mbms-register+xml":{"source":"iana","compressible":true},"application/mbms-register-response+xml":{"source":"iana","compressible":true},"application/mbms-schedule+xml":{"source":"iana","compressible":true},"application/mbms-user-service-description+xml":{"source":"iana","compressible":true},"application/mbox":{"source":"iana","extensions":["mbox"]},"application/media-policy-dataset+xml":{"source":"iana","compressible":true},"application/media_control+xml":{"source":"iana","compressible":true},"application/mediaservercontrol+xml":{"source":"iana","compressible":true,"extensions":["mscml"]},"application/merge-patch+json":{"source":"iana","compressible":true},"application/metalink+xml":{"source":"apache","compressible":true,"extensions":["metalink"]},"application/metalink4+xml":{"source":"iana","compressible":true,"extensions":["meta4"]},"application/mets+xml":{"source":"iana","compressible":true,"extensions":["mets"]},"application/mf4":{"source":"iana"},"application/mikey":{"source":"iana"},"application/mipc":{"source":"iana"},"application/mmt-aei+xml":{"source":"iana","compressible":true,"extensions":["maei"]},"application/mmt-usd+xml":{"source":"iana","compressible":true,"extensions":["musd"]},"application/mods+xml":{"source":"iana","compressible":true,"extensions":["mods"]},"application/moss-keys":{"source":"iana"},"application/moss-signature":{"source":"iana"},"application/mosskey-data":{"source":"iana"},"application/mosskey-request":{"source":"iana"},"application/mp21":{"source":"iana","extensions":["m21","mp21"]},"application/mp4":{"source":"iana","extensions":["mp4s","m4p"]},"application/mpeg4-generic":{"source":"iana"},"application/mpeg4-iod":{"source":"iana"},"application/mpeg4-iod-xmt":{"source":"iana"},"application/mrb-consumer+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/mrb-publish+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/msc-ivr+xml":{"source":"iana","compressible":true},"application/msc-mixer+xml":{"source":"iana","compressible":true},"application/msword":{"source":"iana","compressible":false,"extensions":["doc","dot"]},"application/mud+json":{"source":"iana","compressible":true},"application/multipart-core":{"source":"iana"},"application/mxf":{"source":"iana","extensions":["mxf"]},"application/n-quads":{"source":"iana","extensions":["nq"]},"application/n-triples":{"source":"iana","extensions":["nt"]},"application/nasdata":{"source":"iana"},"application/news-checkgroups":{"source":"iana"},"application/news-groupinfo":{"source":"iana"},"application/news-transmission":{"source":"iana"},"application/nlsml+xml":{"source":"iana","compressible":true},"application/node":{"source":"iana"},"application/nss":{"source":"iana"},"application/ocsp-request":{"source":"iana"},"application/ocsp-response":{"source":"iana"},"application/octet-stream":{"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{"source":"iana","extensions":["oda"]},"application/odm+xml":{"source":"iana","compressible":true},"application/odx":{"source":"iana"},"application/oebps-package+xml":{"source":"iana","compressible":true,"extensions":["opf"]},"application/ogg":{"source":"iana","compressible":false,"extensions":["ogx"]},"application/omdoc+xml":{"source":"apache","compressible":true,"extensions":["omdoc"]},"application/onenote":{"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},"application/oscore":{"source":"iana"},"application/oxps":{"source":"iana","extensions":["oxps"]},"application/p2p-overlay+xml":{"source":"iana","compressible":true,"extensions":["relo"]},"application/parityfec":{"source":"iana"},"application/passport":{"source":"iana"},"application/patch-ops-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/pdf":{"source":"iana","compressible":false,"extensions":["pdf"]},"application/pdx":{"source":"iana"},"application/pem-certificate-chain":{"source":"iana"},"application/pgp-encrypted":{"source":"iana","compressible":false,"extensions":["pgp"]},"application/pgp-keys":{"source":"iana"},"application/pgp-signature":{"source":"iana","extensions":["asc","sig"]},"application/pics-rules":{"source":"apache","extensions":["prf"]},"application/pidf+xml":{"source":"iana","compressible":true},"application/pidf-diff+xml":{"source":"iana","compressible":true},"application/pkcs10":{"source":"iana","extensions":["p10"]},"application/pkcs12":{"source":"iana"},"application/pkcs7-mime":{"source":"iana","extensions":["p7m","p7c"]},"application/pkcs7-signature":{"source":"iana","extensions":["p7s"]},"application/pkcs8":{"source":"iana","extensions":["p8"]},"application/pkcs8-encrypted":{"source":"iana"},"application/pkix-attr-cert":{"source":"iana","extensions":["ac"]},"application/pkix-cert":{"source":"iana","extensions":["cer"]},"application/pkix-crl":{"source":"iana","extensions":["crl"]},"application/pkix-pkipath":{"source":"iana","extensions":["pkipath"]},"application/pkixcmp":{"source":"iana","extensions":["pki"]},"application/pls+xml":{"source":"iana","compressible":true,"extensions":["pls"]},"application/poc-settings+xml":{"source":"iana","compressible":true},"application/postscript":{"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},"application/ppsp-tracker+json":{"source":"iana","compressible":true},"application/problem+json":{"source":"iana","compressible":true},"application/problem+xml":{"source":"iana","compressible":true},"application/provenance+xml":{"source":"iana","compressible":true,"extensions":["provx"]},"application/prs.alvestrand.titrax-sheet":{"source":"iana"},"application/prs.cww":{"source":"iana","extensions":["cww"]},"application/prs.hpub+zip":{"source":"iana","compressible":false},"application/prs.nprend":{"source":"iana"},"application/prs.plucker":{"source":"iana"},"application/prs.rdf-xml-crypt":{"source":"iana"},"application/prs.xsf+xml":{"source":"iana","compressible":true},"application/pskc+xml":{"source":"iana","compressible":true,"extensions":["pskcxml"]},"application/qsig":{"source":"iana"},"application/raml+yaml":{"compressible":true,"extensions":["raml"]},"application/raptorfec":{"source":"iana"},"application/rdap+json":{"source":"iana","compressible":true},"application/rdf+xml":{"source":"iana","compressible":true,"extensions":["rdf","owl"]},"application/reginfo+xml":{"source":"iana","compressible":true,"extensions":["rif"]},"application/relax-ng-compact-syntax":{"source":"iana","extensions":["rnc"]},"application/remote-printing":{"source":"iana"},"application/reputon+json":{"source":"iana","compressible":true},"application/resource-lists+xml":{"source":"iana","compressible":true,"extensions":["rl"]},"application/resource-lists-diff+xml":{"source":"iana","compressible":true,"extensions":["rld"]},"application/rfc+xml":{"source":"iana","compressible":true},"application/riscos":{"source":"iana"},"application/rlmi+xml":{"source":"iana","compressible":true},"application/rls-services+xml":{"source":"iana","compressible":true,"extensions":["rs"]},"application/route-apd+xml":{"source":"iana","compressible":true,"extensions":["rapd"]},"application/route-s-tsid+xml":{"source":"iana","compressible":true,"extensions":["sls"]},"application/route-usd+xml":{"source":"iana","compressible":true,"extensions":["rusd"]},"application/rpki-ghostbusters":{"source":"iana","extensions":["gbr"]},"application/rpki-manifest":{"source":"iana","extensions":["mft"]},"application/rpki-publication":{"source":"iana"},"application/rpki-roa":{"source":"iana","extensions":["roa"]},"application/rpki-updown":{"source":"iana"},"application/rsd+xml":{"source":"apache","compressible":true,"extensions":["rsd"]},"application/rss+xml":{"source":"apache","compressible":true,"extensions":["rss"]},"application/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"application/rtploopback":{"source":"iana"},"application/rtx":{"source":"iana"},"application/samlassertion+xml":{"source":"iana","compressible":true},"application/samlmetadata+xml":{"source":"iana","compressible":true},"application/sbml+xml":{"source":"iana","compressible":true,"extensions":["sbml"]},"application/scaip+xml":{"source":"iana","compressible":true},"application/scim+json":{"source":"iana","compressible":true},"application/scvp-cv-request":{"source":"iana","extensions":["scq"]},"application/scvp-cv-response":{"source":"iana","extensions":["scs"]},"application/scvp-vp-request":{"source":"iana","extensions":["spq"]},"application/scvp-vp-response":{"source":"iana","extensions":["spp"]},"application/sdp":{"source":"iana","extensions":["sdp"]},"application/secevent+jwt":{"source":"iana"},"application/senml+cbor":{"source":"iana"},"application/senml+json":{"source":"iana","compressible":true},"application/senml+xml":{"source":"iana","compressible":true,"extensions":["senmlx"]},"application/senml-exi":{"source":"iana"},"application/sensml+cbor":{"source":"iana"},"application/sensml+json":{"source":"iana","compressible":true},"application/sensml+xml":{"source":"iana","compressible":true,"extensions":["sensmlx"]},"application/sensml-exi":{"source":"iana"},"application/sep+xml":{"source":"iana","compressible":true},"application/sep-exi":{"source":"iana"},"application/session-info":{"source":"iana"},"application/set-payment":{"source":"iana"},"application/set-payment-initiation":{"source":"iana","extensions":["setpay"]},"application/set-registration":{"source":"iana"},"application/set-registration-initiation":{"source":"iana","extensions":["setreg"]},"application/sgml":{"source":"iana"},"application/sgml-open-catalog":{"source":"iana"},"application/shf+xml":{"source":"iana","compressible":true,"extensions":["shf"]},"application/sieve":{"source":"iana","extensions":["siv","sieve"]},"application/simple-filter+xml":{"source":"iana","compressible":true},"application/simple-message-summary":{"source":"iana"},"application/simplesymbolcontainer":{"source":"iana"},"application/sipc":{"source":"iana"},"application/slate":{"source":"iana"},"application/smil":{"source":"iana"},"application/smil+xml":{"source":"iana","compressible":true,"extensions":["smi","smil"]},"application/smpte336m":{"source":"iana"},"application/soap+fastinfoset":{"source":"iana"},"application/soap+xml":{"source":"iana","compressible":true},"application/sparql-query":{"source":"iana","extensions":["rq"]},"application/sparql-results+xml":{"source":"iana","compressible":true,"extensions":["srx"]},"application/spirits-event+xml":{"source":"iana","compressible":true},"application/sql":{"source":"iana"},"application/srgs":{"source":"iana","extensions":["gram"]},"application/srgs+xml":{"source":"iana","compressible":true,"extensions":["grxml"]},"application/sru+xml":{"source":"iana","compressible":true,"extensions":["sru"]},"application/ssdl+xml":{"source":"apache","compressible":true,"extensions":["ssdl"]},"application/ssml+xml":{"source":"iana","compressible":true,"extensions":["ssml"]},"application/stix+json":{"source":"iana","compressible":true},"application/swid+xml":{"source":"iana","compressible":true,"extensions":["swidtag"]},"application/tamp-apex-update":{"source":"iana"},"application/tamp-apex-update-confirm":{"source":"iana"},"application/tamp-community-update":{"source":"iana"},"application/tamp-community-update-confirm":{"source":"iana"},"application/tamp-error":{"source":"iana"},"application/tamp-sequence-adjust":{"source":"iana"},"application/tamp-sequence-adjust-confirm":{"source":"iana"},"application/tamp-status-query":{"source":"iana"},"application/tamp-status-response":{"source":"iana"},"application/tamp-update":{"source":"iana"},"application/tamp-update-confirm":{"source":"iana"},"application/tar":{"compressible":true},"application/taxii+json":{"source":"iana","compressible":true},"application/tei+xml":{"source":"iana","compressible":true,"extensions":["tei","teicorpus"]},"application/tetra_isi":{"source":"iana"},"application/thraud+xml":{"source":"iana","compressible":true,"extensions":["tfi"]},"application/timestamp-query":{"source":"iana"},"application/timestamp-reply":{"source":"iana"},"application/timestamped-data":{"source":"iana","extensions":["tsd"]},"application/tlsrpt+gzip":{"source":"iana"},"application/tlsrpt+json":{"source":"iana","compressible":true},"application/tnauthlist":{"source":"iana"},"application/toml":{"compressible":true,"extensions":["toml"]},"application/trickle-ice-sdpfrag":{"source":"iana"},"application/trig":{"source":"iana"},"application/ttml+xml":{"source":"iana","compressible":true,"extensions":["ttml"]},"application/tve-trigger":{"source":"iana"},"application/tzif":{"source":"iana"},"application/tzif-leap":{"source":"iana"},"application/ulpfec":{"source":"iana"},"application/urc-grpsheet+xml":{"source":"iana","compressible":true},"application/urc-ressheet+xml":{"source":"iana","compressible":true,"extensions":["rsheet"]},"application/urc-targetdesc+xml":{"source":"iana","compressible":true},"application/urc-uisocketdesc+xml":{"source":"iana","compressible":true},"application/vcard+json":{"source":"iana","compressible":true},"application/vcard+xml":{"source":"iana","compressible":true},"application/vemmi":{"source":"iana"},"application/vividence.scriptfile":{"source":"apache"},"application/vnd.1000minds.decision-model+xml":{"source":"iana","compressible":true,"extensions":["1km"]},"application/vnd.3gpp-prose+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose-pc3ch+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-v2x-local-service-information":{"source":"iana"},"application/vnd.3gpp.access-transfer-events+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.bsf+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gmop+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mc-signalling-ear":{"source":"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-payload":{"source":"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-signalling":{"source":"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-floor-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-signed+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-init-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-transmission-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mid-call+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.pic-bw-large":{"source":"iana","extensions":["plb"]},"application/vnd.3gpp.pic-bw-small":{"source":"iana","extensions":["psb"]},"application/vnd.3gpp.pic-bw-var":{"source":"iana","extensions":["pvb"]},"application/vnd.3gpp.sms":{"source":"iana"},"application/vnd.3gpp.sms+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-ext+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.state-and-event-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ussd+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.bcmcsinfo+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.sms":{"source":"iana"},"application/vnd.3gpp2.tcap":{"source":"iana","extensions":["tcap"]},"application/vnd.3lightssoftware.imagescal":{"source":"iana"},"application/vnd.3m.post-it-notes":{"source":"iana","extensions":["pwn"]},"application/vnd.accpac.simply.aso":{"source":"iana","extensions":["aso"]},"application/vnd.accpac.simply.imp":{"source":"iana","extensions":["imp"]},"application/vnd.acucobol":{"source":"iana","extensions":["acu"]},"application/vnd.acucorp":{"source":"iana","extensions":["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{"source":"apache","compressible":false,"extensions":["air"]},"application/vnd.adobe.flash.movie":{"source":"iana"},"application/vnd.adobe.formscentral.fcdt":{"source":"iana","extensions":["fcdt"]},"application/vnd.adobe.fxp":{"source":"iana","extensions":["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{"source":"iana"},"application/vnd.adobe.xdp+xml":{"source":"iana","compressible":true,"extensions":["xdp"]},"application/vnd.adobe.xfdf":{"source":"iana","extensions":["xfdf"]},"application/vnd.aether.imp":{"source":"iana"},"application/vnd.afpc.afplinedata":{"source":"iana"},"application/vnd.afpc.afplinedata-pagedef":{"source":"iana"},"application/vnd.afpc.foca-charset":{"source":"iana"},"application/vnd.afpc.foca-codedfont":{"source":"iana"},"application/vnd.afpc.foca-codepage":{"source":"iana"},"application/vnd.afpc.modca":{"source":"iana"},"application/vnd.afpc.modca-formdef":{"source":"iana"},"application/vnd.afpc.modca-mediummap":{"source":"iana"},"application/vnd.afpc.modca-objectcontainer":{"source":"iana"},"application/vnd.afpc.modca-overlay":{"source":"iana"},"application/vnd.afpc.modca-pagesegment":{"source":"iana"},"application/vnd.ah-barcode":{"source":"iana"},"application/vnd.ahead.space":{"source":"iana","extensions":["ahead"]},"application/vnd.airzip.filesecure.azf":{"source":"iana","extensions":["azf"]},"application/vnd.airzip.filesecure.azs":{"source":"iana","extensions":["azs"]},"application/vnd.amadeus+json":{"source":"iana","compressible":true},"application/vnd.amazon.ebook":{"source":"apache","extensions":["azw"]},"application/vnd.amazon.mobi8-ebook":{"source":"iana"},"application/vnd.americandynamics.acc":{"source":"iana","extensions":["acc"]},"application/vnd.amiga.ami":{"source":"iana","extensions":["ami"]},"application/vnd.amundsen.maze+xml":{"source":"iana","compressible":true},"application/vnd.android.ota":{"source":"iana"},"application/vnd.android.package-archive":{"source":"apache","compressible":false,"extensions":["apk"]},"application/vnd.anki":{"source":"iana"},"application/vnd.anser-web-certificate-issue-initiation":{"source":"iana","extensions":["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{"source":"apache","extensions":["fti"]},"application/vnd.antix.game-component":{"source":"iana","extensions":["atx"]},"application/vnd.apache.thrift.binary":{"source":"iana"},"application/vnd.apache.thrift.compact":{"source":"iana"},"application/vnd.apache.thrift.json":{"source":"iana"},"application/vnd.api+json":{"source":"iana","compressible":true},"application/vnd.aplextor.warrp+json":{"source":"iana","compressible":true},"application/vnd.apothekende.reservation+json":{"source":"iana","compressible":true},"application/vnd.apple.installer+xml":{"source":"iana","compressible":true,"extensions":["mpkg"]},"application/vnd.apple.keynote":{"source":"iana","extensions":["keynote"]},"application/vnd.apple.mpegurl":{"source":"iana","extensions":["m3u8"]},"application/vnd.apple.numbers":{"source":"iana","extensions":["numbers"]},"application/vnd.apple.pages":{"source":"iana","extensions":["pages"]},"application/vnd.apple.pkpass":{"compressible":false,"extensions":["pkpass"]},"application/vnd.arastra.swi":{"source":"iana"},"application/vnd.aristanetworks.swi":{"source":"iana","extensions":["swi"]},"application/vnd.artisan+json":{"source":"iana","compressible":true},"application/vnd.artsquare":{"source":"iana"},"application/vnd.astraea-software.iota":{"source":"iana","extensions":["iota"]},"application/vnd.audiograph":{"source":"iana","extensions":["aep"]},"application/vnd.autopackage":{"source":"iana"},"application/vnd.avalon+json":{"source":"iana","compressible":true},"application/vnd.avistar+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmml+xml":{"source":"iana","compressible":true,"extensions":["bmml"]},"application/vnd.balsamiq.bmpr":{"source":"iana"},"application/vnd.banana-accounting":{"source":"iana"},"application/vnd.bbf.usp.error":{"source":"iana"},"application/vnd.bbf.usp.msg":{"source":"iana"},"application/vnd.bbf.usp.msg+json":{"source":"iana","compressible":true},"application/vnd.bekitzur-stech+json":{"source":"iana","compressible":true},"application/vnd.bint.med-content":{"source":"iana"},"application/vnd.biopax.rdf+xml":{"source":"iana","compressible":true},"application/vnd.blink-idb-value-wrapper":{"source":"iana"},"application/vnd.blueice.multipass":{"source":"iana","extensions":["mpm"]},"application/vnd.bluetooth.ep.oob":{"source":"iana"},"application/vnd.bluetooth.le.oob":{"source":"iana"},"application/vnd.bmi":{"source":"iana","extensions":["bmi"]},"application/vnd.bpf":{"source":"iana"},"application/vnd.bpf3":{"source":"iana"},"application/vnd.businessobjects":{"source":"iana","extensions":["rep"]},"application/vnd.byu.uapi+json":{"source":"iana","compressible":true},"application/vnd.cab-jscript":{"source":"iana"},"application/vnd.canon-cpdl":{"source":"iana"},"application/vnd.canon-lips":{"source":"iana"},"application/vnd.capasystems-pg+json":{"source":"iana","compressible":true},"application/vnd.cendio.thinlinc.clientconf":{"source":"iana"},"application/vnd.century-systems.tcp_stream":{"source":"iana"},"application/vnd.chemdraw+xml":{"source":"iana","compressible":true,"extensions":["cdxml"]},"application/vnd.chess-pgn":{"source":"iana"},"application/vnd.chipnuts.karaoke-mmd":{"source":"iana","extensions":["mmd"]},"application/vnd.ciedi":{"source":"iana"},"application/vnd.cinderella":{"source":"iana","extensions":["cdy"]},"application/vnd.cirpack.isdn-ext":{"source":"iana"},"application/vnd.citationstyles.style+xml":{"source":"iana","compressible":true,"extensions":["csl"]},"application/vnd.claymore":{"source":"iana","extensions":["cla"]},"application/vnd.cloanto.rp9":{"source":"iana","extensions":["rp9"]},"application/vnd.clonk.c4group":{"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{"source":"iana","extensions":["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{"source":"iana","extensions":["c11amz"]},"application/vnd.coffeescript":{"source":"iana"},"application/vnd.collabio.xodocuments.document":{"source":"iana"},"application/vnd.collabio.xodocuments.document-template":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation-template":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{"source":"iana"},"application/vnd.collection+json":{"source":"iana","compressible":true},"application/vnd.collection.doc+json":{"source":"iana","compressible":true},"application/vnd.collection.next+json":{"source":"iana","compressible":true},"application/vnd.comicbook+zip":{"source":"iana","compressible":false},"application/vnd.comicbook-rar":{"source":"iana"},"application/vnd.commerce-battelle":{"source":"iana"},"application/vnd.commonspace":{"source":"iana","extensions":["csp"]},"application/vnd.contact.cmsg":{"source":"iana","extensions":["cdbcmsg"]},"application/vnd.coreos.ignition+json":{"source":"iana","compressible":true},"application/vnd.cosmocaller":{"source":"iana","extensions":["cmc"]},"application/vnd.crick.clicker":{"source":"iana","extensions":["clkx"]},"application/vnd.crick.clicker.keyboard":{"source":"iana","extensions":["clkk"]},"application/vnd.crick.clicker.palette":{"source":"iana","extensions":["clkp"]},"application/vnd.crick.clicker.template":{"source":"iana","extensions":["clkt"]},"application/vnd.crick.clicker.wordbank":{"source":"iana","extensions":["clkw"]},"application/vnd.criticaltools.wbs+xml":{"source":"iana","compressible":true,"extensions":["wbs"]},"application/vnd.cryptii.pipe+json":{"source":"iana","compressible":true},"application/vnd.crypto-shade-file":{"source":"iana"},"application/vnd.ctc-posml":{"source":"iana","extensions":["pml"]},"application/vnd.ctct.ws+xml":{"source":"iana","compressible":true},"application/vnd.cups-pdf":{"source":"iana"},"application/vnd.cups-postscript":{"source":"iana"},"application/vnd.cups-ppd":{"source":"iana","extensions":["ppd"]},"application/vnd.cups-raster":{"source":"iana"},"application/vnd.cups-raw":{"source":"iana"},"application/vnd.curl":{"source":"iana"},"application/vnd.curl.car":{"source":"apache","extensions":["car"]},"application/vnd.curl.pcurl":{"source":"apache","extensions":["pcurl"]},"application/vnd.cyan.dean.root+xml":{"source":"iana","compressible":true},"application/vnd.cybank":{"source":"iana"},"application/vnd.d2l.coursepackage1p0+zip":{"source":"iana","compressible":false},"application/vnd.dart":{"source":"iana","compressible":true,"extensions":["dart"]},"application/vnd.data-vision.rdz":{"source":"iana","extensions":["rdz"]},"application/vnd.datapackage+json":{"source":"iana","compressible":true},"application/vnd.dataresource+json":{"source":"iana","compressible":true},"application/vnd.debian.binary-package":{"source":"iana"},"application/vnd.dece.data":{"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{"source":"iana","compressible":true,"extensions":["uvt","uvvt"]},"application/vnd.dece.unspecified":{"source":"iana","extensions":["uvx","uvvx"]},"application/vnd.dece.zip":{"source":"iana","extensions":["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{"source":"iana","extensions":["fe_launch"]},"application/vnd.desmume.movie":{"source":"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{"source":"iana"},"application/vnd.dm.delegation+xml":{"source":"iana","compressible":true},"application/vnd.dna":{"source":"iana","extensions":["dna"]},"application/vnd.document+json":{"source":"iana","compressible":true},"application/vnd.dolby.mlp":{"source":"apache","extensions":["mlp"]},"application/vnd.dolby.mobile.1":{"source":"iana"},"application/vnd.dolby.mobile.2":{"source":"iana"},"application/vnd.doremir.scorecloud-binary-document":{"source":"iana"},"application/vnd.dpgraph":{"source":"iana","extensions":["dpg"]},"application/vnd.dreamfactory":{"source":"iana","extensions":["dfac"]},"application/vnd.drive+json":{"source":"iana","compressible":true},"application/vnd.ds-keypoint":{"source":"apache","extensions":["kpxx"]},"application/vnd.dtg.local":{"source":"iana"},"application/vnd.dtg.local.flash":{"source":"iana"},"application/vnd.dtg.local.html":{"source":"iana"},"application/vnd.dvb.ait":{"source":"iana","extensions":["ait"]},"application/vnd.dvb.dvbj":{"source":"iana"},"application/vnd.dvb.esgcontainer":{"source":"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess2":{"source":"iana"},"application/vnd.dvb.ipdcesgpdd":{"source":"iana"},"application/vnd.dvb.ipdcroaming":{"source":"iana"},"application/vnd.dvb.iptv.alfec-base":{"source":"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{"source":"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-container+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-generic+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-msglist+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-request+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-response+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-init+xml":{"source":"iana","compressible":true},"application/vnd.dvb.pfr":{"source":"iana"},"application/vnd.dvb.service":{"source":"iana","extensions":["svc"]},"application/vnd.dxr":{"source":"iana"},"application/vnd.dynageo":{"source":"iana","extensions":["geo"]},"application/vnd.dzr":{"source":"iana"},"application/vnd.easykaraoke.cdgdownload":{"source":"iana"},"application/vnd.ecdis-update":{"source":"iana"},"application/vnd.ecip.rlp":{"source":"iana"},"application/vnd.ecowin.chart":{"source":"iana","extensions":["mag"]},"application/vnd.ecowin.filerequest":{"source":"iana"},"application/vnd.ecowin.fileupdate":{"source":"iana"},"application/vnd.ecowin.series":{"source":"iana"},"application/vnd.ecowin.seriesrequest":{"source":"iana"},"application/vnd.ecowin.seriesupdate":{"source":"iana"},"application/vnd.efi.img":{"source":"iana"},"application/vnd.efi.iso":{"source":"iana"},"application/vnd.emclient.accessrequest+xml":{"source":"iana","compressible":true},"application/vnd.enliven":{"source":"iana","extensions":["nml"]},"application/vnd.enphase.envoy":{"source":"iana"},"application/vnd.eprints.data+xml":{"source":"iana","compressible":true},"application/vnd.epson.esf":{"source":"iana","extensions":["esf"]},"application/vnd.epson.msf":{"source":"iana","extensions":["msf"]},"application/vnd.epson.quickanime":{"source":"iana","extensions":["qam"]},"application/vnd.epson.salt":{"source":"iana","extensions":["slt"]},"application/vnd.epson.ssf":{"source":"iana","extensions":["ssf"]},"application/vnd.ericsson.quickcall":{"source":"iana"},"application/vnd.espass-espass+zip":{"source":"iana","compressible":false},"application/vnd.eszigno3+xml":{"source":"iana","compressible":true,"extensions":["es3","et3"]},"application/vnd.etsi.aoc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.asic-e+zip":{"source":"iana","compressible":false},"application/vnd.etsi.asic-s+zip":{"source":"iana","compressible":false},"application/vnd.etsi.cug+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvcommand+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-bc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-cod+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-npvr+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvservice+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsync+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvueprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mcid+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mheg5":{"source":"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{"source":"iana","compressible":true},"application/vnd.etsi.pstn+xml":{"source":"iana","compressible":true},"application/vnd.etsi.sci+xml":{"source":"iana","compressible":true},"application/vnd.etsi.simservs+xml":{"source":"iana","compressible":true},"application/vnd.etsi.timestamp-token":{"source":"iana"},"application/vnd.etsi.tsl+xml":{"source":"iana","compressible":true},"application/vnd.etsi.tsl.der":{"source":"iana"},"application/vnd.eudora.data":{"source":"iana"},"application/vnd.evolv.ecig.profile":{"source":"iana"},"application/vnd.evolv.ecig.settings":{"source":"iana"},"application/vnd.evolv.ecig.theme":{"source":"iana"},"application/vnd.exstream-empower+zip":{"source":"iana","compressible":false},"application/vnd.exstream-package":{"source":"iana"},"application/vnd.ezpix-album":{"source":"iana","extensions":["ez2"]},"application/vnd.ezpix-package":{"source":"iana","extensions":["ez3"]},"application/vnd.f-secure.mobile":{"source":"iana"},"application/vnd.fastcopy-disk-image":{"source":"iana"},"application/vnd.fdf":{"source":"iana","extensions":["fdf"]},"application/vnd.fdsn.mseed":{"source":"iana","extensions":["mseed"]},"application/vnd.fdsn.seed":{"source":"iana","extensions":["seed","dataless"]},"application/vnd.ffsns":{"source":"iana"},"application/vnd.ficlab.flb+zip":{"source":"iana","compressible":false},"application/vnd.filmit.zfc":{"source":"iana"},"application/vnd.fints":{"source":"iana"},"application/vnd.firemonkeys.cloudcell":{"source":"iana"},"application/vnd.flographit":{"source":"iana","extensions":["gph"]},"application/vnd.fluxtime.clip":{"source":"iana","extensions":["ftc"]},"application/vnd.font-fontforge-sfd":{"source":"iana"},"application/vnd.framemaker":{"source":"iana","extensions":["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{"source":"iana","extensions":["fnc"]},"application/vnd.frogans.ltf":{"source":"iana","extensions":["ltf"]},"application/vnd.fsc.weblaunch":{"source":"iana","extensions":["fsc"]},"application/vnd.fujitsu.oasys":{"source":"iana","extensions":["oas"]},"application/vnd.fujitsu.oasys2":{"source":"iana","extensions":["oa2"]},"application/vnd.fujitsu.oasys3":{"source":"iana","extensions":["oa3"]},"application/vnd.fujitsu.oasysgp":{"source":"iana","extensions":["fg5"]},"application/vnd.fujitsu.oasysprs":{"source":"iana","extensions":["bh2"]},"application/vnd.fujixerox.art-ex":{"source":"iana"},"application/vnd.fujixerox.art4":{"source":"iana"},"application/vnd.fujixerox.ddd":{"source":"iana","extensions":["ddd"]},"application/vnd.fujixerox.docuworks":{"source":"iana","extensions":["xdw"]},"application/vnd.fujixerox.docuworks.binder":{"source":"iana","extensions":["xbd"]},"application/vnd.fujixerox.docuworks.container":{"source":"iana"},"application/vnd.fujixerox.hbpl":{"source":"iana"},"application/vnd.fut-misnet":{"source":"iana"},"application/vnd.futoin+cbor":{"source":"iana"},"application/vnd.futoin+json":{"source":"iana","compressible":true},"application/vnd.fuzzysheet":{"source":"iana","extensions":["fzs"]},"application/vnd.genomatix.tuxedo":{"source":"iana","extensions":["txd"]},"application/vnd.gentics.grd+json":{"source":"iana","compressible":true},"application/vnd.geo+json":{"source":"iana","compressible":true},"application/vnd.geocube+xml":{"source":"iana","compressible":true},"application/vnd.geogebra.file":{"source":"iana","extensions":["ggb"]},"application/vnd.geogebra.tool":{"source":"iana","extensions":["ggt"]},"application/vnd.geometry-explorer":{"source":"iana","extensions":["gex","gre"]},"application/vnd.geonext":{"source":"iana","extensions":["gxt"]},"application/vnd.geoplan":{"source":"iana","extensions":["g2w"]},"application/vnd.geospace":{"source":"iana","extensions":["g3w"]},"application/vnd.gerber":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt-response":{"source":"iana"},"application/vnd.gmx":{"source":"iana","extensions":["gmx"]},"application/vnd.google-apps.document":{"compressible":false,"extensions":["gdoc"]},"application/vnd.google-apps.presentation":{"compressible":false,"extensions":["gslides"]},"application/vnd.google-apps.spreadsheet":{"compressible":false,"extensions":["gsheet"]},"application/vnd.google-earth.kml+xml":{"source":"iana","compressible":true,"extensions":["kml"]},"application/vnd.google-earth.kmz":{"source":"iana","compressible":false,"extensions":["kmz"]},"application/vnd.gov.sk.e-form+xml":{"source":"iana","compressible":true},"application/vnd.gov.sk.e-form+zip":{"source":"iana","compressible":false},"application/vnd.gov.sk.xmldatacontainer+xml":{"source":"iana","compressible":true},"application/vnd.grafeq":{"source":"iana","extensions":["gqf","gqs"]},"application/vnd.gridmp":{"source":"iana"},"application/vnd.groove-account":{"source":"iana","extensions":["gac"]},"application/vnd.groove-help":{"source":"iana","extensions":["ghf"]},"application/vnd.groove-identity-message":{"source":"iana","extensions":["gim"]},"application/vnd.groove-injector":{"source":"iana","extensions":["grv"]},"application/vnd.groove-tool-message":{"source":"iana","extensions":["gtm"]},"application/vnd.groove-tool-template":{"source":"iana","extensions":["tpl"]},"application/vnd.groove-vcard":{"source":"iana","extensions":["vcg"]},"application/vnd.hal+json":{"source":"iana","compressible":true},"application/vnd.hal+xml":{"source":"iana","compressible":true,"extensions":["hal"]},"application/vnd.handheld-entertainment+xml":{"source":"iana","compressible":true,"extensions":["zmm"]},"application/vnd.hbci":{"source":"iana","extensions":["hbci"]},"application/vnd.hc+json":{"source":"iana","compressible":true},"application/vnd.hcl-bireports":{"source":"iana"},"application/vnd.hdt":{"source":"iana"},"application/vnd.heroku+json":{"source":"iana","compressible":true},"application/vnd.hhe.lesson-player":{"source":"iana","extensions":["les"]},"application/vnd.hp-hpgl":{"source":"iana","extensions":["hpgl"]},"application/vnd.hp-hpid":{"source":"iana","extensions":["hpid"]},"application/vnd.hp-hps":{"source":"iana","extensions":["hps"]},"application/vnd.hp-jlyt":{"source":"iana","extensions":["jlt"]},"application/vnd.hp-pcl":{"source":"iana","extensions":["pcl"]},"application/vnd.hp-pclxl":{"source":"iana","extensions":["pclxl"]},"application/vnd.httphone":{"source":"iana"},"application/vnd.hydrostatix.sof-data":{"source":"iana","extensions":["sfd-hdstx"]},"application/vnd.hyper+json":{"source":"iana","compressible":true},"application/vnd.hyper-item+json":{"source":"iana","compressible":true},"application/vnd.hyperdrive+json":{"source":"iana","compressible":true},"application/vnd.hzn-3d-crossword":{"source":"iana"},"application/vnd.ibm.afplinedata":{"source":"iana"},"application/vnd.ibm.electronic-media":{"source":"iana"},"application/vnd.ibm.minipay":{"source":"iana","extensions":["mpy"]},"application/vnd.ibm.modcap":{"source":"iana","extensions":["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{"source":"iana","extensions":["irm"]},"application/vnd.ibm.secure-container":{"source":"iana","extensions":["sc"]},"application/vnd.iccprofile":{"source":"iana","extensions":["icc","icm"]},"application/vnd.ieee.1905":{"source":"iana"},"application/vnd.igloader":{"source":"iana","extensions":["igl"]},"application/vnd.imagemeter.folder+zip":{"source":"iana","compressible":false},"application/vnd.imagemeter.image+zip":{"source":"iana","compressible":false},"application/vnd.immervision-ivp":{"source":"iana","extensions":["ivp"]},"application/vnd.immervision-ivu":{"source":"iana","extensions":["ivu"]},"application/vnd.ims.imsccv1p1":{"source":"iana"},"application/vnd.ims.imsccv1p2":{"source":"iana"},"application/vnd.ims.imsccv1p3":{"source":"iana"},"application/vnd.ims.lis.v2.result+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy.id+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{"source":"iana","compressible":true},"application/vnd.informedcontrol.rms+xml":{"source":"iana","compressible":true},"application/vnd.informix-visionary":{"source":"iana"},"application/vnd.infotech.project":{"source":"iana"},"application/vnd.infotech.project+xml":{"source":"iana","compressible":true},"application/vnd.innopath.wamp.notification":{"source":"iana"},"application/vnd.insors.igm":{"source":"iana","extensions":["igm"]},"application/vnd.intercon.formnet":{"source":"iana","extensions":["xpw","xpx"]},"application/vnd.intergeo":{"source":"iana","extensions":["i2g"]},"application/vnd.intertrust.digibox":{"source":"iana"},"application/vnd.intertrust.nncp":{"source":"iana"},"application/vnd.intu.qbo":{"source":"iana","extensions":["qbo"]},"application/vnd.intu.qfx":{"source":"iana","extensions":["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.conceptitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.knowledgeitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsmessage+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.packageitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.planningitem+xml":{"source":"iana","compressible":true},"application/vnd.ipunplugged.rcprofile":{"source":"iana","extensions":["rcprofile"]},"application/vnd.irepository.package+xml":{"source":"iana","compressible":true,"extensions":["irp"]},"application/vnd.is-xpr":{"source":"iana","extensions":["xpr"]},"application/vnd.isac.fcs":{"source":"iana","extensions":["fcs"]},"application/vnd.iso11783-10+zip":{"source":"iana","compressible":false},"application/vnd.jam":{"source":"iana","extensions":["jam"]},"application/vnd.japannet-directory-service":{"source":"iana"},"application/vnd.japannet-jpnstore-wakeup":{"source":"iana"},"application/vnd.japannet-payment-wakeup":{"source":"iana"},"application/vnd.japannet-registration":{"source":"iana"},"application/vnd.japannet-registration-wakeup":{"source":"iana"},"application/vnd.japannet-setstore-wakeup":{"source":"iana"},"application/vnd.japannet-verification":{"source":"iana"},"application/vnd.japannet-verification-wakeup":{"source":"iana"},"application/vnd.jcp.javame.midlet-rms":{"source":"iana","extensions":["rms"]},"application/vnd.jisp":{"source":"iana","extensions":["jisp"]},"application/vnd.joost.joda-archive":{"source":"iana","extensions":["joda"]},"application/vnd.jsk.isdn-ngn":{"source":"iana"},"application/vnd.kahootz":{"source":"iana","extensions":["ktz","ktr"]},"application/vnd.kde.karbon":{"source":"iana","extensions":["karbon"]},"application/vnd.kde.kchart":{"source":"iana","extensions":["chrt"]},"application/vnd.kde.kformula":{"source":"iana","extensions":["kfo"]},"application/vnd.kde.kivio":{"source":"iana","extensions":["flw"]},"application/vnd.kde.kontour":{"source":"iana","extensions":["kon"]},"application/vnd.kde.kpresenter":{"source":"iana","extensions":["kpr","kpt"]},"application/vnd.kde.kspread":{"source":"iana","extensions":["ksp"]},"application/vnd.kde.kword":{"source":"iana","extensions":["kwd","kwt"]},"application/vnd.kenameaapp":{"source":"iana","extensions":["htke"]},"application/vnd.kidspiration":{"source":"iana","extensions":["kia"]},"application/vnd.kinar":{"source":"iana","extensions":["kne","knp"]},"application/vnd.koan":{"source":"iana","extensions":["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{"source":"iana","extensions":["sse"]},"application/vnd.las":{"source":"iana"},"application/vnd.las.las+json":{"source":"iana","compressible":true},"application/vnd.las.las+xml":{"source":"iana","compressible":true,"extensions":["lasxml"]},"application/vnd.laszip":{"source":"iana"},"application/vnd.leap+json":{"source":"iana","compressible":true},"application/vnd.liberty-request+xml":{"source":"iana","compressible":true},"application/vnd.llamagraphics.life-balance.desktop":{"source":"iana","extensions":["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{"source":"iana","compressible":true,"extensions":["lbe"]},"application/vnd.logipipe.circuit+zip":{"source":"iana","compressible":false},"application/vnd.loom":{"source":"iana"},"application/vnd.lotus-1-2-3":{"source":"iana","extensions":["123"]},"application/vnd.lotus-approach":{"source":"iana","extensions":["apr"]},"application/vnd.lotus-freelance":{"source":"iana","extensions":["pre"]},"application/vnd.lotus-notes":{"source":"iana","extensions":["nsf"]},"application/vnd.lotus-organizer":{"source":"iana","extensions":["org"]},"application/vnd.lotus-screencam":{"source":"iana","extensions":["scm"]},"application/vnd.lotus-wordpro":{"source":"iana","extensions":["lwp"]},"application/vnd.macports.portpkg":{"source":"iana","extensions":["portpkg"]},"application/vnd.mapbox-vector-tile":{"source":"iana"},"application/vnd.marlin.drm.actiontoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.conftoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.license+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.mdcf":{"source":"iana"},"application/vnd.mason+json":{"source":"iana","compressible":true},"application/vnd.maxmind.maxmind-db":{"source":"iana"},"application/vnd.mcd":{"source":"iana","extensions":["mcd"]},"application/vnd.medcalcdata":{"source":"iana","extensions":["mc1"]},"application/vnd.mediastation.cdkey":{"source":"iana","extensions":["cdkey"]},"application/vnd.meridian-slingshot":{"source":"iana"},"application/vnd.mfer":{"source":"iana","extensions":["mwf"]},"application/vnd.mfmp":{"source":"iana","extensions":["mfm"]},"application/vnd.micro+json":{"source":"iana","compressible":true},"application/vnd.micrografx.flo":{"source":"iana","extensions":["flo"]},"application/vnd.micrografx.igx":{"source":"iana","extensions":["igx"]},"application/vnd.microsoft.portable-executable":{"source":"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{"source":"iana"},"application/vnd.miele+json":{"source":"iana","compressible":true},"application/vnd.mif":{"source":"iana","extensions":["mif"]},"application/vnd.minisoft-hp3000-save":{"source":"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{"source":"iana"},"application/vnd.mobius.daf":{"source":"iana","extensions":["daf"]},"application/vnd.mobius.dis":{"source":"iana","extensions":["dis"]},"application/vnd.mobius.mbk":{"source":"iana","extensions":["mbk"]},"application/vnd.mobius.mqy":{"source":"iana","extensions":["mqy"]},"application/vnd.mobius.msl":{"source":"iana","extensions":["msl"]},"application/vnd.mobius.plc":{"source":"iana","extensions":["plc"]},"application/vnd.mobius.txf":{"source":"iana","extensions":["txf"]},"application/vnd.mophun.application":{"source":"iana","extensions":["mpn"]},"application/vnd.mophun.certificate":{"source":"iana","extensions":["mpc"]},"application/vnd.motorola.flexsuite":{"source":"iana"},"application/vnd.motorola.flexsuite.adsi":{"source":"iana"},"application/vnd.motorola.flexsuite.fis":{"source":"iana"},"application/vnd.motorola.flexsuite.gotap":{"source":"iana"},"application/vnd.motorola.flexsuite.kmr":{"source":"iana"},"application/vnd.motorola.flexsuite.ttc":{"source":"iana"},"application/vnd.motorola.flexsuite.wem":{"source":"iana"},"application/vnd.motorola.iprm":{"source":"iana"},"application/vnd.mozilla.xul+xml":{"source":"iana","compressible":true,"extensions":["xul"]},"application/vnd.ms-3mfdocument":{"source":"iana"},"application/vnd.ms-artgalry":{"source":"iana","extensions":["cil"]},"application/vnd.ms-asf":{"source":"iana"},"application/vnd.ms-cab-compressed":{"source":"iana","extensions":["cab"]},"application/vnd.ms-color.iccprofile":{"source":"apache"},"application/vnd.ms-excel":{"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{"source":"iana","extensions":["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{"source":"iana","extensions":["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{"source":"iana","extensions":["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{"source":"iana","extensions":["xltm"]},"application/vnd.ms-fontobject":{"source":"iana","compressible":true,"extensions":["eot"]},"application/vnd.ms-htmlhelp":{"source":"iana","extensions":["chm"]},"application/vnd.ms-ims":{"source":"iana","extensions":["ims"]},"application/vnd.ms-lrm":{"source":"iana","extensions":["lrm"]},"application/vnd.ms-office.activex+xml":{"source":"iana","compressible":true},"application/vnd.ms-officetheme":{"source":"iana","extensions":["thmx"]},"application/vnd.ms-opentype":{"source":"apache","compressible":true},"application/vnd.ms-outlook":{"compressible":false,"extensions":["msg"]},"application/vnd.ms-package.obfuscated-opentype":{"source":"apache"},"application/vnd.ms-pki.seccat":{"source":"apache","extensions":["cat"]},"application/vnd.ms-pki.stl":{"source":"apache","extensions":["stl"]},"application/vnd.ms-playready.initiator+xml":{"source":"iana","compressible":true},"application/vnd.ms-powerpoint":{"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{"source":"iana","extensions":["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{"source":"iana","extensions":["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{"source":"iana","extensions":["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{"source":"iana","extensions":["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{"source":"iana","extensions":["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{"source":"iana","compressible":true},"application/vnd.ms-printing.printticket+xml":{"source":"apache","compressible":true},"application/vnd.ms-printschematicket+xml":{"source":"iana","compressible":true},"application/vnd.ms-project":{"source":"iana","extensions":["mpp","mpt"]},"application/vnd.ms-tnef":{"source":"iana"},"application/vnd.ms-windows.devicepairing":{"source":"iana"},"application/vnd.ms-windows.nwprinting.oob":{"source":"iana"},"application/vnd.ms-windows.printerpairing":{"source":"iana"},"application/vnd.ms-windows.wsd.oob":{"source":"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.lic-resp":{"source":"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.meter-resp":{"source":"iana"},"application/vnd.ms-word.document.macroenabled.12":{"source":"iana","extensions":["docm"]},"application/vnd.ms-word.template.macroenabled.12":{"source":"iana","extensions":["dotm"]},"application/vnd.ms-works":{"source":"iana","extensions":["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{"source":"iana","extensions":["wpl"]},"application/vnd.ms-xpsdocument":{"source":"iana","compressible":false,"extensions":["xps"]},"application/vnd.msa-disk-image":{"source":"iana"},"application/vnd.mseq":{"source":"iana","extensions":["mseq"]},"application/vnd.msign":{"source":"iana"},"application/vnd.multiad.creator":{"source":"iana"},"application/vnd.multiad.creator.cif":{"source":"iana"},"application/vnd.music-niff":{"source":"iana"},"application/vnd.musician":{"source":"iana","extensions":["mus"]},"application/vnd.muvee.style":{"source":"iana","extensions":["msty"]},"application/vnd.mynfc":{"source":"iana","extensions":["taglet"]},"application/vnd.ncd.control":{"source":"iana"},"application/vnd.ncd.reference":{"source":"iana"},"application/vnd.nearst.inv+json":{"source":"iana","compressible":true},"application/vnd.nervana":{"source":"iana"},"application/vnd.netfpx":{"source":"iana"},"application/vnd.neurolanguage.nlu":{"source":"iana","extensions":["nlu"]},"application/vnd.nimn":{"source":"iana"},"application/vnd.nintendo.nitro.rom":{"source":"iana"},"application/vnd.nintendo.snes.rom":{"source":"iana"},"application/vnd.nitf":{"source":"iana","extensions":["ntf","nitf"]},"application/vnd.noblenet-directory":{"source":"iana","extensions":["nnd"]},"application/vnd.noblenet-sealer":{"source":"iana","extensions":["nns"]},"application/vnd.noblenet-web":{"source":"iana","extensions":["nnw"]},"application/vnd.nokia.catalogs":{"source":"iana"},"application/vnd.nokia.conml+wbxml":{"source":"iana"},"application/vnd.nokia.conml+xml":{"source":"iana","compressible":true},"application/vnd.nokia.iptv.config+xml":{"source":"iana","compressible":true},"application/vnd.nokia.isds-radio-presets":{"source":"iana"},"application/vnd.nokia.landmark+wbxml":{"source":"iana"},"application/vnd.nokia.landmark+xml":{"source":"iana","compressible":true},"application/vnd.nokia.landmarkcollection+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.ac+xml":{"source":"iana","compressible":true,"extensions":["ac"]},"application/vnd.nokia.n-gage.data":{"source":"iana","extensions":["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{"source":"iana","extensions":["n-gage"]},"application/vnd.nokia.ncd":{"source":"iana"},"application/vnd.nokia.pcd+wbxml":{"source":"iana"},"application/vnd.nokia.pcd+xml":{"source":"iana","compressible":true},"application/vnd.nokia.radio-preset":{"source":"iana","extensions":["rpst"]},"application/vnd.nokia.radio-presets":{"source":"iana","extensions":["rpss"]},"application/vnd.novadigm.edm":{"source":"iana","extensions":["edm"]},"application/vnd.novadigm.edx":{"source":"iana","extensions":["edx"]},"application/vnd.novadigm.ext":{"source":"iana","extensions":["ext"]},"application/vnd.ntt-local.content-share":{"source":"iana"},"application/vnd.ntt-local.file-transfer":{"source":"iana"},"application/vnd.ntt-local.ogw_remote-access":{"source":"iana"},"application/vnd.ntt-local.sip-ta_remote":{"source":"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{"source":"iana"},"application/vnd.oasis.opendocument.chart":{"source":"iana","extensions":["odc"]},"application/vnd.oasis.opendocument.chart-template":{"source":"iana","extensions":["otc"]},"application/vnd.oasis.opendocument.database":{"source":"iana","extensions":["odb"]},"application/vnd.oasis.opendocument.formula":{"source":"iana","extensions":["odf"]},"application/vnd.oasis.opendocument.formula-template":{"source":"iana","extensions":["odft"]},"application/vnd.oasis.opendocument.graphics":{"source":"iana","compressible":false,"extensions":["odg"]},"application/vnd.oasis.opendocument.graphics-template":{"source":"iana","extensions":["otg"]},"application/vnd.oasis.opendocument.image":{"source":"iana","extensions":["odi"]},"application/vnd.oasis.opendocument.image-template":{"source":"iana","extensions":["oti"]},"application/vnd.oasis.opendocument.presentation":{"source":"iana","compressible":false,"extensions":["odp"]},"application/vnd.oasis.opendocument.presentation-template":{"source":"iana","extensions":["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{"source":"iana","compressible":false,"extensions":["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{"source":"iana","extensions":["ots"]},"application/vnd.oasis.opendocument.text":{"source":"iana","compressible":false,"extensions":["odt"]},"application/vnd.oasis.opendocument.text-master":{"source":"iana","extensions":["odm"]},"application/vnd.oasis.opendocument.text-template":{"source":"iana","extensions":["ott"]},"application/vnd.oasis.opendocument.text-web":{"source":"iana","extensions":["oth"]},"application/vnd.obn":{"source":"iana"},"application/vnd.ocf+cbor":{"source":"iana"},"application/vnd.oftn.l10n+json":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessdownload+xml":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessstreaming+xml":{"source":"iana","compressible":true},"application/vnd.oipf.cspg-hexbinary":{"source":"iana"},"application/vnd.oipf.dae.svg+xml":{"source":"iana","compressible":true},"application/vnd.oipf.dae.xhtml+xml":{"source":"iana","compressible":true},"application/vnd.oipf.mippvcontrolmessage+xml":{"source":"iana","compressible":true},"application/vnd.oipf.pae.gem":{"source":"iana"},"application/vnd.oipf.spdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.oipf.spdlist+xml":{"source":"iana","compressible":true},"application/vnd.oipf.ueprofile+xml":{"source":"iana","compressible":true},"application/vnd.oipf.userprofile+xml":{"source":"iana","compressible":true},"application/vnd.olpc-sugar":{"source":"iana","extensions":["xo"]},"application/vnd.oma-scws-config":{"source":"iana"},"application/vnd.oma-scws-http-request":{"source":"iana"},"application/vnd.oma-scws-http-response":{"source":"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.drm-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.imd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.ltkm":{"source":"iana"},"application/vnd.oma.bcast.notification+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.provisioningtrigger":{"source":"iana"},"application/vnd.oma.bcast.sgboot":{"source":"iana"},"application/vnd.oma.bcast.sgdd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sgdu":{"source":"iana"},"application/vnd.oma.bcast.simple-symbol-container":{"source":"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sprov+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.stkm":{"source":"iana"},"application/vnd.oma.cab-address-book+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-feature-handler+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-pcc+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-subs-invite+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-user-prefs+xml":{"source":"iana","compressible":true},"application/vnd.oma.dcd":{"source":"iana"},"application/vnd.oma.dcdc":{"source":"iana"},"application/vnd.oma.dd2+xml":{"source":"iana","compressible":true,"extensions":["dd2"]},"application/vnd.oma.drm.risd+xml":{"source":"iana","compressible":true},"application/vnd.oma.group-usage-list+xml":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+json":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+tlv":{"source":"iana"},"application/vnd.oma.pal+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.detailed-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.final-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.groups+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.invocation-descriptor+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.optimized-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.push":{"source":"iana"},"application/vnd.oma.scidm.messages+xml":{"source":"iana","compressible":true},"application/vnd.oma.xcap-directory+xml":{"source":"iana","compressible":true},"application/vnd.omads-email+xml":{"source":"iana","compressible":true},"application/vnd.omads-file+xml":{"source":"iana","compressible":true},"application/vnd.omads-folder+xml":{"source":"iana","compressible":true},"application/vnd.omaloc-supl-init":{"source":"iana"},"application/vnd.onepager":{"source":"iana"},"application/vnd.onepagertamp":{"source":"iana"},"application/vnd.onepagertamx":{"source":"iana"},"application/vnd.onepagertat":{"source":"iana"},"application/vnd.onepagertatp":{"source":"iana"},"application/vnd.onepagertatx":{"source":"iana"},"application/vnd.openblox.game+xml":{"source":"iana","compressible":true,"extensions":["obgx"]},"application/vnd.openblox.game-binary":{"source":"iana"},"application/vnd.openeye.oeb":{"source":"iana"},"application/vnd.openofficeorg.extension":{"source":"apache","extensions":["oxt"]},"application/vnd.openstreetmap.data+xml":{"source":"iana","compressible":true,"extensions":["osm"]},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawing+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{"source":"iana","compressible":false,"extensions":["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slide":{"source":"iana","extensions":["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{"source":"iana","extensions":["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.template":{"source":"iana","extensions":["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{"source":"iana","compressible":false,"extensions":["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{"source":"iana","extensions":["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.theme+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.vmldrawing":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{"source":"iana","compressible":false,"extensions":["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{"source":"iana","extensions":["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.core-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.relationships+xml":{"source":"iana","compressible":true},"application/vnd.oracle.resource+json":{"source":"iana","compressible":true},"application/vnd.orange.indata":{"source":"iana"},"application/vnd.osa.netdeploy":{"source":"iana"},"application/vnd.osgeo.mapguide.package":{"source":"iana","extensions":["mgp"]},"application/vnd.osgi.bundle":{"source":"iana"},"application/vnd.osgi.dp":{"source":"iana","extensions":["dp"]},"application/vnd.osgi.subsystem":{"source":"iana","extensions":["esa"]},"application/vnd.otps.ct-kip+xml":{"source":"iana","compressible":true},"application/vnd.oxli.countgraph":{"source":"iana"},"application/vnd.pagerduty+json":{"source":"iana","compressible":true},"application/vnd.palm":{"source":"iana","extensions":["pdb","pqa","oprc"]},"application/vnd.panoply":{"source":"iana"},"application/vnd.paos.xml":{"source":"iana"},"application/vnd.patentdive":{"source":"iana"},"application/vnd.patientecommsdoc":{"source":"iana"},"application/vnd.pawaafile":{"source":"iana","extensions":["paw"]},"application/vnd.pcos":{"source":"iana"},"application/vnd.pg.format":{"source":"iana","extensions":["str"]},"application/vnd.pg.osasli":{"source":"iana","extensions":["ei6"]},"application/vnd.piaccess.application-licence":{"source":"iana"},"application/vnd.picsel":{"source":"iana","extensions":["efif"]},"application/vnd.pmi.widget":{"source":"iana","extensions":["wg"]},"application/vnd.poc.group-advertisement+xml":{"source":"iana","compressible":true},"application/vnd.pocketlearn":{"source":"iana","extensions":["plf"]},"application/vnd.powerbuilder6":{"source":"iana","extensions":["pbd"]},"application/vnd.powerbuilder6-s":{"source":"iana"},"application/vnd.powerbuilder7":{"source":"iana"},"application/vnd.powerbuilder7-s":{"source":"iana"},"application/vnd.powerbuilder75":{"source":"iana"},"application/vnd.powerbuilder75-s":{"source":"iana"},"application/vnd.preminet":{"source":"iana"},"application/vnd.previewsystems.box":{"source":"iana","extensions":["box"]},"application/vnd.proteus.magazine":{"source":"iana","extensions":["mgz"]},"application/vnd.psfs":{"source":"iana"},"application/vnd.publishare-delta-tree":{"source":"iana","extensions":["qps"]},"application/vnd.pvi.ptid1":{"source":"iana","extensions":["ptid"]},"application/vnd.pwg-multiplexed":{"source":"iana"},"application/vnd.pwg-xhtml-print+xml":{"source":"iana","compressible":true},"application/vnd.qualcomm.brew-app-res":{"source":"iana"},"application/vnd.quarantainenet":{"source":"iana"},"application/vnd.quark.quarkxpress":{"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{"source":"iana"},"application/vnd.radisys.moml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conn+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-stream+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-base+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-detect+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-group+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-speech+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-transform+xml":{"source":"iana","compressible":true},"application/vnd.rainstor.data":{"source":"iana"},"application/vnd.rapid":{"source":"iana"},"application/vnd.rar":{"source":"iana"},"application/vnd.realvnc.bed":{"source":"iana","extensions":["bed"]},"application/vnd.recordare.musicxml":{"source":"iana","extensions":["mxl"]},"application/vnd.recordare.musicxml+xml":{"source":"iana","compressible":true,"extensions":["musicxml"]},"application/vnd.renlearn.rlprint":{"source":"iana"},"application/vnd.restful+json":{"source":"iana","compressible":true},"application/vnd.rig.cryptonote":{"source":"iana","extensions":["cryptonote"]},"application/vnd.rim.cod":{"source":"apache","extensions":["cod"]},"application/vnd.rn-realmedia":{"source":"apache","extensions":["rm"]},"application/vnd.rn-realmedia-vbr":{"source":"apache","extensions":["rmvb"]},"application/vnd.route66.link66+xml":{"source":"iana","compressible":true,"extensions":["link66"]},"application/vnd.rs-274x":{"source":"iana"},"application/vnd.ruckus.download":{"source":"iana"},"application/vnd.s3sms":{"source":"iana"},"application/vnd.sailingtracker.track":{"source":"iana","extensions":["st"]},"application/vnd.sbm.cid":{"source":"iana"},"application/vnd.sbm.mid2":{"source":"iana"},"application/vnd.scribus":{"source":"iana"},"application/vnd.sealed.3df":{"source":"iana"},"application/vnd.sealed.csf":{"source":"iana"},"application/vnd.sealed.doc":{"source":"iana"},"application/vnd.sealed.eml":{"source":"iana"},"application/vnd.sealed.mht":{"source":"iana"},"application/vnd.sealed.net":{"source":"iana"},"application/vnd.sealed.ppt":{"source":"iana"},"application/vnd.sealed.tiff":{"source":"iana"},"application/vnd.sealed.xls":{"source":"iana"},"application/vnd.sealedmedia.softseal.html":{"source":"iana"},"application/vnd.sealedmedia.softseal.pdf":{"source":"iana"},"application/vnd.seemail":{"source":"iana","extensions":["see"]},"application/vnd.sema":{"source":"iana","extensions":["sema"]},"application/vnd.semd":{"source":"iana","extensions":["semd"]},"application/vnd.semf":{"source":"iana","extensions":["semf"]},"application/vnd.shade-save-file":{"source":"iana"},"application/vnd.shana.informed.formdata":{"source":"iana","extensions":["ifm"]},"application/vnd.shana.informed.formtemplate":{"source":"iana","extensions":["itp"]},"application/vnd.shana.informed.interchange":{"source":"iana","extensions":["iif"]},"application/vnd.shana.informed.package":{"source":"iana","extensions":["ipk"]},"application/vnd.shootproof+json":{"source":"iana","compressible":true},"application/vnd.shopkick+json":{"source":"iana","compressible":true},"application/vnd.sigrok.session":{"source":"iana"},"application/vnd.simtech-mindmapper":{"source":"iana","extensions":["twd","twds"]},"application/vnd.siren+json":{"source":"iana","compressible":true},"application/vnd.smaf":{"source":"iana","extensions":["mmf"]},"application/vnd.smart.notebook":{"source":"iana"},"application/vnd.smart.teacher":{"source":"iana","extensions":["teacher"]},"application/vnd.software602.filler.form+xml":{"source":"iana","compressible":true,"extensions":["fo"]},"application/vnd.software602.filler.form-xml-zip":{"source":"iana"},"application/vnd.solent.sdkm+xml":{"source":"iana","compressible":true,"extensions":["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{"source":"iana","extensions":["dxp"]},"application/vnd.spotfire.sfs":{"source":"iana","extensions":["sfs"]},"application/vnd.sqlite3":{"source":"iana"},"application/vnd.sss-cod":{"source":"iana"},"application/vnd.sss-dtf":{"source":"iana"},"application/vnd.sss-ntf":{"source":"iana"},"application/vnd.stardivision.calc":{"source":"apache","extensions":["sdc"]},"application/vnd.stardivision.draw":{"source":"apache","extensions":["sda"]},"application/vnd.stardivision.impress":{"source":"apache","extensions":["sdd"]},"application/vnd.stardivision.math":{"source":"apache","extensions":["smf"]},"application/vnd.stardivision.writer":{"source":"apache","extensions":["sdw","vor"]},"application/vnd.stardivision.writer-global":{"source":"apache","extensions":["sgl"]},"application/vnd.stepmania.package":{"source":"iana","extensions":["smzip"]},"application/vnd.stepmania.stepchart":{"source":"iana","extensions":["sm"]},"application/vnd.street-stream":{"source":"iana"},"application/vnd.sun.wadl+xml":{"source":"iana","compressible":true,"extensions":["wadl"]},"application/vnd.sun.xml.calc":{"source":"apache","extensions":["sxc"]},"application/vnd.sun.xml.calc.template":{"source":"apache","extensions":["stc"]},"application/vnd.sun.xml.draw":{"source":"apache","extensions":["sxd"]},"application/vnd.sun.xml.draw.template":{"source":"apache","extensions":["std"]},"application/vnd.sun.xml.impress":{"source":"apache","extensions":["sxi"]},"application/vnd.sun.xml.impress.template":{"source":"apache","extensions":["sti"]},"application/vnd.sun.xml.math":{"source":"apache","extensions":["sxm"]},"application/vnd.sun.xml.writer":{"source":"apache","extensions":["sxw"]},"application/vnd.sun.xml.writer.global":{"source":"apache","extensions":["sxg"]},"application/vnd.sun.xml.writer.template":{"source":"apache","extensions":["stw"]},"application/vnd.sus-calendar":{"source":"iana","extensions":["sus","susp"]},"application/vnd.svd":{"source":"iana","extensions":["svd"]},"application/vnd.swiftview-ics":{"source":"iana"},"application/vnd.symbian.install":{"source":"apache","extensions":["sis","sisx"]},"application/vnd.syncml+xml":{"source":"iana","compressible":true,"extensions":["xsm"]},"application/vnd.syncml.dm+wbxml":{"source":"iana","extensions":["bdm"]},"application/vnd.syncml.dm+xml":{"source":"iana","compressible":true,"extensions":["xdm"]},"application/vnd.syncml.dm.notification":{"source":"iana"},"application/vnd.syncml.dmddf+wbxml":{"source":"iana"},"application/vnd.syncml.dmddf+xml":{"source":"iana","compressible":true,"extensions":["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{"source":"iana"},"application/vnd.syncml.dmtnds+xml":{"source":"iana","compressible":true},"application/vnd.syncml.ds.notification":{"source":"iana"},"application/vnd.tableschema+json":{"source":"iana","compressible":true},"application/vnd.tao.intent-module-archive":{"source":"iana","extensions":["tao"]},"application/vnd.tcpdump.pcap":{"source":"iana","extensions":["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{"source":"iana","compressible":true},"application/vnd.tmd.mediaflex.api+xml":{"source":"iana","compressible":true},"application/vnd.tml":{"source":"iana"},"application/vnd.tmobile-livetv":{"source":"iana","extensions":["tmo"]},"application/vnd.tri.onesource":{"source":"iana"},"application/vnd.trid.tpt":{"source":"iana","extensions":["tpt"]},"application/vnd.triscape.mxs":{"source":"iana","extensions":["mxs"]},"application/vnd.trueapp":{"source":"iana","extensions":["tra"]},"application/vnd.truedoc":{"source":"iana"},"application/vnd.ubisoft.webplayer":{"source":"iana"},"application/vnd.ufdl":{"source":"iana","extensions":["ufd","ufdl"]},"application/vnd.uiq.theme":{"source":"iana","extensions":["utz"]},"application/vnd.umajin":{"source":"iana","extensions":["umj"]},"application/vnd.unity":{"source":"iana","extensions":["unityweb"]},"application/vnd.uoml+xml":{"source":"iana","compressible":true,"extensions":["uoml"]},"application/vnd.uplanet.alert":{"source":"iana"},"application/vnd.uplanet.alert-wbxml":{"source":"iana"},"application/vnd.uplanet.bearer-choice":{"source":"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{"source":"iana"},"application/vnd.uplanet.cacheop":{"source":"iana"},"application/vnd.uplanet.cacheop-wbxml":{"source":"iana"},"application/vnd.uplanet.channel":{"source":"iana"},"application/vnd.uplanet.channel-wbxml":{"source":"iana"},"application/vnd.uplanet.list":{"source":"iana"},"application/vnd.uplanet.list-wbxml":{"source":"iana"},"application/vnd.uplanet.listcmd":{"source":"iana"},"application/vnd.uplanet.listcmd-wbxml":{"source":"iana"},"application/vnd.uplanet.signal":{"source":"iana"},"application/vnd.uri-map":{"source":"iana"},"application/vnd.valve.source.material":{"source":"iana"},"application/vnd.vcx":{"source":"iana","extensions":["vcx"]},"application/vnd.vd-study":{"source":"iana"},"application/vnd.vectorworks":{"source":"iana"},"application/vnd.vel+json":{"source":"iana","compressible":true},"application/vnd.verimatrix.vcas":{"source":"iana"},"application/vnd.veryant.thin":{"source":"iana"},"application/vnd.ves.encrypted":{"source":"iana"},"application/vnd.vidsoft.vidconference":{"source":"iana"},"application/vnd.visio":{"source":"iana","extensions":["vsd","vst","vss","vsw"]},"application/vnd.visionary":{"source":"iana","extensions":["vis"]},"application/vnd.vividence.scriptfile":{"source":"iana"},"application/vnd.vsf":{"source":"iana","extensions":["vsf"]},"application/vnd.wap.sic":{"source":"iana"},"application/vnd.wap.slc":{"source":"iana"},"application/vnd.wap.wbxml":{"source":"iana","extensions":["wbxml"]},"application/vnd.wap.wmlc":{"source":"iana","extensions":["wmlc"]},"application/vnd.wap.wmlscriptc":{"source":"iana","extensions":["wmlsc"]},"application/vnd.webturbo":{"source":"iana","extensions":["wtb"]},"application/vnd.wfa.p2p":{"source":"iana"},"application/vnd.wfa.wsc":{"source":"iana"},"application/vnd.windows.devicepairing":{"source":"iana"},"application/vnd.wmc":{"source":"iana"},"application/vnd.wmf.bootstrap":{"source":"iana"},"application/vnd.wolfram.mathematica":{"source":"iana"},"application/vnd.wolfram.mathematica.package":{"source":"iana"},"application/vnd.wolfram.player":{"source":"iana","extensions":["nbp"]},"application/vnd.wordperfect":{"source":"iana","extensions":["wpd"]},"application/vnd.wqd":{"source":"iana","extensions":["wqd"]},"application/vnd.wrq-hp3000-labelled":{"source":"iana"},"application/vnd.wt.stf":{"source":"iana","extensions":["stf"]},"application/vnd.wv.csp+wbxml":{"source":"iana"},"application/vnd.wv.csp+xml":{"source":"iana","compressible":true},"application/vnd.wv.ssp+xml":{"source":"iana","compressible":true},"application/vnd.xacml+json":{"source":"iana","compressible":true},"application/vnd.xara":{"source":"iana","extensions":["xar"]},"application/vnd.xfdl":{"source":"iana","extensions":["xfdl"]},"application/vnd.xfdl.webform":{"source":"iana"},"application/vnd.xmi+xml":{"source":"iana","compressible":true},"application/vnd.xmpie.cpkg":{"source":"iana"},"application/vnd.xmpie.dpkg":{"source":"iana"},"application/vnd.xmpie.plan":{"source":"iana"},"application/vnd.xmpie.ppkg":{"source":"iana"},"application/vnd.xmpie.xlim":{"source":"iana"},"application/vnd.yamaha.hv-dic":{"source":"iana","extensions":["hvd"]},"application/vnd.yamaha.hv-script":{"source":"iana","extensions":["hvs"]},"application/vnd.yamaha.hv-voice":{"source":"iana","extensions":["hvp"]},"application/vnd.yamaha.openscoreformat":{"source":"iana","extensions":["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{"source":"iana","compressible":true,"extensions":["osfpvg"]},"application/vnd.yamaha.remote-setup":{"source":"iana"},"application/vnd.yamaha.smaf-audio":{"source":"iana","extensions":["saf"]},"application/vnd.yamaha.smaf-phrase":{"source":"iana","extensions":["spf"]},"application/vnd.yamaha.through-ngn":{"source":"iana"},"application/vnd.yamaha.tunnel-udpencap":{"source":"iana"},"application/vnd.yaoweme":{"source":"iana"},"application/vnd.yellowriver-custom-menu":{"source":"iana","extensions":["cmp"]},"application/vnd.youtube.yt":{"source":"iana"},"application/vnd.zul":{"source":"iana","extensions":["zir","zirz"]},"application/vnd.zzazz.deck+xml":{"source":"iana","compressible":true,"extensions":["zaz"]},"application/voicexml+xml":{"source":"iana","compressible":true,"extensions":["vxml"]},"application/voucher-cms+json":{"source":"iana","compressible":true},"application/vq-rtcpxr":{"source":"iana"},"application/wasm":{"compressible":true,"extensions":["wasm"]},"application/watcherinfo+xml":{"source":"iana","compressible":true},"application/webpush-options+json":{"source":"iana","compressible":true},"application/whoispp-query":{"source":"iana"},"application/whoispp-response":{"source":"iana"},"application/widget":{"source":"iana","extensions":["wgt"]},"application/winhlp":{"source":"apache","extensions":["hlp"]},"application/wita":{"source":"iana"},"application/wordperfect5.1":{"source":"iana"},"application/wsdl+xml":{"source":"iana","compressible":true,"extensions":["wsdl"]},"application/wspolicy+xml":{"source":"iana","compressible":true,"extensions":["wspolicy"]},"application/x-7z-compressed":{"source":"apache","compressible":false,"extensions":["7z"]},"application/x-abiword":{"source":"apache","extensions":["abw"]},"application/x-ace-compressed":{"source":"apache","extensions":["ace"]},"application/x-amf":{"source":"apache"},"application/x-apple-diskimage":{"source":"apache","extensions":["dmg"]},"application/x-arj":{"compressible":false,"extensions":["arj"]},"application/x-authorware-bin":{"source":"apache","extensions":["aab","x32","u32","vox"]},"application/x-authorware-map":{"source":"apache","extensions":["aam"]},"application/x-authorware-seg":{"source":"apache","extensions":["aas"]},"application/x-bcpio":{"source":"apache","extensions":["bcpio"]},"application/x-bdoc":{"compressible":false,"extensions":["bdoc"]},"application/x-bittorrent":{"source":"apache","extensions":["torrent"]},"application/x-blorb":{"source":"apache","extensions":["blb","blorb"]},"application/x-bzip":{"source":"apache","compressible":false,"extensions":["bz"]},"application/x-bzip2":{"source":"apache","compressible":false,"extensions":["bz2","boz"]},"application/x-cbr":{"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{"source":"apache","extensions":["vcd"]},"application/x-cfs-compressed":{"source":"apache","extensions":["cfs"]},"application/x-chat":{"source":"apache","extensions":["chat"]},"application/x-chess-pgn":{"source":"apache","extensions":["pgn"]},"application/x-chrome-extension":{"extensions":["crx"]},"application/x-cocoa":{"source":"nginx","extensions":["cco"]},"application/x-compress":{"source":"apache"},"application/x-conference":{"source":"apache","extensions":["nsc"]},"application/x-cpio":{"source":"apache","extensions":["cpio"]},"application/x-csh":{"source":"apache","extensions":["csh"]},"application/x-deb":{"compressible":false},"application/x-debian-package":{"source":"apache","extensions":["deb","udeb"]},"application/x-dgc-compressed":{"source":"apache","extensions":["dgc"]},"application/x-director":{"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{"source":"apache","extensions":["wad"]},"application/x-dtbncx+xml":{"source":"apache","compressible":true,"extensions":["ncx"]},"application/x-dtbook+xml":{"source":"apache","compressible":true,"extensions":["dtb"]},"application/x-dtbresource+xml":{"source":"apache","compressible":true,"extensions":["res"]},"application/x-dvi":{"source":"apache","compressible":false,"extensions":["dvi"]},"application/x-envoy":{"source":"apache","extensions":["evy"]},"application/x-eva":{"source":"apache","extensions":["eva"]},"application/x-font-bdf":{"source":"apache","extensions":["bdf"]},"application/x-font-dos":{"source":"apache"},"application/x-font-framemaker":{"source":"apache"},"application/x-font-ghostscript":{"source":"apache","extensions":["gsf"]},"application/x-font-libgrx":{"source":"apache"},"application/x-font-linux-psf":{"source":"apache","extensions":["psf"]},"application/x-font-pcf":{"source":"apache","extensions":["pcf"]},"application/x-font-snf":{"source":"apache","extensions":["snf"]},"application/x-font-speedo":{"source":"apache"},"application/x-font-sunos-news":{"source":"apache"},"application/x-font-type1":{"source":"apache","extensions":["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{"source":"apache"},"application/x-freearc":{"source":"apache","extensions":["arc"]},"application/x-futuresplash":{"source":"apache","extensions":["spl"]},"application/x-gca-compressed":{"source":"apache","extensions":["gca"]},"application/x-glulx":{"source":"apache","extensions":["ulx"]},"application/x-gnumeric":{"source":"apache","extensions":["gnumeric"]},"application/x-gramps-xml":{"source":"apache","extensions":["gramps"]},"application/x-gtar":{"source":"apache","extensions":["gtar"]},"application/x-gzip":{"source":"apache"},"application/x-hdf":{"source":"apache","extensions":["hdf"]},"application/x-httpd-php":{"compressible":true,"extensions":["php"]},"application/x-install-instructions":{"source":"apache","extensions":["install"]},"application/x-iso9660-image":{"source":"apache","extensions":["iso"]},"application/x-java-archive-diff":{"source":"nginx","extensions":["jardiff"]},"application/x-java-jnlp-file":{"source":"apache","compressible":false,"extensions":["jnlp"]},"application/x-javascript":{"compressible":true},"application/x-keepass2":{"extensions":["kdbx"]},"application/x-latex":{"source":"apache","compressible":false,"extensions":["latex"]},"application/x-lua-bytecode":{"extensions":["luac"]},"application/x-lzh-compressed":{"source":"apache","extensions":["lzh","lha"]},"application/x-makeself":{"source":"nginx","extensions":["run"]},"application/x-mie":{"source":"apache","extensions":["mie"]},"application/x-mobipocket-ebook":{"source":"apache","extensions":["prc","mobi"]},"application/x-mpegurl":{"compressible":false},"application/x-ms-application":{"source":"apache","extensions":["application"]},"application/x-ms-shortcut":{"source":"apache","extensions":["lnk"]},"application/x-ms-wmd":{"source":"apache","extensions":["wmd"]},"application/x-ms-wmz":{"source":"apache","extensions":["wmz"]},"application/x-ms-xbap":{"source":"apache","extensions":["xbap"]},"application/x-msaccess":{"source":"apache","extensions":["mdb"]},"application/x-msbinder":{"source":"apache","extensions":["obd"]},"application/x-mscardfile":{"source":"apache","extensions":["crd"]},"application/x-msclip":{"source":"apache","extensions":["clp"]},"application/x-msdos-program":{"extensions":["exe"]},"application/x-msdownload":{"source":"apache","extensions":["exe","dll","com","bat","msi"]},"application/x-msmediaview":{"source":"apache","extensions":["mvb","m13","m14"]},"application/x-msmetafile":{"source":"apache","extensions":["wmf","wmz","emf","emz"]},"application/x-msmoney":{"source":"apache","extensions":["mny"]},"application/x-mspublisher":{"source":"apache","extensions":["pub"]},"application/x-msschedule":{"source":"apache","extensions":["scd"]},"application/x-msterminal":{"source":"apache","extensions":["trm"]},"application/x-mswrite":{"source":"apache","extensions":["wri"]},"application/x-netcdf":{"source":"apache","extensions":["nc","cdf"]},"application/x-ns-proxy-autoconfig":{"compressible":true,"extensions":["pac"]},"application/x-nzb":{"source":"apache","extensions":["nzb"]},"application/x-perl":{"source":"nginx","extensions":["pl","pm"]},"application/x-pilot":{"source":"nginx","extensions":["prc","pdb"]},"application/x-pkcs12":{"source":"apache","compressible":false,"extensions":["p12","pfx"]},"application/x-pkcs7-certificates":{"source":"apache","extensions":["p7b","spc"]},"application/x-pkcs7-certreqresp":{"source":"apache","extensions":["p7r"]},"application/x-rar-compressed":{"source":"apache","compressible":false,"extensions":["rar"]},"application/x-redhat-package-manager":{"source":"nginx","extensions":["rpm"]},"application/x-research-info-systems":{"source":"apache","extensions":["ris"]},"application/x-sea":{"source":"nginx","extensions":["sea"]},"application/x-sh":{"source":"apache","compressible":true,"extensions":["sh"]},"application/x-shar":{"source":"apache","extensions":["shar"]},"application/x-shockwave-flash":{"source":"apache","compressible":false,"extensions":["swf"]},"application/x-silverlight-app":{"source":"apache","extensions":["xap"]},"application/x-sql":{"source":"apache","extensions":["sql"]},"application/x-stuffit":{"source":"apache","compressible":false,"extensions":["sit"]},"application/x-stuffitx":{"source":"apache","extensions":["sitx"]},"application/x-subrip":{"source":"apache","extensions":["srt"]},"application/x-sv4cpio":{"source":"apache","extensions":["sv4cpio"]},"application/x-sv4crc":{"source":"apache","extensions":["sv4crc"]},"application/x-t3vm-image":{"source":"apache","extensions":["t3"]},"application/x-tads":{"source":"apache","extensions":["gam"]},"application/x-tar":{"source":"apache","compressible":true,"extensions":["tar"]},"application/x-tcl":{"source":"apache","extensions":["tcl","tk"]},"application/x-tex":{"source":"apache","extensions":["tex"]},"application/x-tex-tfm":{"source":"apache","extensions":["tfm"]},"application/x-texinfo":{"source":"apache","extensions":["texinfo","texi"]},"application/x-tgif":{"source":"apache","extensions":["obj"]},"application/x-ustar":{"source":"apache","extensions":["ustar"]},"application/x-virtualbox-hdd":{"compressible":true,"extensions":["hdd"]},"application/x-virtualbox-ova":{"compressible":true,"extensions":["ova"]},"application/x-virtualbox-ovf":{"compressible":true,"extensions":["ovf"]},"application/x-virtualbox-vbox":{"compressible":true,"extensions":["vbox"]},"application/x-virtualbox-vbox-extpack":{"compressible":false,"extensions":["vbox-extpack"]},"application/x-virtualbox-vdi":{"compressible":true,"extensions":["vdi"]},"application/x-virtualbox-vhd":{"compressible":true,"extensions":["vhd"]},"application/x-virtualbox-vmdk":{"compressible":true,"extensions":["vmdk"]},"application/x-wais-source":{"source":"apache","extensions":["src"]},"application/x-web-app-manifest+json":{"compressible":true,"extensions":["webapp"]},"application/x-www-form-urlencoded":{"source":"iana","compressible":true},"application/x-x509-ca-cert":{"source":"apache","extensions":["der","crt","pem"]},"application/x-xfig":{"source":"apache","extensions":["fig"]},"application/x-xliff+xml":{"source":"apache","compressible":true,"extensions":["xlf"]},"application/x-xpinstall":{"source":"apache","compressible":false,"extensions":["xpi"]},"application/x-xz":{"source":"apache","extensions":["xz"]},"application/x-zmachine":{"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{"source":"iana"},"application/xacml+xml":{"source":"iana","compressible":true},"application/xaml+xml":{"source":"apache","compressible":true,"extensions":["xaml"]},"application/xcap-att+xml":{"source":"iana","compressible":true,"extensions":["xav"]},"application/xcap-caps+xml":{"source":"iana","compressible":true,"extensions":["xca"]},"application/xcap-diff+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/xcap-el+xml":{"source":"iana","compressible":true,"extensions":["xel"]},"application/xcap-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/xcap-ns+xml":{"source":"iana","compressible":true,"extensions":["xns"]},"application/xcon-conference-info+xml":{"source":"iana","compressible":true},"application/xcon-conference-info-diff+xml":{"source":"iana","compressible":true},"application/xenc+xml":{"source":"iana","compressible":true,"extensions":["xenc"]},"application/xhtml+xml":{"source":"iana","compressible":true,"extensions":["xhtml","xht"]},"application/xhtml-voice+xml":{"source":"apache","compressible":true},"application/xliff+xml":{"source":"iana","compressible":true,"extensions":["xlf"]},"application/xml":{"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},"application/xml-dtd":{"source":"iana","compressible":true,"extensions":["dtd"]},"application/xml-external-parsed-entity":{"source":"iana"},"application/xml-patch+xml":{"source":"iana","compressible":true},"application/xmpp+xml":{"source":"iana","compressible":true},"application/xop+xml":{"source":"iana","compressible":true,"extensions":["xop"]},"application/xproc+xml":{"source":"apache","compressible":true,"extensions":["xpl"]},"application/xslt+xml":{"source":"iana","compressible":true,"extensions":["xslt"]},"application/xspf+xml":{"source":"apache","compressible":true,"extensions":["xspf"]},"application/xv+xml":{"source":"iana","compressible":true,"extensions":["mxml","xhvml","xvml","xvm"]},"application/yang":{"source":"iana","extensions":["yang"]},"application/yang-data+json":{"source":"iana","compressible":true},"application/yang-data+xml":{"source":"iana","compressible":true},"application/yang-patch+json":{"source":"iana","compressible":true},"application/yang-patch+xml":{"source":"iana","compressible":true},"application/yin+xml":{"source":"iana","compressible":true,"extensions":["yin"]},"application/zip":{"source":"iana","compressible":false,"extensions":["zip"]},"application/zlib":{"source":"iana"},"application/zstd":{"source":"iana"},"audio/1d-interleaved-parityfec":{"source":"iana"},"audio/32kadpcm":{"source":"iana"},"audio/3gpp":{"source":"iana","compressible":false,"extensions":["3gpp"]},"audio/3gpp2":{"source":"iana"},"audio/aac":{"source":"iana"},"audio/ac3":{"source":"iana"},"audio/adpcm":{"source":"apache","extensions":["adp"]},"audio/amr":{"source":"iana"},"audio/amr-wb":{"source":"iana"},"audio/amr-wb+":{"source":"iana"},"audio/aptx":{"source":"iana"},"audio/asc":{"source":"iana"},"audio/atrac-advanced-lossless":{"source":"iana"},"audio/atrac-x":{"source":"iana"},"audio/atrac3":{"source":"iana"},"audio/basic":{"source":"iana","compressible":false,"extensions":["au","snd"]},"audio/bv16":{"source":"iana"},"audio/bv32":{"source":"iana"},"audio/clearmode":{"source":"iana"},"audio/cn":{"source":"iana"},"audio/dat12":{"source":"iana"},"audio/dls":{"source":"iana"},"audio/dsr-es201108":{"source":"iana"},"audio/dsr-es202050":{"source":"iana"},"audio/dsr-es202211":{"source":"iana"},"audio/dsr-es202212":{"source":"iana"},"audio/dv":{"source":"iana"},"audio/dvi4":{"source":"iana"},"audio/eac3":{"source":"iana"},"audio/encaprtp":{"source":"iana"},"audio/evrc":{"source":"iana"},"audio/evrc-qcp":{"source":"iana"},"audio/evrc0":{"source":"iana"},"audio/evrc1":{"source":"iana"},"audio/evrcb":{"source":"iana"},"audio/evrcb0":{"source":"iana"},"audio/evrcb1":{"source":"iana"},"audio/evrcnw":{"source":"iana"},"audio/evrcnw0":{"source":"iana"},"audio/evrcnw1":{"source":"iana"},"audio/evrcwb":{"source":"iana"},"audio/evrcwb0":{"source":"iana"},"audio/evrcwb1":{"source":"iana"},"audio/evs":{"source":"iana"},"audio/flexfec":{"source":"iana"},"audio/fwdred":{"source":"iana"},"audio/g711-0":{"source":"iana"},"audio/g719":{"source":"iana"},"audio/g722":{"source":"iana"},"audio/g7221":{"source":"iana"},"audio/g723":{"source":"iana"},"audio/g726-16":{"source":"iana"},"audio/g726-24":{"source":"iana"},"audio/g726-32":{"source":"iana"},"audio/g726-40":{"source":"iana"},"audio/g728":{"source":"iana"},"audio/g729":{"source":"iana"},"audio/g7291":{"source":"iana"},"audio/g729d":{"source":"iana"},"audio/g729e":{"source":"iana"},"audio/gsm":{"source":"iana"},"audio/gsm-efr":{"source":"iana"},"audio/gsm-hr-08":{"source":"iana"},"audio/ilbc":{"source":"iana"},"audio/ip-mr_v2.5":{"source":"iana"},"audio/isac":{"source":"apache"},"audio/l16":{"source":"iana"},"audio/l20":{"source":"iana"},"audio/l24":{"source":"iana","compressible":false},"audio/l8":{"source":"iana"},"audio/lpc":{"source":"iana"},"audio/melp":{"source":"iana"},"audio/melp1200":{"source":"iana"},"audio/melp2400":{"source":"iana"},"audio/melp600":{"source":"iana"},"audio/midi":{"source":"apache","extensions":["mid","midi","kar","rmi"]},"audio/mobile-xmf":{"source":"iana","extensions":["mxmf"]},"audio/mp3":{"compressible":false,"extensions":["mp3"]},"audio/mp4":{"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},"audio/mp4a-latm":{"source":"iana"},"audio/mpa":{"source":"iana"},"audio/mpa-robust":{"source":"iana"},"audio/mpeg":{"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{"source":"iana"},"audio/musepack":{"source":"apache"},"audio/ogg":{"source":"iana","compressible":false,"extensions":["oga","ogg","spx"]},"audio/opus":{"source":"iana"},"audio/parityfec":{"source":"iana"},"audio/pcma":{"source":"iana"},"audio/pcma-wb":{"source":"iana"},"audio/pcmu":{"source":"iana"},"audio/pcmu-wb":{"source":"iana"},"audio/prs.sid":{"source":"iana"},"audio/qcelp":{"source":"iana"},"audio/raptorfec":{"source":"iana"},"audio/red":{"source":"iana"},"audio/rtp-enc-aescm128":{"source":"iana"},"audio/rtp-midi":{"source":"iana"},"audio/rtploopback":{"source":"iana"},"audio/rtx":{"source":"iana"},"audio/s3m":{"source":"apache","extensions":["s3m"]},"audio/silk":{"source":"apache","extensions":["sil"]},"audio/smv":{"source":"iana"},"audio/smv-qcp":{"source":"iana"},"audio/smv0":{"source":"iana"},"audio/sp-midi":{"source":"iana"},"audio/speex":{"source":"iana"},"audio/t140c":{"source":"iana"},"audio/t38":{"source":"iana"},"audio/telephone-event":{"source":"iana"},"audio/tetra_acelp":{"source":"iana"},"audio/tone":{"source":"iana"},"audio/uemclip":{"source":"iana"},"audio/ulpfec":{"source":"iana"},"audio/usac":{"source":"iana"},"audio/vdvi":{"source":"iana"},"audio/vmr-wb":{"source":"iana"},"audio/vnd.3gpp.iufp":{"source":"iana"},"audio/vnd.4sb":{"source":"iana"},"audio/vnd.audiokoz":{"source":"iana"},"audio/vnd.celp":{"source":"iana"},"audio/vnd.cisco.nse":{"source":"iana"},"audio/vnd.cmles.radio-events":{"source":"iana"},"audio/vnd.cns.anp1":{"source":"iana"},"audio/vnd.cns.inf1":{"source":"iana"},"audio/vnd.dece.audio":{"source":"iana","extensions":["uva","uvva"]},"audio/vnd.digital-winds":{"source":"iana","extensions":["eol"]},"audio/vnd.dlna.adts":{"source":"iana"},"audio/vnd.dolby.heaac.1":{"source":"iana"},"audio/vnd.dolby.heaac.2":{"source":"iana"},"audio/vnd.dolby.mlp":{"source":"iana"},"audio/vnd.dolby.mps":{"source":"iana"},"audio/vnd.dolby.pl2":{"source":"iana"},"audio/vnd.dolby.pl2x":{"source":"iana"},"audio/vnd.dolby.pl2z":{"source":"iana"},"audio/vnd.dolby.pulse.1":{"source":"iana"},"audio/vnd.dra":{"source":"iana","extensions":["dra"]},"audio/vnd.dts":{"source":"iana","extensions":["dts"]},"audio/vnd.dts.hd":{"source":"iana","extensions":["dtshd"]},"audio/vnd.dts.uhd":{"source":"iana"},"audio/vnd.dvb.file":{"source":"iana"},"audio/vnd.everad.plj":{"source":"iana"},"audio/vnd.hns.audio":{"source":"iana"},"audio/vnd.lucent.voice":{"source":"iana","extensions":["lvp"]},"audio/vnd.ms-playready.media.pya":{"source":"iana","extensions":["pya"]},"audio/vnd.nokia.mobile-xmf":{"source":"iana"},"audio/vnd.nortel.vbk":{"source":"iana"},"audio/vnd.nuera.ecelp4800":{"source":"iana","extensions":["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{"source":"iana","extensions":["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{"source":"iana","extensions":["ecelp9600"]},"audio/vnd.octel.sbc":{"source":"iana"},"audio/vnd.presonus.multitrack":{"source":"iana"},"audio/vnd.qcelp":{"source":"iana"},"audio/vnd.rhetorex.32kadpcm":{"source":"iana"},"audio/vnd.rip":{"source":"iana","extensions":["rip"]},"audio/vnd.rn-realaudio":{"compressible":false},"audio/vnd.sealedmedia.softseal.mpeg":{"source":"iana"},"audio/vnd.vmx.cvsd":{"source":"iana"},"audio/vnd.wave":{"compressible":false},"audio/vorbis":{"source":"iana","compressible":false},"audio/vorbis-config":{"source":"iana"},"audio/wav":{"compressible":false,"extensions":["wav"]},"audio/wave":{"compressible":false,"extensions":["wav"]},"audio/webm":{"source":"apache","compressible":false,"extensions":["weba"]},"audio/x-aac":{"source":"apache","compressible":false,"extensions":["aac"]},"audio/x-aiff":{"source":"apache","extensions":["aif","aiff","aifc"]},"audio/x-caf":{"source":"apache","compressible":false,"extensions":["caf"]},"audio/x-flac":{"source":"apache","extensions":["flac"]},"audio/x-m4a":{"source":"nginx","extensions":["m4a"]},"audio/x-matroska":{"source":"apache","extensions":["mka"]},"audio/x-mpegurl":{"source":"apache","extensions":["m3u"]},"audio/x-ms-wax":{"source":"apache","extensions":["wax"]},"audio/x-ms-wma":{"source":"apache","extensions":["wma"]},"audio/x-pn-realaudio":{"source":"apache","extensions":["ram","ra"]},"audio/x-pn-realaudio-plugin":{"source":"apache","extensions":["rmp"]},"audio/x-realaudio":{"source":"nginx","extensions":["ra"]},"audio/x-tta":{"source":"apache"},"audio/x-wav":{"source":"apache","extensions":["wav"]},"audio/xm":{"source":"apache","extensions":["xm"]},"chemical/x-cdx":{"source":"apache","extensions":["cdx"]},"chemical/x-cif":{"source":"apache","extensions":["cif"]},"chemical/x-cmdf":{"source":"apache","extensions":["cmdf"]},"chemical/x-cml":{"source":"apache","extensions":["cml"]},"chemical/x-csml":{"source":"apache","extensions":["csml"]},"chemical/x-pdb":{"source":"apache"},"chemical/x-xyz":{"source":"apache","extensions":["xyz"]},"font/collection":{"source":"iana","extensions":["ttc"]},"font/otf":{"source":"iana","compressible":true,"extensions":["otf"]},"font/sfnt":{"source":"iana"},"font/ttf":{"source":"iana","compressible":true,"extensions":["ttf"]},"font/woff":{"source":"iana","extensions":["woff"]},"font/woff2":{"source":"iana","extensions":["woff2"]},"image/aces":{"source":"iana","extensions":["exr"]},"image/apng":{"compressible":false,"extensions":["apng"]},"image/avci":{"source":"iana"},"image/avcs":{"source":"iana"},"image/bmp":{"source":"iana","compressible":true,"extensions":["bmp"]},"image/cgm":{"source":"iana","extensions":["cgm"]},"image/dicom-rle":{"source":"iana","extensions":["drle"]},"image/emf":{"source":"iana","extensions":["emf"]},"image/fits":{"source":"iana","extensions":["fits"]},"image/g3fax":{"source":"iana","extensions":["g3"]},"image/gif":{"source":"iana","compressible":false,"extensions":["gif"]},"image/heic":{"source":"iana","extensions":["heic"]},"image/heic-sequence":{"source":"iana","extensions":["heics"]},"image/heif":{"source":"iana","extensions":["heif"]},"image/heif-sequence":{"source":"iana","extensions":["heifs"]},"image/hej2k":{"source":"iana","extensions":["hej2"]},"image/hsj2":{"source":"iana","extensions":["hsj2"]},"image/ief":{"source":"iana","extensions":["ief"]},"image/jls":{"source":"iana","extensions":["jls"]},"image/jp2":{"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},"image/jpeg":{"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},"image/jph":{"source":"iana","extensions":["jph"]},"image/jphc":{"source":"iana","extensions":["jhc"]},"image/jpm":{"source":"iana","compressible":false,"extensions":["jpm"]},"image/jpx":{"source":"iana","compressible":false,"extensions":["jpx","jpf"]},"image/jxr":{"source":"iana","extensions":["jxr"]},"image/jxra":{"source":"iana","extensions":["jxra"]},"image/jxrs":{"source":"iana","extensions":["jxrs"]},"image/jxs":{"source":"iana","extensions":["jxs"]},"image/jxsc":{"source":"iana","extensions":["jxsc"]},"image/jxsi":{"source":"iana","extensions":["jxsi"]},"image/jxss":{"source":"iana","extensions":["jxss"]},"image/ktx":{"source":"iana","extensions":["ktx"]},"image/naplps":{"source":"iana"},"image/pjpeg":{"compressible":false},"image/png":{"source":"iana","compressible":false,"extensions":["png"]},"image/prs.btif":{"source":"iana","extensions":["btif"]},"image/prs.pti":{"source":"iana","extensions":["pti"]},"image/pwg-raster":{"source":"iana"},"image/sgi":{"source":"apache","extensions":["sgi"]},"image/svg+xml":{"source":"iana","compressible":true,"extensions":["svg","svgz"]},"image/t38":{"source":"iana","extensions":["t38"]},"image/tiff":{"source":"iana","compressible":false,"extensions":["tif","tiff"]},"image/tiff-fx":{"source":"iana","extensions":["tfx"]},"image/vnd.adobe.photoshop":{"source":"iana","compressible":true,"extensions":["psd"]},"image/vnd.airzip.accelerator.azv":{"source":"iana","extensions":["azv"]},"image/vnd.cns.inf2":{"source":"iana"},"image/vnd.dece.graphic":{"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{"source":"iana","extensions":["djvu","djv"]},"image/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"image/vnd.dwg":{"source":"iana","extensions":["dwg"]},"image/vnd.dxf":{"source":"iana","extensions":["dxf"]},"image/vnd.fastbidsheet":{"source":"iana","extensions":["fbs"]},"image/vnd.fpx":{"source":"iana","extensions":["fpx"]},"image/vnd.fst":{"source":"iana","extensions":["fst"]},"image/vnd.fujixerox.edmics-mmr":{"source":"iana","extensions":["mmr"]},"image/vnd.fujixerox.edmics-rlc":{"source":"iana","extensions":["rlc"]},"image/vnd.globalgraphics.pgb":{"source":"iana"},"image/vnd.microsoft.icon":{"source":"iana","extensions":["ico"]},"image/vnd.mix":{"source":"iana"},"image/vnd.mozilla.apng":{"source":"iana"},"image/vnd.ms-dds":{"extensions":["dds"]},"image/vnd.ms-modi":{"source":"iana","extensions":["mdi"]},"image/vnd.ms-photo":{"source":"apache","extensions":["wdp"]},"image/vnd.net-fpx":{"source":"iana","extensions":["npx"]},"image/vnd.radiance":{"source":"iana"},"image/vnd.sealed.png":{"source":"iana"},"image/vnd.sealedmedia.softseal.gif":{"source":"iana"},"image/vnd.sealedmedia.softseal.jpg":{"source":"iana"},"image/vnd.svf":{"source":"iana"},"image/vnd.tencent.tap":{"source":"iana","extensions":["tap"]},"image/vnd.valve.source.texture":{"source":"iana","extensions":["vtf"]},"image/vnd.wap.wbmp":{"source":"iana","extensions":["wbmp"]},"image/vnd.xiff":{"source":"iana","extensions":["xif"]},"image/vnd.zbrush.pcx":{"source":"iana","extensions":["pcx"]},"image/webp":{"source":"apache","extensions":["webp"]},"image/wmf":{"source":"iana","extensions":["wmf"]},"image/x-3ds":{"source":"apache","extensions":["3ds"]},"image/x-cmu-raster":{"source":"apache","extensions":["ras"]},"image/x-cmx":{"source":"apache","extensions":["cmx"]},"image/x-freehand":{"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{"source":"apache","compressible":true,"extensions":["ico"]},"image/x-jng":{"source":"nginx","extensions":["jng"]},"image/x-mrsid-image":{"source":"apache","extensions":["sid"]},"image/x-ms-bmp":{"source":"nginx","compressible":true,"extensions":["bmp"]},"image/x-pcx":{"source":"apache","extensions":["pcx"]},"image/x-pict":{"source":"apache","extensions":["pic","pct"]},"image/x-portable-anymap":{"source":"apache","extensions":["pnm"]},"image/x-portable-bitmap":{"source":"apache","extensions":["pbm"]},"image/x-portable-graymap":{"source":"apache","extensions":["pgm"]},"image/x-portable-pixmap":{"source":"apache","extensions":["ppm"]},"image/x-rgb":{"source":"apache","extensions":["rgb"]},"image/x-tga":{"source":"apache","extensions":["tga"]},"image/x-xbitmap":{"source":"apache","extensions":["xbm"]},"image/x-xcf":{"compressible":false},"image/x-xpixmap":{"source":"apache","extensions":["xpm"]},"image/x-xwindowdump":{"source":"apache","extensions":["xwd"]},"message/cpim":{"source":"iana"},"message/delivery-status":{"source":"iana"},"message/disposition-notification":{"source":"iana","extensions":["disposition-notification"]},"message/external-body":{"source":"iana"},"message/feedback-report":{"source":"iana"},"message/global":{"source":"iana","extensions":["u8msg"]},"message/global-delivery-status":{"source":"iana","extensions":["u8dsn"]},"message/global-disposition-notification":{"source":"iana","extensions":["u8mdn"]},"message/global-headers":{"source":"iana","extensions":["u8hdr"]},"message/http":{"source":"iana","compressible":false},"message/imdn+xml":{"source":"iana","compressible":true},"message/news":{"source":"iana"},"message/partial":{"source":"iana","compressible":false},"message/rfc822":{"source":"iana","compressible":true,"extensions":["eml","mime"]},"message/s-http":{"source":"iana"},"message/sip":{"source":"iana"},"message/sipfrag":{"source":"iana"},"message/tracking-status":{"source":"iana"},"message/vnd.si.simp":{"source":"iana"},"message/vnd.wfa.wsc":{"source":"iana","extensions":["wsc"]},"model/3mf":{"source":"iana","extensions":["3mf"]},"model/gltf+json":{"source":"iana","compressible":true,"extensions":["gltf"]},"model/gltf-binary":{"source":"iana","compressible":true,"extensions":["glb"]},"model/iges":{"source":"iana","compressible":false,"extensions":["igs","iges"]},"model/mesh":{"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},"model/stl":{"source":"iana","extensions":["stl"]},"model/vnd.collada+xml":{"source":"iana","compressible":true,"extensions":["dae"]},"model/vnd.dwf":{"source":"iana","extensions":["dwf"]},"model/vnd.flatland.3dml":{"source":"iana"},"model/vnd.gdl":{"source":"iana","extensions":["gdl"]},"model/vnd.gs-gdl":{"source":"apache"},"model/vnd.gs.gdl":{"source":"iana"},"model/vnd.gtw":{"source":"iana","extensions":["gtw"]},"model/vnd.moml+xml":{"source":"iana","compressible":true},"model/vnd.mts":{"source":"iana","extensions":["mts"]},"model/vnd.opengex":{"source":"iana","extensions":["ogex"]},"model/vnd.parasolid.transmit.binary":{"source":"iana","extensions":["x_b"]},"model/vnd.parasolid.transmit.text":{"source":"iana","extensions":["x_t"]},"model/vnd.rosette.annotated-data-model":{"source":"iana"},"model/vnd.usdz+zip":{"source":"iana","compressible":false,"extensions":["usdz"]},"model/vnd.valve.source.compiled-map":{"source":"iana","extensions":["bsp"]},"model/vnd.vtu":{"source":"iana","extensions":["vtu"]},"model/vrml":{"source":"iana","compressible":false,"extensions":["wrl","vrml"]},"model/x3d+binary":{"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},"model/x3d+fastinfoset":{"source":"iana","extensions":["x3db"]},"model/x3d+vrml":{"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},"model/x3d+xml":{"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},"model/x3d-vrml":{"source":"iana","extensions":["x3dv"]},"multipart/alternative":{"source":"iana","compressible":false},"multipart/appledouble":{"source":"iana"},"multipart/byteranges":{"source":"iana"},"multipart/digest":{"source":"iana"},"multipart/encrypted":{"source":"iana","compressible":false},"multipart/form-data":{"source":"iana","compressible":false},"multipart/header-set":{"source":"iana"},"multipart/mixed":{"source":"iana"},"multipart/multilingual":{"source":"iana"},"multipart/parallel":{"source":"iana"},"multipart/related":{"source":"iana","compressible":false},"multipart/report":{"source":"iana"},"multipart/signed":{"source":"iana","compressible":false},"multipart/vnd.bint.med-plus":{"source":"iana"},"multipart/voice-message":{"source":"iana"},"multipart/x-mixed-replace":{"source":"iana"},"text/1d-interleaved-parityfec":{"source":"iana"},"text/cache-manifest":{"source":"iana","compressible":true,"extensions":["appcache","manifest"]},"text/calendar":{"source":"iana","extensions":["ics","ifb"]},"text/calender":{"compressible":true},"text/cmd":{"compressible":true},"text/coffeescript":{"extensions":["coffee","litcoffee"]},"text/css":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},"text/csv":{"source":"iana","compressible":true,"extensions":["csv"]},"text/csv-schema":{"source":"iana"},"text/directory":{"source":"iana"},"text/dns":{"source":"iana"},"text/ecmascript":{"source":"iana"},"text/encaprtp":{"source":"iana"},"text/enriched":{"source":"iana"},"text/flexfec":{"source":"iana"},"text/fwdred":{"source":"iana"},"text/grammar-ref-list":{"source":"iana"},"text/html":{"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},"text/jade":{"extensions":["jade"]},"text/javascript":{"source":"iana","compressible":true},"text/jcr-cnd":{"source":"iana"},"text/jsx":{"compressible":true,"extensions":["jsx"]},"text/less":{"compressible":true,"extensions":["less"]},"text/markdown":{"source":"iana","compressible":true,"extensions":["markdown","md"]},"text/mathml":{"source":"nginx","extensions":["mml"]},"text/mdx":{"compressible":true,"extensions":["mdx"]},"text/mizar":{"source":"iana"},"text/n3":{"source":"iana","compressible":true,"extensions":["n3"]},"text/parameters":{"source":"iana"},"text/parityfec":{"source":"iana"},"text/plain":{"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{"source":"iana"},"text/prs.fallenstein.rst":{"source":"iana"},"text/prs.lines.tag":{"source":"iana","extensions":["dsc"]},"text/prs.prop.logic":{"source":"iana"},"text/raptorfec":{"source":"iana"},"text/red":{"source":"iana"},"text/rfc822-headers":{"source":"iana"},"text/richtext":{"source":"iana","compressible":true,"extensions":["rtx"]},"text/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"text/rtp-enc-aescm128":{"source":"iana"},"text/rtploopback":{"source":"iana"},"text/rtx":{"source":"iana"},"text/sgml":{"source":"iana","extensions":["sgml","sgm"]},"text/shex":{"extensions":["shex"]},"text/slim":{"extensions":["slim","slm"]},"text/strings":{"source":"iana"},"text/stylus":{"extensions":["stylus","styl"]},"text/t140":{"source":"iana"},"text/tab-separated-values":{"source":"iana","compressible":true,"extensions":["tsv"]},"text/troff":{"source":"iana","extensions":["t","tr","roff","man","me","ms"]},"text/turtle":{"source":"iana","charset":"UTF-8","extensions":["ttl"]},"text/ulpfec":{"source":"iana"},"text/uri-list":{"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},"text/vcard":{"source":"iana","compressible":true,"extensions":["vcard"]},"text/vnd.a":{"source":"iana"},"text/vnd.abc":{"source":"iana"},"text/vnd.ascii-art":{"source":"iana"},"text/vnd.curl":{"source":"iana","extensions":["curl"]},"text/vnd.curl.dcurl":{"source":"apache","extensions":["dcurl"]},"text/vnd.curl.mcurl":{"source":"apache","extensions":["mcurl"]},"text/vnd.curl.scurl":{"source":"apache","extensions":["scurl"]},"text/vnd.debian.copyright":{"source":"iana"},"text/vnd.dmclientscript":{"source":"iana"},"text/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"text/vnd.esmertec.theme-descriptor":{"source":"iana"},"text/vnd.ficlab.flt":{"source":"iana"},"text/vnd.fly":{"source":"iana","extensions":["fly"]},"text/vnd.fmi.flexstor":{"source":"iana","extensions":["flx"]},"text/vnd.gml":{"source":"iana"},"text/vnd.graphviz":{"source":"iana","extensions":["gv"]},"text/vnd.hgl":{"source":"iana"},"text/vnd.in3d.3dml":{"source":"iana","extensions":["3dml"]},"text/vnd.in3d.spot":{"source":"iana","extensions":["spot"]},"text/vnd.iptc.newsml":{"source":"iana"},"text/vnd.iptc.nitf":{"source":"iana"},"text/vnd.latex-z":{"source":"iana"},"text/vnd.motorola.reflex":{"source":"iana"},"text/vnd.ms-mediapackage":{"source":"iana"},"text/vnd.net2phone.commcenter.command":{"source":"iana"},"text/vnd.radisys.msml-basic-layout":{"source":"iana"},"text/vnd.senx.warpscript":{"source":"iana"},"text/vnd.si.uricatalogue":{"source":"iana"},"text/vnd.sosi":{"source":"iana"},"text/vnd.sun.j2me.app-descriptor":{"source":"iana","extensions":["jad"]},"text/vnd.trolltech.linguist":{"source":"iana"},"text/vnd.wap.si":{"source":"iana"},"text/vnd.wap.sl":{"source":"iana"},"text/vnd.wap.wml":{"source":"iana","extensions":["wml"]},"text/vnd.wap.wmlscript":{"source":"iana","extensions":["wmls"]},"text/vtt":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["vtt"]},"text/x-asm":{"source":"apache","extensions":["s","asm"]},"text/x-c":{"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{"source":"nginx","extensions":["htc"]},"text/x-fortran":{"source":"apache","extensions":["f","for","f77","f90"]},"text/x-gwt-rpc":{"compressible":true},"text/x-handlebars-template":{"extensions":["hbs"]},"text/x-java-source":{"source":"apache","extensions":["java"]},"text/x-jquery-tmpl":{"compressible":true},"text/x-lua":{"extensions":["lua"]},"text/x-markdown":{"compressible":true,"extensions":["mkd"]},"text/x-nfo":{"source":"apache","extensions":["nfo"]},"text/x-opml":{"source":"apache","extensions":["opml"]},"text/x-org":{"compressible":true,"extensions":["org"]},"text/x-pascal":{"source":"apache","extensions":["p","pas"]},"text/x-processing":{"compressible":true,"extensions":["pde"]},"text/x-sass":{"extensions":["sass"]},"text/x-scss":{"extensions":["scss"]},"text/x-setext":{"source":"apache","extensions":["etx"]},"text/x-sfv":{"source":"apache","extensions":["sfv"]},"text/x-suse-ymp":{"compressible":true,"extensions":["ymp"]},"text/x-uuencode":{"source":"apache","extensions":["uu"]},"text/x-vcalendar":{"source":"apache","extensions":["vcs"]},"text/x-vcard":{"source":"apache","extensions":["vcf"]},"text/xml":{"source":"iana","compressible":true,"extensions":["xml"]},"text/xml-external-parsed-entity":{"source":"iana"},"text/yaml":{"extensions":["yaml","yml"]},"video/1d-interleaved-parityfec":{"source":"iana"},"video/3gpp":{"source":"iana","extensions":["3gp","3gpp"]},"video/3gpp-tt":{"source":"iana"},"video/3gpp2":{"source":"iana","extensions":["3g2"]},"video/bmpeg":{"source":"iana"},"video/bt656":{"source":"iana"},"video/celb":{"source":"iana"},"video/dv":{"source":"iana"},"video/encaprtp":{"source":"iana"},"video/flexfec":{"source":"iana"},"video/h261":{"source":"iana","extensions":["h261"]},"video/h263":{"source":"iana","extensions":["h263"]},"video/h263-1998":{"source":"iana"},"video/h263-2000":{"source":"iana"},"video/h264":{"source":"iana","extensions":["h264"]},"video/h264-rcdo":{"source":"iana"},"video/h264-svc":{"source":"iana"},"video/h265":{"source":"iana"},"video/iso.segment":{"source":"iana"},"video/jpeg":{"source":"iana","extensions":["jpgv"]},"video/jpeg2000":{"source":"iana"},"video/jpm":{"source":"apache","extensions":["jpm","jpgm"]},"video/mj2":{"source":"iana","extensions":["mj2","mjp2"]},"video/mp1s":{"source":"iana"},"video/mp2p":{"source":"iana"},"video/mp2t":{"source":"iana","extensions":["ts"]},"video/mp4":{"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},"video/mp4v-es":{"source":"iana"},"video/mpeg":{"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{"source":"iana"},"video/mpv":{"source":"iana"},"video/nv":{"source":"iana"},"video/ogg":{"source":"iana","compressible":false,"extensions":["ogv"]},"video/parityfec":{"source":"iana"},"video/pointer":{"source":"iana"},"video/quicktime":{"source":"iana","compressible":false,"extensions":["qt","mov"]},"video/raptorfec":{"source":"iana"},"video/raw":{"source":"iana"},"video/rtp-enc-aescm128":{"source":"iana"},"video/rtploopback":{"source":"iana"},"video/rtx":{"source":"iana"},"video/smpte291":{"source":"iana"},"video/smpte292m":{"source":"iana"},"video/ulpfec":{"source":"iana"},"video/vc1":{"source":"iana"},"video/vc2":{"source":"iana"},"video/vnd.cctv":{"source":"iana"},"video/vnd.dece.hd":{"source":"iana","extensions":["uvh","uvvh"]},"video/vnd.dece.mobile":{"source":"iana","extensions":["uvm","uvvm"]},"video/vnd.dece.mp4":{"source":"iana"},"video/vnd.dece.pd":{"source":"iana","extensions":["uvp","uvvp"]},"video/vnd.dece.sd":{"source":"iana","extensions":["uvs","uvvs"]},"video/vnd.dece.video":{"source":"iana","extensions":["uvv","uvvv"]},"video/vnd.directv.mpeg":{"source":"iana"},"video/vnd.directv.mpeg-tts":{"source":"iana"},"video/vnd.dlna.mpeg-tts":{"source":"iana"},"video/vnd.dvb.file":{"source":"iana","extensions":["dvb"]},"video/vnd.fvt":{"source":"iana","extensions":["fvt"]},"video/vnd.hns.video":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.ttsavc":{"source":"iana"},"video/vnd.iptvforum.ttsmpeg2":{"source":"iana"},"video/vnd.motorola.video":{"source":"iana"},"video/vnd.motorola.videop":{"source":"iana"},"video/vnd.mpegurl":{"source":"iana","extensions":["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{"source":"iana","extensions":["pyv"]},"video/vnd.nokia.interleaved-multimedia":{"source":"iana"},"video/vnd.nokia.mp4vr":{"source":"iana"},"video/vnd.nokia.videovoip":{"source":"iana"},"video/vnd.objectvideo":{"source":"iana"},"video/vnd.radgamettools.bink":{"source":"iana"},"video/vnd.radgamettools.smacker":{"source":"iana"},"video/vnd.sealed.mpeg1":{"source":"iana"},"video/vnd.sealed.mpeg4":{"source":"iana"},"video/vnd.sealed.swf":{"source":"iana"},"video/vnd.sealedmedia.softseal.mov":{"source":"iana"},"video/vnd.uvvu.mp4":{"source":"iana","extensions":["uvu","uvvu"]},"video/vnd.vivo":{"source":"iana","extensions":["viv"]},"video/vnd.youtube.yt":{"source":"iana"},"video/vp8":{"source":"iana"},"video/webm":{"source":"apache","compressible":false,"extensions":["webm"]},"video/x-f4v":{"source":"apache","extensions":["f4v"]},"video/x-fli":{"source":"apache","extensions":["fli"]},"video/x-flv":{"source":"apache","compressible":false,"extensions":["flv"]},"video/x-m4v":{"source":"apache","extensions":["m4v"]},"video/x-matroska":{"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},"video/x-mng":{"source":"apache","extensions":["mng"]},"video/x-ms-asf":{"source":"apache","extensions":["asf","asx"]},"video/x-ms-vob":{"source":"apache","extensions":["vob"]},"video/x-ms-wm":{"source":"apache","extensions":["wm"]},"video/x-ms-wmv":{"source":"apache","compressible":false,"extensions":["wmv"]},"video/x-ms-wmx":{"source":"apache","extensions":["wmx"]},"video/x-ms-wvx":{"source":"apache","extensions":["wvx"]},"video/x-msvideo":{"source":"apache","extensions":["avi"]},"video/x-sgi-movie":{"source":"apache","extensions":["movie"]},"video/x-smv":{"source":"apache","extensions":["smv"]},"x-conference/x-cooltalk":{"source":"apache","extensions":["ice"]},"x-shader/x-fragment":{"compressible":true},"x-shader/x-vertex":{"compressible":true}}')},function(e,t,i){"use strict";
/*!
 * body-parser
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(20),a=i(8)("body-parser:raw"),r=i(35),o=i(26);e.exports=function(e){var t=e||{},i=!1!==t.inflate,s="number"!=typeof t.limit?n.parse(t.limit||"100kb"):t.limit,c=t.type||"application/octet-stream",p=t.verify||!1;if(!1!==p&&"function"!=typeof p)throw new TypeError("option verify must be function");var u="function"!=typeof c?function(e){return function(t){return Boolean(o(t,e))}}(c):c;function f(e){return e}return function(e,t,n){return e._body?(a("body already parsed"),void n()):(e.body=e.body||{},o.hasBody(e)?(a("content-type %j",e.headers["content-type"]),u(e)?void r(e,t,n,f,a,{encoding:null,inflate:i,limit:s,verify:p}):(a("skip parsing"),void n())):(a("skip empty body"),void n()))}}},function(e,t,i){"use strict";
/*!
 * body-parser
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(20),a=i(33),r=i(8)("body-parser:text"),o=i(35),s=i(26);e.exports=function(e){var t=e||{},i=t.defaultCharset||"utf-8",c=!1!==t.inflate,p="number"!=typeof t.limit?n.parse(t.limit||"100kb"):t.limit,u=t.type||"text/plain",f=t.verify||!1;if(!1!==f&&"function"!=typeof f)throw new TypeError("option verify must be function");var l="function"!=typeof u?function(e){return function(t){return Boolean(s(t,e))}}(u):u;function d(e){return e}return function(e,t,n){if(e._body)return r("body already parsed"),void n();if(e.body=e.body||{},!s.hasBody(e))return r("skip empty body"),void n();if(r("content-type %j",e.headers["content-type"]),!l(e))return r("skip parsing"),void n();var u=function(e){try{return(a.parse(e).parameters.charset||"").toLowerCase()}catch(e){return}}(e)||i;o(e,t,n,d,r,{encoding:u,inflate:c,limit:p,verify:f})}}},function(e,t,i){"use strict";
/*!
 * body-parser
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(20),a=i(33),r=i(34),o=i(8)("body-parser:urlencoded"),s=i(9)("body-parser"),c=i(35),p=i(26);e.exports=function(e){var t=e||{};void 0===t.extended&&s("undefined extended: provide extended option");var i=!1!==t.extended,u=!1!==t.inflate,d="number"!=typeof t.limit?n.parse(t.limit||"100kb"):t.limit,h=t.type||"application/x-www-form-urlencoded",m=t.verify||!1;if(!1!==m&&"function"!=typeof m)throw new TypeError("option verify must be function");var b=i?function(e){var t=void 0!==e.parameterLimit?e.parameterLimit:1e3,i=l("qs");if(isNaN(t)||t<1)throw new TypeError("option parameterLimit must be a positive number");isFinite(t)&&(t|=0);return function(e){var n=f(e,t);if(void 0===n)throw o("too many parameters"),r(413,"too many parameters",{type:"parameters.too.many"});var a=Math.max(100,n);return o("parse extended urlencoding"),i(e,{allowPrototypes:!0,arrayLimit:a,depth:1/0,parameterLimit:t})}}(t):function(e){var t=void 0!==e.parameterLimit?e.parameterLimit:1e3,i=l("querystring");if(isNaN(t)||t<1)throw new TypeError("option parameterLimit must be a positive number");isFinite(t)&&(t|=0);return function(e){if(void 0===f(e,t))throw o("too many parameters"),r(413,"too many parameters",{type:"parameters.too.many"});return o("parse urlencoding"),i(e,void 0,void 0,{maxKeys:t})}}(t),v="function"!=typeof h?function(e){return function(t){return Boolean(p(t,e))}}(h):h;function g(e){return e.length?b(e):{}}return function(e,t,i){if(e._body)return o("body already parsed"),void i();if(e.body=e.body||{},!p.hasBody(e))return o("skip empty body"),void i();if(o("content-type %j",e.headers["content-type"]),!v(e))return o("skip parsing"),void i();var n=function(e){try{return(a.parse(e).parameters.charset||"").toLowerCase()}catch(e){return}}(e)||"utf-8";if("utf-8"!==n)return o("invalid charset"),void i(r(415,'unsupported charset "'+n.toUpperCase()+'"',{charset:n,type:"charset.unsupported"}));c(e,t,i,g,o,{debug:o,encoding:n,inflate:u,limit:d,verify:m})}};var u=Object.create(null);function f(e,t){for(var i=0,n=0;-1!==(n=e.indexOf("&",n));)if(n++,++i===t)return;return i}function l(e){var t=u[e];if(void 0!==t)return t.parse;switch(e){case"qs":t=i(53);break;case"querystring":t=i(54)}return u[e]=t,t.parse}},function(e,t,i){"use strict";var n=i(85),a=i(86),r=Object.prototype.hasOwnProperty,o={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},s=Array.isArray,c=Array.prototype.push,p=function(e,t){c.apply(e,s(t)?t:[t])},u=Date.prototype.toISOString,f={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:n.encode,encodeValuesOnly:!1,formatter:a.formatters[a.default],indices:!1,serializeDate:function(e){return u.call(e)},skipNulls:!1,strictNullHandling:!1},l=function e(t,i,a,r,o,c,u,l,d,h,m,b,v){var g=t;if("function"==typeof u?g=u(i,g):g instanceof Date?g=h(g):"comma"===a&&s(g)&&(g=g.join(",")),null===g){if(r)return c&&!b?c(i,f.encoder,v):i;g=""}if("string"==typeof g||"number"==typeof g||"boolean"==typeof g||n.isBuffer(g))return c?[m(b?i:c(i,f.encoder,v))+"="+m(c(g,f.encoder,v))]:[m(i)+"="+m(String(g))];var y,x=[];if(void 0===g)return x;if(s(u))y=u;else{var w=Object.keys(g);y=l?w.sort(l):w}for(var _=0;_<y.length;++_){var k=y[_];o&&null===g[k]||(s(g)?p(x,e(g[k],"function"==typeof a?a(i,k):i,a,r,o,c,u,l,d,h,m,b,v)):p(x,e(g[k],i+(d?"."+k:"["+k+"]"),a,r,o,c,u,l,d,h,m,b,v)))}return x};e.exports=function(e,t){var i,n=e,c=function(e){if(!e)return f;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||f.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var i=a.default;if(void 0!==e.format){if(!r.call(a.formatters,e.format))throw new TypeError("Unknown format option provided.");i=e.format}var n=a.formatters[i],o=f.filter;return("function"==typeof e.filter||s(e.filter))&&(o=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:f.addQueryPrefix,allowDots:void 0===e.allowDots?f.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:f.charsetSentinel,delimiter:void 0===e.delimiter?f.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:f.encode,encoder:"function"==typeof e.encoder?e.encoder:f.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:f.encodeValuesOnly,filter:o,formatter:n,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:f.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:f.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:f.strictNullHandling}}(t);"function"==typeof c.filter?n=(0,c.filter)("",n):s(c.filter)&&(i=c.filter);var u,d=[];if("object"!=typeof n||null===n)return"";u=t&&t.arrayFormat in o?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var h=o[u];i||(i=Object.keys(n)),c.sort&&i.sort(c.sort);for(var m=0;m<i.length;++m){var b=i[m];c.skipNulls&&null===n[b]||p(d,l(n[b],b,h,c.strictNullHandling,c.skipNulls,c.encode?c.encoder:null,c.filter,c.sort,c.allowDots,c.serializeDate,c.formatter,c.encodeValuesOnly,c.charset))}var v=d.join(c.delimiter),g=!0===c.addQueryPrefix?"?":"";return c.charsetSentinel&&("iso-8859-1"===c.charset?g+="utf8=%26%2310003%3B&":g+="utf8=%E2%9C%93&"),v.length>0?g+v:""}},function(e,t,i){"use strict";var n=i(85),a=Object.prototype.hasOwnProperty,r={allowDots:!1,allowPrototypes:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:n.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},o=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},s=function(e,t,i){if(e){var n=i.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,r=/(\[[^[\]]*])/g,o=/(\[[^[\]]*])/.exec(n),s=o?n.slice(0,o.index):n,c=[];if(s){if(!i.plainObjects&&a.call(Object.prototype,s)&&!i.allowPrototypes)return;c.push(s)}for(var p=0;null!==(o=r.exec(n))&&p<i.depth;){if(p+=1,!i.plainObjects&&a.call(Object.prototype,o[1].slice(1,-1))&&!i.allowPrototypes)return;c.push(o[1])}return o&&c.push("["+n.slice(o.index)+"]"),function(e,t,i){for(var n=t,a=e.length-1;a>=0;--a){var r,o=e[a];if("[]"===o&&i.parseArrays)r=[].concat(n);else{r=i.plainObjects?Object.create(null):{};var s="["===o.charAt(0)&&"]"===o.charAt(o.length-1)?o.slice(1,-1):o,c=parseInt(s,10);i.parseArrays||""!==s?!isNaN(c)&&o!==s&&String(c)===s&&c>=0&&i.parseArrays&&c<=i.arrayLimit?(r=[])[c]=n:r[s]=n:r={0:n}}n=r}return n}(c,t,i)}};e.exports=function(e,t){var i=function(e){if(!e)return r;if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new Error("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?r.charset:e.charset;return{allowDots:void 0===e.allowDots?r.allowDots:!!e.allowDots,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:r.allowPrototypes,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:r.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:r.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:r.comma,decoder:"function"==typeof e.decoder?e.decoder:r.decoder,delimiter:"string"==typeof e.delimiter||n.isRegExp(e.delimiter)?e.delimiter:r.delimiter,depth:"number"==typeof e.depth?e.depth:r.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:r.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:r.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:r.plainObjects,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:r.strictNullHandling}}(t);if(""===e||null==e)return i.plainObjects?Object.create(null):{};for(var c="string"==typeof e?function(e,t){var i,s={},c=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,p=t.parameterLimit===1/0?void 0:t.parameterLimit,u=c.split(t.delimiter,p),f=-1,l=t.charset;if(t.charsetSentinel)for(i=0;i<u.length;++i)0===u[i].indexOf("utf8=")&&("utf8=%E2%9C%93"===u[i]?l="utf-8":"utf8=%26%2310003%3B"===u[i]&&(l="iso-8859-1"),f=i,i=u.length);for(i=0;i<u.length;++i)if(i!==f){var d,h,m=u[i],b=m.indexOf("]="),v=-1===b?m.indexOf("="):b+1;-1===v?(d=t.decoder(m,r.decoder,l),h=t.strictNullHandling?null:""):(d=t.decoder(m.slice(0,v),r.decoder,l),h=t.decoder(m.slice(v+1),r.decoder,l)),h&&t.interpretNumericEntities&&"iso-8859-1"===l&&(h=o(h)),h&&t.comma&&h.indexOf(",")>-1&&(h=h.split(",")),a.call(s,d)?s[d]=n.combine(s[d],h):s[d]=h}return s}(e,i):e,p=i.plainObjects?Object.create(null):{},u=Object.keys(c),f=0;f<u.length;++f){var l=u[f],d=s(l,c[l],i);p=n.merge(p,d,i)}return n.compact(p)}},function(e,t,i){"use strict";function n(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,i,r){t=t||"&",i=i||"=";var o={};if("string"!=typeof e||0===e.length)return o;var s=/\+/g;e=e.split(t);var c=1e3;r&&"number"==typeof r.maxKeys&&(c=r.maxKeys);var p=e.length;c>0&&p>c&&(p=c);for(var u=0;u<p;++u){var f,l,d,h,m=e[u].replace(s,"%20"),b=m.indexOf(i);b>=0?(f=m.substr(0,b),l=m.substr(b+1)):(f=m,l=""),d=decodeURIComponent(f),h=decodeURIComponent(l),n(o,d)?a(o[d])?o[d].push(h):o[d]=[o[d],h]:o[d]=h}return o};var a=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,i){"use strict";var n=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,i,s){return t=t||"&",i=i||"=",null===e&&(e=void 0),"object"==typeof e?r(o(e),(function(o){var s=encodeURIComponent(n(o))+i;return a(e[o])?r(e[o],(function(e){return s+encodeURIComponent(n(e))})).join(t):s+encodeURIComponent(n(e[o]))})).join(t):s?encodeURIComponent(n(s))+i+encodeURIComponent(n(e)):""};var a=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function r(e,t){if(e.map)return e.map(t);for(var i=[],n=0;n<e.length;n++)i.push(t(e[n],n));return i}var o=Object.keys||function(e){var t=[];for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.push(i);return t}},function(e,t,i){"use strict";
/*!
 * merge-descriptors
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e,t,i){if(!e)throw new TypeError("argument dest is required");if(!t)throw new TypeError("argument src is required");void 0===i&&(i=!0);return Object.getOwnPropertyNames(t).forEach((function(a){if(i||!n.call(e,a)){var r=Object.getOwnPropertyDescriptor(t,a);Object.defineProperty(e,a,r)}})),e};var n=Object.prototype.hasOwnProperty},function(e,t,i){"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(197),a=i(87),r=i(57),o=i(202),s=i(90),c=i(8)("express:application"),p=i(203),u=i(58),f=i(14).compileETag,l=i(14).compileQueryParser,d=i(14).compileTrust,h=i(9)("express"),m=i(43),b=i(44),v=i(11).resolve,g=i(21),y=Array.prototype.slice,x=e.exports={};function w(e){"test"!==this.get("env")&&console.error(e.stack||e.toString())}x.init=function(){this.cache={},this.engines={},this.settings={},this.defaultConfiguration()},x.defaultConfiguration=function(){var e="production";this.enable("x-powered-by"),this.set("etag","weak"),this.set("env",e),this.set("query parser","extended"),this.set("subdomain offset",2),this.set("trust proxy",!1),Object.defineProperty(this.settings,"@@symbol:trust_proxy_default",{configurable:!0,value:!0}),c("booting in %s mode",e),this.on("mount",(function(e){!0===this.settings["@@symbol:trust_proxy_default"]&&"function"==typeof e.settings["trust proxy fn"]&&(delete this.settings["trust proxy"],delete this.settings["trust proxy fn"]),g(this.request,e.request),g(this.response,e.response),g(this.engines,e.engines),g(this.settings,e.settings)})),this.locals=Object.create(null),this.mountpath="/",this.locals.settings=this.settings,this.set("view",p),this.set("views",v("views")),this.set("jsonp callback name","callback"),this.enable("view cache"),Object.defineProperty(this,"router",{get:function(){throw new Error("'app.router' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.")}})},x.lazyrouter=function(){this._router||(this._router=new a({caseSensitive:this.enabled("case sensitive routing"),strict:this.enabled("strict routing")}),this._router.use(s(this.get("query parser fn"))),this._router.use(o.init(this)))},x.handle=function(e,t,i){var a=this._router,r=i||n(e,t,{env:this.get("env"),onerror:w.bind(this)});if(!a)return c("no routes defined on app"),void r();a.handle(e,t,r)},x.use=function(e){var t=0,i="/";if("function"!=typeof e){for(var n=e;Array.isArray(n)&&0!==n.length;)n=n[0];"function"!=typeof n&&(t=1,i=e)}var a=m(y.call(arguments,t));if(0===a.length)throw new TypeError("app.use() requires a middleware function");this.lazyrouter();var r=this._router;return a.forEach((function(e){if(!e||!e.handle||!e.set)return r.use(i,e);c(".use app under %s",i),e.mountpath=i,e.parent=this,r.use(i,(function(t,i,n){var a=t.app;e.handle(t,i,(function(e){g(t,a.request),g(i,a.response),n(e)}))})),e.emit("mount",this)}),this),this},x.route=function(e){return this.lazyrouter(),this._router.route(e)},x.engine=function(e,t){if("function"!=typeof t)throw new Error("callback function required");var i="."!==e[0]?"."+e:e;return this.engines[i]=t,this},x.param=function(e,t){if(this.lazyrouter(),Array.isArray(e)){for(var i=0;i<e.length;i++)this.param(e[i],t);return this}return this._router.param(e,t),this},x.set=function(e,t){if(1===arguments.length)return this.settings[e];switch(c('set "%s" to %o',e,t),this.settings[e]=t,e){case"etag":this.set("etag fn",f(t));break;case"query parser":this.set("query parser fn",l(t));break;case"trust proxy":this.set("trust proxy fn",d(t)),Object.defineProperty(this.settings,"@@symbol:trust_proxy_default",{configurable:!0,value:!1})}return this},x.path=function(){return this.parent?this.parent.path()+this.mountpath:""},x.enabled=function(e){return Boolean(this.set(e))},x.disabled=function(e){return!this.set(e)},x.enable=function(e){return this.set(e,!0)},x.disable=function(e){return this.set(e,!1)},r.forEach((function(e){x[e]=function(t){if("get"===e&&1===arguments.length)return this.set(t);this.lazyrouter();var i=this._router.route(t);return i[e].apply(i,y.call(arguments,1)),this}})),x.all=function(e){this.lazyrouter();for(var t=this._router.route(e),i=y.call(arguments,1),n=0;n<r.length;n++)t[r[n]].apply(t,i);return this},x.del=h.function(x.delete,"app.del: Use app.delete instead"),x.render=function(e,t,i){var n,a=this.cache,r=i,o=this.engines,s=t,c={};if("function"==typeof t&&(r=t,s={}),b(c,this.locals),s._locals&&b(c,s._locals),b(c,s),null==c.cache&&(c.cache=this.enabled("view cache")),c.cache&&(n=a[e]),!n){if(!(n=new(this.get("view"))(e,{defaultEngine:this.get("view engine"),root:this.get("views"),engines:o})).path){var p=Array.isArray(n.root)&&n.root.length>1?'directories "'+n.root.slice(0,-1).join('", "')+'" or "'+n.root[n.root.length-1]+'"':'directory "'+n.root+'"',u=new Error('Failed to lookup view "'+e+'" in views '+p);return u.view=n,r(u)}c.cache&&(a[e]=n)}!function(e,t,i){try{e.render(t,i)}catch(e){i(e)}}(n,c,r)},x.listen=function(){var e=u.createServer(this);return e.listen.apply(e,arguments)}},function(e,t,i){"use strict";(function(t,n,a){
/*!
 * finalhandler
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */
var r=i(8)("finalhandler"),o=i(41),s=i(42),c=i(37),p=i(27),u=i(22),f=i(76),l=/\x20{2}/g,d=/\n/g,h="function"==typeof t?t:function(e){n.nextTick(e.bind.apply(e,arguments))},m=c.isFinished;function b(e){return"boolean"!=typeof e.headersSent?Boolean(e._header):e.headersSent}e.exports=function(e,t,i){var n=i||{},v=n.env||"production",g=n.onerror;return function(i){var n,y,x;if(i||!b(t)){if(i?(void 0===(x=function(e){if("number"==typeof e.status&&e.status>=400&&e.status<600)return e.status;if("number"==typeof e.statusCode&&e.statusCode>=400&&e.statusCode<600)return e.statusCode;return}(i))?x=function(e){var t=e.statusCode;("number"!=typeof t||t<400||t>599)&&(t=500);return t}(t):n=function(e){if(!e.headers||"object"!=typeof e.headers)return;for(var t=Object.create(null),i=Object.keys(e.headers),n=0;n<i.length;n++){var a=i[n];t[a]=e.headers[a]}return t}(i),y=function(e,t,i){var n;"production"!==i&&((n=e.stack)||"function"!=typeof e.toString||(n=e.toString()));return n||u[t]}(i,x,v)):(x=404,y="Cannot "+e.method+" "+o(function(e){try{return p.original(e).pathname}catch(e){return"resource"}}(e))),r("default %s",x),i&&g&&h(g,i,e,t),b(t))return r("cannot %d after headers sent",x),void e.socket.destroy();!function(e,t,i,n,r){function o(){var o=function(e){return'<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>'+s(e).replace(d,"<br>").replace(l," &nbsp;")+"</pre>\n</body>\n</html>\n"}(r);t.statusCode=i,t.statusMessage=u[i],function(e,t){if(!t)return;for(var i=Object.keys(t),n=0;n<i.length;n++){var a=i[n];e.setHeader(a,t[a])}}(t,n),t.setHeader("Content-Security-Policy","default-src 'none'"),t.setHeader("X-Content-Type-Options","nosniff"),t.setHeader("Content-Type","text/html; charset=utf-8"),t.setHeader("Content-Length",a.byteLength(o,"utf8")),"HEAD"!==e.method?t.end(o,"utf8"):t.end()}if(m(e))return void o();f(e),c(e,o),e.resume()}(e,t,x,n,y)}else r("cannot 404 after headers sent")}}}).call(this,i(23).setImmediate,i(3),i(2).Buffer)},function(e,t,i){(function(e,n){var a;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(r){t&&t.nodeType,e&&e.nodeType;var o="object"==typeof n&&n;o.global!==o&&o.window!==o&&o.self;var s,c=2147483647,p=/^xn--/,u=/[^\x20-\x7E]/,f=/[\x2E\u3002\uFF0E\uFF61]/g,l={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},d=Math.floor,h=String.fromCharCode;function m(e){throw new RangeError(l[e])}function b(e,t){for(var i=e.length,n=[];i--;)n[i]=t(e[i]);return n}function v(e,t){var i=e.split("@"),n="";return i.length>1&&(n=i[0]+"@",e=i[1]),n+b((e=e.replace(f,".")).split("."),t).join(".")}function g(e){for(var t,i,n=[],a=0,r=e.length;a<r;)(t=e.charCodeAt(a++))>=55296&&t<=56319&&a<r?56320==(64512&(i=e.charCodeAt(a++)))?n.push(((1023&t)<<10)+(1023&i)+65536):(n.push(t),a--):n.push(t);return n}function y(e){return b(e,(function(e){var t="";return e>65535&&(t+=h((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=h(e)})).join("")}function x(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function w(e,t,i){var n=0;for(e=i?d(e/700):e>>1,e+=d(e/t);e>455;n+=36)e=d(e/35);return d(n+36*e/(e+38))}function _(e){var t,i,n,a,r,o,s,p,u,f,l,h=[],b=e.length,v=0,g=128,x=72;for((i=e.lastIndexOf("-"))<0&&(i=0),n=0;n<i;++n)e.charCodeAt(n)>=128&&m("not-basic"),h.push(e.charCodeAt(n));for(a=i>0?i+1:0;a<b;){for(r=v,o=1,s=36;a>=b&&m("invalid-input"),((p=(l=e.charCodeAt(a++))-48<10?l-22:l-65<26?l-65:l-97<26?l-97:36)>=36||p>d((c-v)/o))&&m("overflow"),v+=p*o,!(p<(u=s<=x?1:s>=x+26?26:s-x));s+=36)o>d(c/(f=36-u))&&m("overflow"),o*=f;x=w(v-r,t=h.length+1,0==r),d(v/t)>c-g&&m("overflow"),g+=d(v/t),v%=t,h.splice(v++,0,g)}return y(h)}function k(e){var t,i,n,a,r,o,s,p,u,f,l,b,v,y,_,k=[];for(b=(e=g(e)).length,t=128,i=0,r=72,o=0;o<b;++o)(l=e[o])<128&&k.push(h(l));for(n=a=k.length,a&&k.push("-");n<b;){for(s=c,o=0;o<b;++o)(l=e[o])>=t&&l<s&&(s=l);for(s-t>d((c-i)/(v=n+1))&&m("overflow"),i+=(s-t)*v,t=s,o=0;o<b;++o)if((l=e[o])<t&&++i>c&&m("overflow"),l==t){for(p=i,u=36;!(p<(f=u<=r?1:u>=r+26?26:u-r));u+=36)_=p-f,y=36-f,k.push(h(x(f+_%y,0))),p=d(_/y);k.push(h(x(p,0))),r=w(i,v,n==a),i=0,++n}++i,++t}return k.join("")}s={version:"1.4.1",ucs2:{decode:g,encode:y},decode:_,encode:k,toASCII:function(e){return v(e,(function(e){return u.test(e)?"xn--"+k(e):e}))},toUnicode:function(e){return v(e,(function(e){return p.test(e)?_(e.slice(4).toLowerCase()):e}))}},void 0===(a=function(){return s}.call(t,i,t,e))||(e.exports=a)}()}).call(this,i(56)(e),i(5))},function(e,t,i){"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},function(e,t){e.exports=function e(t,n,a){n=n||[];var r,o=(a=a||{}).strict,s=!1!==a.end,c=a.sensitive?"":"i",p=0,u=n.length,f=0,l=0;if(t instanceof RegExp){for(;r=i.exec(t.source);)n.push({name:l++,optional:!1,offset:r.index});return t}if(Array.isArray(t))return t=t.map((function(t){return e(t,n,a).source})),new RegExp("(?:"+t.join("|")+")",c);t=("^"+t+(o?"":"/"===t[t.length-1]?"?":"/?")).replace(/\/\(/g,"/(?:").replace(/([\/\.])/g,"\\$1").replace(/(\\\/)?(\\\.)?:(\w+)(\(.*?\))?(\*)?(\?)?/g,(function(e,t,i,a,r,o,s,c){t=t||"",i=i||"",r=r||"([^\\/"+i+"]+?)",s=s||"",n.push({name:a,optional:!!s,offset:c+p});var u=(s?"":t)+"(?:"+i+(s?t:"")+r+(o?"((?:[\\/"+i+"].+?)?)":"")+")"+s;return p+=u.length-e.length,u})).replace(/\*/g,(function(e,t){for(var i=n.length;i-- >u&&n[i].offset>t;)n[i].offset+=3;return"(.*)"}));for(;r=i.exec(t);){for(var d=0,h=r.index;"\\"===t.charAt(--h);)d++;d%2!=1&&((u+f===n.length||n[u+f].offset>r.index)&&n.splice(u+f,0,{name:l++,optional:!1,offset:r.index}),f++)}return t+=s?"$":"/"===t[t.length-1]?"":"(?=\\/|$)",new RegExp(t,c)};var i=/\((?!\?)/g},function(e,t){},function(e,t,i){"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(21);t.init=function(e){return function(t,i,a){e.enabled("x-powered-by")&&i.setHeader("X-Powered-By","Express"),t.res=i,i.req=t,t.next=a,n(t,e.request),n(i,e.response),i.locals=i.locals||Object.create(null),a()}}},function(e,t,i){"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(8)("express:view"),a=i(11),r=i(17),o=a.dirname,s=a.basename,c=a.extname,p=a.join,u=a.resolve;function f(e,t){var a=t||{};if(this.defaultEngine=a.defaultEngine,this.ext=c(e),this.name=e,this.root=a.root,!this.ext&&!this.defaultEngine)throw new Error("No default engine was specified and no extension was provided.");var r=e;if(this.ext||(this.ext="."!==this.defaultEngine[0]?"."+this.defaultEngine:this.defaultEngine,r+=this.ext),!a.engines[this.ext]){var o=this.ext.substr(1);n('require "%s"',o);var s=i(204)(o).__express;if("function"!=typeof s)throw new Error('Module "'+o+'" does not provide a view engine.');a.engines[this.ext]=s}this.engine=a.engines[this.ext],this.path=this.lookup(r)}function l(e){n('stat "%s"',e);try{return r.statSync(e)}catch(e){return}}e.exports=f,f.prototype.lookup=function(e){var t,i=[].concat(this.root);n('lookup "%s"',e);for(var a=0;a<i.length&&!t;a++){var r=i[a],c=u(r,e),p=o(c),f=s(c);t=this.resolve(p,f)}return t},f.prototype.render=function(e,t){n('render "%s"',this.path),this.engine(this.path,e,t)},f.prototype.resolve=function(e,t){var i=this.ext,n=p(e,t),a=l(n);return a&&a.isFile()||(a=l(n=p(e,s(t,i),"index"+i)))&&a.isFile()?n:void 0}},function(e,t){function i(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}i.keys=function(){return[]},i.resolve=i,e.exports=i,i.id=204},function(e,t,i){(function(t,n,a){var r=i(91),o=i(0),s=i(92),c=i(24),p=i(206),u=s.IncomingMessage,f=s.readyStates;var l=e.exports=function(e){var i,n=this;c.Writable.call(n),n._opts=e,n._body=[],n._headers={},e.auth&&n.setHeader("Authorization","Basic "+new t(e.auth).toString("base64")),Object.keys(e.headers).forEach((function(t){n.setHeader(t,e.headers[t])}));var a=!0;if("disable-fetch"===e.mode||"requestTimeout"in e&&!r.abortController)a=!1,i=!0;else if("prefer-streaming"===e.mode)i=!1;else if("allow-wrong-content-type"===e.mode)i=!r.overrideMimeType;else{if(e.mode&&"default"!==e.mode&&"prefer-fast"!==e.mode)throw new Error("Invalid value for opts.mode");i=!0}n._mode=function(e,t){return r.fetch&&t?"fetch":r.mozchunkedarraybuffer?"moz-chunked-arraybuffer":r.msstream?"ms-stream":r.arraybuffer&&e?"arraybuffer":r.vbArray&&e?"text:vbarray":"text"}(i,a),n._fetchTimer=null,n.on("finish",(function(){n._onFinish()}))};o(l,c.Writable),l.prototype.setHeader=function(e,t){var i=e.toLowerCase();-1===d.indexOf(i)&&(this._headers[i]={name:e,value:t})},l.prototype.getHeader=function(e){var t=this._headers[e.toLowerCase()];return t?t.value:null},l.prototype.removeHeader=function(e){delete this._headers[e.toLowerCase()]},l.prototype._onFinish=function(){var e=this;if(!e._destroyed){var i=e._opts,o=e._headers,s=null;"GET"!==i.method&&"HEAD"!==i.method&&(s=r.arraybuffer?p(t.concat(e._body)):r.blobConstructor?new n.Blob(e._body.map((function(e){return p(e)})),{type:(o["content-type"]||{}).value||""}):t.concat(e._body).toString());var c=[];if(Object.keys(o).forEach((function(e){var t=o[e].name,i=o[e].value;Array.isArray(i)?i.forEach((function(e){c.push([t,e])})):c.push([t,i])})),"fetch"===e._mode){var u=null;if(r.abortController){var l=new AbortController;u=l.signal,e._fetchAbortController=l,"requestTimeout"in i&&0!==i.requestTimeout&&(e._fetchTimer=n.setTimeout((function(){e.emit("requestTimeout"),e._fetchAbortController&&e._fetchAbortController.abort()}),i.requestTimeout))}n.fetch(e._opts.url,{method:e._opts.method,headers:c,body:s||void 0,mode:"cors",credentials:i.withCredentials?"include":"same-origin",signal:u}).then((function(t){e._fetchResponse=t,e._connect()}),(function(t){n.clearTimeout(e._fetchTimer),e._destroyed||e.emit("error",t)}))}else{var d=e._xhr=new n.XMLHttpRequest;try{d.open(e._opts.method,e._opts.url,!0)}catch(t){return void a.nextTick((function(){e.emit("error",t)}))}"responseType"in d&&(d.responseType=e._mode.split(":")[0]),"withCredentials"in d&&(d.withCredentials=!!i.withCredentials),"text"===e._mode&&"overrideMimeType"in d&&d.overrideMimeType("text/plain; charset=x-user-defined"),"requestTimeout"in i&&(d.timeout=i.requestTimeout,d.ontimeout=function(){e.emit("requestTimeout")}),c.forEach((function(e){d.setRequestHeader(e[0],e[1])})),e._response=null,d.onreadystatechange=function(){switch(d.readyState){case f.LOADING:case f.DONE:e._onXHRProgress()}},"moz-chunked-arraybuffer"===e._mode&&(d.onprogress=function(){e._onXHRProgress()}),d.onerror=function(){e._destroyed||e.emit("error",new Error("XHR error"))};try{d.send(s)}catch(t){return void a.nextTick((function(){e.emit("error",t)}))}}}},l.prototype._onXHRProgress=function(){(function(e){try{var t=e.status;return null!==t&&0!==t}catch(e){return!1}})(this._xhr)&&!this._destroyed&&(this._response||this._connect(),this._response._onXHRProgress())},l.prototype._connect=function(){var e=this;e._destroyed||(e._response=new u(e._xhr,e._fetchResponse,e._mode,e._fetchTimer),e._response.on("error",(function(t){e.emit("error",t)})),e.emit("response",e._response))},l.prototype._write=function(e,t,i){this._body.push(e),i()},l.prototype.abort=l.prototype.destroy=function(){this._destroyed=!0,n.clearTimeout(this._fetchTimer),this._response&&(this._response._destroyed=!0),this._xhr?this._xhr.abort():this._fetchAbortController&&this._fetchAbortController.abort()},l.prototype.end=function(e,t,i){"function"==typeof e&&(i=e,e=void 0),c.Writable.prototype.end.call(this,e,t,i)},l.prototype.flushHeaders=function(){},l.prototype.setTimeout=function(){},l.prototype.setNoDelay=function(){},l.prototype.setSocketKeepAlive=function(){};var d=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","via"]}).call(this,i(2).Buffer,i(5),i(3))},function(e,t,i){var n=i(2).Buffer;e.exports=function(e){if(e instanceof Uint8Array){if(0===e.byteOffset&&e.byteLength===e.buffer.byteLength)return e.buffer;if("function"==typeof e.buffer.slice)return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}if(n.isBuffer(e)){for(var t=new Uint8Array(e.length),i=e.length,a=0;a<i;a++)t[a]=e[a];return t.buffer}throw new Error("Argument must be a Buffer")}},function(e,t){e.exports=function(){for(var e={},t=0;t<arguments.length;t++){var n=arguments[t];for(var a in n)i.call(n,a)&&(e[a]=n[a])}return e};var i=Object.prototype.hasOwnProperty},function(e,t){e.exports={100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",208:"Already Reported",226:"IM Used",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",508:"Loop Detected",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}},function(e,t,i){var n=i(2),a=n.Buffer;function r(e,t){for(var i in e)t[i]=e[i]}function o(e,t,i){return a(e,t,i)}a.from&&a.alloc&&a.allocUnsafe&&a.allocUnsafeSlow?e.exports=n:(r(n,t),t.Buffer=o),r(a,o),o.from=function(e,t,i){if("number"==typeof e)throw new TypeError("Argument must not be a number");return a(e,t,i)},o.alloc=function(e,t,i){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=a(e);return void 0!==t?"string"==typeof i?n.fill(t,i):n.fill(t):n.fill(0),n},o.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return a(e)},o.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},function(e,t,i){"use strict";
/*!
 * http-errors
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(9)("http-errors"),a=i(21),r=i(22),o=i(0),s=i(71);function c(e){return Number(String(e).charAt(0)+"00")}function p(e,t){var i=Object.getOwnPropertyDescriptor(e,"name");i&&i.configurable&&(i.value=t,Object.defineProperty(e,"name",i))}e.exports=function e(){for(var t,i,a=500,o={},s=0;s<arguments.length;s++){var p=arguments[s];if(p instanceof Error)a=(t=p).status||t.statusCode||a;else switch(typeof p){case"string":i=p;break;case"number":a=p,0!==s&&n("non-first-argument status code; replace with createError("+p+", ...)");break;case"object":o=p}}"number"==typeof a&&(a<400||a>=600)&&n("non-error status code; use only 4xx or 5xx status codes");("number"!=typeof a||!r[a]&&(a<400||a>=600))&&(a=500);var u=e[a]||e[c(a)];t||(t=u?new u(i):new Error(i||r[a]),Error.captureStackTrace(t,e));u&&t instanceof u&&t.status===a||(t.expose=a<500,t.status=t.statusCode=a);for(var f in o)"status"!==f&&"statusCode"!==f&&(t[f]=o[f]);return t},e.exports.HttpError=function(){function e(){throw new TypeError("cannot construct abstract class")}return o(e,Error),e}(),function(e,t,i){t.forEach((function(t){var n,u=s(r[t]);switch(c(t)){case 400:n=function(e,t,i){var n=t.match(/Error$/)?t:t+"Error";function s(e){var t=null!=e?e:r[i],o=new Error(t);return Error.captureStackTrace(o,s),a(o,s.prototype),Object.defineProperty(o,"message",{enumerable:!0,configurable:!0,value:t,writable:!0}),Object.defineProperty(o,"name",{enumerable:!1,configurable:!0,value:n,writable:!0}),o}return o(s,e),p(s,n),s.prototype.status=i,s.prototype.statusCode=i,s.prototype.expose=!0,s}(i,u,t);break;case 500:n=function(e,t,i){var n=t.match(/Error$/)?t:t+"Error";function s(e){var t=null!=e?e:r[i],o=new Error(t);return Error.captureStackTrace(o,s),a(o,s.prototype),Object.defineProperty(o,"message",{enumerable:!0,configurable:!0,value:t,writable:!0}),Object.defineProperty(o,"name",{enumerable:!1,configurable:!0,value:n,writable:!0}),o}return o(s,e),p(s,n),s.prototype.status=i,s.prototype.statusCode=i,s.prototype.expose=!1,s}(i,u,t)}n&&(e[t]=n,e[u]=n)})),e["I'mateapot"]=n.function(e.ImATeapot,'"I\'mateapot"; use "ImATeapot" instead')}(e.exports,r.codes,e.exports.HttpError)},function(e,t,i){"use strict";
/*!
 * destroy
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */var n=i(17).ReadStream,a=i(16);function r(){"number"==typeof this.fd&&this.close()}e.exports=function(e){if(e instanceof n)return function(e){e.destroy(),"function"==typeof e.close&&e.on("open",r);return e}(e);if(!(e instanceof a))return e;"function"==typeof e.destroy&&e.destroy();return e}},function(e,t,i){var n=i(0),a=i(19),r=i(1).Buffer,o=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function c(){this.init(),this._w=s,a.call(this,64,56)}function p(e){return e<<30|e>>>2}function u(e,t,i,n){return 0===e?t&i|~t&n:2===e?t&i|t&n|i&n:t^i^n}n(c,a),c.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},c.prototype._update=function(e){for(var t,i=this._w,n=0|this._a,a=0|this._b,r=0|this._c,s=0|this._d,c=0|this._e,f=0;f<16;++f)i[f]=e.readInt32BE(4*f);for(;f<80;++f)i[f]=i[f-3]^i[f-8]^i[f-14]^i[f-16];for(var l=0;l<80;++l){var d=~~(l/20),h=0|((t=n)<<5|t>>>27)+u(d,a,r,s)+c+i[l]+o[d];c=s,s=r,r=p(a),a=n,n=h}this._a=n+this._a|0,this._b=a+this._b|0,this._c=r+this._c|0,this._d=s+this._d|0,this._e=c+this._e|0},c.prototype._hash=function(){var e=r.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=c},function(e,t,i){var n=i(0),a=i(19),r=i(1).Buffer,o=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function c(){this.init(),this._w=s,a.call(this,64,56)}function p(e){return e<<5|e>>>27}function u(e){return e<<30|e>>>2}function f(e,t,i,n){return 0===e?t&i|~t&n:2===e?t&i|t&n|i&n:t^i^n}n(c,a),c.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},c.prototype._update=function(e){for(var t,i=this._w,n=0|this._a,a=0|this._b,r=0|this._c,s=0|this._d,c=0|this._e,l=0;l<16;++l)i[l]=e.readInt32BE(4*l);for(;l<80;++l)i[l]=(t=i[l-3]^i[l-8]^i[l-14]^i[l-16])<<1|t>>>31;for(var d=0;d<80;++d){var h=~~(d/20),m=p(n)+f(h,a,r,s)+c+i[d]+o[h]|0;c=s,s=r,r=u(a),a=n,n=m}this._a=n+this._a|0,this._b=a+this._b|0,this._c=r+this._c|0,this._d=s+this._d|0,this._e=c+this._e|0},c.prototype._hash=function(){var e=r.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=c},function(e,t,i){var n=i(0),a=i(98),r=i(19),o=i(1).Buffer,s=new Array(64);function c(){this.init(),this._w=s,r.call(this,64,56)}n(c,a),c.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},c.prototype._hash=function(){var e=o.allocUnsafe(28);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e},e.exports=c},function(e,t,i){var n=i(0),a=i(99),r=i(19),o=i(1).Buffer,s=new Array(160);function c(){this.init(),this._w=s,r.call(this,128,112)}n(c,a),c.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},c.prototype._hash=function(){var e=o.allocUnsafe(48);function t(t,i,n){e.writeInt32BE(t,n),e.writeInt32BE(i,n+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),e},e.exports=c},function(e,t,i){"use strict";var n=i(0),a=i(1).Buffer,r=i(12),o=a.alloc(128);function s(e,t){r.call(this,"digest"),"string"==typeof t&&(t=a.from(t)),this._alg=e,this._key=t,t.length>64?t=e(t):t.length<64&&(t=a.concat([t,o],64));for(var i=this._ipad=a.allocUnsafe(64),n=this._opad=a.allocUnsafe(64),s=0;s<64;s++)i[s]=54^t[s],n[s]=92^t[s];this._hash=[i]}n(s,r),s.prototype._update=function(e){this._hash.push(e)},s.prototype._final=function(){var e=this._alg(a.concat(this._hash));return this._alg(a.concat([this._opad,e]))},e.exports=s},function(e,t,i){e.exports=i(102)},function(e,t,i){(function(t,n){var a,r=i(104),o=i(105),s=i(106),c=i(1).Buffer,p=t.crypto&&t.crypto.subtle,u={sha:"SHA-1","sha-1":"SHA-1",sha1:"SHA-1",sha256:"SHA-256","sha-256":"SHA-256",sha384:"SHA-384","sha-384":"SHA-384","sha-512":"SHA-512",sha512:"SHA-512"},f=[];function l(e,t,i,n,a){return p.importKey("raw",e,{name:"PBKDF2"},!1,["deriveBits"]).then((function(e){return p.deriveBits({name:"PBKDF2",salt:t,iterations:i,hash:{name:a}},e,n<<3)})).then((function(e){return c.from(e)}))}e.exports=function(e,i,d,h,m,b){"function"==typeof m&&(b=m,m=void 0);var v=u[(m=m||"sha1").toLowerCase()];if(!v||"function"!=typeof t.Promise)return n.nextTick((function(){var t;try{t=s(e,i,d,h,m)}catch(e){return b(e)}b(null,t)}));if(r(e,i,d,h),"function"!=typeof b)throw new Error("No callback provided to pbkdf2");c.isBuffer(e)||(e=c.from(e,o)),c.isBuffer(i)||(i=c.from(i,o)),function(e,t){e.then((function(e){n.nextTick((function(){t(null,e)}))}),(function(e){n.nextTick((function(){t(e)}))}))}(function(e){if(t.process&&!t.process.browser)return Promise.resolve(!1);if(!p||!p.importKey||!p.deriveBits)return Promise.resolve(!1);if(void 0!==f[e])return f[e];var i=l(a=a||c.alloc(8),a,10,128,e).then((function(){return!0})).catch((function(){return!1}));return f[e]=i,i}(v).then((function(t){return t?l(e,i,d,h,v):s(e,i,d,h,m)})),b)}}).call(this,i(5),i(3))},function(e,t,i){var n=i(220),a=i(64),r=i(65),o=i(233),s=i(46);function c(e,t,i){if(e=e.toLowerCase(),r[e])return a.createCipheriv(e,t,i);if(o[e])return new n({key:t,iv:i,mode:e});throw new TypeError("invalid suite type")}function p(e,t,i){if(e=e.toLowerCase(),r[e])return a.createDecipheriv(e,t,i);if(o[e])return new n({key:t,iv:i,mode:e,decrypt:!0});throw new TypeError("invalid suite type")}t.createCipher=t.Cipher=function(e,t){var i,n;if(e=e.toLowerCase(),r[e])i=r[e].key,n=r[e].iv;else{if(!o[e])throw new TypeError("invalid suite type");i=8*o[e].key,n=o[e].iv}var a=s(t,!1,i,n);return c(e,a.key,a.iv)},t.createCipheriv=t.Cipheriv=c,t.createDecipher=t.Decipher=function(e,t){var i,n;if(e=e.toLowerCase(),r[e])i=r[e].key,n=r[e].iv;else{if(!o[e])throw new TypeError("invalid suite type");i=8*o[e].key,n=o[e].iv}var a=s(t,!1,i,n);return p(e,a.key,a.iv)},t.createDecipheriv=t.Decipheriv=p,t.listCiphers=t.getCiphers=function(){return Object.keys(o).concat(a.getCiphers())}},function(e,t,i){var n=i(12),a=i(221),r=i(0),o=i(1).Buffer,s={"des-ede3-cbc":a.CBC.instantiate(a.EDE),"des-ede3":a.EDE,"des-ede-cbc":a.CBC.instantiate(a.EDE),"des-ede":a.EDE,"des-cbc":a.CBC.instantiate(a.DES),"des-ecb":a.DES};function c(e){n.call(this);var t,i=e.mode.toLowerCase(),a=s[i];t=e.decrypt?"decrypt":"encrypt";var r=e.key;o.isBuffer(r)||(r=o.from(r)),"des-ede"!==i&&"des-ede-cbc"!==i||(r=o.concat([r,r.slice(0,8)]));var c=e.iv;o.isBuffer(c)||(c=o.from(c)),this._des=a.create({key:r,iv:c,type:t})}s.des=s["des-cbc"],s.des3=s["des-ede3-cbc"],e.exports=c,r(c,n),c.prototype._update=function(e){return o.from(this._des.update(e))},c.prototype._final=function(){return o.from(this._des.final())}},function(e,t,i){"use strict";t.utils=i(107),t.Cipher=i(63),t.DES=i(108),t.CBC=i(222),t.EDE=i(223)},function(e,t,i){"use strict";var n=i(6),a=i(0),r={};function o(e){n.equal(e.length,8,"Invalid IV length"),this.iv=new Array(8);for(var t=0;t<this.iv.length;t++)this.iv[t]=e[t]}t.instantiate=function(e){function t(t){e.call(this,t),this._cbcInit()}a(t,e);for(var i=Object.keys(r),n=0;n<i.length;n++){var o=i[n];t.prototype[o]=r[o]}return t.create=function(e){return new t(e)},t},r._cbcInit=function(){var e=new o(this.options.iv);this._cbcState=e},r._update=function(e,t,i,n){var a=this._cbcState,r=this.constructor.super_.prototype,o=a.iv;if("encrypt"===this.type){for(var s=0;s<this.blockSize;s++)o[s]^=e[t+s];r._update.call(this,o,0,i,n);for(s=0;s<this.blockSize;s++)o[s]=i[n+s]}else{r._update.call(this,e,t,i,n);for(s=0;s<this.blockSize;s++)i[n+s]^=o[s];for(s=0;s<this.blockSize;s++)o[s]=e[t+s]}}},function(e,t,i){"use strict";var n=i(6),a=i(0),r=i(63),o=i(108);function s(e,t){n.equal(t.length,24,"Invalid key length");var i=t.slice(0,8),a=t.slice(8,16),r=t.slice(16,24);this.ciphers="encrypt"===e?[o.create({type:"encrypt",key:i}),o.create({type:"decrypt",key:a}),o.create({type:"encrypt",key:r})]:[o.create({type:"decrypt",key:r}),o.create({type:"encrypt",key:a}),o.create({type:"decrypt",key:i})]}function c(e){r.call(this,e);var t=new s(this.type,this.options.key);this._edeState=t}a(c,r),e.exports=c,c.create=function(e){return new c(e)},c.prototype._update=function(e,t,i,n){var a=this._edeState;a.ciphers[0]._update(e,t,i,n),a.ciphers[1]._update(i,n,i,n),a.ciphers[2]._update(i,n,i,n)},c.prototype._pad=o.prototype._pad,c.prototype._unpad=o.prototype._unpad},function(e,t,i){var n=i(65),a=i(112),r=i(1).Buffer,o=i(113),s=i(12),c=i(45),p=i(46);function u(e,t,i){s.call(this),this._cache=new l,this._cipher=new c.AES(t),this._prev=r.from(i),this._mode=e,this._autopadding=!0}i(0)(u,s),u.prototype._update=function(e){var t,i;this._cache.add(e);for(var n=[];t=this._cache.get();)i=this._mode.encrypt(this,t),n.push(i);return r.concat(n)};var f=r.alloc(16,16);function l(){this.cache=r.allocUnsafe(0)}function d(e,t,i){var s=n[e.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof t&&(t=r.from(t)),t.length!==s.key/8)throw new TypeError("invalid key length "+t.length);if("string"==typeof i&&(i=r.from(i)),"GCM"!==s.mode&&i.length!==s.iv)throw new TypeError("invalid iv length "+i.length);return"stream"===s.type?new o(s.module,t,i):"auth"===s.type?new a(s.module,t,i):new u(s.module,t,i)}u.prototype._final=function(){var e=this._cache.flush();if(this._autopadding)return e=this._mode.encrypt(this,e),this._cipher.scrub(),e;if(!e.equals(f))throw this._cipher.scrub(),new Error("data not multiple of block length")},u.prototype.setAutoPadding=function(e){return this._autopadding=!!e,this},l.prototype.add=function(e){this.cache=r.concat([this.cache,e])},l.prototype.get=function(){if(this.cache.length>15){var e=this.cache.slice(0,16);return this.cache=this.cache.slice(16),e}return null},l.prototype.flush=function(){for(var e=16-this.cache.length,t=r.allocUnsafe(e),i=-1;++i<e;)t.writeUInt8(e,i);return r.concat([this.cache,t])},t.createCipheriv=d,t.createCipher=function(e,t){var i=n[e.toLowerCase()];if(!i)throw new TypeError("invalid suite type");var a=p(t,!1,i.key,i.iv);return d(e,a.key,a.iv)}},function(e,t){t.encrypt=function(e,t){return e._cipher.encryptBlock(t)},t.decrypt=function(e,t){return e._cipher.decryptBlock(t)}},function(e,t,i){var n=i(29);t.encrypt=function(e,t){var i=n(t,e._prev);return e._prev=e._cipher.encryptBlock(i),e._prev},t.decrypt=function(e,t){var i=e._prev;e._prev=t;var a=e._cipher.decryptBlock(t);return n(a,i)}},function(e,t,i){var n=i(1).Buffer,a=i(29);function r(e,t,i){var r=t.length,o=a(t,e._cache);return e._cache=e._cache.slice(r),e._prev=n.concat([e._prev,i?t:o]),o}t.encrypt=function(e,t,i){for(var a,o=n.allocUnsafe(0);t.length;){if(0===e._cache.length&&(e._cache=e._cipher.encryptBlock(e._prev),e._prev=n.allocUnsafe(0)),!(e._cache.length<=t.length)){o=n.concat([o,r(e,t,i)]);break}a=e._cache.length,o=n.concat([o,r(e,t.slice(0,a),i)]),t=t.slice(a)}return o}},function(e,t,i){var n=i(1).Buffer;function a(e,t,i){var a=e._cipher.encryptBlock(e._prev)[0]^t;return e._prev=n.concat([e._prev.slice(1),n.from([i?t:a])]),a}t.encrypt=function(e,t,i){for(var r=t.length,o=n.allocUnsafe(r),s=-1;++s<r;)o[s]=a(e,t[s],i);return o}},function(e,t,i){var n=i(1).Buffer;function a(e,t,i){for(var n,a,o=-1,s=0;++o<8;)n=t&1<<7-o?128:0,s+=(128&(a=e._cipher.encryptBlock(e._prev)[0]^n))>>o%8,e._prev=r(e._prev,i?n:a);return s}function r(e,t){var i=e.length,a=-1,r=n.allocUnsafe(e.length);for(e=n.concat([e,n.from([t])]);++a<i;)r[a]=e[a]<<1|e[a+1]>>7;return r}t.encrypt=function(e,t,i){for(var r=t.length,o=n.allocUnsafe(r),s=-1;++s<r;)o[s]=a(e,t[s],i);return o}},function(e,t,i){(function(e){var n=i(29);function a(e){return e._prev=e._cipher.encryptBlock(e._prev),e._prev}t.encrypt=function(t,i){for(;t._cache.length<i.length;)t._cache=e.concat([t._cache,a(t)]);var r=t._cache.slice(0,i.length);return t._cache=t._cache.slice(i.length),n(i,r)}}).call(this,i(2).Buffer)},function(e,t,i){var n=i(1).Buffer,a=n.alloc(16,0);function r(e){var t=n.allocUnsafe(16);return t.writeUInt32BE(e[0]>>>0,0),t.writeUInt32BE(e[1]>>>0,4),t.writeUInt32BE(e[2]>>>0,8),t.writeUInt32BE(e[3]>>>0,12),t}function o(e){this.h=e,this.state=n.alloc(16,0),this.cache=n.allocUnsafe(0)}o.prototype.ghash=function(e){for(var t=-1;++t<e.length;)this.state[t]^=e[t];this._multiply()},o.prototype._multiply=function(){for(var e,t,i,n=[(e=this.h).readUInt32BE(0),e.readUInt32BE(4),e.readUInt32BE(8),e.readUInt32BE(12)],a=[0,0,0,0],o=-1;++o<128;){for(0!=(this.state[~~(o/8)]&1<<7-o%8)&&(a[0]^=n[0],a[1]^=n[1],a[2]^=n[2],a[3]^=n[3]),i=0!=(1&n[3]),t=3;t>0;t--)n[t]=n[t]>>>1|(1&n[t-1])<<31;n[0]=n[0]>>>1,i&&(n[0]=n[0]^225<<24)}this.state=r(a)},o.prototype.update=function(e){var t;for(this.cache=n.concat([this.cache,e]);this.cache.length>=16;)t=this.cache.slice(0,16),this.cache=this.cache.slice(16),this.ghash(t)},o.prototype.final=function(e,t){return this.cache.length&&this.ghash(n.concat([this.cache,a],16)),this.ghash(r([0,e,0,t])),this.state},e.exports=o},function(e,t,i){var n=i(112),a=i(1).Buffer,r=i(65),o=i(113),s=i(12),c=i(45),p=i(46);function u(e,t,i){s.call(this),this._cache=new f,this._last=void 0,this._cipher=new c.AES(t),this._prev=a.from(i),this._mode=e,this._autopadding=!0}function f(){this.cache=a.allocUnsafe(0)}function l(e,t,i){var s=r[e.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof i&&(i=a.from(i)),"GCM"!==s.mode&&i.length!==s.iv)throw new TypeError("invalid iv length "+i.length);if("string"==typeof t&&(t=a.from(t)),t.length!==s.key/8)throw new TypeError("invalid key length "+t.length);return"stream"===s.type?new o(s.module,t,i,!0):"auth"===s.type?new n(s.module,t,i,!0):new u(s.module,t,i)}i(0)(u,s),u.prototype._update=function(e){var t,i;this._cache.add(e);for(var n=[];t=this._cache.get(this._autopadding);)i=this._mode.decrypt(this,t),n.push(i);return a.concat(n)},u.prototype._final=function(){var e=this._cache.flush();if(this._autopadding)return function(e){var t=e[15];if(t<1||t>16)throw new Error("unable to decrypt data");var i=-1;for(;++i<t;)if(e[i+(16-t)]!==t)throw new Error("unable to decrypt data");if(16===t)return;return e.slice(0,16-t)}(this._mode.decrypt(this,e));if(e)throw new Error("data not multiple of block length")},u.prototype.setAutoPadding=function(e){return this._autopadding=!!e,this},f.prototype.add=function(e){this.cache=a.concat([this.cache,e])},f.prototype.get=function(e){var t;if(e){if(this.cache.length>16)return t=this.cache.slice(0,16),this.cache=this.cache.slice(16),t}else if(this.cache.length>=16)return t=this.cache.slice(0,16),this.cache=this.cache.slice(16),t;return null},f.prototype.flush=function(){if(this.cache.length)return this.cache},t.createDecipher=function(e,t){var i=r[e.toLowerCase()];if(!i)throw new TypeError("invalid suite type");var n=p(t,!1,i.key,i.iv);return l(e,n.key,n.iv)},t.createDecipheriv=l},function(e,t){t["des-ecb"]={key:8,iv:0},t["des-cbc"]=t.des={key:8,iv:8},t["des-ede3-cbc"]=t.des3={key:24,iv:8},t["des-ede3"]={key:24,iv:0},t["des-ede-cbc"]={key:16,iv:8},t["des-ede"]={key:16,iv:0}},function(e,t,i){(function(e){var n=i(114),a=i(237),r=i(238);var o={binary:!0,hex:!0,base64:!0};t.DiffieHellmanGroup=t.createDiffieHellmanGroup=t.getDiffieHellman=function(t){var i=new e(a[t].prime,"hex"),n=new e(a[t].gen,"hex");return new r(i,n)},t.createDiffieHellman=t.DiffieHellman=function t(i,a,s,c){return e.isBuffer(a)||void 0===o[a]?t(i,"binary",a,s):(a=a||"binary",c=c||"binary",s=s||new e([2]),e.isBuffer(s)||(s=new e(s,c)),"number"==typeof i?new r(n(i,s),s,!0):(e.isBuffer(i)||(i=new e(i,a)),new r(i,s,!0)))}}).call(this,i(2).Buffer)},function(e,t){},function(e,t){},function(e){e.exports=JSON.parse('{"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}')},function(e,t,i){(function(t){var n=i(4),a=new(i(115)),r=new n(24),o=new n(11),s=new n(10),c=new n(3),p=new n(7),u=i(114),f=i(18);function l(e,i){return i=i||"utf8",t.isBuffer(e)||(e=new t(e,i)),this._pub=new n(e),this}function d(e,i){return i=i||"utf8",t.isBuffer(e)||(e=new t(e,i)),this._priv=new n(e),this}e.exports=m;var h={};function m(e,t,i){this.setGenerator(t),this.__prime=new n(e),this._prime=n.mont(this.__prime),this._primeLen=e.length,this._pub=void 0,this._priv=void 0,this._primeCode=void 0,i?(this.setPublicKey=l,this.setPrivateKey=d):this._primeCode=8}function b(e,i){var n=new t(e.toArray());return i?n.toString(i):n}Object.defineProperty(m.prototype,"verifyError",{enumerable:!0,get:function(){return"number"!=typeof this._primeCode&&(this._primeCode=function(e,t){var i=t.toString("hex"),n=[i,e.toString(16)].join("_");if(n in h)return h[n];var f,l=0;if(e.isEven()||!u.simpleSieve||!u.fermatTest(e)||!a.test(e))return l+=1,l+="02"===i||"05"===i?8:4,h[n]=l,l;switch(a.test(e.shrn(1))||(l+=2),i){case"02":e.mod(r).cmp(o)&&(l+=8);break;case"05":(f=e.mod(s)).cmp(c)&&f.cmp(p)&&(l+=8);break;default:l+=4}return h[n]=l,l}(this.__prime,this.__gen)),this._primeCode}}),m.prototype.generateKeys=function(){return this._priv||(this._priv=new n(f(this._primeLen))),this._pub=this._gen.toRed(this._prime).redPow(this._priv).fromRed(),this.getPublicKey()},m.prototype.computeSecret=function(e){var i=(e=(e=new n(e)).toRed(this._prime)).redPow(this._priv).fromRed(),a=new t(i.toArray()),r=this.getPrime();if(a.length<r.length){var o=new t(r.length-a.length);o.fill(0),a=t.concat([o,a])}return a},m.prototype.getPublicKey=function(e){return b(this._pub,e)},m.prototype.getPrivateKey=function(e){return b(this._priv,e)},m.prototype.getPrime=function(e){return b(this.__prime,e)},m.prototype.getGenerator=function(e){return b(this._gen,e)},m.prototype.setGenerator=function(e,i){return i=i||"utf8",t.isBuffer(e)||(e=new t(e,i)),this.__gen=e,this._gen=new n(e),this}}).call(this,i(2).Buffer)},function(e,t,i){(function(t){var n=i(28),a=i(16),r=i(0),o=i(240),s=i(272),c=i(102);function p(e){a.Writable.call(this);var t=c[e];if(!t)throw new Error("Unknown message digest");this._hashType=t.hash,this._hash=n(t.hash),this._tag=t.id,this._signType=t.sign}function u(e){a.Writable.call(this);var t=c[e];if(!t)throw new Error("Unknown message digest");this._hash=n(t.hash),this._tag=t.id,this._signType=t.sign}function f(e){return new p(e)}function l(e){return new u(e)}Object.keys(c).forEach((function(e){c[e].id=new t(c[e].id,"hex"),c[e.toLowerCase()]=c[e]})),r(p,a.Writable),p.prototype._write=function(e,t,i){this._hash.update(e),i()},p.prototype.update=function(e,i){return"string"==typeof e&&(e=new t(e,i)),this._hash.update(e),this},p.prototype.sign=function(e,t){this.end();var i=this._hash.digest(),n=o(i,e,this._hashType,this._signType,this._tag);return t?n.toString(t):n},r(u,a.Writable),u.prototype._write=function(e,t,i){this._hash.update(e),i()},u.prototype.update=function(e,i){return"string"==typeof e&&(e=new t(e,i)),this._hash.update(e),this},u.prototype.verify=function(e,i,n){"string"==typeof i&&(i=new t(i,n)),this.end();var a=this._hash.digest();return s(i,a,e,this._signType,this._tag)},e.exports={Sign:f,Verify:l,createSign:f,createVerify:l}}).call(this,i(2).Buffer)},function(e,t,i){(function(t){var n=i(100),a=i(67),r=i(68).ec,o=i(4),s=i(48),c=i(125);function p(e,i,a,r){if((e=new t(e.toArray())).length<i.byteLength()){var o=new t(i.byteLength()-e.length);o.fill(0),e=t.concat([o,e])}var s=a.length,c=function(e,i){e=(e=u(e,i)).mod(i);var n=new t(e.toArray());if(n.length<i.byteLength()){var a=new t(i.byteLength()-n.length);a.fill(0),n=t.concat([a,n])}return n}(a,i),p=new t(s);p.fill(1);var f=new t(s);return f.fill(0),f=n(r,f).update(p).update(new t([0])).update(e).update(c).digest(),p=n(r,f).update(p).digest(),{k:f=n(r,f).update(p).update(new t([1])).update(e).update(c).digest(),v:p=n(r,f).update(p).digest()}}function u(e,t){var i=new o(e),n=(e.length<<3)-t.bitLength();return n>0&&i.ishrn(n),i}function f(e,i,a){var r,o;do{for(r=new t(0);8*r.length<e.bitLength();)i.v=n(a,i.k).update(i.v).digest(),r=t.concat([r,i.v]);o=u(r,e),i.k=n(a,i.k).update(i.v).update(new t([0])).digest(),i.v=n(a,i.k).update(i.v).digest()}while(-1!==o.cmp(e));return o}function l(e,t,i,n){return e.toRed(o.mont(i)).redPow(t).fromRed().mod(n)}e.exports=function(e,i,n,d,h){var m=s(i);if(m.curve){if("ecdsa"!==d&&"ecdsa/rsa"!==d)throw new Error("wrong private key type");return function(e,i){var n=c[i.curve.join(".")];if(!n)throw new Error("unknown curve "+i.curve.join("."));var a=new r(n).keyFromPrivate(i.privateKey).sign(e);return new t(a.toDER())}(e,m)}if("dsa"===m.type){if("dsa"!==d)throw new Error("wrong private key type");return function(e,i,n){var a,r=i.params.priv_key,s=i.params.p,c=i.params.q,d=i.params.g,h=new o(0),m=u(e,c).mod(c),b=!1,v=p(r,c,e,n);for(;!1===b;)a=f(c,v,n),h=l(d,a,s,c),0===(b=a.invm(c).imul(m.add(r.mul(h))).mod(c)).cmpn(0)&&(b=!1,h=new o(0));return function(e,i){e=e.toArray(),i=i.toArray(),128&e[0]&&(e=[0].concat(e));128&i[0]&&(i=[0].concat(i));var n=[48,e.length+i.length+4,2,e.length];return n=n.concat(e,[2,i.length],i),new t(n)}(h,b)}(e,m,n)}if("rsa"!==d&&"ecdsa/rsa"!==d)throw new Error("wrong private key type");e=t.concat([h,e]);for(var b=m.modulus.byteLength(),v=[0,1];e.length+v.length+1<b;)v.push(255);v.push(0);for(var g=-1;++g<e.length;)v.push(e[g]);return a(v,m)},e.exports.getKey=p,e.exports.makeKey=f}).call(this,i(2).Buffer)},function(e){e.exports=JSON.parse('{"name":"elliptic","version":"6.5.2","description":"EC cryptography","main":"lib/elliptic.js","files":["lib"],"scripts":{"jscs":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","jshint":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","lint":"npm run jscs && npm run jshint","unit":"istanbul test _mocha --reporter=spec test/index.js","test":"npm run lint && npm run unit","version":"grunt dist && git add dist/"},"repository":{"type":"git","url":"git@github.com:indutny/elliptic"},"keywords":["EC","Elliptic","curve","Cryptography"],"author":"Fedor Indutny <fedor@indutny.com>","license":"MIT","bugs":{"url":"https://github.com/indutny/elliptic/issues"},"homepage":"https://github.com/indutny/elliptic","devDependencies":{"brfs":"^1.4.3","coveralls":"^3.0.8","grunt":"^1.0.4","grunt-browserify":"^5.0.0","grunt-cli":"^1.2.0","grunt-contrib-connect":"^1.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^1.0.1","grunt-mocha-istanbul":"^3.0.1","grunt-saucelabs":"^9.0.1","istanbul":"^0.4.2","jscs":"^3.0.7","jshint":"^2.10.3","mocha":"^6.2.2"},"dependencies":{"bn.js":"^4.4.0","brorand":"^1.0.1","hash.js":"^1.0.0","hmac-drbg":"^1.0.0","inherits":"^2.0.1","minimalistic-assert":"^1.0.0","minimalistic-crypto-utils":"^1.0.0"}}')},function(e,t,i){"use strict";var n=i(7),a=i(4),r=i(0),o=i(47),s=n.assert;function c(e){o.call(this,"short",e),this.a=new a(e.a,16).toRed(this.red),this.b=new a(e.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(e),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}function p(e,t,i,n){o.BasePoint.call(this,e,"affine"),null===t&&null===i?(this.x=null,this.y=null,this.inf=!0):(this.x=new a(t,16),this.y=new a(i,16),n&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function u(e,t,i,n){o.BasePoint.call(this,e,"jacobian"),null===t&&null===i&&null===n?(this.x=this.curve.one,this.y=this.curve.one,this.z=new a(0)):(this.x=new a(t,16),this.y=new a(i,16),this.z=new a(n,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}r(c,o),e.exports=c,c.prototype._getEndomorphism=function(e){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var t,i;if(e.beta)t=new a(e.beta,16).toRed(this.red);else{var n=this._getEndoRoots(this.p);t=(t=n[0].cmp(n[1])<0?n[0]:n[1]).toRed(this.red)}if(e.lambda)i=new a(e.lambda,16);else{var r=this._getEndoRoots(this.n);0===this.g.mul(r[0]).x.cmp(this.g.x.redMul(t))?i=r[0]:(i=r[1],s(0===this.g.mul(i).x.cmp(this.g.x.redMul(t))))}return{beta:t,lambda:i,basis:e.basis?e.basis.map((function(e){return{a:new a(e.a,16),b:new a(e.b,16)}})):this._getEndoBasis(i)}}},c.prototype._getEndoRoots=function(e){var t=e===this.p?this.red:a.mont(e),i=new a(2).toRed(t).redInvm(),n=i.redNeg(),r=new a(3).toRed(t).redNeg().redSqrt().redMul(i);return[n.redAdd(r).fromRed(),n.redSub(r).fromRed()]},c.prototype._getEndoBasis=function(e){for(var t,i,n,r,o,s,c,p,u,f=this.n.ushrn(Math.floor(this.n.bitLength()/2)),l=e,d=this.n.clone(),h=new a(1),m=new a(0),b=new a(0),v=new a(1),g=0;0!==l.cmpn(0);){var y=d.div(l);p=d.sub(y.mul(l)),u=b.sub(y.mul(h));var x=v.sub(y.mul(m));if(!n&&p.cmp(f)<0)t=c.neg(),i=h,n=p.neg(),r=u;else if(n&&2==++g)break;c=p,d=l,l=p,b=h,h=u,v=m,m=x}o=p.neg(),s=u;var w=n.sqr().add(r.sqr());return o.sqr().add(s.sqr()).cmp(w)>=0&&(o=t,s=i),n.negative&&(n=n.neg(),r=r.neg()),o.negative&&(o=o.neg(),s=s.neg()),[{a:n,b:r},{a:o,b:s}]},c.prototype._endoSplit=function(e){var t=this.endo.basis,i=t[0],n=t[1],a=n.b.mul(e).divRound(this.n),r=i.b.neg().mul(e).divRound(this.n),o=a.mul(i.a),s=r.mul(n.a),c=a.mul(i.b),p=r.mul(n.b);return{k1:e.sub(o).sub(s),k2:c.add(p).neg()}},c.prototype.pointFromX=function(e,t){(e=new a(e,16)).red||(e=e.toRed(this.red));var i=e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),n=i.redSqrt();if(0!==n.redSqr().redSub(i).cmp(this.zero))throw new Error("invalid point");var r=n.fromRed().isOdd();return(t&&!r||!t&&r)&&(n=n.redNeg()),this.point(e,n)},c.prototype.validate=function(e){if(e.inf)return!0;var t=e.x,i=e.y,n=this.a.redMul(t),a=t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);return 0===i.redSqr().redISub(a).cmpn(0)},c.prototype._endoWnafMulAdd=function(e,t,i){for(var n=this._endoWnafT1,a=this._endoWnafT2,r=0;r<e.length;r++){var o=this._endoSplit(t[r]),s=e[r],c=s._getBeta();o.k1.negative&&(o.k1.ineg(),s=s.neg(!0)),o.k2.negative&&(o.k2.ineg(),c=c.neg(!0)),n[2*r]=s,n[2*r+1]=c,a[2*r]=o.k1,a[2*r+1]=o.k2}for(var p=this._wnafMulAdd(1,n,a,2*r,i),u=0;u<2*r;u++)n[u]=null,a[u]=null;return p},r(p,o.BasePoint),c.prototype.point=function(e,t,i){return new p(this,e,t,i)},c.prototype.pointFromJSON=function(e,t){return p.fromJSON(this,e,t)},p.prototype._getBeta=function(){if(this.curve.endo){var e=this.precomputed;if(e&&e.beta)return e.beta;var t=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(e){var i=this.curve,n=function(e){return i.point(e.x.redMul(i.endo.beta),e.y)};e.beta=t,t.precomputed={beta:null,naf:e.naf&&{wnd:e.naf.wnd,points:e.naf.points.map(n)},doubles:e.doubles&&{step:e.doubles.step,points:e.doubles.points.map(n)}}}return t}},p.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},p.fromJSON=function(e,t,i){"string"==typeof t&&(t=JSON.parse(t));var n=e.point(t[0],t[1],i);if(!t[2])return n;function a(t){return e.point(t[0],t[1],i)}var r=t[2];return n.precomputed={beta:null,doubles:r.doubles&&{step:r.doubles.step,points:[n].concat(r.doubles.points.map(a))},naf:r.naf&&{wnd:r.naf.wnd,points:[n].concat(r.naf.points.map(a))}},n},p.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},p.prototype.isInfinity=function(){return this.inf},p.prototype.add=function(e){if(this.inf)return e;if(e.inf)return this;if(this.eq(e))return this.dbl();if(this.neg().eq(e))return this.curve.point(null,null);if(0===this.x.cmp(e.x))return this.curve.point(null,null);var t=this.y.redSub(e.y);0!==t.cmpn(0)&&(t=t.redMul(this.x.redSub(e.x).redInvm()));var i=t.redSqr().redISub(this.x).redISub(e.x),n=t.redMul(this.x.redSub(i)).redISub(this.y);return this.curve.point(i,n)},p.prototype.dbl=function(){if(this.inf)return this;var e=this.y.redAdd(this.y);if(0===e.cmpn(0))return this.curve.point(null,null);var t=this.curve.a,i=this.x.redSqr(),n=e.redInvm(),a=i.redAdd(i).redIAdd(i).redIAdd(t).redMul(n),r=a.redSqr().redISub(this.x.redAdd(this.x)),o=a.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r,o)},p.prototype.getX=function(){return this.x.fromRed()},p.prototype.getY=function(){return this.y.fromRed()},p.prototype.mul=function(e){return e=new a(e,16),this.isInfinity()?this:this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve.endo?this.curve._endoWnafMulAdd([this],[e]):this.curve._wnafMul(this,e)},p.prototype.mulAdd=function(e,t,i){var n=[this,t],a=[e,i];return this.curve.endo?this.curve._endoWnafMulAdd(n,a):this.curve._wnafMulAdd(1,n,a,2)},p.prototype.jmulAdd=function(e,t,i){var n=[this,t],a=[e,i];return this.curve.endo?this.curve._endoWnafMulAdd(n,a,!0):this.curve._wnafMulAdd(1,n,a,2,!0)},p.prototype.eq=function(e){return this===e||this.inf===e.inf&&(this.inf||0===this.x.cmp(e.x)&&0===this.y.cmp(e.y))},p.prototype.neg=function(e){if(this.inf)return this;var t=this.curve.point(this.x,this.y.redNeg());if(e&&this.precomputed){var i=this.precomputed,n=function(e){return e.neg()};t.precomputed={naf:i.naf&&{wnd:i.naf.wnd,points:i.naf.points.map(n)},doubles:i.doubles&&{step:i.doubles.step,points:i.doubles.points.map(n)}}}return t},p.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},r(u,o.BasePoint),c.prototype.jpoint=function(e,t,i){return new u(this,e,t,i)},u.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var e=this.z.redInvm(),t=e.redSqr(),i=this.x.redMul(t),n=this.y.redMul(t).redMul(e);return this.curve.point(i,n)},u.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},u.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var t=e.z.redSqr(),i=this.z.redSqr(),n=this.x.redMul(t),a=e.x.redMul(i),r=this.y.redMul(t.redMul(e.z)),o=e.y.redMul(i.redMul(this.z)),s=n.redSub(a),c=r.redSub(o);if(0===s.cmpn(0))return 0!==c.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var p=s.redSqr(),u=p.redMul(s),f=n.redMul(p),l=c.redSqr().redIAdd(u).redISub(f).redISub(f),d=c.redMul(f.redISub(l)).redISub(r.redMul(u)),h=this.z.redMul(e.z).redMul(s);return this.curve.jpoint(l,d,h)},u.prototype.mixedAdd=function(e){if(this.isInfinity())return e.toJ();if(e.isInfinity())return this;var t=this.z.redSqr(),i=this.x,n=e.x.redMul(t),a=this.y,r=e.y.redMul(t).redMul(this.z),o=i.redSub(n),s=a.redSub(r);if(0===o.cmpn(0))return 0!==s.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var c=o.redSqr(),p=c.redMul(o),u=i.redMul(c),f=s.redSqr().redIAdd(p).redISub(u).redISub(u),l=s.redMul(u.redISub(f)).redISub(a.redMul(p)),d=this.z.redMul(o);return this.curve.jpoint(f,l,d)},u.prototype.dblp=function(e){if(0===e)return this;if(this.isInfinity())return this;if(!e)return this.dbl();if(this.curve.zeroA||this.curve.threeA){for(var t=this,i=0;i<e;i++)t=t.dbl();return t}var n=this.curve.a,a=this.curve.tinv,r=this.x,o=this.y,s=this.z,c=s.redSqr().redSqr(),p=o.redAdd(o);for(i=0;i<e;i++){var u=r.redSqr(),f=p.redSqr(),l=f.redSqr(),d=u.redAdd(u).redIAdd(u).redIAdd(n.redMul(c)),h=r.redMul(f),m=d.redSqr().redISub(h.redAdd(h)),b=h.redISub(m),v=d.redMul(b);v=v.redIAdd(v).redISub(l);var g=p.redMul(s);i+1<e&&(c=c.redMul(l)),r=m,s=g,p=v}return this.curve.jpoint(r,p.redMul(a),s)},u.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},u.prototype._zeroDbl=function(){var e,t,i;if(this.zOne){var n=this.x.redSqr(),a=this.y.redSqr(),r=a.redSqr(),o=this.x.redAdd(a).redSqr().redISub(n).redISub(r);o=o.redIAdd(o);var s=n.redAdd(n).redIAdd(n),c=s.redSqr().redISub(o).redISub(o),p=r.redIAdd(r);p=(p=p.redIAdd(p)).redIAdd(p),e=c,t=s.redMul(o.redISub(c)).redISub(p),i=this.y.redAdd(this.y)}else{var u=this.x.redSqr(),f=this.y.redSqr(),l=f.redSqr(),d=this.x.redAdd(f).redSqr().redISub(u).redISub(l);d=d.redIAdd(d);var h=u.redAdd(u).redIAdd(u),m=h.redSqr(),b=l.redIAdd(l);b=(b=b.redIAdd(b)).redIAdd(b),e=m.redISub(d).redISub(d),t=h.redMul(d.redISub(e)).redISub(b),i=(i=this.y.redMul(this.z)).redIAdd(i)}return this.curve.jpoint(e,t,i)},u.prototype._threeDbl=function(){var e,t,i;if(this.zOne){var n=this.x.redSqr(),a=this.y.redSqr(),r=a.redSqr(),o=this.x.redAdd(a).redSqr().redISub(n).redISub(r);o=o.redIAdd(o);var s=n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),c=s.redSqr().redISub(o).redISub(o);e=c;var p=r.redIAdd(r);p=(p=p.redIAdd(p)).redIAdd(p),t=s.redMul(o.redISub(c)).redISub(p),i=this.y.redAdd(this.y)}else{var u=this.z.redSqr(),f=this.y.redSqr(),l=this.x.redMul(f),d=this.x.redSub(u).redMul(this.x.redAdd(u));d=d.redAdd(d).redIAdd(d);var h=l.redIAdd(l),m=(h=h.redIAdd(h)).redAdd(h);e=d.redSqr().redISub(m),i=this.y.redAdd(this.z).redSqr().redISub(f).redISub(u);var b=f.redSqr();b=(b=(b=b.redIAdd(b)).redIAdd(b)).redIAdd(b),t=d.redMul(h.redISub(e)).redISub(b)}return this.curve.jpoint(e,t,i)},u.prototype._dbl=function(){var e=this.curve.a,t=this.x,i=this.y,n=this.z,a=n.redSqr().redSqr(),r=t.redSqr(),o=i.redSqr(),s=r.redAdd(r).redIAdd(r).redIAdd(e.redMul(a)),c=t.redAdd(t),p=(c=c.redIAdd(c)).redMul(o),u=s.redSqr().redISub(p.redAdd(p)),f=p.redISub(u),l=o.redSqr();l=(l=(l=l.redIAdd(l)).redIAdd(l)).redIAdd(l);var d=s.redMul(f).redISub(l),h=i.redAdd(i).redMul(n);return this.curve.jpoint(u,d,h)},u.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var e=this.x.redSqr(),t=this.y.redSqr(),i=this.z.redSqr(),n=t.redSqr(),a=e.redAdd(e).redIAdd(e),r=a.redSqr(),o=this.x.redAdd(t).redSqr().redISub(e).redISub(n),s=(o=(o=(o=o.redIAdd(o)).redAdd(o).redIAdd(o)).redISub(r)).redSqr(),c=n.redIAdd(n);c=(c=(c=c.redIAdd(c)).redIAdd(c)).redIAdd(c);var p=a.redIAdd(o).redSqr().redISub(r).redISub(s).redISub(c),u=t.redMul(p);u=(u=u.redIAdd(u)).redIAdd(u);var f=this.x.redMul(s).redISub(u);f=(f=f.redIAdd(f)).redIAdd(f);var l=this.y.redMul(p.redMul(c.redISub(p)).redISub(o.redMul(s)));l=(l=(l=l.redIAdd(l)).redIAdd(l)).redIAdd(l);var d=this.z.redAdd(o).redSqr().redISub(i).redISub(s);return this.curve.jpoint(f,l,d)},u.prototype.mul=function(e,t){return e=new a(e,t),this.curve._wnafMul(this,e)},u.prototype.eq=function(e){if("affine"===e.type)return this.eq(e.toJ());if(this===e)return!0;var t=this.z.redSqr(),i=e.z.redSqr();if(0!==this.x.redMul(i).redISub(e.x.redMul(t)).cmpn(0))return!1;var n=t.redMul(this.z),a=i.redMul(e.z);return 0===this.y.redMul(a).redISub(e.y.redMul(n)).cmpn(0)},u.prototype.eqXToP=function(e){var t=this.z.redSqr(),i=e.toRed(this.curve.red).redMul(t);if(0===this.x.cmp(i))return!0;for(var n=e.clone(),a=this.curve.redN.redMul(t);;){if(n.iadd(this.curve.n),n.cmp(this.curve.p)>=0)return!1;if(i.redIAdd(a),0===this.x.cmp(i))return!0}},u.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},u.prototype.isInfinity=function(){return 0===this.z.cmpn(0)}},function(e,t,i){"use strict";var n=i(4),a=i(0),r=i(47),o=i(7);function s(e){r.call(this,"mont",e),this.a=new n(e.a,16).toRed(this.red),this.b=new n(e.b,16).toRed(this.red),this.i4=new n(4).toRed(this.red).redInvm(),this.two=new n(2).toRed(this.red),this.a24=this.i4.redMul(this.a.redAdd(this.two))}function c(e,t,i){r.BasePoint.call(this,e,"projective"),null===t&&null===i?(this.x=this.curve.one,this.z=this.curve.zero):(this.x=new n(t,16),this.z=new n(i,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)))}a(s,r),e.exports=s,s.prototype.validate=function(e){var t=e.normalize().x,i=t.redSqr(),n=i.redMul(t).redAdd(i.redMul(this.a)).redAdd(t);return 0===n.redSqrt().redSqr().cmp(n)},a(c,r.BasePoint),s.prototype.decodePoint=function(e,t){return this.point(o.toArray(e,t),1)},s.prototype.point=function(e,t){return new c(this,e,t)},s.prototype.pointFromJSON=function(e){return c.fromJSON(this,e)},c.prototype.precompute=function(){},c.prototype._encode=function(){return this.getX().toArray("be",this.curve.p.byteLength())},c.fromJSON=function(e,t){return new c(e,t[0],t[1]||e.one)},c.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},c.prototype.isInfinity=function(){return 0===this.z.cmpn(0)},c.prototype.dbl=function(){var e=this.x.redAdd(this.z).redSqr(),t=this.x.redSub(this.z).redSqr(),i=e.redSub(t),n=e.redMul(t),a=i.redMul(t.redAdd(this.curve.a24.redMul(i)));return this.curve.point(n,a)},c.prototype.add=function(){throw new Error("Not supported on Montgomery curve")},c.prototype.diffAdd=function(e,t){var i=this.x.redAdd(this.z),n=this.x.redSub(this.z),a=e.x.redAdd(e.z),r=e.x.redSub(e.z).redMul(i),o=a.redMul(n),s=t.z.redMul(r.redAdd(o).redSqr()),c=t.x.redMul(r.redISub(o).redSqr());return this.curve.point(s,c)},c.prototype.mul=function(e){for(var t=e.clone(),i=this,n=this.curve.point(null,null),a=[];0!==t.cmpn(0);t.iushrn(1))a.push(t.andln(1));for(var r=a.length-1;r>=0;r--)0===a[r]?(i=i.diffAdd(n,this),n=n.dbl()):(n=i.diffAdd(n,this),i=i.dbl());return n},c.prototype.mulAdd=function(){throw new Error("Not supported on Montgomery curve")},c.prototype.jumlAdd=function(){throw new Error("Not supported on Montgomery curve")},c.prototype.eq=function(e){return 0===this.getX().cmp(e.getX())},c.prototype.normalize=function(){return this.x=this.x.redMul(this.z.redInvm()),this.z=this.curve.one,this},c.prototype.getX=function(){return this.normalize(),this.x.fromRed()}},function(e,t,i){"use strict";var n=i(7),a=i(4),r=i(0),o=i(47),s=n.assert;function c(e){this.twisted=1!=(0|e.a),this.mOneA=this.twisted&&-1==(0|e.a),this.extended=this.mOneA,o.call(this,"edwards",e),this.a=new a(e.a,16).umod(this.red.m),this.a=this.a.toRed(this.red),this.c=new a(e.c,16).toRed(this.red),this.c2=this.c.redSqr(),this.d=new a(e.d,16).toRed(this.red),this.dd=this.d.redAdd(this.d),s(!this.twisted||0===this.c.fromRed().cmpn(1)),this.oneC=1==(0|e.c)}function p(e,t,i,n,r){o.BasePoint.call(this,e,"projective"),null===t&&null===i&&null===n?(this.x=this.curve.zero,this.y=this.curve.one,this.z=this.curve.one,this.t=this.curve.zero,this.zOne=!0):(this.x=new a(t,16),this.y=new a(i,16),this.z=n?new a(n,16):this.curve.one,this.t=r&&new a(r,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.t&&!this.t.red&&(this.t=this.t.toRed(this.curve.red)),this.zOne=this.z===this.curve.one,this.curve.extended&&!this.t&&(this.t=this.x.redMul(this.y),this.zOne||(this.t=this.t.redMul(this.z.redInvm()))))}r(c,o),e.exports=c,c.prototype._mulA=function(e){return this.mOneA?e.redNeg():this.a.redMul(e)},c.prototype._mulC=function(e){return this.oneC?e:this.c.redMul(e)},c.prototype.jpoint=function(e,t,i,n){return this.point(e,t,i,n)},c.prototype.pointFromX=function(e,t){(e=new a(e,16)).red||(e=e.toRed(this.red));var i=e.redSqr(),n=this.c2.redSub(this.a.redMul(i)),r=this.one.redSub(this.c2.redMul(this.d).redMul(i)),o=n.redMul(r.redInvm()),s=o.redSqrt();if(0!==s.redSqr().redSub(o).cmp(this.zero))throw new Error("invalid point");var c=s.fromRed().isOdd();return(t&&!c||!t&&c)&&(s=s.redNeg()),this.point(e,s)},c.prototype.pointFromY=function(e,t){(e=new a(e,16)).red||(e=e.toRed(this.red));var i=e.redSqr(),n=i.redSub(this.c2),r=i.redMul(this.d).redMul(this.c2).redSub(this.a),o=n.redMul(r.redInvm());if(0===o.cmp(this.zero)){if(t)throw new Error("invalid point");return this.point(this.zero,e)}var s=o.redSqrt();if(0!==s.redSqr().redSub(o).cmp(this.zero))throw new Error("invalid point");return s.fromRed().isOdd()!==t&&(s=s.redNeg()),this.point(s,e)},c.prototype.validate=function(e){if(e.isInfinity())return!0;e.normalize();var t=e.x.redSqr(),i=e.y.redSqr(),n=t.redMul(this.a).redAdd(i),a=this.c2.redMul(this.one.redAdd(this.d.redMul(t).redMul(i)));return 0===n.cmp(a)},r(p,o.BasePoint),c.prototype.pointFromJSON=function(e){return p.fromJSON(this,e)},c.prototype.point=function(e,t,i,n){return new p(this,e,t,i,n)},p.fromJSON=function(e,t){return new p(e,t[0],t[1],t[2])},p.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},p.prototype.isInfinity=function(){return 0===this.x.cmpn(0)&&(0===this.y.cmp(this.z)||this.zOne&&0===this.y.cmp(this.curve.c))},p.prototype._extDbl=function(){var e=this.x.redSqr(),t=this.y.redSqr(),i=this.z.redSqr();i=i.redIAdd(i);var n=this.curve._mulA(e),a=this.x.redAdd(this.y).redSqr().redISub(e).redISub(t),r=n.redAdd(t),o=r.redSub(i),s=n.redSub(t),c=a.redMul(o),p=r.redMul(s),u=a.redMul(s),f=o.redMul(r);return this.curve.point(c,p,f,u)},p.prototype._projDbl=function(){var e,t,i,n=this.x.redAdd(this.y).redSqr(),a=this.x.redSqr(),r=this.y.redSqr();if(this.curve.twisted){var o=(p=this.curve._mulA(a)).redAdd(r);if(this.zOne)e=n.redSub(a).redSub(r).redMul(o.redSub(this.curve.two)),t=o.redMul(p.redSub(r)),i=o.redSqr().redSub(o).redSub(o);else{var s=this.z.redSqr(),c=o.redSub(s).redISub(s);e=n.redSub(a).redISub(r).redMul(c),t=o.redMul(p.redSub(r)),i=o.redMul(c)}}else{var p=a.redAdd(r);s=this.curve._mulC(this.z).redSqr(),c=p.redSub(s).redSub(s);e=this.curve._mulC(n.redISub(p)).redMul(c),t=this.curve._mulC(p).redMul(a.redISub(r)),i=p.redMul(c)}return this.curve.point(e,t,i)},p.prototype.dbl=function(){return this.isInfinity()?this:this.curve.extended?this._extDbl():this._projDbl()},p.prototype._extAdd=function(e){var t=this.y.redSub(this.x).redMul(e.y.redSub(e.x)),i=this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)),n=this.t.redMul(this.curve.dd).redMul(e.t),a=this.z.redMul(e.z.redAdd(e.z)),r=i.redSub(t),o=a.redSub(n),s=a.redAdd(n),c=i.redAdd(t),p=r.redMul(o),u=s.redMul(c),f=r.redMul(c),l=o.redMul(s);return this.curve.point(p,u,l,f)},p.prototype._projAdd=function(e){var t,i,n=this.z.redMul(e.z),a=n.redSqr(),r=this.x.redMul(e.x),o=this.y.redMul(e.y),s=this.curve.d.redMul(r).redMul(o),c=a.redSub(s),p=a.redAdd(s),u=this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(r).redISub(o),f=n.redMul(c).redMul(u);return this.curve.twisted?(t=n.redMul(p).redMul(o.redSub(this.curve._mulA(r))),i=c.redMul(p)):(t=n.redMul(p).redMul(o.redSub(r)),i=this.curve._mulC(c).redMul(p)),this.curve.point(f,t,i)},p.prototype.add=function(e){return this.isInfinity()?e:e.isInfinity()?this:this.curve.extended?this._extAdd(e):this._projAdd(e)},p.prototype.mul=function(e){return this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve._wnafMul(this,e)},p.prototype.mulAdd=function(e,t,i){return this.curve._wnafMulAdd(1,[this,t],[e,i],2,!1)},p.prototype.jmulAdd=function(e,t,i){return this.curve._wnafMulAdd(1,[this,t],[e,i],2,!0)},p.prototype.normalize=function(){if(this.zOne)return this;var e=this.z.redInvm();return this.x=this.x.redMul(e),this.y=this.y.redMul(e),this.t&&(this.t=this.t.redMul(e)),this.z=this.curve.one,this.zOne=!0,this},p.prototype.neg=function(){return this.curve.point(this.x.redNeg(),this.y,this.z,this.t&&this.t.redNeg())},p.prototype.getX=function(){return this.normalize(),this.x.fromRed()},p.prototype.getY=function(){return this.normalize(),this.y.fromRed()},p.prototype.eq=function(e){return this===e||0===this.getX().cmp(e.getX())&&0===this.getY().cmp(e.getY())},p.prototype.eqXToP=function(e){var t=e.toRed(this.curve.red).redMul(this.z);if(0===this.x.cmp(t))return!0;for(var i=e.clone(),n=this.curve.redN.redMul(this.z);;){if(i.iadd(this.curve.n),i.cmp(this.curve.p)>=0)return!1;if(t.redIAdd(n),0===this.x.cmp(t))return!0}},p.prototype.toP=p.prototype.normalize,p.prototype.mixedAdd=p.prototype.add},function(e,t,i){"use strict";t.sha1=i(246),t.sha224=i(247),t.sha256=i(119),t.sha384=i(248),t.sha512=i(120)},function(e,t,i){"use strict";var n=i(10),a=i(30),r=i(118),o=n.rotl32,s=n.sum32,c=n.sum32_5,p=r.ft_1,u=a.BlockHash,f=[1518500249,1859775393,2400959708,3395469782];function l(){if(!(this instanceof l))return new l;u.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}n.inherits(l,u),e.exports=l,l.blockSize=512,l.outSize=160,l.hmacStrength=80,l.padLength=64,l.prototype._update=function(e,t){for(var i=this.W,n=0;n<16;n++)i[n]=e[t+n];for(;n<i.length;n++)i[n]=o(i[n-3]^i[n-8]^i[n-14]^i[n-16],1);var a=this.h[0],r=this.h[1],u=this.h[2],l=this.h[3],d=this.h[4];for(n=0;n<i.length;n++){var h=~~(n/20),m=c(o(a,5),p(h,r,u,l),d,i[n],f[h]);d=l,l=u,u=o(r,30),r=a,a=m}this.h[0]=s(this.h[0],a),this.h[1]=s(this.h[1],r),this.h[2]=s(this.h[2],u),this.h[3]=s(this.h[3],l),this.h[4]=s(this.h[4],d)},l.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},function(e,t,i){"use strict";var n=i(10),a=i(119);function r(){if(!(this instanceof r))return new r;a.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}n.inherits(r,a),e.exports=r,r.blockSize=512,r.outSize=224,r.hmacStrength=192,r.padLength=64,r.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h.slice(0,7),"big"):n.split32(this.h.slice(0,7),"big")}},function(e,t,i){"use strict";var n=i(10),a=i(120);function r(){if(!(this instanceof r))return new r;a.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}n.inherits(r,a),e.exports=r,r.blockSize=1024,r.outSize=384,r.hmacStrength=192,r.padLength=128,r.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h.slice(0,12),"big"):n.split32(this.h.slice(0,12),"big")}},function(e,t,i){"use strict";var n=i(10),a=i(30),r=n.rotl32,o=n.sum32,s=n.sum32_3,c=n.sum32_4,p=a.BlockHash;function u(){if(!(this instanceof u))return new u;p.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function f(e,t,i,n){return e<=15?t^i^n:e<=31?t&i|~t&n:e<=47?(t|~i)^n:e<=63?t&n|i&~n:t^(i|~n)}function l(e){return e<=15?0:e<=31?1518500249:e<=47?1859775393:e<=63?2400959708:2840853838}function d(e){return e<=15?1352829926:e<=31?1548603684:e<=47?1836072691:e<=63?2053994217:0}n.inherits(u,p),t.ripemd160=u,u.blockSize=512,u.outSize=160,u.hmacStrength=192,u.padLength=64,u.prototype._update=function(e,t){for(var i=this.h[0],n=this.h[1],a=this.h[2],p=this.h[3],u=this.h[4],g=i,y=n,x=a,w=p,_=u,k=0;k<80;k++){var E=o(r(c(i,f(k,n,a,p),e[h[k]+t],l(k)),b[k]),u);i=u,u=p,p=r(a,10),a=n,n=E,E=o(r(c(g,f(79-k,y,x,w),e[m[k]+t],d(k)),v[k]),_),g=_,_=w,w=r(x,10),x=y,y=E}E=s(this.h[1],a,w),this.h[1]=s(this.h[2],p,_),this.h[2]=s(this.h[3],u,g),this.h[3]=s(this.h[4],i,y),this.h[4]=s(this.h[0],n,x),this.h[0]=E},u.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"little"):n.split32(this.h,"little")};var h=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],m=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],b=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],v=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]},function(e,t,i){"use strict";var n=i(10),a=i(6);function r(e,t,i){if(!(this instanceof r))return new r(e,t,i);this.Hash=e,this.blockSize=e.blockSize/8,this.outSize=e.outSize/8,this.inner=null,this.outer=null,this._init(n.toArray(t,i))}e.exports=r,r.prototype._init=function(e){e.length>this.blockSize&&(e=(new this.Hash).update(e).digest()),a(e.length<=this.blockSize);for(var t=e.length;t<this.blockSize;t++)e.push(0);for(t=0;t<e.length;t++)e[t]^=54;for(this.inner=(new this.Hash).update(e),t=0;t<e.length;t++)e[t]^=106;this.outer=(new this.Hash).update(e)},r.prototype.update=function(e,t){return this.inner.update(e,t),this},r.prototype.digest=function(e){return this.outer.update(this.inner.digest()),this.outer.digest(e)}},function(e,t){e.exports={doubles:{step:4,points:[["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a","f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"],["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508","11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"],["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739","d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"],["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640","4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"],["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c","4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"],["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda","96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"],["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa","5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"],["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0","cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"],["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d","9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"],["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d","e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"],["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1","9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"],["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0","5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"],["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047","10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"],["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862","283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"],["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7","7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"],["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd","56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"],["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83","7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"],["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a","53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"],["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8","bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"],["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d","4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"],["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725","7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"],["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754","4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"],["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c","17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"],["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6","6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"],["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39","c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"],["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891","893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"],["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b","febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"],["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03","2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"],["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d","eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"],["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070","7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"],["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4","e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"],["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da","662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"],["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11","1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"],["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e","efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"],["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41","2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"],["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef","67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"],["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8","db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"],["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d","648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"],["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96","35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"],["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd","ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"],["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5","9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"],["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266","40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"],["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71","34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"],["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac","c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"],["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751","1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"],["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e","493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"],["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241","c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"],["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3","be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"],["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f","4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"],["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19","aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"],["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be","b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"],["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9","6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"],["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2","8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"],["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13","7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"],["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c","ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"],["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba","2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"],["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151","e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"],["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073","d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"],["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458","38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"],["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b","69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"],["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366","d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"],["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa","40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"],["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0","620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"],["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787","7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"],["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e","ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]},naf:{wnd:7,points:[["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9","388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"],["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4","d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"],["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc","6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"],["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe","cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"],["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb","d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"],["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8","ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"],["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e","581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"],["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34","4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"],["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c","85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"],["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5","321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"],["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f","2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"],["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714","73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"],["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729","a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"],["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db","2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"],["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4","e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"],["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5","b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"],["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479","2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"],["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d","80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"],["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f","1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"],["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb","d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"],["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9","eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"],["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963","758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"],["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74","958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"],["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530","e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"],["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b","5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"],["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247","cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"],["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1","cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"],["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120","4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"],["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435","91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"],["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18","673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"],["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8","59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"],["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb","3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"],["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f","55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"],["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143","efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"],["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba","e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"],["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45","f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"],["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a","744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"],["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e","c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"],["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8","e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"],["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c","30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"],["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519","e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"],["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab","100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"],["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca","ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"],["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf","8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"],["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610","68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"],["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4","f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"],["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c","d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"],["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940","edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"],["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980","a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"],["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3","66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"],["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf","9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"],["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63","4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"],["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448","fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"],["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf","5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"],["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5","8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"],["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6","8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"],["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5","5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"],["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99","f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"],["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51","f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"],["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5","42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"],["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5","204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"],["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997","4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"],["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881","73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"],["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5","39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"],["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66","d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"],["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726","ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"],["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede","6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"],["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94","60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"],["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31","3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"],["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51","b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"],["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252","ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"],["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5","cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"],["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b","6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"],["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4","322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"],["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f","6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"],["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889","2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"],["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246","b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"],["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984","998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"],["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a","b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"],["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030","bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"],["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197","6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"],["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593","c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"],["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef","21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"],["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38","60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"],["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a","49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"],["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111","5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"],["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502","7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"],["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea","be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"],["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26","8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"],["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986","39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"],["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e","62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"],["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4","25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"],["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda","ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"],["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859","cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"],["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f","f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"],["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c","6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"],["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942","fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"],["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a","1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"],["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80","5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"],["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d","438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"],["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1","cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"],["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63","c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"],["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352","6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"],["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193","ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"],["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00","9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"],["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58","ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"],["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7","d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"],["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8","c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"],["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e","67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"],["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d","cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"],["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b","299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"],["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f","f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"],["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6","462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"],["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297","62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"],["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a","7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"],["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c","ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"],["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52","4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"],["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb","bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"],["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065","bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"],["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917","603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"],["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9","cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"],["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3","553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"],["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57","712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"],["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66","ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"],["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8","9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"],["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721","9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"],["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180","4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]}}},function(e,t,i){"use strict";var n=i(4),a=i(253),r=i(7),o=i(69),s=i(66),c=r.assert,p=i(254),u=i(255);function f(e){if(!(this instanceof f))return new f(e);"string"==typeof e&&(c(o.hasOwnProperty(e),"Unknown curve "+e),e=o[e]),e instanceof o.PresetCurve&&(e={curve:e}),this.curve=e.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=e.curve.g,this.g.precompute(e.curve.n.bitLength()+1),this.hash=e.hash||e.curve.hash}e.exports=f,f.prototype.keyPair=function(e){return new p(this,e)},f.prototype.keyFromPrivate=function(e,t){return p.fromPrivate(this,e,t)},f.prototype.keyFromPublic=function(e,t){return p.fromPublic(this,e,t)},f.prototype.genKeyPair=function(e){e||(e={});for(var t=new a({hash:this.hash,pers:e.pers,persEnc:e.persEnc||"utf8",entropy:e.entropy||s(this.hash.hmacStrength),entropyEnc:e.entropy&&e.entropyEnc||"utf8",nonce:this.n.toArray()}),i=this.n.byteLength(),r=this.n.sub(new n(2));;){var o=new n(t.generate(i));if(!(o.cmp(r)>0))return o.iaddn(1),this.keyFromPrivate(o)}},f.prototype._truncateToN=function(e,t){var i=8*e.byteLength()-this.n.bitLength();return i>0&&(e=e.ushrn(i)),!t&&e.cmp(this.n)>=0?e.sub(this.n):e},f.prototype.sign=function(e,t,i,r){"object"==typeof i&&(r=i,i=null),r||(r={}),t=this.keyFromPrivate(t,i),e=this._truncateToN(new n(e,16));for(var o=this.n.byteLength(),s=t.getPrivate().toArray("be",o),c=e.toArray("be",o),p=new a({hash:this.hash,entropy:s,nonce:c,pers:r.pers,persEnc:r.persEnc||"utf8"}),f=this.n.sub(new n(1)),l=0;;l++){var d=r.k?r.k(l):new n(p.generate(this.n.byteLength()));if(!((d=this._truncateToN(d,!0)).cmpn(1)<=0||d.cmp(f)>=0)){var h=this.g.mul(d);if(!h.isInfinity()){var m=h.getX(),b=m.umod(this.n);if(0!==b.cmpn(0)){var v=d.invm(this.n).mul(b.mul(t.getPrivate()).iadd(e));if(0!==(v=v.umod(this.n)).cmpn(0)){var g=(h.getY().isOdd()?1:0)|(0!==m.cmp(b)?2:0);return r.canonical&&v.cmp(this.nh)>0&&(v=this.n.sub(v),g^=1),new u({r:b,s:v,recoveryParam:g})}}}}}},f.prototype.verify=function(e,t,i,a){e=this._truncateToN(new n(e,16)),i=this.keyFromPublic(i,a);var r=(t=new u(t,"hex")).r,o=t.s;if(r.cmpn(1)<0||r.cmp(this.n)>=0)return!1;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;var s,c=o.invm(this.n),p=c.mul(e).umod(this.n),f=c.mul(r).umod(this.n);return this.curve._maxwellTrick?!(s=this.g.jmulAdd(p,i.getPublic(),f)).isInfinity()&&s.eqXToP(r):!(s=this.g.mulAdd(p,i.getPublic(),f)).isInfinity()&&0===s.getX().umod(this.n).cmp(r)},f.prototype.recoverPubKey=function(e,t,i,a){c((3&i)===i,"The recovery param is more than two bits"),t=new u(t,a);var r=this.n,o=new n(e),s=t.r,p=t.s,f=1&i,l=i>>1;if(s.cmp(this.curve.p.umod(this.curve.n))>=0&&l)throw new Error("Unable to find sencond key candinate");s=l?this.curve.pointFromX(s.add(this.curve.n),f):this.curve.pointFromX(s,f);var d=t.r.invm(r),h=r.sub(o).mul(d).umod(r),m=p.mul(d).umod(r);return this.g.mulAdd(h,s,m)},f.prototype.getKeyRecoveryParam=function(e,t,i,n){if(null!==(t=new u(t,n)).recoveryParam)return t.recoveryParam;for(var a=0;a<4;a++){var r;try{r=this.recoverPubKey(e,t,a)}catch(e){continue}if(r.eq(i))return a}throw new Error("Unable to find valid recovery factor")}},function(e,t,i){"use strict";var n=i(70),a=i(116),r=i(6);function o(e){if(!(this instanceof o))return new o(e);this.hash=e.hash,this.predResist=!!e.predResist,this.outLen=this.hash.outSize,this.minEntropy=e.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var t=a.toArray(e.entropy,e.entropyEnc||"hex"),i=a.toArray(e.nonce,e.nonceEnc||"hex"),n=a.toArray(e.pers,e.persEnc||"hex");r(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(t,i,n)}e.exports=o,o.prototype._init=function(e,t,i){var n=e.concat(t).concat(i);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var a=0;a<this.V.length;a++)this.K[a]=0,this.V[a]=1;this._update(n),this._reseed=1,this.reseedInterval=281474976710656},o.prototype._hmac=function(){return new n.hmac(this.hash,this.K)},o.prototype._update=function(e){var t=this._hmac().update(this.V).update([0]);e&&(t=t.update(e)),this.K=t.digest(),this.V=this._hmac().update(this.V).digest(),e&&(this.K=this._hmac().update(this.V).update([1]).update(e).digest(),this.V=this._hmac().update(this.V).digest())},o.prototype.reseed=function(e,t,i,n){"string"!=typeof t&&(n=i,i=t,t=null),e=a.toArray(e,t),i=a.toArray(i,n),r(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(e.concat(i||[])),this._reseed=1},o.prototype.generate=function(e,t,i,n){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof t&&(n=i,i=t,t=null),i&&(i=a.toArray(i,n||"hex"),this._update(i));for(var r=[];r.length<e;)this.V=this._hmac().update(this.V).digest(),r=r.concat(this.V);var o=r.slice(0,e);return this._update(i),this._reseed++,a.encode(o,t)}},function(e,t,i){"use strict";var n=i(4),a=i(7).assert;function r(e,t){this.ec=e,this.priv=null,this.pub=null,t.priv&&this._importPrivate(t.priv,t.privEnc),t.pub&&this._importPublic(t.pub,t.pubEnc)}e.exports=r,r.fromPublic=function(e,t,i){return t instanceof r?t:new r(e,{pub:t,pubEnc:i})},r.fromPrivate=function(e,t,i){return t instanceof r?t:new r(e,{priv:t,privEnc:i})},r.prototype.validate=function(){var e=this.getPublic();return e.isInfinity()?{result:!1,reason:"Invalid public key"}:e.validate()?e.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},r.prototype.getPublic=function(e,t){return"string"==typeof e&&(t=e,e=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),t?this.pub.encode(t,e):this.pub},r.prototype.getPrivate=function(e){return"hex"===e?this.priv.toString(16,2):this.priv},r.prototype._importPrivate=function(e,t){this.priv=new n(e,t||16),this.priv=this.priv.umod(this.ec.curve.n)},r.prototype._importPublic=function(e,t){if(e.x||e.y)return"mont"===this.ec.curve.type?a(e.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||a(e.x&&e.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(e.x,e.y));this.pub=this.ec.curve.decodePoint(e,t)},r.prototype.derive=function(e){return e.mul(this.priv).getX()},r.prototype.sign=function(e,t,i){return this.ec.sign(e,this,t,i)},r.prototype.verify=function(e,t){return this.ec.verify(e,t,this)},r.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"}},function(e,t,i){"use strict";var n=i(4),a=i(7),r=a.assert;function o(e,t){if(e instanceof o)return e;this._importDER(e,t)||(r(e.r&&e.s,"Signature without r or s"),this.r=new n(e.r,16),this.s=new n(e.s,16),void 0===e.recoveryParam?this.recoveryParam=null:this.recoveryParam=e.recoveryParam)}function s(){this.place=0}function c(e,t){var i=e[t.place++];if(!(128&i))return i;for(var n=15&i,a=0,r=0,o=t.place;r<n;r++,o++)a<<=8,a|=e[o];return t.place=o,a}function p(e){for(var t=0,i=e.length-1;!e[t]&&!(128&e[t+1])&&t<i;)t++;return 0===t?e:e.slice(t)}function u(e,t){if(t<128)e.push(t);else{var i=1+(Math.log(t)/Math.LN2>>>3);for(e.push(128|i);--i;)e.push(t>>>(i<<3)&255);e.push(t)}}e.exports=o,o.prototype._importDER=function(e,t){e=a.toArray(e,t);var i=new s;if(48!==e[i.place++])return!1;if(c(e,i)+i.place!==e.length)return!1;if(2!==e[i.place++])return!1;var r=c(e,i),o=e.slice(i.place,r+i.place);if(i.place+=r,2!==e[i.place++])return!1;var p=c(e,i);if(e.length!==p+i.place)return!1;var u=e.slice(i.place,p+i.place);return 0===o[0]&&128&o[1]&&(o=o.slice(1)),0===u[0]&&128&u[1]&&(u=u.slice(1)),this.r=new n(o),this.s=new n(u),this.recoveryParam=null,!0},o.prototype.toDER=function(e){var t=this.r.toArray(),i=this.s.toArray();for(128&t[0]&&(t=[0].concat(t)),128&i[0]&&(i=[0].concat(i)),t=p(t),i=p(i);!(i[0]||128&i[1]);)i=i.slice(1);var n=[2];u(n,t.length),(n=n.concat(t)).push(2),u(n,i.length);var r=n.concat(i),o=[48];return u(o,r.length),o=o.concat(r),a.encode(o,e)}},function(e,t,i){"use strict";var n=i(70),a=i(69),r=i(7),o=r.assert,s=r.parseBytes,c=i(257),p=i(258);function u(e){if(o("ed25519"===e,"only tested with ed25519 so far"),!(this instanceof u))return new u(e);e=a[e].curve;this.curve=e,this.g=e.g,this.g.precompute(e.n.bitLength()+1),this.pointClass=e.point().constructor,this.encodingLength=Math.ceil(e.n.bitLength()/8),this.hash=n.sha512}e.exports=u,u.prototype.sign=function(e,t){e=s(e);var i=this.keyFromSecret(t),n=this.hashInt(i.messagePrefix(),e),a=this.g.mul(n),r=this.encodePoint(a),o=this.hashInt(r,i.pubBytes(),e).mul(i.priv()),c=n.add(o).umod(this.curve.n);return this.makeSignature({R:a,S:c,Rencoded:r})},u.prototype.verify=function(e,t,i){e=s(e),t=this.makeSignature(t);var n=this.keyFromPublic(i),a=this.hashInt(t.Rencoded(),n.pubBytes(),e),r=this.g.mul(t.S());return t.R().add(n.pub().mul(a)).eq(r)},u.prototype.hashInt=function(){for(var e=this.hash(),t=0;t<arguments.length;t++)e.update(arguments[t]);return r.intFromLE(e.digest()).umod(this.curve.n)},u.prototype.keyFromPublic=function(e){return c.fromPublic(this,e)},u.prototype.keyFromSecret=function(e){return c.fromSecret(this,e)},u.prototype.makeSignature=function(e){return e instanceof p?e:new p(this,e)},u.prototype.encodePoint=function(e){var t=e.getY().toArray("le",this.encodingLength);return t[this.encodingLength-1]|=e.getX().isOdd()?128:0,t},u.prototype.decodePoint=function(e){var t=(e=r.parseBytes(e)).length-1,i=e.slice(0,t).concat(-129&e[t]),n=0!=(128&e[t]),a=r.intFromLE(i);return this.curve.pointFromY(a,n)},u.prototype.encodeInt=function(e){return e.toArray("le",this.encodingLength)},u.prototype.decodeInt=function(e){return r.intFromLE(e)},u.prototype.isPoint=function(e){return e instanceof this.pointClass}},function(e,t,i){"use strict";var n=i(7),a=n.assert,r=n.parseBytes,o=n.cachedProperty;function s(e,t){this.eddsa=e,this._secret=r(t.secret),e.isPoint(t.pub)?this._pub=t.pub:this._pubBytes=r(t.pub)}s.fromPublic=function(e,t){return t instanceof s?t:new s(e,{pub:t})},s.fromSecret=function(e,t){return t instanceof s?t:new s(e,{secret:t})},s.prototype.secret=function(){return this._secret},o(s,"pubBytes",(function(){return this.eddsa.encodePoint(this.pub())})),o(s,"pub",(function(){return this._pubBytes?this.eddsa.decodePoint(this._pubBytes):this.eddsa.g.mul(this.priv())})),o(s,"privBytes",(function(){var e=this.eddsa,t=this.hash(),i=e.encodingLength-1,n=t.slice(0,e.encodingLength);return n[0]&=248,n[i]&=127,n[i]|=64,n})),o(s,"priv",(function(){return this.eddsa.decodeInt(this.privBytes())})),o(s,"hash",(function(){return this.eddsa.hash().update(this.secret()).digest()})),o(s,"messagePrefix",(function(){return this.hash().slice(this.eddsa.encodingLength)})),s.prototype.sign=function(e){return a(this._secret,"KeyPair can only verify"),this.eddsa.sign(e,this)},s.prototype.verify=function(e,t){return this.eddsa.verify(e,t,this)},s.prototype.getSecret=function(e){return a(this._secret,"KeyPair is public only"),n.encode(this.secret(),e)},s.prototype.getPublic=function(e){return n.encode(this.pubBytes(),e)},e.exports=s},function(e,t,i){"use strict";var n=i(4),a=i(7),r=a.assert,o=a.cachedProperty,s=a.parseBytes;function c(e,t){this.eddsa=e,"object"!=typeof t&&(t=s(t)),Array.isArray(t)&&(t={R:t.slice(0,e.encodingLength),S:t.slice(e.encodingLength)}),r(t.R&&t.S,"Signature without R or S"),e.isPoint(t.R)&&(this._R=t.R),t.S instanceof n&&(this._S=t.S),this._Rencoded=Array.isArray(t.R)?t.R:t.Rencoded,this._Sencoded=Array.isArray(t.S)?t.S:t.Sencoded}o(c,"S",(function(){return this.eddsa.decodeInt(this.Sencoded())})),o(c,"R",(function(){return this.eddsa.decodePoint(this.Rencoded())})),o(c,"Rencoded",(function(){return this.eddsa.encodePoint(this.R())})),o(c,"Sencoded",(function(){return this.eddsa.encodeInt(this.S())})),c.prototype.toBytes=function(){return this.Rencoded().concat(this.Sencoded())},c.prototype.toHex=function(){return a.encode(this.toBytes(),"hex").toUpperCase()},e.exports=c},function(e,t,i){"use strict";var n=i(31);t.certificate=i(269);var a=n.define("RSAPrivateKey",(function(){this.seq().obj(this.key("version").int(),this.key("modulus").int(),this.key("publicExponent").int(),this.key("privateExponent").int(),this.key("prime1").int(),this.key("prime2").int(),this.key("exponent1").int(),this.key("exponent2").int(),this.key("coefficient").int())}));t.RSAPrivateKey=a;var r=n.define("RSAPublicKey",(function(){this.seq().obj(this.key("modulus").int(),this.key("publicExponent").int())}));t.RSAPublicKey=r;var o=n.define("SubjectPublicKeyInfo",(function(){this.seq().obj(this.key("algorithm").use(s),this.key("subjectPublicKey").bitstr())}));t.PublicKey=o;var s=n.define("AlgorithmIdentifier",(function(){this.seq().obj(this.key("algorithm").objid(),this.key("none").null_().optional(),this.key("curve").objid().optional(),this.key("params").seq().obj(this.key("p").int(),this.key("q").int(),this.key("g").int()).optional())})),c=n.define("PrivateKeyInfo",(function(){this.seq().obj(this.key("version").int(),this.key("algorithm").use(s),this.key("subjectPrivateKey").octstr())}));t.PrivateKey=c;var p=n.define("EncryptedPrivateKeyInfo",(function(){this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(),this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(),this.key("kdeparams").seq().obj(this.key("salt").octstr(),this.key("iters").int())),this.key("cipher").seq().obj(this.key("algo").objid(),this.key("iv").octstr()))),this.key("subjectPrivateKey").octstr())}));t.EncryptedPrivateKey=p;var u=n.define("DSAPrivateKey",(function(){this.seq().obj(this.key("version").int(),this.key("p").int(),this.key("q").int(),this.key("g").int(),this.key("pub_key").int(),this.key("priv_key").int())}));t.DSAPrivateKey=u,t.DSAparam=n.define("DSAparam",(function(){this.int()}));var f=n.define("ECPrivateKey",(function(){this.seq().obj(this.key("version").int(),this.key("privateKey").octstr(),this.key("parameters").optional().explicit(0).use(l),this.key("publicKey").optional().explicit(1).bitstr())}));t.ECPrivateKey=f;var l=n.define("ECParameters",(function(){this.choice({namedCurve:this.objid()})}));t.signature=n.define("signature",(function(){this.seq().obj(this.key("r").int(),this.key("s").int())}))},function(e,t,i){var n=i(31),a=i(0);function r(e,t){this.name=e,this.body=t,this.decoders={},this.encoders={}}t.define=function(e,t){return new r(e,t)},r.prototype._createNamed=function(e){var t;try{t=i(261).runInThisContext("(function "+this.name+"(entity) {\n  this._initNamed(entity);\n})")}catch(e){t=function(e){this._initNamed(e)}}return a(t,e),t.prototype._initNamed=function(t){e.call(this,t)},new t(this)},r.prototype._getDecoder=function(e){return e=e||"der",this.decoders.hasOwnProperty(e)||(this.decoders[e]=this._createNamed(n.decoders[e])),this.decoders[e]},r.prototype.decode=function(e,t,i){return this._getDecoder(t).decode(e,i)},r.prototype._getEncoder=function(e){return e=e||"der",this.encoders.hasOwnProperty(e)||(this.encoders[e]=this._createNamed(n.encoders[e])),this.encoders[e]},r.prototype.encode=function(e,t,i){return this._getEncoder(t).encode(e,i)}},function(module,exports){var indexOf=function(e,t){if(e.indexOf)return e.indexOf(t);for(var i=0;i<e.length;i++)if(e[i]===t)return i;return-1},Object_keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var i in e)t.push(i);return t},forEach=function(e,t){if(e.forEach)return e.forEach(t);for(var i=0;i<e.length;i++)t(e[i],i,e)},defineProp=function(){try{return Object.defineProperty({},"_",{}),function(e,t,i){Object.defineProperty(e,t,{writable:!0,enumerable:!1,configurable:!0,value:i})}}catch(e){return function(e,t,i){e[t]=i}}}(),globals=["Array","Boolean","Date","Error","EvalError","Function","Infinity","JSON","Math","NaN","Number","Object","RangeError","ReferenceError","RegExp","String","SyntaxError","TypeError","URIError","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","eval","isFinite","isNaN","parseFloat","parseInt","undefined","unescape"];function Context(){}Context.prototype={};var Script=exports.Script=function(e){if(!(this instanceof Script))return new Script(e);this.code=e};Script.prototype.runInContext=function(e){if(!(e instanceof Context))throw new TypeError("needs a 'context' argument.");var t=document.createElement("iframe");t.style||(t.style={}),t.style.display="none",document.body.appendChild(t);var i=t.contentWindow,n=i.eval,a=i.execScript;!n&&a&&(a.call(i,"null"),n=i.eval),forEach(Object_keys(e),(function(t){i[t]=e[t]})),forEach(globals,(function(t){e[t]&&(i[t]=e[t])}));var r=Object_keys(i),o=n.call(i,this.code);return forEach(Object_keys(i),(function(t){(t in e||-1===indexOf(r,t))&&(e[t]=i[t])})),forEach(globals,(function(t){t in e||defineProp(e,t,i[t])})),document.body.removeChild(t),o},Script.prototype.runInThisContext=function(){return eval(this.code)},Script.prototype.runInNewContext=function(e){var t=Script.createContext(e),i=this.runInContext(t);return e&&forEach(Object_keys(t),(function(i){e[i]=t[i]})),i},forEach(Object_keys(Script.prototype),(function(e){exports[e]=Script[e]=function(t){var i=Script(t);return i[e].apply(i,[].slice.call(arguments,1))}})),exports.isContext=function(e){return e instanceof Context},exports.createScript=function(e){return exports.Script(e)},exports.createContext=Script.createContext=function(e){var t=new Context;return"object"==typeof e&&forEach(Object_keys(e),(function(i){t[i]=e[i]})),t}},function(e,t,i){var n=i(0);function a(e){this._reporterState={obj:null,path:[],options:e||{},errors:[]}}function r(e,t){this.path=e,this.rethrow(t)}t.Reporter=a,a.prototype.isError=function(e){return e instanceof r},a.prototype.save=function(){var e=this._reporterState;return{obj:e.obj,pathLen:e.path.length}},a.prototype.restore=function(e){var t=this._reporterState;t.obj=e.obj,t.path=t.path.slice(0,e.pathLen)},a.prototype.enterKey=function(e){return this._reporterState.path.push(e)},a.prototype.exitKey=function(e){var t=this._reporterState;t.path=t.path.slice(0,e-1)},a.prototype.leaveKey=function(e,t,i){var n=this._reporterState;this.exitKey(e),null!==n.obj&&(n.obj[t]=i)},a.prototype.path=function(){return this._reporterState.path.join("/")},a.prototype.enterObject=function(){var e=this._reporterState,t=e.obj;return e.obj={},t},a.prototype.leaveObject=function(e){var t=this._reporterState,i=t.obj;return t.obj=e,i},a.prototype.error=function(e){var t,i=this._reporterState,n=e instanceof r;if(t=n?e:new r(i.path.map((function(e){return"["+JSON.stringify(e)+"]"})).join(""),e.message||e,e.stack),!i.options.partial)throw t;return n||i.errors.push(t),t},a.prototype.wrapResult=function(e){var t=this._reporterState;return t.options.partial?{result:this.isError(e)?null:e,errors:t.errors}:e},n(r,Error),r.prototype.rethrow=function(e){if(this.message=e+" at: "+(this.path||"(shallow)"),Error.captureStackTrace&&Error.captureStackTrace(this,r),!this.stack)try{throw new Error(this.message)}catch(e){this.stack=e.stack}return this}},function(e,t,i){var n=i(32).Reporter,a=i(32).EncoderBuffer,r=i(32).DecoderBuffer,o=i(6),s=["seq","seqof","set","setof","objid","bool","gentime","utctime","null_","enum","int","objDesc","bitstr","bmpstr","charstr","genstr","graphstr","ia5str","iso646str","numstr","octstr","printstr","t61str","unistr","utf8str","videostr"],c=["key","obj","use","optional","explicit","implicit","def","choice","any","contains"].concat(s);function p(e,t){var i={};this._baseState=i,i.enc=e,i.parent=t||null,i.children=null,i.tag=null,i.args=null,i.reverseArgs=null,i.choice=null,i.optional=!1,i.any=!1,i.obj=!1,i.use=null,i.useDecoder=null,i.key=null,i.default=null,i.explicit=null,i.implicit=null,i.contains=null,i.parent||(i.children=[],this._wrap())}e.exports=p;var u=["enc","parent","children","tag","args","reverseArgs","choice","optional","any","obj","use","alteredUse","key","default","explicit","implicit","contains"];p.prototype.clone=function(){var e=this._baseState,t={};u.forEach((function(i){t[i]=e[i]}));var i=new this.constructor(t.parent);return i._baseState=t,i},p.prototype._wrap=function(){var e=this._baseState;c.forEach((function(t){this[t]=function(){var i=new this.constructor(this);return e.children.push(i),i[t].apply(i,arguments)}}),this)},p.prototype._init=function(e){var t=this._baseState;o(null===t.parent),e.call(this),t.children=t.children.filter((function(e){return e._baseState.parent===this}),this),o.equal(t.children.length,1,"Root node can have only one child")},p.prototype._useArgs=function(e){var t=this._baseState,i=e.filter((function(e){return e instanceof this.constructor}),this);e=e.filter((function(e){return!(e instanceof this.constructor)}),this),0!==i.length&&(o(null===t.children),t.children=i,i.forEach((function(e){e._baseState.parent=this}),this)),0!==e.length&&(o(null===t.args),t.args=e,t.reverseArgs=e.map((function(e){if("object"!=typeof e||e.constructor!==Object)return e;var t={};return Object.keys(e).forEach((function(i){i==(0|i)&&(i|=0);var n=e[i];t[n]=i})),t})))},["_peekTag","_decodeTag","_use","_decodeStr","_decodeObjid","_decodeTime","_decodeNull","_decodeInt","_decodeBool","_decodeList","_encodeComposite","_encodeStr","_encodeObjid","_encodeTime","_encodeNull","_encodeInt","_encodeBool"].forEach((function(e){p.prototype[e]=function(){var t=this._baseState;throw new Error(e+" not implemented for encoding: "+t.enc)}})),s.forEach((function(e){p.prototype[e]=function(){var t=this._baseState,i=Array.prototype.slice.call(arguments);return o(null===t.tag),t.tag=e,this._useArgs(i),this}})),p.prototype.use=function(e){o(e);var t=this._baseState;return o(null===t.use),t.use=e,this},p.prototype.optional=function(){return this._baseState.optional=!0,this},p.prototype.def=function(e){var t=this._baseState;return o(null===t.default),t.default=e,t.optional=!0,this},p.prototype.explicit=function(e){var t=this._baseState;return o(null===t.explicit&&null===t.implicit),t.explicit=e,this},p.prototype.implicit=function(e){var t=this._baseState;return o(null===t.explicit&&null===t.implicit),t.implicit=e,this},p.prototype.obj=function(){var e=this._baseState,t=Array.prototype.slice.call(arguments);return e.obj=!0,0!==t.length&&this._useArgs(t),this},p.prototype.key=function(e){var t=this._baseState;return o(null===t.key),t.key=e,this},p.prototype.any=function(){return this._baseState.any=!0,this},p.prototype.choice=function(e){var t=this._baseState;return o(null===t.choice),t.choice=e,this._useArgs(Object.keys(e).map((function(t){return e[t]}))),this},p.prototype.contains=function(e){var t=this._baseState;return o(null===t.use),t.contains=e,this},p.prototype._decode=function(e,t){var i=this._baseState;if(null===i.parent)return e.wrapResult(i.children[0]._decode(e,t));var n,a=i.default,o=!0,s=null;if(null!==i.key&&(s=e.enterKey(i.key)),i.optional){var c=null;if(null!==i.explicit?c=i.explicit:null!==i.implicit?c=i.implicit:null!==i.tag&&(c=i.tag),null!==c||i.any){if(o=this._peekTag(e,c,i.any),e.isError(o))return o}else{var p=e.save();try{null===i.choice?this._decodeGeneric(i.tag,e,t):this._decodeChoice(e,t),o=!0}catch(e){o=!1}e.restore(p)}}if(i.obj&&o&&(n=e.enterObject()),o){if(null!==i.explicit){var u=this._decodeTag(e,i.explicit);if(e.isError(u))return u;e=u}var f=e.offset;if(null===i.use&&null===i.choice){if(i.any)p=e.save();var l=this._decodeTag(e,null!==i.implicit?i.implicit:i.tag,i.any);if(e.isError(l))return l;i.any?a=e.raw(p):e=l}if(t&&t.track&&null!==i.tag&&t.track(e.path(),f,e.length,"tagged"),t&&t.track&&null!==i.tag&&t.track(e.path(),e.offset,e.length,"content"),a=i.any?a:null===i.choice?this._decodeGeneric(i.tag,e,t):this._decodeChoice(e,t),e.isError(a))return a;if(i.any||null!==i.choice||null===i.children||i.children.forEach((function(i){i._decode(e,t)})),i.contains&&("octstr"===i.tag||"bitstr"===i.tag)){var d=new r(a);a=this._getUse(i.contains,e._reporterState.obj)._decode(d,t)}}return i.obj&&o&&(a=e.leaveObject(n)),null===i.key||null===a&&!0!==o?null!==s&&e.exitKey(s):e.leaveKey(s,i.key,a),a},p.prototype._decodeGeneric=function(e,t,i){var n=this._baseState;return"seq"===e||"set"===e?null:"seqof"===e||"setof"===e?this._decodeList(t,e,n.args[0],i):/str$/.test(e)?this._decodeStr(t,e,i):"objid"===e&&n.args?this._decodeObjid(t,n.args[0],n.args[1],i):"objid"===e?this._decodeObjid(t,null,null,i):"gentime"===e||"utctime"===e?this._decodeTime(t,e,i):"null_"===e?this._decodeNull(t,i):"bool"===e?this._decodeBool(t,i):"objDesc"===e?this._decodeStr(t,e,i):"int"===e||"enum"===e?this._decodeInt(t,n.args&&n.args[0],i):null!==n.use?this._getUse(n.use,t._reporterState.obj)._decode(t,i):t.error("unknown tag: "+e)},p.prototype._getUse=function(e,t){var i=this._baseState;return i.useDecoder=this._use(e,t),o(null===i.useDecoder._baseState.parent),i.useDecoder=i.useDecoder._baseState.children[0],i.implicit!==i.useDecoder._baseState.implicit&&(i.useDecoder=i.useDecoder.clone(),i.useDecoder._baseState.implicit=i.implicit),i.useDecoder},p.prototype._decodeChoice=function(e,t){var i=this._baseState,n=null,a=!1;return Object.keys(i.choice).some((function(r){var o=e.save(),s=i.choice[r];try{var c=s._decode(e,t);if(e.isError(c))return!1;n={type:r,value:c},a=!0}catch(t){return e.restore(o),!1}return!0}),this),a?n:e.error("Choice not matched")},p.prototype._createEncoderBuffer=function(e){return new a(e,this.reporter)},p.prototype._encode=function(e,t,i){var n=this._baseState;if(null===n.default||n.default!==e){var a=this._encodeValue(e,t,i);if(void 0!==a&&!this._skipDefault(a,t,i))return a}},p.prototype._encodeValue=function(e,t,i){var a=this._baseState;if(null===a.parent)return a.children[0]._encode(e,t||new n);var r=null;if(this.reporter=t,a.optional&&void 0===e){if(null===a.default)return;e=a.default}var o=null,s=!1;if(a.any)r=this._createEncoderBuffer(e);else if(a.choice)r=this._encodeChoice(e,t);else if(a.contains)o=this._getUse(a.contains,i)._encode(e,t),s=!0;else if(a.children)o=a.children.map((function(i){if("null_"===i._baseState.tag)return i._encode(null,t,e);if(null===i._baseState.key)return t.error("Child should have a key");var n=t.enterKey(i._baseState.key);if("object"!=typeof e)return t.error("Child expected, but input is not object");var a=i._encode(e[i._baseState.key],t,e);return t.leaveKey(n),a}),this).filter((function(e){return e})),o=this._createEncoderBuffer(o);else if("seqof"===a.tag||"setof"===a.tag){if(!a.args||1!==a.args.length)return t.error("Too many args for : "+a.tag);if(!Array.isArray(e))return t.error("seqof/setof, but data is not Array");var c=this.clone();c._baseState.implicit=null,o=this._createEncoderBuffer(e.map((function(i){var n=this._baseState;return this._getUse(n.args[0],e)._encode(i,t)}),c))}else null!==a.use?r=this._getUse(a.use,i)._encode(e,t):(o=this._encodePrimitive(a.tag,e),s=!0);if(!a.any&&null===a.choice){var p=null!==a.implicit?a.implicit:a.tag,u=null===a.implicit?"universal":"context";null===p?null===a.use&&t.error("Tag could be omitted only for .use()"):null===a.use&&(r=this._encodeComposite(p,s,u,o))}return null!==a.explicit&&(r=this._encodeComposite(a.explicit,!1,"context",r)),r},p.prototype._encodeChoice=function(e,t){var i=this._baseState,n=i.choice[e.type];return n||o(!1,e.type+" not found in "+JSON.stringify(Object.keys(i.choice))),n._encode(e.value,t)},p.prototype._encodePrimitive=function(e,t){var i=this._baseState;if(/str$/.test(e))return this._encodeStr(t,e);if("objid"===e&&i.args)return this._encodeObjid(t,i.reverseArgs[0],i.args[1]);if("objid"===e)return this._encodeObjid(t,null,null);if("gentime"===e||"utctime"===e)return this._encodeTime(t,e);if("null_"===e)return this._encodeNull();if("int"===e||"enum"===e)return this._encodeInt(t,i.args&&i.reverseArgs[0]);if("bool"===e)return this._encodeBool(t);if("objDesc"===e)return this._encodeStr(t,e);throw new Error("Unsupported tag: "+e)},p.prototype._isNumstr=function(e){return/^[0-9 ]*$/.test(e)},p.prototype._isPrintstr=function(e){return/^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(e)}},function(e,t,i){var n=i(122);t.tagClass={0:"universal",1:"application",2:"context",3:"private"},t.tagClassByName=n._reverse(t.tagClass),t.tag={0:"end",1:"bool",2:"int",3:"bitstr",4:"octstr",5:"null_",6:"objid",7:"objDesc",8:"external",9:"real",10:"enum",11:"embed",12:"utf8str",13:"relativeOid",16:"seq",17:"set",18:"numstr",19:"printstr",20:"t61str",21:"videostr",22:"ia5str",23:"utctime",24:"gentime",25:"graphstr",26:"iso646str",27:"genstr",28:"unistr",29:"charstr",30:"bmpstr"},t.tagByName=n._reverse(t.tag)},function(e,t,i){var n=t;n.der=i(123),n.pem=i(266)},function(e,t,i){var n=i(0),a=i(2).Buffer,r=i(123);function o(e){r.call(this,e),this.enc="pem"}n(o,r),e.exports=o,o.prototype.decode=function(e,t){for(var i=e.toString().split(/[\r\n]+/g),n=t.label.toUpperCase(),o=/^-----(BEGIN|END) ([^-]+)-----$/,s=-1,c=-1,p=0;p<i.length;p++){var u=i[p].match(o);if(null!==u&&u[2]===n){if(-1!==s){if("END"!==u[1])break;c=p;break}if("BEGIN"!==u[1])break;s=p}}if(-1===s||-1===c)throw new Error("PEM section not found for: "+n);var f=i.slice(s+1,c).join("");f.replace(/[^a-z0-9\+\/=]+/gi,"");var l=new a(f,"base64");return r.prototype.decode.call(this,l,t)}},function(e,t,i){var n=t;n.der=i(124),n.pem=i(268)},function(e,t,i){var n=i(0),a=i(124);function r(e){a.call(this,e),this.enc="pem"}n(r,a),e.exports=r,r.prototype.encode=function(e,t){for(var i=a.prototype.encode.call(this,e).toString("base64"),n=["-----BEGIN "+t.label+"-----"],r=0;r<i.length;r+=64)n.push(i.slice(r,r+64));return n.push("-----END "+t.label+"-----"),n.join("\n")}},function(e,t,i){"use strict";var n=i(31),a=n.define("Time",(function(){this.choice({utcTime:this.utctime(),generalTime:this.gentime()})})),r=n.define("AttributeTypeValue",(function(){this.seq().obj(this.key("type").objid(),this.key("value").any())})),o=n.define("AlgorithmIdentifier",(function(){this.seq().obj(this.key("algorithm").objid(),this.key("parameters").optional(),this.key("curve").objid().optional())})),s=n.define("SubjectPublicKeyInfo",(function(){this.seq().obj(this.key("algorithm").use(o),this.key("subjectPublicKey").bitstr())})),c=n.define("RelativeDistinguishedName",(function(){this.setof(r)})),p=n.define("RDNSequence",(function(){this.seqof(c)})),u=n.define("Name",(function(){this.choice({rdnSequence:this.use(p)})})),f=n.define("Validity",(function(){this.seq().obj(this.key("notBefore").use(a),this.key("notAfter").use(a))})),l=n.define("Extension",(function(){this.seq().obj(this.key("extnID").objid(),this.key("critical").bool().def(!1),this.key("extnValue").octstr())})),d=n.define("TBSCertificate",(function(){this.seq().obj(this.key("version").explicit(0).int().optional(),this.key("serialNumber").int(),this.key("signature").use(o),this.key("issuer").use(u),this.key("validity").use(f),this.key("subject").use(u),this.key("subjectPublicKeyInfo").use(s),this.key("issuerUniqueID").implicit(1).bitstr().optional(),this.key("subjectUniqueID").implicit(2).bitstr().optional(),this.key("extensions").explicit(3).seqof(l).optional())})),h=n.define("X509Certificate",(function(){this.seq().obj(this.key("tbsCertificate").use(d),this.key("signatureAlgorithm").use(o),this.key("signatureValue").bitstr())}));e.exports=h},function(e){e.exports=JSON.parse('{"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}')},function(e,t,i){var n=/Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m,a=/^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m,r=/^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m,o=i(46),s=i(64),c=i(1).Buffer;e.exports=function(e,t){var i,p=e.toString(),u=p.match(n);if(u){var f="aes"+u[1],l=c.from(u[2],"hex"),d=c.from(u[3].replace(/[\r\n]/g,""),"base64"),h=o(t,l.slice(0,8),parseInt(u[1],10)).key,m=[],b=s.createDecipheriv(f,h,l);m.push(b.update(d)),m.push(b.final()),i=c.concat(m)}else{var v=p.match(r);i=new c(v[2].replace(/[\r\n]/g,""),"base64")}return{tag:p.match(a)[1],data:i}}},function(e,t,i){(function(t){var n=i(4),a=i(68).ec,r=i(48),o=i(125);function s(e,t){if(e.cmpn(0)<=0)throw new Error("invalid sig");if(e.cmp(t)>=t)throw new Error("invalid sig")}e.exports=function(e,i,c,p,u){var f=r(c);if("ec"===f.type){if("ecdsa"!==p&&"ecdsa/rsa"!==p)throw new Error("wrong public key type");return function(e,t,i){var n=o[i.data.algorithm.curve.join(".")];if(!n)throw new Error("unknown curve "+i.data.algorithm.curve.join("."));var r=new a(n),s=i.data.subjectPrivateKey.data;return r.verify(t,e,s)}(e,i,f)}if("dsa"===f.type){if("dsa"!==p)throw new Error("wrong public key type");return function(e,t,i){var a=i.data.p,o=i.data.q,c=i.data.g,p=i.data.pub_key,u=r.signature.decode(e,"der"),f=u.s,l=u.r;s(f,o),s(l,o);var d=n.mont(a),h=f.invm(o);return 0===c.toRed(d).redPow(new n(t).mul(h).mod(o)).fromRed().mul(p.toRed(d).redPow(l.mul(h).mod(o)).fromRed()).mod(a).mod(o).cmp(l)}(e,i,f)}if("rsa"!==p&&"ecdsa/rsa"!==p)throw new Error("wrong public key type");i=t.concat([u,i]);for(var l=f.modulus.byteLength(),d=[1],h=0;i.length+d.length+2<l;)d.push(255),h++;d.push(0);for(var m=-1;++m<i.length;)d.push(i[m]);d=new t(d);var b=n.mont(f.modulus);e=(e=new n(e).toRed(b)).redPow(new n(f.publicExponent)),e=new t(e.fromRed().toArray());var v=h<8?1:0;for(l=Math.min(e.length,d.length),e.length!==d.length&&(v=1),m=-1;++m<l;)v|=e[m]^d[m];return 0===v}}).call(this,i(2).Buffer)},function(e,t,i){(function(t){var n=i(68),a=i(4);e.exports=function(e){return new o(e)};var r={secp256k1:{name:"secp256k1",byteLength:32},secp224r1:{name:"p224",byteLength:28},prime256v1:{name:"p256",byteLength:32},prime192v1:{name:"p192",byteLength:24},ed25519:{name:"ed25519",byteLength:32},secp384r1:{name:"p384",byteLength:48},secp521r1:{name:"p521",byteLength:66}};function o(e){this.curveType=r[e],this.curveType||(this.curveType={name:e}),this.curve=new n.ec(this.curveType.name),this.keys=void 0}function s(e,i,n){Array.isArray(e)||(e=e.toArray());var a=new t(e);if(n&&a.length<n){var r=new t(n-a.length);r.fill(0),a=t.concat([r,a])}return i?a.toString(i):a}r.p224=r.secp224r1,r.p256=r.secp256r1=r.prime256v1,r.p192=r.secp192r1=r.prime192v1,r.p384=r.secp384r1,r.p521=r.secp521r1,o.prototype.generateKeys=function(e,t){return this.keys=this.curve.genKeyPair(),this.getPublicKey(e,t)},o.prototype.computeSecret=function(e,i,n){return i=i||"utf8",t.isBuffer(e)||(e=new t(e,i)),s(this.curve.keyFromPublic(e).getPublic().mul(this.keys.getPrivate()).getX(),n,this.curveType.byteLength)},o.prototype.getPublicKey=function(e,t){var i=this.keys.getPublic("compressed"===t,!0);return"hybrid"===t&&(i[i.length-1]%2?i[0]=7:i[0]=6),s(i,e)},o.prototype.getPrivateKey=function(e){return s(this.keys.getPrivate(),e)},o.prototype.setPublicKey=function(e,i){return i=i||"utf8",t.isBuffer(e)||(e=new t(e,i)),this.keys._importPublic(e),this},o.prototype.setPrivateKey=function(e,i){i=i||"utf8",t.isBuffer(e)||(e=new t(e,i));var n=new a(e);return n=n.toString(16),this.keys=this.curve.genKeyPair(),this.keys._importPrivate(n),this}}).call(this,i(2).Buffer)},function(e,t,i){t.publicEncrypt=i(275),t.privateDecrypt=i(276),t.privateEncrypt=function(e,i){return t.publicEncrypt(e,i,!0)},t.publicDecrypt=function(e,i){return t.privateDecrypt(e,i,!0)}},function(e,t,i){var n=i(48),a=i(18),r=i(28),o=i(126),s=i(127),c=i(4),p=i(128),u=i(67),f=i(1).Buffer;e.exports=function(e,t,i){var l;l=e.padding?e.padding:i?1:4;var d,h=n(e);if(4===l)d=function(e,t){var i=e.modulus.byteLength(),n=t.length,p=r("sha1").update(f.alloc(0)).digest(),u=p.length,l=2*u;if(n>i-l-2)throw new Error("message too long");var d=f.alloc(i-n-l-2),h=i-u-1,m=a(u),b=s(f.concat([p,d,f.alloc(1,1),t],h),o(m,h)),v=s(m,o(b,u));return new c(f.concat([f.alloc(1),v,b],i))}(h,t);else if(1===l)d=function(e,t,i){var n,r=t.length,o=e.modulus.byteLength();if(r>o-11)throw new Error("message too long");n=i?f.alloc(o-r-3,255):function(e){var t,i=f.allocUnsafe(e),n=0,r=a(2*e),o=0;for(;n<e;)o===r.length&&(r=a(2*e),o=0),(t=r[o++])&&(i[n++]=t);return i}(o-r-3);return new c(f.concat([f.from([0,i?1:2]),n,f.alloc(1),t],o))}(h,t,i);else{if(3!==l)throw new Error("unknown padding");if((d=new c(t)).cmp(h.modulus)>=0)throw new Error("data too long for modulus")}return i?u(d,h):p(d,h)}},function(e,t,i){var n=i(48),a=i(126),r=i(127),o=i(4),s=i(67),c=i(28),p=i(128),u=i(1).Buffer;e.exports=function(e,t,i){var f;f=e.padding?e.padding:i?1:4;var l,d=n(e),h=d.modulus.byteLength();if(t.length>h||new o(t).cmp(d.modulus)>=0)throw new Error("decryption error");l=i?p(new o(t),d):s(t,d);var m=u.alloc(h-l.length);if(l=u.concat([m,l],h),4===f)return function(e,t){var i=e.modulus.byteLength(),n=c("sha1").update(u.alloc(0)).digest(),o=n.length;if(0!==t[0])throw new Error("decryption error");var s=t.slice(1,o+1),p=t.slice(o+1),f=r(s,a(p,o)),l=r(p,a(f,i-o-1));if(function(e,t){e=u.from(e),t=u.from(t);var i=0,n=e.length;e.length!==t.length&&(i++,n=Math.min(e.length,t.length));var a=-1;for(;++a<n;)i+=e[a]^t[a];return i}(n,l.slice(0,o)))throw new Error("decryption error");var d=o;for(;0===l[d];)d++;if(1!==l[d++])throw new Error("decryption error");return l.slice(d)}(d,l);if(1===f)return function(e,t,i){var n=t.slice(0,2),a=2,r=0;for(;0!==t[a++];)if(a>=t.length){r++;break}var o=t.slice(2,a-1);("0002"!==n.toString("hex")&&!i||"0001"!==n.toString("hex")&&i)&&r++;o.length<8&&r++;if(r)throw new Error("decryption error");return t.slice(a)}(0,l,i);if(3===f)return l;throw new Error("unknown padding")}},function(e,t,i){"use strict";(function(e,n){function a(){throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11")}var r=i(1),o=i(18),s=r.Buffer,c=r.kMaxLength,p=e.crypto||e.msCrypto,u=Math.pow(2,32)-1;function f(e,t){if("number"!=typeof e||e!=e)throw new TypeError("offset must be a number");if(e>u||e<0)throw new TypeError("offset must be a uint32");if(e>c||e>t)throw new RangeError("offset out of range")}function l(e,t,i){if("number"!=typeof e||e!=e)throw new TypeError("size must be a number");if(e>u||e<0)throw new TypeError("size must be a uint32");if(e+t>i||e>c)throw new RangeError("buffer too small")}function d(e,t,i,a){if(n.browser){var r=e.buffer,s=new Uint8Array(r,t,i);return p.getRandomValues(s),a?void n.nextTick((function(){a(null,e)})):e}if(!a)return o(i).copy(e,t),e;o(i,(function(i,n){if(i)return a(i);n.copy(e,t),a(null,e)}))}p&&p.getRandomValues||!n.browser?(t.randomFill=function(t,i,n,a){if(!(s.isBuffer(t)||t instanceof e.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');if("function"==typeof i)a=i,i=0,n=t.length;else if("function"==typeof n)a=n,n=t.length-i;else if("function"!=typeof a)throw new TypeError('"cb" argument must be a function');return f(i,t.length),l(n,i,t.length),d(t,i,n,a)},t.randomFillSync=function(t,i,n){void 0===i&&(i=0);if(!(s.isBuffer(t)||t instanceof e.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');f(i,t.length),void 0===n&&(n=t.length-i);return l(n,i,t.length),d(t,i,n)}):(t.randomFill=a,t.randomFillSync=a)}).call(this,i(5),i(3))},function(e,t,i){(function(t){i(11);var n=i(17);function a(){this.types=Object.create(null),this.extensions=Object.create(null)}a.prototype.define=function(e){for(var i in e){for(var n=e[i],a=0;a<n.length;a++)t.env.DEBUG_MIME&&this.types[n[a]]&&console.warn((this._loading||"define()").replace(/.*\//,""),'changes "'+n[a]+'" extension type from '+this.types[n[a]]+" to "+i),this.types[n[a]]=i;this.extensions[i]||(this.extensions[i]=n[0])}},a.prototype.load=function(e){this._loading=e;var t={};n.readFileSync(e,"ascii").split(/[\r\n]+/).forEach((function(e){var i=e.replace(/\s*#.*|^\s*|\s*$/g,"").split(/\s+/);t[i.shift()]=i})),this.define(t),this._loading=null},a.prototype.lookup=function(e,t){var i=e.replace(/^.*[\.\/\\]/,"").toLowerCase();return this.types[i]||t||this.default_type},a.prototype.extension=function(e){var t=e.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();return this.extensions[t]};var r=new a;r.define(i(279)),r.default_type=r.lookup("bin"),r.Mime=a,r.charsets={lookup:function(e,t){return/^text\/|^application\/(javascript|json)/.test(e)?"UTF-8":t}},e.exports=r}).call(this,i(3))},function(e){e.exports=JSON.parse('{"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomsvc+xml":["atomsvc"],"application/bdoc":["bdoc"],"application/ccxml+xml":["ccxml"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["ecma"],"application/emma+xml":["emma"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/font-tdpfr":["pfr"],"application/font-woff":[],"application/font-woff2":[],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/prs.cww":["cww"],"application/pskc+xml":["pskcxml"],"application/raml+yaml":["raml"],"application/rdf+xml":["rdf"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.apple.pkpass":["pkpass"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-apps.document":["gdoc"],"application/vnd.google-apps.presentation":["gslides"],"application/vnd.google-apps.spreadsheet":["gsheet"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.hydrostatix.sof-data":["sfd-hdstx"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-outlook":["msg"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.n-gage.symbian.install":["n-gage"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.wadl+xml":["wadl"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/voicexml+xml":["vxml"],"application/wasm":["wasm"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":[],"application/x-arj":["arj"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bdoc":[],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-cocoa":["cco"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-httpd-php":["php"],"application/x-install-instructions":["install"],"application/x-iso9660-image":[],"application/x-java-archive-diff":["jardiff"],"application/x-java-jnlp-file":["jnlp"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-makeself":["run"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdos-program":[],"application/x-msdownload":["com","bat"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["wmf","emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-ns-proxy-autoconfig":["pac"],"application/x-nzb":["nzb"],"application/x-perl":["pl","pm"],"application/x-pilot":[],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["rar"],"application/x-redhat-package-manager":["rpm"],"application/x-research-info-systems":["ris"],"application/x-sea":["sea"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl","tk"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["obj"],"application/x-ustar":["ustar"],"application/x-virtualbox-hdd":["hdd"],"application/x-virtualbox-ova":["ova"],"application/x-virtualbox-ovf":["ovf"],"application/x-virtualbox-vbox":["vbox"],"application/x-virtualbox-vbox-extpack":["vbox-extpack"],"application/x-virtualbox-vdi":["vdi"],"application/x-virtualbox-vhd":["vhd"],"application/x-virtualbox-vmdk":["vmdk"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt","pem"],"application/x-xfig":["fig"],"application/x-xliff+xml":["xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"application/xaml+xml":["xaml"],"application/xcap-diff+xml":["xdf"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":[],"audio/adpcm":["adp"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mp3":[],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/wav":["wav"],"audio/wave":[],"audio/webm":["weba"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-m4a":[],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-realaudio":[],"audio/x-wav":[],"audio/xm":["xm"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"font/collection":["ttc"],"font/otf":["otf"],"font/ttf":["ttf"],"font/woff":["woff"],"font/woff2":["woff2"],"image/apng":["apng"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/g3fax":["g3"],"image/gif":["gif"],"image/ief":["ief"],"image/jp2":["jp2","jpg2"],"image/jpeg":["jpeg","jpg","jpe"],"image/jpm":["jpm"],"image/jpx":["jpx","jpf"],"image/ktx":["ktx"],"image/png":["png"],"image/prs.btif":["btif"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/tiff":["tiff","tif"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":[],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/webp":["webp"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["ico"],"image/x-jng":["jng"],"image/x-mrsid-image":["sid"],"image/x-ms-bmp":[],"image/x-pcx":["pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/rfc822":["eml","mime"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.vtu":["vtu"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["x3db","x3dbz"],"model/x3d+vrml":["x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/hjson":["hjson"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/prs.lines.tag":["dsc"],"text/richtext":["rtx"],"text/rtf":[],"text/sgml":["sgml","sgm"],"text/slim":["slim","slm"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/vtt":["vtt"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-org":[],"text/x-pascal":["p","pas"],"text/x-processing":["pde"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-suse-ymp":["ymp"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"text/xml":[],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/jpeg":["jpgv"],"video/jpm":["jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/webm":["webm"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]}')},function(e,t){var i=1e3,n=6e4,a=36e5,r=24*a;function o(e,t,i,n){var a=t>=1.5*i;return Math.round(e/i)+" "+n+(a?"s":"")}e.exports=function(e,t){t=t||{};var s=typeof e;if("string"===s&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var o=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*r;case"hours":case"hour":case"hrs":case"hr":case"h":return o*a;case"minutes":case"minute":case"mins":case"min":case"m":return o*n;case"seconds":case"second":case"secs":case"sec":case"s":return o*i;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}(e);if("number"===s&&!1===isNaN(e))return t.long?function(e){var t=Math.abs(e);if(t>=r)return o(e,t,r,"day");if(t>=a)return o(e,t,a,"hour");if(t>=n)return o(e,t,n,"minute");if(t>=i)return o(e,t,i,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=r)return Math.round(e/r)+"d";if(t>=a)return Math.round(e/a)+"h";if(t>=n)return Math.round(e/n)+"m";if(t>=i)return Math.round(e/i)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,i){"use strict";
/*!
 * forwarded
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e){if(!e)throw new TypeError("argument req is required");var t=function(e){for(var t=e.length,i=[],n=e.length,a=e.length-1;a>=0;a--)switch(e.charCodeAt(a)){case 32:n===t&&(n=t=a);break;case 44:n!==t&&i.push(e.substring(n,t)),n=t=a;break;default:n=a}n!==t&&i.push(e.substring(n,t));return i}(e.headers["x-forwarded-for"]||"");return[e.connection.remoteAddress].concat(t)}},function(e,t,i){(function(e){(function(){var t,i,n,a,r,o,s;i={},null!==e&&e.exports?e.exports=i:this.ipaddr=i,s=function(e,t,i,n){var a,r;if(e.length!==t.length)throw new Error("ipaddr: cannot match CIDR for objects with different lengths");for(a=0;n>0;){if((r=i-n)<0&&(r=0),e[a]>>r!=t[a]>>r)return!1;n-=i,a+=1}return!0},i.subnetMatch=function(e,t,i){var n,a,r,o,s;for(r in null==i&&(i="unicast"),t)for(!(o=t[r])[0]||o[0]instanceof Array||(o=[o]),n=0,a=o.length;n<a;n++)if(s=o[n],e.kind()===s[0].kind()&&e.match.apply(e,s))return r;return i},i.IPv4=function(){function e(e){var t,i,n;if(4!==e.length)throw new Error("ipaddr: ipv4 octet count should be 4");for(t=0,i=e.length;t<i;t++)if(!(0<=(n=e[t])&&n<=255))throw new Error("ipaddr: ipv4 octet should fit in 8 bits");this.octets=e}return e.prototype.kind=function(){return"ipv4"},e.prototype.toString=function(){return this.octets.join(".")},e.prototype.toNormalizedString=function(){return this.toString()},e.prototype.toByteArray=function(){return this.octets.slice(0)},e.prototype.match=function(e,t){var i;if(void 0===t&&(e=(i=e)[0],t=i[1]),"ipv4"!==e.kind())throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");return s(this.octets,e.octets,8,t)},e.prototype.SpecialRanges={unspecified:[[new e([0,0,0,0]),8]],broadcast:[[new e([255,255,255,255]),32]],multicast:[[new e([224,0,0,0]),4]],linkLocal:[[new e([169,254,0,0]),16]],loopback:[[new e([127,0,0,0]),8]],carrierGradeNat:[[new e([100,64,0,0]),10]],private:[[new e([10,0,0,0]),8],[new e([172,16,0,0]),12],[new e([192,168,0,0]),16]],reserved:[[new e([192,0,0,0]),24],[new e([192,0,2,0]),24],[new e([192,88,99,0]),24],[new e([198,51,100,0]),24],[new e([203,0,113,0]),24],[new e([240,0,0,0]),4]]},e.prototype.range=function(){return i.subnetMatch(this,this.SpecialRanges)},e.prototype.toIPv4MappedAddress=function(){return i.IPv6.parse("::ffff:"+this.toString())},e.prototype.prefixLengthFromSubnetMask=function(){var e,t,i,n,a,r,o;for(o={0:8,128:7,192:6,224:5,240:4,248:3,252:2,254:1,255:0},e=0,a=!1,t=i=3;i>=0;t=i+=-1){if(!((n=this.octets[t])in o))return null;if(r=o[n],a&&0!==r)return null;8!==r&&(a=!0),e+=r}return 32-e},e}(),n="(0?\\d+|0x[a-f0-9]+)",a={fourOctet:new RegExp("^"+n+"\\."+n+"\\."+n+"\\."+n+"$","i"),longValue:new RegExp("^"+n+"$","i")},i.IPv4.parser=function(e){var t,i,n,r,o;if(i=function(e){return"0"===e[0]&&"x"!==e[1]?parseInt(e,8):parseInt(e)},t=e.match(a.fourOctet))return function(){var e,a,r,o;for(o=[],e=0,a=(r=t.slice(1,6)).length;e<a;e++)n=r[e],o.push(i(n));return o}();if(t=e.match(a.longValue)){if((o=i(t[1]))>4294967295||o<0)throw new Error("ipaddr: address outside defined range");return function(){var e,t;for(t=[],r=e=0;e<=24;r=e+=8)t.push(o>>r&255);return t}().reverse()}return null},i.IPv6=function(){function e(e,t){var i,n,a,r,o,s;if(16===e.length)for(this.parts=[],i=n=0;n<=14;i=n+=2)this.parts.push(e[i]<<8|e[i+1]);else{if(8!==e.length)throw new Error("ipaddr: ipv6 part count should be 8 or 16");this.parts=e}for(a=0,r=(s=this.parts).length;a<r;a++)if(!(0<=(o=s[a])&&o<=65535))throw new Error("ipaddr: ipv6 part should fit in 16 bits");t&&(this.zoneId=t)}return e.prototype.kind=function(){return"ipv6"},e.prototype.toString=function(){return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/,"::")},e.prototype.toRFC5952String=function(){var e,t,i,n,a;for(n=/((^|:)(0(:|$)){2,})/g,a=this.toNormalizedString(),e=0,t=-1;i=n.exec(a);)i[0].length>t&&(e=i.index,t=i[0].length);return t<0?a:a.substring(0,e)+"::"+a.substring(e+t)},e.prototype.toByteArray=function(){var e,t,i,n,a;for(e=[],t=0,i=(a=this.parts).length;t<i;t++)n=a[t],e.push(n>>8),e.push(255&n);return e},e.prototype.toNormalizedString=function(){var e,t,i;return e=function(){var e,i,n,a;for(a=[],e=0,i=(n=this.parts).length;e<i;e++)t=n[e],a.push(t.toString(16));return a}.call(this).join(":"),i="",this.zoneId&&(i="%"+this.zoneId),e+i},e.prototype.toFixedLengthString=function(){var e,t,i;return e=function(){var e,i,n,a;for(a=[],e=0,i=(n=this.parts).length;e<i;e++)t=n[e],a.push(t.toString(16).padStart(4,"0"));return a}.call(this).join(":"),i="",this.zoneId&&(i="%"+this.zoneId),e+i},e.prototype.match=function(e,t){var i;if(void 0===t&&(e=(i=e)[0],t=i[1]),"ipv6"!==e.kind())throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");return s(this.parts,e.parts,16,t)},e.prototype.SpecialRanges={unspecified:[new e([0,0,0,0,0,0,0,0]),128],linkLocal:[new e([65152,0,0,0,0,0,0,0]),10],multicast:[new e([65280,0,0,0,0,0,0,0]),8],loopback:[new e([0,0,0,0,0,0,0,1]),128],uniqueLocal:[new e([64512,0,0,0,0,0,0,0]),7],ipv4Mapped:[new e([0,0,0,0,0,65535,0,0]),96],rfc6145:[new e([0,0,0,0,65535,0,0,0]),96],rfc6052:[new e([100,65435,0,0,0,0,0,0]),96],"6to4":[new e([8194,0,0,0,0,0,0,0]),16],teredo:[new e([8193,0,0,0,0,0,0,0]),32],reserved:[[new e([8193,3512,0,0,0,0,0,0]),32]]},e.prototype.range=function(){return i.subnetMatch(this,this.SpecialRanges)},e.prototype.isIPv4MappedAddress=function(){return"ipv4Mapped"===this.range()},e.prototype.toIPv4Address=function(){var e,t,n;if(!this.isIPv4MappedAddress())throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");return e=(n=this.parts.slice(-2))[0],t=n[1],new i.IPv4([e>>8,255&e,t>>8,255&t])},e.prototype.prefixLengthFromSubnetMask=function(){var e,t,i,n,a,r,o;for(o={0:16,32768:15,49152:14,57344:13,61440:12,63488:11,64512:10,65024:9,65280:8,65408:7,65472:6,65504:5,65520:4,65528:3,65532:2,65534:1,65535:0},e=0,a=!1,t=i=7;i>=0;t=i+=-1){if(!((n=this.parts[t])in o))return null;if(r=o[n],a&&0!==r)return null;16!==r&&(a=!0),e+=r}return 128-e},e}(),r="(?:[0-9a-f]+::?)+",o={zoneIndex:new RegExp("%[0-9a-z]{1,}","i"),native:new RegExp("^(::)?("+r+")?([0-9a-f]+)?(::)?(%[0-9a-z]{1,})?$","i"),transitional:new RegExp("^((?:"+r+")|(?:::)(?:"+r+")?)"+n+"\\."+n+"\\."+n+"\\."+n+"(%[0-9a-z]{1,})?$","i")},t=function(e,t){var i,n,a,r,s,c;if(e.indexOf("::")!==e.lastIndexOf("::"))return null;for((c=(e.match(o.zoneIndex)||[])[0])&&(c=c.substring(1),e=e.replace(/%.+$/,"")),i=0,n=-1;(n=e.indexOf(":",n+1))>=0;)i++;if("::"===e.substr(0,2)&&i--,"::"===e.substr(-2,2)&&i--,i>t)return null;for(s=t-i,r=":";s--;)r+="0:";return":"===(e=e.replace("::",r))[0]&&(e=e.slice(1)),":"===e[e.length-1]&&(e=e.slice(0,-1)),{parts:t=function(){var t,i,n,r;for(r=[],t=0,i=(n=e.split(":")).length;t<i;t++)a=n[t],r.push(parseInt(a,16));return r}(),zoneId:c}},i.IPv6.parser=function(e){var i,n,a,r,s,c,p;if(o.native.test(e))return t(e,8);if((r=e.match(o.transitional))&&(p=r[6]||"",(i=t(r[1].slice(0,-1)+p,6)).parts)){for(n=0,a=(c=[parseInt(r[2]),parseInt(r[3]),parseInt(r[4]),parseInt(r[5])]).length;n<a;n++)if(!(0<=(s=c[n])&&s<=255))return null;return i.parts.push(c[0]<<8|c[1]),i.parts.push(c[2]<<8|c[3]),{parts:i.parts,zoneId:i.zoneId}}return null},i.IPv4.isIPv4=i.IPv6.isIPv6=function(e){return null!==this.parser(e)},i.IPv4.isValid=function(e){try{return new this(this.parser(e)),!0}catch(e){return e,!1}},i.IPv4.isValidFourPartDecimal=function(e){return!(!i.IPv4.isValid(e)||!e.match(/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){3}$/))},i.IPv6.isValid=function(e){var t;if("string"==typeof e&&-1===e.indexOf(":"))return!1;try{return new this((t=this.parser(e)).parts,t.zoneId),!0}catch(e){return e,!1}},i.IPv4.parse=function(e){var t;if(null===(t=this.parser(e)))throw new Error("ipaddr: string is not formatted like ip address");return new this(t)},i.IPv6.parse=function(e){var t;if(null===(t=this.parser(e)).parts)throw new Error("ipaddr: string is not formatted like ip address");return new this(t.parts,t.zoneId)},i.IPv4.parseCIDR=function(e){var t,i,n;if((i=e.match(/^(.+)\/(\d+)$/))&&(t=parseInt(i[2]))>=0&&t<=32)return n=[this.parse(i[1]),t],Object.defineProperty(n,"toString",{value:function(){return this.join("/")}}),n;throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range")},i.IPv4.subnetMaskFromPrefixLength=function(e){var t,i,n;if((e=parseInt(e))<0||e>32)throw new Error("ipaddr: invalid IPv4 prefix length");for(n=[0,0,0,0],i=0,t=Math.floor(e/8);i<t;)n[i]=255,i++;return t<4&&(n[t]=Math.pow(2,e%8)-1<<8-e%8),new this(n)},i.IPv4.broadcastAddressFromCIDR=function(e){var t,i,n,a,r;try{for(n=(t=this.parseCIDR(e))[0].toByteArray(),r=this.subnetMaskFromPrefixLength(t[1]).toByteArray(),a=[],i=0;i<4;)a.push(parseInt(n[i],10)|255^parseInt(r[i],10)),i++;return new this(a)}catch(e){throw e,new Error("ipaddr: the address does not have IPv4 CIDR format")}},i.IPv4.networkAddressFromCIDR=function(e){var t,i,n,a,r;try{for(n=(t=this.parseCIDR(e))[0].toByteArray(),r=this.subnetMaskFromPrefixLength(t[1]).toByteArray(),a=[],i=0;i<4;)a.push(parseInt(n[i],10)&parseInt(r[i],10)),i++;return new this(a)}catch(e){throw e,new Error("ipaddr: the address does not have IPv4 CIDR format")}},i.IPv6.parseCIDR=function(e){var t,i,n;if((i=e.match(/^(.+)\/(\d+)$/))&&(t=parseInt(i[2]))>=0&&t<=128)return n=[this.parse(i[1]),t],Object.defineProperty(n,"toString",{value:function(){return this.join("/")}}),n;throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range")},i.isValid=function(e){return i.IPv6.isValid(e)||i.IPv4.isValid(e)},i.parse=function(e){if(i.IPv6.isValid(e))return i.IPv6.parse(e);if(i.IPv4.isValid(e))return i.IPv4.parse(e);throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format")},i.parseCIDR=function(e){try{return i.IPv6.parseCIDR(e)}catch(t){t;try{return i.IPv4.parseCIDR(e)}catch(e){throw e,new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format")}}},i.fromByteArray=function(e){var t;if(4===(t=e.length))return new i.IPv4(e);if(16===t)return new i.IPv6(e);throw new Error("ipaddr: the binary input is neither an IPv6 nor IPv4 address")},i.process=function(e){var t;return"ipv6"===(t=this.parse(e)).kind()&&t.isIPv4MappedAddress()?t.toIPv4Address():t}}).call(this)}).call(this,i(56)(e))},function(e,t,i){"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(284),a=i(9)("express"),r=i(17).isIP,o=i(26),s=i(58),c=i(129),p=i(130),u=i(27),f=i(131),l=Object.create(s.IncomingMessage.prototype);function d(e,t,i){Object.defineProperty(e,t,{configurable:!0,enumerable:!0,get:i})}e.exports=l,l.get=l.header=function(e){if(!e)throw new TypeError("name argument is required to req.get");if("string"!=typeof e)throw new TypeError("name must be a string to req.get");var t=e.toLowerCase();switch(t){case"referer":case"referrer":return this.headers.referrer||this.headers.referer;default:return this.headers[t]}},l.accepts=function(){var e=n(this);return e.types.apply(e,arguments)},l.acceptsEncodings=function(){var e=n(this);return e.encodings.apply(e,arguments)},l.acceptsEncoding=a.function(l.acceptsEncodings,"req.acceptsEncoding: Use acceptsEncodings instead"),l.acceptsCharsets=function(){var e=n(this);return e.charsets.apply(e,arguments)},l.acceptsCharset=a.function(l.acceptsCharsets,"req.acceptsCharset: Use acceptsCharsets instead"),l.acceptsLanguages=function(){var e=n(this);return e.languages.apply(e,arguments)},l.acceptsLanguage=a.function(l.acceptsLanguages,"req.acceptsLanguage: Use acceptsLanguages instead"),l.range=function(e,t){var i=this.get("Range");if(i)return p(e,i,t)},l.param=function(e,t){var i=this.params||{},n=this.body||{},r=this.query||{},o=1===arguments.length?"name":"name, default";return a("req.param("+o+"): Use req.params, req.body, or req.query instead"),null!=i[e]&&i.hasOwnProperty(e)?i[e]:null!=n[e]?n[e]:null!=r[e]?r[e]:t},l.is=function(e){var t=e;if(!Array.isArray(e)){t=new Array(arguments.length);for(var i=0;i<t.length;i++)t[i]=arguments[i]}return o(this,t)},d(l,"protocol",(function(){var e=this.connection.encrypted?"https":"http";if(!this.app.get("trust proxy fn")(this.connection.remoteAddress,0))return e;var t=this.get("X-Forwarded-Proto")||e,i=t.indexOf(",");return-1!==i?t.substring(0,i).trim():t.trim()})),d(l,"secure",(function(){return"https"===this.protocol})),d(l,"ip",(function(){var e=this.app.get("trust proxy fn");return f(this,e)})),d(l,"ips",(function(){var e=this.app.get("trust proxy fn"),t=f.all(this,e);return t.reverse().pop(),t})),d(l,"subdomains",(function(){var e=this.hostname;if(!e)return[];var t=this.app.get("subdomain offset"),i=r(e)?[e]:e.split(".").reverse();return i.slice(t)})),d(l,"path",(function(){return u(this).pathname})),d(l,"hostname",(function(){var e=this.app.get("trust proxy fn"),t=this.get("X-Forwarded-Host");if(t&&e(this.connection.remoteAddress,0)?-1!==t.indexOf(",")&&(t=t.substring(0,t.indexOf(",")).trimRight()):t=this.get("Host"),t){var i="["===t[0]?t.indexOf("]")+1:0,n=t.indexOf(":",i);return-1!==n?t.substring(0,n):t}})),d(l,"host",a.function((function(){return this.hostname}),"req.host: Use req.hostname instead")),d(l,"fresh",(function(){var e=this.method,t=this.res,i=t.statusCode;return("GET"===e||"HEAD"===e)&&((i>=200&&i<300||304===i)&&c(this.headers,{etag:t.get("ETag"),"last-modified":t.get("Last-Modified")}))})),d(l,"stale",(function(){return!this.fresh})),d(l,"xhr",(function(){return"xmlhttprequest"===(this.get("X-Requested-With")||"").toLowerCase()}))},function(e,t,i){"use strict";
/*!
 * accepts
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=i(285),a=i(84);function r(e){if(!(this instanceof r))return new r(e);this.headers=e.headers,this.negotiator=new n(e)}function o(e){return-1===e.indexOf("/")?a.lookup(e):e}function s(e){return"string"==typeof e}e.exports=r,r.prototype.type=r.prototype.types=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var i=0;i<t.length;i++)t[i]=arguments[i]}if(!t||0===t.length)return this.negotiator.mediaTypes();if(!this.headers.accept)return t[0];var n=t.map(o),a=this.negotiator.mediaTypes(n.filter(s)),r=a[0];return!!r&&t[n.indexOf(r)]},r.prototype.encoding=r.prototype.encodings=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var i=0;i<t.length;i++)t[i]=arguments[i]}return t&&0!==t.length?this.negotiator.encodings(t)[0]||!1:this.negotiator.encodings()},r.prototype.charset=r.prototype.charsets=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var i=0;i<t.length;i++)t[i]=arguments[i]}return t&&0!==t.length?this.negotiator.charsets(t)[0]||!1:this.negotiator.charsets()},r.prototype.lang=r.prototype.langs=r.prototype.language=r.prototype.languages=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var i=0;i<t.length;i++)t[i]=arguments[i]}return t&&0!==t.length?this.negotiator.languages(t)[0]||!1:this.negotiator.languages()}},function(e,t,i){"use strict";
/*!
 * negotiator
 * Copyright(c) 2012 Federico Romero
 * Copyright(c) 2012-2014 Isaac Z. Schlueter
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var n=Object.create(null);function a(e){if(!(this instanceof a))return new a(e);this.request=e}function r(e){var t=n[e];if(void 0!==t)return t;switch(e){case"charset":t=i(286);break;case"encoding":t=i(287);break;case"language":t=i(288);break;case"mediaType":t=i(289);break;default:throw new Error("Cannot find module '"+e+"'")}return n[e]=t,t}e.exports=a,e.exports.Negotiator=a,a.prototype.charset=function(e){var t=this.charsets(e);return t&&t[0]},a.prototype.charsets=function(e){return(0,r("charset").preferredCharsets)(this.request.headers["accept-charset"],e)},a.prototype.encoding=function(e){var t=this.encodings(e);return t&&t[0]},a.prototype.encodings=function(e){return(0,r("encoding").preferredEncodings)(this.request.headers["accept-encoding"],e)},a.prototype.language=function(e){var t=this.languages(e);return t&&t[0]},a.prototype.languages=function(e){return(0,r("language").preferredLanguages)(this.request.headers["accept-language"],e)},a.prototype.mediaType=function(e){var t=this.mediaTypes(e);return t&&t[0]},a.prototype.mediaTypes=function(e){return(0,r("mediaType").preferredMediaTypes)(this.request.headers.accept,e)},a.prototype.preferredCharset=a.prototype.charset,a.prototype.preferredCharsets=a.prototype.charsets,a.prototype.preferredEncoding=a.prototype.encoding,a.prototype.preferredEncodings=a.prototype.encodings,a.prototype.preferredLanguage=a.prototype.language,a.prototype.preferredLanguages=a.prototype.languages,a.prototype.preferredMediaType=a.prototype.mediaType,a.prototype.preferredMediaTypes=a.prototype.mediaTypes},function(e,t,i){"use strict";e.exports=o,e.exports.preferredCharsets=o;var n=/^\s*([^\s;]+)\s*(?:;(.*))?$/;function a(e,t){var i=n.exec(e);if(!i)return null;var a=i[1],r=1;if(i[2])for(var o=i[2].split(";"),s=0;s<o.length;s++){var c=o[s].trim().split("=");if("q"===c[0]){r=parseFloat(c[1]);break}}return{charset:a,q:r,i:t}}function r(e,t,i){var n=0;if(t.charset.toLowerCase()===e.toLowerCase())n|=1;else if("*"!==t.charset)return null;return{i:i,o:t.i,q:t.q,s:n}}function o(e,t){var i=function(e){for(var t=e.split(","),i=0,n=0;i<t.length;i++){var r=a(t[i].trim(),i);r&&(t[n++]=r)}return t.length=n,t}(void 0===e?"*":e||"");if(!t)return i.filter(p).sort(s).map(c);var n=t.map((function(e,t){return function(e,t,i){for(var n={o:-1,q:0,s:0},a=0;a<t.length;a++){var o=r(e,t[a],i);o&&(n.s-o.s||n.q-o.q||n.o-o.o)<0&&(n=o)}return n}(e,i,t)}));return n.filter(p).sort(s).map((function(e){return t[n.indexOf(e)]}))}function s(e,t){return t.q-e.q||t.s-e.s||e.o-t.o||e.i-t.i||0}function c(e){return e.charset}function p(e){return e.q>0}},function(e,t,i){"use strict";e.exports=o,e.exports.preferredEncodings=o;var n=/^\s*([^\s;]+)\s*(?:;(.*))?$/;function a(e,t){var i=n.exec(e);if(!i)return null;var a=i[1],r=1;if(i[2])for(var o=i[2].split(";"),s=0;s<o.length;s++){var c=o[s].trim().split("=");if("q"===c[0]){r=parseFloat(c[1]);break}}return{encoding:a,q:r,i:t}}function r(e,t,i){var n=0;if(t.encoding.toLowerCase()===e.toLowerCase())n|=1;else if("*"!==t.encoding)return null;return{i:i,o:t.i,q:t.q,s:n}}function o(e,t){var i=function(e){for(var t=e.split(","),i=!1,n=1,o=0,s=0;o<t.length;o++){var c=a(t[o].trim(),o);c&&(t[s++]=c,i=i||r("identity",c),n=Math.min(n,c.q||1))}return i||(t[s++]={encoding:"identity",q:n,i:o}),t.length=s,t}(e||"");if(!t)return i.filter(p).sort(s).map(c);var n=t.map((function(e,t){return function(e,t,i){for(var n={o:-1,q:0,s:0},a=0;a<t.length;a++){var o=r(e,t[a],i);o&&(n.s-o.s||n.q-o.q||n.o-o.o)<0&&(n=o)}return n}(e,i,t)}));return n.filter(p).sort(s).map((function(e){return t[n.indexOf(e)]}))}function s(e,t){return t.q-e.q||t.s-e.s||e.o-t.o||e.i-t.i||0}function c(e){return e.encoding}function p(e){return e.q>0}},function(e,t,i){"use strict";e.exports=o,e.exports.preferredLanguages=o;var n=/^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;function a(e,t){var i=n.exec(e);if(!i)return null;var a=i[1],r=i[2],o=a;r&&(o+="-"+r);var s=1;if(i[3])for(var c=i[3].split(";"),p=0;p<c.length;p++){var u=c[p].split("=");"q"===u[0]&&(s=parseFloat(u[1]))}return{prefix:a,suffix:r,q:s,i:t,full:o}}function r(e,t,i){var n=a(e);if(!n)return null;var r=0;if(t.full.toLowerCase()===n.full.toLowerCase())r|=4;else if(t.prefix.toLowerCase()===n.full.toLowerCase())r|=2;else if(t.full.toLowerCase()===n.prefix.toLowerCase())r|=1;else if("*"!==t.full)return null;return{i:i,o:t.i,q:t.q,s:r}}function o(e,t){var i=function(e){for(var t=e.split(","),i=0,n=0;i<t.length;i++){var r=a(t[i].trim(),i);r&&(t[n++]=r)}return t.length=n,t}(void 0===e?"*":e||"");if(!t)return i.filter(p).sort(s).map(c);var n=t.map((function(e,t){return function(e,t,i){for(var n={o:-1,q:0,s:0},a=0;a<t.length;a++){var o=r(e,t[a],i);o&&(n.s-o.s||n.q-o.q||n.o-o.o)<0&&(n=o)}return n}(e,i,t)}));return n.filter(p).sort(s).map((function(e){return t[n.indexOf(e)]}))}function s(e,t){return t.q-e.q||t.s-e.s||e.o-t.o||e.i-t.i||0}function c(e){return e.full}function p(e){return e.q>0}},function(e,t,i){"use strict";e.exports=s,e.exports.preferredMediaTypes=s;var n=/^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;function a(e){for(var t=function(e){for(var t=e.split(","),i=1,n=0;i<t.length;i++)f(t[n])%2==0?t[++n]=t[i]:t[n]+=","+t[i];return t.length=n+1,t}(e),i=0,n=0;i<t.length;i++){var a=r(t[i].trim(),i);a&&(t[n++]=a)}return t.length=n,t}function r(e,t){var i=n.exec(e);if(!i)return null;var a=Object.create(null),r=1,o=i[2],s=i[1];if(i[3])for(var c=function(e){for(var t=e.split(";"),i=1,n=0;i<t.length;i++)f(t[n])%2==0?t[++n]=t[i]:t[n]+=";"+t[i];t.length=n+1;for(i=0;i<t.length;i++)t[i]=t[i].trim();return t}(i[3]).map(l),p=0;p<c.length;p++){var u=c[p],d=u[0].toLowerCase(),h=u[1],m=h&&'"'===h[0]&&'"'===h[h.length-1]?h.substr(1,h.length-2):h;if("q"===d){r=parseFloat(m);break}a[d]=m}return{type:s,subtype:o,params:a,q:r,i:t}}function o(e,t,i){var n=r(e),a=0;if(!n)return null;if(t.type.toLowerCase()==n.type.toLowerCase())a|=4;else if("*"!=t.type)return null;if(t.subtype.toLowerCase()==n.subtype.toLowerCase())a|=2;else if("*"!=t.subtype)return null;var o=Object.keys(t.params);if(o.length>0){if(!o.every((function(e){return"*"==t.params[e]||(t.params[e]||"").toLowerCase()==(n.params[e]||"").toLowerCase()})))return null;a|=1}return{i:i,o:t.i,q:t.q,s:a}}function s(e,t){var i=a(void 0===e?"*/*":e||"");if(!t)return i.filter(u).sort(c).map(p);var n=t.map((function(e,t){return function(e,t,i){for(var n={o:-1,q:0,s:0},a=0;a<t.length;a++){var r=o(e,t[a],i);r&&(n.s-r.s||n.q-r.q||n.o-r.o)<0&&(n=r)}return n}(e,i,t)}));return n.filter(u).sort(c).map((function(e){return t[n.indexOf(e)]}))}function c(e,t){return t.q-e.q||t.s-e.s||e.o-t.o||e.i-t.i||0}function p(e){return e.type+"/"+e.subtype}function u(e){return e.q>0}function f(e){for(var t=0,i=0;-1!==(i=e.indexOf('"',i));)t++,i++;return t}function l(e){var t,i,n=e.indexOf("=");return-1===n?t=e:(t=e.substr(0,n),i=e.substr(n+1)),[t,i]}},function(e,t,i){"use strict";(function(t){
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */
var n=i(93).Buffer,a=i(94),r=i(9)("express"),o=i(41),s=i(42),c=i(58),p=i(14).isAbsolute,u=i(37),f=i(11),l=i(22),d=i(44),h=i(291).sign,m=i(14).normalizeType,b=i(14).normalizeTypes,v=i(14).setCharset,g=i(292),y=i(59),x=f.extname,w=y.mime,_=f.resolve,k=i(293),E=Object.create(c.ServerResponse.prototype);e.exports=E;var S=/;\s*charset\s*=/;function A(e,i,n,a){var r,o=!1;function s(){if(!o){o=!0;var e=new Error("Request aborted");e.code="ECONNABORTED",a(e)}}function c(e){o||(o=!0,a(e))}i.on("directory",(function(){if(!o){o=!0;var e=new Error("EISDIR, read");e.code="EISDIR",a(e)}})),i.on("end",(function(){o||(o=!0,a())})),i.on("error",c),i.on("file",(function(){r=!1})),i.on("stream",(function(){r=!0})),u(e,(function(e){return e&&"ECONNRESET"===e.code?s():e?c(e):void(o||t((function(){!1===r||o?o||(o=!0,a()):s()})))})),n.headers&&i.on("headers",(function(e){for(var t=n.headers,i=Object.keys(t),a=0;a<i.length;a++){var r=i[a];e.setHeader(r,t[r])}})),i.pipe(e)}function j(e,t,i,n){var a=t||i?JSON.stringify(e,t,i):JSON.stringify(e);return n&&(a=a.replace(/[<>&]/g,(function(e){switch(e.charCodeAt(0)){case 60:return"\\u003c";case 62:return"\\u003e";case 38:return"\\u0026";default:return e}}))),a}E.status=function(e){return this.statusCode=e,this},E.links=function(e){var t=this.get("Link")||"";return t&&(t+=", "),this.set("Link",t+Object.keys(e).map((function(t){return"<"+e[t]+'>; rel="'+t+'"'})).join(", "))},E.send=function(e){var t,i,a=e,o=this.req,s=this.app;switch(2===arguments.length&&("number"!=typeof arguments[0]&&"number"==typeof arguments[1]?(r("res.send(body, status): Use res.status(status).send(body) instead"),this.statusCode=arguments[1]):(r("res.send(status, body): Use res.status(status).send(body) instead"),this.statusCode=arguments[0],a=arguments[1])),"number"==typeof a&&1===arguments.length&&(this.get("Content-Type")||this.type("txt"),r("res.send(status): Use res.sendStatus(status) instead"),this.statusCode=a,a=l[a]),typeof a){case"string":this.get("Content-Type")||this.type("html");break;case"boolean":case"number":case"object":if(null===a)a="";else{if(!n.isBuffer(a))return this.json(a);this.get("Content-Type")||this.type("bin")}}"string"==typeof a&&(t="utf8","string"==typeof(i=this.get("Content-Type"))&&this.set("Content-Type",v(i,"utf-8")));var c,p,u=s.get("etag fn"),f=!this.get("ETag")&&"function"==typeof u;return void 0!==a&&(n.isBuffer(a)?c=a.length:!f&&a.length<1e3?c=n.byteLength(a,t):(a=n.from(a,t),t=void 0,c=a.length),this.set("Content-Length",c)),f&&void 0!==c&&(p=u(a,t))&&this.set("ETag",p),o.fresh&&(this.statusCode=304),204!==this.statusCode&&304!==this.statusCode||(this.removeHeader("Content-Type"),this.removeHeader("Content-Length"),this.removeHeader("Transfer-Encoding"),a=""),"HEAD"===o.method?this.end():this.end(a,t),this},E.json=function(e){var t=e;2===arguments.length&&("number"==typeof arguments[1]?(r("res.json(obj, status): Use res.status(status).json(obj) instead"),this.statusCode=arguments[1]):(r("res.json(status, obj): Use res.status(status).json(obj) instead"),this.statusCode=arguments[0],t=arguments[1]));var i=this.app,n=i.get("json escape"),a=i.get("json replacer"),o=i.get("json spaces"),s=j(t,a,o,n);return this.get("Content-Type")||this.set("Content-Type","application/json"),this.send(s)},E.jsonp=function(e){var t=e;2===arguments.length&&("number"==typeof arguments[1]?(r("res.jsonp(obj, status): Use res.status(status).json(obj) instead"),this.statusCode=arguments[1]):(r("res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead"),this.statusCode=arguments[0],t=arguments[1]));var i=this.app,n=i.get("json escape"),a=i.get("json replacer"),o=i.get("json spaces"),s=j(t,a,o,n),c=this.req.query[i.get("jsonp callback name")];return this.get("Content-Type")||(this.set("X-Content-Type-Options","nosniff"),this.set("Content-Type","application/json")),Array.isArray(c)&&(c=c[0]),"string"==typeof c&&0!==c.length&&(this.set("X-Content-Type-Options","nosniff"),this.set("Content-Type","text/javascript"),s="/**/ typeof "+(c=c.replace(/[^\[\]\w$.]/g,""))+" === 'function' && "+c+"("+(s=s.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029"))+");"),this.send(s)},E.sendStatus=function(e){var t=l[e]||String(e);return this.statusCode=e,this.type("txt"),this.send(t)},E.sendFile=function(e,t,i){var n=i,a=this.req,r=a.next,o=t||{};if(!e)throw new TypeError("path argument is required to res.sendFile");if("string"!=typeof e)throw new TypeError("path must be a string to res.sendFile");if("function"==typeof t&&(n=t,o={}),!o.root&&!p(e))throw new TypeError("path must be absolute or specify root to res.sendFile");var s=encodeURI(e);A(this,y(a,s,o),o,(function(e){return n?n(e):e&&"EISDIR"===e.code?r():void(e&&"ECONNABORTED"!==e.code&&"write"!==e.syscall&&r(e))}))},E.sendfile=function(e,t,i){var n=i,a=this.req,r=a.next,o=t||{};"function"==typeof t&&(n=t,o={}),A(this,y(a,e,o),o,(function(e){return n?n(e):e&&"EISDIR"===e.code?r():void(e&&"ECONNABORTED"!==e.code&&"write"!==e.syscall&&r(e))}))},E.sendfile=r.function(E.sendfile,"res.sendfile: Use res.sendFile instead"),E.download=function(e,t,i,n){var r=n,o=t,s=i||null;"function"==typeof t?(r=t,o=null,s=null):"function"==typeof i&&(r=i,s=null);var c={"Content-Disposition":a(o||e)};if(s&&s.headers)for(var p=Object.keys(s.headers),u=0;u<p.length;u++){var f=p[u];"content-disposition"!==f.toLowerCase()&&(c[f]=s.headers[f])}(s=Object.create(s)).headers=c;var l=_(e);return this.sendFile(l,s,r)},E.contentType=E.type=function(e){var t=-1===e.indexOf("/")?w.lookup(e):e;return this.set("Content-Type",t)},E.format=function(e){var t=this.req,i=t.next,n=e.default;n&&delete e.default;var a=Object.keys(e),r=a.length>0&&t.accepts(a);if(this.vary("Accept"),r)this.set("Content-Type",m(r).value),e[r](t,this,i);else if(n)n();else{var o=new Error("Not Acceptable");o.status=o.statusCode=406,o.types=b(a).map((function(e){return e.value})),i(o)}return this},E.attachment=function(e){return e&&this.type(x(e)),this.set("Content-Disposition",a(e)),this},E.append=function(e,t){var i=this.get(e),n=t;return i&&(n=Array.isArray(i)?i.concat(t):Array.isArray(t)?[i].concat(t):[i,t]),this.set(e,n)},E.set=E.header=function(e,t){if(2===arguments.length){var i=Array.isArray(t)?t.map(String):String(t);if("content-type"===e.toLowerCase()){if(Array.isArray(i))throw new TypeError("Content-Type cannot be set to an Array");if(!S.test(i)){var n=w.charsets.lookup(i.split(";")[0]);n&&(i+="; charset="+n.toLowerCase())}}this.setHeader(e,i)}else for(var a in e)this.set(a,e[a]);return this},E.get=function(e){return this.getHeader(e)},E.clearCookie=function(e,t){var i=d({expires:new Date(1),path:"/"},t);return this.cookie(e,"",i)},E.cookie=function(e,t,i){var n=d({},i),a=this.req.secret,r=n.signed;if(r&&!a)throw new Error('cookieParser("secret") required for signed cookies');var o="object"==typeof t?"j:"+JSON.stringify(t):String(t);return r&&(o="s:"+h(o,a)),"maxAge"in n&&(n.expires=new Date(Date.now()+n.maxAge),n.maxAge/=1e3),null==n.path&&(n.path="/"),this.append("Set-Cookie",g.serialize(e,String(o),n)),this},E.location=function(e){var t=e;return"back"===e&&(t=this.req.get("Referrer")||"/"),this.set("Location",o(t))},E.redirect=function(e){var t,i=e,a=302;2===arguments.length&&("number"==typeof arguments[0]?(a=arguments[0],i=arguments[1]):(r("res.redirect(url, status): Use res.redirect(status, url) instead"),a=arguments[1])),i=this.location(i).get("Location"),this.format({text:function(){t=l[a]+". Redirecting to "+i},html:function(){var e=s(i);t="<p>"+l[a]+'. Redirecting to <a href="'+e+'">'+e+"</a></p>"},default:function(){t=""}}),this.statusCode=a,this.set("Content-Length",n.byteLength(t)),"HEAD"===this.req.method?this.end():this.end(t)},E.vary=function(e){return!e||Array.isArray(e)&&!e.length?(r("res.vary(): Provide a field name"),this):(k(this,e),this)},E.render=function(e,t,i){var n=this.req.app,a=i,r=t||{},o=this.req,s=this;"function"==typeof t&&(a=t,r={}),r._locals=s.locals,a=a||function(e,t){if(e)return o.next(e);s.send(t)},n.render(e,r,a)}}).call(this,i(23).setImmediate)},function(e,t,i){var n=i(96);function a(e){return n.createHash("sha1").update(e).digest("hex")}t.sign=function(e,t){if("string"!=typeof e)throw new TypeError("Cookie value must be provided as a string.");if("string"!=typeof t)throw new TypeError("Secret string must be provided.");return e+"."+n.createHmac("sha256",t).update(e).digest("base64").replace(/\=+$/,"")},t.unsign=function(e,i){if("string"!=typeof e)throw new TypeError("Signed cookie string must be provided.");if("string"!=typeof i)throw new TypeError("Secret string must be provided.");var n=e.slice(0,e.lastIndexOf("."));return a(t.sign(n,i))==a(e)&&n}},function(e,t,i){"use strict";
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */t.parse=function(e,t){if("string"!=typeof e)throw new TypeError("argument str must be a string");for(var i={},a=t||{},o=e.split(r),c=a.decode||n,p=0;p<o.length;p++){var u=o[p],f=u.indexOf("=");if(!(f<0)){var l=u.substr(0,f).trim(),d=u.substr(++f,u.length).trim();'"'==d[0]&&(d=d.slice(1,-1)),null==i[l]&&(i[l]=s(d,c))}}return i},t.serialize=function(e,t,i){var n=i||{},r=n.encode||a;if("function"!=typeof r)throw new TypeError("option encode is invalid");if(!o.test(e))throw new TypeError("argument name is invalid");var s=r(t);if(s&&!o.test(s))throw new TypeError("argument val is invalid");var c=e+"="+s;if(null!=n.maxAge){var p=n.maxAge-0;if(isNaN(p))throw new Error("maxAge should be a Number");c+="; Max-Age="+Math.floor(p)}if(n.domain){if(!o.test(n.domain))throw new TypeError("option domain is invalid");c+="; Domain="+n.domain}if(n.path){if(!o.test(n.path))throw new TypeError("option path is invalid");c+="; Path="+n.path}if(n.expires){if("function"!=typeof n.expires.toUTCString)throw new TypeError("option expires is invalid");c+="; Expires="+n.expires.toUTCString()}n.httpOnly&&(c+="; HttpOnly");n.secure&&(c+="; Secure");if(n.sameSite){switch("string"==typeof n.sameSite?n.sameSite.toLowerCase():n.sameSite){case!0:c+="; SameSite=Strict";break;case"lax":c+="; SameSite=Lax";break;case"strict":c+="; SameSite=Strict";break;case"none":c+="; SameSite=None";break;default:throw new TypeError("option sameSite is invalid")}}return c};var n=decodeURIComponent,a=encodeURIComponent,r=/; */,o=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;function s(e,t){try{return t(e)}catch(t){return e}}},function(e,t,i){"use strict";
/*!
 * vary
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e,t){if(!e||!e.getHeader||!e.setHeader)throw new TypeError("res argument is required");var i=e.getHeader("Vary")||"",n=Array.isArray(i)?i.join(", "):String(i);(i=a(n,t))&&e.setHeader("Vary",i)},e.exports.append=a;var n=/^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;function a(e,t){if("string"!=typeof e)throw new TypeError("header argument is required");if(!t)throw new TypeError("field argument is required");for(var i=Array.isArray(t)?t:r(String(t)),a=0;a<i.length;a++)if(!n.test(i[a]))throw new TypeError("field argument contains an invalid header name");if("*"===e)return e;var o=e,s=r(e.toLowerCase());if(-1!==i.indexOf("*")||-1!==s.indexOf("*"))return"*";for(var c=0;c<i.length;c++){var p=i[c].toLowerCase();-1===s.indexOf(p)&&(s.push(p),o=o?o+", "+i[c]:i[c])}return o}function r(e){for(var t=0,i=[],n=0,a=0,r=e.length;a<r;a++)switch(e.charCodeAt(a)){case 32:n===t&&(n=t=a+1);break;case 44:i.push(e.substring(n,t)),n=t=a+1;break;default:t=a+1}return i.push(e.substring(n,t)),i}},function(e,t,i){"use strict";(function(t){
/*!
 * serve-static
 * Copyright(c) 2010 Sencha Inc.
 * Copyright(c) 2011 TJ Holowaychuk
 * Copyright(c) 2014-2016 Douglas Christopher Wilson
 * MIT Licensed
 */
var n=i(41),a=i(42),r=i(27),o=i(11).resolve,s=i(59),c=i(55);e.exports=function(e,i){if(!e)throw new TypeError("root path required");if("string"!=typeof e)throw new TypeError("root path must be a string");var p=Object.create(i||null),u=!1!==p.fallthrough,f=!1!==p.redirect,l=p.setHeaders;if(l&&"function"!=typeof l)throw new TypeError("option setHeaders must be function");p.maxage=p.maxage||p.maxAge||0,p.root=o(e);var d=f?function(e){if(this.hasTrailingSlash())this.error(404);else{var i=r.original(this.req);i.path=null,i.pathname=function(e){for(var t=0;t<e.length&&47===e.charCodeAt(t);t++);return t>1?"/"+e.substr(t):e}(i.pathname+"/");var o,s,p=n(c.format(i)),u=(o="Redirecting",s='Redirecting to <a href="'+a(p)+'">'+a(p)+"</a>",'<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>'+o+"</title>\n</head>\n<body>\n<pre>"+s+"</pre>\n</body>\n</html>\n");e.statusCode=301,e.setHeader("Content-Type","text/html; charset=UTF-8"),e.setHeader("Content-Length",t.byteLength(u)),e.setHeader("Content-Security-Policy","default-src 'none'"),e.setHeader("X-Content-Type-Options","nosniff"),e.setHeader("Location",p),e.end(u)}}:function(){this.error(404)};return function(e,t,i){if("GET"!==e.method&&"HEAD"!==e.method)return u?i():(t.statusCode=405,t.setHeader("Allow","GET, HEAD"),t.setHeader("Content-Length","0"),void t.end());var n=!u,a=r.original(e),o=r(e).pathname;"/"===o&&"/"!==a.pathname.substr(-1)&&(o="");var c=s(e,o,p);c.on("directory",d),l&&c.on("headers",l),u&&c.on("file",(function(){n=!0})),c.on("error",(function(e){!n&&e.statusCode<500?i():i(e)})),c.pipe(t)}},e.exports.mime=s.mime}).call(this,i(2).Buffer)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmltYWxpc3RpYy1hc3NlcnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlcGQvbGliL2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhdGgtYnJvd3NlcmlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2lwaGVyLWJhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4cHJlc3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zYWZlci1idWZmZXIvc2FmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYW5kb21ieXRlcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvaGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnl0ZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldHByb3RvdHlwZW9mL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdGF0dXNlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtdXRpbC1pcy9saWIvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHlwZS1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFyc2V1cmwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1oYXNoL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci14b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvY29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2Jhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnQtdHlwZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHR0cC1lcnJvcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JvZHktcGFyc2VyL2xpYi9yZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29uLWZpbmlzaGVkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzLW5leHRpY2stYXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvdXRpbHMvY29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmNvZGV1cmwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzY2FwZS1odG1sL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS1mbGF0dGVuL2FycmF5LWZsYXR0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V0aWxzLW1lcmdlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9hZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V2cF9ieXRlc3Rva2V5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91cmwvdXJsLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21ldGhvZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW5kL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tZDUuanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JpcGVtZDE2MC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9jaXBoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm9yYW5kL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXJzYS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90b2lkZW50aWZpZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ljb252LWxpdGUvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bnBpcGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXNzZXJ0L2Fzc2VydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9hZGxlcjMyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2NyYzMyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9taW1lLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi9mb3JtYXRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHByZXNzL2xpYi9yb3V0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4cHJlc3MvbGliL3JvdXRlci9yb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXhwcmVzcy9saWIvcm91dGVyL2xheWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHByZXNzL2xpYi9taWRkbGV3YXJlL3F1ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9saWIvY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbGliL3Jlc3BvbnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHByZXNzL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudC1kaXNwb3NpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXRhZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2gtYmFzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTI1Ni5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTUxMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhtYWMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbWQ1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYmtkZjIvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9wcmVjb25kaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Bia2RmMi9saWIvZGVmYXVsdC1lbmNvZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9zeW5jLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9kZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2N0ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvaW5jcjMyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9hdXRoQ2lwaGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9zdHJlYW1DaXBoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL2xpYi9nZW5lcmF0ZVByaW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9taWxsZXItcmFiaW4vbGliL21yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9taW5pbWFsaXN0aWMtY3J5cHRvLXV0aWxzL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS9jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzI1Ni5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvNTEyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2Jhc2UvYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2NvbnN0YW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9kZWNvZGVycy9kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9tZ2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3hvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvd2l0aFB1YmxpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJlc2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhbmdlLXBhcnNlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJveHktYWRkci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4cHJlc3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4cHJlc3MvbGliL2V4cHJlc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JvZHktcGFyc2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib2R5LXBhcnNlci9saWIvdHlwZXMvanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHR0cC1lcnJvcnMvbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jhdy1ib2R5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ljb252LWxpdGUvbGliL2JvbS1oYW5kbGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWNvbnYtbGl0ZS9lbmNvZGluZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ljb252LWxpdGUvZW5jb2RpbmdzL2ludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pY29udi1saXRlL2VuY29kaW5ncy91dGYxNi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWNvbnYtbGl0ZS9lbmNvZGluZ3MvdXRmNy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWNvbnYtbGl0ZS9lbmNvZGluZ3Mvc2Jjcy1jb2RlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWNvbnYtbGl0ZS9lbmNvZGluZ3Mvc2Jjcy1kYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pY29udi1saXRlL2VuY29kaW5ncy9zYmNzLWRhdGEtZ2VuZXJhdGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pY29udi1saXRlL2VuY29kaW5ncy9kYmNzLWNvZGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pY29udi1saXRlL2VuY29kaW5ncy9kYmNzLWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VlLWZpcnN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXpsaWIvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC1kZXByZWNhdGUvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2R1cGxleC1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktemxpYi9saWIvYmluZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi96c3RyZWFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2RlZmxhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvdHJlZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvbWVzc2FnZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvaW5mbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9pbmZmYXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2luZnRyZWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWVkaWEtdHlwZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbWUtZGIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JvZHktcGFyc2VyL2xpYi90eXBlcy9yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JvZHktcGFyc2VyL2xpYi90eXBlcy90ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib2R5LXBhcnNlci9saWIvdHlwZXMvdXJsZW5jb2RlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXMvbGliL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXMvbGliL3BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZGVjb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZW5jb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tZXJnZS1kZXNjcmlwdG9ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXhwcmVzcy9saWIvYXBwbGljYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZpbmFsaGFuZGxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHVueWNvZGUvcHVueWNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VybC91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXhwcmVzcy9saWIvbWlkZGxld2FyZS9pbml0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHByZXNzL2xpYi92aWV3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHByZXNzL2xpYiBzeW5jIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9saWIvcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdG8tYXJyYXlidWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZW5kL2ltbXV0YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVpbHRpbi1zdGF0dXMtY29kZXMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudC1kaXNwb3NpdGlvbi9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbmQvbm9kZV9tb2R1bGVzL2h0dHAtZXJyb3JzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZXN0cm95L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTIyNC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTM4NC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhtYWMvbGVnYWN5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vYWxnb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Bia2RmMi9saWIvYXN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMvY2JjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9lZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2VuY3J5cHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvZWNiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jYmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiOC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvb2ZiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9naGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZGVjcnlwdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWRlcy9tb2Rlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vbGliL2RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vYnJvd3Nlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2Jyb3dzZXIvc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL3Nob3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvbW9udC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL2Vkd2FyZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8yMjQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzM4NC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9yaXBlbWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvaG1hYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL3ByZWNvbXB1dGVkL3NlY3AyNTZrMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9obWFjLWRyYmcvbGliL2htYWMtZHJiZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL2tleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL3NpZ25hdHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VkZHNhL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWRkc2Eva2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWRkc2Evc2lnbmF0dXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2FzbjEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92bS1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2Jhc2UvcmVwb3J0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2NvbnN0YW50cy9kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZGVjb2RlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZGVjb2RlcnMvcGVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2VuY29kZXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2VuY29kZXJzL3BlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9jZXJ0aWZpY2F0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9maXhQcm9jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vYnJvd3Nlci92ZXJpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1lY2RoL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3B1YmxpY0VuY3J5cHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3ByaXZhdGVEZWNyeXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYW5kb21maWxsL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbWUvbWltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VuZC9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZvcndhcmRlZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXBhZGRyLmpzL2xpYi9pcGFkZHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4cHJlc3MvbGliL3JlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FjY2VwdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25lZ290aWF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25lZ290aWF0b3IvbGliL2NoYXJzZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25lZ290aWF0b3IvbGliL2VuY29kaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uZWdvdGlhdG9yL2xpYi9sYW5ndWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbmVnb3RpYXRvci9saWIvbWVkaWFUeXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHByZXNzL2xpYi9yZXNwb25zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29va2llLXNpZ25hdHVyZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29va2llL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YXJ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZXJ2ZS1zdGF0aWMvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwiY29uc3RydWN0b3IiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIlRlbXBDdG9yIiwiYnVmZmVyIiwiQnVmZmVyIiwiY29weVByb3BzIiwic3JjIiwiZHN0IiwiU2FmZUJ1ZmZlciIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJsZW5ndGgiLCJmcm9tIiwiYWxsb2MiLCJhbGxvY1Vuc2FmZSIsImFsbG9jVW5zYWZlU2xvdyIsIlR5cGVFcnJvciIsInNpemUiLCJmaWxsIiwiZW5jb2RpbmciLCJidWYiLCJ1bmRlZmluZWQiLCJTbG93QnVmZmVyIiwiYmFzZTY0IiwiaWVlZTc1NCIsImlzQXJyYXkiLCJrTWF4TGVuZ3RoIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsInRoYXQiLCJSYW5nZUVycm9yIiwiVWludDhBcnJheSIsIl9fcHJvdG9fXyIsInRoaXMiLCJFcnJvciIsIkFycmF5QnVmZmVyIiwiYXJyYXkiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJzdHJpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJzbGljZSIsImZyb21TdHJpbmciLCJvYmoiLCJpc0J1ZmZlciIsImxlbiIsImNoZWNrZWQiLCJjb3B5IiwidmFsIiwidHlwZSIsImRhdGEiLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsInRvU3RyaW5nIiwiaXNWaWV3IiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJ0b0xvd2VyQ2FzZSIsInNsb3dUb1N0cmluZyIsInN0YXJ0IiwiZW5kIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJiIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJkaXIiLCJpc05hTiIsImFycmF5SW5kZXhPZiIsImluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFyciIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsIlN0cmluZyIsInJlYWQiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJqIiwiaGV4V3JpdGUiLCJvZmZzZXQiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwic3RyIiwiYnl0ZUFycmF5IiwicHVzaCIsImNoYXJDb2RlQXQiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJmcm9tQnl0ZUFycmF5IiwiTWF0aCIsIm1pbiIsInJlcyIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiZnJvbUNoYXJDb2RlIiwiYXBwbHkiLCJkZWNvZGVDb2RlUG9pbnRzQXJyYXkiLCJJTlNQRUNUX01BWF9CWVRFUyIsImdsb2JhbCIsImZvbyIsInN1YmFycmF5IiwiZSIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwiYSIsIngiLCJ5IiwiY29uY2F0IiwibGlzdCIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImFyZ3VtZW50cyIsImVxdWFscyIsImluc3BlY3QiLCJtYXgiLCJtYXRjaCIsImpvaW4iLCJ0YXJnZXQiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsInRvSlNPTiIsIkFycmF5IiwiX2FyciIsInJldCIsIm91dCIsInRvSGV4IiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInBvdyIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJmbG9vciIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsInNldCIsImNvZGUiLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5IiwidHJpbSIsInJlcGxhY2UiLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwicHJvY2VzcyIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJuZXh0VGljayIsImFyZ3MiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwidW1hc2siLCJhc3NlcnQiLCJtc2ciLCJpbmhlcml0cyIsIkJOIiwibnVtYmVyIiwiYmFzZSIsImVuZGlhbiIsImlzQk4iLCJuZWdhdGl2ZSIsIndvcmRzIiwicmVkIiwiX2luaXQiLCJ3b3JkU2l6ZSIsInBhcnNlSGV4IiwicGFyc2VCYXNlIiwibnVtIiwibGVmdCIsInJpZ2h0IiwiY21wIiwiX2luaXROdW1iZXIiLCJfaW5pdEFycmF5IiwiX3BhcnNlSGV4IiwiX3BhcnNlQmFzZSIsInN0cmlwIiwidG9BcnJheSIsImNlaWwiLCJ3IiwibGltYkxlbiIsImxpbWJQb3ciLCJ0b3RhbCIsIm1vZCIsIndvcmQiLCJpbXVsbiIsIl9pYWRkbiIsImRlc3QiLCJjbG9uZSIsIl9leHBhbmQiLCJfbm9ybVNpZ24iLCJ6ZXJvcyIsImdyb3VwU2l6ZXMiLCJncm91cEJhc2VzIiwic21hbGxNdWxUbyIsInNlbGYiLCJjYXJyeSIsImsiLCJuY2FycnkiLCJyd29yZCIsIm1heEoiLCJwYWRkaW5nIiwiZ3JvdXBTaXplIiwiZ3JvdXBCYXNlIiwiaXNaZXJvIiwibW9kbiIsImlkaXZuIiwidG9OdW1iZXIiLCJ0b0J1ZmZlciIsInRvQXJyYXlMaWtlIiwiQXJyYXlUeXBlIiwicmVxTGVuZ3RoIiwicSIsImFuZGxuIiwiaXVzaHJuIiwiY2x6MzIiLCJfY291bnRCaXRzIiwiX3plcm9CaXRzIiwiYml0TGVuZ3RoIiwiemVyb0JpdHMiLCJ0b1R3b3MiLCJ3aWR0aCIsImFicyIsImlub3RuIiwiaWFkZG4iLCJmcm9tVHdvcyIsInRlc3RuIiwibm90biIsImluZWciLCJpc05lZyIsIm5lZyIsIml1b3IiLCJpb3IiLCJvciIsInVvciIsIml1YW5kIiwiaWFuZCIsImFuZCIsInVhbmQiLCJpdXhvciIsIml4b3IiLCJ4b3IiLCJ1eG9yIiwiYnl0ZXNOZWVkZWQiLCJiaXRzTGVmdCIsInNldG4iLCJiaXQiLCJ3Yml0IiwiaWFkZCIsImlzdWIiLCJhZGQiLCJjb21iMTBNdWxUbyIsIm1pZCIsImEwIiwiYWwwIiwiYWgwIiwiYTEiLCJhbDEiLCJhaDEiLCJhMiIsImFsMiIsImFoMiIsImEzIiwiYWwzIiwiYWgzIiwiYTQiLCJhbDQiLCJhaDQiLCJhNSIsImFsNSIsImFoNSIsImE2IiwiYWw2IiwiYWg2IiwiYTciLCJhbDciLCJhaDciLCJhOCIsImFsOCIsImFoOCIsImE5IiwiYWw5IiwiYWg5IiwiYjAiLCJibDAiLCJiaDAiLCJiMSIsImJsMSIsImJoMSIsImIyIiwiYmwyIiwiYmgyIiwiYjMiLCJibDMiLCJiaDMiLCJiNCIsImJsNCIsImJoNCIsImI1IiwiYmw1IiwiYmg1IiwiYjYiLCJibDYiLCJiaDYiLCJiNyIsImJsNyIsImJoNyIsImI4IiwiYmw4IiwiYmg4IiwiYjkiLCJibDkiLCJiaDkiLCJ3MCIsImltdWwiLCJ3MSIsIncyIiwidzMiLCJ3NCIsInc1IiwidzYiLCJ3NyIsInc4IiwidzkiLCJ3MTAiLCJ3MTEiLCJ3MTIiLCJ3MTMiLCJ3MTQiLCJ3MTUiLCJ3MTYiLCJ3MTciLCJ3MTgiLCJqdW1ib011bFRvIiwiRkZUTSIsIm11bHAiLCJtdWxUbyIsImhuY2FycnkiLCJiaWdNdWxUbyIsIm1ha2VSQlQiLCJOIiwicmV2QmluIiwicmIiLCJwZXJtdXRlIiwicmJ0IiwicndzIiwiaXdzIiwicnR3cyIsIml0d3MiLCJ0cmFuc2Zvcm0iLCJydHdkZiIsImNvcyIsIlBJIiwiaXR3ZGYiLCJzaW4iLCJydHdkZl8iLCJpdHdkZl8iLCJyZSIsImllIiwicm8iLCJpbyIsInJ4IiwiZ3Vlc3NMZW4xM2IiLCJvZGQiLCJjb25qdWdhdGUiLCJub3JtYWxpemUxM2IiLCJ3cyIsInJvdW5kIiwiY29udmVydDEzYiIsInN0dWIiLCJwaCIsIl8iLCJyd3N0IiwiaXdzdCIsIm5yd3MiLCJucndzdCIsIm5pd3N0Iiwicm13cyIsIm11bGYiLCJtdWxuIiwic3FyIiwiaXNxciIsInRvQml0QXJyYXkiLCJpdXNobG4iLCJiaXRzIiwiY2FycnlNYXNrIiwibmV3Q2FycnkiLCJpc2hsbiIsImhpbnQiLCJleHRlbmRlZCIsImgiLCJtYXNrIiwibWFza2VkV29yZHMiLCJpc2hybiIsInNobG4iLCJ1c2hsbiIsInNocm4iLCJ1c2hybiIsImltYXNrbiIsIm1hc2tuIiwiaXN1Ym4iLCJhZGRuIiwic3VibiIsImlhYnMiLCJfaXNobG5zdWJtdWwiLCJzaGlmdCIsIl93b3JkRGl2IiwiYmhpIiwiZGlmZiIsInFqIiwiZGl2IiwiZGl2bW9kIiwicG9zaXRpdmUiLCJkaXZuIiwidW1vZCIsImRpdlJvdW5kIiwiZG0iLCJoYWxmIiwicjIiLCJhY2MiLCJlZ2NkIiwiQSIsIkIiLCJDIiwiRCIsImciLCJpc0V2ZW4iLCJ5cCIsInhwIiwiaW0iLCJpc09kZCIsImptIiwiZ2NkIiwiX2ludm1wIiwieDEiLCJ4MiIsImRlbHRhIiwiY21wbiIsImludm0iLCJiaW5jbiIsInVjbXAiLCJndG4iLCJndCIsImd0ZW4iLCJndGUiLCJsdG4iLCJsdCIsImx0ZW4iLCJsdGUiLCJlcW4iLCJlcSIsIlJlZCIsInRvUmVkIiwiY3R4IiwiY29udmVydFRvIiwiX2ZvcmNlUmVkIiwiZnJvbVJlZCIsImNvbnZlcnRGcm9tIiwiZm9yY2VSZWQiLCJyZWRBZGQiLCJyZWRJQWRkIiwicmVkU3ViIiwicmVkSVN1YiIsInJlZFNobCIsInNobCIsInJlZE11bCIsIl92ZXJpZnkyIiwicmVkSU11bCIsInJlZFNxciIsIl92ZXJpZnkxIiwicmVkSVNxciIsInJlZFNxcnQiLCJzcXJ0IiwicmVkSW52bSIsInJlZE5lZyIsInJlZFBvdyIsInByaW1lcyIsImsyNTYiLCJwMjI0IiwicDE5MiIsInAyNTUxOSIsIk1QcmltZSIsInRtcCIsIl90bXAiLCJLMjU2IiwiUDIyNCIsIlAxOTIiLCJQMjU1MTkiLCJwcmltZSIsIl9wcmltZSIsIk1vbnQiLCJpbW9kIiwicmludiIsIm1pbnYiLCJpcmVkdWNlIiwicmxlbiIsInNwbGl0IiwiaW11bEsiLCJpbnB1dCIsIm91dHB1dCIsIm91dExlbiIsInByZXYiLCJuZXh0IiwibW9kMyIsIm9uZSIsIm5PbmUiLCJscG93IiwieiIsImludiIsInduZCIsImN1cnJlbnQiLCJjdXJyZW50TGVuIiwibW9udCIsInUiLCJGdW5jdGlvbiIsIndpbmRvdyIsImVxdWFsIiwidXRpbHMiLCJtaW5Bc3NlcnQiLCJtaW5VdGlscyIsInplcm8yIiwiZW5jb2RlIiwiZ2V0TkFGIiwibmFmIiwiZ2V0SlNGIiwiazEiLCJrMiIsImpzZiIsImQxIiwiZDIiLCJ1MSIsInUyIiwibTgiLCJtMTQiLCJtMjQiLCJjYWNoZWRQcm9wZXJ0eSIsImNvbXB1dGVyIiwicGFyc2VCeXRlcyIsImludEZyb21MRSIsImxvYWQiLCJzdG9yYWdlIiwiZGVidWciLCJERUJVRyIsImxvZyIsImNvbnNvbGUiLCJmb3JtYXRBcmdzIiwidXNlQ29sb3JzIiwibmFtZXNwYWNlIiwiaHVtYW5pemUiLCJjb2xvciIsInNwbGljZSIsImluZGV4IiwibGFzdEMiLCJzYXZlIiwibmFtZXNwYWNlcyIsInJlbW92ZUl0ZW0iLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsInN0eWxlIiwiV2Via2l0QXBwZWFyYW5jZSIsImZpcmVidWciLCJleGNlcHRpb24iLCJ0YWJsZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIlJlZ0V4cCIsIiQxIiwiY2hyb21lIiwibG9jYWwiLCJsb2NhbFN0b3JhZ2UiLCJsb2NhbHN0b3JhZ2UiLCJjb2xvcnMiLCJmb3JtYXR0ZXJzIiwidiIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnIiLCJtZXNzYWdlIiwiZW5hYmxlIiwid3JhcGZ1bmN0aW9uIiwiZm4iLCJ3cmFwcHJvcGVydHkiLCJwcm9wIiwiZGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlcHJlY2F0ZSIsIl9maWxlIiwiX2lnbm9yZWQiLCJfbmFtZXNwYWNlIiwiX3RyYWNlZCIsIl93YXJuZWQiLCJmdW5jdGlvbiIsImlzU3Vycm9nYXRlUGFpciIsImh0b25sIiwiemVybzgiLCJlbmMiLCJ0b0hleDMyIiwiam9pbjMyIiwic3BsaXQzMiIsInJvdHIzMiIsInJvdGwzMiIsInN1bTMyIiwic3VtMzJfMyIsInN1bTMyXzQiLCJzdW0zMl81Iiwic3VtNjQiLCJhaCIsImFsIiwiYmgiLCJzdW02NF9oaSIsImJsIiwic3VtNjRfbG8iLCJzdW02NF80X2hpIiwiY2giLCJjbCIsImRoIiwiZGwiLCJzdW02NF80X2xvIiwic3VtNjRfNV9oaSIsImVoIiwiZWwiLCJzdW02NF81X2xvIiwicm90cjY0X2hpIiwicm90cjY0X2xvIiwic2hyNjRfaGkiLCJzaHI2NF9sbyIsIm5vcm1hbGl6ZUFycmF5IiwicGFydHMiLCJhbGxvd0Fib3ZlUm9vdCIsInVwIiwibGFzdCIsInVuc2hpZnQiLCJmaWx0ZXIiLCJ4cyIsImYiLCJyZXNvbHZlIiwicmVzb2x2ZWRQYXRoIiwicmVzb2x2ZWRBYnNvbHV0ZSIsInBhdGgiLCJjaGFyQXQiLCJub3JtYWxpemUiLCJpc0Fic29sdXRlIiwidHJhaWxpbmdTbGFzaCIsInBhdGhzIiwicmVsYXRpdmUiLCJ0byIsImZyb21QYXJ0cyIsInRvUGFydHMiLCJzYW1lUGFydHNMZW5ndGgiLCJvdXRwdXRQYXJ0cyIsInNlcCIsImRlbGltaXRlciIsImRpcm5hbWUiLCJoYXNSb290IiwibWF0Y2hlZFNsYXNoIiwiYmFzZW5hbWUiLCJleHRuYW1lIiwic3RhcnREb3QiLCJzdGFydFBhcnQiLCJwcmVEb3RTdGF0ZSIsIlRyYW5zZm9ybSIsIlN0cmluZ0RlY29kZXIiLCJDaXBoZXJCYXNlIiwiaGFzaE1vZGUiLCJfZmluYWxPckRpZ2VzdCIsImZpbmFsIiwiX2ZpbmFsIiwiX19maW5hbCIsIl9kZWNvZGVyIiwiX2VuY29kaW5nIiwidXBkYXRlIiwiaW5wdXRFbmMiLCJvdXRwdXRFbmMiLCJvdXREYXRhIiwiX3VwZGF0ZSIsIl90b1N0cmluZyIsInNldEF1dG9QYWRkaW5nIiwiZ2V0QXV0aFRhZyIsInNldEF1dGhUYWciLCJzZXRBQUQiLCJfdHJhbnNmb3JtIiwiX2ZsdXNoIiwiZG9uZSIsImZpbiIsInBuYSIsIm9iamVjdEtleXMiLCJrZXlzIiwiRHVwbGV4IiwidXRpbCIsIlJlYWRhYmxlIiwiV3JpdGFibGUiLCJtZXRob2QiLCJvcHRpb25zIiwicmVhZGFibGUiLCJhbGxvd0hhbGZPcGVuIiwib25lbmQiLCJfd3JpdGFibGVTdGF0ZSIsImVuZGVkIiwib25FbmROVCIsImhpZ2hXYXRlck1hcmsiLCJfcmVhZGFibGVTdGF0ZSIsImRlc3Ryb3llZCIsIl9kZXN0cm95IiwiY2IiLCJjb250ZW50RGlzcG9zaXRpb24iLCJjb250ZW50VHlwZSIsImZsYXR0ZW4iLCJtaW1lIiwiZXRhZyIsInByb3h5YWRkciIsInFzIiwicXVlcnlzdHJpbmciLCJjcmVhdGVFVGFnR2VuZXJhdG9yIiwiYm9keSIsInBhcnNlRXh0ZW5kZWRRdWVyeVN0cmluZyIsInBhcnNlIiwiYWxsb3dQcm90b3R5cGVzIiwibmV3T2JqZWN0Iiwid2VhayIsIndldGFnIiwic3Vic3RyaW5nIiwibm9ybWFsaXplVHlwZSIsInF1YWxpdHkiLCJwYXJhbXMiLCJvcmlnaW5hbEluZGV4IiwicG1zIiwicGFyc2VGbG9hdCIsImFjY2VwdFBhcmFtcyIsImxvb2t1cCIsIm5vcm1hbGl6ZVR5cGVzIiwidHlwZXMiLCJjb21waWxlRVRhZyIsImNvbXBpbGVRdWVyeVBhcnNlciIsImNvbXBpbGVUcnVzdCIsImNvbXBpbGUiLCJzZXRDaGFyc2V0IiwiY2hhcnNldCIsInBhcmFtZXRlcnMiLCJmb3JtYXQiLCJzYWZlciIsIlNhZmVyIiwia1N0cmluZ01heExlbmd0aCIsImNvbnN0YW50cyIsIk1BWF9MRU5HVEgiLCJNQVhfU1RSSU5HX0xFTkdUSCIsIlN0cmVhbSIsIkVFIiwiRXZlbnRFbWl0dGVyIiwiUGFzc1Rocm91Z2giLCJwaXBlIiwic291cmNlIiwib25kYXRhIiwiY2h1bmsiLCJwYXVzZSIsIm9uZHJhaW4iLCJyZXN1bWUiLCJfaXNTdGRpbyIsIm9uY2xvc2UiLCJkaWRPbkVuZCIsImRlc3Ryb3kiLCJvbmVycm9yIiwiZXIiLCJjbGVhbnVwIiwibGlzdGVuZXJDb3VudCIsImNyeXB0byIsIm1zQ3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiZ2VuZXJhdGVkIiwiSGFzaCIsImJsb2NrU2l6ZSIsImZpbmFsU2l6ZSIsIl9ibG9jayIsIl9maW5hbFNpemUiLCJfYmxvY2tTaXplIiwiX2xlbiIsImJsb2NrIiwiYWNjdW0iLCJhc3NpZ25lZCIsInJlbWFpbmRlciIsImRpZ2VzdCIsInJlbSIsImxvd0JpdHMiLCJoaWdoQml0cyIsImhhc2giLCJfaGFzaCIsImZvcm1hdFRob3VzYW5kc1JlZ0V4cCIsImZvcm1hdERlY2ltYWxzUmVnRXhwIiwibWFwIiwia2IiLCJtYiIsImdiIiwidGIiLCJwYiIsInBhcnNlUmVnRXhwIiwibWFnIiwidGhvdXNhbmRzU2VwYXJhdG9yIiwidW5pdFNlcGFyYXRvciIsImRlY2ltYWxQbGFjZXMiLCJmaXhlZERlY2ltYWxzIiwiQm9vbGVhbiIsInVuaXQiLCJ0b0ZpeGVkIiwiZmxvYXRWYWx1ZSIsInJlc3VsdHMiLCJleGVjIiwic2V0UHJvdG90eXBlT2YiLCJwcm90byIsImNvZGVzIiwic3RhdHVzIiwiU1RBVFVTX0NPREVTIiwic3RhdHVzZXMiLCJmb3JFYWNoIiwicG9wdWxhdGVTdGF0dXNlc01hcCIsInJlZGlyZWN0IiwiMzAwIiwiMzAxIiwiMzAyIiwiMzAzIiwiMzA1IiwiMzA3IiwiMzA4IiwiZW1wdHkiLCIyMDQiLCIyMDUiLCIzMDQiLCJyZXRyeSIsIjUwMiIsIjUwMyIsIjUwNCIsIlRpbWVvdXQiLCJpZCIsImNsZWFyRm4iLCJfaWQiLCJfY2xlYXJGbiIsInNjb3BlIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiY2xvc2UiLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIml0ZW0iLCJtc2VjcyIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJhY3RpdmUiLCJfb25UaW1lb3V0Iiwic2V0SW1tZWRpYXRlIiwiY2xlYXJJbW1lZGlhdGUiLCJvYmplY3RUb1N0cmluZyIsImlzQm9vbGVhbiIsImlzTnVsbCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImlzU3ltYm9sIiwiaXNVbmRlZmluZWQiLCJpc1JlZ0V4cCIsImlzT2JqZWN0IiwiaXNEYXRlIiwiaXNFcnJvciIsImlzRnVuY3Rpb24iLCJpc1ByaW1pdGl2ZSIsInR5cGVyIiwidHlwZWlzIiwidHlwZXNfIiwidHJ5Tm9ybWFsaXplVHlwZSIsIm1pbWVNYXRjaCIsImhhc2JvZHkiLCJyZXEiLCJoZWFkZXJzIiwiZXhwZWN0ZWQiLCJhY3R1YWxQYXJ0cyIsImV4cGVjdGVkUGFydHMiLCJpcyIsImhhc0JvZHkiLCJ1cmwiLCJVcmwiLCJwYXJzZXVybCIsIl9wYXJzZWRVcmwiLCJmcmVzaCIsImZhc3RwYXJzZSIsIl9yYXciLCJwYXRobmFtZSIsInF1ZXJ5Iiwic2VhcmNoIiwiaHJlZiIsInBhcnNlZFVybCIsIm9yaWdpbmFsIiwib3JpZ2luYWxVcmwiLCJfcGFyc2VkT3JpZ2luYWxVcmwiLCJNRDUiLCJSSVBFTUQxNjAiLCJzaGEiLCJCYXNlIiwiYWxnIiwiQmxvY2tIYXNoIiwicGVuZGluZyIsInBlbmRpbmdUb3RhbCIsIm91dFNpemUiLCJobWFjU3RyZW5ndGgiLCJwYWRMZW5ndGgiLCJfZGVsdGE4IiwiX2RlbHRhMzIiLCJfcGFkIiwiX2RpZ2VzdCIsImFzbjEiLCJiaWdudW0iLCJkZWZpbmUiLCJkZWNvZGVycyIsImVuY29kZXJzIiwiUmVwb3J0ZXIiLCJEZWNvZGVyQnVmZmVyIiwiRW5jb2RlckJ1ZmZlciIsIk5vZGUiLCJQQVJBTV9SRUdFWFAiLCJURVhUX1JFR0VYUCIsIlRPS0VOX1JFR0VYUCIsIlFFU0NfUkVHRVhQIiwiUVVPVEVfUkVHRVhQIiwiVFlQRV9SRUdFWFAiLCJxc3RyaW5nIiwidGVzdCIsIkNvbnRlbnRUeXBlIiwicGFyYW0iLCJzb3J0IiwiaGVhZGVyIiwiZ2V0SGVhZGVyIiwiZ2V0Y29udGVudHR5cGUiLCJsYXN0SW5kZXgiLCJ0b0lkZW50aWZpZXIiLCJjb2RlQ2xhc3MiLCJuYW1lRnVuYyIsImZ1bmMiLCJkZXNjIiwiY3JlYXRlRXJyb3IiLCJwcm9wcyIsInN0YXR1c0NvZGUiLCJIdHRwRXJyb3IiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImV4cG9zZSIsImNyZWF0ZUh0dHBFcnJvckNvbnN0cnVjdG9yIiwiQ29kZUVycm9yIiwiY2xhc3NOYW1lIiwiQ2xpZW50RXJyb3IiLCJjcmVhdGVDbGllbnRFcnJvckNvbnN0cnVjdG9yIiwiU2VydmVyRXJyb3IiLCJjcmVhdGVTZXJ2ZXJFcnJvckNvbnN0cnVjdG9yIiwiSW1BVGVhcG90IiwicG9wdWxhdGVDb25zdHJ1Y3RvckV4cG9ydHMiLCJnZXRCb2R5IiwiaWNvbnYiLCJvbkZpbmlzaGVkIiwiemxpYiIsInN0cmVhbSIsIm9wdHMiLCJfYm9keSIsInZlcmlmeSIsImluZmxhdGUiLCJjcmVhdGVJbmZsYXRlIiwiY3JlYXRlR3VuemlwIiwiY29udGVudHN0cmVhbSIsImVuY29kaW5nRXhpc3RzIiwidG9VcHBlckNhc2UiLCJlcnJvciIsIl9lcnJvciIsImRlY29kZSIsIm5iIiwibmVuYyIsInJldHJpZWQiLCJfbm9ybWFsaXplRW5jb2RpbmciLCJub3JtYWxpemVFbmNvZGluZyIsInRleHQiLCJ1dGYxNlRleHQiLCJ1dGYxNkVuZCIsImZpbGxMYXN0IiwidXRmOEZpbGxMYXN0IiwiYmFzZTY0VGV4dCIsImJhc2U2NEVuZCIsInNpbXBsZVdyaXRlIiwic2ltcGxlRW5kIiwibGFzdE5lZWQiLCJsYXN0VG90YWwiLCJsYXN0Q2hhciIsInV0ZjhDaGVja0J5dGUiLCJieXRlIiwidXRmOENoZWNrRXh0cmFCeXRlcyIsInV0ZjhDaGVja0luY29tcGxldGUiLCJsaXN0ZW5lciIsImlzRmluaXNoZWQiLCJkZWZlciIsImF0dGFjaGVkIiwiX19vbkZpbmlzaGVkIiwiY3JlYXRlTGlzdGVuZXIiLCJjYWxsYmFjayIsImVlTXNnIiwiZWVTb2NrZXQiLCJmaW5pc2hlZCIsIm9uRmluaXNoIiwiY2FuY2VsIiwib25Tb2NrZXQiLCJzb2NrZXQiLCJmaXJzdCIsImFzc2lnblNvY2tldCIsInBhdGNoQXNzaWduU29ja2V0IiwiYXR0YWNoRmluaXNoZWRMaXN0ZW5lciIsImF0dGFjaExpc3RlbmVyIiwiY29tcGxldGUiLCJ1cGdyYWRlIiwiUmVmbGVjdE93bktleXMiLCJSIiwiUmVmbGVjdCIsIlJlZmxlY3RBcHBseSIsInJlY2VpdmVyIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5TmFtZXMiLCJOdW1iZXJJc05hTiIsImluaXQiLCJfZXZlbnRzIiwiX2V2ZW50c0NvdW50IiwiX21heExpc3RlbmVycyIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCJjaGVja0xpc3RlbmVyIiwiX2dldE1heExpc3RlbmVycyIsIl9hZGRMaXN0ZW5lciIsInByZXBlbmQiLCJldmVudHMiLCJleGlzdGluZyIsIndhcm5pbmciLCJuZXdMaXN0ZW5lciIsIndhcm5lZCIsImVtaXR0ZXIiLCJjb3VudCIsIndhcm4iLCJvbmNlV3JhcHBlciIsImZpcmVkIiwid3JhcEZuIiwiX29uY2VXcmFwIiwic3RhdGUiLCJ3cmFwcGVkIiwiX2xpc3RlbmVycyIsInVud3JhcCIsImV2bGlzdGVuZXIiLCJ1bndyYXBMaXN0ZW5lcnMiLCJhcnJheUNsb25lIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJkb0Vycm9yIiwiY29udGV4dCIsImhhbmRsZXIiLCJwb3NpdGlvbiIsIm9yaWdpbmFsTGlzdGVuZXIiLCJwb3AiLCJzcGxpY2VPbmUiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiVFlQRURfT0siLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJfaGFzIiwiYXNzaWduIiwic291cmNlcyIsInNocmlua0J1ZiIsImZuVHlwZWQiLCJhcnJheVNldCIsInNyY19vZmZzIiwiZGVzdF9vZmZzIiwiZmxhdHRlbkNodW5rcyIsImNodW5rcyIsInJlc3VsdCIsImZuVW50eXBlZCIsInNldFR5cGVkIiwiQnVmOCIsIkJ1ZjE2IiwiQnVmMzIiLCJVTk1BVENIRURfU1VSUk9HQVRFX1BBSVJfUkVHRVhQIiwiRU5DT0RFX0NIQVJTX1JFR0VYUCIsImVuY29kZVVSSSIsIm1hdGNoSHRtbFJlZ0V4cCIsImVzY2FwZSIsImh0bWwiLCJkZXB0aCIsImZsYXR0ZW5Gb3JldmVyIiwiZmxhdHRlbldpdGhEZXB0aCIsImFzVUludDMyQXJyYXkiLCJzY3J1YlZlYyIsImNyeXB0QmxvY2siLCJNIiwia2V5U2NoZWR1bGUiLCJTVUJfTUlYIiwiU0JPWCIsIm5Sb3VuZHMiLCJ0MCIsInQxIiwidDIiLCJ0MyIsIlNVQl9NSVgwIiwiU1VCX01JWDEiLCJTVUJfTUlYMiIsIlNVQl9NSVgzIiwiczAiLCJzMSIsInMyIiwiczMiLCJrc1JvdyIsIlJDT04iLCJHIiwiSU5WX1NCT1giLCJJTlZfU1VCX01JWCIsInhpIiwic3giLCJ4NCIsIng4IiwiQUVTIiwiX2tleSIsIl9yZXNldCIsImtleVNpemUiLCJrZXlXb3JkcyIsImtzUm93cyIsImludktleVNjaGVkdWxlIiwiaWsiLCJrc1IiLCJ0dCIsIl9uUm91bmRzIiwiX2tleVNjaGVkdWxlIiwiX2ludktleVNjaGVkdWxlIiwiZW5jcnlwdEJsb2NrUmF3IiwiZW5jcnlwdEJsb2NrIiwiZGVjcnlwdEJsb2NrIiwibTEiLCJzY3J1YiIsInBhc3N3b3JkIiwic2FsdCIsImtleUJpdHMiLCJpdkxlbiIsImtleUxlbiIsIml2IiwidXNlZCIsImtleVN0YXJ0IiwiaXZTdGFydCIsIkJhc2VDdXJ2ZSIsImNvbmYiLCJ6ZXJvIiwidHdvIiwicG9pbnRGcm9tSlNPTiIsImdSZWQiLCJfd25hZlQxIiwiX3duYWZUMiIsIl93bmFmVDMiLCJfd25hZlQ0IiwiX2JpdExlbmd0aCIsImFkanVzdENvdW50IiwicmVkTiIsIl9tYXh3ZWxsVHJpY2siLCJCYXNlUG9pbnQiLCJjdXJ2ZSIsInByZWNvbXB1dGVkIiwicG9pbnQiLCJ2YWxpZGF0ZSIsIl9maXhlZE5hZk11bCIsImRvdWJsZXMiLCJfZ2V0RG91YmxlcyIsIkkiLCJzdGVwIiwicmVwciIsIm5hZlciLCJqcG9pbnQiLCJtaXhlZEFkZCIsInBvaW50cyIsInRvUCIsIl93bmFmTXVsIiwibmFmUG9pbnRzIiwiX2dldE5BRlBvaW50cyIsImRibHAiLCJfd25hZk11bEFkZCIsImRlZlciLCJjb2VmZnMiLCJqYWNvYmlhblJlc3VsdCIsInduZFdpZHRoIiwiY29tYiIsInRvSiIsImphIiwiamIiLCJkZWNvZGVQb2ludCIsInBvaW50RnJvbVgiLCJlbmNvZGVDb21wcmVzc2VkIiwiX2VuY29kZSIsImNvbXBhY3QiLCJnZXRYIiwiZ2V0WSIsInByZWNvbXB1dGUiLCJwb3dlciIsImJldGEiLCJfZ2V0QmV0YSIsIl9oYXNEb3VibGVzIiwiZGJsIiwiYWVzaWQiLCJmaXhQcm9jIiwiY2lwaGVycyIsImNvbXBhdCIsInBhcnNlS2V5cyIsInBhc3NwaHJhc2UiLCJzdWJ0eXBlIiwibmRhdGEiLCJzdHJpcHBlZCIsInRhZyIsImNlcnRpZmljYXRlIiwidGJzQ2VydGlmaWNhdGUiLCJzdWJqZWN0UHVibGljS2V5SW5mbyIsIlB1YmxpY0tleSIsImFsZ29yaXRobSIsIlJTQVB1YmxpY0tleSIsInN1YmplY3RQdWJsaWNLZXkiLCJzdWJqZWN0UHJpdmF0ZUtleSIsInB1Yl9rZXkiLCJEU0FwYXJhbSIsImRlY3J5cHQiLCJrZGUiLCJrZGVwYXJhbXMiLCJpdGVycyIsImFsZ28iLCJjaXBoZXIiLCJjaXBoZXJUZXh0Iiwia2V5bGVuIiwicGJrZGYyU3luYyIsImNyZWF0ZURlY2lwaGVyaXYiLCJFbmNyeXB0ZWRQcml2YXRlS2V5IiwiUHJpdmF0ZUtleSIsIlJTQVByaXZhdGVLZXkiLCJwcml2YXRlS2V5IiwiRUNQcml2YXRlS2V5IiwicHJpdl9rZXkiLCJEU0FQcml2YXRlS2V5Iiwic2lnbmF0dXJlIiwiQ29ya2VkUmVxdWVzdCIsIl90aGlzIiwiZW50cnkiLCJmaW5pc2giLCJjb3JrUmVxIiwicGVuZGluZ2NiIiwiY29ya2VkUmVxdWVzdHNGcmVlIiwib25Db3JrZWRGaW5pc2giLCJhc3luY1dyaXRlIiwiV3JpdGFibGVTdGF0ZSIsImludGVybmFsVXRpbCIsIk91clVpbnQ4QXJyYXkiLCJyZWFsSGFzSW5zdGFuY2UiLCJkZXN0cm95SW1wbCIsIm5vcCIsImlzRHVwbGV4Iiwib2JqZWN0TW9kZSIsIndyaXRhYmxlT2JqZWN0TW9kZSIsImh3bSIsIndyaXRhYmxlSHdtIiwid3JpdGFibGVIaWdoV2F0ZXJNYXJrIiwiZGVmYXVsdEh3bSIsImZpbmFsQ2FsbGVkIiwibmVlZERyYWluIiwiZW5kaW5nIiwibm9EZWNvZGUiLCJkZWNvZGVTdHJpbmdzIiwiZGVmYXVsdEVuY29kaW5nIiwid3JpdGluZyIsImNvcmtlZCIsInN5bmMiLCJidWZmZXJQcm9jZXNzaW5nIiwib253cml0ZSIsIndyaXRlY2IiLCJ3cml0ZWxlbiIsIm9ud3JpdGVTdGF0ZVVwZGF0ZSIsImZpbmlzaE1heWJlIiwiZXJyb3JFbWl0dGVkIiwib253cml0ZUVycm9yIiwibmVlZEZpbmlzaCIsImJ1ZmZlcmVkUmVxdWVzdCIsImNsZWFyQnVmZmVyIiwiYWZ0ZXJXcml0ZSIsImxhc3RCdWZmZXJlZFJlcXVlc3QiLCJwcmVmaW5pc2hlZCIsImJ1ZmZlcmVkUmVxdWVzdENvdW50IiwiX3dyaXRlIiwid3JpdGV2IiwiX3dyaXRldiIsImRvV3JpdGUiLCJvbndyaXRlRHJhaW4iLCJob2xkZXIiLCJhbGxCdWZmZXJzIiwiaXNCdWYiLCJjYWxsRmluYWwiLCJuZWVkIiwicHJlZmluaXNoIiwiZ2V0QnVmZmVyIiwiaGFzSW5zdGFuY2UiLCJfdWludDhBcnJheVRvQnVmZmVyIiwid3JpdGVBZnRlckVuZCIsInZhbGlkIiwidmFsaWRDaHVuayIsIm5ld0NodW5rIiwiZGVjb2RlQ2h1bmsiLCJ3cml0ZU9yQnVmZmVyIiwiY29yayIsInVuY29yayIsInNldERlZmF1bHRFbmNvZGluZyIsImVuZFdyaXRhYmxlIiwiX3VuZGVzdHJveSIsInVuZGVzdHJveSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZXNjcmlwdG9ycyIsImZvcm1hdFJlZ0V4cCIsIm9iamVjdHMiLCJub0RlcHJlY2F0aW9uIiwidGhyb3dEZXByZWNhdGlvbiIsInRyYWNlRGVwcmVjYXRpb24iLCJ0cmFjZSIsImRlYnVnRW52aXJvbiIsImRlYnVncyIsInNlZW4iLCJzdHlsaXplIiwic3R5bGl6ZU5vQ29sb3IiLCJzaG93SGlkZGVuIiwiX2V4dGVuZCIsImN1c3RvbUluc3BlY3QiLCJzdHlsaXplV2l0aENvbG9yIiwiZm9ybWF0VmFsdWUiLCJzdHlsZVR5cGUiLCJzdHlsZXMiLCJyZWN1cnNlVGltZXMiLCJwcmltaXRpdmUiLCJzaW1wbGUiLCJmb3JtYXRQcmltaXRpdmUiLCJ2aXNpYmxlS2V5cyIsImlkeCIsImFycmF5VG9IYXNoIiwiZm9ybWF0RXJyb3IiLCJEYXRlIiwiYnJhY2VzIiwidG9VVENTdHJpbmciLCJmb3JtYXRQcm9wZXJ0eSIsImZvcm1hdEFycmF5IiwicmVkdWNlIiwiY3VyIiwibnVtTGluZXNFc3QiLCJyZWR1Y2VUb1NpbmdsZVN0cmluZyIsImxpbmUiLCJhciIsInBhZCIsImRlYnVnbG9nIiwiTk9ERV9ERUJVRyIsInBpZCIsIm1vbnRocyIsInRpbWVzdGFtcCIsInRpbWUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0RGF0ZSIsImdldE1vbnRoIiwib3JpZ2luIiwia0N1c3RvbVByb21pc2lmaWVkU3ltYm9sIiwiY2FsbGJhY2tpZnlPblJlamVjdGVkIiwicmVhc29uIiwibmV3UmVhc29uIiwicHJvbWlzaWZ5IiwicHJvbWlzZVJlc29sdmUiLCJwcm9taXNlUmVqZWN0IiwicHJvbWlzZSIsIlByb21pc2UiLCJyZWplY3QiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY3VzdG9tIiwiY2FsbGJhY2tpZnkiLCJjYWxsYmFja2lmaWVkIiwibWF5YmVDYiIsInRoZW4iLCJyZWoiLCJmb3JtYXRzIiwicHVueWNvZGUiLCJwcm90b2NvbCIsInNsYXNoZXMiLCJhdXRoIiwiaG9zdCIsInBvcnQiLCJob3N0bmFtZSIsInVybFBhcnNlIiwicmVzb2x2ZU9iamVjdCIsInByb3RvY29sUGF0dGVybiIsInBvcnRQYXR0ZXJuIiwic2ltcGxlUGF0aFBhdHRlcm4iLCJ1bndpc2UiLCJhdXRvRXNjYXBlIiwibm9uSG9zdENoYXJzIiwiaG9zdEVuZGluZ0NoYXJzIiwiaG9zdG5hbWVQYXJ0UGF0dGVybiIsImhvc3RuYW1lUGFydFN0YXJ0IiwidW5zYWZlUHJvdG9jb2wiLCJob3N0bGVzc1Byb3RvY29sIiwic2xhc2hlZFByb3RvY29sIiwicGFyc2VRdWVyeVN0cmluZyIsInNsYXNoZXNEZW5vdGVIb3N0IiwicXVlcnlJbmRleCIsInNwbGl0dGVyIiwidVNwbGl0IiwicmVzdCIsInNpbXBsZVBhdGgiLCJsb3dlclByb3RvIiwiYXRTaWduIiwiaG9zdEVuZCIsImhlYyIsImRlY29kZVVSSUNvbXBvbmVudCIsInBhcnNlSG9zdCIsImlwdjZIb3N0bmFtZSIsImhvc3RwYXJ0cyIsInBhcnQiLCJuZXdwYXJ0IiwidmFsaWRQYXJ0cyIsIm5vdEhvc3QiLCJ0b0FTQ0lJIiwiYWUiLCJlc2MiLCJlbmNvZGVVUklDb21wb25lbnQiLCJxbSIsInJlbCIsInRrZXlzIiwidGsiLCJ0a2V5IiwicmtleXMiLCJyayIsInJrZXkiLCJyZWxQYXRoIiwiaXNTb3VyY2VBYnMiLCJpc1JlbEFicyIsIm11c3RFbmRBYnMiLCJyZW1vdmVBbGxEb3RzIiwic3JjUGF0aCIsInBzeWNob3RpYyIsImF1dGhJbkhvc3QiLCJoYXNUcmFpbGluZ1NsYXNoIiwid2VicGFja1BvbHlmaWxsIiwiY2hpbGRyZW4iLCJodHRwIiwiTUVUSE9EUyIsInJlc3BvbnNlIiwiZXh0ZW5kIiwic3RhdHVzQ29kZXMiLCJyZXF1ZXN0IiwiZGVmYXVsdFByb3RvY29sIiwibG9jYXRpb24iLCJDbGllbnRSZXF1ZXN0IiwiSW5jb21pbmdNZXNzYWdlIiwiQWdlbnQiLCJkZWZhdWx0TWF4U29ja2V0cyIsImdsb2JhbEFnZW50IiwiZW5jb2RlVXJsIiwiZXNjYXBlSHRtbCIsImZzIiwibXMiLCJwYXJzZVJhbmdlIiwiQllURVNfUkFOR0VfUkVHRVhQIiwiVVBfUEFUSF9SRUdFWFAiLCJTZW5kU3RyZWFtIiwiX2FjY2VwdFJhbmdlcyIsImFjY2VwdFJhbmdlcyIsIl9jYWNoZUNvbnRyb2wiLCJjYWNoZUNvbnRyb2wiLCJfZXRhZyIsIl9kb3RmaWxlcyIsImRvdGZpbGVzIiwiX2hpZGRlbiIsImhpZGRlbiIsIl9leHRlbnNpb25zIiwiZXh0ZW5zaW9ucyIsIm5vcm1hbGl6ZUxpc3QiLCJfaW1tdXRhYmxlIiwiaW1tdXRhYmxlIiwiX2luZGV4IiwiX2xhc3RNb2RpZmllZCIsImxhc3RNb2RpZmllZCIsIl9tYXhhZ2UiLCJtYXhBZ2UiLCJtYXhhZ2UiLCJfcm9vdCIsInJvb3QiLCJjb250ZW50UmFuZ2UiLCJyYW5nZSIsImNyZWF0ZUh0bWxEb2N1bWVudCIsImdldEhlYWRlck5hbWVzIiwiX2hlYWRlcnMiLCJoYXNMaXN0ZW5lcnMiLCJwYXJzZUh0dHBEYXRlIiwiZGF0ZSIsIk5hTiIsImRvYyIsInJlbW92ZUhlYWRlciIsImNsZWFySGVhZGVycyIsInNldEhlYWRlciIsInNldEhlYWRlcnMiLCJpc0NvbmRpdGlvbmFsR0VUIiwiaXNQcmVjb25kaXRpb25GYWlsdXJlIiwicGFyc2VUb2tlbkxpc3QiLCJldmVyeSIsInVubW9kaWZpZWRTaW5jZSIsInJlbW92ZUNvbnRlbnRIZWFkZXJGaWVsZHMiLCJub3RNb2RpZmllZCIsImhlYWRlcnNBbHJlYWR5U2VudCIsImlzQ2FjaGFibGUiLCJvblN0YXRFcnJvciIsImlzRnJlc2giLCJpc1JhbmdlRnJlc2giLCJpZlJhbmdlIiwibG9jIiwiY29sbGFwc2VMZWFkaW5nU2xhc2hlcyIsImNvbnRhaW5zRG90RmlsZSIsImFjY2VzcyIsInNlbmRJbmRleCIsInNlbmRGaWxlIiwic2VuZCIsInN0YXQiLCJyYW5nZXMiLCJoZWFkZXJzU2VudCIsIl9oZWFkZXIiLCJjb21iaW5lIiwiaXNEaXJlY3RvcnkiLCJjcmVhdGVSZWFkU3RyZWFtIiwiY2hhcnNldHMiLCJtb2RpZmllZCIsIm10aW1lIiwiSGFzaEJhc2UiLCJBUlJBWTE2IiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJyb3RsIiwiZm5GIiwiZm5HIiwiZm5IIiwiZm5JIiwiX2Jsb2NrT2Zmc2V0IiwiX2xlbmd0aCIsInpsIiwienIiLCJzbCIsInNyIiwiaGwiLCJociIsIl9lIiwiZm4xIiwiZm4yIiwiZm4zIiwiZm40IiwiZm41IiwiYnIiLCJjciIsImRyIiwidGwiLCJ0ciIsIkFsZ29yaXRobSIsInNoYTEiLCJzaGEyMjQiLCJzaGEyNTYiLCJzaGEzODQiLCJzaGE1MTIiLCJDaXBoZXIiLCJidWZmZXJPZmYiLCJfdXBkYXRlRGVjcnlwdCIsIl91cGRhdGVFbmNyeXB0IiwiX2J1ZmZlciIsIl9mbHVzaEJ1ZmZlciIsImlucHV0T2ZmIiwib3V0cHV0T2ZmIiwiX2ZpbmFsRW5jcnlwdCIsIl9maW5hbERlY3J5cHQiLCJfdW5wYWQiLCJkZWNpcGhlcnMiLCJtb2RlcyIsImNyZWF0ZUNpcGhlciIsImNyZWF0ZUNpcGhlcml2IiwiQ2lwaGVyaXYiLCJjcmVhdGVEZWNpcGhlciIsIkRlY2lwaGVyIiwiRGVjaXBoZXJpdiIsImxpc3RDaXBoZXJzIiwiZ2V0Q2lwaGVycyIsIm1vZGVNb2R1bGVzIiwiRUNCIiwiQ0JDIiwiQ0ZCIiwiQ0ZCOCIsIkNGQjEiLCJPRkIiLCJDVFIiLCJHQ00iLCJSYW5kIiwicmFuZCIsImdlbmVyYXRlIiwiX3JhbmQiLCJnZXRCeXRlcyIsImdldEJ5dGUiLCJyYW5kb21CeXRlcyIsImNydCIsInByaXYiLCJibGluZHMiLCJnZXRyIiwiYmxpbmRlciIsImJuIiwibW9kdWx1cyIsInB1YmxpY0V4cG9uZW50IiwidW5ibGluZGVyIiwiYmxpbmQiLCJibGluZGVkIiwiYzEiLCJwcmltZTEiLCJjMiIsInByaW1lMiIsInFpbnYiLCJjb2VmZmljaWVudCIsImV4cG9uZW50MSIsIm0yIiwiZXhwb25lbnQyIiwiZWxsaXB0aWMiLCJjdXJ2ZXMiLCJlYyIsImVkZHNhIiwicHJlIiwiUHJlc2V0Q3VydmUiLCJzaG9ydCIsImVkd2FyZHMiLCJpc0luZmluaXR5IiwiZGVmaW5lQ3VydmUiLCJsYW1iZGEiLCJiYXNpcyIsImNvbW1vbiIsInJpcGVtZCIsImhtYWMiLCJyaXBlbWQxNjAiLCJ0b2tlbiIsImJvbUhhbmRsaW5nIiwiZW5jb2RpbmdzIiwiZGVmYXVsdENoYXJVbmljb2RlIiwiZGVmYXVsdENoYXJTaW5nbGVCeXRlIiwiZW5jb2RlciIsImdldEVuY29kZXIiLCJ0cmFpbCIsInNraXBEZWNvZGVXYXJuaW5nIiwiZGVjb2RlciIsImdldERlY29kZXIiLCJnZXRDb2RlYyIsInRvRW5jb2RpbmciLCJmcm9tRW5jb2RpbmciLCJfY29kZWNEYXRhQ2FjaGUiLCJfY2Fub25pY2FsaXplRW5jb2RpbmciLCJjb2RlY09wdGlvbnMiLCJjb2RlYyIsImNvZGVjRGVmIiwiZW5jb2RpbmdOYW1lIiwiYm9tQXdhcmUiLCJhZGRCT00iLCJQcmVwZW5kQk9NIiwic3RyaXBCT00iLCJTdHJpcEJPTSIsIm5vZGVWZXIiLCJub2RlIiwibm9kZVZlckFyciIsInVucGlwZSIsImhhc1BpcGVEYXRhTGlzdGVuZXJzIiwiUmVhZGFibGVTdGF0ZSIsIkVFbGlzdGVuZXJDb3VudCIsImRlYnVnVXRpbCIsIkJ1ZmZlckxpc3QiLCJrUHJveHlFdmVudHMiLCJyZWFkYWJsZU9iamVjdE1vZGUiLCJyZWFkYWJsZUh3bSIsInJlYWRhYmxlSGlnaFdhdGVyTWFyayIsInBpcGVzIiwicGlwZXNDb3VudCIsImZsb3dpbmciLCJlbmRFbWl0dGVkIiwicmVhZGluZyIsIm5lZWRSZWFkYWJsZSIsImVtaXR0ZWRSZWFkYWJsZSIsInJlYWRhYmxlTGlzdGVuaW5nIiwicmVzdW1lU2NoZWR1bGVkIiwiYXdhaXREcmFpbiIsInJlYWRpbmdNb3JlIiwiX3JlYWQiLCJyZWFkYWJsZUFkZENodW5rIiwiYWRkVG9Gcm9udCIsInNraXBDaHVua0NoZWNrIiwiZW1pdFJlYWRhYmxlIiwib25Fb2ZDaHVuayIsImNodW5rSW52YWxpZCIsImFkZENodW5rIiwibWF5YmVSZWFkTW9yZSIsIm5lZWRNb3JlRGF0YSIsImlzUGF1c2VkIiwic2V0RW5jb2RpbmciLCJob3dNdWNoVG9SZWFkIiwiaGVhZCIsImNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrIiwiZW1pdFJlYWRhYmxlXyIsImZsb3ciLCJtYXliZVJlYWRNb3JlXyIsIm5SZWFkaW5nTmV4dFRpY2siLCJyZXN1bWVfIiwiZnJvbUxpc3QiLCJjbGVhciIsImhhc1N0cmluZ3MiLCJ0YWlsIiwiY29weUZyb21CdWZmZXJTdHJpbmciLCJjb3B5RnJvbUJ1ZmZlciIsImZyb21MaXN0UGFydGlhbCIsImVuZFJlYWRhYmxlIiwiZW5kUmVhZGFibGVOVCIsIm5PcmlnIiwiZG9SZWFkIiwicGlwZU9wdHMiLCJlbmRGbiIsInN0ZG91dCIsInN0ZGVyciIsIm9udW5waXBlIiwidW5waXBlSW5mbyIsImhhc1VucGlwZWQiLCJvbmZpbmlzaCIsImNsZWFuZWRVcCIsInBpcGVPbkRyYWluIiwiaW5jcmVhc2VkQXdhaXREcmFpbiIsImV2ZW50IiwiZGVzdHMiLCJldiIsIndyYXAiLCJwYXVzZWQiLCJfZnJvbUxpc3QiLCJlbWl0RXJyb3JOVCIsInJlYWRhYmxlRGVzdHJveWVkIiwid3JpdGFibGVEZXN0cm95ZWQiLCJhZnRlclRyYW5zZm9ybSIsInRzIiwiX3RyYW5zZm9ybVN0YXRlIiwidHJhbnNmb3JtaW5nIiwid3JpdGVjaHVuayIsInJzIiwibmVlZFRyYW5zZm9ybSIsIndyaXRlZW5jb2RpbmciLCJmbHVzaCIsIl90aGlzMiIsImVycjIiLCJvYmplY3RBc3NpZ24iLCJoYXNPd24iLCJwU2xpY2UiLCJmdW5jdGlvbnNIYXZlTmFtZXMiLCJwVG9TdHJpbmciLCJhcnJidWYiLCJEYXRhVmlldyIsIm9rIiwicmVnZXgiLCJnZXROYW1lIiwidHJ1bmNhdGUiLCJzb21ldGhpbmciLCJyYXduYW1lIiwiZmFpbCIsIm9wZXJhdG9yIiwic3RhY2tTdGFydEZ1bmN0aW9uIiwiQXNzZXJ0aW9uRXJyb3IiLCJfZGVlcEVxdWFsIiwic3RyaWN0IiwibWVtb3MiLCJnZXRUaW1lIiwibXVsdGlsaW5lIiwiaWdub3JlQ2FzZSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsImFjdHVhbEluZGV4IiwiYWN0dWFsVmlzaXRlZE9iamVjdHMiLCJhSXNBcmdzIiwiaXNBcmd1bWVudHMiLCJiSXNBcmdzIiwia2EiLCJvYmpFcXVpdiIsImV4cGVjdGVkRXhjZXB0aW9uIiwiaXNQcm90b3R5cGVPZiIsIl90aHJvd3MiLCJzaG91bGRUaHJvdyIsIl90cnlCbG9jayIsInVzZXJQcm92aWRlZE1lc3NhZ2UiLCJpc1VuZXhwZWN0ZWRFeGNlcHRpb24iLCJnZW5lcmF0ZWRNZXNzYWdlIiwiZ2V0TWVzc2FnZSIsInN0YWNrIiwiZm5fbmFtZSIsIm5leHRfbGluZSIsIm5vdEVxdWFsIiwiZGVlcEVxdWFsIiwiZGVlcFN0cmljdEVxdWFsIiwibm90RGVlcEVxdWFsIiwibm90RGVlcFN0cmljdEVxdWFsIiwic3RyaWN0RXF1YWwiLCJub3RTdHJpY3RFcXVhbCIsInRocm93cyIsImRvZXNOb3RUaHJvdyIsImlmRXJyb3IiLCJhZGxlciIsImNyY1RhYmxlIiwibWFrZVRhYmxlIiwiY3JjIiwicHJlZmVyZW5jZSIsImRiIiwiRVhUUkFDVF9UWVBFX1JFR0VYUCIsIlRFWFRfVFlQRV9SRUdFWFAiLCJleHRlbnNpb24iLCJleHRzIiwiaGFzIiwiaGV4VGFibGUiLCJhcnJheVRvT2JqZWN0IiwicGxhaW5PYmplY3RzIiwicmVmcyIsImNvbXBhY3RlZCIsImNvbXBhY3RRdWV1ZSIsInN0cldpdGhvdXRQbHVzIiwidW5lc2NhcGUiLCJkZWZhdWx0RW5jb2RlciIsIiQwIiwibWVyZ2UiLCJtZXJnZVRhcmdldCIsInRhcmdldEl0ZW0iLCJwZXJjZW50VHdlbnRpZXMiLCJSRkMxNzM4IiwiUkZDMzk4NiIsIlJvdXRlIiwiTGF5ZXIiLCJtZXRob2RzIiwibWl4aW4iLCJwYXJzZVVybCIsIm9iamVjdFJlZ0V4cCIsInJvdXRlciIsImhhbmRsZSIsIl9wYXJhbXMiLCJjYXNlU2Vuc2l0aXZlIiwibWVyZ2VQYXJhbXMiLCJhcHBlbmRNZXRob2RzIiwiYWRkaXRpb24iLCJnZXR0eXBlIiwibWF0Y2hMYXllciIsImxheWVyIiwicHJvdG9ob3N0Iiwic2VhcmNoSW5kZXgiLCJwYXRoTGVuZ3RoIiwiZnFkbkluZGV4IiwiZ2V0UHJvdG9ob3N0IiwicmVtb3ZlZCIsInNsYXNoQWRkZWQiLCJwYXJhbWNhbGxlZCIsInBhcmVudFBhcmFtcyIsInBhcmVudFVybCIsImJhc2VVcmwiLCJ2YWxzIiwicmVzdG9yZSIsImxheWVyRXJyb3IiLCJyb3V0ZSIsImdldFBhdGhuYW1lIiwiaGFzX21ldGhvZCIsIl9oYW5kbGVzX21ldGhvZCIsIl9vcHRpb25zIiwicGFyZW50IiwibGF5ZXJQYXRoIiwicHJvY2Vzc19wYXJhbXMiLCJoYW5kbGVfcmVxdWVzdCIsImhhbmRsZV9lcnJvciIsInRyaW1fcHJlZml4Iiwib2xkIiwic2VuZE9wdGlvbnNSZXNwb25zZSIsImNhbGxlZCIsInBhcmFtVmFsIiwicGFyYW1DYWxsYmFja3MiLCJwYXJhbUNhbGxlZCIsInBhcmFtSW5kZXgiLCJwYXJhbUNhbGxiYWNrIiwidXNlIiwiY2FsbGJhY2tzIiwic2Vuc2l0aXZlIiwiZGlzcGF0Y2giLCJfYWxsIiwiYWxsIiwiaGFuZGxlcyIsInBhdGhSZWdleHAiLCJyZWdleHAiLCJmYXN0X3N0YXIiLCJmYXN0X3NsYXNoIiwiZGVjb2RlX3BhcmFtIiwiVVJJRXJyb3IiLCJxdWVyeXBhcnNlIiwid3JpdGFibGVTdHJlYW0iLCJXcml0YWJsZVN0cmVhbSIsImFib3J0Q29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsImJsb2JDb25zdHJ1Y3RvciIsIkJsb2IiLCJ4aHIiLCJnZXRYSFIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJYRG9tYWluUmVxdWVzdCIsImNoZWNrVHlwZVN1cHBvcnQiLCJyZXNwb25zZVR5cGUiLCJoYXZlQXJyYXlCdWZmZXIiLCJoYXZlU2xpY2UiLCJhcnJheWJ1ZmZlciIsImZldGNoIiwibXNzdHJlYW0iLCJtb3pjaHVua2VkYXJyYXlidWZmZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwidmJBcnJheSIsIlZCQXJyYXkiLCJyU3RhdGVzIiwicmVhZHlTdGF0ZXMiLCJVTlNFTlQiLCJPUEVORUQiLCJIRUFERVJTX1JFQ0VJVkVEIiwiTE9BRElORyIsIkRPTkUiLCJmZXRjaFRpbWVyIiwiX21vZGUiLCJyYXdIZWFkZXJzIiwidHJhaWxlcnMiLCJyYXdUcmFpbGVycyIsIl9mZXRjaFJlc3BvbnNlIiwic3RhdHVzTWVzc2FnZSIsInN0YXR1c1RleHQiLCJjYXBhYmlsaXR5IiwiX2Rlc3Ryb3llZCIsIl9yZXN1bWVGZXRjaCIsImFib3J0IiwicGlwZVRvIiwiY2F0Y2giLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJfeGhyIiwiX3BvcyIsInJlc3BvbnNlVVJMIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwibWF0Y2hlcyIsIl9jaGFyc2V0IiwibWltZVR5cGUiLCJjaGFyc2V0TWF0Y2giLCJfb25YSFJQcm9ncmVzcyIsInJlYWR5U3RhdGUiLCJyZXNwb25zZUJvZHkiLCJyZXNwb25zZVRleHQiLCJuZXdEYXRhIiwiTVNTdHJlYW1SZWFkZXIiLCJvbnByb2dyZXNzIiwib25sb2FkIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJmaWxlbmFtZSIsImZhbGxiYWNrIiwiTk9OX0xBVElOMV9SRUdFWFAiLCJpc1F1b3RlZFN0cmluZyIsImZhbGxiYWNrTmFtZSIsImdldGxhdGluMSIsImhhc0ZhbGxiYWNrIiwiSEVYX0VTQ0FQRV9SRUdFWFAiLCJjcmVhdGVwYXJhbXMiLCJ1c3RyaW5nIiwiQ29udGVudERpc3Bvc2l0aW9uIiwiRElTUE9TSVRJT05fVFlQRV9SRUdFWFAiLCJuYW1lcyIsImRlY29kZWZpZWxkIiwiRU5DT0RFX1VSTF9BVFRSX0NIQVJfUkVHRVhQIiwiSEVYX0VTQ0FQRV9SRVBMQUNFX1JFR0VYUCIsIkVYVF9WQUxVRV9SRUdFWFAiLCJiaW5hcnkiLCJwZGVjb2RlIiwiaGV4IiwicGVuY29kZSIsImNoYXIiLCJlbnRpdHkiLCJpc1N0YXRzIiwiU3RhdHMiLCJjdGltZSIsImlubyIsImlzc3RhdHMiLCJjcmVhdGVIYXNoIiwiZW50aXR5dGFnIiwicm5nIiwicHNldWRvUmFuZG9tQnl0ZXMiLCJwcm5nIiwiY3JlYXRlSG1hYyIsIkhtYWMiLCJhbGdvcyIsImFsZ29LZXlzIiwiaGFzaGVzIiwiZ2V0SGFzaGVzIiwicGJrZGYyIiwiYWVzIiwiRGlmZmllSGVsbG1hbkdyb3VwIiwiY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwIiwiZ2V0RGlmZmllSGVsbG1hbiIsImNyZWF0ZURpZmZpZUhlbGxtYW4iLCJEaWZmaWVIZWxsbWFuIiwic2lnbiIsImNyZWF0ZVNpZ24iLCJTaWduIiwiY3JlYXRlVmVyaWZ5IiwiVmVyaWZ5IiwiY3JlYXRlRUNESCIsInB1YmxpY0VuY3J5cHQiLCJwcml2YXRlRW5jcnlwdCIsInB1YmxpY0RlY3J5cHQiLCJwcml2YXRlRGVjcnlwdCIsInJmIiwicmFuZG9tRmlsbCIsInJhbmRvbUZpbGxTeW5jIiwiY3JlYXRlQ3JlZGVudGlhbHMiLCJfZmluYWxpemVkIiwicHJlZml4IiwidGhyb3dJZk5vdFN0cmluZ09yQnVmZmVyIiwiSyIsIlciLCJTaGEyNTYiLCJfdyIsIm1haiIsInNpZ21hMCIsInNpZ21hMSIsImdhbW1hMCIsIl9mIiwiX2ciLCJfaCIsIlQxIiwiVDIiLCJIIiwiU2hhNTEyIiwiQ2giLCJ4bCIsIkdhbW1hMCIsIkdhbW1hMGwiLCJHYW1tYTEiLCJHYW1tYTFsIiwiZ2V0Q2FycnkiLCJfYWgiLCJfYmgiLCJfY2giLCJfZGgiLCJfZWgiLCJfZmgiLCJfZ2giLCJfaGgiLCJfYWwiLCJfYmwiLCJfY2wiLCJfZGwiLCJfZWwiLCJfZmwiLCJfZ2wiLCJfaGwiLCJmaCIsImdoIiwiaGgiLCJmbCIsImdsIiwieGgiLCJnYW1tYTBsIiwiZ2FtbWExIiwiZ2FtbWExbCIsIldpN2giLCJXaTdsIiwiV2kxNmgiLCJXaTE2bCIsIldpbCIsIldpaCIsIm1hamgiLCJtYWpsIiwic2lnbWEwaCIsInNpZ21hMGwiLCJzaWdtYTFoIiwic2lnbWExbCIsIktpaCIsIktpbCIsImNoaCIsImNobCIsInQxbCIsInQxaCIsInQybCIsInQyaCIsIndyaXRlSW50NjRCRSIsIkxlZ2FjeSIsIm1kNSIsIlpFUk9TIiwiYmxvY2tzaXplIiwiX2FsZyIsImlwYWQiLCJfaXBhZCIsIm9wYWQiLCJfb3BhZCIsImNoZWNrQnVmZmVyIiwiaXRlcmF0aW9ucyIsIk1BWF9BTExPQyIsImNoZWNrUGFyYW1ldGVycyIsInNpemVzIiwicm1kMTYwIiwic2FsdExlbiIsInNoYUZ1bmMiLCJnZXREaWdlc3QiLCJpcGFkMSIsImlwYWQyIiwiREsiLCJibG9jazEiLCJkZXN0UG9zIiwiaExlbiIsIlQiLCJVIiwiaXAiLCJpbkwiLCJpblIiLCJvdXRMIiwib3V0UiIsInJpcCIsInBjMSIsInIyOHNobCIsInBjMnRhYmxlIiwicGMyIiwiZXhwYW5kIiwic1RhYmxlIiwic3Vic3RpdHV0ZSIsInBlcm11dGVUYWJsZSIsInBhZFNwbGl0IiwiZ3JvdXAiLCJERVNTdGF0ZSIsIkRFUyIsIl9kZXNTdGF0ZSIsImRlcml2ZUtleXMiLCJzaGlmdFRhYmxlIiwia0wiLCJrUiIsImlucCIsImluT2ZmIiwib3V0T2ZmIiwiX2VuY3J5cHQiLCJfZGVjcnlwdCIsImxTdGFydCIsInJTdGFydCIsImtleUwiLCJrZXlSIiwiaW5jcjMyIiwiZ2V0QmxvY2siLCJfY2lwaGVyIiwiX3ByZXYiLCJlbmNyeXB0IiwiY2h1bmtOdW0iLCJfY2FjaGUiLCJHSEFTSCIsIlN0cmVhbUNpcGhlciIsImNrIiwiX2doYXNoIiwiX2ZpbklEIiwiZ2hhc2giLCJ0b1BhZCIsIml2Qml0cyIsImNhbGNJdiIsIl9zZWNDYWNoZSIsIl9hbGVuIiwiX2F1dGhUYWciLCJfY2FsbGVkIiwicnVtcCIsInhvclRlc3QiLCJmaW5kUHJpbWUiLCJzaW1wbGVTaWV2ZSIsImZlcm1hdFRlc3QiLCJUV0VOVFlGT1VSIiwibWlsbGVyUmFiaW4iLCJPTkUiLCJUV08iLCJGSVZFIiwiVEVOIiwiVEhSRUUiLCJFTEVWRU4iLCJGT1VSIiwiX2dldFByaW1lcyIsImdlbiIsIm4yIiwiYnJvcmFuZCIsIk1pbGxlclJhYmluIiwiX3JhbmRiZWxvdyIsIm1pbl9ieXRlcyIsIl9yYW5kcmFuZ2UiLCJzdG9wIiwicm9uZSIsIm4xIiwicm4xIiwiZ2V0RGl2aXNvciIsImNoMzIiLCJtYWozMiIsInAzMiIsImZ0XzEiLCJzMF8yNTYiLCJzMV8yNTYiLCJnMF8yNTYiLCJnMV8yNTYiLCJzaGFDb21tb24iLCJzaGEyNTZfSyIsIlNIQTI1NiIsInNoYTUxMl9LIiwiU0hBNTEyIiwiY2g2NF9oaSIsInloIiwieWwiLCJ6aCIsImNoNjRfbG8iLCJtYWo2NF9oaSIsIm1hajY0X2xvIiwiczBfNTEyX2hpIiwiczBfNTEyX2xvIiwiczFfNTEyX2hpIiwiczFfNTEyX2xvIiwiZzBfNTEyX2hpIiwiZzBfNTEyX2xvIiwiZzFfNTEyX2hpIiwiZzFfNTEyX2xvIiwiX3ByZXBhcmVCbG9jayIsImMwX2hpIiwiYzBfbG8iLCJjMV9oaSIsImMxX2xvIiwiYzJfaGkiLCJjMl9sbyIsImMzX2hpIiwiYzNfbG8iLCJjNF9oaSIsImM0X2xvIiwiVDFfaGkiLCJUMV9sbyIsIlQyX2hpIiwiVDJfbG8iLCJyZXBvcnRlciIsImlzRW1wdHkiLCJza2lwIiwiX3JlcG9ydGVyU3RhdGUiLCJyYXciLCJfcmV2ZXJzZSIsImRlciIsIkRFUkRlY29kZXIiLCJ0cmVlIiwiREVSTm9kZSIsImRlckRlY29kZVRhZyIsImNscyIsInRhZ0NsYXNzIiwib2N0IiwidGFnU3RyIiwiZGVyRGVjb2RlTGVuIiwiX2RlY29kZSIsIl9wZWVrVGFnIiwiYW55IiwiZGVjb2RlZFRhZyIsIl9kZWNvZGVUYWciLCJfc2tpcFVudGlsRW5kIiwiX2RlY29kZUxpc3QiLCJwb3NzaWJsZUVuZCIsIl9kZWNvZGVTdHIiLCJ1bnVzZWQiLCJudW1zdHIiLCJfaXNOdW1zdHIiLCJwcmludHN0ciIsIl9pc1ByaW50c3RyIiwiX2RlY29kZU9iamlkIiwidmFsdWVzIiwiaWRlbnRpZmllcnMiLCJpZGVudCIsInN1YmlkZW50Iiwic2Vjb25kIiwiX2RlY29kZVRpbWUiLCJ5ZWFyIiwibW9uIiwiZGF5IiwiaG91ciIsInNlYyIsIlVUQyIsIl9kZWNvZGVOdWxsIiwiX2RlY29kZUJvb2wiLCJfZGVjb2RlSW50IiwiX3VzZSIsIl9nZXREZWNvZGVyIiwiREVSRW5jb2RlciIsIl9lbmNvZGVDb21wb3NpdGUiLCJjb250ZW50IiwiZW5jb2RlZFRhZyIsInRhZ0J5TmFtZSIsInRhZ0NsYXNzQnlOYW1lIiwiZW5jb2RlVGFnIiwiX2NyZWF0ZUVuY29kZXJCdWZmZXIiLCJsZW5PY3RldHMiLCJfZW5jb2RlU3RyIiwiX2VuY29kZU9iamlkIiwib2JqaWQiLCJfZW5jb2RlVGltZSIsImdldEZ1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIl9lbmNvZGVOdWxsIiwiX2VuY29kZUludCIsIm51bUFycmF5IiwiX2VuY29kZUJvb2wiLCJfZ2V0RW5jb2RlciIsIl9za2lwRGVmYXVsdCIsImRhdGFCdWZmZXIiLCJfYmFzZVN0YXRlIiwiZGVmYXVsdEJ1ZmZlciIsIl9lbmNvZGVWYWx1ZSIsImkyb3BzIiwic2VlZCIsInBhZGRlZE1zZyIsIkNBQ0hFX0NPTlRST0xfTk9fQ0FDSEVfUkVHRVhQIiwicmVxSGVhZGVycyIsInJlc0hlYWRlcnMiLCJtb2RpZmllZFNpbmNlIiwibm9uZU1hdGNoIiwiZXRhZ1N0YWxlIiwibWFwV2l0aEluZGV4IiwibWFwV2l0aG91dEluZGV4Iiwic29ydEJ5UmFuZ2VJbmRleCIsInNvcnRCeVJhbmdlU3RhcnQiLCJvcmRlcmVkIiwiY29tYmluZWQiLCJjb21iaW5lUmFuZ2VzIiwidHJ1c3QiLCJhZGRycyIsImFsbGFkZHJzIiwiZm9yd2FyZGVkIiwiaXBhZGRyIiwiRElHSVRfUkVHRVhQIiwiaXNpcCIsImlzVmFsaWQiLCJwYXJzZWlwIiwiSVBfUkFOR0VTIiwibGlua2xvY2FsIiwibG9vcGJhY2siLCJ1bmlxdWVsb2NhbCIsInJhbmdlU3VibmV0cyIsInRydXN0Tm9uZSIsInN1Ym5ldCIsInN1Ym5ldGlwIiwic3VibmV0a2luZCIsImtpbmQiLCJzdWJuZXRpc2lwdjQiLCJzdWJuZXRyYW5nZSIsImFkZHIiLCJpc0lQdjRNYXBwZWRBZGRyZXNzIiwidG9JUHY0QWRkcmVzcyIsInRvSVB2NE1hcHBlZEFkZHJlc3MiLCJzdWJuZXRzIiwiaXBjb252IiwidHJ1c3RlZCIsInBhcnNlaXBOb3RhdGlvbiIsImNvbXBpbGVSYW5nZVN1Ym5ldHMiLCJub3RlIiwibmV0bWFzayIsInByZWZpeExlbmd0aEZyb21TdWJuZXRNYXNrIiwicGFyc2VOZXRtYXNrIiwiYXBwIiwibGlzdGVuIiwiYm9keVBhcnNlciIsIlJvdXRlciIsImFwcGxpY2F0aW9uIiwianNvbiIsInN0YXRpYyIsInVybGVuY29kZWQiLCJwYXJzZXJzIiwiY3JlYXRlUGFyc2VyR2V0dGVyIiwicGFyc2VyTmFtZSIsInBhcnNlciIsImxvYWRQYXJzZXIiLCJfdXJsZW5jb2RlZCIsIl9qc29uIiwicmV2aXZlciIsInNob3VsZFBhcnNlIiwidHlwZUNoZWNrZXIiLCJGSVJTVF9DSEFSX1JFR0VYUCIsInBhcnRpYWwiLCJTeW50YXhFcnJvciIsIm5vcm1hbGl6ZUpzb25TeW50YXhFcnJvciIsImNyZWF0ZVN0cmljdFN5bnRheEVycm9yIiwiZ2V0Q2hhcnNldCIsInByZXZUaW1lIiwiY3JlYXRlRGVidWciLCJlbmFibGVkIiwiY3VyciIsImNvZXJjZSIsImZvcm1hdHRlciIsImxvZ0ZuIiwic2VsZWN0Q29sb3IiLCJkaXNhYmxlIiwic2tpcHMiLCJwbHVyYWwiLCJsb25nIiwiZm10U2hvcnQiLCJyZWFkU3RyZWFtIiwiSUNPTlZfRU5DT0RJTkdfTUVTU0FHRV9SRUdFWFAiLCJoYWx0IiwicmVjZWl2ZWQiLCJpbnZva2VDYWxsYmFjayIsIm9uQWJvcnRlZCIsIm9uRGF0YSIsIm9uRW5kIiwiYjY0IiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsImxlbjIiLCJlbmNvZGVDaHVuayIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwicnQiLCJMTjIiLCJQcmVwZW5kQk9NV3JhcHBlciIsIlN0cmlwQk9NV3JhcHBlciIsInBhc3MiLCJJbnRlcm5hbENvZGVjIiwiSW50ZXJuYWxFbmNvZGVyQmFzZTY0IiwiSW50ZXJuYWxFbmNvZGVyQ2VzdTgiLCJJbnRlcm5hbERlY29kZXJDZXN1OCIsInV0ZjgiLCJjZXN1OCIsInVuaWNvZGUxMXV0ZjgiLCJ1Y3MyIiwidXRmMTZsZSIsIl9pbnRlcm5hbCIsIkludGVybmFsRW5jb2RlciIsIkludGVybmFsRGVjb2RlciIsInByZXZTdHIiLCJjb250Qnl0ZXMiLCJhY2NCeXRlcyIsImNvbXBsZXRlUXVhZHMiLCJidWZJZHgiLCJjaGFyQ29kZSIsIlV0ZjE2QkVDb2RlYyIsIlV0ZjE2QkVFbmNvZGVyIiwiVXRmMTZCRURlY29kZXIiLCJvdmVyZmxvd0J5dGUiLCJVdGYxNkNvZGVjIiwiVXRmMTZFbmNvZGVyIiwiVXRmMTZEZWNvZGVyIiwiaW5pdGlhbEJ5dGVzIiwiaW5pdGlhbEJ5dGVzTGVuIiwiZGV0ZWN0RW5jb2RpbmciLCJhc2NpaUNoYXJzTEUiLCJhc2NpaUNoYXJzQkUiLCJ1dGYxNmJlIiwiYnVmMiIsInV0ZjE2IiwiVXRmN0NvZGVjIiwidXRmNyIsInVuaWNvZGUxMXV0ZjciLCJVdGY3RW5jb2RlciIsIlV0ZjdEZWNvZGVyIiwibm9uRGlyZWN0Q2hhcnMiLCJpbkJhc2U2NCIsImJhc2U2NEFjY3VtIiwiYmFzZTY0UmVnZXgiLCJiYXNlNjRDaGFycyIsInBsdXNDaGFyIiwibWludXNDaGFyIiwiYW5kQ2hhciIsIlV0ZjdJTUFQQ29kZWMiLCJVdGY3SU1BUEVuY29kZXIiLCJiYXNlNjRBY2N1bUlkeCIsIlV0ZjdJTUFQRGVjb2RlciIsImxhc3RJIiwiYjY0c3RyIiwiY2FuQmVEZWNvZGVkIiwidXRmN2ltYXAiLCJ1Q2hhciIsImJhc2U2NElNQVBDaGFycyIsIlNCQ1NDb2RlYyIsImNoYXJzIiwiYXNjaWlTdHJpbmciLCJkZWNvZGVCdWYiLCJlbmNvZGVCdWYiLCJTQkNTRW5jb2RlciIsIlNCQ1NEZWNvZGVyIiwiX3NiY3MiLCJpZHgxIiwiaWR4MiIsIl9kYmNzIiwiREJDU0NvZGVjIiwiVU5BU1NJR05FRF9OT0RFIiwibWFwcGluZ1RhYmxlIiwiZGVjb2RlVGFibGVzIiwiZGVjb2RlVGFibGVTZXEiLCJfYWRkRGVjb2RlQ2h1bmsiLCJlbmNvZGVUYWJsZSIsImVuY29kZVRhYmxlU2VxIiwic2tpcEVuY29kZUNoYXJzIiwiZW5jb2RlU2tpcFZhbHMiLCJfZmlsbEVuY29kZVRhYmxlIiwiZW5jb2RlQWRkIiwiX3NldEVuY29kZUNoYXIiLCJkZWZDaGFyU0IiLCJnYjE4MDMwIiwidGhpcmRCeXRlTm9kZUlkeCIsInRoaXJkQnl0ZU5vZGUiLCJmb3VydGhCeXRlTm9kZUlkeCIsImZvdXJ0aEJ5dGVOb2RlIiwic2Vjb25kQnl0ZU5vZGVJZHgiLCJzZWNvbmRCeXRlTm9kZSIsIkRCQ1NFbmNvZGVyIiwic2VxT2JqIiwiREJDU0RlY29kZXIiLCJub2RlSWR4IiwicHJldkJ1ZiIsImZpbmRJZHgiLCJfZ2V0RGVjb2RlVHJpZU5vZGUiLCJjdXJBZGRyIiwid3JpdGVUYWJsZSIsImNvZGVUcmFpbCIsInNlcSIsIl9nZXRFbmNvZGVCdWNrZXQiLCJ1Q29kZSIsImhpZ2giLCJkYmNzQ29kZSIsImJ1Y2tldCIsImxvdyIsIl9zZXRFbmNvZGVTZXF1ZW5jZSIsIm9sZFZhbCIsIm1iQ29kZSIsIm5leHRDaGFyIiwicmVzQ29kZSIsInN1YnRhYmxlIiwidUNoYXJzIiwiZ2JDaGFycyIsInByZXZCdWZPZmZzZXQiLCJzZXFTdGFydCIsImN1clNlcSIsInB0ciIsInVDb2RlTGVhZCIsInJlZ2lzdGVySW1tZWRpYXRlIiwiY2hhbm5lbCIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImF0dGFjaFRvIiwicnVuSWZQcmVzZW50IiwicG9zdE1lc3NhZ2UiLCJpbXBvcnRTY3JpcHRzIiwicG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyIsIm9sZE9uTWVzc2FnZSIsIm9ubWVzc2FnZSIsImNhblVzZVBvc3RNZXNzYWdlIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MSIsInBvcnQyIiwiY3JlYXRlRWxlbWVudCIsInNjcmlwdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJyYW5kb20iLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJ0YXNrIiwiZWUiLCJzdHVmZiIsImNsZWFudXBzIiwidGh1bmsiLCJrUmFuZ2VFcnJvck1lc3NhZ2UiLCJaX01JTl9XSU5ET1dCSVRTIiwiWl9NQVhfV0lORE9XQklUUyIsIlpfREVGQVVMVF9XSU5ET1dCSVRTIiwiWl9NSU5fQ0hVTksiLCJaX01BWF9DSFVOSyIsIlpfREVGQVVMVF9DSFVOSyIsIlpfTUlOX01FTUxFVkVMIiwiWl9NQVhfTUVNTEVWRUwiLCJaX0RFRkFVTFRfTUVNTEVWRUwiLCJaX01JTl9MRVZFTCIsIlpfTUFYX0xFVkVMIiwiWl9ERUZBVUxUX0xFVkVMIiwiWl9ERUZBVUxUX0NPTVBSRVNTSU9OIiwiYmtleXMiLCJiayIsImJrZXkiLCJaX09LIiwiWl9TVFJFQU1fRU5EIiwiWl9ORUVEX0RJQ1QiLCJaX0VSUk5PIiwiWl9TVFJFQU1fRVJST1IiLCJaX0RBVEFfRVJST1IiLCJaX01FTV9FUlJPUiIsIlpfQlVGX0VSUk9SIiwiWl9WRVJTSU9OX0VSUk9SIiwiY2tleXMiLCJja2V5IiwiemxpYkJ1ZmZlciIsImVuZ2luZSIsImJ1ZmZlcnMiLCJucmVhZCIsInpsaWJCdWZmZXJTeW5jIiwiZmx1c2hGbGFnIiwiX2ZpbmlzaEZsdXNoRmxhZyIsIl9wcm9jZXNzQ2h1bmsiLCJEZWZsYXRlIiwiWmxpYiIsIkRFRkxBVEUiLCJJbmZsYXRlIiwiSU5GTEFURSIsIkd6aXAiLCJHWklQIiwiR3VuemlwIiwiR1VOWklQIiwiRGVmbGF0ZVJhdyIsIkRFRkxBVEVSQVciLCJJbmZsYXRlUmF3IiwiSU5GTEFURVJBVyIsIlVuemlwIiwiVU5aSVAiLCJpc1ZhbGlkRmx1c2hGbGFnIiwiZmxhZyIsIlpfTk9fRkxVU0giLCJaX1BBUlRJQUxfRkxVU0giLCJaX1NZTkNfRkxVU0giLCJaX0ZVTExfRkxVU0giLCJaX0ZJTklTSCIsIlpfQkxPQ0siLCJfb3B0cyIsIl9jaHVua1NpemUiLCJjaHVua1NpemUiLCJmaW5pc2hGbHVzaCIsIl9mbHVzaEZsYWciLCJ3aW5kb3dCaXRzIiwibGV2ZWwiLCJtZW1MZXZlbCIsInN0cmF0ZWd5IiwiWl9GSUxURVJFRCIsIlpfSFVGRk1BTl9PTkxZIiwiWl9STEUiLCJaX0ZJWEVEIiwiWl9ERUZBVUxUX1NUUkFURUdZIiwiZGljdGlvbmFyeSIsIl9oYW5kbGUiLCJfaGFkRXJyb3IiLCJlcnJubyIsIl9jbG9zZSIsIl9vZmZzZXQiLCJfbGV2ZWwiLCJfc3RyYXRlZ3kiLCJlbWl0Q2xvc2VOVCIsImZyZWV6ZSIsImNyZWF0ZURlZmxhdGUiLCJjcmVhdGVEZWZsYXRlUmF3IiwiY3JlYXRlSW5mbGF0ZVJhdyIsImNyZWF0ZUd6aXAiLCJjcmVhdGVVbnppcCIsImRlZmxhdGUiLCJkZWZsYXRlU3luYyIsImd6aXAiLCJnemlwU3luYyIsImRlZmxhdGVSYXciLCJkZWZsYXRlUmF3U3luYyIsInVuemlwIiwidW56aXBTeW5jIiwiaW5mbGF0ZVN5bmMiLCJndW56aXAiLCJndW56aXBTeW5jIiwiaW5mbGF0ZVJhdyIsImluZmxhdGVSYXdTeW5jIiwicmVzZXQiLCJhdmFpbEluQmVmb3JlIiwiYXZhaWxPdXRCZWZvcmUiLCJhc3luYyIsIndyaXRlU3luYyIsImF2YWlsSW5BZnRlciIsImF2YWlsT3V0QWZ0ZXIiLCJoYXZlIiwibmV3UmVxIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayIsImNvbmZpZyIsIlpzdHJlYW0iLCJ6bGliX2RlZmxhdGUiLCJ6bGliX2luZmxhdGUiLCJOT05FIiwiaW5pdF9kb25lIiwid3JpdGVfaW5fcHJvZ3Jlc3MiLCJwZW5kaW5nX2Nsb3NlIiwiZ3ppcF9pZF9ieXRlc19yZWFkIiwiZGVmbGF0ZUVuZCIsInN0cm0iLCJpbmZsYXRlRW5kIiwiaW5fb2ZmIiwiaW5fbGVuIiwib3V0X29mZiIsIm91dF9sZW4iLCJhdmFpbF9pbiIsIm5leHRfaW4iLCJhdmFpbF9vdXQiLCJuZXh0X291dCIsIl9wcm9jZXNzIiwiX2NoZWNrRXJyb3IiLCJfYWZ0ZXJTeW5jIiwiX2FmdGVyIiwibmV4dF9leHBlY3RlZF9oZWFkZXJfYnl0ZSIsImluZmxhdGVTZXREaWN0aW9uYXJ5IiwiX3NldERpY3Rpb25hcnkiLCJkZWZsYXRlSW5pdDIiLCJaX0RFRkxBVEVEIiwiaW5mbGF0ZUluaXQyIiwiZGVmbGF0ZVNldERpY3Rpb25hcnkiLCJkZWZsYXRlUmVzZXQiLCJpbmZsYXRlUmVzZXQiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInRlc3QxIiwidGVzdDIiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJ0b3RhbF9pbiIsInRvdGFsX291dCIsImRhdGFfdHlwZSIsImNvbmZpZ3VyYXRpb25fdGFibGUiLCJ0cmVlcyIsImFkbGVyMzIiLCJjcmMzMiIsImVycm9yQ29kZSIsInJhbmsiLCJmbHVzaF9wZW5kaW5nIiwicGVuZGluZ19idWYiLCJwZW5kaW5nX291dCIsImZsdXNoX2Jsb2NrX29ubHkiLCJfdHJfZmx1c2hfYmxvY2siLCJibG9ja19zdGFydCIsInN0cnN0YXJ0IiwicHV0X2J5dGUiLCJwdXRTaG9ydE1TQiIsImxvbmdlc3RfbWF0Y2giLCJjdXJfbWF0Y2giLCJjaGFpbl9sZW5ndGgiLCJtYXhfY2hhaW5fbGVuZ3RoIiwic2NhbiIsImJlc3RfbGVuIiwicHJldl9sZW5ndGgiLCJuaWNlX21hdGNoIiwid19zaXplIiwiX3dpbiIsIndtYXNrIiwid19tYXNrIiwic3RyZW5kIiwic2Nhbl9lbmQxIiwic2Nhbl9lbmQiLCJnb29kX21hdGNoIiwibG9va2FoZWFkIiwibWF0Y2hfc3RhcnQiLCJmaWxsX3dpbmRvdyIsIm1vcmUiLCJfd19zaXplIiwid2luZG93X3NpemUiLCJoYXNoX3NpemUiLCJpbnNlcnQiLCJpbnNfaCIsImhhc2hfc2hpZnQiLCJoYXNoX21hc2siLCJkZWZsYXRlX2Zhc3QiLCJoYXNoX2hlYWQiLCJiZmx1c2giLCJtYXRjaF9sZW5ndGgiLCJfdHJfdGFsbHkiLCJtYXhfbGF6eV9tYXRjaCIsIk1JTl9NQVRDSCIsImxhc3RfbGl0IiwiZGVmbGF0ZV9zbG93IiwibWF4X2luc2VydCIsInByZXZfbWF0Y2giLCJtYXRjaF9hdmFpbGFibGUiLCJDb25maWciLCJnb29kX2xlbmd0aCIsIm1heF9sYXp5IiwibmljZV9sZW5ndGgiLCJtYXhfY2hhaW4iLCJEZWZsYXRlU3RhdGUiLCJwZW5kaW5nX2J1Zl9zaXplIiwiZ3poZWFkIiwiZ3ppbmRleCIsImxhc3RfZmx1c2giLCJ3X2JpdHMiLCJoYXNoX2JpdHMiLCJkeW5fbHRyZWUiLCJIRUFQX1NJWkUiLCJkeW5fZHRyZWUiLCJibF90cmVlIiwibF9kZXNjIiwiZF9kZXNjIiwiYmxfZGVzYyIsImJsX2NvdW50IiwiTUFYX0JJVFMiLCJoZWFwIiwiaGVhcF9sZW4iLCJoZWFwX21heCIsImxfYnVmIiwibGl0X2J1ZnNpemUiLCJkX2J1ZiIsIm9wdF9sZW4iLCJzdGF0aWNfbGVuIiwiYmlfYnVmIiwiYmlfdmFsaWQiLCJkZWZsYXRlUmVzZXRLZWVwIiwiX3RyX2luaXQiLCJtYXhfYmxvY2tfc2l6ZSIsIm1heF9zdGFydCIsImRlZmxhdGVJbml0IiwiZGVmbGF0ZVNldEhlYWRlciIsIm9sZF9mbHVzaCIsImJlZyIsImhjcmMiLCJleHRyYSIsImNvbW1lbnQiLCJvcyIsImJzdGF0ZSIsImRlZmxhdGVfaHVmZiIsImRlZmxhdGVfcmxlIiwiX3RyX2FsaWduIiwiX3RyX3N0b3JlZF9ibG9jayIsImF2YWlsIiwidG1wRGljdCIsImRpY3RMZW5ndGgiLCJkZWZsYXRlSW5mbyIsImV4dHJhX2xiaXRzIiwiZXh0cmFfZGJpdHMiLCJleHRyYV9ibGJpdHMiLCJibF9vcmRlciIsInN0YXRpY19sdHJlZSIsInN0YXRpY19kdHJlZSIsIkRfQ09ERVMiLCJfZGlzdF9jb2RlIiwiX2xlbmd0aF9jb2RlIiwiTUFYX01BVENIIiwiYmFzZV9sZW5ndGgiLCJzdGF0aWNfbF9kZXNjIiwic3RhdGljX2RfZGVzYyIsInN0YXRpY19ibF9kZXNjIiwiYmFzZV9kaXN0IiwiU3RhdGljVHJlZURlc2MiLCJzdGF0aWNfdHJlZSIsImV4dHJhX2JpdHMiLCJleHRyYV9iYXNlIiwiZWxlbXMiLCJtYXhfbGVuZ3RoIiwiaGFzX3N0cmVlIiwiVHJlZURlc2MiLCJkeW5fdHJlZSIsInN0YXRfZGVzYyIsIm1heF9jb2RlIiwiZF9jb2RlIiwiZGlzdCIsInB1dF9zaG9ydCIsInNlbmRfYml0cyIsInNlbmRfY29kZSIsImJpX3JldmVyc2UiLCJnZW5fY29kZXMiLCJuZXh0X2NvZGUiLCJpbml0X2Jsb2NrIiwiTElURVJBTFMiLCJFTkRfQkxPQ0siLCJiaV93aW5kdXAiLCJzbWFsbGVyIiwiX24yIiwiX20yIiwicHFkb3duaGVhcCIsImNvbXByZXNzX2Jsb2NrIiwibHRyZWUiLCJkdHJlZSIsImxjIiwibHgiLCJidWlsZF90cmVlIiwic3RyZWUiLCJ4Yml0cyIsIm92ZXJmbG93IiwiZ2VuX2JpdGxlbiIsInNjYW5fdHJlZSIsImN1cmxlbiIsInByZXZsZW4iLCJuZXh0bGVuIiwibWF4X2NvdW50IiwibWluX2NvdW50IiwiUkVQXzNfNiIsIlJFUFpfM18xMCIsIlJFUFpfMTFfMTM4Iiwic2VuZF90cmVlIiwic3RhdGljX2luaXRfZG9uZSIsInN0b3JlZF9sZW4iLCJjb3B5X2Jsb2NrIiwiTEVOR1RIX0NPREVTIiwiTF9DT0RFUyIsInRyX3N0YXRpY19pbml0Iiwib3B0X2xlbmIiLCJzdGF0aWNfbGVuYiIsIm1heF9ibGluZGV4IiwiYmxhY2tfbWFzayIsImRldGVjdF9kYXRhX3R5cGUiLCJCTF9DT0RFUyIsImJ1aWxkX2JsX3RyZWUiLCJsY29kZXMiLCJkY29kZXMiLCJibGNvZGVzIiwic2VuZF9hbGxfdHJlZXMiLCJTVEFUSUNfVFJFRVMiLCJiaV9mbHVzaCIsIjIiLCIxIiwiMCIsImluZmxhdGVfZmFzdCIsImluZmxhdGVfdGFibGUiLCJ6c3dhcDMyIiwiSW5mbGF0ZVN0YXRlIiwiaGF2ZWRpY3QiLCJmbGFncyIsImRtYXgiLCJjaGVjayIsIndiaXRzIiwid3NpemUiLCJ3aGF2ZSIsInduZXh0IiwiaG9sZCIsImxlbmNvZGUiLCJkaXN0Y29kZSIsImxlbmJpdHMiLCJkaXN0Yml0cyIsIm5jb2RlIiwibmxlbiIsIm5kaXN0Iiwid29yayIsImxlbmR5biIsImRpc3RkeW4iLCJzYW5lIiwiYmFjayIsIndhcyIsImluZmxhdGVSZXNldEtlZXAiLCJpbmZsYXRlUmVzZXQyIiwibGVuZml4IiwiZGlzdGZpeCIsInZpcmdpbiIsImZpeGVkdGFibGVzIiwic3ltIiwidXBkYXRld2luZG93IiwiaW5mbGF0ZUluaXQiLCJwdXQiLCJfaW4iLCJfb3V0IiwiZnJvbV9zb3VyY2UiLCJoZXJlX2JpdHMiLCJoZXJlX29wIiwiaGVyZV92YWwiLCJsYXN0X2JpdHMiLCJsYXN0X29wIiwibGFzdF92YWwiLCJoZXJlIiwiaGJ1ZiIsIm9yZGVyIiwiaW5mX2xlYXZlIiwieGZsYWdzIiwiZXh0cmFfbGVuIiwiaW5mbGF0ZUdldEhlYWRlciIsImluZmxhdGVJbmZvIiwic193aW5kb3ciLCJsY29kZSIsImRjb2RlIiwibG1hc2siLCJkbWFzayIsIm9wIiwidG9wIiwiZG9sZW4iLCJkb2Rpc3QiLCJsYmFzZSIsImxleHQiLCJkYmFzZSIsImRleHQiLCJsZW5zX2luZGV4IiwidGFibGVfaW5kZXgiLCJpbmNyIiwiZHJvcCIsImh1ZmYiLCJiYXNlX2luZGV4IiwiTUFYQklUUyIsIm9mZnMiLCJleHRyYV9pbmRleCIsIlpfVFJFRVMiLCJaX05PX0NPTVBSRVNTSU9OIiwiWl9CRVNUX1NQRUVEIiwiWl9CRVNUX0NPTVBSRVNTSU9OIiwiWl9CSU5BUlkiLCJaX1RFWFQiLCJaX1VOS05PV04iLCJwYXJhbVJlZ0V4cCIsInRleHRSZWdFeHAiLCJ0b2tlblJlZ0V4cCIsInFlc2NSZWdFeHAiLCJxdW90ZVJlZ0V4cCIsInN1YnR5cGVOYW1lUmVnRXhwIiwidHlwZU5hbWVSZWdFeHAiLCJ0eXBlUmVnRXhwIiwic3VmZml4Iiwic3BsaXRUeXBlIiwiZGVmYXVsdENoYXJzZXQiLCJwYXJhbWV0ZXJMaW1pdCIsInBhcmFtQ291bnQiLCJwYXJhbWV0ZXJDb3VudCIsImFycmF5TGltaXQiLCJleHRlbmRlZHBhcnNlciIsIm1heEtleXMiLCJzaW1wbGVwYXJzZXIiLCJhcnJheVByZWZpeEdlbmVyYXRvcnMiLCJicmFja2V0cyIsImNvbW1hIiwiaW5kaWNlcyIsInJlcGVhdCIsInB1c2hUb0FycmF5IiwidmFsdWVPckFycmF5IiwidG9JU08iLCJ0b0lTT1N0cmluZyIsImRlZmF1bHRzIiwiYWRkUXVlcnlQcmVmaXgiLCJhbGxvd0RvdHMiLCJjaGFyc2V0U2VudGluZWwiLCJlbmNvZGVWYWx1ZXNPbmx5Iiwic2VyaWFsaXplRGF0ZSIsInNraXBOdWxscyIsInN0cmljdE51bGxIYW5kbGluZyIsImdlbmVyYXRlQXJyYXlQcmVmaXgiLCJvYmpLZXlzIiwibm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyIsImFycmF5Rm9ybWF0Iiwiam9pbmVkIiwiaWdub3JlUXVlcnlQcmVmaXgiLCJpbnRlcnByZXROdW1lcmljRW50aXRpZXMiLCJwYXJzZUFycmF5cyIsIm51bWJlclN0ciIsImdpdmVuS2V5IiwiY2hpbGQiLCJzZWdtZW50IiwiY2hhaW4iLCJsZWFmIiwiY2xlYW5Sb290IiwicGFyc2VPYmplY3QiLCJub3JtYWxpemVQYXJzZU9wdGlvbnMiLCJ0ZW1wT2JqIiwiY2xlYW5TdHIiLCJza2lwSW5kZXgiLCJicmFja2V0RXF1YWxzUG9zIiwicGFyc2VWYWx1ZXMiLCJuZXdPYmoiLCJrc3RyIiwidnN0ciIsInN0cmluZ2lmeVByaW1pdGl2ZSIsImtzIiwicmVkZWZpbmUiLCJmaW5hbGhhbmRsZXIiLCJtaWRkbGV3YXJlIiwiVmlldyIsImxvZ2Vycm9yIiwiY2FjaGUiLCJlbmdpbmVzIiwic2V0dGluZ3MiLCJkZWZhdWx0Q29uZmlndXJhdGlvbiIsImxvY2FscyIsIm1vdW50cGF0aCIsImxhenlyb3V0ZXIiLCJfcm91dGVyIiwiZm5zIiwib3JpZyIsInNldHRpbmciLCJkaXNhYmxlZCIsImRlbCIsImRlbGV0ZSIsInJlbmRlciIsInZpZXciLCJyZW5kZXJPcHRpb25zIiwiX2xvY2FscyIsImRlZmF1bHRFbmdpbmUiLCJkaXJzIiwidHJ5UmVuZGVyIiwic2VydmVyIiwiY3JlYXRlU2VydmVyIiwiRE9VQkxFX1NQQUNFX1JFR0VYUCIsIk5FV0xJTkVfUkVHRVhQIiwiZ2V0RXJyb3JTdGF0dXNDb2RlIiwiZ2V0UmVzcG9uc2VTdGF0dXNDb2RlIiwiZ2V0RXJyb3JIZWFkZXJzIiwiZ2V0RXJyb3JNZXNzYWdlIiwiZ2V0UmVzb3VyY2VOYW1lIiwibm9kZVR5cGUiLCJmcmVlR2xvYmFsIiwibWF4SW50IiwicmVnZXhQdW55Y29kZSIsInJlZ2V4Tm9uQVNDSUkiLCJyZWdleFNlcGFyYXRvcnMiLCJlcnJvcnMiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJtYXBEb21haW4iLCJ1Y3MyZGVjb2RlIiwiY291bnRlciIsInVjczJlbmNvZGUiLCJkaWdpdFRvQmFzaWMiLCJkaWdpdCIsImFkYXB0IiwibnVtUG9pbnRzIiwiZmlyc3RUaW1lIiwiYmFzZU1pbnVzVE1pbiIsImJhc2ljIiwib2xkaSIsImJhc2VNaW51c1QiLCJpbnB1dExlbmd0aCIsImJpYXMiLCJoYW5kbGVkQ1BDb3VudCIsImJhc2ljTGVuZ3RoIiwiY3VycmVudFZhbHVlIiwiaGFuZGxlZENQQ291bnRQbHVzT25lIiwicU1pbnVzVCIsInBhdGh0b1JlZ2V4cCIsImV4dHJhT2Zmc2V0Iiwia2V5c09mZnNldCIsIk1BVENISU5HX0dST1VQX1JFR0VYUCIsIm9wdGlvbmFsIiwic2xhc2giLCJjYXB0dXJlIiwic3RhciIsImVzY2FwZUNvdW50IiwiZmlsZU5hbWUiLCJfX2V4cHJlc3MiLCJ0cnlTdGF0Iiwic3RhdFN5bmMiLCJyb290cyIsImZpbGUiLCJpc0ZpbGUiLCJ3ZWJwYWNrRW1wdHlDb250ZXh0IiwidG9BcnJheUJ1ZmZlciIsInByZWZlckJpbmFyeSIsInVzZUZldGNoIiwiZGVjaWRlTW9kZSIsIl9mZXRjaFRpbWVyIiwiX29uRmluaXNoIiwibG93ZXJOYW1lIiwidW5zYWZlSGVhZGVycyIsImhlYWRlcnNPYmoiLCJoZWFkZXJzTGlzdCIsImtleU5hbWUiLCJzaWduYWwiLCJjb250cm9sbGVyIiwiX2ZldGNoQWJvcnRDb250cm9sbGVyIiwicmVxdWVzdFRpbWVvdXQiLCJjcmVkZW50aWFscyIsIndpdGhDcmVkZW50aWFscyIsIl9jb25uZWN0Iiwib250aW1lb3V0Iiwic2V0UmVxdWVzdEhlYWRlciIsIl9yZXNwb25zZSIsInN0YXR1c1ZhbGlkIiwiZmx1c2hIZWFkZXJzIiwic2V0Tm9EZWxheSIsInNldFNvY2tldEtlZXBBbGl2ZSIsImFycmF5Q29weSIsIlJlYWRTdHJlYW0iLCJvbk9wZW5DbG9zZSIsImZkIiwiZGVzdHJveVJlYWRTdHJlYW0iLCJTaGEiLCJyb3RsMzAiLCJmdCIsIlNoYTEiLCJyb3RsNSIsIlNoYTIyNCIsIlNoYTM4NCIsIlpFUk9fQlVGIiwic3VidGxlIiwidG9Ccm93c2VyIiwiY2hlY2tzIiwiYnJvd3NlclBia2RmMiIsImltcG9ydEtleSIsImRlcml2ZUJpdHMiLCJyZXNvbHZlUHJvbWlzZSIsInByb20iLCJjaGVja05hdGl2ZSIsInJlc3AiLCJhZXNNb2RlcyIsImRlc01vZGVzIiwiZWJ0ayIsInN1aXRlIiwiZGVzIiwiaW5zdGFudGlhdGUiLCJFREUiLCJtb2RlTmFtZSIsIl9kZXMiLCJkZXMzIiwiQ0JDU3RhdGUiLCJfY2JjSW5pdCIsIl9jYmNTdGF0ZSIsInN1cGVyUHJvdG8iLCJFREVTdGF0ZSIsImszIiwiX2VkZVN0YXRlIiwiTU9ERVMiLCJBdXRoQ2lwaGVyIiwiU3BsaXR0ZXIiLCJfYXV0b3BhZGRpbmciLCJ0aGluZyIsIlBBRERJTkciLCJzZXRUbyIsInBhZEJ1ZmYiLCJlbmNyeXB0U3RhcnQiLCJlbmNyeXB0Qnl0ZSIsImJ5dGVQYXJhbSIsInNoaWZ0SW4iLCJaRVJPRVMiLCJmcm9tQXJyYXkiLCJfbXVsdGlwbHkiLCJsc2JWaSIsIlZpIiwiWmkiLCJhYmwiLCJfbGFzdCIsInBhZGRlZCIsInVucGFkIiwiYXV0b1BhZGRpbmciLCJESCIsIkVOQ09ESU5HUyIsImdlbmVyYXRvciIsImdlbmMiLCJnZW5lcmF0ZVByaW1lIiwiU0VWRU4iLCJzZXRQdWJsaWNLZXkiLCJwdWIiLCJfcHViIiwic2V0UHJpdmF0ZUtleSIsIl9wcml2IiwicHJpbWVDYWNoZSIsIm1hbGxlYWJsZSIsInNldEdlbmVyYXRvciIsIl9fcHJpbWUiLCJfcHJpbWVMZW4iLCJfcHJpbWVDb2RlIiwiZm9ybWF0UmV0dXJuVmFsdWUiLCJjaGVja1ByaW1lIiwiX19nZW4iLCJnZW5lcmF0ZUtleXMiLCJfZ2VuIiwiZ2V0UHVibGljS2V5IiwiY29tcHV0ZVNlY3JldCIsIm90aGVyIiwic2VjcmV0IiwiZ2V0UHJpbWUiLCJmcm9udCIsImdldFByaXZhdGVLZXkiLCJnZXRHZW5lcmF0b3IiLCJhbGdvcml0aG1zIiwiX2hhc2hUeXBlIiwiX3RhZyIsIl9zaWduVHlwZSIsInNpZyIsIkVDIiwiZ2V0S2V5IiwiaGxlbiIsImhiaXRzIiwiYml0czJpbnQiLCJiaXRzMm9jdGV0cyIsIm9iaXRzIiwibWFrZUtleSIsImt2IiwibWFrZVIiLCJoYXNoVHlwZSIsInNpZ25UeXBlIiwiY3VydmVJZCIsImtleUZyb21Qcml2YXRlIiwidG9ERVIiLCJlY1NpZ24iLCJkc2FTaWduIiwiU2hvcnRDdXJ2ZSIsInRpbnYiLCJ6ZXJvQSIsInRocmVlQSIsImVuZG8iLCJfZ2V0RW5kb21vcnBoaXNtIiwiX2VuZG9XbmFmVDEiLCJfZW5kb1duYWZUMiIsIlBvaW50IiwiaXNSZWQiLCJpbmYiLCJKUG9pbnQiLCJ6T25lIiwiYmV0YXMiLCJfZ2V0RW5kb1Jvb3RzIiwibGFtYmRhcyIsInZlYyIsIl9nZXRFbmRvQmFzaXMiLCJudGludiIsInByZXZSIiwiYXByeFNxcnQiLCJ5MSIsInkyIiwibGVuMSIsIl9lbmRvU3BsaXQiLCJ2MSIsInYyIiwicDEiLCJwMiIsInExIiwicTIiLCJheCIsInJocyIsIl9lbmRvV25hZk11bEFkZCIsIm5wb2ludHMiLCJuY29lZmZzIiwiZnJvbUpTT04iLCJlbmRvTXVsIiwib2JqMnBvaW50IiwibngiLCJueSIsInlzMSIsImR5aW52IiwibXVsQWRkIiwiam11bEFkZCIsIl9wcmVjb21wdXRlIiwibmVnYXRlIiwiemludiIsInppbnYyIiwiYXkiLCJwejIiLCJ6MiIsImgyIiwiaDMiLCJueiIsImp4IiwiankiLCJqeiIsImp6NCIsImp5ZCIsImp4MiIsImp5ZDIiLCJqeWQ0IiwiZG55IiwiX3plcm9EYmwiLCJfdGhyZWVEYmwiLCJfZGJsIiwieHgiLCJ5eSIsInl5eXkiLCJ5eXl5OCIsImM4IiwiZ2FtbWEiLCJhbHBoYSIsImJldGE0IiwiYmV0YTgiLCJnZ2FtbWE4IiwiankyIiwianhkNCIsImp5ZDgiLCJ0cnBsIiwienoiLCJtbSIsInl5dTQiLCJrYmFzZSIsInozIiwicHozIiwiZXFYVG9QIiwienMiLCJ4YyIsIk1vbnRDdXJ2ZSIsImk0IiwiYTI0IiwiYWEiLCJiYiIsImRpZmZBZGQiLCJkYSIsImp1bWxBZGQiLCJFZHdhcmRzQ3VydmUiLCJ0d2lzdGVkIiwibU9uZUEiLCJkZCIsIm9uZUMiLCJfbXVsQSIsIl9tdWxDIiwibGhzIiwicG9pbnRGcm9tWSIsIl9leHREYmwiLCJudCIsIl9wcm9qRGJsIiwiX2V4dEFkZCIsIl9wcm9qQWRkIiwiemkiLCJzaGExX0siLCJTSEExIiwiU0hBMjI0IiwiU0hBMzg0IiwiS2giLCJFIiwiQWgiLCJCaCIsIkRoIiwiRWgiLCJyaCIsInNoIiwiaW5uZXIiLCJvdXRlciIsIkhtYWNEUkJHIiwiS2V5UGFpciIsIlNpZ25hdHVyZSIsIm5oIiwia2V5UGFpciIsImZyb21Qcml2YXRlIiwia2V5RnJvbVB1YmxpYyIsImZyb21QdWJsaWMiLCJnZW5LZXlQYWlyIiwiZHJiZyIsInBlcnMiLCJwZXJzRW5jIiwiZW50cm9weSIsImVudHJvcHlFbmMiLCJub25jZSIsIm5zMiIsIl90cnVuY2F0ZVRvTiIsInRydW5jT25seSIsImdldFByaXZhdGUiLCJuczEiLCJpdGVyIiwia3AiLCJrcFgiLCJyZWNvdmVyeVBhcmFtIiwiY2Fub25pY2FsIiwic2ludiIsImdldFB1YmxpYyIsInJlY292ZXJQdWJLZXkiLCJpc1lPZGQiLCJpc1NlY29uZEtleSIsInJJbnYiLCJnZXRLZXlSZWNvdmVyeVBhcmFtIiwiUSIsIlFwcmltZSIsInByZWRSZXNpc3QiLCJtaW5FbnRyb3B5IiwiX3Jlc2VlZCIsInJlc2VlZEludGVydmFsIiwiViIsIm5vbmNlRW5jIiwiX2htYWMiLCJrbWFjIiwicmVzZWVkIiwiYWRkRW5jIiwidGVtcCIsIl9pbXBvcnRQcml2YXRlIiwicHJpdkVuYyIsIl9pbXBvcnRQdWJsaWMiLCJwdWJFbmMiLCJkZXJpdmUiLCJfaW1wb3J0REVSIiwiUG9zaXRpb24iLCJwbGFjZSIsImdldExlbmd0aCIsImluaXRpYWwiLCJvY3RldExlbiIsInJtUGFkZGluZyIsImNvbnN0cnVjdExlbmd0aCIsIm9jdGV0cyIsInNsZW4iLCJiYWNrSGFsZiIsIkVERFNBIiwicG9pbnRDbGFzcyIsImVuY29kaW5nTGVuZ3RoIiwia2V5RnJvbVNlY3JldCIsImhhc2hJbnQiLCJSZW5jb2RlZCIsImVuY29kZVBvaW50Iiwic18iLCJwdWJCeXRlcyIsIlMiLCJtYWtlU2lnbmF0dXJlIiwiU0ciLCJmcm9tU2VjcmV0IiwibGFzdEl4Iiwibm9ybWVkIiwieElzT2RkIiwiZW5jb2RlSW50IiwiZGVjb2RlSW50IiwiaXNQb2ludCIsIl9zZWNyZXQiLCJfcHViQnl0ZXMiLCJwcml2Qnl0ZXMiLCJnZXRTZWNyZXQiLCJfUiIsIl9TIiwiX1JlbmNvZGVkIiwiX1NlbmNvZGVkIiwiU2VuY29kZWQiLCJ0b0J5dGVzIiwiaW50IiwiQWxnb3JpdGhtSWRlbnRpZmllciIsImJpdHN0ciIsIm51bGxfIiwiUHJpdmF0ZUtleUluZm8iLCJvY3RzdHIiLCJFbmNyeXB0ZWRQcml2YXRlS2V5SW5mbyIsImV4cGxpY2l0IiwiRUNQYXJhbWV0ZXJzIiwiY2hvaWNlIiwibmFtZWRDdXJ2ZSIsIkVudGl0eSIsIl9jcmVhdGVOYW1lZCIsIm5hbWVkIiwicnVuSW5UaGlzQ29udGV4dCIsIl9pbml0TmFtZWQiLCJPYmplY3Rfa2V5cyIsImRlZmluZVByb3AiLCJnbG9iYWxzIiwiQ29udGV4dCIsIlNjcmlwdCIsInJ1bkluQ29udGV4dCIsImlmcmFtZSIsImRpc3BsYXkiLCJ3aW4iLCJjb250ZW50V2luZG93Iiwid0V2YWwiLCJldmFsIiwid0V4ZWNTY3JpcHQiLCJleGVjU2NyaXB0Iiwid2luS2V5cyIsInJ1bkluTmV3Q29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJpc0NvbnRleHQiLCJjcmVhdGVTY3JpcHQiLCJSZXBvcnRlckVycm9yIiwicmV0aHJvdyIsInBhdGhMZW4iLCJlbnRlcktleSIsImV4aXRLZXkiLCJsZWF2ZUtleSIsImVudGVyT2JqZWN0IiwibGVhdmVPYmplY3QiLCJub3ciLCJpbmhlcml0ZWQiLCJlbGVtIiwid3JhcFJlc3VsdCIsInRhZ3MiLCJyZXZlcnNlQXJncyIsInVzZURlY29kZXIiLCJpbXBsaWNpdCIsImNvbnRhaW5zIiwiX3dyYXAiLCJzdGF0ZVByb3BzIiwiY3N0YXRlIiwiX3VzZUFyZ3MiLCJkZWYiLCJuZXdLZXkiLCJwcmV2T2JqIiwicHJlc2VudCIsInByZXZLZXkiLCJfZGVjb2RlR2VuZXJpYyIsIl9kZWNvZGVDaG9pY2UiLCJ0cmFjayIsIl9nZXRVc2UiLCJzb21lIiwiX2VuY29kZUNob2ljZSIsIl9lbmNvZGVQcmltaXRpdmUiLCIzIiwicGVtIiwiUEVNRGVjb2RlciIsImxpbmVzIiwibGFiZWwiLCJQRU1FbmNvZGVyIiwiYXNuIiwiVGltZSIsInV0Y1RpbWUiLCJ1dGN0aW1lIiwiZ2VuZXJhbFRpbWUiLCJnZW50aW1lIiwiQXR0cmlidXRlVHlwZVZhbHVlIiwiU3ViamVjdFB1YmxpY0tleUluZm8iLCJSZWxhdGl2ZURpc3Rpbmd1aXNoZWROYW1lIiwic2V0b2YiLCJSRE5TZXF1ZW5jZSIsInNlcW9mIiwiTmFtZSIsInJkblNlcXVlbmNlIiwiVmFsaWRpdHkiLCJFeHRlbnNpb24iLCJib29sIiwiVEJTQ2VydGlmaWNhdGUiLCJYNTA5Q2VydGlmaWNhdGUiLCJmaW5kUHJvYyIsInN0YXJ0UmVnZXgiLCJmdWxsUmVnZXgiLCJldnAiLCJva2V5IiwiZGVjcnlwdGVkIiwiY2lwaGVyS2V5IiwibWF0Y2gyIiwiY2hlY2tWYWx1ZSIsInB1YmtleSIsImVjVmVyaWZ5IiwidW5wYWNrZWQiLCJtb250cCIsImRzYVZlcmlmeSIsInBhZE51bSIsIkVDREgiLCJhbGlhc2VzIiwic2VjcDI1NmsxIiwic2VjcDIyNHIxIiwicHJpbWUyNTZ2MSIsInByaW1lMTkydjEiLCJlZDI1NTE5Iiwic2VjcDM4NHIxIiwic2VjcDUyMXIxIiwiY3VydmVUeXBlIiwicDI1NiIsInNlY3AyNTZyMSIsInNlY3AxOTJyMSIsInAzODQiLCJwNTIxIiwiaW5lbmMiLCJtZ2YiLCJ3aXRoUHVibGljIiwicHVibGljS2V5IiwicmV2ZXJzZSIsImlIYXNoIiwiaExlbjIiLCJwcyIsImRibGVuIiwibWFza2VkRGIiLCJtYXNrZWRTZWVkIiwib2FlcCIsIm5vblplcm8iLCJwa2NzMSIsInpCdWZmZXIiLCJkaWYiLCJvbGRCcm93c2VyIiwic2FmZUJ1ZmZlciIsInJhbmRvbWJ5dGVzIiwia0J1ZmZlck1heExlbmd0aCIsImtNYXhVaW50MzIiLCJhc3NlcnRPZmZzZXQiLCJhY3R1YWxGaWxsIiwib3VyQnVmIiwidWludCIsIk1pbWUiLCJERUJVR19NSU1FIiwiX2xvYWRpbmciLCJyZWFkRmlsZVN5bmMiLCJmaWVsZHMiLCJkZWZhdWx0X3R5cGUiLCJtc0FicyIsImlzUGx1cmFsIiwiZm10TG9uZyIsInByb3h5QWRkcnMiLCJjb25uZWN0aW9uIiwicmVtb3RlQWRkcmVzcyIsImV4cGFuZElQdjYiLCJpcHY0UGFydCIsImlwdjRSZWdleGVzIiwiaXB2NlBhcnQiLCJpcHY2UmVnZXhlcyIsIm1hdGNoQ0lEUiIsInBhcnRTaXplIiwiY2lkckJpdHMiLCJzdWJuZXRNYXRjaCIsImFkZHJlc3MiLCJyYW5nZUxpc3QiLCJkZWZhdWx0TmFtZSIsInJhbmdlTmFtZSIsIklQdjQiLCJvY3RldCIsInRvTm9ybWFsaXplZFN0cmluZyIsImNpZHJSYW5nZSIsIlNwZWNpYWxSYW5nZXMiLCJ1bnNwZWNpZmllZCIsImJyb2FkY2FzdCIsIm11bHRpY2FzdCIsImxpbmtMb2NhbCIsImNhcnJpZXJHcmFkZU5hdCIsInJlc2VydmVkIiwiSVB2NiIsImNpZHIiLCJ6ZXJvdGFibGUiLCIxMjgiLCIxOTIiLCIyMjQiLCIyNDAiLCIyNDgiLCIyNTIiLCIyNTQiLCIyNTUiLCJmb3VyT2N0ZXQiLCJsb25nVmFsdWUiLCJwYXJzZUludEF1dG8iLCJ6b25lSWQiLCJ0b1JGQzU5NTJTdHJpbmciLCJiZXN0TWF0Y2hJbmRleCIsImJlc3RNYXRjaExlbmd0aCIsInRvRml4ZWRMZW5ndGhTdHJpbmciLCJwYWRTdGFydCIsInVuaXF1ZUxvY2FsIiwiaXB2NE1hcHBlZCIsInJmYzYxNDUiLCJyZmM2MDUyIiwidGVyZWRvIiwiMzI3NjgiLCI0OTE1MiIsIjU3MzQ0IiwiNjE0NDAiLCI2MzQ4OCIsIjY0NTEyIiwiNjUwMjQiLCI2NTI4MCIsIjY1NDA4IiwiNjU0NzIiLCI2NTUwNCIsIjY1NTIwIiwiNjU1MjgiLCI2NTUzMiIsIjY1NTM0IiwiNjU1MzUiLCJ6b25lSW5kZXgiLCJ0cmFuc2l0aW9uYWwiLCJjb2xvbkNvdW50IiwibGFzdENvbG9uIiwicmVwbGFjZW1lbnQiLCJyZXBsYWNlbWVudENvdW50IiwiaXNJUHY0IiwiaXNJUHY2IiwiZXJyb3IxIiwiaXNWYWxpZEZvdXJQYXJ0RGVjaW1hbCIsInBhcnNlQ0lEUiIsIm1hc2tMZW5ndGgiLCJzdWJuZXRNYXNrRnJvbVByZWZpeExlbmd0aCIsImZpbGxlZE9jdGV0Q291bnQiLCJicm9hZGNhc3RBZGRyZXNzRnJvbUNJRFIiLCJpcEludGVyZmFjZU9jdGV0cyIsInN1Ym5ldE1hc2tPY3RldHMiLCJuZXR3b3JrQWRkcmVzc0Zyb21DSURSIiwiYWNjZXB0cyIsImlzSVAiLCJkZWZpbmVHZXR0ZXIiLCJyZWZlcnJlciIsInJlZmVyZXIiLCJhY2NlcHQiLCJhY2NlcHRzRW5jb2RpbmdzIiwiYWNjZXB0c0VuY29kaW5nIiwiYWNjZXB0c0NoYXJzZXRzIiwiYWNjZXB0c0NoYXJzZXQiLCJhY2NlcHRzTGFuZ3VhZ2VzIiwibGFuZ3VhZ2VzIiwiYWNjZXB0c0xhbmd1YWdlIiwiZGVmYXVsdFZhbHVlIiwiZW5jcnlwdGVkIiwic3ViZG9tYWlucyIsInRyaW1SaWdodCIsIk5lZ290aWF0b3IiLCJBY2NlcHRzIiwibmVnb3RpYXRvciIsImV4dFRvTWltZSIsInZhbGlkTWltZSIsIm1lZGlhVHlwZXMiLCJtaW1lcyIsImVuY29kaW5nc18iLCJjaGFyc2V0c18iLCJsYW5nIiwibGFuZ3MiLCJsYW5ndWFnZSIsImxhbmd1YWdlc18iLCJsb2FkTW9kdWxlIiwibW9kdWxlTmFtZSIsImF2YWlsYWJsZSIsInByZWZlcnJlZENoYXJzZXRzIiwicHJlZmVycmVkRW5jb2RpbmdzIiwicHJlZmVycmVkTGFuZ3VhZ2VzIiwibWVkaWFUeXBlIiwicHJlZmVycmVkTWVkaWFUeXBlcyIsInByZWZlcnJlZENoYXJzZXQiLCJwcmVmZXJyZWRFbmNvZGluZyIsInByZWZlcnJlZExhbmd1YWdlIiwicHJlZmVycmVkTWVkaWFUeXBlIiwic2ltcGxlQ2hhcnNldFJlZ0V4cCIsInBhcnNlQ2hhcnNldCIsInNwZWNpZnkiLCJzcGVjIiwicHJvdmlkZWQiLCJwYXJzZUFjY2VwdENoYXJzZXQiLCJpc1F1YWxpdHkiLCJjb21wYXJlU3BlY3MiLCJnZXRGdWxsQ2hhcnNldCIsInByaW9yaXRpZXMiLCJhY2NlcHRlZCIsInByaW9yaXR5IiwiZ2V0Q2hhcnNldFByaW9yaXR5Iiwic2ltcGxlRW5jb2RpbmdSZWdFeHAiLCJwYXJzZUVuY29kaW5nIiwiaGFzSWRlbnRpdHkiLCJtaW5RdWFsaXR5IiwicGFyc2VBY2NlcHRFbmNvZGluZyIsImdldEZ1bGxFbmNvZGluZyIsImdldEVuY29kaW5nUHJpb3JpdHkiLCJzaW1wbGVMYW5ndWFnZVJlZ0V4cCIsInBhcnNlTGFuZ3VhZ2UiLCJmdWxsIiwicGFyc2VBY2NlcHRMYW5ndWFnZSIsImdldEZ1bGxMYW5ndWFnZSIsImdldExhbmd1YWdlUHJpb3JpdHkiLCJzaW1wbGVNZWRpYVR5cGVSZWdFeHAiLCJwYXJzZUFjY2VwdCIsInF1b3RlQ291bnQiLCJzcGxpdE1lZGlhVHlwZXMiLCJwYXJzZU1lZGlhVHlwZSIsImt2cHMiLCJzcGxpdFBhcmFtZXRlcnMiLCJzcGxpdEtleVZhbHVlUGFpciIsInBhaXIiLCJnZXRGdWxsVHlwZSIsImdldE1lZGlhVHlwZVByaW9yaXR5IiwiY29va2llIiwidmFyeSIsIlNlcnZlclJlc3BvbnNlIiwiY2hhcnNldFJlZ0V4cCIsInNlbmRmaWxlIiwic3RyZWFtaW5nIiwib25hYm9ydGVkIiwicmVwbGFjZXIiLCJzcGFjZXMiLCJsaW5rcyIsImxpbmsiLCJldGFnRm4iLCJnZW5lcmF0ZUVUYWciLCJqc29ucCIsInNlbmRTdGF0dXMiLCJzeXNjYWxsIiwiZG93bmxvYWQiLCJmdWxsUGF0aCIsImN0IiwiZGVmYXVsdCIsImF0dGFjaG1lbnQiLCJhcHBlbmQiLCJmaWVsZCIsImNsZWFyQ29va2llIiwiZXhwaXJlcyIsInNpZ25lZCIsInNlcmlhbGl6ZSIsInVuc2lnbiIsIm9wdCIsInBhaXJzIiwicGFpclNwbGl0UmVnRXhwIiwiZGVjIiwiZXFfaWR4IiwidHJ5RGVjb2RlIiwiZmllbGRDb250ZW50UmVnRXhwIiwiZG9tYWluIiwiaHR0cE9ubHkiLCJzZWN1cmUiLCJzYW1lU2l0ZSIsIkZJRUxEX05BTUVfUkVHRVhQIiwiZmxkIiwiZmFsbHRocm91Z2giLCJvbkRpcmVjdG9yeSIsImZvcndhcmRFcnJvciJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxP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LEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUNuRCxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUNsRCxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUNuRCxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxJQUdoREMsRUFBSyxDQUNQLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQ2xELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQ25ELEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQ2xELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQ2xELEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLElBR2hEQyxFQUFLLENBQ1AsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFDckQsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEdB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QUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQ3BELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQ2pELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBRXBELEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQ25ELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQ25ELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQ3BELEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBRWpELEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQ3BELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQ2xELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQ25ELEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBRWxELEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQ25ELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQ25ELEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQ2xELEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBRWxELEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQ25ELEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQ2xELEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQ3BELEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBRWpELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQ25ELEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQ25ELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQ2xELEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJ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QUFRLFFBQ1IsTUFBUyxvSUFFWCxRQUFXLGNBQ1gsT0FBVSxjQUNWLFlBQWUsQ0FDYixLQUFRLFFBQ1IsTUFBUyxvSUFFWCxRQUFXLGNBQ1gsT0FBVSxjQUNWLFlBQWUsQ0FDYixLQUFRLFFBQ1IsTUFBUyxvSUFFWCxRQUFXLGNBQ1gsT0FBVSxjQUNWLFlBQWUsQ0FDYixLQUFRLFFBQ1IsTUFBUyxvSUFFWCxRQUFXLGNBQ1gsT0FBVSxjQUNWLFlBQWUsQ0FDYixLQUFRLFFBQ1IsTUFBUyxvSUFFWCxRQUFXLGNBQ1gsT0FBVSxjQUNWLFlBQWUsQ0FDYixLQUFRLFFBQ1IsTUFBUyxvSUFFWCxRQUFXLGNBQ1gsT0FBVSxjQUNWLFNBQVksQ0FDVixLQUFRLFFBQ1IsTUFBUyxvSUFFWCxRQUFXLFdBQ1gsU0FBWSxDQUNWLEtBQVEsUUFDUixNQUFTLG9JQUVYLFFBQVcsV0FDWCxTQUFZLENBQ1YsS0FBUSxRQUNSLE1BQVMsb0lBRVgsUUFBVyxXQUNYLFNBQVksQ0FDVixLQUFRLFFBQ1IsTUFBUyxvSUFFWCxRQUFXLFdBQ1gsU0FBWSxDQUNWLEtBQVEsUUFDUixNQUFTLG9JQUVYLFFBQVcsV0FDWCxTQUFZLENBQ1YsS0FBUSxRQUNSLE1BQVMsb0lBRVgsUUFBVyxXQUNYLFNBQVksQ0FDVixLQUFRLFFBQ1IsTUFBUyxvSUFFWCxRQUFXLFdBQ1gsU0FBWSxDQUNWLEtBQVEsUUFDUixNQUFTLG9JQUVYLFFBQVcsV0FDWCxTQUFZLENBQ1YsS0FBUSxRQUNSLE1BQVMsb0lBRVgsUUFBVyxXQUNYLFVBQWEsQ0FDWCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxRQUFXLFlBQ1gsVUFBYSxDQUNYLEtBQVEsUUFDUixNQUFTLG9JQUVYLFFBQVcsWUFDWCxVQUFhLENBQ1gsS0FBUSxRQUNSLE1BQVMsb0lBRVgsUUFBVyxZQUNYLFVBQWEsQ0FDWCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxRQUFXLFlBQ1gsVUFBYSxDQUNYLEtBQVEsUUFDUixNQUFTLG9JQUVYLFFBQVcsWUFDWCxVQUFhLENBQ1gsS0FBUSxRQUNSLE1BQVMsb0lBRVgsUUFBVyxZQUNYLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxPQUFVLFFBQ1YsU0FBWSxRQUNaLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxPQUFVLFFBQ1YsU0FBWSxRQUNaLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxPQUFVLFFBQ1YsU0FBWSxRQUNaLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxPQUFVLFFBQ1YsU0FBWSxRQUNaLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxPQUFVLFFBQ1YsU0FBWSxRQUNaLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxPQUFVLFFBQ1YsU0FBWSxRQUNaLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxPQUFVLFFBQ1YsU0FBWSxRQUNaLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxPQUFVLFFBQ1YsU0FBWSxRQUNaLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxPQUFVLFFBQ1YsU0FBWSxRQUNaLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxPQUFVLFFBQ1YsU0FBWSxRQUNaLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxPQUFVLFFBQ1YsU0FBWSxRQUNaLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxPQUFVLFFBQ1YsU0FBWSxRQUNaLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxPQUFVLFFBQ1YsU0FBWSxRQUNaLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFBUyw2UUFFWCxPQUFVLFFBQ1YsU0FBWSxRQUNaLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxPQUFVLFFBQ1YsU0FBWSxRQUNaLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxPQUFVLFFBQ1YsU0FBWSxRQUNaLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFBUyxvSUFFWCxPQUFVLFFBQ1YsU0FBWSxRQUNaLE1BQVMsQ0FDUCxLQUFRLFFBQ1IsTUFB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RyxFQUFHLEdBQ2xELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQ2xELEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLElBR2hEejlHLEVBQUksQ0FDTixHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUNyRCxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUNwRCxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUNyRCxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUNwRCxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUduRDA5RyxFQUFLLENBQ1AsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFDckQsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FDcEQsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFDckQsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxH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QUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esa0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGtFQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0Usa0VBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLHNFQUlONW9CLElBQUssQ0FDSGQsSUFBSyxFQUNMMHBCLE9BQVEsQ0FDTixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGtFQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0Usa0VBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxrRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxrRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGlFQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGtFQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1F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MTJGLEVBQU9qekIsR0FBRyxTQUFTLFNBQWdCcWIsSUFDN0JzdUcsR0FBa0J0dUcsRUFBSTJXLFdBQWEsSUFLdkNyYixJQUpFQSxFQUFLMEUsTUFRVDRYLEVBQU8vTSxLQUFLbHZCLEtBaEdoQnpKLEVBQU9ELFFBQVFrMkIsS0FBTyt5QixFQUFLL3lCLE8iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTMyKTtcbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEJ1ZmZlci5wcm90b3R5cGUpXG5cbi8vIENvcHkgc3RhdGljIG1ldGhvZHMgZnJvbSBCdWZmZXJcbmNvcHlQcm9wcyhCdWZmZXIsIFNhZmVCdWZmZXIpXG5cblNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuZmlsbChmaWxsKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWYuZmlsbCgwKVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKHNpemUpXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVXRpbHNcbiAgZnVuY3Rpb24gYXNzZXJ0ICh2YWwsIG1zZykge1xuICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cblxuICAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZVxuICAvLyBhcmNoaXRlY3R1cmUgeWV0LlxuICBmdW5jdGlvbiBpbmhlcml0cyAoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge307XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIEJOXG5cbiAgZnVuY3Rpb24gQk4gKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKEJOLmlzQk4obnVtYmVyKSkge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB0aGlzLndvcmRzID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICAgIHRoaXMucmVkID0gbnVsbDtcblxuICAgIGlmIChudW1iZXIgIT09IG51bGwpIHtcbiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHtcbiAgICAgICAgZW5kaWFuID0gYmFzZTtcbiAgICAgICAgYmFzZSA9IDEwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQk47XG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0cy5CTiA9IEJOO1xuICB9XG5cbiAgQk4uQk4gPSBCTjtcbiAgQk4ud29yZFNpemUgPSAyNjtcblxuICB2YXIgQnVmZmVyO1xuICB0cnkge1xuICAgIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG5cbiAgQk4uaXNCTiA9IGZ1bmN0aW9uIGlzQk4gKG51bSkge1xuICAgIGlmIChudW0gaW5zdGFuY2VvZiBCTikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bSAhPT0gbnVsbCAmJiB0eXBlb2YgbnVtID09PSAnb2JqZWN0JyAmJlxuICAgICAgbnVtLmNvbnN0cnVjdG9yLndvcmRTaXplID09PSBCTi53b3JkU2l6ZSAmJiBBcnJheS5pc0FycmF5KG51bS53b3Jkcyk7XG4gIH07XG5cbiAgQk4ubWF4ID0gZnVuY3Rpb24gbWF4IChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPiAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ubWluID0gZnVuY3Rpb24gbWluIChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPCAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdCAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0TnVtYmVyKG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0QXJyYXkobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAnaGV4Jykge1xuICAgICAgYmFzZSA9IDE2O1xuICAgIH1cbiAgICBhc3NlcnQoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNik7XG5cbiAgICBudW1iZXIgPSBudW1iZXIudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMrL2csICcnKTtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgc3RhcnQrKztcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gMTYpIHtcbiAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24gX2luaXROdW1iZXIgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDB4NDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgbnVtYmVyICYgMHgzZmZmZmZmIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKVxuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZixcbiAgICAgICAgMVxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMztcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICAvLyBSZXZlcnNlIHRoZSBieXRlc1xuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXRBcnJheSA9IGZ1bmN0aW9uIF9pbml0QXJyYXkgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXlcbiAgICBhc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGggPT09ICdudW1iZXInKTtcbiAgICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgLSAxXSA8PCA4KSB8IChudW1iZXJbaSAtIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUhleCAoc3RyLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgPDw9IDQ7XG5cbiAgICAgIC8vICdhJyAtICdmJ1xuICAgICAgaWYgKGMgPj0gNDkgJiYgYyA8PSA1NCkge1xuICAgICAgICByIHw9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnIC0gJ0YnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcgJiYgYyA8PSAyMikge1xuICAgICAgICByIHw9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByIHw9IGMgJiAweGY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleCAobnVtYmVyLCBzdGFydCkge1xuICAgIC8vIENyZWF0ZSBwb3NzaWJseSBiaWdnZXIgYXJyYXkgdG8gZW5zdXJlIHRoYXQgaXQgZml0cyB0aGUgbnVtYmVyXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwoKG51bWJlci5sZW5ndGggLSBzdGFydCkgLyA2KTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIC8vIFNjYW4gMjQtYml0IGNodW5rcyBhbmQgYWRkIHRoZW0gdG8gdGhlIG51bWJlclxuICAgIHZhciBvZmYgPSAwO1xuICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSA2LCBqID0gMDsgaSA+PSBzdGFydDsgaSAtPSA2KSB7XG4gICAgICB3ID0gcGFyc2VIZXgobnVtYmVyLCBpLCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAvLyBOT1RFOiBgMHgzZmZmZmZgIGlzIGludGVudGlvbmFsIGhlcmUsIDI2Yml0cyBtYXggc2hpZnQgKyAyNGJpdCBoZXggbGltYlxuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgICAgb2ZmICs9IDI0O1xuICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgKyA2ICE9PSBzdGFydCkge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgc3RhcnQsIGkgKyA2KTtcbiAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlQmFzZSAoc3RyLCBzdGFydCwgZW5kLCBtdWwpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciAqPSBtdWw7XG5cbiAgICAgIC8vICdhJ1xuICAgICAgaWYgKGMgPj0gNDkpIHtcbiAgICAgICAgciArPSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3KSB7XG4gICAgICAgIHIgKz0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgKz0gYztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlQmFzZSA9IGZ1bmN0aW9uIF9wYXJzZUJhc2UgKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgICAvLyBJbml0aWFsaXplIGFzIHplcm9cbiAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuXG4gICAgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlXG4gICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7XG4gICAgICBsaW1iTGVuKys7XG4gICAgfVxuICAgIGxpbWJMZW4tLTtcbiAgICBsaW1iUG93ID0gKGxpbWJQb3cgLyBiYXNlKSB8IDA7XG5cbiAgICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjtcbiAgICB2YXIgZW5kID0gTWF0aC5taW4odG90YWwsIHRvdGFsIC0gbW9kKSArIHN0YXJ0O1xuXG4gICAgdmFyIHdvcmQgPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBsaW1iTGVuKSB7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgaSArIGxpbWJMZW4sIGJhc2UpO1xuXG4gICAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2QgIT09IDApIHtcbiAgICAgIHZhciBwb3cgPSAxO1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kOyBpKyspIHtcbiAgICAgICAgcG93ICo9IGJhc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5IChkZXN0KSB7XG4gICAgZGVzdC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXN0LndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICB9XG4gICAgZGVzdC5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gdGhpcy5uZWdhdGl2ZTtcbiAgICBkZXN0LnJlZCA9IHRoaXMucmVkO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICB2YXIgciA9IG5ldyBCTihudWxsKTtcbiAgICB0aGlzLmNvcHkocik7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9leHBhbmQgPSBmdW5jdGlvbiBfZXhwYW5kIChzaXplKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3RyaXAgPSBmdW5jdGlvbiBzdHJpcCAoKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoID4gMSAmJiB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24gKCkge1xuICAgIC8vIC0wID0gMFxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICByZXR1cm4gKHRoaXMucmVkID8gJzxCTi1SOiAnIDogJzxCTjogJykgKyB0aGlzLnRvU3RyaW5nKDE2KSArICc+JztcbiAgfTtcblxuICAvKlxuXG4gIHZhciB6ZXJvcyA9IFtdO1xuICB2YXIgZ3JvdXBTaXplcyA9IFtdO1xuICB2YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG4gIHZhciBzID0gJyc7XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICAgIHplcm9zW2ldID0gcztcbiAgICBzICs9ICcwJztcbiAgfVxuICBncm91cFNpemVzWzBdID0gMDtcbiAgZ3JvdXBTaXplc1sxXSA9IDA7XG4gIGdyb3VwQmFzZXNbMF0gPSAwO1xuICBncm91cEJhc2VzWzFdID0gMDtcbiAgdmFyIGJhc2UgPSAyIC0gMTtcbiAgd2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICAgIHZhciBncm91cFNpemUgPSAwO1xuICAgIHZhciBncm91cEJhc2UgPSAxO1xuICAgIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgICBncm91cEJhc2UgKj0gYmFzZTtcbiAgICAgIGdyb3VwU2l6ZSArPSAxO1xuICAgIH1cbiAgICBncm91cFNpemVzW2Jhc2VdID0gZ3JvdXBTaXplO1xuICAgIGdyb3VwQmFzZXNbYmFzZV0gPSBncm91cEJhc2U7XG4gIH1cblxuICAqL1xuXG4gIHZhciB6ZXJvcyA9IFtcbiAgICAnJyxcbiAgICAnMCcsXG4gICAgJzAwJyxcbiAgICAnMDAwJyxcbiAgICAnMDAwMCcsXG4gICAgJzAwMDAwJyxcbiAgICAnMDAwMDAwJyxcbiAgICAnMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAgXTtcblxuICB2YXIgZ3JvdXBTaXplcyA9IFtcbiAgICAwLCAwLFxuICAgIDI1LCAxNiwgMTIsIDExLCAxMCwgOSwgOCxcbiAgICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICAgIDYsIDYsIDYsIDYsIDYsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1XG4gIF07XG5cbiAgdmFyIGdyb3VwQmFzZXMgPSBbXG4gICAgMCwgMCxcbiAgICAzMzU1NDQzMiwgNDMwNDY3MjEsIDE2Nzc3MjE2LCA0ODgyODEyNSwgNjA0NjYxNzYsIDQwMzUzNjA3LCAxNjc3NzIxNixcbiAgICA0MzA0NjcyMSwgMTAwMDAwMDAsIDE5NDg3MTcxLCAzNTgzMTgwOCwgNjI3NDg1MTcsIDc1Mjk1MzYsIDExMzkwNjI1LFxuICAgIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgICA2NDM2MzQzLCA3OTYyNjI0LCA5NzY1NjI1LCAxMTg4MTM3NiwgMTQzNDg5MDcsIDE3MjEwMzY4LCAyMDUxMTE0OSxcbiAgICAyNDMwMDAwMCwgMjg2MjkxNTEsIDMzNTU0NDMyLCAzOTEzNTM5MywgNDU0MzU0MjQsIDUyNTIxODc1LCA2MDQ2NjE3NlxuICBdO1xuXG4gIEJOLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChiYXNlLCBwYWRkaW5nKSB7XG4gICAgYmFzZSA9IGJhc2UgfHwgMTA7XG4gICAgcGFkZGluZyA9IHBhZGRpbmcgfCAwIHx8IDE7XG5cbiAgICB2YXIgb3V0O1xuICAgIGlmIChiYXNlID09PSAxNiB8fCBiYXNlID09PSAnaGV4Jykge1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgb2ZmID0gMDtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICAgIGNhcnJ5ID0gKHcgPj4+ICgyNCAtIG9mZikpICYgMHhmZmZmZmY7XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICAgIG9mZiArPSAyO1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KSB7XG4gICAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgICAgdmFyIGdyb3VwU2l6ZSA9IGdyb3VwU2l6ZXNbYmFzZV07XG4gICAgICAvLyB2YXIgZ3JvdXBCYXNlID0gTWF0aC5wb3coYmFzZSwgZ3JvdXBTaXplKTtcbiAgICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGMubmVnYXRpdmUgPSAwO1xuICAgICAgd2hpbGUgKCFjLmlzWmVybygpKSB7XG4gICAgICAgIHZhciByID0gYy5tb2RuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7XG4gICAgICAgIGMgPSBjLmlkaXZuKGdyb3VwQmFzZSk7XG5cbiAgICAgICAgaWYgKCFjLmlzWmVybygpKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSByICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIgKCkge1xuICAgIHZhciByZXQgPSB0aGlzLndvcmRzWzBdO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMyAmJiB0aGlzLndvcmRzWzJdID09PSAweDAxKSB7XG4gICAgICAvLyBOT1RFOiBhdCB0aGlzIHN0YWdlIGl0IGlzIGtub3duIHRoYXQgdGhlIHRvcCBiaXQgaXMgc2V0XG4gICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArICh0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgPyAtcmV0IDogcmV0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlciAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpO1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEJ1ZmZlciwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShBcnJheSwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5TGlrZSA9IGZ1bmN0aW9uIHRvQXJyYXlMaWtlIChBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0aGlzLmJ5dGVMZW5ndGgoKTtcbiAgICB2YXIgcmVxTGVuZ3RoID0gbGVuZ3RoIHx8IE1hdGgubWF4KDEsIGJ5dGVMZW5ndGgpO1xuICAgIGFzc2VydChieXRlTGVuZ3RoIDw9IHJlcUxlbmd0aCwgJ2J5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGgnKTtcbiAgICBhc3NlcnQocmVxTGVuZ3RoID4gMCwgJ1JlcXVlc3RlZCBhcnJheSBsZW5ndGggPD0gMCcpO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuICAgIHZhciBsaXR0bGVFbmRpYW4gPSBlbmRpYW4gPT09ICdsZSc7XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheVR5cGUocmVxTGVuZ3RoKTtcblxuICAgIHZhciBiLCBpO1xuICAgIHZhciBxID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmICghbGl0dGxlRW5kaWFuKSB7XG4gICAgICAvLyBBc3N1bWUgYmlnLWVuZGlhblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJlcUxlbmd0aCAtIGJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbcmVxTGVuZ3RoIC0gaSAtIDFdID0gYjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW2ldID0gYjtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGkgPCByZXFMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgaWYgKE1hdGguY2x6MzIpIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHJldHVybiAzMiAtIE1hdGguY2x6MzIodyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHZhciB0ID0gdztcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgICByICs9IDEzO1xuICAgICAgICB0ID4+Pj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDQwKSB7XG4gICAgICAgIHIgKz0gNztcbiAgICAgICAgdCA+Pj49IDc7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDgpIHtcbiAgICAgICAgciArPSA0O1xuICAgICAgICB0ID4+Pj0gNDtcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgICAgciArPSAyO1xuICAgICAgICB0ID4+Pj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICsgdDtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl96ZXJvQml0cyA9IGZ1bmN0aW9uIF96ZXJvQml0cyAodykge1xuICAgIC8vIFNob3J0LWN1dFxuICAgIGlmICh3ID09PSAwKSByZXR1cm4gMjY7XG5cbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHtcbiAgICAgIHIgKz0gMTM7XG4gICAgICB0ID4+Pj0gMTM7XG4gICAgfVxuICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7XG4gICAgICByICs9IDc7XG4gICAgICB0ID4+Pj0gNztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MykgPT09IDApIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7XG4gICAgICByKys7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIC8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbiAgQk4ucHJvdG90eXBlLmJpdExlbmd0aCA9IGZ1bmN0aW9uIGJpdExlbmd0aCAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpO1xuICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9CaXRBcnJheSAobnVtKSB7XG4gICAgdmFyIHcgPSBuZXcgQXJyYXkobnVtLmJpdExlbmd0aCgpKTtcblxuICAgIGZvciAodmFyIGJpdCA9IDA7IGJpdCA8IHcubGVuZ3RoOyBiaXQrKykge1xuICAgICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgICAgd1tiaXRdID0gKG51bS53b3Jkc1tvZmZdICYgKDEgPDwgd2JpdCkpID4+PiB3Yml0O1xuICAgIH1cblxuICAgIHJldHVybiB3O1xuICB9XG5cbiAgLy8gTnVtYmVyIG9mIHRyYWlsaW5nIHplcm8gYml0c1xuICBCTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cyAoKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiAwO1xuXG4gICAgdmFyIHIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGIgPSB0aGlzLl96ZXJvQml0cyh0aGlzLndvcmRzW2ldKTtcbiAgICAgIHIgKz0gYjtcbiAgICAgIGlmIChiICE9PSAyNikgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gYnl0ZUxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpIC8gOCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvVHdvcyA9IGZ1bmN0aW9uIHRvVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzKCkuaW5vdG4od2lkdGgpLmlhZGRuKDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tVHdvcyA9IGZ1bmN0aW9uIGZyb21Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLnRlc3RuKHdpZHRoIC0gMSkpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNOZWcgPSBmdW5jdGlvbiBpc05lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgIT09IDA7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5lZyA9IGZ1bmN0aW9uIGluZWcgKCkge1xuICAgIGlmICghdGhpcy5pc1plcm8oKSkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdW9yID0gZnVuY3Rpb24gaXVvciAobnVtKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldIHwgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVvcihudW0pO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVvciA9IGZ1bmN0aW9uIHVvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdWFuZCA9IGZ1bmN0aW9uIGl1YW5kIChudW0pIHtcbiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpXG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSAmIG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFuZCA9IGZ1bmN0aW9uIGlhbmQgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1YW5kKG51bSk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYW5kKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51YW5kID0gZnVuY3Rpb24gdWFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdWFuZCh0aGlzKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1eG9yID0gZnVuY3Rpb24gaXV4b3IgKG51bSkge1xuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYTtcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldIF4gYi53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcyAhPT0gYSkge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5peG9yID0gZnVuY3Rpb24gaXhvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXV4b3IobnVtKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnV4b3IgPSBmdW5jdGlvbiB1eG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1eG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1eG9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIE5vdCBgYHRoaXNgYCB3aXRoIGBgd2lkdGhgYCBiaXR3aWR0aFxuICBCTi5wcm90b3R5cGUuaW5vdG4gPSBmdW5jdGlvbiBpbm90biAod2lkdGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyAmJiB3aWR0aCA+PSAwKTtcblxuICAgIHZhciBieXRlc05lZWRlZCA9IE1hdGguY2VpbCh3aWR0aCAvIDI2KSB8IDA7XG4gICAgdmFyIGJpdHNMZWZ0ID0gd2lkdGggJSAyNjtcblxuICAgIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHdpdGggbGVhZGluZyB6ZXJvZXNcbiAgICB0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpO1xuXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgYnl0ZXNOZWVkZWQtLTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgY29tcGxldGUgd29yZHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIHJlc2lkdWVcbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAoMHgzZmZmZmZmID4+ICgyNiAtIGJpdHNMZWZ0KSk7XG4gICAgfVxuXG4gICAgLy8gQW5kIHJlbW92ZSBsZWFkaW5nIHplcm9lc1xuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuICh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5vdG4od2lkdGgpO1xuICB9O1xuXG4gIC8vIFNldCBgYml0YCBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNldG4gPSBmdW5jdGlvbiBzZXRuIChiaXQsIHZhbCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG5cbiAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgIHRoaXMuX2V4cGFuZChvZmYgKyAxKTtcblxuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSB8ICgxIDw8IHdiaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAobnVtKSB7XG4gICAgdmFyIHI7XG5cbiAgICAvLyBuZWdhdGl2ZSArIHBvc2l0aXZlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gcG9zaXRpdmUgKyBuZWdhdGl2ZVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhLCBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAvLyBDb3B5IHRoZSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIH0gZWxzZSBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAobnVtKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwICYmIHRoaXMubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSB0aGlzLnN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSBpZiAobnVtLm5lZ2F0aXZlID09PSAwICYmIHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gbnVtLnN1Yih0aGlzKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtcblxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAobnVtKSB7XG4gICAgLy8gdGhpcyAtICgtbnVtKSA9IHRoaXMgKyBudW1cbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgdmFyIHIgPSB0aGlzLmlhZGQobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcblxuICAgIC8vIC10aGlzIC0gbnVtID0gLSh0aGlzICsgbnVtKVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGQobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlXG4gICAgdmFyIGNtcCA9IHRoaXMuY21wKG51bSk7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24gLSB6ZXJvaWZ5XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGEgPiBiXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGNtcCA+IDApIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSAtIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSk7XG5cbiAgICBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbWFsbE11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgdmFyIGxlbiA9IChzZWxmLmxlbmd0aCArIG51bS5sZW5ndGgpIHwgMDtcbiAgICBvdXQubGVuZ3RoID0gbGVuO1xuICAgIGxlbiA9IChsZW4gLSAxKSB8IDA7XG5cbiAgICAvLyBQZWVsIG9uZSBpdGVyYXRpb24gKGNvbXBpbGVyIGNhbid0IGRvIGl0LCBiZWNhdXNlIG9mIGNvZGUgY29tcGxleGl0eSlcbiAgICB2YXIgYSA9IHNlbGYud29yZHNbMF0gfCAwO1xuICAgIHZhciBiID0gbnVtLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgY2FycnkgPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIG91dC53b3Jkc1swXSA9IGxvO1xuXG4gICAgZm9yICh2YXIgayA9IDE7IGsgPCBsZW47IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBjYXJyeSA+Pj4gMjY7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IChrIC0gaikgfCAwO1xuICAgICAgICBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICByID0gYSAqIGIgKyByd29yZDtcbiAgICAgICAgbmNhcnJ5ICs9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkIHwgMDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5IHwgMDtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICAvLyBUT0RPKGluZHV0bnkpOiBpdCBtYXkgYmUgcmVhc29uYWJsZSB0byBvbWl0IGl0IGZvciB1c2VycyB3aG8gZG9uJ3QgbmVlZFxuICAvLyB0byB3b3JrIHdpdGggMjU2LWJpdCBudW1iZXJzLCBvdGhlcndpc2UgaXQgZ2l2ZXMgMjAlIGltcHJvdmVtZW50IGZvciAyNTYtYml0XG4gIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuXG4gIHZhciBjb21iMTBNdWxUbyA9IGZ1bmN0aW9uIGNvbWIxME11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBhID0gc2VsZi53b3JkcztcbiAgICB2YXIgYiA9IG51bS53b3JkcztcbiAgICB2YXIgbyA9IG91dC53b3JkcztcbiAgICB2YXIgYyA9IDA7XG4gICAgdmFyIGxvO1xuICAgIHZhciBtaWQ7XG4gICAgdmFyIGhpO1xuICAgIHZhciBhMCA9IGFbMF0gfCAwO1xuICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjtcbiAgICB2YXIgYWgwID0gYTAgPj4+IDEzO1xuICAgIHZhciBhMSA9IGFbMV0gfCAwO1xuICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjtcbiAgICB2YXIgYWgxID0gYTEgPj4+IDEzO1xuICAgIHZhciBhMiA9IGFbMl0gfCAwO1xuICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjtcbiAgICB2YXIgYWgyID0gYTIgPj4+IDEzO1xuICAgIHZhciBhMyA9IGFbM10gfCAwO1xuICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjtcbiAgICB2YXIgYWgzID0gYTMgPj4+IDEzO1xuICAgIHZhciBhNCA9IGFbNF0gfCAwO1xuICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjtcbiAgICB2YXIgYWg0ID0gYTQgPj4+IDEzO1xuICAgIHZhciBhNSA9IGFbNV0gfCAwO1xuICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjtcbiAgICB2YXIgYWg1ID0gYTUgPj4+IDEzO1xuICAgIHZhciBhNiA9IGFbNl0gfCAwO1xuICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjtcbiAgICB2YXIgYWg2ID0gYTYgPj4+IDEzO1xuICAgIHZhciBhNyA9IGFbN10gfCAwO1xuICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjtcbiAgICB2YXIgYWg3ID0gYTcgPj4+IDEzO1xuICAgIHZhciBhOCA9IGFbOF0gfCAwO1xuICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjtcbiAgICB2YXIgYWg4ID0gYTggPj4+IDEzO1xuICAgIHZhciBhOSA9IGFbOV0gfCAwO1xuICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjtcbiAgICB2YXIgYWg5ID0gYTkgPj4+IDEzO1xuICAgIHZhciBiMCA9IGJbMF0gfCAwO1xuICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjtcbiAgICB2YXIgYmgwID0gYjAgPj4+IDEzO1xuICAgIHZhciBiMSA9IGJbMV0gfCAwO1xuICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjtcbiAgICB2YXIgYmgxID0gYjEgPj4+IDEzO1xuICAgIHZhciBiMiA9IGJbMl0gfCAwO1xuICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjtcbiAgICB2YXIgYmgyID0gYjIgPj4+IDEzO1xuICAgIHZhciBiMyA9IGJbM10gfCAwO1xuICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjtcbiAgICB2YXIgYmgzID0gYjMgPj4+IDEzO1xuICAgIHZhciBiNCA9IGJbNF0gfCAwO1xuICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjtcbiAgICB2YXIgYmg0ID0gYjQgPj4+IDEzO1xuICAgIHZhciBiNSA9IGJbNV0gfCAwO1xuICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjtcbiAgICB2YXIgYmg1ID0gYjUgPj4+IDEzO1xuICAgIHZhciBiNiA9IGJbNl0gfCAwO1xuICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjtcbiAgICB2YXIgYmg2ID0gYjYgPj4+IDEzO1xuICAgIHZhciBiNyA9IGJbN10gfCAwO1xuICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjtcbiAgICB2YXIgYmg3ID0gYjcgPj4+IDEzO1xuICAgIHZhciBiOCA9IGJbOF0gfCAwO1xuICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjtcbiAgICB2YXIgYmg4ID0gYjggPj4+IDEzO1xuICAgIHZhciBiOSA9IGJbOV0gfCAwO1xuICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjtcbiAgICB2YXIgYmg5ID0gYjkgPj4+IDEzO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0gc2VsZi5uZWdhdGl2ZSBeIG51bS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gMTk7XG4gICAgLyogayA9IDAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMCwgYmgwKTtcbiAgICB2YXIgdzAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcwID4+PiAyNikpIHwgMDtcbiAgICB3MCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDEsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpKSB8IDA7XG4gICAgdmFyIHcxID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MSA+Pj4gMjYpKSB8IDA7XG4gICAgdzEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwyLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDIsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMikpIHwgMDtcbiAgICB2YXIgdzIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcyID4+PiAyNikpIHwgMDtcbiAgICB3MiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMykpIHwgMDtcbiAgICB2YXIgdzMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHczID4+PiAyNikpIHwgMDtcbiAgICB3MyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDQsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpKSB8IDA7XG4gICAgdmFyIHc0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NCA+Pj4gMjYpKSB8IDA7XG4gICAgdzQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw1LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDUsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNSkpIHwgMDtcbiAgICB2YXIgdzUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc1ID4+PiAyNikpIHwgMDtcbiAgICB3NSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNikpIHwgMDtcbiAgICB2YXIgdzYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc2ID4+PiAyNikpIHwgMDtcbiAgICB3NiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDcsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpKSB8IDA7XG4gICAgdmFyIHc3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NyA+Pj4gMjYpKSB8IDA7XG4gICAgdzcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw4LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDgsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOCkpIHwgMDtcbiAgICB2YXIgdzggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc4ID4+PiAyNikpIHwgMDtcbiAgICB3OCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDkgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzkgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc5ID4+PiAyNikpIHwgMDtcbiAgICB3OSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDEpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTAgPj4+IDI2KSkgfCAwO1xuICAgIHcxMCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDExICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDIpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMSA+Pj4gMjYpKSB8IDA7XG4gICAgdzExICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgzKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgzKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTIgPj4+IDI2KSkgfCAwO1xuICAgIHcxMiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDQpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEzID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTMgPj4+IDI2KSkgfCAwO1xuICAgIHcxMyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDUpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg2KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg2KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTUgPj4+IDI2KSkgfCAwO1xuICAgIHcxNSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDcpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTYgPj4+IDI2KSkgfCAwO1xuICAgIHcxNiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDgpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNyA+Pj4gMjYpKSB8IDA7XG4gICAgdzE3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg5KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg5KTtcbiAgICB2YXIgdzE4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTggPj4+IDI2KSkgfCAwO1xuICAgIHcxOCAmPSAweDNmZmZmZmY7XG4gICAgb1swXSA9IHcwO1xuICAgIG9bMV0gPSB3MTtcbiAgICBvWzJdID0gdzI7XG4gICAgb1szXSA9IHczO1xuICAgIG9bNF0gPSB3NDtcbiAgICBvWzVdID0gdzU7XG4gICAgb1s2XSA9IHc2O1xuICAgIG9bN10gPSB3NztcbiAgICBvWzhdID0gdzg7XG4gICAgb1s5XSA9IHc5O1xuICAgIG9bMTBdID0gdzEwO1xuICAgIG9bMTFdID0gdzExO1xuICAgIG9bMTJdID0gdzEyO1xuICAgIG9bMTNdID0gdzEzO1xuICAgIG9bMTRdID0gdzE0O1xuICAgIG9bMTVdID0gdzE1O1xuICAgIG9bMTZdID0gdzE2O1xuICAgIG9bMTddID0gdzE3O1xuICAgIG9bMThdID0gdzE4O1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICBvWzE5XSA9IGM7XG4gICAgICBvdXQubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgLy8gUG9seWZpbGwgY29tYlxuICBpZiAoIU1hdGguaW11bCkge1xuICAgIGNvbWIxME11bFRvID0gc21hbGxNdWxUbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpZ011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgdmFyIGhuY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5O1xuICAgICAgaG5jYXJyeSA9IDA7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgICB2YXIgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArICgociAvIDB4NDAwMDAwMCkgfCAwKSkgfCAwO1xuICAgICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAobG8gPj4+IDI2KSkgfCAwO1xuXG4gICAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgICAgbmNhcnJ5ICY9IDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgICAgY2FycnkgPSBuY2Fycnk7XG4gICAgICBuY2FycnkgPSBobmNhcnJ5O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24ganVtYm9NdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgZmZ0bSA9IG5ldyBGRlRNKCk7XG4gICAgcmV0dXJuIGZmdG0ubXVscChzZWxmLCBudW0sIG91dCk7XG4gIH1cblxuICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyAobnVtLCBvdXQpIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkge1xuICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgNjMpIHtcbiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkge1xuICAgICAgcmVzID0gYmlnTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvb2xleS1UdWtleSBhbGdvcml0aG0gZm9yIEZGVFxuICAvLyBzbGlnaHRseSByZXZpc2l0ZWQgdG8gcmVseSBvbiBsb29waW5nIGluc3RlYWQgb2YgcmVjdXJzaW9uXG5cbiAgZnVuY3Rpb24gRkZUTSAoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUIChOKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGBcbiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluICh4LCBsLCBOKSB7XG4gICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTiAtIDEpIHJldHVybiB4O1xuXG4gICAgdmFyIHJiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcmIgfD0gKHggJiAxKSA8PCAobCAtIGkgLSAxKTtcbiAgICAgIHggPj49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJiO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1zIFwidHdlZWRsaW5nXCIgcGhhc2UsIHRoZXJlZm9yZSAnZW11bGF0aW5nJ1xuICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG1cbiAgRkZUTS5wcm90b3R5cGUucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUgKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcnR3c1tpXSA9IHJ3c1tyYnRbaV1dO1xuICAgICAgaXR3c1tpXSA9IGl3c1tyYnRbaV1dO1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0gKHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOLCByYnQpIHtcbiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7XG5cbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IE47IHMgPDw9IDEpIHtcbiAgICAgIHZhciBsID0gcyA8PCAxO1xuXG4gICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpO1xuICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTtcblxuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHtcbiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmO1xuICAgICAgICB2YXIgaXR3ZGZfID0gaXR3ZGY7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHtcbiAgICAgICAgICB2YXIgcmUgPSBydHdzW3AgKyBqXTtcbiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTtcblxuICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTtcbiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107XG5cbiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlvO1xuXG4gICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvO1xuICAgICAgICAgIHJvID0gcng7XG5cbiAgICAgICAgICBydHdzW3AgKyBqXSA9IHJlICsgcm87XG4gICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvO1xuXG4gICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybztcbiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvO1xuXG4gICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi9cbiAgICAgICAgICBpZiAoaiAhPT0gbCkge1xuICAgICAgICAgICAgcnggPSBydHdkZiAqIHJ0d2RmXyAtIGl0d2RmICogaXR3ZGZfO1xuXG4gICAgICAgICAgICBpdHdkZl8gPSBydHdkZiAqIGl0d2RmXyArIGl0d2RmICogcnR3ZGZfO1xuICAgICAgICAgICAgcnR3ZGZfID0gcng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IgKG4sIG0pIHtcbiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTtcbiAgICB2YXIgb2RkID0gTiAmIDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoTiA9IE4gLyAyIHwgMDsgTjsgTiA9IE4gPj4+IDEpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUgKHJ3cywgaXdzLCBOKSB7XG4gICAgaWYgKE4gPD0gMSkgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHJ3c1tpXTtcblxuICAgICAgcndzW2ldID0gcndzW04gLSBpIC0gMV07XG4gICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7XG5cbiAgICAgIHQgPSBpd3NbaV07XG5cbiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTtcbiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm5vcm1hbGl6ZTEzYiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZTEzYiAod3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHcgPSBNYXRoLnJvdW5kKHdzWzIgKiBpICsgMV0gLyBOKSAqIDB4MjAwMCArXG4gICAgICAgIE1hdGgucm91bmQod3NbMiAqIGldIC8gTikgK1xuICAgICAgICBjYXJyeTtcblxuICAgICAgd3NbaV0gPSB3ICYgMHgzZmZmZmZmO1xuXG4gICAgICBpZiAodyA8IDB4NDAwMDAwMCkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cztcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiID0gZnVuY3Rpb24gY29udmVydDEzYiAod3MsIGxlbiwgcndzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYXJyeSA9IGNhcnJ5ICsgKHdzW2ldIHwgMCk7XG5cbiAgICAgIHJ3c1syICogaV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICB9XG5cbiAgICAvLyBQYWQgd2l0aCB6ZXJvZXNcbiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7XG4gICAgICByd3NbaV0gPSAwO1xuICAgIH1cblxuICAgIGFzc2VydChjYXJyeSA9PT0gMCk7XG4gICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YiAoTikge1xuICAgIHZhciBwaCA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcGhbaV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwaDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCAoeCwgeSwgb3V0KSB7XG4gICAgdmFyIE4gPSAyICogdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuXG4gICAgdmFyIHJidCA9IHRoaXMubWFrZVJCVChOKTtcblxuICAgIHZhciBfID0gdGhpcy5zdHViKE4pO1xuXG4gICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBucndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgcm13cyA9IG91dC53b3JkcztcbiAgICBybXdzLmxlbmd0aCA9IE47XG5cbiAgICB0aGlzLmNvbnZlcnQxM2IoeC53b3JkcywgeC5sZW5ndGgsIHJ3cywgTik7XG4gICAgdGhpcy5jb252ZXJ0MTNiKHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTtcblxuICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTtcbiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldO1xuICAgICAgaXdzdFtpXSA9IHJ3c3RbaV0gKiBuaXdzdFtpXSArIGl3c3RbaV0gKiBucndzdFtpXTtcbiAgICAgIHJ3c3RbaV0gPSByeDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTtcbiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpO1xuICAgIHRoaXMuY29uanVnYXRlKHJtd3MsIF8sIE4pO1xuICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7XG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGB0aGlzYCBieSBgbnVtYFxuICBCTi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLm11bFRvKG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBlbXBsb3lpbmcgRkZUXG4gIEJOLnByb3RvdHlwZS5tdWxmID0gZnVuY3Rpb24gbXVsZiAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb25cbiAgQk4ucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm11bFRvKG51bSwgdGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmltdWxuID0gZnVuY3Rpb24gaW11bG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG5cbiAgICAvLyBDYXJyeVxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKiBudW07XG4gICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpO1xuICAgICAgY2FycnkgPj49IDI2O1xuICAgICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIC8vIE5PVEU6IGxvIGlzIDI3Yml0IG1heGltdW1cbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm11bG4gPSBmdW5jdGlvbiBtdWxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKG51bSk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLm11bCh0aGlzKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSk7XG4gIH07XG5cbiAgLy8gTWF0aC5wb3coYHRoaXNgLCBgbnVtYClcbiAgQk4ucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAobnVtKSB7XG4gICAgdmFyIHcgPSB0b0JpdEFycmF5KG51bSk7XG4gICAgaWYgKHcubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IEJOKDEpO1xuXG4gICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lc1xuICAgIHZhciByZXMgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdy5sZW5ndGg7IGkrKywgcmVzID0gcmVzLnNxcigpKSB7XG4gICAgICBpZiAod1tpXSAhPT0gMCkgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCsraSA8IHcubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBxID0gcmVzLnNxcigpOyBpIDwgdy5sZW5ndGg7IGkrKywgcSA9IHEuc3FyKCkpIHtcbiAgICAgICAgaWYgKHdbaV0gPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHJlcy5tdWwocSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0IGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXNobG4gPSBmdW5jdGlvbiBpdXNobG4gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG4gICAgdmFyIGNhcnJ5TWFzayA9ICgweDNmZmZmZmYgPj4+ICgyNiAtIHIpKSA8PCAoMjYgLSByKTtcbiAgICB2YXIgaTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbmV3Q2FycnkgPSB0aGlzLndvcmRzW2ldICYgY2FycnlNYXNrO1xuICAgICAgICB2YXIgYyA9ICgodGhpcy53b3Jkc1tpXSB8IDApIC0gbmV3Q2FycnkpIDw8IHI7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7XG4gICAgICAgIGNhcnJ5ID0gbmV3Q2FycnkgPj4+ICgyNiAtIHIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FycnkpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgICB0aGlzLmxlbmd0aCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzICE9PSAwKSB7XG4gICAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIHNdID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggKz0gcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuIChiaXRzKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodCBpbi1wbGFjZVxuICAvLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbiAgLy8gTk9URTogaWYgYGV4dGVuZGVkYCBpcyBwcmVzZW50IC0gaXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBkZXN0cm95ZWQgYml0c1xuICBCTi5wcm90b3R5cGUuaXVzaHJuID0gZnVuY3Rpb24gaXVzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgaDtcbiAgICBpZiAoaGludCkge1xuICAgICAgaCA9IChoaW50IC0gKGhpbnQgJSAyNikpIC8gMjY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSAwO1xuICAgIH1cblxuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgdmFyIG1hc2tlZFdvcmRzID0gZXh0ZW5kZWQ7XG5cbiAgICBoIC09IHM7XG4gICAgaCA9IE1hdGgubWF4KDAsIGgpO1xuXG4gICAgLy8gRXh0ZW5kZWQgbW9kZSwgY29weSBtYXNrZWQgcGFydFxuICAgIGlmIChtYXNrZWRXb3Jkcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuICAgICAgbWFza2VkV29yZHMubGVuZ3RoID0gcztcbiAgICB9XG5cbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgLy8gTm8tb3AsIHdlIHNob3VsZCBub3QgbW92ZSBhbnl0aGluZyBhdCBhbGxcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gcykge1xuICAgICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2kgKyBzXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiAoY2FycnkgIT09IDAgfHwgaSA+PSBoKTsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgICBjYXJyeSA9IHdvcmQgJiBtYXNrO1xuICAgIH1cblxuICAgIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICAgIGlmIChtYXNrZWRXb3JkcyAmJiBjYXJyeSAhPT0gMCkge1xuICAgICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnRcbiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNobG4gPSBmdW5jdGlvbiB1c2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0XG4gIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaHJuID0gZnVuY3Rpb24gdXNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKTtcbiAgfTtcblxuICAvLyBUZXN0IGlmIG4gYml0IGlzIHNldFxuICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0biAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBiaXQgYW5kIHJldHVyblxuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICAgIHJldHVybiAhISh3ICYgcSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAnaW1hc2tuIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZSBudW1iZXJzJyk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlclxuICBCTi5wcm90b3R5cGUubWFza24gPSBmdW5jdGlvbiBtYXNrbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpO1xuICB9O1xuXG4gIC8vIEFkZCBwbGFpbiBudW1iZXIgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pYWRkbiA9IGZ1bmN0aW9uIGlhZGRuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pc3VibigtbnVtKTtcblxuICAgIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiAodGhpcy53b3Jkc1swXSB8IDApIDwgbnVtKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pc3VibihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aG91dCBjaGVja3NcbiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuIChudW0pIHtcbiAgICB0aGlzLndvcmRzWzBdICs9IG51bTtcblxuICAgIC8vIENhcnJ5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldIC09IDB4NDAwMDAwMDtcbiAgICAgIGlmIChpID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0rKztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZG4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy53b3Jkc1swXSAtPSBudW07XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXJyeVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldIDwgMDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuc3RyaXAoKTtcblxuICAgIC8vIFN1YnRyYWN0aW9uIG92ZXJmbG93XG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAtMSk7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gLSh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICB0aGlzLm5lZ2F0aXZlID0gMTtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl93b3JkRGl2ID0gZnVuY3Rpb24gX3dvcmREaXYgKG51bSwgbW9kZSkge1xuICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtO1xuXG4gICAgLy8gTm9ybWFsaXplXG4gICAgdmFyIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTtcbiAgICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgICBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTtcbiAgICAgIGEuaXVzaGxuKHNoaWZ0KTtcbiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICB2YXIgcTtcblxuICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgcSA9IG5ldyBCTihudWxsKTtcbiAgICAgIHEubGVuZ3RoID0gbSArIDE7XG4gICAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxLndvcmRzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7XG4gICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIGEgPSBkaWZmO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1ttXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgdmFyIHFqID0gKGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICtcbiAgICAgICAgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTtcblxuICAgICAgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXhcbiAgICAgIC8vICgweDdmZmZmZmYpXG4gICAgICBxaiA9IE1hdGgubWluKChxaiAvIGJoaSkgfCAwLCAweDNmZmZmZmYpO1xuXG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCBxaiwgaik7XG4gICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBxai0tO1xuICAgICAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgYS5faXNobG5zdWJtdWwoYiwgMSwgaik7XG4gICAgICAgIGlmICghYS5pc1plcm8oKSkge1xuICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocSkge1xuICAgICAgcS5zdHJpcCgpO1xuICAgIH1cbiAgICBhLnN0cmlwKCk7XG5cbiAgICAvLyBEZW5vcm1hbGl6ZVxuICAgIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMCkge1xuICAgICAgYS5pdXNocm4oc2hpZnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXY6IHEgfHwgbnVsbCxcbiAgICAgIG1vZDogYVxuICAgIH07XG4gIH07XG5cbiAgLy8gTk9URTogMSkgYG1vZGVgIGNhbiBiZSBzZXQgdG8gYG1vZGAgdG8gcmVxdWVzdCBtb2Qgb25seSxcbiAgLy8gICAgICAgdG8gYGRpdmAgdG8gcmVxdWVzdCBkaXYgb25seSwgb3IgYmUgYWJzZW50IHRvXG4gIC8vICAgICAgIHJlcXVlc3QgYm90aCBkaXYgJiBtb2RcbiAgLy8gICAgICAgMikgYHBvc2l0aXZlYCBpcyB0cnVlIGlmIHVuc2lnbmVkIG1vZCBpcyByZXF1ZXN0ZWRcbiAgQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZCAobnVtLCBtb2RlLCBwb3NpdGl2ZSkge1xuICAgIGFzc2VydCghbnVtLmlzWmVybygpKTtcblxuICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiBuZXcgQk4oMClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRpdiwgbW9kLCByZXM7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaWFkZChudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiByZXMubW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICgodGhpcy5uZWdhdGl2ZSAmIG51bS5uZWdhdGl2ZSkgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlzdWIobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHJlcy5kaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gICAgLy8gU3RyaXAgYm90aCBudW1iZXJzIHRvIGFwcHJveGltYXRlIHNoaWZ0IHZhbHVlXG4gICAgaWYgKG51bS5sZW5ndGggPiB0aGlzLmxlbmd0aCB8fCB0aGlzLmNtcChudW0pIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogdGhpc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICAgIGlmIChudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAobW9kZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICAgIG1vZDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSA9PT0gJ21vZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IG51bGwsXG4gICAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCByMiA9PT0gMSAmJiBjbXAgPT09IDApIHJldHVybiBkbS5kaXY7XG5cbiAgICAvLyBSb3VuZCB1cFxuICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICAgIGNhcnJ5ID0gdyAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgIG51bSA9IC1udW07XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmLCAnTnVtYmVyIGlzIHRvbyBiaWcnKTtcblxuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdIHwgMDtcbiAgICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29tcGFyZSB0d28gbnVtYmVycyBhbmQgcmV0dXJuOlxuICAvLyAxIC0gaWYgYHRoaXNgID4gYG51bWBcbiAgLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuICAvLyAtMSAtIGlmIGB0aGlzYCA8IGBudW1gXG4gIEJOLnByb3RvdHlwZS5jbXAgPSBmdW5jdGlvbiBjbXAgKG51bSkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIDE7XG5cbiAgICB2YXIgcmVzID0gdGhpcy51Y21wKG51bSk7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFVuc2lnbmVkIGNvbXBhcmlzb25cbiAgQk4ucHJvdG90eXBlLnVjbXAgPSBmdW5jdGlvbiB1Y21wIChudW0pIHtcbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBoYXZlIHRoZSBzYW1lIHNpZ25cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gMTtcbiAgICBpZiAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgcmVzID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2ldIHwgMDtcblxuICAgICAgaWYgKGEgPT09IGIpIGNvbnRpbnVlO1xuICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgIHJlcyA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXMgPSAxO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0biA9IGZ1bmN0aW9uIGd0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uIGd0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlbiA9IGZ1bmN0aW9uIGd0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGUgPSBmdW5jdGlvbiBndGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0biA9IGZ1bmN0aW9uIGx0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHQgPSBmdW5jdGlvbiBsdCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGVuID0gZnVuY3Rpb24gbHRlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZSA9IGZ1bmN0aW9uIGx0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXFuID0gZnVuY3Rpb24gZXFuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAwO1xuICB9O1xuXG4gIC8vXG4gIC8vIEEgcmVkdWNlIGNvbnRleHQsIGNvdWxkIGJlIHVzaW5nIG1vbnRnb21lcnkgb3Igc29tZXRoaW5nIGJldHRlciwgZGVwZW5kaW5nXG4gIC8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuICAvL1xuICBCTi5yZWQgPSBmdW5jdGlvbiByZWQgKG51bSkge1xuICAgIHJldHVybiBuZXcgUmVkKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvUmVkID0gZnVuY3Rpb24gdG9SZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tUmVkID0gZnVuY3Rpb24gZnJvbVJlZCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAnZnJvbVJlZCB3b3JrcyBvbmx5IHdpdGggbnVtYmVycyBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2ZvcmNlUmVkID0gZnVuY3Rpb24gX2ZvcmNlUmVkIChjdHgpIHtcbiAgICB0aGlzLnJlZCA9IGN0eDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZm9yY2VSZWQgPSBmdW5jdGlvbiBmb3JjZVJlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkQWRkID0gZnVuY3Rpb24gcmVkQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJQWRkID0gZnVuY3Rpb24gcmVkSUFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSUFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTdWIgPSBmdW5jdGlvbiByZWRTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTdWIgPSBmdW5jdGlvbiByZWRJU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNobCA9IGZ1bmN0aW9uIHJlZFNobCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU2hsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkTXVsID0gZnVuY3Rpb24gcmVkTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTcXIgPSBmdW5jdGlvbiByZWRTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3FyID0gZnVuY3Rpb24gcmVkSVNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXNxcih0aGlzKTtcbiAgfTtcblxuICAvLyBTcXVhcmUgcm9vdCBvdmVyIHBcbiAgQk4ucHJvdG90eXBlLnJlZFNxcnQgPSBmdW5jdGlvbiByZWRTcXJ0ICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJbnZtID0gZnVuY3Rpb24gcmVkSW52bSAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSW52bSB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW52bSh0aGlzKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG4gIEJOLnByb3RvdHlwZS5yZWROZWcgPSBmdW5jdGlvbiByZWROZWcgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRQb3cgPSBmdW5jdGlvbiByZWRQb3cgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCAmJiAhbnVtLnJlZCwgJ3JlZFBvdyhub3JtYWxOdW0pJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnBvdyh0aGlzLCBudW0pO1xuICB9O1xuXG4gIC8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG4gIHZhciBwcmltZXMgPSB7XG4gICAgazI1NjogbnVsbCxcbiAgICBwMjI0OiBudWxsLFxuICAgIHAxOTI6IG51bGwsXG4gICAgcDI1NTE5OiBudWxsXG4gIH07XG5cbiAgLy8gUHNldWRvLU1lcnNlbm5lIHByaW1lXG4gIGZ1bmN0aW9uIE1QcmltZSAobmFtZSwgcCkge1xuICAgIC8vIFAgPSAyIF4gTiAtIEtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucCA9IG5ldyBCTihwLCAxNik7XG4gICAgdGhpcy5uID0gdGhpcy5wLmJpdExlbmd0aCgpO1xuICAgIHRoaXMuayA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5uKS5pc3ViKHRoaXMucCk7XG5cbiAgICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xuICB9XG5cbiAgTVByaW1lLnByb3RvdHlwZS5fdG1wID0gZnVuY3Rpb24gX3RtcCAoKSB7XG4gICAgdmFyIHRtcCA9IG5ldyBCTihudWxsKTtcbiAgICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gICAgcmV0dXJuIHRtcDtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlIChudW0pIHtcbiAgICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gICAgLy8gbnVtID0gSEkgKiAoMiBeIE4gLSBLKSArIEhJICogSyArIExPID0gSEkgKiBLICsgTE8gKG1vZCBQKVxuICAgIHZhciByID0gbnVtO1xuICAgIHZhciBybGVuO1xuXG4gICAgZG8ge1xuICAgICAgdGhpcy5zcGxpdChyLCB0aGlzLnRtcCk7XG4gICAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICAgIHIgPSByLmlhZGQodGhpcy50bXApO1xuICAgICAgcmxlbiA9IHIuYml0TGVuZ3RoKCk7XG4gICAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgICB2YXIgY21wID0gcmxlbiA8IHRoaXMubiA/IC0xIDogci51Y21wKHRoaXMucCk7XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgci53b3Jkc1swXSA9IDA7XG4gICAgICByLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICByLmlzdWIodGhpcy5wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgci5zdHJpcCgpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dCkge1xuICAgIGlucHV0Lml1c2hybih0aGlzLm4sIDAsIG91dCk7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICByZXR1cm4gbnVtLmltdWwodGhpcy5rKTtcbiAgfTtcblxuICBmdW5jdGlvbiBLMjU2ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnazI1NicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnKTtcbiAgfVxuICBpbmhlcml0cyhLMjU2LCBNUHJpbWUpO1xuXG4gIEsyNTYucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXRwdXQpIHtcbiAgICAvLyAyNTYgPSA5ICogMjYgKyAyMlxuICAgIHZhciBtYXNrID0gMHgzZmZmZmY7XG5cbiAgICB2YXIgb3V0TGVuID0gTWF0aC5taW4oaW5wdXQubGVuZ3RoLCA5KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dExlbjsgaSsrKSB7XG4gICAgICBvdXRwdXQud29yZHNbaV0gPSBpbnB1dC53b3Jkc1tpXTtcbiAgICB9XG4gICAgb3V0cHV0Lmxlbmd0aCA9IG91dExlbjtcblxuICAgIGlmIChpbnB1dC5sZW5ndGggPD0gOSkge1xuICAgICAgaW5wdXQud29yZHNbMF0gPSAwO1xuICAgICAgaW5wdXQubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTaGlmdCBieSA5IGxpbWJzXG4gICAgdmFyIHByZXYgPSBpbnB1dC53b3Jkc1s5XTtcbiAgICBvdXRwdXQud29yZHNbb3V0cHV0Lmxlbmd0aCsrXSA9IHByZXYgJiBtYXNrO1xuXG4gICAgZm9yIChpID0gMTA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5leHQgPSBpbnB1dC53b3Jkc1tpXSB8IDA7XG4gICAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gKChuZXh0ICYgbWFzaykgPDwgNCkgfCAocHJldiA+Pj4gMjIpO1xuICAgICAgcHJldiA9IG5leHQ7XG4gICAgfVxuICAgIHByZXYgPj4+PSAyMjtcbiAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gcHJldjtcbiAgICBpZiAocHJldiA9PT0gMCAmJiBpbnB1dC5sZW5ndGggPiAxMCkge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDEwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gOTtcbiAgICB9XG4gIH07XG5cbiAgSzI1Ni5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTAwMDAwM2QxID0gWyAweDQwLCAweDNkMSBdXG4gICAgbnVtLndvcmRzW251bS5sZW5ndGhdID0gMDtcbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aCArIDFdID0gMDtcbiAgICBudW0ubGVuZ3RoICs9IDI7XG5cbiAgICAvLyBib3VuZGVkIGF0OiAweDQwICogMHgzZmZmZmZmICsgMHgzZDAgPSAweDEwMDAwMDM5MFxuICAgIHZhciBsbyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gbnVtLndvcmRzW2ldIHwgMDtcbiAgICAgIGxvICs9IHcgKiAweDNkMTtcbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgbG8gPSB3ICogMHg0MCArICgobG8gLyAweDQwMDAwMDApIHwgMCk7XG4gICAgfVxuXG4gICAgLy8gRmFzdCBsZW5ndGggcmVkdWN0aW9uXG4gICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICBmdW5jdGlvbiBQMjI0ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDIyNCcsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnKTtcbiAgfVxuICBpbmhlcml0cyhQMjI0LCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAxOTIgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMTkyJyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicpO1xuICB9XG4gIGluaGVyaXRzKFAxOTIsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDI1NTE5ICgpIHtcbiAgICAvLyAyIF4gMjU1IC0gMTlcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnMjU1MTknLFxuICAgICAgJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnKTtcbiAgfVxuICBpbmhlcml0cyhQMjU1MTksIE1QcmltZSk7XG5cbiAgUDI1NTE5LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxM1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoaSA9IChudW0ud29yZHNbaV0gfCAwKSAqIDB4MTMgKyBjYXJyeTtcbiAgICAgIHZhciBsbyA9IGhpICYgMHgzZmZmZmZmO1xuICAgICAgaGkgPj4+PSAyNjtcblxuICAgICAgbnVtLndvcmRzW2ldID0gbG87XG4gICAgICBjYXJyeSA9IGhpO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgLy8gRXhwb3J0ZWQgbW9zdGx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB1c2UgcGxhaW4gbmFtZSBpbnN0ZWFkXG4gIEJOLl9wcmltZSA9IGZ1bmN0aW9uIHByaW1lIChuYW1lKSB7XG4gICAgLy8gQ2FjaGVkIHZlcnNpb24gb2YgcHJpbWVcbiAgICBpZiAocHJpbWVzW25hbWVdKSByZXR1cm4gcHJpbWVzW25hbWVdO1xuXG4gICAgdmFyIHByaW1lO1xuICAgIGlmIChuYW1lID09PSAnazI1NicpIHtcbiAgICAgIHByaW1lID0gbmV3IEsyNTYoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjI0Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDIyNCgpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AxOTInKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMTkyKCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDI1NTE5Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDI1NTE5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcmltZSAnICsgbmFtZSk7XG4gICAgfVxuICAgIHByaW1lc1tuYW1lXSA9IHByaW1lO1xuXG4gICAgcmV0dXJuIHByaW1lO1xuICB9O1xuXG4gIC8vXG4gIC8vIEJhc2UgcmVkdWN0aW9uIGVuZ2luZVxuICAvL1xuICBmdW5jdGlvbiBSZWQgKG0pIHtcbiAgICBpZiAodHlwZW9mIG0gPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgcHJpbWUgPSBCTi5fcHJpbWUobSk7XG4gICAgICB0aGlzLm0gPSBwcmltZS5wO1xuICAgICAgdGhpcy5wcmltZSA9IHByaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobS5ndG4oMSksICdtb2R1bHVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDEnKTtcbiAgICAgIHRoaXMubSA9IG07XG4gICAgICB0aGlzLnByaW1lID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkxID0gZnVuY3Rpb24gX3ZlcmlmeTEgKGEpIHtcbiAgICBhc3NlcnQoYS5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkLCAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTIgPSBmdW5jdGlvbiBfdmVyaWZ5MiAoYSwgYikge1xuICAgIGFzc2VydCgoYS5uZWdhdGl2ZSB8IGIubmVnYXRpdmUpID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQgJiYgYS5yZWQgPT09IGIucmVkLFxuICAgICAgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltb2QgPSBmdW5jdGlvbiBpbW9kIChhKSB7XG4gICAgaWYgKHRoaXMucHJpbWUpIHJldHVybiB0aGlzLnByaW1lLmlyZWR1Y2UoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICAgIHJldHVybiBhLnVtb2QodGhpcy5tKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tLnN1YihhKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5zdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zaGwgPSBmdW5jdGlvbiBzaGwgKGEsIG51bSkge1xuICAgIHRoaXMuX3ZlcmlmeTEoYSk7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLnVzaGxuKG51bSkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5pbXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLm11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLmltdWwoYSwgYS5jbG9uZSgpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLm11bChhLCBhKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbiBzcXJ0IChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgbW9kMyA9IHRoaXMubS5hbmRsbigzKTtcbiAgICBhc3NlcnQobW9kMyAlIDIgPT09IDEpO1xuXG4gICAgLy8gRmFzdCBjYXNlXG4gICAgaWYgKG1vZDMgPT09IDMpIHtcbiAgICAgIHZhciBwb3cgPSB0aGlzLm0uYWRkKG5ldyBCTigxKSkuaXVzaHJuKDIpO1xuICAgICAgcmV0dXJuIHRoaXMucG93KGEsIHBvdyk7XG4gICAgfVxuXG4gICAgLy8gVG9uZWxsaS1TaGFua3MgYWxnb3JpdGhtIChUb3RhbGx5IHVub3B0aW1pemVkIGFuZCBzbG93KVxuICAgIC8vXG4gICAgLy8gRmluZCBRIGFuZCBTLCB0aGF0IFEgKiAyIF4gUyA9IChQIC0gMSlcbiAgICB2YXIgcSA9IHRoaXMubS5zdWJuKDEpO1xuICAgIHZhciBzID0gMDtcbiAgICB3aGlsZSAoIXEuaXNaZXJvKCkgJiYgcS5hbmRsbigxKSA9PT0gMCkge1xuICAgICAgcysrO1xuICAgICAgcS5pdXNocm4oMSk7XG4gICAgfVxuICAgIGFzc2VydCghcS5pc1plcm8oKSk7XG5cbiAgICB2YXIgb25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHZhciBuT25lID0gb25lLnJlZE5lZygpO1xuXG4gICAgLy8gRmluZCBxdWFkcmF0aWMgbm9uLXJlc2lkdWVcbiAgICAvLyBOT1RFOiBNYXggaXMgc3VjaCBiZWNhdXNlIG9mIGdlbmVyYWxpemVkIFJpZW1hbm4gaHlwb3RoZXNpcy5cbiAgICB2YXIgbHBvdyA9IHRoaXMubS5zdWJuKDEpLml1c2hybigxKTtcbiAgICB2YXIgeiA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICB6ID0gbmV3IEJOKDIgKiB6ICogeikudG9SZWQodGhpcyk7XG5cbiAgICB3aGlsZSAodGhpcy5wb3coeiwgbHBvdykuY21wKG5PbmUpICE9PSAwKSB7XG4gICAgICB6LnJlZElBZGQobk9uZSk7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB0aGlzLnBvdyh6LCBxKTtcbiAgICB2YXIgciA9IHRoaXMucG93KGEsIHEuYWRkbigxKS5pdXNocm4oMSkpO1xuICAgIHZhciB0ID0gdGhpcy5wb3coYSwgcSk7XG4gICAgdmFyIG0gPSBzO1xuICAgIHdoaWxlICh0LmNtcChvbmUpICE9PSAwKSB7XG4gICAgICB2YXIgdG1wID0gdDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyB0bXAuY21wKG9uZSkgIT09IDA7IGkrKykge1xuICAgICAgICB0bXAgPSB0bXAucmVkU3FyKCk7XG4gICAgICB9XG4gICAgICBhc3NlcnQoaSA8IG0pO1xuICAgICAgdmFyIGIgPSB0aGlzLnBvdyhjLCBuZXcgQk4oMSkuaXVzaGxuKG0gLSBpIC0gMSkpO1xuXG4gICAgICByID0gci5yZWRNdWwoYik7XG4gICAgICBjID0gYi5yZWRTcXIoKTtcbiAgICAgIHQgPSB0LnJlZE11bChjKTtcbiAgICAgIG0gPSBpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICB2YXIgaW52ID0gYS5faW52bXAodGhpcy5tKTtcbiAgICBpZiAoaW52Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpbnYubmVnYXRpdmUgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpLnJlZE5lZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludik7XG4gICAgfVxuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChhLCBudW0pIHtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIGlmIChudW0uY21wbigxKSA9PT0gMCkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciB3aW5kb3dTaXplID0gNDtcbiAgICB2YXIgd25kID0gbmV3IEFycmF5KDEgPDwgd2luZG93U2l6ZSk7XG4gICAgd25kWzBdID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHduZFsxXSA9IGE7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCB3bmQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHduZFtpXSA9IHRoaXMubXVsKHduZFtpIC0gMV0sIGEpO1xuICAgIH1cblxuICAgIHZhciByZXMgPSB3bmRbMF07XG4gICAgdmFyIGN1cnJlbnQgPSAwO1xuICAgIHZhciBjdXJyZW50TGVuID0gMDtcbiAgICB2YXIgc3RhcnQgPSBudW0uYml0TGVuZ3RoKCkgJSAyNjtcbiAgICBpZiAoc3RhcnQgPT09IDApIHtcbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbnVtLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IG51bS53b3Jkc1tpXTtcbiAgICAgIGZvciAodmFyIGogPSBzdGFydCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgIHZhciBiaXQgPSAod29yZCA+PiBqKSAmIDE7XG4gICAgICAgIGlmIChyZXMgIT09IHduZFswXSkge1xuICAgICAgICAgIHJlcyA9IHRoaXMuc3FyKHJlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYml0ID09PSAwICYmIGN1cnJlbnQgPT09IDApIHtcbiAgICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPDw9IDE7XG4gICAgICAgIGN1cnJlbnQgfD0gYml0O1xuICAgICAgICBjdXJyZW50TGVuKys7XG4gICAgICAgIGlmIChjdXJyZW50TGVuICE9PSB3aW5kb3dTaXplICYmIChpICE9PSAwIHx8IGogIT09IDApKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSB0aGlzLm11bChyZXMsIHduZFtjdXJyZW50XSk7XG4gICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICBjdXJyZW50ID0gMDtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgdmFyIHIgPSBudW0udW1vZCh0aGlzLm0pO1xuXG4gICAgcmV0dXJuIHIgPT09IG51bSA/IHIuY2xvbmUoKSA6IHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgcmVzID0gbnVtLmNsb25lKCk7XG4gICAgcmVzLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvL1xuICAvLyBNb250Z29tZXJ5IG1ldGhvZCBlbmdpbmVcbiAgLy9cblxuICBCTi5tb250ID0gZnVuY3Rpb24gbW9udCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBNb250KG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gTW9udCAobSkge1xuICAgIFJlZC5jYWxsKHRoaXMsIG0pO1xuXG4gICAgdGhpcy5zaGlmdCA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICBpZiAodGhpcy5zaGlmdCAlIDI2ICE9PSAwKSB7XG4gICAgICB0aGlzLnNoaWZ0ICs9IDI2IC0gKHRoaXMuc2hpZnQgJSAyNik7XG4gICAgfVxuXG4gICAgdGhpcy5yID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLnNoaWZ0KTtcbiAgICB0aGlzLnIyID0gdGhpcy5pbW9kKHRoaXMuci5zcXIoKSk7XG4gICAgdGhpcy5yaW52ID0gdGhpcy5yLl9pbnZtcCh0aGlzLm0pO1xuXG4gICAgdGhpcy5taW52ID0gdGhpcy5yaW52Lm11bCh0aGlzLnIpLmlzdWJuKDEpLmRpdih0aGlzLm0pO1xuICAgIHRoaXMubWludiA9IHRoaXMubWludi51bW9kKHRoaXMucik7XG4gICAgdGhpcy5taW52ID0gdGhpcy5yLnN1Yih0aGlzLm1pbnYpO1xuICB9XG4gIGluaGVyaXRzKE1vbnQsIFJlZCk7XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5pbW9kKG51bS51c2hsbih0aGlzLnNoaWZ0KSk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHIgPSB0aGlzLmltb2QobnVtLm11bCh0aGlzLnJpbnYpKTtcbiAgICByLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSB7XG4gICAgICBhLndvcmRzWzBdID0gMDtcbiAgICAgIGEubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIHZhciB0ID0gYS5pbXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuXG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDApLl9mb3JjZVJlZCh0aGlzKTtcblxuICAgIHZhciB0ID0gYS5tdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIC8vIChBUileLTEgKiBSXjIgPSAoQV4tMSAqIFJeLTEpICogUl4yID0gQV4tMSAqIFJcbiAgICB2YXIgcmVzID0gdGhpcy5pbW9kKGEuX2ludm1wKHRoaXMubSkubXVsKHRoaXMucjIpKTtcbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcbn0pKHR5cGVvZiBtb2R1bGUgPT09ICd1bmRlZmluZWQnIHx8IG1vZHVsZSwgdGhpcyk7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGFzc2VydDtcblxuZnVuY3Rpb24gYXNzZXJ0KHZhbCwgbXNnKSB7XG4gIGlmICghdmFsKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbn1cblxuYXNzZXJ0LmVxdWFsID0gZnVuY3Rpb24gYXNzZXJ0RXF1YWwobCwgciwgbXNnKSB7XG4gIGlmIChsICE9IHIpXG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAoJ0Fzc2VydGlvbiBmYWlsZWQ6ICcgKyBsICsgJyAhPSAnICsgcikpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gZXhwb3J0cztcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgbWluQXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIG1pblV0aWxzID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWNyeXB0by11dGlscycpO1xuXG51dGlscy5hc3NlcnQgPSBtaW5Bc3NlcnQ7XG51dGlscy50b0FycmF5ID0gbWluVXRpbHMudG9BcnJheTtcbnV0aWxzLnplcm8yID0gbWluVXRpbHMuemVybzI7XG51dGlscy50b0hleCA9IG1pblV0aWxzLnRvSGV4O1xudXRpbHMuZW5jb2RlID0gbWluVXRpbHMuZW5jb2RlO1xuXG4vLyBSZXByZXNlbnQgbnVtIGluIGEgdy1OQUYgZm9ybVxuZnVuY3Rpb24gZ2V0TkFGKG51bSwgdywgYml0cykge1xuICB2YXIgbmFmID0gbmV3IEFycmF5KE1hdGgubWF4KG51bS5iaXRMZW5ndGgoKSwgYml0cykgKyAxKTtcbiAgbmFmLmZpbGwoMCk7XG5cbiAgdmFyIHdzID0gMSA8PCAodyArIDEpO1xuICB2YXIgayA9IG51bS5jbG9uZSgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbmFmLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHo7XG4gICAgdmFyIG1vZCA9IGsuYW5kbG4od3MgLSAxKTtcbiAgICBpZiAoay5pc09kZCgpKSB7XG4gICAgICBpZiAobW9kID4gKHdzID4+IDEpIC0gMSlcbiAgICAgICAgeiA9ICh3cyA+PiAxKSAtIG1vZDtcbiAgICAgIGVsc2VcbiAgICAgICAgeiA9IG1vZDtcbiAgICAgIGsuaXN1Ym4oeik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHogPSAwO1xuICAgIH1cblxuICAgIG5hZltpXSA9IHo7XG4gICAgay5pdXNocm4oMSk7XG4gIH1cblxuICByZXR1cm4gbmFmO1xufVxudXRpbHMuZ2V0TkFGID0gZ2V0TkFGO1xuXG4vLyBSZXByZXNlbnQgazEsIGsyIGluIGEgSm9pbnQgU3BhcnNlIEZvcm1cbmZ1bmN0aW9uIGdldEpTRihrMSwgazIpIHtcbiAgdmFyIGpzZiA9IFtcbiAgICBbXSxcbiAgICBbXVxuICBdO1xuXG4gIGsxID0gazEuY2xvbmUoKTtcbiAgazIgPSBrMi5jbG9uZSgpO1xuICB2YXIgZDEgPSAwO1xuICB2YXIgZDIgPSAwO1xuICB3aGlsZSAoazEuY21wbigtZDEpID4gMCB8fCBrMi5jbXBuKC1kMikgPiAwKSB7XG5cbiAgICAvLyBGaXJzdCBwaGFzZVxuICAgIHZhciBtMTQgPSAoazEuYW5kbG4oMykgKyBkMSkgJiAzO1xuICAgIHZhciBtMjQgPSAoazIuYW5kbG4oMykgKyBkMikgJiAzO1xuICAgIGlmIChtMTQgPT09IDMpXG4gICAgICBtMTQgPSAtMTtcbiAgICBpZiAobTI0ID09PSAzKVxuICAgICAgbTI0ID0gLTE7XG4gICAgdmFyIHUxO1xuICAgIGlmICgobTE0ICYgMSkgPT09IDApIHtcbiAgICAgIHUxID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG04ID0gKGsxLmFuZGxuKDcpICsgZDEpICYgNztcbiAgICAgIGlmICgobTggPT09IDMgfHwgbTggPT09IDUpICYmIG0yNCA9PT0gMilcbiAgICAgICAgdTEgPSAtbTE0O1xuICAgICAgZWxzZVxuICAgICAgICB1MSA9IG0xNDtcbiAgICB9XG4gICAganNmWzBdLnB1c2godTEpO1xuXG4gICAgdmFyIHUyO1xuICAgIGlmICgobTI0ICYgMSkgPT09IDApIHtcbiAgICAgIHUyID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG04ID0gKGsyLmFuZGxuKDcpICsgZDIpICYgNztcbiAgICAgIGlmICgobTggPT09IDMgfHwgbTggPT09IDUpICYmIG0xNCA9PT0gMilcbiAgICAgICAgdTIgPSAtbTI0O1xuICAgICAgZWxzZVxuICAgICAgICB1MiA9IG0yNDtcbiAgICB9XG4gICAganNmWzFdLnB1c2godTIpO1xuXG4gICAgLy8gU2Vjb25kIHBoYXNlXG4gICAgaWYgKDIgKiBkMSA9PT0gdTEgKyAxKVxuICAgICAgZDEgPSAxIC0gZDE7XG4gICAgaWYgKDIgKiBkMiA9PT0gdTIgKyAxKVxuICAgICAgZDIgPSAxIC0gZDI7XG4gICAgazEuaXVzaHJuKDEpO1xuICAgIGsyLml1c2hybigxKTtcbiAgfVxuXG4gIHJldHVybiBqc2Y7XG59XG51dGlscy5nZXRKU0YgPSBnZXRKU0Y7XG5cbmZ1bmN0aW9uIGNhY2hlZFByb3BlcnR5KG9iaiwgbmFtZSwgY29tcHV0ZXIpIHtcbiAgdmFyIGtleSA9ICdfJyArIG5hbWU7XG4gIG9iai5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiBjYWNoZWRQcm9wZXJ0eSgpIHtcbiAgICByZXR1cm4gdGhpc1trZXldICE9PSB1bmRlZmluZWQgPyB0aGlzW2tleV0gOlxuICAgICAgICAgICB0aGlzW2tleV0gPSBjb21wdXRlci5jYWxsKHRoaXMpO1xuICB9O1xufVxudXRpbHMuY2FjaGVkUHJvcGVydHkgPSBjYWNoZWRQcm9wZXJ0eTtcblxuZnVuY3Rpb24gcGFyc2VCeXRlcyhieXRlcykge1xuICByZXR1cm4gdHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJyA/IHV0aWxzLnRvQXJyYXkoYnl0ZXMsICdoZXgnKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZXM7XG59XG51dGlscy5wYXJzZUJ5dGVzID0gcGFyc2VCeXRlcztcblxuZnVuY3Rpb24gaW50RnJvbUxFKGJ5dGVzKSB7XG4gIHJldHVybiBuZXcgQk4oYnl0ZXMsICdoZXgnLCAnbGUnKTtcbn1cbnV0aWxzLmludEZyb21MRSA9IGludEZyb21MRTtcblxuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnbGlnaHRzZWFncmVlbicsXG4gICdmb3Jlc3RncmVlbicsXG4gICdnb2xkZW5yb2QnLFxuICAnZG9kZ2VyYmx1ZScsXG4gICdkYXJrb3JjaGlkJyxcbiAgJ2NyaW1zb24nXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgLy8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuICAvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuICAvLyBleHBsaWNpdGx5XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiB3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBpcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuICAvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuICByZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcbiAgICAvLyBpcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcbiAgICAvLyBpcyBmaXJlZm94ID49IHYzMT9cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcbiAgICAvLyBkb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbih2KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyLm1lc3NhZ2U7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcbiAgdmFyIHVzZUNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXG4gIGFyZ3NbMF0gPSAodXNlQ29sb3JzID8gJyVjJyA6ICcnKVxuICAgICsgdGhpcy5uYW1lc3BhY2VcbiAgICArICh1c2VDb2xvcnMgPyAnICVjJyA6ICcgJylcbiAgICArIGFyZ3NbMF1cbiAgICArICh1c2VDb2xvcnMgPyAnJWMgJyA6ICcgJylcbiAgICArICcrJyArIGV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuICBpZiAoIXVzZUNvbG9ycykgcmV0dXJuO1xuXG4gIHZhciBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcbiAgYXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0JylcblxuICAvLyB0aGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuICAvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG4gIC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEMgPSAwO1xuICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICBpZiAoJyUlJyA9PT0gbWF0Y2gpIHJldHVybjtcbiAgICBpbmRleCsrO1xuICAgIGlmICgnJWMnID09PSBtYXRjaCkge1xuICAgICAgLy8gd2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG4gICAgICAvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuICAgICAgbGFzdEMgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuXG4gIGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb2coKSB7XG4gIC8vIHRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG4gIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG4gIHJldHVybiAnb2JqZWN0JyA9PT0gdHlwZW9mIGNvbnNvbGVcbiAgICAmJiBjb25zb2xlLmxvZ1xuICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLmRlYnVnID0gbmFtZXNwYWNlcztcbiAgICB9XG4gIH0gY2F0Y2goZSkge31cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2FkKCkge1xuICB2YXIgcjtcbiAgdHJ5IHtcbiAgICByID0gZXhwb3J0cy5zdG9yYWdlLmRlYnVnO1xuICB9IGNhdGNoKGUpIHt9XG5cbiAgLy8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuICBpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcbiAgICByID0gcHJvY2Vzcy5lbnYuREVCVUc7XG4gIH1cblxuICByZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBFbmFibGUgbmFtZXNwYWNlcyBsaXN0ZWQgaW4gYGxvY2FsU3RvcmFnZS5kZWJ1Z2AgaW5pdGlhbGx5LlxuICovXG5cbmV4cG9ydHMuZW5hYmxlKGxvYWQoKSk7XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICB9IGNhdGNoIChlKSB7fVxufVxuIiwiLyohXG4gKiBkZXBkXG4gKiBDb3B5cmlnaHQoYykgMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZXBkXG5cbi8qKlxuICogQ3JlYXRlIGRlcHJlY2F0ZSBmb3IgbmFtZXNwYWNlIGluIGNhbGxlci5cbiAqL1xuXG5mdW5jdGlvbiBkZXBkIChuYW1lc3BhY2UpIHtcbiAgaWYgKCFuYW1lc3BhY2UpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBuYW1lc3BhY2UgaXMgcmVxdWlyZWQnKVxuICB9XG5cbiAgZnVuY3Rpb24gZGVwcmVjYXRlIChtZXNzYWdlKSB7XG4gICAgLy8gbm8tb3AgaW4gYnJvd3NlclxuICB9XG5cbiAgZGVwcmVjYXRlLl9maWxlID0gdW5kZWZpbmVkXG4gIGRlcHJlY2F0ZS5faWdub3JlZCA9IHRydWVcbiAgZGVwcmVjYXRlLl9uYW1lc3BhY2UgPSBuYW1lc3BhY2VcbiAgZGVwcmVjYXRlLl90cmFjZWQgPSBmYWxzZVxuICBkZXByZWNhdGUuX3dhcm5lZCA9IE9iamVjdC5jcmVhdGUobnVsbClcblxuICBkZXByZWNhdGUuZnVuY3Rpb24gPSB3cmFwZnVuY3Rpb25cbiAgZGVwcmVjYXRlLnByb3BlcnR5ID0gd3JhcHByb3BlcnR5XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZVxufVxuXG4vKipcbiAqIFJldHVybiBhIHdyYXBwZWQgZnVuY3Rpb24gaW4gYSBkZXByZWNhdGlvbiBtZXNzYWdlLlxuICpcbiAqIFRoaXMgaXMgYSBuby1vcCB2ZXJzaW9uIG9mIHRoZSB3cmFwcGVyLCB3aGljaCBkb2VzIG5vdGhpbmcgYnV0IGNhbGxcbiAqIHZhbGlkYXRpb24uXG4gKi9cblxuZnVuY3Rpb24gd3JhcGZ1bmN0aW9uIChmbiwgbWVzc2FnZSkge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgZm4gbXVzdCBiZSBhIGZ1bmN0aW9uJylcbiAgfVxuXG4gIHJldHVybiBmblxufVxuXG4vKipcbiAqIFdyYXAgcHJvcGVydHkgaW4gYSBkZXByZWNhdGlvbiBtZXNzYWdlLlxuICpcbiAqIFRoaXMgaXMgYSBuby1vcCB2ZXJzaW9uIG9mIHRoZSB3cmFwcGVyLCB3aGljaCBkb2VzIG5vdGhpbmcgYnV0IGNhbGxcbiAqIHZhbGlkYXRpb24uXG4gKi9cblxuZnVuY3Rpb24gd3JhcHByb3BlcnR5IChvYmosIHByb3AsIG1lc3NhZ2UpIHtcbiAgaWYgKCFvYmogfHwgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmogIT09ICdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgb2JqIG11c3QgYmUgb2JqZWN0JylcbiAgfVxuXG4gIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHByb3ApXG5cbiAgaWYgKCFkZXNjcmlwdG9yKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbXVzdCBjYWxsIHByb3BlcnR5IG9uIG93bmVyIG9iamVjdCcpXG4gIH1cblxuICBpZiAoIWRlc2NyaXB0b3IuY29uZmlndXJhYmxlKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncHJvcGVydHkgbXVzdCBiZSBjb25maWd1cmFibGUnKVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5leHBvcnRzLmluaGVyaXRzID0gaW5oZXJpdHM7XG5cbmZ1bmN0aW9uIGlzU3Vycm9nYXRlUGFpcihtc2csIGkpIHtcbiAgaWYgKChtc2cuY2hhckNvZGVBdChpKSAmIDB4RkMwMCkgIT09IDB4RDgwMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoaSA8IDAgfHwgaSArIDEgPj0gbXNnLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKG1zZy5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4RkMwMCkgPT09IDB4REMwMDtcbn1cblxuZnVuY3Rpb24gdG9BcnJheShtc2csIGVuYykge1xuICBpZiAoQXJyYXkuaXNBcnJheShtc2cpKVxuICAgIHJldHVybiBtc2cuc2xpY2UoKTtcbiAgaWYgKCFtc2cpXG4gICAgcmV0dXJuIFtdO1xuICB2YXIgcmVzID0gW107XG4gIGlmICh0eXBlb2YgbXNnID09PSAnc3RyaW5nJykge1xuICAgIGlmICghZW5jKSB7XG4gICAgICAvLyBJbnNwaXJlZCBieSBzdHJpbmdUb1V0ZjhCeXRlQXJyYXkoKSBpbiBjbG9zdXJlLWxpYnJhcnkgYnkgR29vZ2xlXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtbGlicmFyeS9ibG9iLzg1OThkODcyNDJhZjU5YWFjMjMzMjcwNzQyYzg5ODRlMmIyYmRiZTAvY2xvc3VyZS9nb29nL2NyeXB0L2NyeXB0LmpzI0wxMTctTDE0M1xuICAgICAgLy8gQXBhY2hlIExpY2Vuc2UgMi4wXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtbGlicmFyeS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gICAgICB2YXIgcCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYyA9IG1zZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoYyA8IDEyOCkge1xuICAgICAgICAgIHJlc1twKytdID0gYztcbiAgICAgICAgfSBlbHNlIGlmIChjIDwgMjA0OCkge1xuICAgICAgICAgIHJlc1twKytdID0gKGMgPj4gNikgfCAxOTI7XG4gICAgICAgICAgcmVzW3ArK10gPSAoYyAmIDYzKSB8IDEyODtcbiAgICAgICAgfSBlbHNlIGlmIChpc1N1cnJvZ2F0ZVBhaXIobXNnLCBpKSkge1xuICAgICAgICAgIGMgPSAweDEwMDAwICsgKChjICYgMHgwM0ZGKSA8PCAxMCkgKyAobXNnLmNoYXJDb2RlQXQoKytpKSAmIDB4MDNGRik7XG4gICAgICAgICAgcmVzW3ArK10gPSAoYyA+PiAxOCkgfCAyNDA7XG4gICAgICAgICAgcmVzW3ArK10gPSAoKGMgPj4gMTIpICYgNjMpIHwgMTI4O1xuICAgICAgICAgIHJlc1twKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xuICAgICAgICAgIHJlc1twKytdID0gKGMgJiA2MykgfCAxMjg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzW3ArK10gPSAoYyA+PiAxMikgfCAyMjQ7XG4gICAgICAgICAgcmVzW3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XG4gICAgICAgICAgcmVzW3ArK10gPSAoYyAmIDYzKSB8IDEyODtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5jID09PSAnaGV4Jykge1xuICAgICAgbXNnID0gbXNnLnJlcGxhY2UoL1teYS16MC05XSsvaWcsICcnKTtcbiAgICAgIGlmIChtc2cubGVuZ3RoICUgMiAhPT0gMClcbiAgICAgICAgbXNnID0gJzAnICsgbXNnO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkgKz0gMilcbiAgICAgICAgcmVzLnB1c2gocGFyc2VJbnQobXNnW2ldICsgbXNnW2kgKyAxXSwgMTYpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICAgIHJlc1tpXSA9IG1zZ1tpXSB8IDA7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMudG9BcnJheSA9IHRvQXJyYXk7XG5cbmZ1bmN0aW9uIHRvSGV4KG1zZykge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKVxuICAgIHJlcyArPSB6ZXJvMihtc2dbaV0udG9TdHJpbmcoMTYpKTtcbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMudG9IZXggPSB0b0hleDtcblxuZnVuY3Rpb24gaHRvbmwodykge1xuICB2YXIgcmVzID0gKHcgPj4+IDI0KSB8XG4gICAgICAgICAgICAoKHcgPj4+IDgpICYgMHhmZjAwKSB8XG4gICAgICAgICAgICAoKHcgPDwgOCkgJiAweGZmMDAwMCkgfFxuICAgICAgICAgICAgKCh3ICYgMHhmZikgPDwgMjQpO1xuICByZXR1cm4gcmVzID4+PiAwO1xufVxuZXhwb3J0cy5odG9ubCA9IGh0b25sO1xuXG5mdW5jdGlvbiB0b0hleDMyKG1zZywgZW5kaWFuKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdyA9IG1zZ1tpXTtcbiAgICBpZiAoZW5kaWFuID09PSAnbGl0dGxlJylcbiAgICAgIHcgPSBodG9ubCh3KTtcbiAgICByZXMgKz0gemVybzgody50b1N0cmluZygxNikpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnRvSGV4MzIgPSB0b0hleDMyO1xuXG5mdW5jdGlvbiB6ZXJvMih3b3JkKSB7XG4gIGlmICh3b3JkLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gJzAnICsgd29yZDtcbiAgZWxzZVxuICAgIHJldHVybiB3b3JkO1xufVxuZXhwb3J0cy56ZXJvMiA9IHplcm8yO1xuXG5mdW5jdGlvbiB6ZXJvOCh3b3JkKSB7XG4gIGlmICh3b3JkLmxlbmd0aCA9PT0gNylcbiAgICByZXR1cm4gJzAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDYpXG4gICAgcmV0dXJuICcwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNSlcbiAgICByZXR1cm4gJzAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNClcbiAgICByZXR1cm4gJzAwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDMpXG4gICAgcmV0dXJuICcwMDAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMilcbiAgICByZXR1cm4gJzAwMDAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gJzAwMDAwMDAnICsgd29yZDtcbiAgZWxzZVxuICAgIHJldHVybiB3b3JkO1xufVxuZXhwb3J0cy56ZXJvOCA9IHplcm84O1xuXG5mdW5jdGlvbiBqb2luMzIobXNnLCBzdGFydCwgZW5kLCBlbmRpYW4pIHtcbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0O1xuICBhc3NlcnQobGVuICUgNCA9PT0gMCk7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkobGVuIC8gNCk7XG4gIGZvciAodmFyIGkgPSAwLCBrID0gc3RhcnQ7IGkgPCByZXMubGVuZ3RoOyBpKyssIGsgKz0gNCkge1xuICAgIHZhciB3O1xuICAgIGlmIChlbmRpYW4gPT09ICdiaWcnKVxuICAgICAgdyA9IChtc2dba10gPDwgMjQpIHwgKG1zZ1trICsgMV0gPDwgMTYpIHwgKG1zZ1trICsgMl0gPDwgOCkgfCBtc2dbayArIDNdO1xuICAgIGVsc2VcbiAgICAgIHcgPSAobXNnW2sgKyAzXSA8PCAyNCkgfCAobXNnW2sgKyAyXSA8PCAxNikgfCAobXNnW2sgKyAxXSA8PCA4KSB8IG1zZ1trXTtcbiAgICByZXNbaV0gPSB3ID4+PiAwO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLmpvaW4zMiA9IGpvaW4zMjtcblxuZnVuY3Rpb24gc3BsaXQzMihtc2csIGVuZGlhbikge1xuICB2YXIgcmVzID0gbmV3IEFycmF5KG1zZy5sZW5ndGggKiA0KTtcbiAgZm9yICh2YXIgaSA9IDAsIGsgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrLCBrICs9IDQpIHtcbiAgICB2YXIgbSA9IG1zZ1tpXTtcbiAgICBpZiAoZW5kaWFuID09PSAnYmlnJykge1xuICAgICAgcmVzW2tdID0gbSA+Pj4gMjQ7XG4gICAgICByZXNbayArIDFdID0gKG0gPj4+IDE2KSAmIDB4ZmY7XG4gICAgICByZXNbayArIDJdID0gKG0gPj4+IDgpICYgMHhmZjtcbiAgICAgIHJlc1trICsgM10gPSBtICYgMHhmZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzW2sgKyAzXSA9IG0gPj4+IDI0O1xuICAgICAgcmVzW2sgKyAyXSA9IChtID4+PiAxNikgJiAweGZmO1xuICAgICAgcmVzW2sgKyAxXSA9IChtID4+PiA4KSAmIDB4ZmY7XG4gICAgICByZXNba10gPSBtICYgMHhmZjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuc3BsaXQzMiA9IHNwbGl0MzI7XG5cbmZ1bmN0aW9uIHJvdHIzMih3LCBiKSB7XG4gIHJldHVybiAodyA+Pj4gYikgfCAodyA8PCAoMzIgLSBiKSk7XG59XG5leHBvcnRzLnJvdHIzMiA9IHJvdHIzMjtcblxuZnVuY3Rpb24gcm90bDMyKHcsIGIpIHtcbiAgcmV0dXJuICh3IDw8IGIpIHwgKHcgPj4+ICgzMiAtIGIpKTtcbn1cbmV4cG9ydHMucm90bDMyID0gcm90bDMyO1xuXG5mdW5jdGlvbiBzdW0zMihhLCBiKSB7XG4gIHJldHVybiAoYSArIGIpID4+PiAwO1xufVxuZXhwb3J0cy5zdW0zMiA9IHN1bTMyO1xuXG5mdW5jdGlvbiBzdW0zMl8zKGEsIGIsIGMpIHtcbiAgcmV0dXJuIChhICsgYiArIGMpID4+PiAwO1xufVxuZXhwb3J0cy5zdW0zMl8zID0gc3VtMzJfMztcblxuZnVuY3Rpb24gc3VtMzJfNChhLCBiLCBjLCBkKSB7XG4gIHJldHVybiAoYSArIGIgKyBjICsgZCkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTMyXzQgPSBzdW0zMl80O1xuXG5mdW5jdGlvbiBzdW0zMl81KGEsIGIsIGMsIGQsIGUpIHtcbiAgcmV0dXJuIChhICsgYiArIGMgKyBkICsgZSkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTMyXzUgPSBzdW0zMl81O1xuXG5mdW5jdGlvbiBzdW02NChidWYsIHBvcywgYWgsIGFsKSB7XG4gIHZhciBiaCA9IGJ1Zltwb3NdO1xuICB2YXIgYmwgPSBidWZbcG9zICsgMV07XG5cbiAgdmFyIGxvID0gKGFsICsgYmwpID4+PiAwO1xuICB2YXIgaGkgPSAobG8gPCBhbCA/IDEgOiAwKSArIGFoICsgYmg7XG4gIGJ1Zltwb3NdID0gaGkgPj4+IDA7XG4gIGJ1Zltwb3MgKyAxXSA9IGxvO1xufVxuZXhwb3J0cy5zdW02NCA9IHN1bTY0O1xuXG5mdW5jdGlvbiBzdW02NF9oaShhaCwgYWwsIGJoLCBibCkge1xuICB2YXIgbG8gPSAoYWwgKyBibCkgPj4+IDA7XG4gIHZhciBoaSA9IChsbyA8IGFsID8gMSA6IDApICsgYWggKyBiaDtcbiAgcmV0dXJuIGhpID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF9oaSA9IHN1bTY0X2hpO1xuXG5mdW5jdGlvbiBzdW02NF9sbyhhaCwgYWwsIGJoLCBibCkge1xuICB2YXIgbG8gPSBhbCArIGJsO1xuICByZXR1cm4gbG8gPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0X2xvID0gc3VtNjRfbG87XG5cbmZ1bmN0aW9uIHN1bTY0XzRfaGkoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsKSB7XG4gIHZhciBjYXJyeSA9IDA7XG4gIHZhciBsbyA9IGFsO1xuICBsbyA9IChsbyArIGJsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBhbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGNsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBjbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGRsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBkbCA/IDEgOiAwO1xuXG4gIHZhciBoaSA9IGFoICsgYmggKyBjaCArIGRoICsgY2Fycnk7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfNF9oaSA9IHN1bTY0XzRfaGk7XG5cbmZ1bmN0aW9uIHN1bTY0XzRfbG8oYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsKSB7XG4gIHZhciBsbyA9IGFsICsgYmwgKyBjbCArIGRsO1xuICByZXR1cm4gbG8gPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzRfbG8gPSBzdW02NF80X2xvO1xuXG5mdW5jdGlvbiBzdW02NF81X2hpKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCwgZWgsIGVsKSB7XG4gIHZhciBjYXJyeSA9IDA7XG4gIHZhciBsbyA9IGFsO1xuICBsbyA9IChsbyArIGJsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBhbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGNsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBjbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGRsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBkbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGVsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBlbCA/IDEgOiAwO1xuXG4gIHZhciBoaSA9IGFoICsgYmggKyBjaCArIGRoICsgZWggKyBjYXJyeTtcbiAgcmV0dXJuIGhpID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF81X2hpID0gc3VtNjRfNV9oaTtcblxuZnVuY3Rpb24gc3VtNjRfNV9sbyhhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwsIGVoLCBlbCkge1xuICB2YXIgbG8gPSBhbCArIGJsICsgY2wgKyBkbCArIGVsO1xuXG4gIHJldHVybiBsbyA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfNV9sbyA9IHN1bTY0XzVfbG87XG5cbmZ1bmN0aW9uIHJvdHI2NF9oaShhaCwgYWwsIG51bSkge1xuICB2YXIgciA9IChhbCA8PCAoMzIgLSBudW0pKSB8IChhaCA+Pj4gbnVtKTtcbiAgcmV0dXJuIHIgPj4+IDA7XG59XG5leHBvcnRzLnJvdHI2NF9oaSA9IHJvdHI2NF9oaTtcblxuZnVuY3Rpb24gcm90cjY0X2xvKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByID0gKGFoIDw8ICgzMiAtIG51bSkpIHwgKGFsID4+PiBudW0pO1xuICByZXR1cm4gciA+Pj4gMDtcbn1cbmV4cG9ydHMucm90cjY0X2xvID0gcm90cjY0X2xvO1xuXG5mdW5jdGlvbiBzaHI2NF9oaShhaCwgYWwsIG51bSkge1xuICByZXR1cm4gYWggPj4+IG51bTtcbn1cbmV4cG9ydHMuc2hyNjRfaGkgPSBzaHI2NF9oaTtcblxuZnVuY3Rpb24gc2hyNjRfbG8oYWgsIGFsLCBudW0pIHtcbiAgdmFyIHIgPSAoYWggPDwgKDMyIC0gbnVtKSkgfCAoYWwgPj4+IG51bSk7XG4gIHJldHVybiByID4+PiAwO1xufVxuZXhwb3J0cy5zaHI2NF9sbyA9IHNocjY0X2xvO1xuIiwiLy8gLmRpcm5hbWUsIC5iYXNlbmFtZSwgYW5kIC5leHRuYW1lIG1ldGhvZHMgYXJlIGV4dHJhY3RlZCBmcm9tIE5vZGUuanMgdjguMTEuMSxcbi8vIGJhY2twb3J0ZWQgYW5kIHRyYW5zcGxpdGVkIHdpdGggQmFiZWwsIHdpdGggYmFja3dhcmRzLWNvbXBhdCBmaXhlc1xuXG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gcmVzb2x2ZXMgLiBhbmQgLi4gZWxlbWVudHMgaW4gYSBwYXRoIGFycmF5IHdpdGggZGlyZWN0b3J5IG5hbWVzIHRoZXJlXG4vLyBtdXN0IGJlIG5vIHNsYXNoZXMsIGVtcHR5IGVsZW1lbnRzLCBvciBkZXZpY2UgbmFtZXMgKGM6XFwpIGluIHRoZSBhcnJheVxuLy8gKHNvIGFsc28gbm8gbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2hlcyAtIGl0IGRvZXMgbm90IGRpc3Rpbmd1aXNoXG4vLyByZWxhdGl2ZSBhbmQgYWJzb2x1dGUgcGF0aHMpXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheShwYXJ0cywgYWxsb3dBYm92ZVJvb3QpIHtcbiAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IHBhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGxhc3QgPSBwYXJ0c1tpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoYWxsb3dBYm92ZVJvb3QpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzO1xufVxuXG4vLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLnJlc29sdmUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc29sdmVkUGF0aCA9ICcnLFxuICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XG4gICAgdmFyIHBhdGggPSAoaSA+PSAwKSA/IGFyZ3VtZW50c1tpXSA6IHByb2Nlc3MuY3dkKCk7XG5cbiAgICAvLyBTa2lwIGVtcHR5IGFuZCBpbnZhbGlkIGVudHJpZXNcbiAgICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5yZXNvbHZlIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH0gZWxzZSBpZiAoIXBhdGgpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHJlc29sdmVkUGF0aCA9IHBhdGggKyAnLycgKyByZXNvbHZlZFBhdGg7XG4gICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IHBhdGguY2hhckF0KDApID09PSAnLyc7XG4gIH1cblxuICAvLyBBdCB0aGlzIHBvaW50IHRoZSBwYXRoIHNob3VsZCBiZSByZXNvbHZlZCB0byBhIGZ1bGwgYWJzb2x1dGUgcGF0aCwgYnV0XG4gIC8vIGhhbmRsZSByZWxhdGl2ZSBwYXRocyB0byBiZSBzYWZlIChtaWdodCBoYXBwZW4gd2hlbiBwcm9jZXNzLmN3ZCgpIGZhaWxzKVxuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICByZXNvbHZlZFBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocmVzb2x2ZWRQYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gISFwO1xuICB9KSwgIXJlc29sdmVkQWJzb2x1dGUpLmpvaW4oJy8nKTtcblxuICByZXR1cm4gKChyZXNvbHZlZEFic29sdXRlID8gJy8nIDogJycpICsgcmVzb2x2ZWRQYXRoKSB8fCAnLic7XG59O1xuXG4vLyBwYXRoLm5vcm1hbGl6ZShwYXRoKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5ub3JtYWxpemUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHZhciBpc0Fic29sdXRlID0gZXhwb3J0cy5pc0Fic29sdXRlKHBhdGgpLFxuICAgICAgdHJhaWxpbmdTbGFzaCA9IHN1YnN0cihwYXRoLCAtMSkgPT09ICcvJztcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihwYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gISFwO1xuICB9KSwgIWlzQWJzb2x1dGUpLmpvaW4oJy8nKTtcblxuICBpZiAoIXBhdGggJiYgIWlzQWJzb2x1dGUpIHtcbiAgICBwYXRoID0gJy4nO1xuICB9XG4gIGlmIChwYXRoICYmIHRyYWlsaW5nU2xhc2gpIHtcbiAgICBwYXRoICs9ICcvJztcbiAgfVxuXG4gIHJldHVybiAoaXNBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHBhdGg7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLmlzQWJzb2x1dGUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5qb2luID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwYXRocyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gIHJldHVybiBleHBvcnRzLm5vcm1hbGl6ZShmaWx0ZXIocGF0aHMsIGZ1bmN0aW9uKHAsIGluZGV4KSB7XG4gICAgaWYgKHR5cGVvZiBwICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGguam9pbiBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG4gIH0pLmpvaW4oJy8nKSk7XG59O1xuXG5cbi8vIHBhdGgucmVsYXRpdmUoZnJvbSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLnJlbGF0aXZlID0gZnVuY3Rpb24oZnJvbSwgdG8pIHtcbiAgZnJvbSA9IGV4cG9ydHMucmVzb2x2ZShmcm9tKS5zdWJzdHIoMSk7XG4gIHRvID0gZXhwb3J0cy5yZXNvbHZlKHRvKS5zdWJzdHIoMSk7XG5cbiAgZnVuY3Rpb24gdHJpbShhcnIpIHtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGZvciAoOyBzdGFydCA8IGFyci5sZW5ndGg7IHN0YXJ0KyspIHtcbiAgICAgIGlmIChhcnJbc3RhcnRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgdmFyIGVuZCA9IGFyci5sZW5ndGggLSAxO1xuICAgIGZvciAoOyBlbmQgPj0gMDsgZW5kLS0pIHtcbiAgICAgIGlmIChhcnJbZW5kXSAhPT0gJycpIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChzdGFydCA+IGVuZCkgcmV0dXJuIFtdO1xuICAgIHJldHVybiBhcnIuc2xpY2Uoc3RhcnQsIGVuZCAtIHN0YXJ0ICsgMSk7XG4gIH1cblxuICB2YXIgZnJvbVBhcnRzID0gdHJpbShmcm9tLnNwbGl0KCcvJykpO1xuICB2YXIgdG9QYXJ0cyA9IHRyaW0odG8uc3BsaXQoJy8nKSk7XG5cbiAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsIHRvUGFydHMubGVuZ3RoKTtcbiAgdmFyIHNhbWVQYXJ0c0xlbmd0aCA9IGxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChmcm9tUGFydHNbaV0gIT09IHRvUGFydHNbaV0pIHtcbiAgICAgIHNhbWVQYXJ0c0xlbmd0aCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB2YXIgb3V0cHV0UGFydHMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IHNhbWVQYXJ0c0xlbmd0aDsgaSA8IGZyb21QYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIG91dHB1dFBhcnRzLnB1c2goJy4uJyk7XG4gIH1cblxuICBvdXRwdXRQYXJ0cyA9IG91dHB1dFBhcnRzLmNvbmNhdCh0b1BhcnRzLnNsaWNlKHNhbWVQYXJ0c0xlbmd0aCkpO1xuXG4gIHJldHVybiBvdXRwdXRQYXJ0cy5qb2luKCcvJyk7XG59O1xuXG5leHBvcnRzLnNlcCA9ICcvJztcbmV4cG9ydHMuZGVsaW1pdGVyID0gJzonO1xuXG5leHBvcnRzLmRpcm5hbWUgPSBmdW5jdGlvbiAocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSBwYXRoID0gcGF0aCArICcnO1xuICBpZiAocGF0aC5sZW5ndGggPT09IDApIHJldHVybiAnLic7XG4gIHZhciBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KDApO1xuICB2YXIgaGFzUm9vdCA9IGNvZGUgPT09IDQ3IC8qLyovO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICBmb3IgKHZhciBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDE7IC0taSkge1xuICAgIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNvZGUgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yXG4gICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAoZW5kID09PSAtMSkgcmV0dXJuIGhhc1Jvb3QgPyAnLycgOiAnLic7XG4gIGlmIChoYXNSb290ICYmIGVuZCA9PT0gMSkge1xuICAgIC8vIHJldHVybiAnLy8nO1xuICAgIC8vIEJhY2t3YXJkcy1jb21wYXQgZml4OlxuICAgIHJldHVybiAnLyc7XG4gIH1cbiAgcmV0dXJuIHBhdGguc2xpY2UoMCwgZW5kKTtcbn07XG5cbmZ1bmN0aW9uIGJhc2VuYW1lKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykgcGF0aCA9IHBhdGggKyAnJztcblxuICB2YXIgc3RhcnQgPSAwO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICB2YXIgaTtcblxuICBmb3IgKGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgaWYgKHBhdGguY2hhckNvZGVBdChpKSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XG4gICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXG4gICAgICAvLyBwYXRoIGNvbXBvbmVudFxuICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICBlbmQgPSBpICsgMTtcbiAgICB9XG4gIH1cblxuICBpZiAoZW5kID09PSAtMSkgcmV0dXJuICcnO1xuICByZXR1cm4gcGF0aC5zbGljZShzdGFydCwgZW5kKTtcbn1cblxuLy8gVXNlcyBhIG1peGVkIGFwcHJvYWNoIGZvciBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSwgYXMgZXh0IGJlaGF2aW9yIGNoYW5nZWRcbi8vIGluIG5ldyBOb2RlLmpzIHZlcnNpb25zLCBzbyBvbmx5IGJhc2VuYW1lKCkgYWJvdmUgaXMgYmFja3BvcnRlZCBoZXJlXG5leHBvcnRzLmJhc2VuYW1lID0gZnVuY3Rpb24gKHBhdGgsIGV4dCkge1xuICB2YXIgZiA9IGJhc2VuYW1lKHBhdGgpO1xuICBpZiAoZXh0ICYmIGYuc3Vic3RyKC0xICogZXh0Lmxlbmd0aCkgPT09IGV4dCkge1xuICAgIGYgPSBmLnN1YnN0cigwLCBmLmxlbmd0aCAtIGV4dC5sZW5ndGgpO1xuICB9XG4gIHJldHVybiBmO1xufTtcblxuZXhwb3J0cy5leHRuYW1lID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykgcGF0aCA9IHBhdGggKyAnJztcbiAgdmFyIHN0YXJ0RG90ID0gLTE7XG4gIHZhciBzdGFydFBhcnQgPSAwO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICAvLyBUcmFjayB0aGUgc3RhdGUgb2YgY2hhcmFjdGVycyAoaWYgYW55KSB3ZSBzZWUgYmVmb3JlIG91ciBmaXJzdCBkb3QgYW5kXG4gIC8vIGFmdGVyIGFueSBwYXRoIHNlcGFyYXRvciB3ZSBmaW5kXG4gIHZhciBwcmVEb3RTdGF0ZSA9IDA7XG4gIGZvciAodmFyIGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNvZGUgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgIHN0YXJ0UGFydCA9IGkgKyAxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXG4gICAgICAvLyBleHRlbnNpb25cbiAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgZW5kID0gaSArIDE7XG4gICAgfVxuICAgIGlmIChjb2RlID09PSA0NiAvKi4qLykge1xuICAgICAgICAvLyBJZiB0aGlzIGlzIG91ciBmaXJzdCBkb3QsIG1hcmsgaXQgYXMgdGhlIHN0YXJ0IG9mIG91ciBleHRlbnNpb25cbiAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSlcbiAgICAgICAgICBzdGFydERvdCA9IGk7XG4gICAgICAgIGVsc2UgaWYgKHByZURvdFN0YXRlICE9PSAxKVxuICAgICAgICAgIHByZURvdFN0YXRlID0gMTtcbiAgICB9IGVsc2UgaWYgKHN0YXJ0RG90ICE9PSAtMSkge1xuICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBhbmQgbm9uLXBhdGggc2VwYXJhdG9yIGJlZm9yZSBvdXIgZG90LCBzbyB3ZSBzaG91bGRcbiAgICAgIC8vIGhhdmUgYSBnb29kIGNoYW5jZSBhdCBoYXZpbmcgYSBub24tZW1wdHkgZXh0ZW5zaW9uXG4gICAgICBwcmVEb3RTdGF0ZSA9IC0xO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGFydERvdCA9PT0gLTEgfHwgZW5kID09PSAtMSB8fFxuICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBjaGFyYWN0ZXIgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBkb3RcbiAgICAgIHByZURvdFN0YXRlID09PSAwIHx8XG4gICAgICAvLyBUaGUgKHJpZ2h0LW1vc3QpIHRyaW1tZWQgcGF0aCBjb21wb25lbnQgaXMgZXhhY3RseSAnLi4nXG4gICAgICBwcmVEb3RTdGF0ZSA9PT0gMSAmJiBzdGFydERvdCA9PT0gZW5kIC0gMSAmJiBzdGFydERvdCA9PT0gc3RhcnRQYXJ0ICsgMSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICByZXR1cm4gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKTtcbn07XG5cbmZ1bmN0aW9uIGZpbHRlciAoeHMsIGYpIHtcbiAgICBpZiAoeHMuZmlsdGVyKSByZXR1cm4geHMuZmlsdGVyKGYpO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmKHhzW2ldLCBpLCB4cykpIHJlcy5wdXNoKHhzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuLy8gU3RyaW5nLnByb3RvdHlwZS5zdWJzdHIgLSBuZWdhdGl2ZSBpbmRleCBkb24ndCB3b3JrIGluIElFOFxudmFyIHN1YnN0ciA9ICdhYicuc3Vic3RyKC0xKSA9PT0gJ2InXG4gICAgPyBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7IHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pIH1cbiAgICA6IGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHtcbiAgICAgICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSBzdHIubGVuZ3RoICsgc3RhcnQ7XG4gICAgICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pO1xuICAgIH1cbjtcbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpLlN0cmluZ0RlY29kZXJcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gQ2lwaGVyQmFzZSAoaGFzaE1vZGUpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5oYXNoTW9kZSA9IHR5cGVvZiBoYXNoTW9kZSA9PT0gJ3N0cmluZydcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICB0aGlzW2hhc2hNb2RlXSA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZpbmFsID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9XG4gIGlmICh0aGlzLl9maW5hbCkge1xuICAgIHRoaXMuX19maW5hbCA9IHRoaXMuX2ZpbmFsXG4gICAgdGhpcy5fZmluYWwgPSBudWxsXG4gIH1cbiAgdGhpcy5fZGVjb2RlciA9IG51bGxcbiAgdGhpcy5fZW5jb2RpbmcgPSBudWxsXG59XG5pbmhlcml0cyhDaXBoZXJCYXNlLCBUcmFuc2Zvcm0pXG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnB1dEVuYywgb3V0cHV0RW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgaW5wdXRFbmMpXG4gIH1cblxuICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKVxuICBpZiAodGhpcy5oYXNoTW9kZSkgcmV0dXJuIHRoaXNcblxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYylcbiAgfVxuXG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKCkge31cbkNpcGhlckJhc2UucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGFhZCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoZGF0YSwgXywgbmV4dCkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5fdXBkYXRlKGRhdGEpKVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBuZXh0KGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGRvbmUpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIHRoaXMucHVzaCh0aGlzLl9fZmluYWwoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfVxuXG4gIGRvbmUoZXJyKVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7XG4gIHZhciBvdXREYXRhID0gdGhpcy5fX2ZpbmFsKCkgfHwgQnVmZmVyLmFsbG9jKDApXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jLCB0cnVlKVxuICB9XG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90b1N0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jLCBmaW4pIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG5cbiAgaWYgKHRoaXMuX2VuY29kaW5nICE9PSBlbmMpIHRocm93IG5ldyBFcnJvcignY2FuXFwndCBzd2l0Y2ggZW5jb2RpbmdzJylcblxuICB2YXIgb3V0ID0gdGhpcy5fZGVjb2Rlci53cml0ZSh2YWx1ZSlcbiAgaWYgKGZpbikge1xuICAgIG91dCArPSB0aGlzLl9kZWNvZGVyLmVuZCgpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyQmFzZVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgZHVwbGV4IHN0cmVhbSBpcyBqdXN0IGEgc3RyZWFtIHRoYXQgaXMgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUuXG4vLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzc1xuLy8gcHJvdG90eXBhbGx5IGluaGVyaXRzIGZyb20gUmVhZGFibGUsIGFuZCB0aGVuIHBhcmFzaXRpY2FsbHkgZnJvbVxuLy8gV3JpdGFibGUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gIH1yZXR1cm4ga2V5cztcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3JlYWRhYmxlJyk7XG52YXIgV3JpdGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fd3JpdGFibGUnKTtcblxudXRpbC5pbmhlcml0cyhEdXBsZXgsIFJlYWRhYmxlKTtcblxue1xuICAvLyBhdm9pZCBzY29wZSBjcmVlcCwgdGhlIGtleXMgYXJyYXkgY2FuIHRoZW4gYmUgY29sbGVjdGVkXG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpO1xuICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICB2YXIgbWV0aG9kID0ga2V5c1t2XTtcbiAgICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuXG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuXG4gIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIHRoZSBuby1oYWxmLW9wZW4gZW5mb3JjZXJcbmZ1bmN0aW9uIG9uZW5kKCkge1xuICAvLyBpZiB3ZSBhbGxvdyBoYWxmLW9wZW4gc3RhdGUsIG9yIGlmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLFxuICAvLyB0aGVuIHdlJ3JlIG9rLlxuICBpZiAodGhpcy5hbGxvd0hhbGZPcGVuIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHJldHVybjtcblxuICAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuICBwbmEubmV4dFRpY2sob25FbmROVCwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIG9uRW5kTlQoc2VsZikge1xuICBzZWxmLmVuZCgpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5EdXBsZXgucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICB0aGlzLmVuZCgpO1xuXG4gIHBuYS5uZXh0VGljayhjYiwgZXJyKTtcbn07IiwiLyohXG4gKiBleHByZXNzXG4gKiBDb3B5cmlnaHQoYykgMjAwOS0yMDEzIFRKIEhvbG93YXljaHVrXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIGNvbnRlbnREaXNwb3NpdGlvbiA9IHJlcXVpcmUoJ2NvbnRlbnQtZGlzcG9zaXRpb24nKTtcbnZhciBjb250ZW50VHlwZSA9IHJlcXVpcmUoJ2NvbnRlbnQtdHlwZScpO1xudmFyIGRlcHJlY2F0ZSA9IHJlcXVpcmUoJ2RlcGQnKSgnZXhwcmVzcycpO1xudmFyIGZsYXR0ZW4gPSByZXF1aXJlKCdhcnJheS1mbGF0dGVuJyk7XG52YXIgbWltZSA9IHJlcXVpcmUoJ3NlbmQnKS5taW1lO1xudmFyIGV0YWcgPSByZXF1aXJlKCdldGFnJyk7XG52YXIgcHJveHlhZGRyID0gcmVxdWlyZSgncHJveHktYWRkcicpO1xudmFyIHFzID0gcmVxdWlyZSgncXMnKTtcbnZhciBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyk7XG5cbi8qKlxuICogUmV0dXJuIHN0cm9uZyBFVGFnIGZvciBgYm9keWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8QnVmZmVyfSBib2R5XG4gKiBAcGFyYW0ge1N0cmluZ30gW2VuY29kaW5nXVxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5ldGFnID0gY3JlYXRlRVRhZ0dlbmVyYXRvcih7IHdlYWs6IGZhbHNlIH0pXG5cbi8qKlxuICogUmV0dXJuIHdlYWsgRVRhZyBmb3IgYGJvZHlgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfEJ1ZmZlcn0gYm9keVxuICogQHBhcmFtIHtTdHJpbmd9IFtlbmNvZGluZ11cbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMud2V0YWcgPSBjcmVhdGVFVGFnR2VuZXJhdG9yKHsgd2VhazogdHJ1ZSB9KVxuXG4vKipcbiAqIENoZWNrIGlmIGBwYXRoYCBsb29rcyBhYnNvbHV0ZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uKHBhdGgpe1xuICBpZiAoJy8nID09PSBwYXRoWzBdKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKCc6JyA9PT0gcGF0aFsxXSAmJiAoJ1xcXFwnID09PSBwYXRoWzJdIHx8ICcvJyA9PT0gcGF0aFsyXSkpIHJldHVybiB0cnVlOyAvLyBXaW5kb3dzIGRldmljZSBwYXRoXG4gIGlmICgnXFxcXFxcXFwnID09PSBwYXRoLnN1YnN0cmluZygwLCAyKSkgcmV0dXJuIHRydWU7IC8vIE1pY3Jvc29mdCBBenVyZSBhYnNvbHV0ZSBwYXRoXG59O1xuXG4vKipcbiAqIEZsYXR0ZW4gdGhlIGdpdmVuIGBhcnJgLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyclxuICogQHJldHVybiB7QXJyYXl9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmZsYXR0ZW4gPSBkZXByZWNhdGUuZnVuY3Rpb24oZmxhdHRlbixcbiAgJ3V0aWxzLmZsYXR0ZW46IHVzZSBhcnJheS1mbGF0dGVuIG5wbSBtb2R1bGUgaW5zdGVhZCcpO1xuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gYHR5cGVgLCBmb3IgZXhhbXBsZSBcImh0bWxcIiBiZWNvbWVzIFwidGV4dC9odG1sXCIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMubm9ybWFsaXplVHlwZSA9IGZ1bmN0aW9uKHR5cGUpe1xuICByZXR1cm4gfnR5cGUuaW5kZXhPZignLycpXG4gICAgPyBhY2NlcHRQYXJhbXModHlwZSlcbiAgICA6IHsgdmFsdWU6IG1pbWUubG9va3VwKHR5cGUpLCBwYXJhbXM6IHt9IH07XG59O1xuXG4vKipcbiAqIE5vcm1hbGl6ZSBgdHlwZXNgLCBmb3IgZXhhbXBsZSBcImh0bWxcIiBiZWNvbWVzIFwidGV4dC9odG1sXCIuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gdHlwZXNcbiAqIEByZXR1cm4ge0FycmF5fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5ub3JtYWxpemVUeXBlcyA9IGZ1bmN0aW9uKHR5cGVzKXtcbiAgdmFyIHJldCA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoOyArK2kpIHtcbiAgICByZXQucHVzaChleHBvcnRzLm5vcm1hbGl6ZVR5cGUodHlwZXNbaV0pKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlIENvbnRlbnQtRGlzcG9zaXRpb24gaGVhZGVyIGFwcHJvcHJpYXRlIGZvciB0aGUgZmlsZW5hbWUuXG4gKiBub24tYXNjaWkgZmlsZW5hbWVzIGFyZSB1cmxlbmNvZGVkIGFuZCBhIGZpbGVuYW1lKiBwYXJhbWV0ZXIgaXMgYWRkZWRcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmlsZW5hbWVcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuY29udGVudERpc3Bvc2l0aW9uID0gZGVwcmVjYXRlLmZ1bmN0aW9uKGNvbnRlbnREaXNwb3NpdGlvbixcbiAgJ3V0aWxzLmNvbnRlbnREaXNwb3NpdGlvbjogdXNlIGNvbnRlbnQtZGlzcG9zaXRpb24gbnBtIG1vZHVsZSBpbnN0ZWFkJyk7XG5cbi8qKlxuICogUGFyc2UgYWNjZXB0IHBhcmFtcyBgc3RyYCByZXR1cm5pbmcgYW5cbiAqIG9iamVjdCB3aXRoIGAudmFsdWVgLCBgLnF1YWxpdHlgIGFuZCBgLnBhcmFtc2AuXG4gKiBhbHNvIGluY2x1ZGVzIGAub3JpZ2luYWxJbmRleGAgZm9yIHN0YWJsZSBzb3J0aW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gYWNjZXB0UGFyYW1zKHN0ciwgaW5kZXgpIHtcbiAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KC8gKjsgKi8pO1xuICB2YXIgcmV0ID0geyB2YWx1ZTogcGFydHNbMF0sIHF1YWxpdHk6IDEsIHBhcmFtczoge30sIG9yaWdpbmFsSW5kZXg6IGluZGV4IH07XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgIHZhciBwbXMgPSBwYXJ0c1tpXS5zcGxpdCgvICo9ICovKTtcbiAgICBpZiAoJ3EnID09PSBwbXNbMF0pIHtcbiAgICAgIHJldC5xdWFsaXR5ID0gcGFyc2VGbG9hdChwbXNbMV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXQucGFyYW1zW3Btc1swXV0gPSBwbXNbMV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuLyoqXG4gKiBDb21waWxlIFwiZXRhZ1wiIHZhbHVlIHRvIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSAge0Jvb2xlYW58U3RyaW5nfEZ1bmN0aW9ufSB2YWxcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5jb21waWxlRVRhZyA9IGZ1bmN0aW9uKHZhbCkge1xuICB2YXIgZm47XG5cbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgc3dpdGNoICh2YWwpIHtcbiAgICBjYXNlIHRydWU6XG4gICAgICBmbiA9IGV4cG9ydHMud2V0YWc7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGZhbHNlOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc3Ryb25nJzpcbiAgICAgIGZuID0gZXhwb3J0cy5ldGFnO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnd2Vhayc6XG4gICAgICBmbiA9IGV4cG9ydHMud2V0YWc7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndW5rbm93biB2YWx1ZSBmb3IgZXRhZyBmdW5jdGlvbjogJyArIHZhbCk7XG4gIH1cblxuICByZXR1cm4gZm47XG59XG5cbi8qKlxuICogQ29tcGlsZSBcInF1ZXJ5IHBhcnNlclwiIHZhbHVlIHRvIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ3xGdW5jdGlvbn0gdmFsXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuY29tcGlsZVF1ZXJ5UGFyc2VyID0gZnVuY3Rpb24gY29tcGlsZVF1ZXJ5UGFyc2VyKHZhbCkge1xuICB2YXIgZm47XG5cbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgc3dpdGNoICh2YWwpIHtcbiAgICBjYXNlIHRydWU6XG4gICAgICBmbiA9IHF1ZXJ5c3RyaW5nLnBhcnNlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBmYWxzZTpcbiAgICAgIGZuID0gbmV3T2JqZWN0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZXh0ZW5kZWQnOlxuICAgICAgZm4gPSBwYXJzZUV4dGVuZGVkUXVlcnlTdHJpbmc7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzaW1wbGUnOlxuICAgICAgZm4gPSBxdWVyeXN0cmluZy5wYXJzZTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1bmtub3duIHZhbHVlIGZvciBxdWVyeSBwYXJzZXIgZnVuY3Rpb246ICcgKyB2YWwpO1xuICB9XG5cbiAgcmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIENvbXBpbGUgXCJwcm94eSB0cnVzdFwiIHZhbHVlIHRvIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSAge0Jvb2xlYW58U3RyaW5nfE51bWJlcnxBcnJheXxGdW5jdGlvbn0gdmFsXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuY29tcGlsZVRydXN0ID0gZnVuY3Rpb24odmFsKSB7XG4gIGlmICh0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdmFsO1xuXG4gIGlmICh2YWwgPT09IHRydWUpIHtcbiAgICAvLyBTdXBwb3J0IHBsYWluIHRydWUvZmFsc2VcbiAgICByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIHRydWUgfTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIC8vIFN1cHBvcnQgdHJ1c3RpbmcgaG9wIGNvdW50XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGkpeyByZXR1cm4gaSA8IHZhbCB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gU3VwcG9ydCBjb21tYS1zZXBhcmF0ZWQgdmFsdWVzXG4gICAgdmFsID0gdmFsLnNwbGl0KC8gKiwgKi8pO1xuICB9XG5cbiAgcmV0dXJuIHByb3h5YWRkci5jb21waWxlKHZhbCB8fCBbXSk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBjaGFyc2V0IGluIGEgZ2l2ZW4gQ29udGVudC1UeXBlIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtTdHJpbmd9IGNoYXJzZXRcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuc2V0Q2hhcnNldCA9IGZ1bmN0aW9uIHNldENoYXJzZXQodHlwZSwgY2hhcnNldCkge1xuICBpZiAoIXR5cGUgfHwgIWNoYXJzZXQpIHtcbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuXG4gIC8vIHBhcnNlIHR5cGVcbiAgdmFyIHBhcnNlZCA9IGNvbnRlbnRUeXBlLnBhcnNlKHR5cGUpO1xuXG4gIC8vIHNldCBjaGFyc2V0XG4gIHBhcnNlZC5wYXJhbWV0ZXJzLmNoYXJzZXQgPSBjaGFyc2V0O1xuXG4gIC8vIGZvcm1hdCB0eXBlXG4gIHJldHVybiBjb250ZW50VHlwZS5mb3JtYXQocGFyc2VkKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVUYWcgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBnZW5lcmF0aW5nIEVUYWdzIHdpdGhcbiAqIHRoZSBnaXZlbiBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRVRhZ0dlbmVyYXRvciAob3B0aW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gZ2VuZXJhdGVFVGFnIChib2R5LCBlbmNvZGluZykge1xuICAgIHZhciBidWYgPSAhQnVmZmVyLmlzQnVmZmVyKGJvZHkpXG4gICAgICA/IEJ1ZmZlci5mcm9tKGJvZHksIGVuY29kaW5nKVxuICAgICAgOiBib2R5XG5cbiAgICByZXR1cm4gZXRhZyhidWYsIG9wdGlvbnMpXG4gIH1cbn1cblxuLyoqXG4gKiBQYXJzZSBhbiBleHRlbmRlZCBxdWVyeSBzdHJpbmcgd2l0aCBxcy5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlRXh0ZW5kZWRRdWVyeVN0cmluZyhzdHIpIHtcbiAgcmV0dXJuIHFzLnBhcnNlKHN0ciwge1xuICAgIGFsbG93UHJvdG90eXBlczogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gbmV3IGVtcHR5IG9iamVjdC5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBuZXdPYmplY3QoKSB7XG4gIHJldHVybiB7fTtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxudmFyIHNhZmVyID0ge31cblxudmFyIGtleVxuXG5mb3IgKGtleSBpbiBidWZmZXIpIHtcbiAgaWYgKCFidWZmZXIuaGFzT3duUHJvcGVydHkoa2V5KSkgY29udGludWVcbiAgaWYgKGtleSA9PT0gJ1Nsb3dCdWZmZXInIHx8IGtleSA9PT0gJ0J1ZmZlcicpIGNvbnRpbnVlXG4gIHNhZmVyW2tleV0gPSBidWZmZXJba2V5XVxufVxuXG52YXIgU2FmZXIgPSBzYWZlci5CdWZmZXIgPSB7fVxuZm9yIChrZXkgaW4gQnVmZmVyKSB7XG4gIGlmICghQnVmZmVyLmhhc093blByb3BlcnR5KGtleSkpIGNvbnRpbnVlXG4gIGlmIChrZXkgPT09ICdhbGxvY1Vuc2FmZScgfHwga2V5ID09PSAnYWxsb2NVbnNhZmVTbG93JykgY29udGludWVcbiAgU2FmZXJba2V5XSA9IEJ1ZmZlcltrZXldXG59XG5cbnNhZmVyLkJ1ZmZlci5wcm90b3R5cGUgPSBCdWZmZXIucHJvdG90eXBlXG5cbmlmICghU2FmZXIuZnJvbSB8fCBTYWZlci5mcm9tID09PSBVaW50OEFycmF5LmZyb20pIHtcbiAgU2FmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiB2YWx1ZSlcbiAgICB9XG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHZhbHVlKVxuICAgIH1cbiAgICByZXR1cm4gQnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cbn1cblxuaWYgKCFTYWZlci5hbGxvYykge1xuICBTYWZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICAgIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2Ygc2l6ZSlcbiAgICB9XG4gICAgaWYgKHNpemUgPCAwIHx8IHNpemUgPj0gMiAqICgxIDw8IDMwKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBzaXplICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpXG4gICAgfVxuICAgIHZhciBidWYgPSBCdWZmZXIoc2l6ZSlcbiAgICBpZiAoIWZpbGwgfHwgZmlsbC5sZW5ndGggPT09IDApIHtcbiAgICAgIGJ1Zi5maWxsKDApXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmZpbGwoZmlsbClcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZlxuICB9XG59XG5cbmlmICghc2FmZXIua1N0cmluZ01heExlbmd0aCkge1xuICB0cnkge1xuICAgIHNhZmVyLmtTdHJpbmdNYXhMZW5ndGggPSBwcm9jZXNzLmJpbmRpbmcoJ2J1ZmZlcicpLmtTdHJpbmdNYXhMZW5ndGhcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIHdlIGNhbid0IGRldGVybWluZSBrU3RyaW5nTWF4TGVuZ3RoIGluIGVudmlyb25tZW50cyB3aGVyZSBwcm9jZXNzLmJpbmRpbmdcbiAgICAvLyBpcyB1bnN1cHBvcnRlZCwgc28gbGV0J3Mgbm90IHNldCBpdFxuICB9XG59XG5cbmlmICghc2FmZXIuY29uc3RhbnRzKSB7XG4gIHNhZmVyLmNvbnN0YW50cyA9IHtcbiAgICBNQVhfTEVOR1RIOiBzYWZlci5rTWF4TGVuZ3RoXG4gIH1cbiAgaWYgKHNhZmVyLmtTdHJpbmdNYXhMZW5ndGgpIHtcbiAgICBzYWZlci5jb25zdGFudHMuTUFYX1NUUklOR19MRU5HVEggPSBzYWZlci5rU3RyaW5nTWF4TGVuZ3RoXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzYWZlclxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtO1xuXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5pbmhlcml0cyhTdHJlYW0sIEVFKTtcblN0cmVhbS5SZWFkYWJsZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS5qcycpO1xuU3RyZWFtLldyaXRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLmpzJyk7XG5TdHJlYW0uRHVwbGV4ID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL2R1cGxleC5qcycpO1xuU3RyZWFtLlRyYW5zZm9ybSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMnKTtcblN0cmVhbS5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcycpO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjQueFxuU3RyZWFtLlN0cmVhbSA9IFN0cmVhbTtcblxuXG5cbi8vIG9sZC1zdHlsZSBzdHJlYW1zLiAgTm90ZSB0aGF0IHRoZSBwaXBlIG1ldGhvZCAodGhlIG9ubHkgcmVsZXZhbnRcbi8vIHBhcnQgb2YgdGhpcyBjbGFzcykgaXMgb3ZlcnJpZGRlbiBpbiB0aGUgUmVhZGFibGUgY2xhc3MuXG5cbmZ1bmN0aW9uIFN0cmVhbSgpIHtcbiAgRUUuY2FsbCh0aGlzKTtcbn1cblxuU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oZGVzdCwgb3B0aW9ucykge1xuICB2YXIgc291cmNlID0gdGhpcztcblxuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBpZiAoZGVzdC53cml0YWJsZSkge1xuICAgICAgaWYgKGZhbHNlID09PSBkZXN0LndyaXRlKGNodW5rKSAmJiBzb3VyY2UucGF1c2UpIHtcbiAgICAgICAgc291cmNlLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdkYXRhJywgb25kYXRhKTtcblxuICBmdW5jdGlvbiBvbmRyYWluKCkge1xuICAgIGlmIChzb3VyY2UucmVhZGFibGUgJiYgc291cmNlLnJlc3VtZSkge1xuICAgICAgc291cmNlLnJlc3VtZSgpO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgLy8gSWYgdGhlICdlbmQnIG9wdGlvbiBpcyBub3Qgc3VwcGxpZWQsIGRlc3QuZW5kKCkgd2lsbCBiZSBjYWxsZWQgd2hlblxuICAvLyBzb3VyY2UgZ2V0cyB0aGUgJ2VuZCcgb3IgJ2Nsb3NlJyBldmVudHMuICBPbmx5IGRlc3QuZW5kKCkgb25jZS5cbiAgaWYgKCFkZXN0Ll9pc1N0ZGlvICYmICghb3B0aW9ucyB8fCBvcHRpb25zLmVuZCAhPT0gZmFsc2UpKSB7XG4gICAgc291cmNlLm9uKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLm9uKCdjbG9zZScsIG9uY2xvc2UpO1xuICB9XG5cbiAgdmFyIGRpZE9uRW5kID0gZmFsc2U7XG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuO1xuICAgIGRpZE9uRW5kID0gdHJ1ZTtcblxuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiBkZXN0LmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIGRlc3QuZGVzdHJveSgpO1xuICB9XG5cbiAgLy8gZG9uJ3QgbGVhdmUgZGFuZ2xpbmcgcGlwZXMgd2hlbiB0aGVyZSBhcmUgZXJyb3JzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgY2xlYW51cCgpO1xuICAgIGlmIChFRS5saXN0ZW5lckNvdW50KHRoaXMsICdlcnJvcicpID09PSAwKSB7XG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkIHN0cmVhbSBlcnJvciBpbiBwaXBlLlxuICAgIH1cbiAgfVxuXG4gIHNvdXJjZS5vbignZXJyb3InLCBvbmVycm9yKTtcbiAgZGVzdC5vbignZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyByZW1vdmUgYWxsIHRoZSBldmVudCBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGFkZGVkLlxuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBjbGVhbnVwKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApO1xuICB9XG5cbiAgc291cmNlLm9uKCdlbmQnLCBjbGVhbnVwKTtcbiAgc291cmNlLm9uKCdjbG9zZScsIGNsZWFudXApO1xuXG4gIGRlc3Qub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5lbWl0KCdwaXBlJywgc291cmNlKTtcblxuICAvLyBBbGxvdyBmb3IgdW5peC1saWtlIHVzYWdlOiBBLnBpcGUoQikucGlwZShDKVxuICByZXR1cm4gZGVzdDtcbn07XG4iLCIndXNlIHN0cmljdCdcblxuLy8gbGltaXQgb2YgQ3J5cHRvLmdldFJhbmRvbVZhbHVlcygpXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3J5cHRvL2dldFJhbmRvbVZhbHVlc1xudmFyIE1BWF9CWVRFUyA9IDY1NTM2XG5cbi8vIE5vZGUgc3VwcG9ydHMgcmVxdWVzdGluZyB1cCB0byB0aGlzIG51bWJlciBvZiBieXRlc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvbWFzdGVyL2xpYi9pbnRlcm5hbC9jcnlwdG8vcmFuZG9tLmpzI0w0OFxudmFyIE1BWF9VSU5UMzIgPSA0Mjk0OTY3Mjk1XG5cbmZ1bmN0aW9uIG9sZEJyb3dzZXIgKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXIuXFxuVXNlIENocm9tZSwgRmlyZWZveCBvciBJbnRlcm5ldCBFeHBsb3JlciAxMScpXG59XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIGNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvXG5cbmlmIChjcnlwdG8gJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJhbmRvbUJ5dGVzXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IG9sZEJyb3dzZXJcbn1cblxuZnVuY3Rpb24gcmFuZG9tQnl0ZXMgKHNpemUsIGNiKSB7XG4gIC8vIHBoYW50b21qcyBuZWVkcyB0byB0aHJvd1xuICBpZiAoc2l6ZSA+IE1BWF9VSU5UMzIpIHRocm93IG5ldyBSYW5nZUVycm9yKCdyZXF1ZXN0ZWQgdG9vIG1hbnkgcmFuZG9tIGJ5dGVzJylcblxuICB2YXIgYnl0ZXMgPSBCdWZmZXIuYWxsb2NVbnNhZmUoc2l6ZSlcblxuICBpZiAoc2l6ZSA+IDApIHsgIC8vIGdldFJhbmRvbVZhbHVlcyBmYWlscyBvbiBJRSBpZiBzaXplID09IDBcbiAgICBpZiAoc2l6ZSA+IE1BWF9CWVRFUykgeyAvLyB0aGlzIGlzIHRoZSBtYXggYnl0ZXMgY3J5cHRvLmdldFJhbmRvbVZhbHVlc1xuICAgICAgLy8gY2FuIGRvIGF0IG9uY2Ugc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS93aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlc1xuICAgICAgZm9yICh2YXIgZ2VuZXJhdGVkID0gMDsgZ2VuZXJhdGVkIDwgc2l6ZTsgZ2VuZXJhdGVkICs9IE1BWF9CWVRFUykge1xuICAgICAgICAvLyBidWZmZXIuc2xpY2UgYXV0b21hdGljYWxseSBjaGVja3MgaWYgdGhlIGVuZCBpcyBwYXN0IHRoZSBlbmQgb2ZcbiAgICAgICAgLy8gdGhlIGJ1ZmZlciBzbyB3ZSBkb24ndCBoYXZlIHRvIGhlcmVcbiAgICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhieXRlcy5zbGljZShnZW5lcmF0ZWQsIGdlbmVyYXRlZCArIE1BWF9CWVRFUykpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYnl0ZXMpXG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNiKG51bGwsIGJ5dGVzKVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG4vLyBwcm90b3R5cGUgY2xhc3MgZm9yIGhhc2ggZnVuY3Rpb25zXG5mdW5jdGlvbiBIYXNoIChibG9ja1NpemUsIGZpbmFsU2l6ZSkge1xuICB0aGlzLl9ibG9jayA9IEJ1ZmZlci5hbGxvYyhibG9ja1NpemUpXG4gIHRoaXMuX2ZpbmFsU2l6ZSA9IGZpbmFsU2l6ZVxuICB0aGlzLl9ibG9ja1NpemUgPSBibG9ja1NpemVcbiAgdGhpcy5fbGVuID0gMFxufVxuXG5IYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmMgPSBlbmMgfHwgJ3V0ZjgnXG4gICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuYylcbiAgfVxuXG4gIHZhciBibG9jayA9IHRoaXMuX2Jsb2NrXG4gIHZhciBibG9ja1NpemUgPSB0aGlzLl9ibG9ja1NpemVcbiAgdmFyIGxlbmd0aCA9IGRhdGEubGVuZ3RoXG4gIHZhciBhY2N1bSA9IHRoaXMuX2xlblxuXG4gIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IGxlbmd0aDspIHtcbiAgICB2YXIgYXNzaWduZWQgPSBhY2N1bSAlIGJsb2NrU2l6ZVxuICAgIHZhciByZW1haW5kZXIgPSBNYXRoLm1pbihsZW5ndGggLSBvZmZzZXQsIGJsb2NrU2l6ZSAtIGFzc2lnbmVkKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1haW5kZXI7IGkrKykge1xuICAgICAgYmxvY2tbYXNzaWduZWQgKyBpXSA9IGRhdGFbb2Zmc2V0ICsgaV1cbiAgICB9XG5cbiAgICBhY2N1bSArPSByZW1haW5kZXJcbiAgICBvZmZzZXQgKz0gcmVtYWluZGVyXG5cbiAgICBpZiAoKGFjY3VtICUgYmxvY2tTaXplKSA9PT0gMCkge1xuICAgICAgdGhpcy5fdXBkYXRlKGJsb2NrKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuX2xlbiArPSBsZW5ndGhcbiAgcmV0dXJuIHRoaXNcbn1cblxuSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuYykge1xuICB2YXIgcmVtID0gdGhpcy5fbGVuICUgdGhpcy5fYmxvY2tTaXplXG5cbiAgdGhpcy5fYmxvY2tbcmVtXSA9IDB4ODBcblxuICAvLyB6ZXJvIChyZW0gKyAxKSB0cmFpbGluZyBiaXRzLCB3aGVyZSAocmVtICsgMSkgaXMgdGhlIHNtYWxsZXN0XG4gIC8vIG5vbi1uZWdhdGl2ZSBzb2x1dGlvbiB0byB0aGUgZXF1YXRpb24gKGxlbmd0aCArIDEgKyAocmVtICsgMSkpID09PSBmaW5hbFNpemUgbW9kIGJsb2NrU2l6ZVxuICB0aGlzLl9ibG9jay5maWxsKDAsIHJlbSArIDEpXG5cbiAgaWYgKHJlbSA+PSB0aGlzLl9maW5hbFNpemUpIHtcbiAgICB0aGlzLl91cGRhdGUodGhpcy5fYmxvY2spXG4gICAgdGhpcy5fYmxvY2suZmlsbCgwKVxuICB9XG5cbiAgdmFyIGJpdHMgPSB0aGlzLl9sZW4gKiA4XG5cbiAgLy8gdWludDMyXG4gIGlmIChiaXRzIDw9IDB4ZmZmZmZmZmYpIHtcbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGJpdHMsIHRoaXMuX2Jsb2NrU2l6ZSAtIDQpXG5cbiAgLy8gdWludDY0XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxvd0JpdHMgPSAoYml0cyAmIDB4ZmZmZmZmZmYpID4+PiAwXG4gICAgdmFyIGhpZ2hCaXRzID0gKGJpdHMgLSBsb3dCaXRzKSAvIDB4MTAwMDAwMDAwXG5cbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGhpZ2hCaXRzLCB0aGlzLl9ibG9ja1NpemUgLSA4KVxuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUobG93Qml0cywgdGhpcy5fYmxvY2tTaXplIC0gNClcbiAgfVxuXG4gIHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaylcbiAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoKClcblxuICByZXR1cm4gZW5jID8gaGFzaC50b1N0cmluZyhlbmMpIDogaGFzaFxufVxuXG5IYXNoLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ191cGRhdGUgbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzcycpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaFxuIiwiLyohXG4gKiBieXRlc1xuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBUSiBIb2xvd2F5Y2h1a1xuICogQ29weXJpZ2h0KGMpIDIwMTUgSmVkIFdhdHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gYnl0ZXM7XG5tb2R1bGUuZXhwb3J0cy5mb3JtYXQgPSBmb3JtYXQ7XG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuXG4vKipcbiAqIE1vZHVsZSB2YXJpYWJsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBmb3JtYXRUaG91c2FuZHNSZWdFeHAgPSAvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZztcblxudmFyIGZvcm1hdERlY2ltYWxzUmVnRXhwID0gLyg/OlxcLjAqfChcXC5bXjBdKykwKykkLztcblxudmFyIG1hcCA9IHtcbiAgYjogIDEsXG4gIGtiOiAxIDw8IDEwLFxuICBtYjogMSA8PCAyMCxcbiAgZ2I6IDEgPDwgMzAsXG4gIHRiOiBNYXRoLnBvdygxMDI0LCA0KSxcbiAgcGI6IE1hdGgucG93KDEwMjQsIDUpLFxufTtcblxudmFyIHBhcnNlUmVnRXhwID0gL14oKC18XFwrKT8oXFxkKyg/OlxcLlxcZCspPykpICooa2J8bWJ8Z2J8dGJ8cGIpJC9pO1xuXG4vKipcbiAqIENvbnZlcnQgdGhlIGdpdmVuIHZhbHVlIGluIGJ5dGVzIGludG8gYSBzdHJpbmcgb3IgcGFyc2UgdG8gc3RyaW5nIHRvIGFuIGludGVnZXIgaW4gYnl0ZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB2YWx1ZVxuICogQHBhcmFtIHt7XG4gKiAgY2FzZTogW3N0cmluZ10sXG4gKiAgZGVjaW1hbFBsYWNlczogW251bWJlcl1cbiAqICBmaXhlZERlY2ltYWxzOiBbYm9vbGVhbl1cbiAqICB0aG91c2FuZHNTZXBhcmF0b3I6IFtzdHJpbmddXG4gKiAgdW5pdFNlcGFyYXRvcjogW3N0cmluZ11cbiAqICB9fSBbb3B0aW9uc10gYnl0ZXMgb3B0aW9ucy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfG51bWJlcnxudWxsfVxuICovXG5cbmZ1bmN0aW9uIGJ5dGVzKHZhbHVlLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbHVlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZvcm1hdCh2YWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBGb3JtYXQgdGhlIGdpdmVuIHZhbHVlIGluIGJ5dGVzIGludG8gYSBzdHJpbmcuXG4gKlxuICogSWYgdGhlIHZhbHVlIGlzIG5lZ2F0aXZlLCBpdCBpcyBrZXB0IGFzIHN1Y2guIElmIGl0IGlzIGEgZmxvYXQsXG4gKiBpdCBpcyByb3VuZGVkLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmRlY2ltYWxQbGFjZXM9Ml1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5maXhlZERlY2ltYWxzPWZhbHNlXVxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnRob3VzYW5kc1NlcGFyYXRvcj1dXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudW5pdD1dXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudW5pdFNlcGFyYXRvcj1dXG4gKlxuICogQHJldHVybnMge3N0cmluZ3xudWxsfVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAoIU51bWJlci5pc0Zpbml0ZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBtYWcgPSBNYXRoLmFicyh2YWx1ZSk7XG4gIHZhciB0aG91c2FuZHNTZXBhcmF0b3IgPSAob3B0aW9ucyAmJiBvcHRpb25zLnRob3VzYW5kc1NlcGFyYXRvcikgfHwgJyc7XG4gIHZhciB1bml0U2VwYXJhdG9yID0gKG9wdGlvbnMgJiYgb3B0aW9ucy51bml0U2VwYXJhdG9yKSB8fCAnJztcbiAgdmFyIGRlY2ltYWxQbGFjZXMgPSAob3B0aW9ucyAmJiBvcHRpb25zLmRlY2ltYWxQbGFjZXMgIT09IHVuZGVmaW5lZCkgPyBvcHRpb25zLmRlY2ltYWxQbGFjZXMgOiAyO1xuICB2YXIgZml4ZWREZWNpbWFscyA9IEJvb2xlYW4ob3B0aW9ucyAmJiBvcHRpb25zLmZpeGVkRGVjaW1hbHMpO1xuICB2YXIgdW5pdCA9IChvcHRpb25zICYmIG9wdGlvbnMudW5pdCkgfHwgJyc7XG5cbiAgaWYgKCF1bml0IHx8ICFtYXBbdW5pdC50b0xvd2VyQ2FzZSgpXSkge1xuICAgIGlmIChtYWcgPj0gbWFwLnBiKSB7XG4gICAgICB1bml0ID0gJ1BCJztcbiAgICB9IGVsc2UgaWYgKG1hZyA+PSBtYXAudGIpIHtcbiAgICAgIHVuaXQgPSAnVEInO1xuICAgIH0gZWxzZSBpZiAobWFnID49IG1hcC5nYikge1xuICAgICAgdW5pdCA9ICdHQic7XG4gICAgfSBlbHNlIGlmIChtYWcgPj0gbWFwLm1iKSB7XG4gICAgICB1bml0ID0gJ01CJztcbiAgICB9IGVsc2UgaWYgKG1hZyA+PSBtYXAua2IpIHtcbiAgICAgIHVuaXQgPSAnS0InO1xuICAgIH0gZWxzZSB7XG4gICAgICB1bml0ID0gJ0InO1xuICAgIH1cbiAgfVxuXG4gIHZhciB2YWwgPSB2YWx1ZSAvIG1hcFt1bml0LnRvTG93ZXJDYXNlKCldO1xuICB2YXIgc3RyID0gdmFsLnRvRml4ZWQoZGVjaW1hbFBsYWNlcyk7XG5cbiAgaWYgKCFmaXhlZERlY2ltYWxzKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UoZm9ybWF0RGVjaW1hbHNSZWdFeHAsICckMScpO1xuICB9XG5cbiAgaWYgKHRob3VzYW5kc1NlcGFyYXRvcikge1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKGZvcm1hdFRob3VzYW5kc1JlZ0V4cCwgdGhvdXNhbmRzU2VwYXJhdG9yKTtcbiAgfVxuXG4gIHJldHVybiBzdHIgKyB1bml0U2VwYXJhdG9yICsgdW5pdDtcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgc3RyaW5nIHZhbHVlIGludG8gYW4gaW50ZWdlciBpbiBieXRlcy5cbiAqXG4gKiBJZiBubyB1bml0IGlzIGdpdmVuLCBpdCBpcyBhc3N1bWVkIHRoZSB2YWx1ZSBpcyBpbiBieXRlcy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHZhbFxuICpcbiAqIEByZXR1cm5zIHtudW1iZXJ8bnVsbH1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZSh2YWwpIHtcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmICFpc05hTih2YWwpKSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gVGVzdCBpZiB0aGUgc3RyaW5nIHBhc3NlZCBpcyB2YWxpZFxuICB2YXIgcmVzdWx0cyA9IHBhcnNlUmVnRXhwLmV4ZWModmFsKTtcbiAgdmFyIGZsb2F0VmFsdWU7XG4gIHZhciB1bml0ID0gJ2InO1xuXG4gIGlmICghcmVzdWx0cykge1xuICAgIC8vIE5vdGhpbmcgY291bGQgYmUgZXh0cmFjdGVkIGZyb20gdGhlIGdpdmVuIHN0cmluZ1xuICAgIGZsb2F0VmFsdWUgPSBwYXJzZUludCh2YWwsIDEwKTtcbiAgICB1bml0ID0gJ2InXG4gIH0gZWxzZSB7XG4gICAgLy8gUmV0cmlldmUgdGhlIHZhbHVlIGFuZCB0aGUgdW5pdFxuICAgIGZsb2F0VmFsdWUgPSBwYXJzZUZsb2F0KHJlc3VsdHNbMV0pO1xuICAgIHVuaXQgPSByZXN1bHRzWzRdLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICByZXR1cm4gTWF0aC5mbG9vcihtYXBbdW5pdF0gKiBmbG9hdFZhbHVlKTtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuLyogZXNsaW50IG5vLXByb3RvOiAwICovXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSA/IHNldFByb3RvT2YgOiBtaXhpblByb3BlcnRpZXMpXG5cbmZ1bmN0aW9uIHNldFByb3RvT2YgKG9iaiwgcHJvdG8pIHtcbiAgb2JqLl9fcHJvdG9fXyA9IHByb3RvXG4gIHJldHVybiBvYmpcbn1cblxuZnVuY3Rpb24gbWl4aW5Qcm9wZXJ0aWVzIChvYmosIHByb3RvKSB7XG4gIGZvciAodmFyIHByb3AgaW4gcHJvdG8pIHtcbiAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgb2JqW3Byb3BdID0gcHJvdG9bcHJvcF1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9ialxufVxuIiwiLyohXG4gKiBzdGF0dXNlc1xuICogQ29weXJpZ2h0KGMpIDIwMTQgSm9uYXRoYW4gT25nXG4gKiBDb3B5cmlnaHQoYykgMjAxNiBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGNvZGVzID0gcmVxdWlyZSgnLi9jb2Rlcy5qc29uJylcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YXR1c1xuXG4vLyBzdGF0dXMgY29kZSB0byBtZXNzYWdlIG1hcFxuc3RhdHVzLlNUQVRVU19DT0RFUyA9IGNvZGVzXG5cbi8vIGFycmF5IG9mIHN0YXR1cyBjb2Rlc1xuc3RhdHVzLmNvZGVzID0gcG9wdWxhdGVTdGF0dXNlc01hcChzdGF0dXMsIGNvZGVzKVxuXG4vLyBzdGF0dXMgY29kZXMgZm9yIHJlZGlyZWN0c1xuc3RhdHVzLnJlZGlyZWN0ID0ge1xuICAzMDA6IHRydWUsXG4gIDMwMTogdHJ1ZSxcbiAgMzAyOiB0cnVlLFxuICAzMDM6IHRydWUsXG4gIDMwNTogdHJ1ZSxcbiAgMzA3OiB0cnVlLFxuICAzMDg6IHRydWVcbn1cblxuLy8gc3RhdHVzIGNvZGVzIGZvciBlbXB0eSBib2RpZXNcbnN0YXR1cy5lbXB0eSA9IHtcbiAgMjA0OiB0cnVlLFxuICAyMDU6IHRydWUsXG4gIDMwNDogdHJ1ZVxufVxuXG4vLyBzdGF0dXMgY29kZXMgZm9yIHdoZW4geW91IHNob3VsZCByZXRyeSB0aGUgcmVxdWVzdFxuc3RhdHVzLnJldHJ5ID0ge1xuICA1MDI6IHRydWUsXG4gIDUwMzogdHJ1ZSxcbiAgNTA0OiB0cnVlXG59XG5cbi8qKlxuICogUG9wdWxhdGUgdGhlIHN0YXR1c2VzIG1hcCBmb3IgZ2l2ZW4gY29kZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBvcHVsYXRlU3RhdHVzZXNNYXAgKHN0YXR1c2VzLCBjb2Rlcykge1xuICB2YXIgYXJyID0gW11cblxuICBPYmplY3Qua2V5cyhjb2RlcykuZm9yRWFjaChmdW5jdGlvbiBmb3JFYWNoQ29kZSAoY29kZSkge1xuICAgIHZhciBtZXNzYWdlID0gY29kZXNbY29kZV1cbiAgICB2YXIgc3RhdHVzID0gTnVtYmVyKGNvZGUpXG5cbiAgICAvLyBQb3B1bGF0ZSBwcm9wZXJ0aWVzXG4gICAgc3RhdHVzZXNbc3RhdHVzXSA9IG1lc3NhZ2VcbiAgICBzdGF0dXNlc1ttZXNzYWdlXSA9IHN0YXR1c1xuICAgIHN0YXR1c2VzW21lc3NhZ2UudG9Mb3dlckNhc2UoKV0gPSBzdGF0dXNcblxuICAgIC8vIEFkZCB0byBhcnJheVxuICAgIGFyci5wdXNoKHN0YXR1cylcbiAgfSlcblxuICByZXR1cm4gYXJyXG59XG5cbi8qKlxuICogR2V0IHRoZSBzdGF0dXMgY29kZS5cbiAqXG4gKiBHaXZlbiBhIG51bWJlciwgdGhpcyB3aWxsIHRocm93IGlmIGl0IGlzIG5vdCBhIGtub3duIHN0YXR1c1xuICogY29kZSwgb3RoZXJ3aXNlIHRoZSBjb2RlIHdpbGwgYmUgcmV0dXJuZWQuIEdpdmVuIGEgc3RyaW5nLFxuICogdGhlIHN0cmluZyB3aWxsIGJlIHBhcnNlZCBmb3IgYSBudW1iZXIgYW5kIHJldHVybiB0aGUgY29kZVxuICogaWYgdmFsaWQsIG90aGVyd2lzZSB3aWxsIGxvb2t1cCB0aGUgY29kZSBhc3N1bWluZyB0aGlzIGlzXG4gKiB0aGUgc3RhdHVzIG1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBjb2RlXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHN0YXR1cyAoY29kZSkge1xuICBpZiAodHlwZW9mIGNvZGUgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKCFzdGF0dXNbY29kZV0pIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzdGF0dXMgY29kZTogJyArIGNvZGUpXG4gICAgcmV0dXJuIGNvZGVcbiAgfVxuXG4gIGlmICh0eXBlb2YgY29kZSAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjb2RlIG11c3QgYmUgYSBudW1iZXIgb3Igc3RyaW5nJylcbiAgfVxuXG4gIC8vICc0MDMnXG4gIHZhciBuID0gcGFyc2VJbnQoY29kZSwgMTApXG4gIGlmICghaXNOYU4obikpIHtcbiAgICBpZiAoIXN0YXR1c1tuXSkgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHN0YXR1cyBjb2RlOiAnICsgbilcbiAgICByZXR1cm4gblxuICB9XG5cbiAgbiA9IHN0YXR1c1tjb2RlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghbikgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHN0YXR1cyBtZXNzYWdlOiBcIicgKyBjb2RlICsgJ1wiJylcbiAgcmV0dXJuIG5cbn1cbiIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuXG5mdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICBpZiAoQXJyYXkuaXNBcnJheSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXI7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cbiIsIi8qIVxuICogdHlwZS1pc1xuICogQ29weXJpZ2h0KGMpIDIwMTQgSm9uYXRoYW4gT25nXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgdHlwZXIgPSByZXF1aXJlKCdtZWRpYS10eXBlcicpXG52YXIgbWltZSA9IHJlcXVpcmUoJ21pbWUtdHlwZXMnKVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mcmVxdWVzdFxubW9kdWxlLmV4cG9ydHMuaXMgPSB0eXBlaXNcbm1vZHVsZS5leHBvcnRzLmhhc0JvZHkgPSBoYXNib2R5XG5tb2R1bGUuZXhwb3J0cy5ub3JtYWxpemUgPSBub3JtYWxpemVcbm1vZHVsZS5leHBvcnRzLm1hdGNoID0gbWltZU1hdGNoXG5cbi8qKlxuICogQ29tcGFyZSBhIGB2YWx1ZWAgY29udGVudC10eXBlIHdpdGggYHR5cGVzYC5cbiAqIEVhY2ggYHR5cGVgIGNhbiBiZSBhbiBleHRlbnNpb24gbGlrZSBgaHRtbGAsXG4gKiBhIHNwZWNpYWwgc2hvcnRjdXQgbGlrZSBgbXVsdGlwYXJ0YCBvciBgdXJsZW5jb2RlZGAsXG4gKiBvciBhIG1pbWUgdHlwZS5cbiAqXG4gKiBJZiBubyB0eXBlcyBtYXRjaCwgYGZhbHNlYCBpcyByZXR1cm5lZC5cbiAqIE90aGVyd2lzZSwgdGhlIGZpcnN0IGB0eXBlYCB0aGF0IG1hdGNoZXMgaXMgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge0FycmF5fSB0eXBlc1xuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHR5cGVpcyAodmFsdWUsIHR5cGVzXykge1xuICB2YXIgaVxuICB2YXIgdHlwZXMgPSB0eXBlc19cblxuICAvLyByZW1vdmUgcGFyYW1ldGVycyBhbmQgbm9ybWFsaXplXG4gIHZhciB2YWwgPSB0cnlOb3JtYWxpemVUeXBlKHZhbHVlKVxuXG4gIC8vIG5vIHR5cGUgb3IgaW52YWxpZFxuICBpZiAoIXZhbCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gc3VwcG9ydCBmbGF0dGVuZWQgYXJndW1lbnRzXG4gIGlmICh0eXBlcyAmJiAhQXJyYXkuaXNBcnJheSh0eXBlcykpIHtcbiAgICB0eXBlcyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSlcbiAgICBmb3IgKGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHR5cGVzW2ldID0gYXJndW1lbnRzW2kgKyAxXVxuICAgIH1cbiAgfVxuXG4gIC8vIG5vIHR5cGVzLCByZXR1cm4gdGhlIGNvbnRlbnQgdHlwZVxuICBpZiAoIXR5cGVzIHx8ICF0eXBlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gdmFsXG4gIH1cblxuICB2YXIgdHlwZVxuICBmb3IgKGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobWltZU1hdGNoKG5vcm1hbGl6ZSh0eXBlID0gdHlwZXNbaV0pLCB2YWwpKSB7XG4gICAgICByZXR1cm4gdHlwZVswXSA9PT0gJysnIHx8IHR5cGUuaW5kZXhPZignKicpICE9PSAtMVxuICAgICAgICA/IHZhbFxuICAgICAgICA6IHR5cGVcbiAgICB9XG4gIH1cblxuICAvLyBubyBtYXRjaGVzXG4gIHJldHVybiBmYWxzZVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgcmVxdWVzdCBoYXMgYSByZXF1ZXN0IGJvZHkuXG4gKiBBIHJlcXVlc3Qgd2l0aCBhIGJvZHkgX19tdXN0X18gZWl0aGVyIGhhdmUgYHRyYW5zZmVyLWVuY29kaW5nYFxuICogb3IgYGNvbnRlbnQtbGVuZ3RoYCBoZWFkZXJzIHNldC5cbiAqIGh0dHA6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjNC5odG1sI3NlYzQuM1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZXF1ZXN0XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGhhc2JvZHkgKHJlcSkge1xuICByZXR1cm4gcmVxLmhlYWRlcnNbJ3RyYW5zZmVyLWVuY29kaW5nJ10gIT09IHVuZGVmaW5lZCB8fFxuICAgICFpc05hTihyZXEuaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSlcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgaW5jb21pbmcgcmVxdWVzdCBjb250YWlucyB0aGUgXCJDb250ZW50LVR5cGVcIlxuICogaGVhZGVyIGZpZWxkLCBhbmQgaXQgY29udGFpbnMgYW55IG9mIHRoZSBnaXZlIG1pbWUgYHR5cGVgcy5cbiAqIElmIHRoZXJlIGlzIG5vIHJlcXVlc3QgYm9keSwgYG51bGxgIGlzIHJldHVybmVkLlxuICogSWYgdGhlcmUgaXMgbm8gY29udGVudCB0eXBlLCBgZmFsc2VgIGlzIHJldHVybmVkLlxuICogT3RoZXJ3aXNlLCBpdCByZXR1cm5zIHRoZSBmaXJzdCBgdHlwZWAgdGhhdCBtYXRjaGVzLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAvLyBXaXRoIENvbnRlbnQtVHlwZTogdGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04XG4gKiAgICAgdGhpcy5pcygnaHRtbCcpOyAvLyA9PiAnaHRtbCdcbiAqICAgICB0aGlzLmlzKCd0ZXh0L2h0bWwnKTsgLy8gPT4gJ3RleHQvaHRtbCdcbiAqICAgICB0aGlzLmlzKCd0ZXh0LyonLCAnYXBwbGljYXRpb24vanNvbicpOyAvLyA9PiAndGV4dC9odG1sJ1xuICpcbiAqICAgICAvLyBXaGVuIENvbnRlbnQtVHlwZSBpcyBhcHBsaWNhdGlvbi9qc29uXG4gKiAgICAgdGhpcy5pcygnanNvbicsICd1cmxlbmNvZGVkJyk7IC8vID0+ICdqc29uJ1xuICogICAgIHRoaXMuaXMoJ2FwcGxpY2F0aW9uL2pzb24nKTsgLy8gPT4gJ2FwcGxpY2F0aW9uL2pzb24nXG4gKiAgICAgdGhpcy5pcygnaHRtbCcsICdhcHBsaWNhdGlvbi8qJyk7IC8vID0+ICdhcHBsaWNhdGlvbi9qc29uJ1xuICpcbiAqICAgICB0aGlzLmlzKCdodG1sJyk7IC8vID0+IGZhbHNlXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IHR5cGVzLi4uXG4gKiBAcmV0dXJuIHtTdHJpbmd8ZmFsc2V8bnVsbH1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiB0eXBlb2ZyZXF1ZXN0IChyZXEsIHR5cGVzXykge1xuICB2YXIgdHlwZXMgPSB0eXBlc19cblxuICAvLyBubyBib2R5XG4gIGlmICghaGFzYm9keShyZXEpKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8vIHN1cHBvcnQgZmxhdHRlbmVkIGFyZ3VtZW50c1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICB0eXBlcyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0eXBlc1tpXSA9IGFyZ3VtZW50c1tpICsgMV1cbiAgICB9XG4gIH1cblxuICAvLyByZXF1ZXN0IGNvbnRlbnQgdHlwZVxuICB2YXIgdmFsdWUgPSByZXEuaGVhZGVyc1snY29udGVudC10eXBlJ11cblxuICByZXR1cm4gdHlwZWlzKHZhbHVlLCB0eXBlcylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSBtaW1lIHR5cGUuXG4gKiBJZiBpdCdzIGEgc2hvcnRoYW5kLCBleHBhbmQgaXQgdG8gYSB2YWxpZCBtaW1lIHR5cGUuXG4gKlxuICogSW4gZ2VuZXJhbCwgeW91IHByb2JhYmx5IHdhbnQ6XG4gKlxuICogICB2YXIgdHlwZSA9IGlzKHJlcSwgWyd1cmxlbmNvZGVkJywgJ2pzb24nLCAnbXVsdGlwYXJ0J10pO1xuICpcbiAqIFRoZW4gdXNlIHRoZSBhcHByb3ByaWF0ZSBib2R5IHBhcnNlcnMuXG4gKiBUaGVzZSB0aHJlZSBhcmUgdGhlIG1vc3QgY29tbW9uIHJlcXVlc3QgYm9keSB0eXBlc1xuICogYW5kIGFyZSB0aHVzIGVuc3VyZWQgdG8gd29yay5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemUgKHR5cGUpIHtcbiAgaWYgKHR5cGVvZiB0eXBlICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGludmFsaWQgdHlwZVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAndXJsZW5jb2RlZCc6XG4gICAgICByZXR1cm4gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICBjYXNlICdtdWx0aXBhcnQnOlxuICAgICAgcmV0dXJuICdtdWx0aXBhcnQvKidcbiAgfVxuXG4gIGlmICh0eXBlWzBdID09PSAnKycpIHtcbiAgICAvLyBcIitqc29uXCIgLT4gXCIqLyoranNvblwiIGV4cGFuZG9cbiAgICByZXR1cm4gJyovKicgKyB0eXBlXG4gIH1cblxuICByZXR1cm4gdHlwZS5pbmRleE9mKCcvJykgPT09IC0xXG4gICAgPyBtaW1lLmxvb2t1cCh0eXBlKVxuICAgIDogdHlwZVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGBleHBlY3RlZGAgbWltZSB0eXBlXG4gKiBtYXRjaGVzIGBhY3R1YWxgIG1pbWUgdHlwZSB3aXRoXG4gKiB3aWxkY2FyZCBhbmQgK3N1ZmZpeCBzdXBwb3J0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBleHBlY3RlZFxuICogQHBhcmFtIHtTdHJpbmd9IGFjdHVhbFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbWltZU1hdGNoIChleHBlY3RlZCwgYWN0dWFsKSB7XG4gIC8vIGludmFsaWQgdHlwZVxuICBpZiAoZXhwZWN0ZWQgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBzcGxpdCB0eXBlc1xuICB2YXIgYWN0dWFsUGFydHMgPSBhY3R1YWwuc3BsaXQoJy8nKVxuICB2YXIgZXhwZWN0ZWRQYXJ0cyA9IGV4cGVjdGVkLnNwbGl0KCcvJylcblxuICAvLyBpbnZhbGlkIGZvcm1hdFxuICBpZiAoYWN0dWFsUGFydHMubGVuZ3RoICE9PSAyIHx8IGV4cGVjdGVkUGFydHMubGVuZ3RoICE9PSAyKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyB2YWxpZGF0ZSB0eXBlXG4gIGlmIChleHBlY3RlZFBhcnRzWzBdICE9PSAnKicgJiYgZXhwZWN0ZWRQYXJ0c1swXSAhPT0gYWN0dWFsUGFydHNbMF0pIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIHZhbGlkYXRlIHN1ZmZpeCB3aWxkY2FyZFxuICBpZiAoZXhwZWN0ZWRQYXJ0c1sxXS5zdWJzdHIoMCwgMikgPT09ICcqKycpIHtcbiAgICByZXR1cm4gZXhwZWN0ZWRQYXJ0c1sxXS5sZW5ndGggPD0gYWN0dWFsUGFydHNbMV0ubGVuZ3RoICsgMSAmJlxuICAgICAgZXhwZWN0ZWRQYXJ0c1sxXS5zdWJzdHIoMSkgPT09IGFjdHVhbFBhcnRzWzFdLnN1YnN0cigxIC0gZXhwZWN0ZWRQYXJ0c1sxXS5sZW5ndGgpXG4gIH1cblxuICAvLyB2YWxpZGF0ZSBzdWJ0eXBlXG4gIGlmIChleHBlY3RlZFBhcnRzWzFdICE9PSAnKicgJiYgZXhwZWN0ZWRQYXJ0c1sxXSAhPT0gYWN0dWFsUGFydHNbMV0pIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiB0cnVlXG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdHlwZSBhbmQgcmVtb3ZlIHBhcmFtZXRlcnMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVR5cGUgKHZhbHVlKSB7XG4gIC8vIHBhcnNlIHRoZSB0eXBlXG4gIHZhciB0eXBlID0gdHlwZXIucGFyc2UodmFsdWUpXG5cbiAgLy8gcmVtb3ZlIHRoZSBwYXJhbWV0ZXJzXG4gIHR5cGUucGFyYW1ldGVycyA9IHVuZGVmaW5lZFxuXG4gIC8vIHJlZm9ybWF0IGl0XG4gIHJldHVybiB0eXBlci5mb3JtYXQodHlwZSlcbn1cblxuLyoqXG4gKiBUcnkgdG8gbm9ybWFsaXplIGEgdHlwZSBhbmQgcmVtb3ZlIHBhcmFtZXRlcnMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHRyeU5vcm1hbGl6ZVR5cGUgKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gbm9ybWFsaXplVHlwZSh2YWx1ZSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuIiwiLyohXG4gKiBwYXJzZXVybFxuICogQ29weXJpZ2h0KGMpIDIwMTQgSm9uYXRoYW4gT25nXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE3IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgdXJsID0gcmVxdWlyZSgndXJsJylcbnZhciBwYXJzZSA9IHVybC5wYXJzZVxudmFyIFVybCA9IHVybC5VcmxcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNldXJsXG5tb2R1bGUuZXhwb3J0cy5vcmlnaW5hbCA9IG9yaWdpbmFsdXJsXG5cbi8qKlxuICogUGFyc2UgdGhlIGByZXFgIHVybCB3aXRoIG1lbW9pemF0aW9uLlxuICpcbiAqIEBwYXJhbSB7U2VydmVyUmVxdWVzdH0gcmVxXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gcGFyc2V1cmwgKHJlcSkge1xuICB2YXIgdXJsID0gcmVxLnVybFxuXG4gIGlmICh1cmwgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIFVSTCBpcyB1bmRlZmluZWRcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICB2YXIgcGFyc2VkID0gcmVxLl9wYXJzZWRVcmxcblxuICBpZiAoZnJlc2godXJsLCBwYXJzZWQpKSB7XG4gICAgLy8gUmV0dXJuIGNhY2hlZCBVUkwgcGFyc2VcbiAgICByZXR1cm4gcGFyc2VkXG4gIH1cblxuICAvLyBQYXJzZSB0aGUgVVJMXG4gIHBhcnNlZCA9IGZhc3RwYXJzZSh1cmwpXG4gIHBhcnNlZC5fcmF3ID0gdXJsXG5cbiAgcmV0dXJuIChyZXEuX3BhcnNlZFVybCA9IHBhcnNlZClcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGByZXFgIG9yaWdpbmFsIHVybCB3aXRoIGZhbGxiYWNrIGFuZCBtZW1vaXphdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1NlcnZlclJlcXVlc3R9IHJlcVxuICogQHJldHVybiB7T2JqZWN0fVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIG9yaWdpbmFsdXJsIChyZXEpIHtcbiAgdmFyIHVybCA9IHJlcS5vcmlnaW5hbFVybFxuXG4gIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuICAgIC8vIEZhbGxiYWNrXG4gICAgcmV0dXJuIHBhcnNldXJsKHJlcSlcbiAgfVxuXG4gIHZhciBwYXJzZWQgPSByZXEuX3BhcnNlZE9yaWdpbmFsVXJsXG5cbiAgaWYgKGZyZXNoKHVybCwgcGFyc2VkKSkge1xuICAgIC8vIFJldHVybiBjYWNoZWQgVVJMIHBhcnNlXG4gICAgcmV0dXJuIHBhcnNlZFxuICB9XG5cbiAgLy8gUGFyc2UgdGhlIFVSTFxuICBwYXJzZWQgPSBmYXN0cGFyc2UodXJsKVxuICBwYXJzZWQuX3JhdyA9IHVybFxuXG4gIHJldHVybiAocmVxLl9wYXJzZWRPcmlnaW5hbFVybCA9IHBhcnNlZClcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGBzdHJgIHVybCB3aXRoIGZhc3QtcGF0aCBzaG9ydC1jdXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmYXN0cGFyc2UgKHN0cikge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycgfHwgc3RyLmNoYXJDb2RlQXQoMCkgIT09IDB4MmYgLyogLyAqLykge1xuICAgIHJldHVybiBwYXJzZShzdHIpXG4gIH1cblxuICB2YXIgcGF0aG5hbWUgPSBzdHJcbiAgdmFyIHF1ZXJ5ID0gbnVsbFxuICB2YXIgc2VhcmNoID0gbnVsbFxuXG4gIC8vIFRoaXMgdGFrZXMgdGhlIHJlZ2V4cCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9wdWxsLzc4NzhcbiAgLy8gV2hpY2ggaXMgL14oXFwvW14/I1xcc10qKShcXD9bXiNcXHNdKik/JC9cbiAgLy8gQW5kIHVucm9sbHMgaXQgaW50byBhIGZvciBsb29wXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgc3dpdGNoIChzdHIuY2hhckNvZGVBdChpKSkge1xuICAgICAgY2FzZSAweDNmOiAvKiA/ICAqL1xuICAgICAgICBpZiAoc2VhcmNoID09PSBudWxsKSB7XG4gICAgICAgICAgcGF0aG5hbWUgPSBzdHIuc3Vic3RyaW5nKDAsIGkpXG4gICAgICAgICAgcXVlcnkgPSBzdHIuc3Vic3RyaW5nKGkgKyAxKVxuICAgICAgICAgIHNlYXJjaCA9IHN0ci5zdWJzdHJpbmcoaSlcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAweDA5OiAvKiBcXHQgKi9cbiAgICAgIGNhc2UgMHgwYTogLyogXFxuICovXG4gICAgICBjYXNlIDB4MGM6IC8qIFxcZiAqL1xuICAgICAgY2FzZSAweDBkOiAvKiBcXHIgKi9cbiAgICAgIGNhc2UgMHgyMDogLyogICAgKi9cbiAgICAgIGNhc2UgMHgyMzogLyogIyAgKi9cbiAgICAgIGNhc2UgMHhhMDpcbiAgICAgIGNhc2UgMHhmZWZmOlxuICAgICAgICByZXR1cm4gcGFyc2Uoc3RyKVxuICAgIH1cbiAgfVxuXG4gIHZhciB1cmwgPSBVcmwgIT09IHVuZGVmaW5lZFxuICAgID8gbmV3IFVybCgpXG4gICAgOiB7fVxuXG4gIHVybC5wYXRoID0gc3RyXG4gIHVybC5ocmVmID0gc3RyXG4gIHVybC5wYXRobmFtZSA9IHBhdGhuYW1lXG5cbiAgaWYgKHNlYXJjaCAhPT0gbnVsbCkge1xuICAgIHVybC5xdWVyeSA9IHF1ZXJ5XG4gICAgdXJsLnNlYXJjaCA9IHNlYXJjaFxuICB9XG5cbiAgcmV0dXJuIHVybFxufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBwYXJzZWQgaXMgc3RpbGwgZnJlc2ggZm9yIHVybC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyc2VkVXJsXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmcmVzaCAodXJsLCBwYXJzZWRVcmwpIHtcbiAgcmV0dXJuIHR5cGVvZiBwYXJzZWRVcmwgPT09ICdvYmplY3QnICYmXG4gICAgcGFyc2VkVXJsICE9PSBudWxsICYmXG4gICAgKFVybCA9PT0gdW5kZWZpbmVkIHx8IHBhcnNlZFVybCBpbnN0YW5jZW9mIFVybCkgJiZcbiAgICBwYXJzZWRVcmwuX3JhdyA9PT0gdXJsXG59XG4iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBNRDUgPSByZXF1aXJlKCdtZDUuanMnKVxudmFyIFJJUEVNRDE2MCA9IHJlcXVpcmUoJ3JpcGVtZDE2MCcpXG52YXIgc2hhID0gcmVxdWlyZSgnc2hhLmpzJylcbnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxuXG5mdW5jdGlvbiBIYXNoIChoYXNoKSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcblxuICB0aGlzLl9oYXNoID0gaGFzaFxufVxuXG5pbmhlcml0cyhIYXNoLCBCYXNlKVxuXG5IYXNoLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbn1cblxuSGFzaC5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faGFzaC5kaWdlc3QoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2ggKGFsZykge1xuICBhbGcgPSBhbGcudG9Mb3dlckNhc2UoKVxuICBpZiAoYWxnID09PSAnbWQ1JykgcmV0dXJuIG5ldyBNRDUoKVxuICBpZiAoYWxnID09PSAncm1kMTYwJyB8fCBhbGcgPT09ICdyaXBlbWQxNjAnKSByZXR1cm4gbmV3IFJJUEVNRDE2MCgpXG5cbiAgcmV0dXJuIG5ldyBIYXNoKHNoYShhbGcpKVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4b3IgKGEsIGIpIHtcbiAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgdmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBidWZmZXJbaV0gPSBhW2ldIF4gYltpXVxuICB9XG5cbiAgcmV0dXJuIGJ1ZmZlclxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBCbG9ja0hhc2goKSB7XG4gIHRoaXMucGVuZGluZyA9IG51bGw7XG4gIHRoaXMucGVuZGluZ1RvdGFsID0gMDtcbiAgdGhpcy5ibG9ja1NpemUgPSB0aGlzLmNvbnN0cnVjdG9yLmJsb2NrU2l6ZTtcbiAgdGhpcy5vdXRTaXplID0gdGhpcy5jb25zdHJ1Y3Rvci5vdXRTaXplO1xuICB0aGlzLmhtYWNTdHJlbmd0aCA9IHRoaXMuY29uc3RydWN0b3IuaG1hY1N0cmVuZ3RoO1xuICB0aGlzLnBhZExlbmd0aCA9IHRoaXMuY29uc3RydWN0b3IucGFkTGVuZ3RoIC8gODtcbiAgdGhpcy5lbmRpYW4gPSAnYmlnJztcblxuICB0aGlzLl9kZWx0YTggPSB0aGlzLmJsb2NrU2l6ZSAvIDg7XG4gIHRoaXMuX2RlbHRhMzIgPSB0aGlzLmJsb2NrU2l6ZSAvIDMyO1xufVxuZXhwb3J0cy5CbG9ja0hhc2ggPSBCbG9ja0hhc2g7XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKG1zZywgZW5jKSB7XG4gIC8vIENvbnZlcnQgbWVzc2FnZSB0byBhcnJheSwgcGFkIGl0LCBhbmQgam9pbiBpbnRvIDMyYml0IGJsb2Nrc1xuICBtc2cgPSB1dGlscy50b0FycmF5KG1zZywgZW5jKTtcbiAgaWYgKCF0aGlzLnBlbmRpbmcpXG4gICAgdGhpcy5wZW5kaW5nID0gbXNnO1xuICBlbHNlXG4gICAgdGhpcy5wZW5kaW5nID0gdGhpcy5wZW5kaW5nLmNvbmNhdChtc2cpO1xuICB0aGlzLnBlbmRpbmdUb3RhbCArPSBtc2cubGVuZ3RoO1xuXG4gIC8vIEVub3VnaCBkYXRhLCB0cnkgdXBkYXRpbmdcbiAgaWYgKHRoaXMucGVuZGluZy5sZW5ndGggPj0gdGhpcy5fZGVsdGE4KSB7XG4gICAgbXNnID0gdGhpcy5wZW5kaW5nO1xuXG4gICAgLy8gUHJvY2VzcyBwZW5kaW5nIGRhdGEgaW4gYmxvY2tzXG4gICAgdmFyIHIgPSBtc2cubGVuZ3RoICUgdGhpcy5fZGVsdGE4O1xuICAgIHRoaXMucGVuZGluZyA9IG1zZy5zbGljZShtc2cubGVuZ3RoIC0gciwgbXNnLmxlbmd0aCk7XG4gICAgaWYgKHRoaXMucGVuZGluZy5sZW5ndGggPT09IDApXG4gICAgICB0aGlzLnBlbmRpbmcgPSBudWxsO1xuXG4gICAgbXNnID0gdXRpbHMuam9pbjMyKG1zZywgMCwgbXNnLmxlbmd0aCAtIHIsIHRoaXMuZW5kaWFuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkgKz0gdGhpcy5fZGVsdGEzMilcbiAgICAgIHRoaXMuX3VwZGF0ZShtc2csIGksIGkgKyB0aGlzLl9kZWx0YTMyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuQmxvY2tIYXNoLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIHRoaXMudXBkYXRlKHRoaXMuX3BhZCgpKTtcbiAgYXNzZXJ0KHRoaXMucGVuZGluZyA9PT0gbnVsbCk7XG5cbiAgcmV0dXJuIHRoaXMuX2RpZ2VzdChlbmMpO1xufTtcblxuQmxvY2tIYXNoLnByb3RvdHlwZS5fcGFkID0gZnVuY3Rpb24gcGFkKCkge1xuICB2YXIgbGVuID0gdGhpcy5wZW5kaW5nVG90YWw7XG4gIHZhciBieXRlcyA9IHRoaXMuX2RlbHRhODtcbiAgdmFyIGsgPSBieXRlcyAtICgobGVuICsgdGhpcy5wYWRMZW5ndGgpICUgYnl0ZXMpO1xuICB2YXIgcmVzID0gbmV3IEFycmF5KGsgKyB0aGlzLnBhZExlbmd0aCk7XG4gIHJlc1swXSA9IDB4ODA7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgazsgaSsrKVxuICAgIHJlc1tpXSA9IDA7XG5cbiAgLy8gQXBwZW5kIGxlbmd0aFxuICBsZW4gPDw9IDM7XG4gIGlmICh0aGlzLmVuZGlhbiA9PT0gJ2JpZycpIHtcbiAgICBmb3IgKHZhciB0ID0gODsgdCA8IHRoaXMucGFkTGVuZ3RoOyB0KyspXG4gICAgICByZXNbaSsrXSA9IDA7XG5cbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAyNCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMTYpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDgpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IGxlbiAmIDB4ZmY7XG4gIH0gZWxzZSB7XG4gICAgcmVzW2krK10gPSBsZW4gJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gOCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMTYpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDI0KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuXG4gICAgZm9yICh0ID0gODsgdCA8IHRoaXMucGFkTGVuZ3RoOyB0KyspXG4gICAgICByZXNbaSsrXSA9IDA7XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcbiIsInZhciBhc24xID0gZXhwb3J0cztcblxuYXNuMS5iaWdudW0gPSByZXF1aXJlKCdibi5qcycpO1xuXG5hc24xLmRlZmluZSA9IHJlcXVpcmUoJy4vYXNuMS9hcGknKS5kZWZpbmU7XG5hc24xLmJhc2UgPSByZXF1aXJlKCcuL2FzbjEvYmFzZScpO1xuYXNuMS5jb25zdGFudHMgPSByZXF1aXJlKCcuL2FzbjEvY29uc3RhbnRzJyk7XG5hc24xLmRlY29kZXJzID0gcmVxdWlyZSgnLi9hc24xL2RlY29kZXJzJyk7XG5hc24xLmVuY29kZXJzID0gcmVxdWlyZSgnLi9hc24xL2VuY29kZXJzJyk7XG4iLCJ2YXIgYmFzZSA9IGV4cG9ydHM7XG5cbmJhc2UuUmVwb3J0ZXIgPSByZXF1aXJlKCcuL3JlcG9ydGVyJykuUmVwb3J0ZXI7XG5iYXNlLkRlY29kZXJCdWZmZXIgPSByZXF1aXJlKCcuL2J1ZmZlcicpLkRlY29kZXJCdWZmZXI7XG5iYXNlLkVuY29kZXJCdWZmZXIgPSByZXF1aXJlKCcuL2J1ZmZlcicpLkVuY29kZXJCdWZmZXI7XG5iYXNlLk5vZGUgPSByZXF1aXJlKCcuL25vZGUnKTtcbiIsIi8qIVxuICogY29udGVudC10eXBlXG4gKiBDb3B5cmlnaHQoYykgMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogUmVnRXhwIHRvIG1hdGNoICooIFwiO1wiIHBhcmFtZXRlciApIGluIFJGQyA3MjMxIHNlYyAzLjEuMS4xXG4gKlxuICogcGFyYW1ldGVyICAgICA9IHRva2VuIFwiPVwiICggdG9rZW4gLyBxdW90ZWQtc3RyaW5nIClcbiAqIHRva2VuICAgICAgICAgPSAxKnRjaGFyXG4gKiB0Y2hhciAgICAgICAgID0gXCIhXCIgLyBcIiNcIiAvIFwiJFwiIC8gXCIlXCIgLyBcIiZcIiAvIFwiJ1wiIC8gXCIqXCJcbiAqICAgICAgICAgICAgICAgLyBcIitcIiAvIFwiLVwiIC8gXCIuXCIgLyBcIl5cIiAvIFwiX1wiIC8gXCJgXCIgLyBcInxcIiAvIFwiflwiXG4gKiAgICAgICAgICAgICAgIC8gRElHSVQgLyBBTFBIQVxuICogICAgICAgICAgICAgICA7IGFueSBWQ0hBUiwgZXhjZXB0IGRlbGltaXRlcnNcbiAqIHF1b3RlZC1zdHJpbmcgPSBEUVVPVEUgKiggcWR0ZXh0IC8gcXVvdGVkLXBhaXIgKSBEUVVPVEVcbiAqIHFkdGV4dCAgICAgICAgPSBIVEFCIC8gU1AgLyAleDIxIC8gJXgyMy01QiAvICV4NUQtN0UgLyBvYnMtdGV4dFxuICogb2JzLXRleHQgICAgICA9ICV4ODAtRkZcbiAqIHF1b3RlZC1wYWlyICAgPSBcIlxcXCIgKCBIVEFCIC8gU1AgLyBWQ0hBUiAvIG9icy10ZXh0IClcbiAqL1xudmFyIFBBUkFNX1JFR0VYUCA9IC87ICooWyEjJCUmJyorLl5fYHx+MC05QS1aYS16LV0rKSAqPSAqKFwiKD86W1xcdTAwMGJcXHUwMDIwXFx1MDAyMVxcdTAwMjMtXFx1MDA1YlxcdTAwNWQtXFx1MDA3ZVxcdTAwODAtXFx1MDBmZl18XFxcXFtcXHUwMDBiXFx1MDAyMC1cXHUwMGZmXSkqXCJ8WyEjJCUmJyorLl5fYHx+MC05QS1aYS16LV0rKSAqL2dcbnZhciBURVhUX1JFR0VYUCA9IC9eW1xcdTAwMGJcXHUwMDIwLVxcdTAwN2VcXHUwMDgwLVxcdTAwZmZdKyQvXG52YXIgVE9LRU5fUkVHRVhQID0gL15bISMkJSYnKisuXl9gfH4wLTlBLVphLXotXSskL1xuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCBxdW90ZWQtcGFpciBpbiBSRkMgNzIzMCBzZWMgMy4yLjZcbiAqXG4gKiBxdW90ZWQtcGFpciA9IFwiXFxcIiAoIEhUQUIgLyBTUCAvIFZDSEFSIC8gb2JzLXRleHQgKVxuICogb2JzLXRleHQgICAgPSAleDgwLUZGXG4gKi9cbnZhciBRRVNDX1JFR0VYUCA9IC9cXFxcKFtcXHUwMDBiXFx1MDAyMC1cXHUwMGZmXSkvZ1xuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCBjaGFycyB0aGF0IG11c3QgYmUgcXVvdGVkLXBhaXIgaW4gUkZDIDcyMzAgc2VjIDMuMi42XG4gKi9cbnZhciBRVU9URV9SRUdFWFAgPSAvKFtcXFxcXCJdKS9nXG5cbi8qKlxuICogUmVnRXhwIHRvIG1hdGNoIHR5cGUgaW4gUkZDIDcyMzEgc2VjIDMuMS4xLjFcbiAqXG4gKiBtZWRpYS10eXBlID0gdHlwZSBcIi9cIiBzdWJ0eXBlXG4gKiB0eXBlICAgICAgID0gdG9rZW5cbiAqIHN1YnR5cGUgICAgPSB0b2tlblxuICovXG52YXIgVFlQRV9SRUdFWFAgPSAvXlshIyQlJicqKy5eX2B8fjAtOUEtWmEtei1dK1xcL1shIyQlJicqKy5eX2B8fjAtOUEtWmEtei1dKyQvXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0cy5mb3JtYXQgPSBmb3JtYXRcbmV4cG9ydHMucGFyc2UgPSBwYXJzZVxuXG4vKipcbiAqIEZvcm1hdCBvYmplY3QgdG8gbWVkaWEgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0IChvYmopIHtcbiAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBvYmogaXMgcmVxdWlyZWQnKVxuICB9XG5cbiAgdmFyIHBhcmFtZXRlcnMgPSBvYmoucGFyYW1ldGVyc1xuICB2YXIgdHlwZSA9IG9iai50eXBlXG5cbiAgaWYgKCF0eXBlIHx8ICFUWVBFX1JFR0VYUC50ZXN0KHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCB0eXBlJylcbiAgfVxuXG4gIHZhciBzdHJpbmcgPSB0eXBlXG5cbiAgLy8gYXBwZW5kIHBhcmFtZXRlcnNcbiAgaWYgKHBhcmFtZXRlcnMgJiYgdHlwZW9mIHBhcmFtZXRlcnMgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHBhcmFtXG4gICAgdmFyIHBhcmFtcyA9IE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpLnNvcnQoKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhcmFtID0gcGFyYW1zW2ldXG5cbiAgICAgIGlmICghVE9LRU5fUkVHRVhQLnRlc3QocGFyYW0pKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgcGFyYW1ldGVyIG5hbWUnKVxuICAgICAgfVxuXG4gICAgICBzdHJpbmcgKz0gJzsgJyArIHBhcmFtICsgJz0nICsgcXN0cmluZyhwYXJhbWV0ZXJzW3BhcmFtXSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyaW5nXG59XG5cbi8qKlxuICogUGFyc2UgbWVkaWEgdHlwZSB0byBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBzdHJpbmdcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZSAoc3RyaW5nKSB7XG4gIGlmICghc3RyaW5nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgc3RyaW5nIGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIC8vIHN1cHBvcnQgcmVxL3Jlcy1saWtlIG9iamVjdHMgYXMgYXJndW1lbnRcbiAgdmFyIGhlYWRlciA9IHR5cGVvZiBzdHJpbmcgPT09ICdvYmplY3QnXG4gICAgPyBnZXRjb250ZW50dHlwZShzdHJpbmcpXG4gICAgOiBzdHJpbmdcblxuICBpZiAodHlwZW9mIGhlYWRlciAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzdHJpbmcgaXMgcmVxdWlyZWQgdG8gYmUgYSBzdHJpbmcnKVxuICB9XG5cbiAgdmFyIGluZGV4ID0gaGVhZGVyLmluZGV4T2YoJzsnKVxuICB2YXIgdHlwZSA9IGluZGV4ICE9PSAtMVxuICAgID8gaGVhZGVyLnN1YnN0cigwLCBpbmRleCkudHJpbSgpXG4gICAgOiBoZWFkZXIudHJpbSgpXG5cbiAgaWYgKCFUWVBFX1JFR0VYUC50ZXN0KHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBtZWRpYSB0eXBlJylcbiAgfVxuXG4gIHZhciBvYmogPSBuZXcgQ29udGVudFR5cGUodHlwZS50b0xvd2VyQ2FzZSgpKVxuXG4gIC8vIHBhcnNlIHBhcmFtZXRlcnNcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIHZhciBrZXlcbiAgICB2YXIgbWF0Y2hcbiAgICB2YXIgdmFsdWVcblxuICAgIFBBUkFNX1JFR0VYUC5sYXN0SW5kZXggPSBpbmRleFxuXG4gICAgd2hpbGUgKChtYXRjaCA9IFBBUkFNX1JFR0VYUC5leGVjKGhlYWRlcikpKSB7XG4gICAgICBpZiAobWF0Y2guaW5kZXggIT09IGluZGV4KSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgcGFyYW1ldGVyIGZvcm1hdCcpXG4gICAgICB9XG5cbiAgICAgIGluZGV4ICs9IG1hdGNoWzBdLmxlbmd0aFxuICAgICAga2V5ID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKVxuICAgICAgdmFsdWUgPSBtYXRjaFsyXVxuXG4gICAgICBpZiAodmFsdWVbMF0gPT09ICdcIicpIHtcbiAgICAgICAgLy8gcmVtb3ZlIHF1b3RlcyBhbmQgZXNjYXBlc1xuICAgICAgICB2YWx1ZSA9IHZhbHVlXG4gICAgICAgICAgLnN1YnN0cigxLCB2YWx1ZS5sZW5ndGggLSAyKVxuICAgICAgICAgIC5yZXBsYWNlKFFFU0NfUkVHRVhQLCAnJDEnKVxuICAgICAgfVxuXG4gICAgICBvYmoucGFyYW1ldGVyc1trZXldID0gdmFsdWVcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggIT09IGhlYWRlci5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgcGFyYW1ldGVyIGZvcm1hdCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9ialxufVxuXG4vKipcbiAqIEdldCBjb250ZW50LXR5cGUgZnJvbSByZXEvcmVzIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9XG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldGNvbnRlbnR0eXBlIChvYmopIHtcbiAgdmFyIGhlYWRlclxuXG4gIGlmICh0eXBlb2Ygb2JqLmdldEhlYWRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIHJlcy1saWtlXG4gICAgaGVhZGVyID0gb2JqLmdldEhlYWRlcignY29udGVudC10eXBlJylcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqLmhlYWRlcnMgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gcmVxLWxpa2VcbiAgICBoZWFkZXIgPSBvYmouaGVhZGVycyAmJiBvYmouaGVhZGVyc1snY29udGVudC10eXBlJ11cbiAgfVxuXG4gIGlmICh0eXBlb2YgaGVhZGVyICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NvbnRlbnQtdHlwZSBoZWFkZXIgaXMgbWlzc2luZyBmcm9tIG9iamVjdCcpXG4gIH1cblxuICByZXR1cm4gaGVhZGVyXG59XG5cbi8qKlxuICogUXVvdGUgYSBzdHJpbmcgaWYgbmVjZXNzYXJ5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWxcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcXN0cmluZyAodmFsKSB7XG4gIHZhciBzdHIgPSBTdHJpbmcodmFsKVxuXG4gIC8vIG5vIG5lZWQgdG8gcXVvdGUgdG9rZW5zXG4gIGlmIChUT0tFTl9SRUdFWFAudGVzdChzdHIpKSB7XG4gICAgcmV0dXJuIHN0clxuICB9XG5cbiAgaWYgKHN0ci5sZW5ndGggPiAwICYmICFURVhUX1JFR0VYUC50ZXN0KHN0cikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHBhcmFtZXRlciB2YWx1ZScpXG4gIH1cblxuICByZXR1cm4gJ1wiJyArIHN0ci5yZXBsYWNlKFFVT1RFX1JFR0VYUCwgJ1xcXFwkMScpICsgJ1wiJ1xufVxuXG4vKipcbiAqIENsYXNzIHRvIHJlcHJlc2VudCBhIGNvbnRlbnQgdHlwZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIENvbnRlbnRUeXBlICh0eXBlKSB7XG4gIHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5jcmVhdGUobnVsbClcbiAgdGhpcy50eXBlID0gdHlwZVxufVxuIiwiLyohXG4gKiBodHRwLWVycm9yc1xuICogQ29weXJpZ2h0KGMpIDIwMTQgSm9uYXRoYW4gT25nXG4gKiBDb3B5cmlnaHQoYykgMjAxNiBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGRlcHJlY2F0ZSA9IHJlcXVpcmUoJ2RlcGQnKSgnaHR0cC1lcnJvcnMnKVxudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnc2V0cHJvdG90eXBlb2YnKVxudmFyIHN0YXR1c2VzID0gcmVxdWlyZSgnc3RhdHVzZXMnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIHRvSWRlbnRpZmllciA9IHJlcXVpcmUoJ3RvaWRlbnRpZmllcicpXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVFcnJvclxubW9kdWxlLmV4cG9ydHMuSHR0cEVycm9yID0gY3JlYXRlSHR0cEVycm9yQ29uc3RydWN0b3IoKVxuXG4vLyBQb3B1bGF0ZSBleHBvcnRzIGZvciBhbGwgY29uc3RydWN0b3JzXG5wb3B1bGF0ZUNvbnN0cnVjdG9yRXhwb3J0cyhtb2R1bGUuZXhwb3J0cywgc3RhdHVzZXMuY29kZXMsIG1vZHVsZS5leHBvcnRzLkh0dHBFcnJvcilcblxuLyoqXG4gKiBHZXQgdGhlIGNvZGUgY2xhc3Mgb2YgYSBzdGF0dXMgY29kZS5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29kZUNsYXNzIChzdGF0dXMpIHtcbiAgcmV0dXJuIE51bWJlcihTdHJpbmcoc3RhdHVzKS5jaGFyQXQoMCkgKyAnMDAnKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBIVFRQIEVycm9yLlxuICpcbiAqIEByZXR1cm5zIHtFcnJvcn1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFcnJvciAoKSB7XG4gIC8vIHNvIG11Y2ggYXJpdHkgZ29pbmcgb24gfl9+XG4gIHZhciBlcnJcbiAgdmFyIG1zZ1xuICB2YXIgc3RhdHVzID0gNTAwXG4gIHZhciBwcm9wcyA9IHt9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3VtZW50c1tpXVxuICAgIGlmIChhcmcgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgZXJyID0gYXJnXG4gICAgICBzdGF0dXMgPSBlcnIuc3RhdHVzIHx8IGVyci5zdGF0dXNDb2RlIHx8IHN0YXR1c1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgc3dpdGNoICh0eXBlb2YgYXJnKSB7XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBtc2cgPSBhcmdcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgIHN0YXR1cyA9IGFyZ1xuICAgICAgICBpZiAoaSAhPT0gMCkge1xuICAgICAgICAgIGRlcHJlY2F0ZSgnbm9uLWZpcnN0LWFyZ3VtZW50IHN0YXR1cyBjb2RlOyByZXBsYWNlIHdpdGggY3JlYXRlRXJyb3IoJyArIGFyZyArICcsIC4uLiknKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICBwcm9wcyA9IGFyZ1xuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3RhdHVzID09PSAnbnVtYmVyJyAmJiAoc3RhdHVzIDwgNDAwIHx8IHN0YXR1cyA+PSA2MDApKSB7XG4gICAgZGVwcmVjYXRlKCdub24tZXJyb3Igc3RhdHVzIGNvZGU7IHVzZSBvbmx5IDR4eCBvciA1eHggc3RhdHVzIGNvZGVzJylcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3RhdHVzICE9PSAnbnVtYmVyJyB8fFxuICAgICghc3RhdHVzZXNbc3RhdHVzXSAmJiAoc3RhdHVzIDwgNDAwIHx8IHN0YXR1cyA+PSA2MDApKSkge1xuICAgIHN0YXR1cyA9IDUwMFxuICB9XG5cbiAgLy8gY29uc3RydWN0b3JcbiAgdmFyIEh0dHBFcnJvciA9IGNyZWF0ZUVycm9yW3N0YXR1c10gfHwgY3JlYXRlRXJyb3JbY29kZUNsYXNzKHN0YXR1cyldXG5cbiAgaWYgKCFlcnIpIHtcbiAgICAvLyBjcmVhdGUgZXJyb3JcbiAgICBlcnIgPSBIdHRwRXJyb3JcbiAgICAgID8gbmV3IEh0dHBFcnJvcihtc2cpXG4gICAgICA6IG5ldyBFcnJvcihtc2cgfHwgc3RhdHVzZXNbc3RhdHVzXSlcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShlcnIsIGNyZWF0ZUVycm9yKVxuICB9XG5cbiAgaWYgKCFIdHRwRXJyb3IgfHwgIShlcnIgaW5zdGFuY2VvZiBIdHRwRXJyb3IpIHx8IGVyci5zdGF0dXMgIT09IHN0YXR1cykge1xuICAgIC8vIGFkZCBwcm9wZXJ0aWVzIHRvIGdlbmVyaWMgZXJyb3JcbiAgICBlcnIuZXhwb3NlID0gc3RhdHVzIDwgNTAwXG4gICAgZXJyLnN0YXR1cyA9IGVyci5zdGF0dXNDb2RlID0gc3RhdHVzXG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBpZiAoa2V5ICE9PSAnc3RhdHVzJyAmJiBrZXkgIT09ICdzdGF0dXNDb2RlJykge1xuICAgICAgZXJyW2tleV0gPSBwcm9wc1trZXldXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVyclxufVxuXG4vKipcbiAqIENyZWF0ZSBIVFRQIGVycm9yIGFic3RyYWN0IGJhc2UgY2xhc3MuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUh0dHBFcnJvckNvbnN0cnVjdG9yICgpIHtcbiAgZnVuY3Rpb24gSHR0cEVycm9yICgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYW5ub3QgY29uc3RydWN0IGFic3RyYWN0IGNsYXNzJylcbiAgfVxuXG4gIGluaGVyaXRzKEh0dHBFcnJvciwgRXJyb3IpXG5cbiAgcmV0dXJuIEh0dHBFcnJvclxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNvbnN0cnVjdG9yIGZvciBhIGNsaWVudCBlcnJvci5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlQ2xpZW50RXJyb3JDb25zdHJ1Y3RvciAoSHR0cEVycm9yLCBuYW1lLCBjb2RlKSB7XG4gIHZhciBjbGFzc05hbWUgPSBuYW1lLm1hdGNoKC9FcnJvciQvKSA/IG5hbWUgOiBuYW1lICsgJ0Vycm9yJ1xuXG4gIGZ1bmN0aW9uIENsaWVudEVycm9yIChtZXNzYWdlKSB7XG4gICAgLy8gY3JlYXRlIHRoZSBlcnJvciBvYmplY3RcbiAgICB2YXIgbXNnID0gbWVzc2FnZSAhPSBudWxsID8gbWVzc2FnZSA6IHN0YXR1c2VzW2NvZGVdXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihtc2cpXG5cbiAgICAvLyBjYXB0dXJlIGEgc3RhY2sgdHJhY2UgdG8gdGhlIGNvbnN0cnVjdGlvbiBwb2ludFxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGVyciwgQ2xpZW50RXJyb3IpXG5cbiAgICAvLyBhZGp1c3QgdGhlIFtbUHJvdG90eXBlXV1cbiAgICBzZXRQcm90b3R5cGVPZihlcnIsIENsaWVudEVycm9yLnByb3RvdHlwZSlcblxuICAgIC8vIHJlZGVmaW5lIHRoZSBlcnJvciBtZXNzYWdlXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVyciwgJ21lc3NhZ2UnLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IG1zZyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSlcblxuICAgIC8vIHJlZGVmaW5lIHRoZSBlcnJvciBuYW1lXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVyciwgJ25hbWUnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBjbGFzc05hbWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pXG5cbiAgICByZXR1cm4gZXJyXG4gIH1cblxuICBpbmhlcml0cyhDbGllbnRFcnJvciwgSHR0cEVycm9yKVxuICBuYW1lRnVuYyhDbGllbnRFcnJvciwgY2xhc3NOYW1lKVxuXG4gIENsaWVudEVycm9yLnByb3RvdHlwZS5zdGF0dXMgPSBjb2RlXG4gIENsaWVudEVycm9yLnByb3RvdHlwZS5zdGF0dXNDb2RlID0gY29kZVxuICBDbGllbnRFcnJvci5wcm90b3R5cGUuZXhwb3NlID0gdHJ1ZVxuXG4gIHJldHVybiBDbGllbnRFcnJvclxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNvbnN0cnVjdG9yIGZvciBhIHNlcnZlciBlcnJvci5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU2VydmVyRXJyb3JDb25zdHJ1Y3RvciAoSHR0cEVycm9yLCBuYW1lLCBjb2RlKSB7XG4gIHZhciBjbGFzc05hbWUgPSBuYW1lLm1hdGNoKC9FcnJvciQvKSA/IG5hbWUgOiBuYW1lICsgJ0Vycm9yJ1xuXG4gIGZ1bmN0aW9uIFNlcnZlckVycm9yIChtZXNzYWdlKSB7XG4gICAgLy8gY3JlYXRlIHRoZSBlcnJvciBvYmplY3RcbiAgICB2YXIgbXNnID0gbWVzc2FnZSAhPSBudWxsID8gbWVzc2FnZSA6IHN0YXR1c2VzW2NvZGVdXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihtc2cpXG5cbiAgICAvLyBjYXB0dXJlIGEgc3RhY2sgdHJhY2UgdG8gdGhlIGNvbnN0cnVjdGlvbiBwb2ludFxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGVyciwgU2VydmVyRXJyb3IpXG5cbiAgICAvLyBhZGp1c3QgdGhlIFtbUHJvdG90eXBlXV1cbiAgICBzZXRQcm90b3R5cGVPZihlcnIsIFNlcnZlckVycm9yLnByb3RvdHlwZSlcblxuICAgIC8vIHJlZGVmaW5lIHRoZSBlcnJvciBtZXNzYWdlXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVyciwgJ21lc3NhZ2UnLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IG1zZyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSlcblxuICAgIC8vIHJlZGVmaW5lIHRoZSBlcnJvciBuYW1lXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVyciwgJ25hbWUnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBjbGFzc05hbWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pXG5cbiAgICByZXR1cm4gZXJyXG4gIH1cblxuICBpbmhlcml0cyhTZXJ2ZXJFcnJvciwgSHR0cEVycm9yKVxuICBuYW1lRnVuYyhTZXJ2ZXJFcnJvciwgY2xhc3NOYW1lKVxuXG4gIFNlcnZlckVycm9yLnByb3RvdHlwZS5zdGF0dXMgPSBjb2RlXG4gIFNlcnZlckVycm9yLnByb3RvdHlwZS5zdGF0dXNDb2RlID0gY29kZVxuICBTZXJ2ZXJFcnJvci5wcm90b3R5cGUuZXhwb3NlID0gZmFsc2VcblxuICByZXR1cm4gU2VydmVyRXJyb3Jcbn1cblxuLyoqXG4gKiBTZXQgdGhlIG5hbWUgb2YgYSBmdW5jdGlvbiwgaWYgcG9zc2libGUuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG5hbWVGdW5jIChmdW5jLCBuYW1lKSB7XG4gIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihmdW5jLCAnbmFtZScpXG5cbiAgaWYgKGRlc2MgJiYgZGVzYy5jb25maWd1cmFibGUpIHtcbiAgICBkZXNjLnZhbHVlID0gbmFtZVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmdW5jLCAnbmFtZScsIGRlc2MpXG4gIH1cbn1cblxuLyoqXG4gKiBQb3B1bGF0ZSB0aGUgZXhwb3J0cyBvYmplY3Qgd2l0aCBjb25zdHJ1Y3RvcnMgZm9yIGV2ZXJ5IGVycm9yIGNsYXNzLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwb3B1bGF0ZUNvbnN0cnVjdG9yRXhwb3J0cyAoZXhwb3J0cywgY29kZXMsIEh0dHBFcnJvcikge1xuICBjb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIGZvckVhY2hDb2RlIChjb2RlKSB7XG4gICAgdmFyIENvZGVFcnJvclxuICAgIHZhciBuYW1lID0gdG9JZGVudGlmaWVyKHN0YXR1c2VzW2NvZGVdKVxuXG4gICAgc3dpdGNoIChjb2RlQ2xhc3MoY29kZSkpIHtcbiAgICAgIGNhc2UgNDAwOlxuICAgICAgICBDb2RlRXJyb3IgPSBjcmVhdGVDbGllbnRFcnJvckNvbnN0cnVjdG9yKEh0dHBFcnJvciwgbmFtZSwgY29kZSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgNTAwOlxuICAgICAgICBDb2RlRXJyb3IgPSBjcmVhdGVTZXJ2ZXJFcnJvckNvbnN0cnVjdG9yKEh0dHBFcnJvciwgbmFtZSwgY29kZSlcbiAgICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBpZiAoQ29kZUVycm9yKSB7XG4gICAgICAvLyBleHBvcnQgdGhlIGNvbnN0cnVjdG9yXG4gICAgICBleHBvcnRzW2NvZGVdID0gQ29kZUVycm9yXG4gICAgICBleHBvcnRzW25hbWVdID0gQ29kZUVycm9yXG4gICAgfVxuICB9KVxuXG4gIC8vIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5XG4gIGV4cG9ydHNbXCJJJ21hdGVhcG90XCJdID0gZGVwcmVjYXRlLmZ1bmN0aW9uKGV4cG9ydHMuSW1BVGVhcG90LFxuICAgICdcIklcXCdtYXRlYXBvdFwiOyB1c2UgXCJJbUFUZWFwb3RcIiBpbnN0ZWFkJylcbn1cbiIsIi8qIVxuICogYm9keS1wYXJzZXJcbiAqIENvcHlyaWdodChjKSAyMDE0LTIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJ2h0dHAtZXJyb3JzJylcbnZhciBnZXRCb2R5ID0gcmVxdWlyZSgncmF3LWJvZHknKVxudmFyIGljb252ID0gcmVxdWlyZSgnaWNvbnYtbGl0ZScpXG52YXIgb25GaW5pc2hlZCA9IHJlcXVpcmUoJ29uLWZpbmlzaGVkJylcbnZhciB6bGliID0gcmVxdWlyZSgnemxpYicpXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSByZWFkXG5cbi8qKlxuICogUmVhZCBhIHJlcXVlc3QgaW50byBhIGJ1ZmZlciBhbmQgcGFyc2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHJlcVxuICogQHBhcmFtIHtvYmplY3R9IHJlc1xuICogQHBhcmFtIHtmdW5jdGlvbn0gbmV4dFxuICogQHBhcmFtIHtmdW5jdGlvbn0gcGFyc2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGRlYnVnXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiByZWFkIChyZXEsIHJlcywgbmV4dCwgcGFyc2UsIGRlYnVnLCBvcHRpb25zKSB7XG4gIHZhciBsZW5ndGhcbiAgdmFyIG9wdHMgPSBvcHRpb25zXG4gIHZhciBzdHJlYW1cblxuICAvLyBmbGFnIGFzIHBhcnNlZFxuICByZXEuX2JvZHkgPSB0cnVlXG5cbiAgLy8gcmVhZCBvcHRpb25zXG4gIHZhciBlbmNvZGluZyA9IG9wdHMuZW5jb2RpbmcgIT09IG51bGxcbiAgICA/IG9wdHMuZW5jb2RpbmdcbiAgICA6IG51bGxcbiAgdmFyIHZlcmlmeSA9IG9wdHMudmVyaWZ5XG5cbiAgdHJ5IHtcbiAgICAvLyBnZXQgdGhlIGNvbnRlbnQgc3RyZWFtXG4gICAgc3RyZWFtID0gY29udGVudHN0cmVhbShyZXEsIGRlYnVnLCBvcHRzLmluZmxhdGUpXG4gICAgbGVuZ3RoID0gc3RyZWFtLmxlbmd0aFxuICAgIHN0cmVhbS5sZW5ndGggPSB1bmRlZmluZWRcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIG5leHQoZXJyKVxuICB9XG5cbiAgLy8gc2V0IHJhdy1ib2R5IG9wdGlvbnNcbiAgb3B0cy5sZW5ndGggPSBsZW5ndGhcbiAgb3B0cy5lbmNvZGluZyA9IHZlcmlmeVxuICAgID8gbnVsbFxuICAgIDogZW5jb2RpbmdcblxuICAvLyBhc3NlcnQgY2hhcnNldCBpcyBzdXBwb3J0ZWRcbiAgaWYgKG9wdHMuZW5jb2RpbmcgPT09IG51bGwgJiYgZW5jb2RpbmcgIT09IG51bGwgJiYgIWljb252LmVuY29kaW5nRXhpc3RzKGVuY29kaW5nKSkge1xuICAgIHJldHVybiBuZXh0KGNyZWF0ZUVycm9yKDQxNSwgJ3Vuc3VwcG9ydGVkIGNoYXJzZXQgXCInICsgZW5jb2RpbmcudG9VcHBlckNhc2UoKSArICdcIicsIHtcbiAgICAgIGNoYXJzZXQ6IGVuY29kaW5nLnRvTG93ZXJDYXNlKCksXG4gICAgICB0eXBlOiAnY2hhcnNldC51bnN1cHBvcnRlZCdcbiAgICB9KSlcbiAgfVxuXG4gIC8vIHJlYWQgYm9keVxuICBkZWJ1ZygncmVhZCBib2R5JylcbiAgZ2V0Qm9keShzdHJlYW0sIG9wdHMsIGZ1bmN0aW9uIChlcnJvciwgYm9keSkge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgdmFyIF9lcnJvclxuXG4gICAgICBpZiAoZXJyb3IudHlwZSA9PT0gJ2VuY29kaW5nLnVuc3VwcG9ydGVkJykge1xuICAgICAgICAvLyBlY2hvIGJhY2sgY2hhcnNldFxuICAgICAgICBfZXJyb3IgPSBjcmVhdGVFcnJvcig0MTUsICd1bnN1cHBvcnRlZCBjaGFyc2V0IFwiJyArIGVuY29kaW5nLnRvVXBwZXJDYXNlKCkgKyAnXCInLCB7XG4gICAgICAgICAgY2hhcnNldDogZW5jb2RpbmcudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICB0eXBlOiAnY2hhcnNldC51bnN1cHBvcnRlZCdcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHNldCBzdGF0dXMgY29kZSBvbiBlcnJvclxuICAgICAgICBfZXJyb3IgPSBjcmVhdGVFcnJvcig0MDAsIGVycm9yKVxuICAgICAgfVxuXG4gICAgICAvLyByZWFkIG9mZiBlbnRpcmUgcmVxdWVzdFxuICAgICAgc3RyZWFtLnJlc3VtZSgpXG4gICAgICBvbkZpbmlzaGVkKHJlcSwgZnVuY3Rpb24gb25maW5pc2hlZCAoKSB7XG4gICAgICAgIG5leHQoY3JlYXRlRXJyb3IoNDAwLCBfZXJyb3IpKVxuICAgICAgfSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHZlcmlmeVxuICAgIGlmICh2ZXJpZnkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRlYnVnKCd2ZXJpZnkgYm9keScpXG4gICAgICAgIHZlcmlmeShyZXEsIHJlcywgYm9keSwgZW5jb2RpbmcpXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgbmV4dChjcmVhdGVFcnJvcig0MDMsIGVyciwge1xuICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgdHlwZTogZXJyLnR5cGUgfHwgJ2VudGl0eS52ZXJpZnkuZmFpbGVkJ1xuICAgICAgICB9KSlcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcGFyc2VcbiAgICB2YXIgc3RyID0gYm9keVxuICAgIHRyeSB7XG4gICAgICBkZWJ1ZygncGFyc2UgYm9keScpXG4gICAgICBzdHIgPSB0eXBlb2YgYm9keSAhPT0gJ3N0cmluZycgJiYgZW5jb2RpbmcgIT09IG51bGxcbiAgICAgICAgPyBpY29udi5kZWNvZGUoYm9keSwgZW5jb2RpbmcpXG4gICAgICAgIDogYm9keVxuICAgICAgcmVxLmJvZHkgPSBwYXJzZShzdHIpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBuZXh0KGNyZWF0ZUVycm9yKDQwMCwgZXJyLCB7XG4gICAgICAgIGJvZHk6IHN0cixcbiAgICAgICAgdHlwZTogZXJyLnR5cGUgfHwgJ2VudGl0eS5wYXJzZS5mYWlsZWQnXG4gICAgICB9KSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIG5leHQoKVxuICB9KVxufVxuXG4vKipcbiAqIEdldCB0aGUgY29udGVudCBzdHJlYW0gb2YgdGhlIHJlcXVlc3QuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHJlcVxuICogQHBhcmFtIHtmdW5jdGlvbn0gZGVidWdcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luZmxhdGU9dHJ1ZV1cbiAqIEByZXR1cm4ge29iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbnRlbnRzdHJlYW0gKHJlcSwgZGVidWcsIGluZmxhdGUpIHtcbiAgdmFyIGVuY29kaW5nID0gKHJlcS5oZWFkZXJzWydjb250ZW50LWVuY29kaW5nJ10gfHwgJ2lkZW50aXR5JykudG9Mb3dlckNhc2UoKVxuICB2YXIgbGVuZ3RoID0gcmVxLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ11cbiAgdmFyIHN0cmVhbVxuXG4gIGRlYnVnKCdjb250ZW50LWVuY29kaW5nIFwiJXNcIicsIGVuY29kaW5nKVxuXG4gIGlmIChpbmZsYXRlID09PSBmYWxzZSAmJiBlbmNvZGluZyAhPT0gJ2lkZW50aXR5Jykge1xuICAgIHRocm93IGNyZWF0ZUVycm9yKDQxNSwgJ2NvbnRlbnQgZW5jb2RpbmcgdW5zdXBwb3J0ZWQnLCB7XG4gICAgICBlbmNvZGluZzogZW5jb2RpbmcsXG4gICAgICB0eXBlOiAnZW5jb2RpbmcudW5zdXBwb3J0ZWQnXG4gICAgfSlcbiAgfVxuXG4gIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICBjYXNlICdkZWZsYXRlJzpcbiAgICAgIHN0cmVhbSA9IHpsaWIuY3JlYXRlSW5mbGF0ZSgpXG4gICAgICBkZWJ1ZygnaW5mbGF0ZSBib2R5JylcbiAgICAgIHJlcS5waXBlKHN0cmVhbSlcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnZ3ppcCc6XG4gICAgICBzdHJlYW0gPSB6bGliLmNyZWF0ZUd1bnppcCgpXG4gICAgICBkZWJ1ZygnZ3VuemlwIGJvZHknKVxuICAgICAgcmVxLnBpcGUoc3RyZWFtKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdpZGVudGl0eSc6XG4gICAgICBzdHJlYW0gPSByZXFcbiAgICAgIHN0cmVhbS5sZW5ndGggPSBsZW5ndGhcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IGNyZWF0ZUVycm9yKDQxNSwgJ3Vuc3VwcG9ydGVkIGNvbnRlbnQgZW5jb2RpbmcgXCInICsgZW5jb2RpbmcgKyAnXCInLCB7XG4gICAgICAgIGVuY29kaW5nOiBlbmNvZGluZyxcbiAgICAgICAgdHlwZTogJ2VuY29kaW5nLnVuc3VwcG9ydGVkJ1xuICAgICAgfSlcbiAgfVxuXG4gIHJldHVybiBzdHJlYW1cbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgaXNFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nIHx8IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBlbmNvZGluZyA9ICcnICsgZW5jb2Rpbmc7XG4gIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6Y2FzZSAndXRmOCc6Y2FzZSAndXRmLTgnOmNhc2UgJ2FzY2lpJzpjYXNlICdiaW5hcnknOmNhc2UgJ2Jhc2U2NCc6Y2FzZSAndWNzMic6Y2FzZSAndWNzLTInOmNhc2UgJ3V0ZjE2bGUnOmNhc2UgJ3V0Zi0xNmxlJzpjYXNlICdyYXcnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX25vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICBpZiAoIWVuYykgcmV0dXJuICd1dGY4JztcbiAgdmFyIHJldHJpZWQ7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmMpIHtcbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gJ3V0ZjgnO1xuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuICd1dGYxNmxlJztcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gJ2xhdGluMSc7XG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGVuYztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChyZXRyaWVkKSByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgICBlbmMgPSAoJycgKyBlbmMpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHJpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLy8gRG8gbm90IGNhY2hlIGBCdWZmZXIuaXNFbmNvZGluZ2Agd2hlbiBjaGVja2luZyBlbmNvZGluZyBuYW1lcyBhcyBzb21lXG4vLyBtb2R1bGVzIG1vbmtleS1wYXRjaCBpdCB0byBzdXBwb3J0IGFkZGl0aW9uYWwgZW5jb2RpbmdzXG5mdW5jdGlvbiBub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgdmFyIG5lbmMgPSBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKTtcbiAgaWYgKHR5cGVvZiBuZW5jICE9PSAnc3RyaW5nJyAmJiAoQnVmZmVyLmlzRW5jb2RpbmcgPT09IGlzRW5jb2RpbmcgfHwgIWlzRW5jb2RpbmcoZW5jKSkpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuYyk7XG4gIHJldHVybiBuZW5jIHx8IGVuYztcbn1cblxuLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZlxuLy8gYnVmZmVycyBpbnRvIGEgc2VyaWVzIG9mIEpTIHN0cmluZ3Mgd2l0aG91dCBicmVha2luZyBhcGFydCBtdWx0aS1ieXRlXG4vLyBjaGFyYWN0ZXJzLlxuZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gU3RyaW5nRGVjb2RlcjtcbmZ1bmN0aW9uIFN0cmluZ0RlY29kZXIoZW5jb2RpbmcpIHtcbiAgdGhpcy5lbmNvZGluZyA9IG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nKTtcbiAgdmFyIG5iO1xuICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHtcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIHRoaXMudGV4dCA9IHV0ZjE2VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gdXRmMTZFbmQ7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1dGY4JzpcbiAgICAgIHRoaXMuZmlsbExhc3QgPSB1dGY4RmlsbExhc3Q7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgdGhpcy50ZXh0ID0gYmFzZTY0VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gYmFzZTY0RW5kO1xuICAgICAgbmIgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMud3JpdGUgPSBzaW1wbGVXcml0ZTtcbiAgICAgIHRoaXMuZW5kID0gc2ltcGxlRW5kO1xuICAgICAgcmV0dXJuO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAwO1xuICB0aGlzLmxhc3RUb3RhbCA9IDA7XG4gIHRoaXMubGFzdENoYXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobmIpO1xufVxuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgdmFyIHI7XG4gIHZhciBpO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHIgPSB0aGlzLmZpbGxMYXN0KGJ1Zik7XG4gICAgaWYgKHIgPT09IHVuZGVmaW5lZCkgcmV0dXJuICcnO1xuICAgIGkgPSB0aGlzLmxhc3ROZWVkO1xuICAgIHRoaXMubGFzdE5lZWQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGkgPSAwO1xuICB9XG4gIGlmIChpIDwgYnVmLmxlbmd0aCkgcmV0dXJuIHIgPyByICsgdGhpcy50ZXh0KGJ1ZiwgaSkgOiB0aGlzLnRleHQoYnVmLCBpKTtcbiAgcmV0dXJuIHIgfHwgJyc7XG59O1xuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSB1dGY4RW5kO1xuXG4vLyBSZXR1cm5zIG9ubHkgY29tcGxldGUgY2hhcmFjdGVycyBpbiBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUudGV4dCA9IHV0ZjhUZXh0O1xuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIHBhcnRpYWwgbm9uLVVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5maWxsTGFzdCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn07XG5cbi8vIENoZWNrcyB0aGUgdHlwZSBvZiBhIFVURi04IGJ5dGUsIHdoZXRoZXIgaXQncyBBU0NJSSwgYSBsZWFkaW5nIGJ5dGUsIG9yIGFcbi8vIGNvbnRpbnVhdGlvbiBieXRlLiBJZiBhbiBpbnZhbGlkIGJ5dGUgaXMgZGV0ZWN0ZWQsIC0yIGlzIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrQnl0ZShieXRlKSB7XG4gIGlmIChieXRlIDw9IDB4N0YpIHJldHVybiAwO2Vsc2UgaWYgKGJ5dGUgPj4gNSA9PT0gMHgwNikgcmV0dXJuIDI7ZWxzZSBpZiAoYnl0ZSA+PiA0ID09PSAweDBFKSByZXR1cm4gMztlbHNlIGlmIChieXRlID4+IDMgPT09IDB4MUUpIHJldHVybiA0O1xuICByZXR1cm4gYnl0ZSA+PiA2ID09PSAweDAyID8gLTEgOiAtMjtcbn1cblxuLy8gQ2hlY2tzIGF0IG1vc3QgMyBieXRlcyBhdCB0aGUgZW5kIG9mIGEgQnVmZmVyIGluIG9yZGVyIHRvIGRldGVjdCBhblxuLy8gaW5jb21wbGV0ZSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3Rlci4gVGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyAoMiwgMywgb3IgNClcbi8vIG5lZWRlZCB0byBjb21wbGV0ZSB0aGUgVVRGLTggY2hhcmFjdGVyIChpZiBhcHBsaWNhYmxlKSBhcmUgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tJbmNvbXBsZXRlKHNlbGYsIGJ1ZiwgaSkge1xuICB2YXIgaiA9IGJ1Zi5sZW5ndGggLSAxO1xuICBpZiAoaiA8IGkpIHJldHVybiAwO1xuICB2YXIgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMTtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMjtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkge1xuICAgICAgaWYgKG5iID09PSAyKSBuYiA9IDA7ZWxzZSBzZWxmLmxhc3ROZWVkID0gbmIgLSAzO1xuICAgIH1cbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbi8vIFZhbGlkYXRlcyBhcyBtYW55IGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciBhc1xuLy8gbmVlZGVkIG9yIGFyZSBhdmFpbGFibGUuIElmIHdlIHNlZSBhIG5vbi1jb250aW51YXRpb24gYnl0ZSB3aGVyZSB3ZSBleHBlY3Rcbi8vIG9uZSwgd2UgXCJyZXBsYWNlXCIgdGhlIHZhbGlkYXRlZCBjb250aW51YXRpb24gYnl0ZXMgd2UndmUgc2VlbiBzbyBmYXIgd2l0aFxuLy8gYSBzaW5nbGUgVVRGLTggcmVwbGFjZW1lbnQgY2hhcmFjdGVyICgnXFx1ZmZmZCcpLCB0byBtYXRjaCB2OCdzIFVURi04IGRlY29kaW5nXG4vLyBiZWhhdmlvci4gVGhlIGNvbnRpbnVhdGlvbiBieXRlIGNoZWNrIGlzIGluY2x1ZGVkIHRocmVlIHRpbWVzIGluIHRoZSBjYXNlXG4vLyB3aGVyZSBhbGwgb2YgdGhlIGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBjaGFyYWN0ZXIgZXhpc3QgaW4gdGhlIHNhbWUgYnVmZmVyLlxuLy8gSXQgaXMgYWxzbyBkb25lIHRoaXMgd2F5IGFzIGEgc2xpZ2h0IHBlcmZvcm1hbmNlIGluY3JlYXNlIGluc3RlYWQgb2YgdXNpbmcgYVxuLy8gbG9vcC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0V4dHJhQnl0ZXMoc2VsZiwgYnVmLCBwKSB7XG4gIGlmICgoYnVmWzBdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICBzZWxmLmxhc3ROZWVkID0gMDtcbiAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICB9XG4gIGlmIChzZWxmLmxhc3ROZWVkID4gMSAmJiBidWYubGVuZ3RoID4gMSkge1xuICAgIGlmICgoYnVmWzFdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgIHNlbGYubGFzdE5lZWQgPSAxO1xuICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICB9XG4gICAgaWYgKHNlbGYubGFzdE5lZWQgPiAyICYmIGJ1Zi5sZW5ndGggPiAyKSB7XG4gICAgICBpZiAoKGJ1ZlsyXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgIHNlbGYubGFzdE5lZWQgPSAyO1xuICAgICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXIuXG5mdW5jdGlvbiB1dGY4RmlsbExhc3QoYnVmKSB7XG4gIHZhciBwID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICB2YXIgciA9IHV0ZjhDaGVja0V4dHJhQnl0ZXModGhpcywgYnVmLCBwKTtcbiAgaWYgKHIgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHI7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn1cblxuLy8gUmV0dXJucyBhbGwgY29tcGxldGUgVVRGLTggY2hhcmFjdGVycyBpbiBhIEJ1ZmZlci4gSWYgdGhlIEJ1ZmZlciBlbmRlZCBvbiBhXG4vLyBwYXJ0aWFsIGNoYXJhY3RlciwgdGhlIGNoYXJhY3RlcidzIGJ5dGVzIGFyZSBidWZmZXJlZCB1bnRpbCB0aGUgcmVxdWlyZWRcbi8vIG51bWJlciBvZiBieXRlcyBhcmUgYXZhaWxhYmxlLlxuZnVuY3Rpb24gdXRmOFRleHQoYnVmLCBpKSB7XG4gIHZhciB0b3RhbCA9IHV0ZjhDaGVja0luY29tcGxldGUodGhpcywgYnVmLCBpKTtcbiAgaWYgKCF0aGlzLmxhc3ROZWVkKSByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSk7XG4gIHRoaXMubGFzdFRvdGFsID0gdG90YWw7XG4gIHZhciBlbmQgPSBidWYubGVuZ3RoIC0gKHRvdGFsIC0gdGhpcy5sYXN0TmVlZCk7XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIDAsIGVuZCk7XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpLCBlbmQpO1xufVxuXG4vLyBGb3IgVVRGLTgsIGEgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGlzIGFkZGVkIHdoZW4gZW5kaW5nIG9uIGEgcGFydGlhbFxuLy8gY2hhcmFjdGVyLlxuZnVuY3Rpb24gdXRmOEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyAnXFx1ZmZmZCc7XG4gIHJldHVybiByO1xufVxuXG4vLyBVVEYtMTZMRSB0eXBpY2FsbHkgbmVlZHMgdHdvIGJ5dGVzIHBlciBjaGFyYWN0ZXIsIGJ1dCBldmVuIGlmIHdlIGhhdmUgYW4gZXZlblxuLy8gbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSwgd2UgbmVlZCB0byBjaGVjayBpZiB3ZSBlbmQgb24gYSBsZWFkaW5nL2hpZ2hcbi8vIHN1cnJvZ2F0ZS4gSW4gdGhhdCBjYXNlLCB3ZSBuZWVkIHRvIHdhaXQgZm9yIHRoZSBuZXh0IHR3byBieXRlcyBpbiBvcmRlciB0b1xuLy8gZGVjb2RlIHRoZSBsYXN0IGNoYXJhY3RlciBwcm9wZXJseS5cbmZ1bmN0aW9uIHV0ZjE2VGV4dChidWYsIGkpIHtcbiAgaWYgKChidWYubGVuZ3RoIC0gaSkgJSAyID09PSAwKSB7XG4gICAgdmFyIHIgPSBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpKTtcbiAgICBpZiAocikge1xuICAgICAgdmFyIGMgPSByLmNoYXJDb2RlQXQoci5sZW5ndGggLSAxKTtcbiAgICAgIGlmIChjID49IDB4RDgwMCAmJiBjIDw9IDB4REJGRikge1xuICAgICAgICB0aGlzLmxhc3ROZWVkID0gMjtcbiAgICAgICAgdGhpcy5sYXN0VG90YWwgPSA0O1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgICAgIHJldHVybiByLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDE7XG4gIHRoaXMubGFzdFRvdGFsID0gMjtcbiAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpLCBidWYubGVuZ3RoIC0gMSk7XG59XG5cbi8vIEZvciBVVEYtMTZMRSB3ZSBkbyBub3QgZXhwbGljaXRseSBhcHBlbmQgc3BlY2lhbCByZXBsYWNlbWVudCBjaGFyYWN0ZXJzIGlmIHdlXG4vLyBlbmQgb24gYSBwYXJ0aWFsIGNoYXJhY3Rlciwgd2Ugc2ltcGx5IGxldCB2OCBoYW5kbGUgdGhhdC5cbmZ1bmN0aW9uIHV0ZjE2RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgdmFyIGVuZCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgICByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ3V0ZjE2bGUnLCAwLCBlbmQpO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRUZXh0KGJ1ZiwgaSkge1xuICB2YXIgbiA9IChidWYubGVuZ3RoIC0gaSkgJSAzO1xuICBpZiAobiA9PT0gMCkgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSk7XG4gIHRoaXMubGFzdE5lZWQgPSAzIC0gbjtcbiAgdGhpcy5sYXN0VG90YWwgPSAzO1xuICBpZiAobiA9PT0gMSkge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGksIGJ1Zi5sZW5ndGggLSBuKTtcbn1cblxuZnVuY3Rpb24gYmFzZTY0RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ2Jhc2U2NCcsIDAsIDMgLSB0aGlzLmxhc3ROZWVkKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFBhc3MgYnl0ZXMgb24gdGhyb3VnaCBmb3Igc2luZ2xlLWJ5dGUgZW5jb2RpbmdzIChlLmcuIGFzY2lpLCBsYXRpbjEsIGhleClcbmZ1bmN0aW9uIHNpbXBsZVdyaXRlKGJ1Zikge1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiBzaW1wbGVFbmQoYnVmKSB7XG4gIHJldHVybiBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xufSIsIi8qIVxuICogb24tZmluaXNoZWRcbiAqIENvcHlyaWdodChjKSAyMDEzIEpvbmF0aGFuIE9uZ1xuICogQ29weXJpZ2h0KGMpIDIwMTQgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gb25GaW5pc2hlZFxubW9kdWxlLmV4cG9ydHMuaXNGaW5pc2hlZCA9IGlzRmluaXNoZWRcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgZmlyc3QgPSByZXF1aXJlKCdlZS1maXJzdCcpXG5cbi8qKlxuICogVmFyaWFibGVzLlxuICogQHByaXZhdGVcbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xudmFyIGRlZmVyID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IHNldEltbWVkaWF0ZVxuICA6IGZ1bmN0aW9uKGZuKXsgcHJvY2Vzcy5uZXh0VGljayhmbi5iaW5kLmFwcGx5KGZuLCBhcmd1bWVudHMpKSB9XG5cbi8qKlxuICogSW52b2tlIGNhbGxiYWNrIHdoZW4gdGhlIHJlc3BvbnNlIGhhcyBmaW5pc2hlZCwgdXNlZnVsIGZvclxuICogY2xlYW5pbmcgdXAgcmVzb3VyY2VzIGFmdGVyd2FyZHMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG1zZ1xuICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXJcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBvbkZpbmlzaGVkKG1zZywgbGlzdGVuZXIpIHtcbiAgaWYgKGlzRmluaXNoZWQobXNnKSAhPT0gZmFsc2UpIHtcbiAgICBkZWZlcihsaXN0ZW5lciwgbnVsbCwgbXNnKVxuICAgIHJldHVybiBtc2dcbiAgfVxuXG4gIC8vIGF0dGFjaCB0aGUgbGlzdGVuZXIgdG8gdGhlIG1lc3NhZ2VcbiAgYXR0YWNoTGlzdGVuZXIobXNnLCBsaXN0ZW5lcilcblxuICByZXR1cm4gbXNnXG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIG1lc3NhZ2UgaXMgYWxyZWFkeSBmaW5pc2hlZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbXNnXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGlzRmluaXNoZWQobXNnKSB7XG4gIHZhciBzb2NrZXQgPSBtc2cuc29ja2V0XG5cbiAgaWYgKHR5cGVvZiBtc2cuZmluaXNoZWQgPT09ICdib29sZWFuJykge1xuICAgIC8vIE91dGdvaW5nTWVzc2FnZVxuICAgIHJldHVybiBCb29sZWFuKG1zZy5maW5pc2hlZCB8fCAoc29ja2V0ICYmICFzb2NrZXQud3JpdGFibGUpKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBtc2cuY29tcGxldGUgPT09ICdib29sZWFuJykge1xuICAgIC8vIEluY29taW5nTWVzc2FnZVxuICAgIHJldHVybiBCb29sZWFuKG1zZy51cGdyYWRlIHx8ICFzb2NrZXQgfHwgIXNvY2tldC5yZWFkYWJsZSB8fCAobXNnLmNvbXBsZXRlICYmICFtc2cucmVhZGFibGUpKVxuICB9XG5cbiAgLy8gZG9uJ3Qga25vd1xuICByZXR1cm4gdW5kZWZpbmVkXG59XG5cbi8qKlxuICogQXR0YWNoIGEgZmluaXNoZWQgbGlzdGVuZXIgdG8gdGhlIG1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG1zZ1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gYXR0YWNoRmluaXNoZWRMaXN0ZW5lcihtc2csIGNhbGxiYWNrKSB7XG4gIHZhciBlZU1zZ1xuICB2YXIgZWVTb2NrZXRcbiAgdmFyIGZpbmlzaGVkID0gZmFsc2VcblxuICBmdW5jdGlvbiBvbkZpbmlzaChlcnJvcikge1xuICAgIGVlTXNnLmNhbmNlbCgpXG4gICAgZWVTb2NrZXQuY2FuY2VsKClcblxuICAgIGZpbmlzaGVkID0gdHJ1ZVxuICAgIGNhbGxiYWNrKGVycm9yKVxuICB9XG5cbiAgLy8gZmluaXNoZWQgb24gZmlyc3QgbWVzc2FnZSBldmVudFxuICBlZU1zZyA9IGVlU29ja2V0ID0gZmlyc3QoW1ttc2csICdlbmQnLCAnZmluaXNoJ11dLCBvbkZpbmlzaClcblxuICBmdW5jdGlvbiBvblNvY2tldChzb2NrZXQpIHtcbiAgICAvLyByZW1vdmUgbGlzdGVuZXJcbiAgICBtc2cucmVtb3ZlTGlzdGVuZXIoJ3NvY2tldCcsIG9uU29ja2V0KVxuXG4gICAgaWYgKGZpbmlzaGVkKSByZXR1cm5cbiAgICBpZiAoZWVNc2cgIT09IGVlU29ja2V0KSByZXR1cm5cblxuICAgIC8vIGZpbmlzaGVkIG9uIGZpcnN0IHNvY2tldCBldmVudFxuICAgIGVlU29ja2V0ID0gZmlyc3QoW1tzb2NrZXQsICdlcnJvcicsICdjbG9zZSddXSwgb25GaW5pc2gpXG4gIH1cblxuICBpZiAobXNnLnNvY2tldCkge1xuICAgIC8vIHNvY2tldCBhbHJlYWR5IGFzc2lnbmVkXG4gICAgb25Tb2NrZXQobXNnLnNvY2tldClcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIHdhaXQgZm9yIHNvY2tldCB0byBiZSBhc3NpZ25lZFxuICBtc2cub24oJ3NvY2tldCcsIG9uU29ja2V0KVxuXG4gIGlmIChtc2cuc29ja2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBub2RlLmpzIDAuOCBwYXRjaFxuICAgIHBhdGNoQXNzaWduU29ja2V0KG1zZywgb25Tb2NrZXQpXG4gIH1cbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGxpc3RlbmVyIHRvIHRoZSBtZXNzYWdlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBtc2dcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBhdHRhY2hMaXN0ZW5lcihtc2csIGxpc3RlbmVyKSB7XG4gIHZhciBhdHRhY2hlZCA9IG1zZy5fX29uRmluaXNoZWRcblxuICAvLyBjcmVhdGUgYSBwcml2YXRlIHNpbmdsZSBsaXN0ZW5lciB3aXRoIHF1ZXVlXG4gIGlmICghYXR0YWNoZWQgfHwgIWF0dGFjaGVkLnF1ZXVlKSB7XG4gICAgYXR0YWNoZWQgPSBtc2cuX19vbkZpbmlzaGVkID0gY3JlYXRlTGlzdGVuZXIobXNnKVxuICAgIGF0dGFjaEZpbmlzaGVkTGlzdGVuZXIobXNnLCBhdHRhY2hlZClcbiAgfVxuXG4gIGF0dGFjaGVkLnF1ZXVlLnB1c2gobGlzdGVuZXIpXG59XG5cbi8qKlxuICogQ3JlYXRlIGxpc3RlbmVyIG9uIG1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG1zZ1xuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyKG1zZykge1xuICBmdW5jdGlvbiBsaXN0ZW5lcihlcnIpIHtcbiAgICBpZiAobXNnLl9fb25GaW5pc2hlZCA9PT0gbGlzdGVuZXIpIG1zZy5fX29uRmluaXNoZWQgPSBudWxsXG4gICAgaWYgKCFsaXN0ZW5lci5xdWV1ZSkgcmV0dXJuXG5cbiAgICB2YXIgcXVldWUgPSBsaXN0ZW5lci5xdWV1ZVxuICAgIGxpc3RlbmVyLnF1ZXVlID0gbnVsbFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgcXVldWVbaV0oZXJyLCBtc2cpXG4gICAgfVxuICB9XG5cbiAgbGlzdGVuZXIucXVldWUgPSBbXVxuXG4gIHJldHVybiBsaXN0ZW5lclxufVxuXG4vKipcbiAqIFBhdGNoIFNlcnZlclJlc3BvbnNlLnByb3RvdHlwZS5hc3NpZ25Tb2NrZXQgZm9yIG5vZGUuanMgMC44LlxuICpcbiAqIEBwYXJhbSB7U2VydmVyUmVzcG9uc2V9IHJlc1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGF0Y2hBc3NpZ25Tb2NrZXQocmVzLCBjYWxsYmFjaykge1xuICB2YXIgYXNzaWduU29ja2V0ID0gcmVzLmFzc2lnblNvY2tldFxuXG4gIGlmICh0eXBlb2YgYXNzaWduU29ja2V0ICE9PSAnZnVuY3Rpb24nKSByZXR1cm5cblxuICAvLyByZXMub24oJ3NvY2tldCcsIGNhbGxiYWNrKSBpcyBicm9rZW4gaW4gMC44XG4gIHJlcy5hc3NpZ25Tb2NrZXQgPSBmdW5jdGlvbiBfYXNzaWduU29ja2V0KHNvY2tldCkge1xuICAgIGFzc2lnblNvY2tldC5jYWxsKHRoaXMsIHNvY2tldClcbiAgICBjYWxsYmFjayhzb2NrZXQpXG4gIH1cbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGxcbnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nXG4gID8gUi5hcHBseVxuICA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseSh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpO1xuICB9XG5cbnZhciBSZWZsZWN0T3duS2V5c1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWZsZWN0T3duS2V5cyA9IFIub3duS2V5c1xufSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldClcbiAgICAgIC5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKTtcbiAgfTtcbn0gZWxzZSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFByb2Nlc3NFbWl0V2FybmluZyh3YXJuaW5nKSB7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2FybikgY29uc29sZS53YXJuKHdhcm5pbmcpO1xufVxuXG52YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gTnVtYmVySXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgIXByb2Nlc3MudmVyc2lvbiB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MC4nKSA9PT0gMCB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS4nKSA9PT0gMCAmJiBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuOC4nKSAhPT0gMCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHsgbmV4dFRpY2s6IG5leHRUaWNrIH07XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3Ncbn1cblxuZnVuY3Rpb24gbmV4dFRpY2soZm4sIGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiY2FsbGJhY2tcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGFyZ3MsIGk7XG4gIHN3aXRjaCAobGVuKSB7XG4gIGNhc2UgMDpcbiAgY2FzZSAxOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZuKTtcbiAgY2FzZSAyOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja09uZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSk7XG4gICAgfSk7XG4gIGNhc2UgMzpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUd28oKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIpO1xuICAgIH0pO1xuICBjYXNlIDQ6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVGhyZWUoKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIH0pO1xuICBkZWZhdWx0OlxuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhcmdzLmxlbmd0aCkge1xuICAgICAgYXJnc1tpKytdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2soKSB7XG4gICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxufVxuXG4iLCIndXNlIHN0cmljdCc7XG5cblxudmFyIFRZUEVEX09LID0gICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgICAgICAgICAgKHR5cGVvZiBVaW50MTZBcnJheSAhPT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgICAgICAgICAgKHR5cGVvZiBJbnQzMkFycmF5ICE9PSAndW5kZWZpbmVkJyk7XG5cbmZ1bmN0aW9uIF9oYXMob2JqLCBrZXkpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG5cbmV4cG9ydHMuYXNzaWduID0gZnVuY3Rpb24gKG9iaiAvKmZyb20xLCBmcm9tMiwgZnJvbTMsIC4uLiovKSB7XG4gIHZhciBzb3VyY2VzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgd2hpbGUgKHNvdXJjZXMubGVuZ3RoKSB7XG4gICAgdmFyIHNvdXJjZSA9IHNvdXJjZXMuc2hpZnQoKTtcbiAgICBpZiAoIXNvdXJjZSkgeyBjb250aW51ZTsgfVxuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHNvdXJjZSArICdtdXN0IGJlIG5vbi1vYmplY3QnKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBwIGluIHNvdXJjZSkge1xuICAgICAgaWYgKF9oYXMoc291cmNlLCBwKSkge1xuICAgICAgICBvYmpbcF0gPSBzb3VyY2VbcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cblxuLy8gcmVkdWNlIGJ1ZmZlciBzaXplLCBhdm9pZGluZyBtZW0gY29weVxuZXhwb3J0cy5zaHJpbmtCdWYgPSBmdW5jdGlvbiAoYnVmLCBzaXplKSB7XG4gIGlmIChidWYubGVuZ3RoID09PSBzaXplKSB7IHJldHVybiBidWY7IH1cbiAgaWYgKGJ1Zi5zdWJhcnJheSkgeyByZXR1cm4gYnVmLnN1YmFycmF5KDAsIHNpemUpOyB9XG4gIGJ1Zi5sZW5ndGggPSBzaXplO1xuICByZXR1cm4gYnVmO1xufTtcblxuXG52YXIgZm5UeXBlZCA9IHtcbiAgYXJyYXlTZXQ6IGZ1bmN0aW9uIChkZXN0LCBzcmMsIHNyY19vZmZzLCBsZW4sIGRlc3Rfb2Zmcykge1xuICAgIGlmIChzcmMuc3ViYXJyYXkgJiYgZGVzdC5zdWJhcnJheSkge1xuICAgICAgZGVzdC5zZXQoc3JjLnN1YmFycmF5KHNyY19vZmZzLCBzcmNfb2ZmcyArIGxlbiksIGRlc3Rfb2Zmcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIEZhbGxiYWNrIHRvIG9yZGluYXJ5IGFycmF5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdFtkZXN0X29mZnMgKyBpXSA9IHNyY1tzcmNfb2ZmcyArIGldO1xuICAgIH1cbiAgfSxcbiAgLy8gSm9pbiBhcnJheSBvZiBjaHVua3MgdG8gc2luZ2xlIGFycmF5LlxuICBmbGF0dGVuQ2h1bmtzOiBmdW5jdGlvbiAoY2h1bmtzKSB7XG4gICAgdmFyIGksIGwsIGxlbiwgcG9zLCBjaHVuaywgcmVzdWx0O1xuXG4gICAgLy8gY2FsY3VsYXRlIGRhdGEgbGVuZ3RoXG4gICAgbGVuID0gMDtcbiAgICBmb3IgKGkgPSAwLCBsID0gY2h1bmtzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgbGVuICs9IGNodW5rc1tpXS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLy8gam9pbiBjaHVua3NcbiAgICByZXN1bHQgPSBuZXcgVWludDhBcnJheShsZW4pO1xuICAgIHBvcyA9IDA7XG4gICAgZm9yIChpID0gMCwgbCA9IGNodW5rcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGNodW5rID0gY2h1bmtzW2ldO1xuICAgICAgcmVzdWx0LnNldChjaHVuaywgcG9zKTtcbiAgICAgIHBvcyArPSBjaHVuay5sZW5ndGg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcblxudmFyIGZuVW50eXBlZCA9IHtcbiAgYXJyYXlTZXQ6IGZ1bmN0aW9uIChkZXN0LCBzcmMsIHNyY19vZmZzLCBsZW4sIGRlc3Rfb2Zmcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlc3RbZGVzdF9vZmZzICsgaV0gPSBzcmNbc3JjX29mZnMgKyBpXTtcbiAgICB9XG4gIH0sXG4gIC8vIEpvaW4gYXJyYXkgb2YgY2h1bmtzIHRvIHNpbmdsZSBhcnJheS5cbiAgZmxhdHRlbkNodW5rczogZnVuY3Rpb24gKGNodW5rcykge1xuICAgIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIGNodW5rcyk7XG4gIH1cbn07XG5cblxuLy8gRW5hYmxlL0Rpc2FibGUgdHlwZWQgYXJyYXlzIHVzZSwgZm9yIHRlc3Rpbmdcbi8vXG5leHBvcnRzLnNldFR5cGVkID0gZnVuY3Rpb24gKG9uKSB7XG4gIGlmIChvbikge1xuICAgIGV4cG9ydHMuQnVmOCAgPSBVaW50OEFycmF5O1xuICAgIGV4cG9ydHMuQnVmMTYgPSBVaW50MTZBcnJheTtcbiAgICBleHBvcnRzLkJ1ZjMyID0gSW50MzJBcnJheTtcbiAgICBleHBvcnRzLmFzc2lnbihleHBvcnRzLCBmblR5cGVkKTtcbiAgfSBlbHNlIHtcbiAgICBleHBvcnRzLkJ1ZjggID0gQXJyYXk7XG4gICAgZXhwb3J0cy5CdWYxNiA9IEFycmF5O1xuICAgIGV4cG9ydHMuQnVmMzIgPSBBcnJheTtcbiAgICBleHBvcnRzLmFzc2lnbihleHBvcnRzLCBmblVudHlwZWQpO1xuICB9XG59O1xuXG5leHBvcnRzLnNldFR5cGVkKFRZUEVEX09LKTtcbiIsIi8qIVxuICogZW5jb2RldXJsXG4gKiBDb3B5cmlnaHQoYykgMjAxNiBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBlbmNvZGVVcmxcblxuLyoqXG4gKiBSZWdFeHAgdG8gbWF0Y2ggbm9uLVVSTCBjb2RlIHBvaW50cywgKmFmdGVyKiBlbmNvZGluZyAoaS5lLiBub3QgaW5jbHVkaW5nIFwiJVwiKVxuICogYW5kIGluY2x1ZGluZyBpbnZhbGlkIGVzY2FwZSBzZXF1ZW5jZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBFTkNPREVfQ0hBUlNfUkVHRVhQID0gLyg/OlteXFx4MjFcXHgyNVxceDI2LVxceDNCXFx4M0RcXHgzRi1cXHg1QlxceDVEXFx4NUZcXHg2MS1cXHg3QVxceDdFXXwlKD86W14wLTlBLUZhLWZdfFswLTlBLUZhLWZdW14wLTlBLUZhLWZdfCQpKSsvZ1xuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCB1bm1hdGNoZWQgc3Vycm9nYXRlIHBhaXIuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBVTk1BVENIRURfU1VSUk9HQVRFX1BBSVJfUkVHRVhQID0gLyhefFteXFx1RDgwMC1cXHVEQkZGXSlbXFx1REMwMC1cXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXShbXlxcdURDMDAtXFx1REZGRl18JCkvZ1xuXG4vKipcbiAqIFN0cmluZyB0byByZXBsYWNlIHVubWF0Y2hlZCBzdXJyb2dhdGUgcGFpciB3aXRoLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgVU5NQVRDSEVEX1NVUlJPR0FURV9QQUlSX1JFUExBQ0UgPSAnJDFcXHVGRkZEJDInXG5cbi8qKlxuICogRW5jb2RlIGEgVVJMIHRvIGEgcGVyY2VudC1lbmNvZGVkIGZvcm0sIGV4Y2x1ZGluZyBhbHJlYWR5LWVuY29kZWQgc2VxdWVuY2VzLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCB0YWtlIGFuIGFscmVhZHktZW5jb2RlZCBVUkwgYW5kIGVuY29kZSBhbGwgdGhlIG5vbi1VUkxcbiAqIGNvZGUgcG9pbnRzLiBUaGlzIGZ1bmN0aW9uIHdpbGwgbm90IGVuY29kZSB0aGUgXCIlXCIgY2hhcmFjdGVyIHVubGVzcyBpdCBpc1xuICogbm90IHBhcnQgb2YgYSB2YWxpZCBzZXF1ZW5jZSAoYCUyMGAgd2lsbCBiZSBsZWZ0IGFzLWlzLCBidXQgYCVmb29gIHdpbGxcbiAqIGJlIGVuY29kZWQgYXMgYCUyNWZvb2ApLlxuICpcbiAqIFRoaXMgZW5jb2RlIGlzIG1lYW50IHRvIGJlIFwic2FmZVwiIGFuZCBkb2VzIG5vdCB0aHJvdyBlcnJvcnMuIEl0IHdpbGwgdHJ5IGFzXG4gKiBoYXJkIGFzIGl0IGNhbiB0byBwcm9wZXJseSBlbmNvZGUgdGhlIGdpdmVuIFVSTCwgaW5jbHVkaW5nIHJlcGxhY2luZyBhbnkgcmF3LFxuICogdW5wYWlyZWQgc3Vycm9nYXRlIHBhaXJzIHdpdGggdGhlIFVuaWNvZGUgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIHByaW9yIHRvXG4gKiBlbmNvZGluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlVXJsICh1cmwpIHtcbiAgcmV0dXJuIFN0cmluZyh1cmwpXG4gICAgLnJlcGxhY2UoVU5NQVRDSEVEX1NVUlJPR0FURV9QQUlSX1JFR0VYUCwgVU5NQVRDSEVEX1NVUlJPR0FURV9QQUlSX1JFUExBQ0UpXG4gICAgLnJlcGxhY2UoRU5DT0RFX0NIQVJTX1JFR0VYUCwgZW5jb2RlVVJJKVxufVxuIiwiLyohXG4gKiBlc2NhcGUtaHRtbFxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxMyBUSiBIb2xvd2F5Y2h1a1xuICogQ29weXJpZ2h0KGMpIDIwMTUgQW5kcmVhcyBMdWJiZVxuICogQ29weXJpZ2h0KGMpIDIwMTUgVGlhbmNoZW5nIFwiVGltb3RoeVwiIEd1XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIG1hdGNoSHRtbFJlZ0V4cCA9IC9bXCInJjw+XS87XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBlc2NhcGVIdG1sO1xuXG4vKipcbiAqIEVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgaW4gdGhlIGdpdmVuIHN0cmluZyBvZiBodG1sLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gZXNjYXBlIGZvciBpbnNlcnRpbmcgaW50byBIVE1MXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZXNjYXBlSHRtbChzdHJpbmcpIHtcbiAgdmFyIHN0ciA9ICcnICsgc3RyaW5nO1xuICB2YXIgbWF0Y2ggPSBtYXRjaEh0bWxSZWdFeHAuZXhlYyhzdHIpO1xuXG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgdmFyIGVzY2FwZTtcbiAgdmFyIGh0bWwgPSAnJztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RJbmRleCA9IDA7XG5cbiAgZm9yIChpbmRleCA9IG1hdGNoLmluZGV4OyBpbmRleCA8IHN0ci5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBzd2l0Y2ggKHN0ci5jaGFyQ29kZUF0KGluZGV4KSkge1xuICAgICAgY2FzZSAzNDogLy8gXCJcbiAgICAgICAgZXNjYXBlID0gJyZxdW90Oyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzODogLy8gJlxuICAgICAgICBlc2NhcGUgPSAnJmFtcDsnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzk6IC8vICdcbiAgICAgICAgZXNjYXBlID0gJyYjMzk7JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDYwOiAvLyA8XG4gICAgICAgIGVzY2FwZSA9ICcmbHQ7JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDYyOiAvLyA+XG4gICAgICAgIGVzY2FwZSA9ICcmZ3Q7JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAobGFzdEluZGV4ICE9PSBpbmRleCkge1xuICAgICAgaHRtbCArPSBzdHIuc3Vic3RyaW5nKGxhc3RJbmRleCwgaW5kZXgpO1xuICAgIH1cblxuICAgIGxhc3RJbmRleCA9IGluZGV4ICsgMTtcbiAgICBodG1sICs9IGVzY2FwZTtcbiAgfVxuXG4gIHJldHVybiBsYXN0SW5kZXggIT09IGluZGV4XG4gICAgPyBodG1sICsgc3RyLnN1YnN0cmluZyhsYXN0SW5kZXgsIGluZGV4KVxuICAgIDogaHRtbDtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIEV4cG9zZSBgYXJyYXlGbGF0dGVuYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBhcnJheUZsYXR0ZW5cblxuLyoqXG4gKiBSZWN1cnNpdmUgZmxhdHRlbiBmdW5jdGlvbiB3aXRoIGRlcHRoLlxuICpcbiAqIEBwYXJhbSAge0FycmF5fSAgYXJyYXlcbiAqIEBwYXJhbSAge0FycmF5fSAgcmVzdWx0XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGRlcHRoXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gZmxhdHRlbldpdGhEZXB0aCAoYXJyYXksIHJlc3VsdCwgZGVwdGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2ldXG5cbiAgICBpZiAoZGVwdGggPiAwICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBmbGF0dGVuV2l0aERlcHRoKHZhbHVlLCByZXN1bHQsIGRlcHRoIC0gMSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnB1c2godmFsdWUpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKipcbiAqIFJlY3Vyc2l2ZSBmbGF0dGVuIGZ1bmN0aW9uLiBPbWl0dGluZyBkZXB0aCBpcyBzbGlnaHRseSBmYXN0ZXIuXG4gKlxuICogQHBhcmFtICB7QXJyYXl9IGFycmF5XG4gKiBAcGFyYW0gIHtBcnJheX0gcmVzdWx0XG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gZmxhdHRlbkZvcmV2ZXIgKGFycmF5LCByZXN1bHQpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2ldXG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGZsYXR0ZW5Gb3JldmVyKHZhbHVlLCByZXN1bHQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBGbGF0dGVuIGFuIGFycmF5LCB3aXRoIHRoZSBhYmlsaXR5IHRvIGRlZmluZSBhIGRlcHRoLlxuICpcbiAqIEBwYXJhbSAge0FycmF5fSAgYXJyYXlcbiAqIEBwYXJhbSAge051bWJlcn0gZGVwdGhcbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5mdW5jdGlvbiBhcnJheUZsYXR0ZW4gKGFycmF5LCBkZXB0aCkge1xuICBpZiAoZGVwdGggPT0gbnVsbCkge1xuICAgIHJldHVybiBmbGF0dGVuRm9yZXZlcihhcnJheSwgW10pXG4gIH1cblxuICByZXR1cm4gZmxhdHRlbldpdGhEZXB0aChhcnJheSwgW10sIGRlcHRoKVxufVxuIiwiLyoqXG4gKiBNZXJnZSBvYmplY3QgYiB3aXRoIG9iamVjdCBhLlxuICpcbiAqICAgICB2YXIgYSA9IHsgZm9vOiAnYmFyJyB9XG4gKiAgICAgICAsIGIgPSB7IGJhcjogJ2JheicgfTtcbiAqXG4gKiAgICAgbWVyZ2UoYSwgYik7XG4gKiAgICAgLy8gPT4geyBmb286ICdiYXInLCBiYXI6ICdiYXonIH1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYVxuICogQHBhcmFtIHtPYmplY3R9IGJcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYSwgYil7XG4gIGlmIChhICYmIGIpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gYikge1xuICAgICAgYVtrZXldID0gYltrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYTtcbn07XG4iLCIvLyBiYXNlZCBvbiB0aGUgYWVzIGltcGxpbWVudGF0aW9uIGluIHRyaXBsZSBzZWNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9rZXliYXNlL3RyaXBsZXNlY1xuLy8gd2hpY2ggaXMgaW4gdHVybiBiYXNlZCBvbiB0aGUgb25lIGZyb20gY3J5cHRvLWpzXG4vLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbmZ1bmN0aW9uIGFzVUludDMyQXJyYXkgKGJ1Zikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSBidWYgPSBCdWZmZXIuZnJvbShidWYpXG5cbiAgdmFyIGxlbiA9IChidWYubGVuZ3RoIC8gNCkgfCAwXG4gIHZhciBvdXQgPSBuZXcgQXJyYXkobGVuKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBvdXRbaV0gPSBidWYucmVhZFVJbnQzMkJFKGkgKiA0KVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBzY3J1YlZlYyAodikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHYubGVuZ3RoOyB2KyspIHtcbiAgICB2W2ldID0gMFxuICB9XG59XG5cbmZ1bmN0aW9uIGNyeXB0QmxvY2sgKE0sIGtleVNjaGVkdWxlLCBTVUJfTUlYLCBTQk9YLCBuUm91bmRzKSB7XG4gIHZhciBTVUJfTUlYMCA9IFNVQl9NSVhbMF1cbiAgdmFyIFNVQl9NSVgxID0gU1VCX01JWFsxXVxuICB2YXIgU1VCX01JWDIgPSBTVUJfTUlYWzJdXG4gIHZhciBTVUJfTUlYMyA9IFNVQl9NSVhbM11cblxuICB2YXIgczAgPSBNWzBdIF4ga2V5U2NoZWR1bGVbMF1cbiAgdmFyIHMxID0gTVsxXSBeIGtleVNjaGVkdWxlWzFdXG4gIHZhciBzMiA9IE1bMl0gXiBrZXlTY2hlZHVsZVsyXVxuICB2YXIgczMgPSBNWzNdIF4ga2V5U2NoZWR1bGVbM11cbiAgdmFyIHQwLCB0MSwgdDIsIHQzXG4gIHZhciBrc1JvdyA9IDRcblxuICBmb3IgKHZhciByb3VuZCA9IDE7IHJvdW5kIDwgblJvdW5kczsgcm91bmQrKykge1xuICAgIHQwID0gU1VCX01JWDBbczAgPj4+IDI0XSBeIFNVQl9NSVgxWyhzMSA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYMlsoczIgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYM1tzMyAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MSA9IFNVQl9NSVgwW3MxID4+PiAyNF0gXiBTVUJfTUlYMVsoczIgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMzID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczAgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDIgPSBTVUJfTUlYMFtzMiA+Pj4gMjRdIF4gU1VCX01JWDFbKHMzID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVgyWyhzMCA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVgzW3MxICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICAgIHQzID0gU1VCX01JWDBbczMgPj4+IDI0XSBeIFNVQl9NSVgxWyhzMCA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYMlsoczEgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYM1tzMiAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICBzMCA9IHQwXG4gICAgczEgPSB0MVxuICAgIHMyID0gdDJcbiAgICBzMyA9IHQzXG4gIH1cblxuICB0MCA9ICgoU0JPWFtzMCA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMSA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMyID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMyAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQxID0gKChTQk9YW3MxID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMyID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczMgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MwICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDIgPSAoKFNCT1hbczIgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczMgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczEgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MyA9ICgoU0JPWFtzMyA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMxID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMiAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQwID0gdDAgPj4+IDBcbiAgdDEgPSB0MSA+Pj4gMFxuICB0MiA9IHQyID4+PiAwXG4gIHQzID0gdDMgPj4+IDBcblxuICByZXR1cm4gW3QwLCB0MSwgdDIsIHQzXVxufVxuXG4vLyBBRVMgY29uc3RhbnRzXG52YXIgUkNPTiA9IFsweDAwLCAweDAxLCAweDAyLCAweDA0LCAweDA4LCAweDEwLCAweDIwLCAweDQwLCAweDgwLCAweDFiLCAweDM2XVxudmFyIEcgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDb21wdXRlIGRvdWJsZSB0YWJsZVxuICB2YXIgZCA9IG5ldyBBcnJheSgyNTYpXG4gIGZvciAodmFyIGogPSAwOyBqIDwgMjU2OyBqKyspIHtcbiAgICBpZiAoaiA8IDEyOCkge1xuICAgICAgZFtqXSA9IGogPDwgMVxuICAgIH0gZWxzZSB7XG4gICAgICBkW2pdID0gKGogPDwgMSkgXiAweDExYlxuICAgIH1cbiAgfVxuXG4gIHZhciBTQk9YID0gW11cbiAgdmFyIElOVl9TQk9YID0gW11cbiAgdmFyIFNVQl9NSVggPSBbW10sIFtdLCBbXSwgW11dXG4gIHZhciBJTlZfU1VCX01JWCA9IFtbXSwgW10sIFtdLCBbXV1cblxuICAvLyBXYWxrIEdGKDJeOClcbiAgdmFyIHggPSAwXG4gIHZhciB4aSA9IDBcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICAgIC8vIENvbXB1dGUgc2JveFxuICAgIHZhciBzeCA9IHhpIF4gKHhpIDw8IDEpIF4gKHhpIDw8IDIpIF4gKHhpIDw8IDMpIF4gKHhpIDw8IDQpXG4gICAgc3ggPSAoc3ggPj4+IDgpIF4gKHN4ICYgMHhmZikgXiAweDYzXG4gICAgU0JPWFt4XSA9IHN4XG4gICAgSU5WX1NCT1hbc3hdID0geFxuXG4gICAgLy8gQ29tcHV0ZSBtdWx0aXBsaWNhdGlvblxuICAgIHZhciB4MiA9IGRbeF1cbiAgICB2YXIgeDQgPSBkW3gyXVxuICAgIHZhciB4OCA9IGRbeDRdXG5cbiAgICAvLyBDb21wdXRlIHN1YiBieXRlcywgbWl4IGNvbHVtbnMgdGFibGVzXG4gICAgdmFyIHQgPSAoZFtzeF0gKiAweDEwMSkgXiAoc3ggKiAweDEwMTAxMDApXG4gICAgU1VCX01JWFswXVt4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KVxuICAgIFNVQl9NSVhbMV1beF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpXG4gICAgU1VCX01JWFsyXVt4XSA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KVxuICAgIFNVQl9NSVhbM11beF0gPSB0XG5cbiAgICAvLyBDb21wdXRlIGludiBzdWIgYnl0ZXMsIGludiBtaXggY29sdW1ucyB0YWJsZXNcbiAgICB0ID0gKHg4ICogMHgxMDEwMTAxKSBeICh4NCAqIDB4MTAwMDEpIF4gKHgyICogMHgxMDEpIF4gKHggKiAweDEwMTAxMDApXG4gICAgSU5WX1NVQl9NSVhbMF1bc3hdID0gKHQgPDwgMjQpIHwgKHQgPj4+IDgpXG4gICAgSU5WX1NVQl9NSVhbMV1bc3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KVxuICAgIElOVl9TVUJfTUlYWzJdW3N4XSA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KVxuICAgIElOVl9TVUJfTUlYWzNdW3N4XSA9IHRcblxuICAgIGlmICh4ID09PSAwKSB7XG4gICAgICB4ID0geGkgPSAxXG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4MiBeIGRbZFtkW3g4IF4geDJdXV1cbiAgICAgIHhpIF49IGRbZFt4aV1dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBTQk9YOiBTQk9YLFxuICAgIElOVl9TQk9YOiBJTlZfU0JPWCxcbiAgICBTVUJfTUlYOiBTVUJfTUlYLFxuICAgIElOVl9TVUJfTUlYOiBJTlZfU1VCX01JWFxuICB9XG59KSgpXG5cbmZ1bmN0aW9uIEFFUyAoa2V5KSB7XG4gIHRoaXMuX2tleSA9IGFzVUludDMyQXJyYXkoa2V5KVxuICB0aGlzLl9yZXNldCgpXG59XG5cbkFFUy5ibG9ja1NpemUgPSA0ICogNFxuQUVTLmtleVNpemUgPSAyNTYgLyA4XG5BRVMucHJvdG90eXBlLmJsb2NrU2l6ZSA9IEFFUy5ibG9ja1NpemVcbkFFUy5wcm90b3R5cGUua2V5U2l6ZSA9IEFFUy5rZXlTaXplXG5BRVMucHJvdG90eXBlLl9yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGtleVdvcmRzID0gdGhpcy5fa2V5XG4gIHZhciBrZXlTaXplID0ga2V5V29yZHMubGVuZ3RoXG4gIHZhciBuUm91bmRzID0ga2V5U2l6ZSArIDZcbiAgdmFyIGtzUm93cyA9IChuUm91bmRzICsgMSkgKiA0XG5cbiAgdmFyIGtleVNjaGVkdWxlID0gW11cbiAgZm9yICh2YXIgayA9IDA7IGsgPCBrZXlTaXplOyBrKyspIHtcbiAgICBrZXlTY2hlZHVsZVtrXSA9IGtleVdvcmRzW2tdXG4gIH1cblxuICBmb3IgKGsgPSBrZXlTaXplOyBrIDwga3NSb3dzOyBrKyspIHtcbiAgICB2YXIgdCA9IGtleVNjaGVkdWxlW2sgLSAxXVxuXG4gICAgaWYgKGsgJSBrZXlTaXplID09PSAwKSB7XG4gICAgICB0ID0gKHQgPDwgOCkgfCAodCA+Pj4gMjQpXG4gICAgICB0ID1cbiAgICAgICAgKEcuU0JPWFt0ID4+PiAyNF0gPDwgMjQpIHxcbiAgICAgICAgKEcuU0JPWFsodCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHxcbiAgICAgICAgKEcuU0JPWFsodCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8XG4gICAgICAgIChHLlNCT1hbdCAmIDB4ZmZdKVxuXG4gICAgICB0IF49IFJDT05bKGsgLyBrZXlTaXplKSB8IDBdIDw8IDI0XG4gICAgfSBlbHNlIGlmIChrZXlTaXplID4gNiAmJiBrICUga2V5U2l6ZSA9PT0gNCkge1xuICAgICAgdCA9XG4gICAgICAgIChHLlNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfFxuICAgICAgICAoRy5TQk9YW3QgJiAweGZmXSlcbiAgICB9XG5cbiAgICBrZXlTY2hlZHVsZVtrXSA9IGtleVNjaGVkdWxlW2sgLSBrZXlTaXplXSBeIHRcbiAgfVxuXG4gIHZhciBpbnZLZXlTY2hlZHVsZSA9IFtdXG4gIGZvciAodmFyIGlrID0gMDsgaWsgPCBrc1Jvd3M7IGlrKyspIHtcbiAgICB2YXIga3NSID0ga3NSb3dzIC0gaWtcbiAgICB2YXIgdHQgPSBrZXlTY2hlZHVsZVtrc1IgLSAoaWsgJSA0ID8gMCA6IDQpXVxuXG4gICAgaWYgKGlrIDwgNCB8fCBrc1IgPD0gNCkge1xuICAgICAgaW52S2V5U2NoZWR1bGVbaWtdID0gdHRcbiAgICB9IGVsc2Uge1xuICAgICAgaW52S2V5U2NoZWR1bGVbaWtdID1cbiAgICAgICAgRy5JTlZfU1VCX01JWFswXVtHLlNCT1hbdHQgPj4+IDI0XV0gXlxuICAgICAgICBHLklOVl9TVUJfTUlYWzFdW0cuU0JPWFsodHQgPj4+IDE2KSAmIDB4ZmZdXSBeXG4gICAgICAgIEcuSU5WX1NVQl9NSVhbMl1bRy5TQk9YWyh0dCA+Pj4gOCkgJiAweGZmXV0gXlxuICAgICAgICBHLklOVl9TVUJfTUlYWzNdW0cuU0JPWFt0dCAmIDB4ZmZdXVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuX25Sb3VuZHMgPSBuUm91bmRzXG4gIHRoaXMuX2tleVNjaGVkdWxlID0ga2V5U2NoZWR1bGVcbiAgdGhpcy5faW52S2V5U2NoZWR1bGUgPSBpbnZLZXlTY2hlZHVsZVxufVxuXG5BRVMucHJvdG90eXBlLmVuY3J5cHRCbG9ja1JhdyA9IGZ1bmN0aW9uIChNKSB7XG4gIE0gPSBhc1VJbnQzMkFycmF5KE0pXG4gIHJldHVybiBjcnlwdEJsb2NrKE0sIHRoaXMuX2tleVNjaGVkdWxlLCBHLlNVQl9NSVgsIEcuU0JPWCwgdGhpcy5fblJvdW5kcylcbn1cblxuQUVTLnByb3RvdHlwZS5lbmNyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgb3V0ID0gdGhpcy5lbmNyeXB0QmxvY2tSYXcoTSlcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5BRVMucHJvdG90eXBlLmRlY3J5cHRCbG9jayA9IGZ1bmN0aW9uIChNKSB7XG4gIE0gPSBhc1VJbnQzMkFycmF5KE0pXG5cbiAgLy8gc3dhcFxuICB2YXIgbTEgPSBNWzFdXG4gIE1bMV0gPSBNWzNdXG4gIE1bM10gPSBtMVxuXG4gIHZhciBvdXQgPSBjcnlwdEJsb2NrKE0sIHRoaXMuX2ludktleVNjaGVkdWxlLCBHLklOVl9TVUJfTUlYLCBHLklOVl9TQk9YLCB0aGlzLl9uUm91bmRzKVxuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMF0sIDApXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgNClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzJdLCA4KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDEyKVxuICByZXR1cm4gYnVmXG59XG5cbkFFUy5wcm90b3R5cGUuc2NydWIgPSBmdW5jdGlvbiAoKSB7XG4gIHNjcnViVmVjKHRoaXMuX2tleVNjaGVkdWxlKVxuICBzY3J1YlZlYyh0aGlzLl9pbnZLZXlTY2hlZHVsZSlcbiAgc2NydWJWZWModGhpcy5fa2V5KVxufVxuXG5tb2R1bGUuZXhwb3J0cy5BRVMgPSBBRVNcbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIE1ENSA9IHJlcXVpcmUoJ21kNS5qcycpXG5cbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuZnVuY3Rpb24gRVZQX0J5dGVzVG9LZXkgKHBhc3N3b3JkLCBzYWx0LCBrZXlCaXRzLCBpdkxlbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwYXNzd29yZCkpIHBhc3N3b3JkID0gQnVmZmVyLmZyb20ocGFzc3dvcmQsICdiaW5hcnknKVxuICBpZiAoc2FsdCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHNhbHQpKSBzYWx0ID0gQnVmZmVyLmZyb20oc2FsdCwgJ2JpbmFyeScpXG4gICAgaWYgKHNhbHQubGVuZ3RoICE9PSA4KSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc2FsdCBzaG91bGQgYmUgQnVmZmVyIHdpdGggOCBieXRlIGxlbmd0aCcpXG4gIH1cblxuICB2YXIga2V5TGVuID0ga2V5Qml0cyAvIDhcbiAgdmFyIGtleSA9IEJ1ZmZlci5hbGxvYyhrZXlMZW4pXG4gIHZhciBpdiA9IEJ1ZmZlci5hbGxvYyhpdkxlbiB8fCAwKVxuICB2YXIgdG1wID0gQnVmZmVyLmFsbG9jKDApXG5cbiAgd2hpbGUgKGtleUxlbiA+IDAgfHwgaXZMZW4gPiAwKSB7XG4gICAgdmFyIGhhc2ggPSBuZXcgTUQ1KClcbiAgICBoYXNoLnVwZGF0ZSh0bXApXG4gICAgaGFzaC51cGRhdGUocGFzc3dvcmQpXG4gICAgaWYgKHNhbHQpIGhhc2gudXBkYXRlKHNhbHQpXG4gICAgdG1wID0gaGFzaC5kaWdlc3QoKVxuXG4gICAgdmFyIHVzZWQgPSAwXG5cbiAgICBpZiAoa2V5TGVuID4gMCkge1xuICAgICAgdmFyIGtleVN0YXJ0ID0ga2V5Lmxlbmd0aCAtIGtleUxlblxuICAgICAgdXNlZCA9IE1hdGgubWluKGtleUxlbiwgdG1wLmxlbmd0aClcbiAgICAgIHRtcC5jb3B5KGtleSwga2V5U3RhcnQsIDAsIHVzZWQpXG4gICAgICBrZXlMZW4gLT0gdXNlZFxuICAgIH1cblxuICAgIGlmICh1c2VkIDwgdG1wLmxlbmd0aCAmJiBpdkxlbiA+IDApIHtcbiAgICAgIHZhciBpdlN0YXJ0ID0gaXYubGVuZ3RoIC0gaXZMZW5cbiAgICAgIHZhciBsZW5ndGggPSBNYXRoLm1pbihpdkxlbiwgdG1wLmxlbmd0aCAtIHVzZWQpXG4gICAgICB0bXAuY29weShpdiwgaXZTdGFydCwgdXNlZCwgdXNlZCArIGxlbmd0aClcbiAgICAgIGl2TGVuIC09IGxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHRtcC5maWxsKDApXG4gIHJldHVybiB7IGtleToga2V5LCBpdjogaXYgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVWUF9CeXRlc1RvS2V5XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGdldE5BRiA9IHV0aWxzLmdldE5BRjtcbnZhciBnZXRKU0YgPSB1dGlscy5nZXRKU0Y7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBCYXNlQ3VydmUodHlwZSwgY29uZikge1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnAgPSBuZXcgQk4oY29uZi5wLCAxNik7XG5cbiAgLy8gVXNlIE1vbnRnb21lcnksIHdoZW4gdGhlcmUgaXMgbm8gZmFzdCByZWR1Y3Rpb24gZm9yIHRoZSBwcmltZVxuICB0aGlzLnJlZCA9IGNvbmYucHJpbWUgPyBCTi5yZWQoY29uZi5wcmltZSkgOiBCTi5tb250KHRoaXMucCk7XG5cbiAgLy8gVXNlZnVsIGZvciBtYW55IGN1cnZlc1xuICB0aGlzLnplcm8gPSBuZXcgQk4oMCkudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLm9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMudHdvID0gbmV3IEJOKDIpLnRvUmVkKHRoaXMucmVkKTtcblxuICAvLyBDdXJ2ZSBjb25maWd1cmF0aW9uLCBvcHRpb25hbFxuICB0aGlzLm4gPSBjb25mLm4gJiYgbmV3IEJOKGNvbmYubiwgMTYpO1xuICB0aGlzLmcgPSBjb25mLmcgJiYgdGhpcy5wb2ludEZyb21KU09OKGNvbmYuZywgY29uZi5nUmVkKTtcblxuICAvLyBUZW1wb3JhcnkgYXJyYXlzXG4gIHRoaXMuX3duYWZUMSA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fd25hZlQyID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl93bmFmVDMgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX3duYWZUNCA9IG5ldyBBcnJheSg0KTtcblxuICB0aGlzLl9iaXRMZW5ndGggPSB0aGlzLm4gPyB0aGlzLm4uYml0TGVuZ3RoKCkgOiAwO1xuXG4gIC8vIEdlbmVyYWxpemVkIEdyZWcgTWF4d2VsbCdzIHRyaWNrXG4gIHZhciBhZGp1c3RDb3VudCA9IHRoaXMubiAmJiB0aGlzLnAuZGl2KHRoaXMubik7XG4gIGlmICghYWRqdXN0Q291bnQgfHwgYWRqdXN0Q291bnQuY21wbigxMDApID4gMCkge1xuICAgIHRoaXMucmVkTiA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbWF4d2VsbFRyaWNrID0gdHJ1ZTtcbiAgICB0aGlzLnJlZE4gPSB0aGlzLm4udG9SZWQodGhpcy5yZWQpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VDdXJ2ZTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5fZml4ZWROYWZNdWwgPSBmdW5jdGlvbiBfZml4ZWROYWZNdWwocCwgaykge1xuICBhc3NlcnQocC5wcmVjb21wdXRlZCk7XG4gIHZhciBkb3VibGVzID0gcC5fZ2V0RG91YmxlcygpO1xuXG4gIHZhciBuYWYgPSBnZXROQUYoaywgMSwgdGhpcy5fYml0TGVuZ3RoKTtcbiAgdmFyIEkgPSAoMSA8PCAoZG91Ymxlcy5zdGVwICsgMSkpIC0gKGRvdWJsZXMuc3RlcCAlIDIgPT09IDAgPyAyIDogMSk7XG4gIEkgLz0gMztcblxuICAvLyBUcmFuc2xhdGUgaW50byBtb3JlIHdpbmRvd2VkIGZvcm1cbiAgdmFyIHJlcHIgPSBbXTtcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBuYWYubGVuZ3RoOyBqICs9IGRvdWJsZXMuc3RlcCkge1xuICAgIHZhciBuYWZXID0gMDtcbiAgICBmb3IgKHZhciBrID0gaiArIGRvdWJsZXMuc3RlcCAtIDE7IGsgPj0gajsgay0tKVxuICAgICAgbmFmVyA9IChuYWZXIDw8IDEpICsgbmFmW2tdO1xuICAgIHJlcHIucHVzaChuYWZXKTtcbiAgfVxuXG4gIHZhciBhID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIHZhciBiID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIGZvciAodmFyIGkgPSBJOyBpID4gMDsgaS0tKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCByZXByLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgbmFmVyA9IHJlcHJbal07XG4gICAgICBpZiAobmFmVyA9PT0gaSlcbiAgICAgICAgYiA9IGIubWl4ZWRBZGQoZG91Ymxlcy5wb2ludHNbal0pO1xuICAgICAgZWxzZSBpZiAobmFmVyA9PT0gLWkpXG4gICAgICAgIGIgPSBiLm1peGVkQWRkKGRvdWJsZXMucG9pbnRzW2pdLm5lZygpKTtcbiAgICB9XG4gICAgYSA9IGEuYWRkKGIpO1xuICB9XG4gIHJldHVybiBhLnRvUCgpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5fd25hZk11bCA9IGZ1bmN0aW9uIF93bmFmTXVsKHAsIGspIHtcbiAgdmFyIHcgPSA0O1xuXG4gIC8vIFByZWNvbXB1dGUgd2luZG93XG4gIHZhciBuYWZQb2ludHMgPSBwLl9nZXROQUZQb2ludHModyk7XG4gIHcgPSBuYWZQb2ludHMud25kO1xuICB2YXIgd25kID0gbmFmUG9pbnRzLnBvaW50cztcblxuICAvLyBHZXQgTkFGIGZvcm1cbiAgdmFyIG5hZiA9IGdldE5BRihrLCB3LCB0aGlzLl9iaXRMZW5ndGgpO1xuXG4gIC8vIEFkZCBgdGhpc2AqKE4rMSkgZm9yIGV2ZXJ5IHctTkFGIGluZGV4XG4gIHZhciBhY2MgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgZm9yICh2YXIgaSA9IG5hZi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIC8vIENvdW50IHplcm9lc1xuICAgIGZvciAodmFyIGsgPSAwOyBpID49IDAgJiYgbmFmW2ldID09PSAwOyBpLS0pXG4gICAgICBrKys7XG4gICAgaWYgKGkgPj0gMClcbiAgICAgIGsrKztcbiAgICBhY2MgPSBhY2MuZGJscChrKTtcblxuICAgIGlmIChpIDwgMClcbiAgICAgIGJyZWFrO1xuICAgIHZhciB6ID0gbmFmW2ldO1xuICAgIGFzc2VydCh6ICE9PSAwKTtcbiAgICBpZiAocC50eXBlID09PSAnYWZmaW5lJykge1xuICAgICAgLy8gSiArLSBQXG4gICAgICBpZiAoeiA+IDApXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZCh3bmRbKHogLSAxKSA+PiAxXSk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZCh3bmRbKC16IC0gMSkgPj4gMV0ubmVnKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBKICstIEpcbiAgICAgIGlmICh6ID4gMClcbiAgICAgICAgYWNjID0gYWNjLmFkZCh3bmRbKHogLSAxKSA+PiAxXSk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5hZGQod25kWygteiAtIDEpID4+IDFdLm5lZygpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHAudHlwZSA9PT0gJ2FmZmluZScgPyBhY2MudG9QKCkgOiBhY2M7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl93bmFmTXVsQWRkID0gZnVuY3Rpb24gX3duYWZNdWxBZGQoZGVmVyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29lZmZzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqYWNvYmlhblJlc3VsdCkge1xuICB2YXIgd25kV2lkdGggPSB0aGlzLl93bmFmVDE7XG4gIHZhciB3bmQgPSB0aGlzLl93bmFmVDI7XG4gIHZhciBuYWYgPSB0aGlzLl93bmFmVDM7XG5cbiAgLy8gRmlsbCBhbGwgYXJyYXlzXG4gIHZhciBtYXggPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIHAgPSBwb2ludHNbaV07XG4gICAgdmFyIG5hZlBvaW50cyA9IHAuX2dldE5BRlBvaW50cyhkZWZXKTtcbiAgICB3bmRXaWR0aFtpXSA9IG5hZlBvaW50cy53bmQ7XG4gICAgd25kW2ldID0gbmFmUG9pbnRzLnBvaW50cztcbiAgfVxuXG4gIC8vIENvbWIgc21hbGwgd2luZG93IE5BRnNcbiAgZm9yICh2YXIgaSA9IGxlbiAtIDE7IGkgPj0gMTsgaSAtPSAyKSB7XG4gICAgdmFyIGEgPSBpIC0gMTtcbiAgICB2YXIgYiA9IGk7XG4gICAgaWYgKHduZFdpZHRoW2FdICE9PSAxIHx8IHduZFdpZHRoW2JdICE9PSAxKSB7XG4gICAgICBuYWZbYV0gPSBnZXROQUYoY29lZmZzW2FdLCB3bmRXaWR0aFthXSwgdGhpcy5fYml0TGVuZ3RoKTtcbiAgICAgIG5hZltiXSA9IGdldE5BRihjb2VmZnNbYl0sIHduZFdpZHRoW2JdLCB0aGlzLl9iaXRMZW5ndGgpO1xuICAgICAgbWF4ID0gTWF0aC5tYXgobmFmW2FdLmxlbmd0aCwgbWF4KTtcbiAgICAgIG1heCA9IE1hdGgubWF4KG5hZltiXS5sZW5ndGgsIG1heCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgY29tYiA9IFtcbiAgICAgIHBvaW50c1thXSwgLyogMSAqL1xuICAgICAgbnVsbCwgLyogMyAqL1xuICAgICAgbnVsbCwgLyogNSAqL1xuICAgICAgcG9pbnRzW2JdIC8qIDcgKi9cbiAgICBdO1xuXG4gICAgLy8gVHJ5IHRvIGF2b2lkIFByb2plY3RpdmUgcG9pbnRzLCBpZiBwb3NzaWJsZVxuICAgIGlmIChwb2ludHNbYV0ueS5jbXAocG9pbnRzW2JdLnkpID09PSAwKSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLmFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH0gZWxzZSBpZiAocG9pbnRzW2FdLnkuY21wKHBvaW50c1tiXS55LnJlZE5lZygpKSA9PT0gMCkge1xuICAgICAgY29tYlsxXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS5hZGQocG9pbnRzW2JdLm5lZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tYlsxXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IFtcbiAgICAgIC0zLCAvKiAtMSAtMSAqL1xuICAgICAgLTEsIC8qIC0xIDAgKi9cbiAgICAgIC01LCAvKiAtMSAxICovXG4gICAgICAtNywgLyogMCAtMSAqL1xuICAgICAgMCwgLyogMCAwICovXG4gICAgICA3LCAvKiAwIDEgKi9cbiAgICAgIDUsIC8qIDEgLTEgKi9cbiAgICAgIDEsIC8qIDEgMCAqL1xuICAgICAgMyAgLyogMSAxICovXG4gICAgXTtcblxuICAgIHZhciBqc2YgPSBnZXRKU0YoY29lZmZzW2FdLCBjb2VmZnNbYl0pO1xuICAgIG1heCA9IE1hdGgubWF4KGpzZlswXS5sZW5ndGgsIG1heCk7XG4gICAgbmFmW2FdID0gbmV3IEFycmF5KG1heCk7XG4gICAgbmFmW2JdID0gbmV3IEFycmF5KG1heCk7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBtYXg7IGorKykge1xuICAgICAgdmFyIGphID0ganNmWzBdW2pdIHwgMDtcbiAgICAgIHZhciBqYiA9IGpzZlsxXVtqXSB8IDA7XG5cbiAgICAgIG5hZlthXVtqXSA9IGluZGV4WyhqYSArIDEpICogMyArIChqYiArIDEpXTtcbiAgICAgIG5hZltiXVtqXSA9IDA7XG4gICAgICB3bmRbYV0gPSBjb21iO1xuICAgIH1cbiAgfVxuXG4gIHZhciBhY2MgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgdmFyIHRtcCA9IHRoaXMuX3duYWZUNDtcbiAgZm9yICh2YXIgaSA9IG1heDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgayA9IDA7XG5cbiAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICB2YXIgemVybyA9IHRydWU7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIHRtcFtqXSA9IG5hZltqXVtpXSB8IDA7XG4gICAgICAgIGlmICh0bXBbal0gIT09IDApXG4gICAgICAgICAgemVybyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCF6ZXJvKVxuICAgICAgICBicmVhaztcbiAgICAgIGsrKztcbiAgICAgIGktLTtcbiAgICB9XG4gICAgaWYgKGkgPj0gMClcbiAgICAgIGsrKztcbiAgICBhY2MgPSBhY2MuZGJscChrKTtcbiAgICBpZiAoaSA8IDApXG4gICAgICBicmVhaztcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIHZhciB6ID0gdG1wW2pdO1xuICAgICAgdmFyIHA7XG4gICAgICBpZiAoeiA9PT0gMClcbiAgICAgICAgY29udGludWU7XG4gICAgICBlbHNlIGlmICh6ID4gMClcbiAgICAgICAgcCA9IHduZFtqXVsoeiAtIDEpID4+IDFdO1xuICAgICAgZWxzZSBpZiAoeiA8IDApXG4gICAgICAgIHAgPSB3bmRbal1bKC16IC0gMSkgPj4gMV0ubmVnKCk7XG5cbiAgICAgIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQocCk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5hZGQocCk7XG4gICAgfVxuICB9XG4gIC8vIFplcm9pZnkgcmVmZXJlbmNlc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgIHduZFtpXSA9IG51bGw7XG5cbiAgaWYgKGphY29iaWFuUmVzdWx0KVxuICAgIHJldHVybiBhY2M7XG4gIGVsc2VcbiAgICByZXR1cm4gYWNjLnRvUCgpO1xufTtcblxuZnVuY3Rpb24gQmFzZVBvaW50KGN1cnZlLCB0eXBlKSB7XG4gIHRoaXMuY3VydmUgPSBjdXJ2ZTtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5wcmVjb21wdXRlZCA9IG51bGw7XG59XG5CYXNlQ3VydmUuQmFzZVBvaW50ID0gQmFzZVBvaW50O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEoLypvdGhlciovKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHJldHVybiB0aGlzLmN1cnZlLnZhbGlkYXRlKHRoaXMpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5kZWNvZGVQb2ludCA9IGZ1bmN0aW9uIGRlY29kZVBvaW50KGJ5dGVzLCBlbmMpIHtcbiAgYnl0ZXMgPSB1dGlscy50b0FycmF5KGJ5dGVzLCBlbmMpO1xuXG4gIHZhciBsZW4gPSB0aGlzLnAuYnl0ZUxlbmd0aCgpO1xuXG4gIC8vIHVuY29tcHJlc3NlZCwgaHlicmlkLW9kZCwgaHlicmlkLWV2ZW5cbiAgaWYgKChieXRlc1swXSA9PT0gMHgwNCB8fCBieXRlc1swXSA9PT0gMHgwNiB8fCBieXRlc1swXSA9PT0gMHgwNykgJiZcbiAgICAgIGJ5dGVzLmxlbmd0aCAtIDEgPT09IDIgKiBsZW4pIHtcbiAgICBpZiAoYnl0ZXNbMF0gPT09IDB4MDYpXG4gICAgICBhc3NlcnQoYnl0ZXNbYnl0ZXMubGVuZ3RoIC0gMV0gJSAyID09PSAwKTtcbiAgICBlbHNlIGlmIChieXRlc1swXSA9PT0gMHgwNylcbiAgICAgIGFzc2VydChieXRlc1tieXRlcy5sZW5ndGggLSAxXSAlIDIgPT09IDEpO1xuXG4gICAgdmFyIHJlcyA9ICB0aGlzLnBvaW50KGJ5dGVzLnNsaWNlKDEsIDEgKyBsZW4pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlcy5zbGljZSgxICsgbGVuLCAxICsgMiAqIGxlbikpO1xuXG4gICAgcmV0dXJuIHJlcztcbiAgfSBlbHNlIGlmICgoYnl0ZXNbMF0gPT09IDB4MDIgfHwgYnl0ZXNbMF0gPT09IDB4MDMpICYmXG4gICAgICAgICAgICAgIGJ5dGVzLmxlbmd0aCAtIDEgPT09IGxlbikge1xuICAgIHJldHVybiB0aGlzLnBvaW50RnJvbVgoYnl0ZXMuc2xpY2UoMSwgMSArIGxlbiksIGJ5dGVzWzBdID09PSAweDAzKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcG9pbnQgZm9ybWF0Jyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmVuY29kZUNvbXByZXNzZWQgPSBmdW5jdGlvbiBlbmNvZGVDb21wcmVzc2VkKGVuYykge1xuICByZXR1cm4gdGhpcy5lbmNvZGUoZW5jLCB0cnVlKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2VuY29kZSA9IGZ1bmN0aW9uIF9lbmNvZGUoY29tcGFjdCkge1xuICB2YXIgbGVuID0gdGhpcy5jdXJ2ZS5wLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIHggPSB0aGlzLmdldFgoKS50b0FycmF5KCdiZScsIGxlbik7XG5cbiAgaWYgKGNvbXBhY3QpXG4gICAgcmV0dXJuIFsgdGhpcy5nZXRZKCkuaXNFdmVuKCkgPyAweDAyIDogMHgwMyBdLmNvbmNhdCh4KTtcblxuICByZXR1cm4gWyAweDA0IF0uY29uY2F0KHgsIHRoaXMuZ2V0WSgpLnRvQXJyYXkoJ2JlJywgbGVuKSkgO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZW5jLCBjb21wYWN0KSB7XG4gIHJldHVybiB1dGlscy5lbmNvZGUodGhpcy5fZW5jb2RlKGNvbXBhY3QpLCBlbmMpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5wcmVjb21wdXRlID0gZnVuY3Rpb24gcHJlY29tcHV0ZShwb3dlcikge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZClcbiAgICByZXR1cm4gdGhpcztcblxuICB2YXIgcHJlY29tcHV0ZWQgPSB7XG4gICAgZG91YmxlczogbnVsbCxcbiAgICBuYWY6IG51bGwsXG4gICAgYmV0YTogbnVsbFxuICB9O1xuICBwcmVjb21wdXRlZC5uYWYgPSB0aGlzLl9nZXROQUZQb2ludHMoOCk7XG4gIHByZWNvbXB1dGVkLmRvdWJsZXMgPSB0aGlzLl9nZXREb3VibGVzKDQsIHBvd2VyKTtcbiAgcHJlY29tcHV0ZWQuYmV0YSA9IHRoaXMuX2dldEJldGEoKTtcbiAgdGhpcy5wcmVjb21wdXRlZCA9IHByZWNvbXB1dGVkO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5faGFzRG91YmxlcyA9IGZ1bmN0aW9uIF9oYXNEb3VibGVzKGspIHtcbiAgaWYgKCF0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB2YXIgZG91YmxlcyA9IHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcztcbiAgaWYgKCFkb3VibGVzKVxuICAgIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gZG91Ymxlcy5wb2ludHMubGVuZ3RoID49IE1hdGguY2VpbCgoay5iaXRMZW5ndGgoKSArIDEpIC8gZG91Ymxlcy5zdGVwKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2dldERvdWJsZXMgPSBmdW5jdGlvbiBfZ2V0RG91YmxlcyhzdGVwLCBwb3dlcikge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZCAmJiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMpXG4gICAgcmV0dXJuIHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcztcblxuICB2YXIgZG91YmxlcyA9IFsgdGhpcyBdO1xuICB2YXIgYWNjID0gdGhpcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3dlcjsgaSArPSBzdGVwKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBzdGVwOyBqKyspXG4gICAgICBhY2MgPSBhY2MuZGJsKCk7XG4gICAgZG91Ymxlcy5wdXNoKGFjYyk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdGVwOiBzdGVwLFxuICAgIHBvaW50czogZG91Ymxlc1xuICB9O1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0TkFGUG9pbnRzID0gZnVuY3Rpb24gX2dldE5BRlBvaW50cyh3bmQpIHtcbiAgaWYgKHRoaXMucHJlY29tcHV0ZWQgJiYgdGhpcy5wcmVjb21wdXRlZC5uYWYpXG4gICAgcmV0dXJuIHRoaXMucHJlY29tcHV0ZWQubmFmO1xuXG4gIHZhciByZXMgPSBbIHRoaXMgXTtcbiAgdmFyIG1heCA9ICgxIDw8IHduZCkgLSAxO1xuICB2YXIgZGJsID0gbWF4ID09PSAxID8gbnVsbCA6IHRoaXMuZGJsKCk7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgbWF4OyBpKyspXG4gICAgcmVzW2ldID0gcmVzW2kgLSAxXS5hZGQoZGJsKTtcbiAgcmV0dXJuIHtcbiAgICB3bmQ6IHduZCxcbiAgICBwb2ludHM6IHJlc1xuICB9O1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0QmV0YSA9IGZ1bmN0aW9uIF9nZXRCZXRhKCkge1xuICByZXR1cm4gbnVsbDtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZGJscCA9IGZ1bmN0aW9uIGRibHAoaykge1xuICB2YXIgciA9IHRoaXM7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgazsgaSsrKVxuICAgIHIgPSByLmRibCgpO1xuICByZXR1cm4gcjtcbn07XG4iLCJ2YXIgYXNuMSA9IHJlcXVpcmUoJy4vYXNuMScpXG52YXIgYWVzaWQgPSByZXF1aXJlKCcuL2Flc2lkLmpzb24nKVxudmFyIGZpeFByb2MgPSByZXF1aXJlKCcuL2ZpeFByb2MnKVxudmFyIGNpcGhlcnMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWFlcycpXG52YXIgY29tcGF0ID0gcmVxdWlyZSgncGJrZGYyJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZUtleXNcblxuZnVuY3Rpb24gcGFyc2VLZXlzIChidWZmZXIpIHtcbiAgdmFyIHBhc3N3b3JkXG4gIGlmICh0eXBlb2YgYnVmZmVyID09PSAnb2JqZWN0JyAmJiAhQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcikpIHtcbiAgICBwYXNzd29yZCA9IGJ1ZmZlci5wYXNzcGhyYXNlXG4gICAgYnVmZmVyID0gYnVmZmVyLmtleVxuICB9XG4gIGlmICh0eXBlb2YgYnVmZmVyID09PSAnc3RyaW5nJykge1xuICAgIGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAgfVxuXG4gIHZhciBzdHJpcHBlZCA9IGZpeFByb2MoYnVmZmVyLCBwYXNzd29yZClcblxuICB2YXIgdHlwZSA9IHN0cmlwcGVkLnRhZ1xuICB2YXIgZGF0YSA9IHN0cmlwcGVkLmRhdGFcbiAgdmFyIHN1YnR5cGUsIG5kYXRhXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0NFUlRJRklDQVRFJzpcbiAgICAgIG5kYXRhID0gYXNuMS5jZXJ0aWZpY2F0ZS5kZWNvZGUoZGF0YSwgJ2RlcicpLnRic0NlcnRpZmljYXRlLnN1YmplY3RQdWJsaWNLZXlJbmZvXG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgY2FzZSAnUFVCTElDIEtFWSc6XG4gICAgICBpZiAoIW5kYXRhKSB7XG4gICAgICAgIG5kYXRhID0gYXNuMS5QdWJsaWNLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgfVxuICAgICAgc3VidHlwZSA9IG5kYXRhLmFsZ29yaXRobS5hbGdvcml0aG0uam9pbignLicpXG4gICAgICBzd2l0Y2ggKHN1YnR5cGUpIHtcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMTM1NDkuMS4xLjEnOlxuICAgICAgICAgIHJldHVybiBhc24xLlJTQVB1YmxpY0tleS5kZWNvZGUobmRhdGEuc3ViamVjdFB1YmxpY0tleS5kYXRhLCAnZGVyJylcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0NS4yLjEnOlxuICAgICAgICAgIG5kYXRhLnN1YmplY3RQcml2YXRlS2V5ID0gbmRhdGEuc3ViamVjdFB1YmxpY0tleVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZWMnLFxuICAgICAgICAgICAgZGF0YTogbmRhdGFcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDAuNC4xJzpcbiAgICAgICAgICBuZGF0YS5hbGdvcml0aG0ucGFyYW1zLnB1Yl9rZXkgPSBhc24xLkRTQXBhcmFtLmRlY29kZShuZGF0YS5zdWJqZWN0UHVibGljS2V5LmRhdGEsICdkZXInKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgICAgIGRhdGE6IG5kYXRhLmFsZ29yaXRobS5wYXJhbXNcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgaWQgJyArIHN1YnR5cGUpXG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gICAgY2FzZSAnRU5DUllQVEVEIFBSSVZBVEUgS0VZJzpcbiAgICAgIGRhdGEgPSBhc24xLkVuY3J5cHRlZFByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgZGF0YSA9IGRlY3J5cHQoZGF0YSwgcGFzc3dvcmQpXG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgY2FzZSAnUFJJVkFURSBLRVknOlxuICAgICAgbmRhdGEgPSBhc24xLlByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgc3VidHlwZSA9IG5kYXRhLmFsZ29yaXRobS5hbGdvcml0aG0uam9pbignLicpXG4gICAgICBzd2l0Y2ggKHN1YnR5cGUpIHtcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMTM1NDkuMS4xLjEnOlxuICAgICAgICAgIHJldHVybiBhc24xLlJTQVByaXZhdGVLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJylcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0NS4yLjEnOlxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjdXJ2ZTogbmRhdGEuYWxnb3JpdGhtLmN1cnZlLFxuICAgICAgICAgICAgcHJpdmF0ZUtleTogYXNuMS5FQ1ByaXZhdGVLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJykucHJpdmF0ZUtleVxuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0MC40LjEnOlxuICAgICAgICAgIG5kYXRhLmFsZ29yaXRobS5wYXJhbXMucHJpdl9rZXkgPSBhc24xLkRTQXBhcmFtLmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdkc2EnLFxuICAgICAgICAgICAgcGFyYW1zOiBuZGF0YS5hbGdvcml0aG0ucGFyYW1zXG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IGlkICcgKyBzdWJ0eXBlKVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICAgIGNhc2UgJ1JTQSBQVUJMSUMgS0VZJzpcbiAgICAgIHJldHVybiBhc24xLlJTQVB1YmxpY0tleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgY2FzZSAnUlNBIFBSSVZBVEUgS0VZJzpcbiAgICAgIHJldHVybiBhc24xLlJTQVByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgIGNhc2UgJ0RTQSBQUklWQVRFIEtFWSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgcGFyYW1zOiBhc24xLkRTQVByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgfVxuICAgIGNhc2UgJ0VDIFBSSVZBVEUgS0VZJzpcbiAgICAgIGRhdGEgPSBhc24xLkVDUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjdXJ2ZTogZGF0YS5wYXJhbWV0ZXJzLnZhbHVlLFxuICAgICAgICBwcml2YXRlS2V5OiBkYXRhLnByaXZhdGVLZXlcbiAgICAgIH1cbiAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gIH1cbn1cbnBhcnNlS2V5cy5zaWduYXR1cmUgPSBhc24xLnNpZ25hdHVyZVxuZnVuY3Rpb24gZGVjcnlwdCAoZGF0YSwgcGFzc3dvcmQpIHtcbiAgdmFyIHNhbHQgPSBkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmtkZS5rZGVwYXJhbXMuc2FsdFxuICB2YXIgaXRlcnMgPSBwYXJzZUludChkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmtkZS5rZGVwYXJhbXMuaXRlcnMudG9TdHJpbmcoKSwgMTApXG4gIHZhciBhbGdvID0gYWVzaWRbZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5jaXBoZXIuYWxnby5qb2luKCcuJyldXG4gIHZhciBpdiA9IGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQuY2lwaGVyLml2XG4gIHZhciBjaXBoZXJUZXh0ID0gZGF0YS5zdWJqZWN0UHJpdmF0ZUtleVxuICB2YXIga2V5bGVuID0gcGFyc2VJbnQoYWxnby5zcGxpdCgnLScpWzFdLCAxMCkgLyA4XG4gIHZhciBrZXkgPSBjb21wYXQucGJrZGYyU3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcnMsIGtleWxlbiwgJ3NoYTEnKVxuICB2YXIgY2lwaGVyID0gY2lwaGVycy5jcmVhdGVEZWNpcGhlcml2KGFsZ28sIGtleSwgaXYpXG4gIHZhciBvdXQgPSBbXVxuICBvdXQucHVzaChjaXBoZXIudXBkYXRlKGNpcGhlclRleHQpKVxuICBvdXQucHVzaChjaXBoZXIuZmluYWwoKSlcbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gIH1cbn1cbmlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuYWxsb2MgJiYgQnVmZmVyLmFsbG9jVW5zYWZlICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcbn0gZWxzZSB7XG4gIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXG4gIGV4cG9ydHMuQnVmZmVyID0gU2FmZUJ1ZmZlclxufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBDb3B5IHN0YXRpYyBtZXRob2RzIGZyb20gQnVmZmVyXG5jb3B5UHJvcHMoQnVmZmVyLCBTYWZlQnVmZmVyKVxuXG5TYWZlQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cblNhZmVCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHZhciBidWYgPSBCdWZmZXIoc2l6ZSlcbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmZpbGwoZmlsbClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYnVmLmZpbGwoMClcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihzaXplKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gYnVmZmVyLlNsb3dCdWZmZXIoc2l6ZSlcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBXcml0YWJsZTtcblxuLyogPHJlcGxhY2VtZW50PiAqL1xuZnVuY3Rpb24gV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aGlzLmNodW5rID0gY2h1bms7XG4gIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgdGhpcy5jYWxsYmFjayA9IGNiO1xuICB0aGlzLm5leHQgPSBudWxsO1xufVxuXG4vLyBJdCBzZWVtcyBhIGxpbmtlZCBsaXN0IGJ1dCBpdCBpcyBub3Rcbi8vIHRoZXJlIHdpbGwgYmUgb25seSAyIG9mIHRoZXNlIGZvciBlYWNoIHN0cmVhbVxuZnVuY3Rpb24gQ29ya2VkUmVxdWVzdChzdGF0ZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMuZW50cnkgPSBudWxsO1xuICB0aGlzLmZpbmlzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBvbkNvcmtlZEZpbmlzaChfdGhpcywgc3RhdGUpO1xuICB9O1xufVxuLyogPC9yZXBsYWNlbWVudD4gKi9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBhc3luY1dyaXRlID0gIXByb2Nlc3MuYnJvd3NlciAmJiBbJ3YwLjEwJywgJ3YwLjkuJ10uaW5kZXhPZihwcm9jZXNzLnZlcnNpb24uc2xpY2UoMCwgNSkpID4gLTEgPyBzZXRJbW1lZGlhdGUgOiBwbmEubmV4dFRpY2s7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpbnRlcm5hbFV0aWwgPSB7XG4gIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKVxufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xuXG51dGlsLmluaGVyaXRzKFdyaXRhYmxlLCBTdHJlYW0pO1xuXG5mdW5jdGlvbiBub3AoKSB7fVxuXG5mdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxuICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIHRoYXQgd2UgYWx3YXlzIHJldHVybiBmYWxzZSBpZlxuICAvLyB0aGUgZW50aXJlIGJ1ZmZlciBpcyBub3QgZmx1c2hlZCBpbW1lZGlhdGVseSBvbiB3cml0ZSgpXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciB3cml0YWJsZUh3bSA9IG9wdGlvbnMud3JpdGFibGVIaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXG4gIGlmIChod20gfHwgaHdtID09PSAwKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod207ZWxzZSBpZiAoaXNEdXBsZXggJiYgKHdyaXRhYmxlSHdtIHx8IHdyaXRhYmxlSHdtID09PSAwKSkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gd3JpdGFibGVId207ZWxzZSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIGlmIF9maW5hbCBoYXMgYmVlbiBjYWxsZWRcbiAgdGhpcy5maW5hbENhbGxlZCA9IGZhbHNlO1xuXG4gIC8vIGRyYWluIGV2ZW50IGZsYWcuXG4gIHRoaXMubmVlZERyYWluID0gZmFsc2U7XG4gIC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7XG4gIC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcbiAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xuICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmdcbiAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cbiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVTdHJpbmdzID0gIW5vRGVjb2RlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcbiAgLy8gc29ja2V0IG9yIGZpbGUuXG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLlxuICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcblxuICAvLyB3aGVuIHRydWUgYWxsIHdyaXRlcyB3aWxsIGJlIGJ1ZmZlcmVkIHVudGlsIC51bmNvcmsoKSBjYWxsXG4gIHRoaXMuY29ya2VkID0gMDtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoXG4gIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxuICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXG4gIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uIChlcikge1xuICAgIG9ud3JpdGUoc3RyZWFtLCBlcik7XG4gIH07XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQgdGhlIHVzZXIgc3VwcGxpZXMgdG8gd3JpdGUoY2h1bmssZW5jb2RpbmcsY2IpXG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG5cbiAgLy8gdGhlIGFtb3VudCB0aGF0IGlzIGJlaW5nIHdyaXR0ZW4gd2hlbiBfd3JpdGUgaXMgY2FsbGVkLlxuICB0aGlzLndyaXRlbGVuID0gMDtcblxuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cbiAgLy8gbnVtYmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3NcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG4gIHRoaXMucGVuZGluZ2NiID0gMDtcblxuICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG4gIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zXG4gIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuXG4gIC8vIGNvdW50IGJ1ZmZlcmVkIHJlcXVlc3RzXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuXG4gIC8vIGFsbG9jYXRlIHRoZSBmaXJzdCBDb3JrZWRSZXF1ZXN0LCB0aGVyZSBpcyBhbHdheXNcbiAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3b1xuICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpO1xufVxuXG5Xcml0YWJsZVN0YXRlLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXIoKSB7XG4gIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXJlZFJlcXVlc3Q7XG4gIHZhciBvdXQgPSBbXTtcbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0YXRlLnByb3RvdHlwZSwgJ2J1ZmZlcicsIHtcbiAgICAgIGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpXG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHt9XG59KSgpO1xuXG4vLyBUZXN0IF93cml0YWJsZVN0YXRlIGZvciBpbmhlcml0YW5jZSB0byBhY2NvdW50IGZvciBEdXBsZXggc3RyZWFtcyxcbi8vIHdob3NlIHByb3RvdHlwZSBjaGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS5cbnZhciByZWFsSGFzSW5zdGFuY2U7XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICBpZiAocmVhbEhhc0luc3RhbmNlLmNhbGwodGhpcywgb2JqZWN0KSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAodGhpcyAhPT0gV3JpdGFibGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICByZWFsSGFzSW5zdGFuY2UgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHRoaXM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICAvLyBXcml0YWJsZSBjdG9yIGlzIGFwcGxpZWQgdG8gRHVwbGV4ZXMsIHRvby5cbiAgLy8gYHJlYWxIYXNJbnN0YW5jZWAgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdXNpbmcgcGxhaW4gYGluc3RhbmNlb2ZgXG4gIC8vIHdvdWxkIHJldHVybiBmYWxzZSwgYXMgbm8gYF93cml0YWJsZVN0YXRlYCBwcm9wZXJ0eSBpcyBhdHRhY2hlZC5cblxuICAvLyBUcnlpbmcgdG8gdXNlIHRoZSBjdXN0b20gYGluc3RhbmNlb2ZgIGZvciBXcml0YWJsZSBoZXJlIHdpbGwgYWxzbyBicmVhayB0aGVcbiAgLy8gTm9kZS5qcyBMYXp5VHJhbnNmb3JtIGltcGxlbWVudGF0aW9uLCB3aGljaCBoYXMgYSBub24tdHJpdmlhbCBnZXR0ZXIgZm9yXG4gIC8vIGBfd3JpdGFibGVTdGF0ZWAgdGhhdCB3b3VsZCBsZWFkIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgaWYgKCFyZWFsSGFzSW5zdGFuY2UuY2FsbChXcml0YWJsZSwgdGhpcykgJiYgISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkge1xuICAgIHJldHVybiBuZXcgV3JpdGFibGUob3B0aW9ucyk7XG4gIH1cblxuICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5LlxuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUgPSBvcHRpb25zLndyaXRlO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5maW5hbCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmluYWwgPSBvcHRpb25zLmZpbmFsO1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbi8vIE90aGVyd2lzZSBwZW9wbGUgY2FuIHBpcGUgV3JpdGFibGUgc3RyZWFtcywgd2hpY2ggaXMganVzdCB3cm9uZy5cbldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdDYW5ub3QgcGlwZSwgbm90IHJlYWRhYmxlJykpO1xufTtcblxuZnVuY3Rpb24gd3JpdGVBZnRlckVuZChzdHJlYW0sIGNiKSB7XG4gIHZhciBlciA9IG5ldyBFcnJvcignd3JpdGUgYWZ0ZXIgZW5kJyk7XG4gIC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiXG4gIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG59XG5cbi8vIENoZWNrcyB0aGF0IGEgdXNlci1zdXBwbGllZCBjaHVuayBpcyB2YWxpZCwgZXNwZWNpYWxseSBmb3IgdGhlIHBhcnRpY3VsYXJcbi8vIG1vZGUgdGhlIHN0cmVhbSBpcyBpbi4gQ3VycmVudGx5IHRoaXMgbWVhbnMgdGhhdCBgbnVsbGAgaXMgbmV2ZXIgYWNjZXB0ZWRcbi8vIGFuZCB1bmRlZmluZWQvbm9uLXN0cmluZyB2YWx1ZXMgYXJlIG9ubHkgYWxsb3dlZCBpbiBvYmplY3QgbW9kZS5cbmZ1bmN0aW9uIHZhbGlkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGNiKSB7XG4gIHZhciB2YWxpZCA9IHRydWU7XG4gIHZhciBlciA9IGZhbHNlO1xuXG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignTWF5IG5vdCB3cml0ZSBudWxsIHZhbHVlcyB0byBzdHJlYW0nKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICBpZiAoZXIpIHtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgdmFsaWQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gdmFsaWQ7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG4gIHZhciByZXQgPSBmYWxzZTtcbiAgdmFyIGlzQnVmID0gIXN0YXRlLm9iamVjdE1vZGUgJiYgX2lzVWludDhBcnJheShjaHVuayk7XG5cbiAgaWYgKGlzQnVmICYmICFCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSB7XG4gICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChpc0J1ZikgZW5jb2RpbmcgPSAnYnVmZmVyJztlbHNlIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuXG4gIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIGNiID0gbm9wO1xuXG4gIGlmIChzdGF0ZS5lbmRlZCkgd3JpdGVBZnRlckVuZCh0aGlzLCBjYik7ZWxzZSBpZiAoaXNCdWYgfHwgdmFsaWRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSkge1xuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHJldCA9IHdyaXRlT3JCdWZmZXIodGhpcywgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBzdGF0ZS5jb3JrZWQrKztcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS51bmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZC0tO1xuXG4gICAgaWYgKCFzdGF0ZS53cml0aW5nICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUpO1xuICB9XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nID0gZnVuY3Rpb24gc2V0RGVmYXVsdEVuY29kaW5nKGVuY29kaW5nKSB7XG4gIC8vIG5vZGU6OlBhcnNlRW5jb2RpbmcoKSByZXF1aXJlcyBsb3dlciBjYXNlLlxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykgZW5jb2RpbmcgPSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpO1xuICBpZiAoIShbJ2hleCcsICd1dGY4JywgJ3V0Zi04JywgJ2FzY2lpJywgJ2JpbmFyeScsICdiYXNlNjQnLCAndWNzMicsICd1Y3MtMicsICd1dGYxNmxlJywgJ3V0Zi0xNmxlJywgJ3JhdyddLmluZGV4T2YoKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCkpID4gLTEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpO1xuICB0aGlzLl93cml0YWJsZVN0YXRlLmRlZmF1bHRFbmNvZGluZyA9IGVuY29kaW5nO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHtcbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmIHN0YXRlLmRlY29kZVN0cmluZ3MgIT09IGZhbHNlICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gIH1cbiAgcmV0dXJuIGNodW5rO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gaWYgd2UncmUgYWxyZWFkeSB3cml0aW5nIHNvbWV0aGluZywgdGhlbiBqdXN0IHB1dCB0aGlzXG4vLyBpbiB0aGUgcXVldWUsIGFuZCB3YWl0IG91ciB0dXJuLiAgT3RoZXJ3aXNlLCBjYWxsIF93cml0ZVxuLy8gSWYgd2UgcmV0dXJuIGZhbHNlLCB0aGVuIHdlIG5lZWQgYSBkcmFpbiBldmVudCwgc28gc2V0IHRoYXQgZmxhZy5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgaWYgKCFpc0J1Zikge1xuICAgIHZhciBuZXdDaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuICAgIGlmIChjaHVuayAhPT0gbmV3Q2h1bmspIHtcbiAgICAgIGlzQnVmID0gdHJ1ZTtcbiAgICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gICAgICBjaHVuayA9IG5ld0NodW5rO1xuICAgIH1cbiAgfVxuICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgc3RhdGUubGVuZ3RoICs9IGxlbjtcblxuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG4gIGlmICghcmV0KSBzdGF0ZS5uZWVkRHJhaW4gPSB0cnVlO1xuXG4gIGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZCkge1xuICAgIHZhciBsYXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0ge1xuICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLFxuICAgICAgaXNCdWY6IGlzQnVmLFxuICAgICAgY2FsbGJhY2s6IGNiLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG4gICAgaWYgKGxhc3QpIHtcbiAgICAgIGxhc3QubmV4dCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7XG4gIH0gZWxzZSB7XG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBpZiAod3JpdGV2KSBzdHJlYW0uX3dyaXRldihjaHVuaywgc3RhdGUub253cml0ZSk7ZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7XG4gIHN0YXRlLnN5bmMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikge1xuICAtLXN0YXRlLnBlbmRpbmdjYjtcblxuICBpZiAoc3luYykge1xuICAgIC8vIGRlZmVyIHRoZSBjYWxsYmFjayBpZiB3ZSBhcmUgYmVpbmcgY2FsbGVkIHN5bmNocm9ub3VzbHlcbiAgICAvLyB0byBhdm9pZCBwaWxpbmcgdXAgdGhpbmdzIG9uIHRoZSBzdGFja1xuICAgIHBuYS5uZXh0VGljayhjYiwgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBhbmQgaXQgd2lsbCBhbHdheXMgaGFwcGVuXG4gICAgLy8gYWZ0ZXIgZXJyb3JcbiAgICBwbmEubmV4dFRpY2soZmluaXNoTWF5YmUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY2FsbGVyIGV4cGVjdCB0aGlzIHRvIGhhcHBlbiBiZWZvcmUgaWZcbiAgICAvLyBpdCBpcyBhc3luY1xuICAgIGNiKGVyKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGJ1dCBmaW5pc2ggbXVzdFxuICAgIC8vIGFsd2F5cyBmb2xsb3cgZXJyb3JcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcblxuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuXG4gIGlmIChlcikgb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYik7ZWxzZSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXRcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcblxuICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICAvKjxyZXBsYWNlbWVudD4qL1xuICAgICAgYXN5bmNXcml0ZShhZnRlcldyaXRlLCBzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgLyo8L3JlcGxhY2VtZW50PiovXG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpO1xuICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgY2IoKTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbi8vIE11c3QgZm9yY2UgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIG5leHRUaWNrLCBzbyB0aGF0IHdlIGRvbid0XG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG4vLyB2YWx1ZSwgYW5kIGhhcyBhIGNoYW5jZSB0byBhdHRhY2ggYSAnZHJhaW4nIGxpc3RlbmVyLlxuZnVuY3Rpb24gb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHtcbiAgICBzdGF0ZS5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKTtcbiAgfVxufVxuXG4vLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdFxuZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0O1xuXG4gIGlmIChzdHJlYW0uX3dyaXRldiAmJiBlbnRyeSAmJiBlbnRyeS5uZXh0KSB7XG4gICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKVxuICAgIHZhciBsID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQ7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShsKTtcbiAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlO1xuICAgIGhvbGRlci5lbnRyeSA9IGVudHJ5O1xuXG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgYWxsQnVmZmVycyA9IHRydWU7XG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICBidWZmZXJbY291bnRdID0gZW50cnk7XG4gICAgICBpZiAoIWVudHJ5LmlzQnVmKSBhbGxCdWZmZXJzID0gZmFsc2U7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBjb3VudCArPSAxO1xuICAgIH1cbiAgICBidWZmZXIuYWxsQnVmZmVycyA9IGFsbEJ1ZmZlcnM7XG5cbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgYnVmZmVyLCAnJywgaG9sZGVyLmZpbmlzaCk7XG5cbiAgICAvLyBkb1dyaXRlIGlzIGFsbW9zdCBhbHdheXMgYXN5bmMsIGRlZmVyIHRoZXNlIHRvIHNhdmUgYSBiaXQgb2YgdGltZVxuICAgIC8vIGFzIHRoZSBob3QgcGF0aCBlbmRzIHdpdGggZG9Xcml0ZVxuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICAgIGlmIChob2xkZXIubmV4dCkge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gaG9sZGVyLm5leHQ7XG4gICAgICBob2xkZXIubmV4dCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHN0YXRlKTtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFNsb3cgY2FzZSwgd3JpdGUgY2h1bmtzIG9uZS1ieS1vbmVcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIHZhciBjaHVuayA9IGVudHJ5LmNodW5rO1xuICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XG4gICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50LS07XG4gICAgICAvLyBpZiB3ZSBkaWRuJ3QgY2FsbCB0aGUgb253cml0ZSBpbW1lZGlhdGVseSwgdGhlblxuICAgICAgLy8gaXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHdhaXQgdW50aWwgaXQgZG9lcy5cbiAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHlcbiAgICAgIC8vIGJlaW5nIHByb2Nlc3NlZCwgc28gbW92ZSB0aGUgYnVmZmVyIGNvdW50ZXIgcGFzdCB0aGVtLlxuICAgICAgaWYgKHN0YXRlLndyaXRpbmcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRXJyb3IoJ193cml0ZSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGV2ID0gbnVsbDtcblxuV3JpdGFibGUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gY2h1bms7XG4gICAgY2h1bmsgPSBudWxsO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChjaHVuayAhPT0gbnVsbCAmJiBjaHVuayAhPT0gdW5kZWZpbmVkKSB0aGlzLndyaXRlKGNodW5rLCBlbmNvZGluZyk7XG5cbiAgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3NcbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZCA9IDE7XG4gICAgdGhpcy51bmNvcmsoKTtcbiAgfVxuXG4gIC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy5cbiAgaWYgKCFzdGF0ZS5lbmRpbmcgJiYgIXN0YXRlLmZpbmlzaGVkKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xufTtcblxuZnVuY3Rpb24gbmVlZEZpbmlzaChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuZW5kaW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS53cml0aW5nO1xufVxuZnVuY3Rpb24gY2FsbEZpbmFsKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RyZWFtLl9maW5hbChmdW5jdGlvbiAoZXJyKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgaWYgKGVycikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9XG4gICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnByZWZpbmlzaGVkICYmICFzdGF0ZS5maW5hbENhbGxlZCkge1xuICAgIGlmICh0eXBlb2Ygc3RyZWFtLl9maW5hbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgICBzdGF0ZS5maW5hbENhbGxlZCA9IHRydWU7XG4gICAgICBwbmEubmV4dFRpY2soY2FsbEZpbmFsLCBzdHJlYW0sIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG4gIGlmIChuZWVkKSB7XG4gICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5lZWQ7XG59XG5cbmZ1bmN0aW9uIGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7XG4gIHN0YXRlLmVuZGluZyA9IHRydWU7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICBpZiAoY2IpIHtcbiAgICBpZiAoc3RhdGUuZmluaXNoZWQpIHBuYS5uZXh0VGljayhjYik7ZWxzZSBzdHJlYW0ub25jZSgnZmluaXNoJywgY2IpO1xuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgc3RyZWFtLndyaXRhYmxlID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9uQ29ya2VkRmluaXNoKGNvcmtSZXEsIHN0YXRlLCBlcnIpIHtcbiAgdmFyIGVudHJ5ID0gY29ya1JlcS5lbnRyeTtcbiAgY29ya1JlcS5lbnRyeSA9IG51bGw7XG4gIHdoaWxlIChlbnRyeSkge1xuICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGNiKGVycik7XG4gICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICB9XG4gIGlmIChzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUpIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IGNvcmtSZXE7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gY29ya1JlcTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMuZW5kKCk7XG4gIGNiKGVycik7XG59OyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIHx8XG4gIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIHZhciBkZXNjcmlwdG9ycyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzY3JpcHRvcnNba2V5c1tpXV0gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBkZXNjcmlwdG9ycztcbiAgfTtcblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufTtcblxuXG52YXIgZGVidWdzID0ge307XG52YXIgZGVidWdFbnZpcm9uO1xuZXhwb3J0cy5kZWJ1Z2xvZyA9IGZ1bmN0aW9uKHNldCkge1xuICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSlcbiAgICBkZWJ1Z0Vudmlyb24gPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnO1xuICBzZXQgPSBzZXQudG9VcHBlckNhc2UoKTtcbiAgaWYgKCFkZWJ1Z3Nbc2V0XSkge1xuICAgIGlmIChuZXcgUmVnRXhwKCdcXFxcYicgKyBzZXQgKyAnXFxcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkge1xuICAgICAgdmFyIHBpZCA9IHByb2Nlc3MucGlkO1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1zZyA9IGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJyVzICVkOiAlcycsIHNldCwgcGlkLCBtc2cpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHt9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVidWdzW3NldF07XG59O1xuXG5cbi8qKlxuICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0IHRoYXQgYWx0ZXJzIHRoZSBvdXRwdXQuXG4gKi9cbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgY3R4ID0ge1xuICAgIHNlZW46IFtdLFxuICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG4gIH07XG4gIC8vIGxlZ2FjeS4uLlxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XG4gIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAvLyBsZWdhY3kuLi5cbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG4gIH0gZWxzZSBpZiAob3B0cykge1xuICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3RcbiAgICBleHBvcnRzLl9leHRlbmQoY3R4LCBvcHRzKTtcbiAgfVxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xuICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG59XG5leHBvcnRzLmluc3BlY3QgPSBpbnNwZWN0O1xuXG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuaW5zcGVjdC5jb2xvcnMgPSB7XG4gICdib2xkJyA6IFsxLCAyMl0sXG4gICdpdGFsaWMnIDogWzMsIDIzXSxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuICAnaW52ZXJzZScgOiBbNywgMjddLFxuICAnd2hpdGUnIDogWzM3LCAzOV0sXG4gICdncmV5JyA6IFs5MCwgMzldLFxuICAnYmxhY2snIDogWzMwLCAzOV0sXG4gICdibHVlJyA6IFszNCwgMzldLFxuICAnY3lhbicgOiBbMzYsIDM5XSxcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAnbWFnZW50YScgOiBbMzUsIDM5XSxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxufTtcblxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5pbnNwZWN0LnN0eWxlcyA9IHtcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXG4gICdudW1iZXInOiAneWVsbG93JyxcbiAgJ2Jvb2xlYW4nOiAneWVsbG93JyxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcbiAgJ251bGwnOiAnYm9sZCcsXG4gICdzdHJpbmcnOiAnZ3JlZW4nLFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcbiAgJ3JlZ2V4cCc6ICdyZWQnXG59O1xuXG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHJldHVybiBzdHI7XG59XG5cblxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgdmFyIGhhc2ggPSB7fTtcblxuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgaWR4KSB7XG4gICAgaGFzaFt2YWxdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGhhc2g7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxuICAgICAgdmFsdWUgJiZcbiAgICAgIGlzRnVuY3Rpb24odmFsdWUuaW5zcGVjdCkgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0cy5pbnNwZWN0ICYmXG4gICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgdmFyIHZpc2libGVLZXlzID0gYXJyYXlUb0hhc2goa2V5cyk7XG5cbiAgaWYgKGN0eC5zaG93SGlkZGVuKSB7XG4gICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTtcbiAgfVxuXG4gIC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGVcbiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHhcbiAgaWYgKGlzRXJyb3IodmFsdWUpXG4gICAgICAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLlxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH1cbiAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2UgPSAnJywgYXJyYXkgPSBmYWxzZSwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XG4gIH1cblxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yXG4gIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcbiAgfVxuXG4gIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG5cbiAgdmFyIG91dHB1dDtcbiAgaWYgKGFycmF5KSB7XG4gICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCd1bmRlZmluZWQnLCAndW5kZWZpbmVkJyk7XG4gIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7XG4gIH1cbiAgaWYgKGlzTnVtYmVyKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpO1xuICBpZiAoaXNCb29sZWFuKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTtcbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAoaXNOdWxsKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgfVxuICB9XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoIWtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAga2V5LCB0cnVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gIHZhciBuYW1lLCBzdHIsIGRlc2M7XG4gIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcbiAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoIWhhc093blByb3BlcnR5KHZpc2libGVLZXlzLCBrZXkpKSB7XG4gICAgbmFtZSA9ICdbJyArIGtleSArICddJztcbiAgfVxuICBpZiAoIXN0cikge1xuICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBudW1MaW5lc0VzdCA9IDA7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIG51bUxpbmVzRXN0Kys7XG4gICAgaWYgKGN1ci5pbmRleE9mKCdcXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrO1xuICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLCAnJykubGVuZ3RoICsgMTtcbiAgfSwgMCk7XG5cbiAgaWYgKGxlbmd0aCA+IDYwKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArXG4gICAgICAgICAgIChiYXNlID09PSAnJyA/ICcnIDogYmFzZSArICdcXG4gJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBvdXRwdXQuam9pbignLFxcbiAgJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBicmFjZXNbMV07XG4gIH1cblxuICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArICcgJyArIG91dHB1dC5qb2luKCcsICcpICsgJyAnICsgYnJhY2VzWzFdO1xufVxuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5mdW5jdGlvbiBpc0FycmF5KGFyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTtcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gcmVxdWlyZSgnLi9zdXBwb3J0L2lzQnVmZmVyJyk7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydHMubG9nID0gZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpO1xufTtcblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuZXhwb3J0cy5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuX2V4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbiwgYWRkKSB7XG4gIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3RcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG52YXIga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgPyBTeW1ib2woJ3V0aWwucHJvbWlzaWZ5LmN1c3RvbScpIDogdW5kZWZpbmVkO1xuXG5leHBvcnRzLnByb21pc2lmeSA9IGZ1bmN0aW9uIHByb21pc2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG5cbiAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCAmJiBvcmlnaW5hbFtrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2xdKSB7XG4gICAgdmFyIGZuID0gb3JpZ2luYWxba0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXTtcbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJ1dGlsLnByb21pc2lmeS5jdXN0b21cIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wsIHtcbiAgICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgZnVuY3Rpb24gZm4oKSB7XG4gICAgdmFyIHByb21pc2VSZXNvbHZlLCBwcm9taXNlUmVqZWN0O1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcHJvbWlzZVJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgcHJvbWlzZVJlamVjdCA9IHJlamVjdDtcbiAgICB9KTtcblxuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cbiAgICBhcmdzLnB1c2goZnVuY3Rpb24gKGVyciwgdmFsdWUpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvbWlzZVJlc29sdmUodmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGZuLCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob3JpZ2luYWwpKTtcblxuICBpZiAoa0N1c3RvbVByb21pc2lmaWVkU3ltYm9sKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCwge1xuICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoXG4gICAgZm4sXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvcmlnaW5hbClcbiAgKTtcbn1cblxuZXhwb3J0cy5wcm9taXNpZnkuY3VzdG9tID0ga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXG5cbmZ1bmN0aW9uIGNhbGxiYWNraWZ5T25SZWplY3RlZChyZWFzb24sIGNiKSB7XG4gIC8vIGAhcmVhc29uYCBndWFyZCBpbnNwaXJlZCBieSBibHVlYmlyZCAoUmVmOiBodHRwczovL2dvby5nbC90NUlTNk0pLlxuICAvLyBCZWNhdXNlIGBudWxsYCBpcyBhIHNwZWNpYWwgZXJyb3IgdmFsdWUgaW4gY2FsbGJhY2tzIHdoaWNoIG1lYW5zIFwibm8gZXJyb3JcbiAgLy8gb2NjdXJyZWRcIiwgd2UgZXJyb3Itd3JhcCBzbyB0aGUgY2FsbGJhY2sgY29uc3VtZXIgY2FuIGRpc3Rpbmd1aXNoIGJldHdlZW5cbiAgLy8gXCJ0aGUgcHJvbWlzZSByZWplY3RlZCB3aXRoIG51bGxcIiBvciBcInRoZSBwcm9taXNlIGZ1bGZpbGxlZCB3aXRoIHVuZGVmaW5lZFwiLlxuICBpZiAoIXJlYXNvbikge1xuICAgIHZhciBuZXdSZWFzb24gPSBuZXcgRXJyb3IoJ1Byb21pc2Ugd2FzIHJlamVjdGVkIHdpdGggYSBmYWxzeSB2YWx1ZScpO1xuICAgIG5ld1JlYXNvbi5yZWFzb24gPSByZWFzb247XG4gICAgcmVhc29uID0gbmV3UmVhc29uO1xuICB9XG4gIHJldHVybiBjYihyZWFzb24pO1xufVxuXG5mdW5jdGlvbiBjYWxsYmFja2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwib3JpZ2luYWxcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgfVxuXG4gIC8vIFdlIERPIE5PVCByZXR1cm4gdGhlIHByb21pc2UgYXMgaXQgZ2l2ZXMgdGhlIHVzZXIgYSBmYWxzZSBzZW5zZSB0aGF0XG4gIC8vIHRoZSBwcm9taXNlIGlzIGFjdHVhbGx5IHNvbWVob3cgcmVsYXRlZCB0byB0aGUgY2FsbGJhY2sncyBleGVjdXRpb25cbiAgLy8gYW5kIHRoYXQgdGhlIGNhbGxiYWNrIHRocm93aW5nIHdpbGwgcmVqZWN0IHRoZSBwcm9taXNlLlxuICBmdW5jdGlvbiBjYWxsYmFja2lmaWVkKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIHZhciBtYXliZUNiID0gYXJncy5wb3AoKTtcbiAgICBpZiAodHlwZW9mIG1heWJlQ2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsYXN0IGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuICAgIH1cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGNiID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbWF5YmVDYi5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgIH07XG4gICAgLy8gSW4gdHJ1ZSBub2RlIHN0eWxlIHdlIHByb2Nlc3MgdGhlIGNhbGxiYWNrIG9uIGBuZXh0VGlja2Agd2l0aCBhbGwgdGhlXG4gICAgLy8gaW1wbGljYXRpb25zIChzdGFjaywgYHVuY2F1Z2h0RXhjZXB0aW9uYCwgYGFzeW5jX2hvb2tzYClcbiAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmV0KSB7IHByb2Nlc3MubmV4dFRpY2soY2IsIG51bGwsIHJldCkgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKHJlaikgeyBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNraWZ5T25SZWplY3RlZCwgcmVqLCBjYikgfSk7XG4gIH1cblxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoY2FsbGJhY2tpZmllZCwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9yaWdpbmFsKSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNhbGxiYWNraWZpZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob3JpZ2luYWwpKTtcbiAgcmV0dXJuIGNhbGxiYWNraWZpZWQ7XG59XG5leHBvcnRzLmNhbGxiYWNraWZ5ID0gY2FsbGJhY2tpZnk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnkgPSByZXF1aXJlKCcuL3N0cmluZ2lmeScpO1xudmFyIHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpO1xudmFyIGZvcm1hdHMgPSByZXF1aXJlKCcuL2Zvcm1hdHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZm9ybWF0czogZm9ybWF0cyxcbiAgICBwYXJzZTogcGFyc2UsXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuZGVjb2RlID0gZXhwb3J0cy5wYXJzZSA9IHJlcXVpcmUoJy4vZGVjb2RlJyk7XG5leHBvcnRzLmVuY29kZSA9IGV4cG9ydHMuc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9lbmNvZGUnKTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwdW55Y29kZSA9IHJlcXVpcmUoJ3B1bnljb2RlJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG5leHBvcnRzLnBhcnNlID0gdXJsUGFyc2U7XG5leHBvcnRzLnJlc29sdmUgPSB1cmxSZXNvbHZlO1xuZXhwb3J0cy5yZXNvbHZlT2JqZWN0ID0gdXJsUmVzb2x2ZU9iamVjdDtcbmV4cG9ydHMuZm9ybWF0ID0gdXJsRm9ybWF0O1xuXG5leHBvcnRzLlVybCA9IFVybDtcblxuZnVuY3Rpb24gVXJsKCkge1xuICB0aGlzLnByb3RvY29sID0gbnVsbDtcbiAgdGhpcy5zbGFzaGVzID0gbnVsbDtcbiAgdGhpcy5hdXRoID0gbnVsbDtcbiAgdGhpcy5ob3N0ID0gbnVsbDtcbiAgdGhpcy5wb3J0ID0gbnVsbDtcbiAgdGhpcy5ob3N0bmFtZSA9IG51bGw7XG4gIHRoaXMuaGFzaCA9IG51bGw7XG4gIHRoaXMuc2VhcmNoID0gbnVsbDtcbiAgdGhpcy5xdWVyeSA9IG51bGw7XG4gIHRoaXMucGF0aG5hbWUgPSBudWxsO1xuICB0aGlzLnBhdGggPSBudWxsO1xuICB0aGlzLmhyZWYgPSBudWxsO1xufVxuXG4vLyBSZWZlcmVuY2U6IFJGQyAzOTg2LCBSRkMgMTgwOCwgUkZDIDIzOTZcblxuLy8gZGVmaW5lIHRoZXNlIGhlcmUgc28gYXQgbGVhc3QgdGhleSBvbmx5IGhhdmUgdG8gYmVcbi8vIGNvbXBpbGVkIG9uY2Ugb24gdGhlIGZpcnN0IG1vZHVsZSBsb2FkLlxudmFyIHByb3RvY29sUGF0dGVybiA9IC9eKFthLXowLTkuKy1dKzopL2ksXG4gICAgcG9ydFBhdHRlcm4gPSAvOlswLTldKiQvLFxuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciBhIHNpbXBsZSBwYXRoIFVSTFxuICAgIHNpbXBsZVBhdGhQYXR0ZXJuID0gL14oXFwvXFwvPyg/IVxcLylbXlxcP1xcc10qKShcXD9bXlxcc10qKT8kLyxcblxuICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIHJlc2VydmVkIGZvciBkZWxpbWl0aW5nIFVSTHMuXG4gICAgLy8gV2UgYWN0dWFsbHkganVzdCBhdXRvLWVzY2FwZSB0aGVzZS5cbiAgICBkZWxpbXMgPSBbJzwnLCAnPicsICdcIicsICdgJywgJyAnLCAnXFxyJywgJ1xcbicsICdcXHQnXSxcblxuICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIG5vdCBhbGxvd2VkIGZvciB2YXJpb3VzIHJlYXNvbnMuXG4gICAgdW53aXNlID0gWyd7JywgJ30nLCAnfCcsICdcXFxcJywgJ14nLCAnYCddLmNvbmNhdChkZWxpbXMpLFxuXG4gICAgLy8gQWxsb3dlZCBieSBSRkNzLCBidXQgY2F1c2Ugb2YgWFNTIGF0dGFja3MuICBBbHdheXMgZXNjYXBlIHRoZXNlLlxuICAgIGF1dG9Fc2NhcGUgPSBbJ1xcJyddLmNvbmNhdCh1bndpc2UpLFxuICAgIC8vIENoYXJhY3RlcnMgdGhhdCBhcmUgbmV2ZXIgZXZlciBhbGxvd2VkIGluIGEgaG9zdG5hbWUuXG4gICAgLy8gTm90ZSB0aGF0IGFueSBpbnZhbGlkIGNoYXJzIGFyZSBhbHNvIGhhbmRsZWQsIGJ1dCB0aGVzZVxuICAgIC8vIGFyZSB0aGUgb25lcyB0aGF0IGFyZSAqZXhwZWN0ZWQqIHRvIGJlIHNlZW4sIHNvIHdlIGZhc3QtcGF0aFxuICAgIC8vIHRoZW0uXG4gICAgbm9uSG9zdENoYXJzID0gWyclJywgJy8nLCAnPycsICc7JywgJyMnXS5jb25jYXQoYXV0b0VzY2FwZSksXG4gICAgaG9zdEVuZGluZ0NoYXJzID0gWycvJywgJz8nLCAnIyddLFxuICAgIGhvc3RuYW1lTWF4TGVuID0gMjU1LFxuICAgIGhvc3RuYW1lUGFydFBhdHRlcm4gPSAvXlsrYS16MC05QS1aXy1dezAsNjN9JC8sXG4gICAgaG9zdG5hbWVQYXJ0U3RhcnQgPSAvXihbK2EtejAtOUEtWl8tXXswLDYzfSkoLiopJC8sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgY2FuIGFsbG93IFwidW5zYWZlXCIgYW5kIFwidW53aXNlXCIgY2hhcnMuXG4gICAgdW5zYWZlUHJvdG9jb2wgPSB7XG4gICAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gICAgfSxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBuZXZlciBoYXZlIGEgaG9zdG5hbWUuXG4gICAgaG9zdGxlc3NQcm90b2NvbCA9IHtcbiAgICAgICdqYXZhc2NyaXB0JzogdHJ1ZSxcbiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgICB9LFxuICAgIC8vIHByb3RvY29scyB0aGF0IGFsd2F5cyBjb250YWluIGEgLy8gYml0LlxuICAgIHNsYXNoZWRQcm90b2NvbCA9IHtcbiAgICAgICdodHRwJzogdHJ1ZSxcbiAgICAgICdodHRwcyc6IHRydWUsXG4gICAgICAnZnRwJzogdHJ1ZSxcbiAgICAgICdnb3BoZXInOiB0cnVlLFxuICAgICAgJ2ZpbGUnOiB0cnVlLFxuICAgICAgJ2h0dHA6JzogdHJ1ZSxcbiAgICAgICdodHRwczonOiB0cnVlLFxuICAgICAgJ2Z0cDonOiB0cnVlLFxuICAgICAgJ2dvcGhlcjonOiB0cnVlLFxuICAgICAgJ2ZpbGU6JzogdHJ1ZVxuICAgIH0sXG4gICAgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpO1xuXG5mdW5jdGlvbiB1cmxQYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIGlmICh1cmwgJiYgdXRpbC5pc09iamVjdCh1cmwpICYmIHVybCBpbnN0YW5jZW9mIFVybCkgcmV0dXJuIHVybDtcblxuICB2YXIgdSA9IG5ldyBVcmw7XG4gIHUucGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCk7XG4gIHJldHVybiB1O1xufVxuXG5VcmwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24odXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAoIXV0aWwuaXNTdHJpbmcodXJsKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXJhbWV0ZXIgJ3VybCcgbXVzdCBiZSBhIHN0cmluZywgbm90IFwiICsgdHlwZW9mIHVybCk7XG4gIH1cblxuICAvLyBDb3B5IGNocm9tZSwgSUUsIG9wZXJhIGJhY2tzbGFzaC1oYW5kbGluZyBiZWhhdmlvci5cbiAgLy8gQmFjayBzbGFzaGVzIGJlZm9yZSB0aGUgcXVlcnkgc3RyaW5nIGdldCBjb252ZXJ0ZWQgdG8gZm9yd2FyZCBzbGFzaGVzXG4gIC8vIFNlZTogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI1OTE2XG4gIHZhciBxdWVyeUluZGV4ID0gdXJsLmluZGV4T2YoJz8nKSxcbiAgICAgIHNwbGl0dGVyID1cbiAgICAgICAgICAocXVlcnlJbmRleCAhPT0gLTEgJiYgcXVlcnlJbmRleCA8IHVybC5pbmRleE9mKCcjJykpID8gJz8nIDogJyMnLFxuICAgICAgdVNwbGl0ID0gdXJsLnNwbGl0KHNwbGl0dGVyKSxcbiAgICAgIHNsYXNoUmVnZXggPSAvXFxcXC9nO1xuICB1U3BsaXRbMF0gPSB1U3BsaXRbMF0ucmVwbGFjZShzbGFzaFJlZ2V4LCAnLycpO1xuICB1cmwgPSB1U3BsaXQuam9pbihzcGxpdHRlcik7XG5cbiAgdmFyIHJlc3QgPSB1cmw7XG5cbiAgLy8gdHJpbSBiZWZvcmUgcHJvY2VlZGluZy5cbiAgLy8gVGhpcyBpcyB0byBzdXBwb3J0IHBhcnNlIHN0dWZmIGxpa2UgXCIgIGh0dHA6Ly9mb28uY29tICBcXG5cIlxuICByZXN0ID0gcmVzdC50cmltKCk7XG5cbiAgaWYgKCFzbGFzaGVzRGVub3RlSG9zdCAmJiB1cmwuc3BsaXQoJyMnKS5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBUcnkgZmFzdCBwYXRoIHJlZ2V4cFxuICAgIHZhciBzaW1wbGVQYXRoID0gc2ltcGxlUGF0aFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgICBpZiAoc2ltcGxlUGF0aCkge1xuICAgICAgdGhpcy5wYXRoID0gcmVzdDtcbiAgICAgIHRoaXMuaHJlZiA9IHJlc3Q7XG4gICAgICB0aGlzLnBhdGhuYW1lID0gc2ltcGxlUGF0aFsxXTtcbiAgICAgIGlmIChzaW1wbGVQYXRoWzJdKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gc2ltcGxlUGF0aFsyXTtcbiAgICAgICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlzdHJpbmcucGFyc2UodGhpcy5zZWFyY2guc3Vic3RyKDEpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5zZWFyY2guc3Vic3RyKDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZWFyY2ggPSAnJztcbiAgICAgICAgdGhpcy5xdWVyeSA9IHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG5cbiAgdmFyIHByb3RvID0gcHJvdG9jb2xQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gIGlmIChwcm90bykge1xuICAgIHByb3RvID0gcHJvdG9bMF07XG4gICAgdmFyIGxvd2VyUHJvdG8gPSBwcm90by50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMucHJvdG9jb2wgPSBsb3dlclByb3RvO1xuICAgIHJlc3QgPSByZXN0LnN1YnN0cihwcm90by5sZW5ndGgpO1xuICB9XG5cbiAgLy8gZmlndXJlIG91dCBpZiBpdCdzIGdvdCBhIGhvc3RcbiAgLy8gdXNlckBzZXJ2ZXIgaXMgKmFsd2F5cyogaW50ZXJwcmV0ZWQgYXMgYSBob3N0bmFtZSwgYW5kIHVybFxuICAvLyByZXNvbHV0aW9uIHdpbGwgdHJlYXQgLy9mb28vYmFyIGFzIGhvc3Q9Zm9vLHBhdGg9YmFyIGJlY2F1c2UgdGhhdCdzXG4gIC8vIGhvdyB0aGUgYnJvd3NlciByZXNvbHZlcyByZWxhdGl2ZSBVUkxzLlxuICBpZiAoc2xhc2hlc0Rlbm90ZUhvc3QgfHwgcHJvdG8gfHwgcmVzdC5tYXRjaCgvXlxcL1xcL1teQFxcL10rQFteQFxcL10rLykpIHtcbiAgICB2YXIgc2xhc2hlcyA9IHJlc3Quc3Vic3RyKDAsIDIpID09PSAnLy8nO1xuICAgIGlmIChzbGFzaGVzICYmICEocHJvdG8gJiYgaG9zdGxlc3NQcm90b2NvbFtwcm90b10pKSB7XG4gICAgICByZXN0ID0gcmVzdC5zdWJzdHIoMik7XG4gICAgICB0aGlzLnNsYXNoZXMgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghaG9zdGxlc3NQcm90b2NvbFtwcm90b10gJiZcbiAgICAgIChzbGFzaGVzIHx8IChwcm90byAmJiAhc2xhc2hlZFByb3RvY29sW3Byb3RvXSkpKSB7XG5cbiAgICAvLyB0aGVyZSdzIGEgaG9zdG5hbWUuXG4gICAgLy8gdGhlIGZpcnN0IGluc3RhbmNlIG9mIC8sID8sIDssIG9yICMgZW5kcyB0aGUgaG9zdC5cbiAgICAvL1xuICAgIC8vIElmIHRoZXJlIGlzIGFuIEAgaW4gdGhlIGhvc3RuYW1lLCB0aGVuIG5vbi1ob3N0IGNoYXJzICphcmUqIGFsbG93ZWRcbiAgICAvLyB0byB0aGUgbGVmdCBvZiB0aGUgbGFzdCBAIHNpZ24sIHVubGVzcyBzb21lIGhvc3QtZW5kaW5nIGNoYXJhY3RlclxuICAgIC8vIGNvbWVzICpiZWZvcmUqIHRoZSBALXNpZ24uXG4gICAgLy8gVVJMcyBhcmUgb2Jub3hpb3VzLlxuICAgIC8vXG4gICAgLy8gZXg6XG4gICAgLy8gaHR0cDovL2FAYkBjLyA9PiB1c2VyOmFAYiBob3N0OmNcbiAgICAvLyBodHRwOi8vYUBiP0BjID0+IHVzZXI6YSBob3N0OmMgcGF0aDovP0BjXG5cbiAgICAvLyB2MC4xMiBUT0RPKGlzYWFjcyk6IFRoaXMgaXMgbm90IHF1aXRlIGhvdyBDaHJvbWUgZG9lcyB0aGluZ3MuXG4gICAgLy8gUmV2aWV3IG91ciB0ZXN0IGNhc2UgYWdhaW5zdCBicm93c2VycyBtb3JlIGNvbXByZWhlbnNpdmVseS5cblxuICAgIC8vIGZpbmQgdGhlIGZpcnN0IGluc3RhbmNlIG9mIGFueSBob3N0RW5kaW5nQ2hhcnNcbiAgICB2YXIgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9zdEVuZGluZ0NoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKGhvc3RFbmRpbmdDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuXG4gICAgLy8gYXQgdGhpcyBwb2ludCwgZWl0aGVyIHdlIGhhdmUgYW4gZXhwbGljaXQgcG9pbnQgd2hlcmUgdGhlXG4gICAgLy8gYXV0aCBwb3J0aW9uIGNhbm5vdCBnbyBwYXN0LCBvciB0aGUgbGFzdCBAIGNoYXIgaXMgdGhlIGRlY2lkZXIuXG4gICAgdmFyIGF1dGgsIGF0U2lnbjtcbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIGF0U2lnbiBjYW4gYmUgYW55d2hlcmUuXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGF0U2lnbiBtdXN0IGJlIGluIGF1dGggcG9ydGlvbi5cbiAgICAgIC8vIGh0dHA6Ly9hQGIvY0BkID0+IGhvc3Q6YiBhdXRoOmEgcGF0aDovY0BkXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJywgaG9zdEVuZCk7XG4gICAgfVxuXG4gICAgLy8gTm93IHdlIGhhdmUgYSBwb3J0aW9uIHdoaWNoIGlzIGRlZmluaXRlbHkgdGhlIGF1dGguXG4gICAgLy8gUHVsbCB0aGF0IG9mZi5cbiAgICBpZiAoYXRTaWduICE9PSAtMSkge1xuICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKTtcbiAgICAgIHJlc3QgPSByZXN0LnNsaWNlKGF0U2lnbiArIDEpO1xuICAgICAgdGhpcy5hdXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIH1cblxuICAgIC8vIHRoZSBob3N0IGlzIHRoZSByZW1haW5pbmcgdG8gdGhlIGxlZnQgb2YgdGhlIGZpcnN0IG5vbi1ob3N0IGNoYXJcbiAgICBob3N0RW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub25Ib3N0Q2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2Yobm9uSG9zdENoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSlcbiAgICAgICAgaG9zdEVuZCA9IGhlYztcbiAgICB9XG4gICAgLy8gaWYgd2Ugc3RpbGwgaGF2ZSBub3QgaGl0IGl0LCB0aGVuIHRoZSBlbnRpcmUgdGhpbmcgaXMgYSBob3N0LlxuICAgIGlmIChob3N0RW5kID09PSAtMSlcbiAgICAgIGhvc3RFbmQgPSByZXN0Lmxlbmd0aDtcblxuICAgIHRoaXMuaG9zdCA9IHJlc3Quc2xpY2UoMCwgaG9zdEVuZCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoaG9zdEVuZCk7XG5cbiAgICAvLyBwdWxsIG91dCBwb3J0LlxuICAgIHRoaXMucGFyc2VIb3N0KCk7XG5cbiAgICAvLyB3ZSd2ZSBpbmRpY2F0ZWQgdGhhdCB0aGVyZSBpcyBhIGhvc3RuYW1lLFxuICAgIC8vIHNvIGV2ZW4gaWYgaXQncyBlbXB0eSwgaXQgaGFzIHRvIGJlIHByZXNlbnQuXG4gICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7XG5cbiAgICAvLyBpZiBob3N0bmFtZSBiZWdpbnMgd2l0aCBbIGFuZCBlbmRzIHdpdGggXVxuICAgIC8vIGFzc3VtZSB0aGF0IGl0J3MgYW4gSVB2NiBhZGRyZXNzLlxuICAgIHZhciBpcHY2SG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lWzBdID09PSAnWycgJiZcbiAgICAgICAgdGhpcy5ob3N0bmFtZVt0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDFdID09PSAnXSc7XG5cbiAgICAvLyB2YWxpZGF0ZSBhIGxpdHRsZS5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgdmFyIGhvc3RwYXJ0cyA9IHRoaXMuaG9zdG5hbWUuc3BsaXQoL1xcLi8pO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBob3N0cGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gaG9zdHBhcnRzW2ldO1xuICAgICAgICBpZiAoIXBhcnQpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIXBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICB2YXIgbmV3cGFydCA9ICcnO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBrID0gcGFydC5sZW5ndGg7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LmNoYXJDb2RlQXQoaikgPiAxMjcpIHtcbiAgICAgICAgICAgICAgLy8gd2UgcmVwbGFjZSBub24tQVNDSUkgY2hhciB3aXRoIGEgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgIC8vIHdlIG5lZWQgdGhpcyB0byBtYWtlIHN1cmUgc2l6ZSBvZiBob3N0bmFtZSBpcyBub3RcbiAgICAgICAgICAgICAgLy8gYnJva2VuIGJ5IHJlcGxhY2luZyBub24tQVNDSUkgYnkgbm90aGluZ1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9ICd4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gcGFydFtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2UgdGVzdCBhZ2FpbiB3aXRoIEFTQ0lJIGNoYXIgb25seVxuICAgICAgICAgIGlmICghbmV3cGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgICAgdmFyIHZhbGlkUGFydHMgPSBob3N0cGFydHMuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICB2YXIgbm90SG9zdCA9IGhvc3RwYXJ0cy5zbGljZShpICsgMSk7XG4gICAgICAgICAgICB2YXIgYml0ID0gcGFydC5tYXRjaChob3N0bmFtZVBhcnRTdGFydCk7XG4gICAgICAgICAgICBpZiAoYml0KSB7XG4gICAgICAgICAgICAgIHZhbGlkUGFydHMucHVzaChiaXRbMV0pO1xuICAgICAgICAgICAgICBub3RIb3N0LnVuc2hpZnQoYml0WzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3RIb3N0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXN0ID0gJy8nICsgbm90SG9zdC5qb2luKCcuJykgKyByZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ob3N0bmFtZSA9IHZhbGlkUGFydHMuam9pbignLicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaG9zdG5hbWUubGVuZ3RoID4gaG9zdG5hbWVNYXhMZW4pIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaG9zdG5hbWVzIGFyZSBhbHdheXMgbG93ZXIgY2FzZS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIC8vIElETkEgU3VwcG9ydDogUmV0dXJucyBhIHB1bnljb2RlZCByZXByZXNlbnRhdGlvbiBvZiBcImRvbWFpblwiLlxuICAgICAgLy8gSXQgb25seSBjb252ZXJ0cyBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgdGhhdFxuICAgICAgLy8gaGF2ZSBub24tQVNDSUkgY2hhcmFjdGVycywgaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZlxuICAgICAgLy8geW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0IGFscmVhZHkgaXMgQVNDSUktb25seS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSBwdW55Y29kZS50b0FTQ0lJKHRoaXMuaG9zdG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBwID0gdGhpcy5wb3J0ID8gJzonICsgdGhpcy5wb3J0IDogJyc7XG4gICAgdmFyIGggPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuICAgIHRoaXMuaG9zdCA9IGggKyBwO1xuICAgIHRoaXMuaHJlZiArPSB0aGlzLmhvc3Q7XG5cbiAgICAvLyBzdHJpcCBbIGFuZCBdIGZyb20gdGhlIGhvc3RuYW1lXG4gICAgLy8gdGhlIGhvc3QgZmllbGQgc3RpbGwgcmV0YWlucyB0aGVtLCB0aG91Z2hcbiAgICBpZiAoaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS5zdWJzdHIoMSwgdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIGlmIChyZXN0WzBdICE9PSAnLycpIHtcbiAgICAgICAgcmVzdCA9ICcvJyArIHJlc3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gbm93IHJlc3QgaXMgc2V0IHRvIHRoZSBwb3N0LWhvc3Qgc3R1ZmYuXG4gIC8vIGNob3Agb2ZmIGFueSBkZWxpbSBjaGFycy5cbiAgaWYgKCF1bnNhZmVQcm90b2NvbFtsb3dlclByb3RvXSkge1xuXG4gICAgLy8gRmlyc3QsIG1ha2UgMTAwJSBzdXJlIHRoYXQgYW55IFwiYXV0b0VzY2FwZVwiIGNoYXJzIGdldFxuICAgIC8vIGVzY2FwZWQsIGV2ZW4gaWYgZW5jb2RlVVJJQ29tcG9uZW50IGRvZXNuJ3QgdGhpbmsgdGhleVxuICAgIC8vIG5lZWQgdG8gYmUuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdXRvRXNjYXBlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGFlID0gYXV0b0VzY2FwZVtpXTtcbiAgICAgIGlmIChyZXN0LmluZGV4T2YoYWUpID09PSAtMSlcbiAgICAgICAgY29udGludWU7XG4gICAgICB2YXIgZXNjID0gZW5jb2RlVVJJQ29tcG9uZW50KGFlKTtcbiAgICAgIGlmIChlc2MgPT09IGFlKSB7XG4gICAgICAgIGVzYyA9IGVzY2FwZShhZSk7XG4gICAgICB9XG4gICAgICByZXN0ID0gcmVzdC5zcGxpdChhZSkuam9pbihlc2MpO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gY2hvcCBvZmYgZnJvbSB0aGUgdGFpbCBmaXJzdC5cbiAgdmFyIGhhc2ggPSByZXN0LmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2ggIT09IC0xKSB7XG4gICAgLy8gZ290IGEgZnJhZ21lbnQgc3RyaW5nLlxuICAgIHRoaXMuaGFzaCA9IHJlc3Quc3Vic3RyKGhhc2gpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIGhhc2gpO1xuICB9XG4gIHZhciBxbSA9IHJlc3QuaW5kZXhPZignPycpO1xuICBpZiAocW0gIT09IC0xKSB7XG4gICAgdGhpcy5zZWFyY2ggPSByZXN0LnN1YnN0cihxbSk7XG4gICAgdGhpcy5xdWVyeSA9IHJlc3Quc3Vic3RyKHFtICsgMSk7XG4gICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnF1ZXJ5KTtcbiAgICB9XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgcW0pO1xuICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAvLyBubyBxdWVyeSBzdHJpbmcsIGJ1dCBwYXJzZVF1ZXJ5U3RyaW5nIHN0aWxsIHJlcXVlc3RlZFxuICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgdGhpcy5xdWVyeSA9IHt9O1xuICB9XG4gIGlmIChyZXN0KSB0aGlzLnBhdGhuYW1lID0gcmVzdDtcbiAgaWYgKHNsYXNoZWRQcm90b2NvbFtsb3dlclByb3RvXSAmJlxuICAgICAgdGhpcy5ob3N0bmFtZSAmJiAhdGhpcy5wYXRobmFtZSkge1xuICAgIHRoaXMucGF0aG5hbWUgPSAnLyc7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gIGlmICh0aGlzLnBhdGhuYW1lIHx8IHRoaXMuc2VhcmNoKSB7XG4gICAgdmFyIHAgPSB0aGlzLnBhdGhuYW1lIHx8ICcnO1xuICAgIHZhciBzID0gdGhpcy5zZWFyY2ggfHwgJyc7XG4gICAgdGhpcy5wYXRoID0gcCArIHM7XG4gIH1cblxuICAvLyBmaW5hbGx5LCByZWNvbnN0cnVjdCB0aGUgaHJlZiBiYXNlZCBvbiB3aGF0IGhhcyBiZWVuIHZhbGlkYXRlZC5cbiAgdGhpcy5ocmVmID0gdGhpcy5mb3JtYXQoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBmb3JtYXQgYSBwYXJzZWQgb2JqZWN0IGludG8gYSB1cmwgc3RyaW5nXG5mdW5jdGlvbiB1cmxGb3JtYXQob2JqKSB7XG4gIC8vIGVuc3VyZSBpdCdzIGFuIG9iamVjdCwgYW5kIG5vdCBhIHN0cmluZyB1cmwuXG4gIC8vIElmIGl0J3MgYW4gb2JqLCB0aGlzIGlzIGEgbm8tb3AuXG4gIC8vIHRoaXMgd2F5LCB5b3UgY2FuIGNhbGwgdXJsX2Zvcm1hdCgpIG9uIHN0cmluZ3NcbiAgLy8gdG8gY2xlYW4gdXAgcG90ZW50aWFsbHkgd29ua3kgdXJscy5cbiAgaWYgKHV0aWwuaXNTdHJpbmcob2JqKSkgb2JqID0gdXJsUGFyc2Uob2JqKTtcbiAgaWYgKCEob2JqIGluc3RhbmNlb2YgVXJsKSkgcmV0dXJuIFVybC5wcm90b3R5cGUuZm9ybWF0LmNhbGwob2JqKTtcbiAgcmV0dXJuIG9iai5mb3JtYXQoKTtcbn1cblxuVXJsLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGF1dGggPSB0aGlzLmF1dGggfHwgJyc7XG4gIGlmIChhdXRoKSB7XG4gICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICBhdXRoID0gYXV0aC5yZXBsYWNlKC8lM0EvaSwgJzonKTtcbiAgICBhdXRoICs9ICdAJztcbiAgfVxuXG4gIHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2wgfHwgJycsXG4gICAgICBwYXRobmFtZSA9IHRoaXMucGF0aG5hbWUgfHwgJycsXG4gICAgICBoYXNoID0gdGhpcy5oYXNoIHx8ICcnLFxuICAgICAgaG9zdCA9IGZhbHNlLFxuICAgICAgcXVlcnkgPSAnJztcblxuICBpZiAodGhpcy5ob3N0KSB7XG4gICAgaG9zdCA9IGF1dGggKyB0aGlzLmhvc3Q7XG4gIH0gZWxzZSBpZiAodGhpcy5ob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpID09PSAtMSA/XG4gICAgICAgIHRoaXMuaG9zdG5hbWUgOlxuICAgICAgICAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nKTtcbiAgICBpZiAodGhpcy5wb3J0KSB7XG4gICAgICBob3N0ICs9ICc6JyArIHRoaXMucG9ydDtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5xdWVyeSAmJlxuICAgICAgdXRpbC5pc09iamVjdCh0aGlzLnF1ZXJ5KSAmJlxuICAgICAgT2JqZWN0LmtleXModGhpcy5xdWVyeSkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSBxdWVyeXN0cmluZy5zdHJpbmdpZnkodGhpcy5xdWVyeSk7XG4gIH1cblxuICB2YXIgc2VhcmNoID0gdGhpcy5zZWFyY2ggfHwgKHF1ZXJ5ICYmICgnPycgKyBxdWVyeSkpIHx8ICcnO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5zdWJzdHIoLTEpICE9PSAnOicpIHByb3RvY29sICs9ICc6JztcblxuICAvLyBvbmx5IHRoZSBzbGFzaGVkUHJvdG9jb2xzIGdldCB0aGUgLy8uICBOb3QgbWFpbHRvOiwgeG1wcDosIGV0Yy5cbiAgLy8gdW5sZXNzIHRoZXkgaGFkIHRoZW0gdG8gYmVnaW4gd2l0aC5cbiAgaWYgKHRoaXMuc2xhc2hlcyB8fFxuICAgICAgKCFwcm90b2NvbCB8fCBzbGFzaGVkUHJvdG9jb2xbcHJvdG9jb2xdKSAmJiBob3N0ICE9PSBmYWxzZSkge1xuICAgIGhvc3QgPSAnLy8nICsgKGhvc3QgfHwgJycpO1xuICAgIGlmIChwYXRobmFtZSAmJiBwYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykgcGF0aG5hbWUgPSAnLycgKyBwYXRobmFtZTtcbiAgfSBlbHNlIGlmICghaG9zdCkge1xuICAgIGhvc3QgPSAnJztcbiAgfVxuXG4gIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSAnIycpIGhhc2ggPSAnIycgKyBoYXNoO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaC5jaGFyQXQoMCkgIT09ICc/Jykgc2VhcmNoID0gJz8nICsgc2VhcmNoO1xuXG4gIHBhdGhuYW1lID0gcGF0aG5hbWUucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQobWF0Y2gpO1xuICB9KTtcbiAgc2VhcmNoID0gc2VhcmNoLnJlcGxhY2UoJyMnLCAnJTIzJyk7XG5cbiAgcmV0dXJuIHByb3RvY29sICsgaG9zdCArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbn07XG5cbmZ1bmN0aW9uIHVybFJlc29sdmUoc291cmNlLCByZWxhdGl2ZSkge1xuICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZShyZWxhdGl2ZSk7XG59XG5cblVybC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XG4gIHJldHVybiB0aGlzLnJlc29sdmVPYmplY3QodXJsUGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKSkuZm9ybWF0KCk7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlT2JqZWN0KHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgaWYgKCFzb3VyY2UpIHJldHVybiByZWxhdGl2ZTtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmVPYmplY3QocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmVPYmplY3QgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICBpZiAodXRpbC5pc1N0cmluZyhyZWxhdGl2ZSkpIHtcbiAgICB2YXIgcmVsID0gbmV3IFVybCgpO1xuICAgIHJlbC5wYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpO1xuICAgIHJlbGF0aXZlID0gcmVsO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IG5ldyBVcmwoKTtcbiAgdmFyIHRrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gIGZvciAodmFyIHRrID0gMDsgdGsgPCB0a2V5cy5sZW5ndGg7IHRrKyspIHtcbiAgICB2YXIgdGtleSA9IHRrZXlzW3RrXTtcbiAgICByZXN1bHRbdGtleV0gPSB0aGlzW3RrZXldO1xuICB9XG5cbiAgLy8gaGFzaCBpcyBhbHdheXMgb3ZlcnJpZGRlbiwgbm8gbWF0dGVyIHdoYXQuXG4gIC8vIGV2ZW4gaHJlZj1cIlwiIHdpbGwgcmVtb3ZlIGl0LlxuICByZXN1bHQuaGFzaCA9IHJlbGF0aXZlLmhhc2g7XG5cbiAgLy8gaWYgdGhlIHJlbGF0aXZlIHVybCBpcyBlbXB0eSwgdGhlbiB0aGVyZSdzIG5vdGhpbmcgbGVmdCB0byBkbyBoZXJlLlxuICBpZiAocmVsYXRpdmUuaHJlZiA9PT0gJycpIHtcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaHJlZnMgbGlrZSAvL2Zvby9iYXIgYWx3YXlzIGN1dCB0byB0aGUgcHJvdG9jb2wuXG4gIGlmIChyZWxhdGl2ZS5zbGFzaGVzICYmICFyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgIC8vIHRha2UgZXZlcnl0aGluZyBleGNlcHQgdGhlIHByb3RvY29sIGZyb20gcmVsYXRpdmVcbiAgICB2YXIgcmtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7XG4gICAgZm9yICh2YXIgcmsgPSAwOyByayA8IHJrZXlzLmxlbmd0aDsgcmsrKykge1xuICAgICAgdmFyIHJrZXkgPSBya2V5c1tya107XG4gICAgICBpZiAocmtleSAhPT0gJ3Byb3RvY29sJylcbiAgICAgICAgcmVzdWx0W3JrZXldID0gcmVsYXRpdmVbcmtleV07XG4gICAgfVxuXG4gICAgLy91cmxQYXJzZSBhcHBlbmRzIHRyYWlsaW5nIC8gdG8gdXJscyBsaWtlIGh0dHA6Ly93d3cuZXhhbXBsZS5jb21cbiAgICBpZiAoc2xhc2hlZFByb3RvY29sW3Jlc3VsdC5wcm90b2NvbF0gJiZcbiAgICAgICAgcmVzdWx0Lmhvc3RuYW1lICYmICFyZXN1bHQucGF0aG5hbWUpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gcmVzdWx0LnBhdGhuYW1lID0gJy8nO1xuICAgIH1cblxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAocmVsYXRpdmUucHJvdG9jb2wgJiYgcmVsYXRpdmUucHJvdG9jb2wgIT09IHJlc3VsdC5wcm90b2NvbCkge1xuICAgIC8vIGlmIGl0J3MgYSBrbm93biB1cmwgcHJvdG9jb2wsIHRoZW4gY2hhbmdpbmdcbiAgICAvLyB0aGUgcHJvdG9jb2wgZG9lcyB3ZWlyZCB0aGluZ3NcbiAgICAvLyBmaXJzdCwgaWYgaXQncyBub3QgZmlsZTosIHRoZW4gd2UgTVVTVCBoYXZlIGEgaG9zdCxcbiAgICAvLyBhbmQgaWYgdGhlcmUgd2FzIGEgcGF0aFxuICAgIC8vIHRvIGJlZ2luIHdpdGgsIHRoZW4gd2UgTVVTVCBoYXZlIGEgcGF0aC5cbiAgICAvLyBpZiBpdCBpcyBmaWxlOiwgdGhlbiB0aGUgaG9zdCBpcyBkcm9wcGVkLFxuICAgIC8vIGJlY2F1c2UgdGhhdCdzIGtub3duIHRvIGJlIGhvc3RsZXNzLlxuICAgIC8vIGFueXRoaW5nIGVsc2UgaXMgYXNzdW1lZCB0byBiZSBhYnNvbHV0ZS5cbiAgICBpZiAoIXNsYXNoZWRQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpO1xuICAgICAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgICAgIHZhciBrID0ga2V5c1t2XTtcbiAgICAgICAgcmVzdWx0W2tdID0gcmVsYXRpdmVba107XG4gICAgICB9XG4gICAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVzdWx0LnByb3RvY29sID0gcmVsYXRpdmUucHJvdG9jb2w7XG4gICAgaWYgKCFyZWxhdGl2ZS5ob3N0ICYmICFob3N0bGVzc1Byb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIHJlbFBhdGggPSAocmVsYXRpdmUucGF0aG5hbWUgfHwgJycpLnNwbGl0KCcvJyk7XG4gICAgICB3aGlsZSAocmVsUGF0aC5sZW5ndGggJiYgIShyZWxhdGl2ZS5ob3N0ID0gcmVsUGF0aC5zaGlmdCgpKSk7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3QpIHJlbGF0aXZlLmhvc3QgPSAnJztcbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdG5hbWUpIHJlbGF0aXZlLmhvc3RuYW1lID0gJyc7XG4gICAgICBpZiAocmVsUGF0aFswXSAhPT0gJycpIHJlbFBhdGgudW5zaGlmdCgnJyk7XG4gICAgICBpZiAocmVsUGF0aC5sZW5ndGggPCAyKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsUGF0aC5qb2luKCcvJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbGF0aXZlLnBhdGhuYW1lO1xuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHJlc3VsdC5ob3N0ID0gcmVsYXRpdmUuaG9zdCB8fCAnJztcbiAgICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGg7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdDtcbiAgICByZXN1bHQucG9ydCA9IHJlbGF0aXZlLnBvcnQ7XG4gICAgLy8gdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnBhdGhuYW1lIHx8IHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHZhciBwID0gcmVzdWx0LnBhdGhuYW1lIHx8ICcnO1xuICAgICAgdmFyIHMgPSByZXN1bHQuc2VhcmNoIHx8ICcnO1xuICAgICAgcmVzdWx0LnBhdGggPSBwICsgcztcbiAgICB9XG4gICAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB2YXIgaXNTb3VyY2VBYnMgPSAocmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyksXG4gICAgICBpc1JlbEFicyA9IChcbiAgICAgICAgICByZWxhdGl2ZS5ob3N0IHx8XG4gICAgICAgICAgcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLydcbiAgICAgICksXG4gICAgICBtdXN0RW5kQWJzID0gKGlzUmVsQWJzIHx8IGlzU291cmNlQWJzIHx8XG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQuaG9zdCAmJiByZWxhdGl2ZS5wYXRobmFtZSkpLFxuICAgICAgcmVtb3ZlQWxsRG90cyA9IG11c3RFbmRBYnMsXG4gICAgICBzcmNQYXRoID0gcmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgICAgcmVsUGF0aCA9IHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgICBwc3ljaG90aWMgPSByZXN1bHQucHJvdG9jb2wgJiYgIXNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdO1xuXG4gIC8vIGlmIHRoZSB1cmwgaXMgYSBub24tc2xhc2hlZCB1cmwsIHRoZW4gcmVsYXRpdmVcbiAgLy8gbGlua3MgbGlrZSAuLi8uLiBzaG91bGQgYmUgYWJsZVxuICAvLyB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuXG4gIC8vIHJlc3VsdC5wcm90b2NvbCBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSBub3cuXG4gIC8vIExhdGVyIG9uLCBwdXQgdGhlIGZpcnN0IHBhdGggcGFydCBpbnRvIHRoZSBob3N0IGZpZWxkLlxuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gJyc7XG4gICAgcmVzdWx0LnBvcnQgPSBudWxsO1xuICAgIGlmIChyZXN1bHQuaG9zdCkge1xuICAgICAgaWYgKHNyY1BhdGhbMF0gPT09ICcnKSBzcmNQYXRoWzBdID0gcmVzdWx0Lmhvc3Q7XG4gICAgICBlbHNlIHNyY1BhdGgudW5zaGlmdChyZXN1bHQuaG9zdCk7XG4gICAgfVxuICAgIHJlc3VsdC5ob3N0ID0gJyc7XG4gICAgaWYgKHJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9IG51bGw7XG4gICAgICByZWxhdGl2ZS5wb3J0ID0gbnVsbDtcbiAgICAgIGlmIChyZWxhdGl2ZS5ob3N0KSB7XG4gICAgICAgIGlmIChyZWxQYXRoWzBdID09PSAnJykgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7XG4gICAgICAgIGVsc2UgcmVsUGF0aC51bnNoaWZ0KHJlbGF0aXZlLmhvc3QpO1xuICAgICAgfVxuICAgICAgcmVsYXRpdmUuaG9zdCA9IG51bGw7XG4gICAgfVxuICAgIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzICYmIChyZWxQYXRoWzBdID09PSAnJyB8fCBzcmNQYXRoWzBdID09PSAnJyk7XG4gIH1cblxuICBpZiAoaXNSZWxBYnMpIHtcbiAgICAvLyBpdCdzIGFic29sdXRlLlxuICAgIHJlc3VsdC5ob3N0ID0gKHJlbGF0aXZlLmhvc3QgfHwgcmVsYXRpdmUuaG9zdCA9PT0gJycpID9cbiAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3QgOiByZXN1bHQuaG9zdDtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSAocmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdG5hbWUgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgOiByZXN1bHQuaG9zdG5hbWU7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICBzcmNQYXRoID0gcmVsUGF0aDtcbiAgICAvLyBmYWxsIHRocm91Z2ggdG8gdGhlIGRvdC1oYW5kbGluZyBiZWxvdy5cbiAgfSBlbHNlIGlmIChyZWxQYXRoLmxlbmd0aCkge1xuICAgIC8vIGl0J3MgcmVsYXRpdmVcbiAgICAvLyB0aHJvdyBhd2F5IHRoZSBleGlzdGluZyBmaWxlLCBhbmQgdGFrZSB0aGUgbmV3IHBhdGggaW5zdGVhZC5cbiAgICBpZiAoIXNyY1BhdGgpIHNyY1BhdGggPSBbXTtcbiAgICBzcmNQYXRoLnBvcCgpO1xuICAgIHNyY1BhdGggPSBzcmNQYXRoLmNvbmNhdChyZWxQYXRoKTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICB9IGVsc2UgaWYgKCF1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKHJlbGF0aXZlLnNlYXJjaCkpIHtcbiAgICAvLyBqdXN0IHB1bGwgb3V0IHRoZSBzZWFyY2guXG4gICAgLy8gbGlrZSBocmVmPSc/Zm9vJy5cbiAgICAvLyBQdXQgdGhpcyBhZnRlciB0aGUgb3RoZXIgdHdvIGNhc2VzIGJlY2F1c2UgaXQgc2ltcGxpZmllcyB0aGUgYm9vbGVhbnNcbiAgICBpZiAocHN5Y2hvdGljKSB7XG4gICAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IHNyY1BhdGguc2hpZnQoKTtcbiAgICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAgIC8vdGhpcyBlc3BlY2lhbGx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKCF1dGlsLmlzTnVsbChyZXN1bHQucGF0aG5hbWUpIHx8ICF1dGlsLmlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIC8vIG5vIHBhdGggYXQgYWxsLiAgZWFzeS5cbiAgICAvLyB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIG90aGVyIHN0dWZmIGFib3ZlLlxuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQuc2VhcmNoKSB7XG4gICAgICByZXN1bHQucGF0aCA9ICcvJyArIHJlc3VsdC5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGlmIGEgdXJsIEVORHMgaW4gLiBvciAuLiwgdGhlbiBpdCBtdXN0IGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICAvLyBob3dldmVyLCBpZiBpdCBlbmRzIGluIGFueXRoaW5nIGVsc2Ugbm9uLXNsYXNoeSxcbiAgLy8gdGhlbiBpdCBtdXN0IE5PVCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgdmFyIGxhc3QgPSBzcmNQYXRoLnNsaWNlKC0xKVswXTtcbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSAoXG4gICAgICAocmVzdWx0Lmhvc3QgfHwgcmVsYXRpdmUuaG9zdCB8fCBzcmNQYXRoLmxlbmd0aCA+IDEpICYmXG4gICAgICAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHx8IGxhc3QgPT09ICcnKTtcblxuICAvLyBzdHJpcCBzaW5nbGUgZG90cywgcmVzb2x2ZSBkb3VibGUgZG90cyB0byBwYXJlbnQgZGlyXG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBzcmNQYXRoLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICBsYXN0ID0gc3JjUGF0aFtpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoIW11c3RFbmRBYnMgJiYgIXJlbW92ZUFsbERvdHMpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHNyY1BhdGgudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAobXVzdEVuZEFicyAmJiBzcmNQYXRoWzBdICE9PSAnJyAmJlxuICAgICAgKCFzcmNQYXRoWzBdIHx8IHNyY1BhdGhbMF0uY2hhckF0KDApICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIChzcmNQYXRoLmpvaW4oJy8nKS5zdWJzdHIoLTEpICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC5wdXNoKCcnKTtcbiAgfVxuXG4gIHZhciBpc0Fic29sdXRlID0gc3JjUGF0aFswXSA9PT0gJycgfHxcbiAgICAgIChzcmNQYXRoWzBdICYmIHNyY1BhdGhbMF0uY2hhckF0KDApID09PSAnLycpO1xuXG4gIC8vIHB1dCB0aGUgaG9zdCBiYWNrXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IGlzQWJzb2x1dGUgPyAnJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNQYXRoLmxlbmd0aCA/IHNyY1BhdGguc2hpZnQoKSA6ICcnO1xuICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAvL3RoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgfHwgKHJlc3VsdC5ob3N0ICYmIHNyY1BhdGgubGVuZ3RoKTtcblxuICBpZiAobXVzdEVuZEFicyAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gc3JjUGF0aC5qb2luKCcvJyk7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgcmVxdWVzdC5odHRwXG4gIGlmICghdXRpbC5pc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhdXRpbC5pc051bGwocmVzdWx0LnNlYXJjaCkpIHtcbiAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICB9XG4gIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aCB8fCByZXN1bHQuYXV0aDtcbiAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblVybC5wcm90b3R5cGUucGFyc2VIb3N0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBob3N0ID0gdGhpcy5ob3N0O1xuICB2YXIgcG9ydCA9IHBvcnRQYXR0ZXJuLmV4ZWMoaG9zdCk7XG4gIGlmIChwb3J0KSB7XG4gICAgcG9ydCA9IHBvcnRbMF07XG4gICAgaWYgKHBvcnQgIT09ICc6Jykge1xuICAgICAgdGhpcy5wb3J0ID0gcG9ydC5zdWJzdHIoMSk7XG4gICAgfVxuICAgIGhvc3QgPSBob3N0LnN1YnN0cigwLCBob3N0Lmxlbmd0aCAtIHBvcnQubGVuZ3RoKTtcbiAgfVxuICBpZiAoaG9zdCkgdGhpcy5ob3N0bmFtZSA9IGhvc3Q7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLyohXG4gKiBtZXRob2RzXG4gKiBDb3B5cmlnaHQoYykgMjAxMy0yMDE0IFRKIEhvbG93YXljaHVrXG4gKiBDb3B5cmlnaHQoYykgMjAxNS0yMDE2IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRDdXJyZW50Tm9kZU1ldGhvZHMoKSB8fCBnZXRCYXNpY05vZGVNZXRob2RzKCk7XG5cbi8qKlxuICogR2V0IHRoZSBjdXJyZW50IE5vZGUuanMgbWV0aG9kcy5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ2V0Q3VycmVudE5vZGVNZXRob2RzKCkge1xuICByZXR1cm4gaHR0cC5NRVRIT0RTICYmIGh0dHAuTUVUSE9EUy5tYXAoZnVuY3Rpb24gbG93ZXJDYXNlTWV0aG9kKG1ldGhvZCkge1xuICAgIHJldHVybiBtZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBcImJhc2ljXCIgTm9kZS5qcyBtZXRob2RzLCBhIHNuYXBzaG90IGZyb20gTm9kZS5qcyAwLjEwLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRCYXNpY05vZGVNZXRob2RzKCkge1xuICByZXR1cm4gW1xuICAgICdnZXQnLFxuICAgICdwb3N0JyxcbiAgICAncHV0JyxcbiAgICAnaGVhZCcsXG4gICAgJ2RlbGV0ZScsXG4gICAgJ29wdGlvbnMnLFxuICAgICd0cmFjZScsXG4gICAgJ2NvcHknLFxuICAgICdsb2NrJyxcbiAgICAnbWtjb2wnLFxuICAgICdtb3ZlJyxcbiAgICAncHVyZ2UnLFxuICAgICdwcm9wZmluZCcsXG4gICAgJ3Byb3BwYXRjaCcsXG4gICAgJ3VubG9jaycsXG4gICAgJ3JlcG9ydCcsXG4gICAgJ21rYWN0aXZpdHknLFxuICAgICdjaGVja291dCcsXG4gICAgJ21lcmdlJyxcbiAgICAnbS1zZWFyY2gnLFxuICAgICdub3RpZnknLFxuICAgICdzdWJzY3JpYmUnLFxuICAgICd1bnN1YnNjcmliZScsXG4gICAgJ3BhdGNoJyxcbiAgICAnc2VhcmNoJyxcbiAgICAnY29ubmVjdCdcbiAgXTtcbn1cbiIsInZhciBDbGllbnRSZXF1ZXN0ID0gcmVxdWlyZSgnLi9saWIvcmVxdWVzdCcpXG52YXIgcmVzcG9uc2UgPSByZXF1aXJlKCcuL2xpYi9yZXNwb25zZScpXG52YXIgZXh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKVxudmFyIHN0YXR1c0NvZGVzID0gcmVxdWlyZSgnYnVpbHRpbi1zdGF0dXMtY29kZXMnKVxudmFyIHVybCA9IHJlcXVpcmUoJ3VybCcpXG5cbnZhciBodHRwID0gZXhwb3J0c1xuXG5odHRwLnJlcXVlc3QgPSBmdW5jdGlvbiAob3B0cywgY2IpIHtcblx0aWYgKHR5cGVvZiBvcHRzID09PSAnc3RyaW5nJylcblx0XHRvcHRzID0gdXJsLnBhcnNlKG9wdHMpXG5cdGVsc2Vcblx0XHRvcHRzID0gZXh0ZW5kKG9wdHMpXG5cblx0Ly8gTm9ybWFsbHksIHRoZSBwYWdlIGlzIGxvYWRlZCBmcm9tIGh0dHAgb3IgaHR0cHMsIHNvIG5vdCBzcGVjaWZ5aW5nIGEgcHJvdG9jb2xcblx0Ly8gd2lsbCByZXN1bHQgaW4gYSAodmFsaWQpIHByb3RvY29sLXJlbGF0aXZlIHVybC4gSG93ZXZlciwgdGhpcyB3b24ndCB3b3JrIGlmXG5cdC8vIHRoZSBwcm90b2NvbCBpcyBzb21ldGhpbmcgZWxzZSwgbGlrZSAnZmlsZTonXG5cdHZhciBkZWZhdWx0UHJvdG9jb2wgPSBnbG9iYWwubG9jYXRpb24ucHJvdG9jb2wuc2VhcmNoKC9eaHR0cHM/OiQvKSA9PT0gLTEgPyAnaHR0cDonIDogJydcblxuXHR2YXIgcHJvdG9jb2wgPSBvcHRzLnByb3RvY29sIHx8IGRlZmF1bHRQcm90b2NvbFxuXHR2YXIgaG9zdCA9IG9wdHMuaG9zdG5hbWUgfHwgb3B0cy5ob3N0XG5cdHZhciBwb3J0ID0gb3B0cy5wb3J0XG5cdHZhciBwYXRoID0gb3B0cy5wYXRoIHx8ICcvJ1xuXG5cdC8vIE5lY2Vzc2FyeSBmb3IgSVB2NiBhZGRyZXNzZXNcblx0aWYgKGhvc3QgJiYgaG9zdC5pbmRleE9mKCc6JykgIT09IC0xKVxuXHRcdGhvc3QgPSAnWycgKyBob3N0ICsgJ10nXG5cblx0Ly8gVGhpcyBtYXkgYmUgYSByZWxhdGl2ZSB1cmwuIFRoZSBicm93c2VyIHNob3VsZCBhbHdheXMgYmUgYWJsZSB0byBpbnRlcnByZXQgaXQgY29ycmVjdGx5LlxuXHRvcHRzLnVybCA9IChob3N0ID8gKHByb3RvY29sICsgJy8vJyArIGhvc3QpIDogJycpICsgKHBvcnQgPyAnOicgKyBwb3J0IDogJycpICsgcGF0aFxuXHRvcHRzLm1ldGhvZCA9IChvcHRzLm1ldGhvZCB8fCAnR0VUJykudG9VcHBlckNhc2UoKVxuXHRvcHRzLmhlYWRlcnMgPSBvcHRzLmhlYWRlcnMgfHwge31cblxuXHQvLyBBbHNvIHZhbGlkIG9wdHMuYXV0aCwgb3B0cy5tb2RlXG5cblx0dmFyIHJlcSA9IG5ldyBDbGllbnRSZXF1ZXN0KG9wdHMpXG5cdGlmIChjYilcblx0XHRyZXEub24oJ3Jlc3BvbnNlJywgY2IpXG5cdHJldHVybiByZXFcbn1cblxuaHR0cC5nZXQgPSBmdW5jdGlvbiBnZXQgKG9wdHMsIGNiKSB7XG5cdHZhciByZXEgPSBodHRwLnJlcXVlc3Qob3B0cywgY2IpXG5cdHJlcS5lbmQoKVxuXHRyZXR1cm4gcmVxXG59XG5cbmh0dHAuQ2xpZW50UmVxdWVzdCA9IENsaWVudFJlcXVlc3Rcbmh0dHAuSW5jb21pbmdNZXNzYWdlID0gcmVzcG9uc2UuSW5jb21pbmdNZXNzYWdlXG5cbmh0dHAuQWdlbnQgPSBmdW5jdGlvbiAoKSB7fVxuaHR0cC5BZ2VudC5kZWZhdWx0TWF4U29ja2V0cyA9IDRcblxuaHR0cC5nbG9iYWxBZ2VudCA9IG5ldyBodHRwLkFnZW50KClcblxuaHR0cC5TVEFUVVNfQ09ERVMgPSBzdGF0dXNDb2Rlc1xuXG5odHRwLk1FVEhPRFMgPSBbXG5cdCdDSEVDS09VVCcsXG5cdCdDT05ORUNUJyxcblx0J0NPUFknLFxuXHQnREVMRVRFJyxcblx0J0dFVCcsXG5cdCdIRUFEJyxcblx0J0xPQ0snLFxuXHQnTS1TRUFSQ0gnLFxuXHQnTUVSR0UnLFxuXHQnTUtBQ1RJVklUWScsXG5cdCdNS0NPTCcsXG5cdCdNT1ZFJyxcblx0J05PVElGWScsXG5cdCdPUFRJT05TJyxcblx0J1BBVENIJyxcblx0J1BPU1QnLFxuXHQnUFJPUEZJTkQnLFxuXHQnUFJPUFBBVENIJyxcblx0J1BVUkdFJyxcblx0J1BVVCcsXG5cdCdSRVBPUlQnLFxuXHQnU0VBUkNIJyxcblx0J1NVQlNDUklCRScsXG5cdCdUUkFDRScsXG5cdCdVTkxPQ0snLFxuXHQnVU5TVUJTQ1JJQkUnXG5dIiwiLyohXG4gKiBzZW5kXG4gKiBDb3B5cmlnaHQoYykgMjAxMiBUSiBIb2xvd2F5Y2h1a1xuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNiBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnaHR0cC1lcnJvcnMnKVxudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc2VuZCcpXG52YXIgZGVwcmVjYXRlID0gcmVxdWlyZSgnZGVwZCcpKCdzZW5kJylcbnZhciBkZXN0cm95ID0gcmVxdWlyZSgnZGVzdHJveScpXG52YXIgZW5jb2RlVXJsID0gcmVxdWlyZSgnZW5jb2RldXJsJylcbnZhciBlc2NhcGVIdG1sID0gcmVxdWlyZSgnZXNjYXBlLWh0bWwnKVxudmFyIGV0YWcgPSByZXF1aXJlKCdldGFnJylcbnZhciBmcmVzaCA9IHJlcXVpcmUoJ2ZyZXNoJylcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJylcbnZhciBtaW1lID0gcmVxdWlyZSgnbWltZScpXG52YXIgbXMgPSByZXF1aXJlKCdtcycpXG52YXIgb25GaW5pc2hlZCA9IHJlcXVpcmUoJ29uLWZpbmlzaGVkJylcbnZhciBwYXJzZVJhbmdlID0gcmVxdWlyZSgncmFuZ2UtcGFyc2VyJylcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG52YXIgc3RhdHVzZXMgPSByZXF1aXJlKCdzdGF0dXNlcycpXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJylcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpXG5cbi8qKlxuICogUGF0aCBmdW5jdGlvbiByZWZlcmVuY2VzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgZXh0bmFtZSA9IHBhdGguZXh0bmFtZVxudmFyIGpvaW4gPSBwYXRoLmpvaW5cbnZhciBub3JtYWxpemUgPSBwYXRoLm5vcm1hbGl6ZVxudmFyIHJlc29sdmUgPSBwYXRoLnJlc29sdmVcbnZhciBzZXAgPSBwYXRoLnNlcFxuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiBmb3IgaWRlbnRpZnlpbmcgYSBieXRlcyBSYW5nZSBoZWFkZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBCWVRFU19SQU5HRV9SRUdFWFAgPSAvXiAqYnl0ZXM9L1xuXG4vKipcbiAqIE1heGltdW0gdmFsdWUgYWxsb3dlZCBmb3IgdGhlIG1heCBhZ2UuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBNQVhfTUFYQUdFID0gNjAgKiA2MCAqIDI0ICogMzY1ICogMTAwMCAvLyAxIHllYXJcblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggYSBwYXRoIHdpdGggYSBkaXJlY3RvcnkgdXAgY29tcG9uZW50LlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgVVBfUEFUSF9SRUdFWFAgPSAvKD86XnxbXFxcXC9dKVxcLlxcLig/OltcXFxcL118JCkvXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBzZW5kXG5tb2R1bGUuZXhwb3J0cy5taW1lID0gbWltZVxuXG4vKipcbiAqIFJldHVybiBhIGBTZW5kU3RyZWFtYCBmb3IgYHJlcWAgYW5kIGBwYXRoYC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcmVxXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybiB7U2VuZFN0cmVhbX1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzZW5kIChyZXEsIHBhdGgsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBTZW5kU3RyZWFtKHJlcSwgcGF0aCwgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIGEgYFNlbmRTdHJlYW1gIHdpdGggdGhlIGdpdmVuIGBwYXRoYC5cbiAqXG4gKiBAcGFyYW0ge1JlcXVlc3R9IHJlcVxuICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gU2VuZFN0cmVhbSAocmVxLCBwYXRoLCBvcHRpb25zKSB7XG4gIFN0cmVhbS5jYWxsKHRoaXMpXG5cbiAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdGhpcy5vcHRpb25zID0gb3B0c1xuICB0aGlzLnBhdGggPSBwYXRoXG4gIHRoaXMucmVxID0gcmVxXG5cbiAgdGhpcy5fYWNjZXB0UmFuZ2VzID0gb3B0cy5hY2NlcHRSYW5nZXMgIT09IHVuZGVmaW5lZFxuICAgID8gQm9vbGVhbihvcHRzLmFjY2VwdFJhbmdlcylcbiAgICA6IHRydWVcblxuICB0aGlzLl9jYWNoZUNvbnRyb2wgPSBvcHRzLmNhY2hlQ29udHJvbCAhPT0gdW5kZWZpbmVkXG4gICAgPyBCb29sZWFuKG9wdHMuY2FjaGVDb250cm9sKVxuICAgIDogdHJ1ZVxuXG4gIHRoaXMuX2V0YWcgPSBvcHRzLmV0YWcgIT09IHVuZGVmaW5lZFxuICAgID8gQm9vbGVhbihvcHRzLmV0YWcpXG4gICAgOiB0cnVlXG5cbiAgdGhpcy5fZG90ZmlsZXMgPSBvcHRzLmRvdGZpbGVzICE9PSB1bmRlZmluZWRcbiAgICA/IG9wdHMuZG90ZmlsZXNcbiAgICA6ICdpZ25vcmUnXG5cbiAgaWYgKHRoaXMuX2RvdGZpbGVzICE9PSAnaWdub3JlJyAmJiB0aGlzLl9kb3RmaWxlcyAhPT0gJ2FsbG93JyAmJiB0aGlzLl9kb3RmaWxlcyAhPT0gJ2RlbnknKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZG90ZmlsZXMgb3B0aW9uIG11c3QgYmUgXCJhbGxvd1wiLCBcImRlbnlcIiwgb3IgXCJpZ25vcmVcIicpXG4gIH1cblxuICB0aGlzLl9oaWRkZW4gPSBCb29sZWFuKG9wdHMuaGlkZGVuKVxuXG4gIGlmIChvcHRzLmhpZGRlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVwcmVjYXRlKCdoaWRkZW46IHVzZSBkb3RmaWxlczogXFwnJyArICh0aGlzLl9oaWRkZW4gPyAnYWxsb3cnIDogJ2lnbm9yZScpICsgJ1xcJyBpbnN0ZWFkJylcbiAgfVxuXG4gIC8vIGxlZ2FjeSBzdXBwb3J0XG4gIGlmIChvcHRzLmRvdGZpbGVzID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLl9kb3RmaWxlcyA9IHVuZGVmaW5lZFxuICB9XG5cbiAgdGhpcy5fZXh0ZW5zaW9ucyA9IG9wdHMuZXh0ZW5zaW9ucyAhPT0gdW5kZWZpbmVkXG4gICAgPyBub3JtYWxpemVMaXN0KG9wdHMuZXh0ZW5zaW9ucywgJ2V4dGVuc2lvbnMgb3B0aW9uJylcbiAgICA6IFtdXG5cbiAgdGhpcy5faW1tdXRhYmxlID0gb3B0cy5pbW11dGFibGUgIT09IHVuZGVmaW5lZFxuICAgID8gQm9vbGVhbihvcHRzLmltbXV0YWJsZSlcbiAgICA6IGZhbHNlXG5cbiAgdGhpcy5faW5kZXggPSBvcHRzLmluZGV4ICE9PSB1bmRlZmluZWRcbiAgICA/IG5vcm1hbGl6ZUxpc3Qob3B0cy5pbmRleCwgJ2luZGV4IG9wdGlvbicpXG4gICAgOiBbJ2luZGV4Lmh0bWwnXVxuXG4gIHRoaXMuX2xhc3RNb2RpZmllZCA9IG9wdHMubGFzdE1vZGlmaWVkICE9PSB1bmRlZmluZWRcbiAgICA/IEJvb2xlYW4ob3B0cy5sYXN0TW9kaWZpZWQpXG4gICAgOiB0cnVlXG5cbiAgdGhpcy5fbWF4YWdlID0gb3B0cy5tYXhBZ2UgfHwgb3B0cy5tYXhhZ2VcbiAgdGhpcy5fbWF4YWdlID0gdHlwZW9mIHRoaXMuX21heGFnZSA9PT0gJ3N0cmluZydcbiAgICA/IG1zKHRoaXMuX21heGFnZSlcbiAgICA6IE51bWJlcih0aGlzLl9tYXhhZ2UpXG4gIHRoaXMuX21heGFnZSA9ICFpc05hTih0aGlzLl9tYXhhZ2UpXG4gICAgPyBNYXRoLm1pbihNYXRoLm1heCgwLCB0aGlzLl9tYXhhZ2UpLCBNQVhfTUFYQUdFKVxuICAgIDogMFxuXG4gIHRoaXMuX3Jvb3QgPSBvcHRzLnJvb3RcbiAgICA/IHJlc29sdmUob3B0cy5yb290KVxuICAgIDogbnVsbFxuXG4gIGlmICghdGhpcy5fcm9vdCAmJiBvcHRzLmZyb20pIHtcbiAgICB0aGlzLmZyb20ob3B0cy5mcm9tKVxuICB9XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBgU3RyZWFtYC5cbiAqL1xuXG51dGlsLmluaGVyaXRzKFNlbmRTdHJlYW0sIFN0cmVhbSlcblxuLyoqXG4gKiBFbmFibGUgb3IgZGlzYWJsZSBldGFnIGdlbmVyYXRpb24uXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSB2YWxcbiAqIEByZXR1cm4ge1NlbmRTdHJlYW19XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNlbmRTdHJlYW0ucHJvdG90eXBlLmV0YWcgPSBkZXByZWNhdGUuZnVuY3Rpb24oZnVuY3Rpb24gZXRhZyAodmFsKSB7XG4gIHRoaXMuX2V0YWcgPSBCb29sZWFuKHZhbClcbiAgZGVidWcoJ2V0YWcgJXMnLCB0aGlzLl9ldGFnKVxuICByZXR1cm4gdGhpc1xufSwgJ3NlbmQuZXRhZzogcGFzcyBldGFnIGFzIG9wdGlvbicpXG5cbi8qKlxuICogRW5hYmxlIG9yIGRpc2FibGUgXCJoaWRkZW5cIiAoZG90KSBmaWxlcy5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHBhdGhcbiAqIEByZXR1cm4ge1NlbmRTdHJlYW19XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNlbmRTdHJlYW0ucHJvdG90eXBlLmhpZGRlbiA9IGRlcHJlY2F0ZS5mdW5jdGlvbihmdW5jdGlvbiBoaWRkZW4gKHZhbCkge1xuICB0aGlzLl9oaWRkZW4gPSBCb29sZWFuKHZhbClcbiAgdGhpcy5fZG90ZmlsZXMgPSB1bmRlZmluZWRcbiAgZGVidWcoJ2hpZGRlbiAlcycsIHRoaXMuX2hpZGRlbilcbiAgcmV0dXJuIHRoaXNcbn0sICdzZW5kLmhpZGRlbjogdXNlIGRvdGZpbGVzIG9wdGlvbicpXG5cbi8qKlxuICogU2V0IGluZGV4IGBwYXRoc2AsIHNldCB0byBhIGZhbHN5XG4gKiB2YWx1ZSB0byBkaXNhYmxlIGluZGV4IHN1cHBvcnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8Qm9vbGVhbnxBcnJheX0gcGF0aHNcbiAqIEByZXR1cm4ge1NlbmRTdHJlYW19XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNlbmRTdHJlYW0ucHJvdG90eXBlLmluZGV4ID0gZGVwcmVjYXRlLmZ1bmN0aW9uKGZ1bmN0aW9uIGluZGV4IChwYXRocykge1xuICB2YXIgaW5kZXggPSAhcGF0aHMgPyBbXSA6IG5vcm1hbGl6ZUxpc3QocGF0aHMsICdwYXRocyBhcmd1bWVudCcpXG4gIGRlYnVnKCdpbmRleCAlbycsIHBhdGhzKVxuICB0aGlzLl9pbmRleCA9IGluZGV4XG4gIHJldHVybiB0aGlzXG59LCAnc2VuZC5pbmRleDogcGFzcyBpbmRleCBhcyBvcHRpb24nKVxuXG4vKipcbiAqIFNldCByb290IGBwYXRoYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHJldHVybiB7U2VuZFN0cmVhbX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU2VuZFN0cmVhbS5wcm90b3R5cGUucm9vdCA9IGZ1bmN0aW9uIHJvb3QgKHBhdGgpIHtcbiAgdGhpcy5fcm9vdCA9IHJlc29sdmUoU3RyaW5nKHBhdGgpKVxuICBkZWJ1Zygncm9vdCAlcycsIHRoaXMuX3Jvb3QpXG4gIHJldHVybiB0aGlzXG59XG5cblNlbmRTdHJlYW0ucHJvdG90eXBlLmZyb20gPSBkZXByZWNhdGUuZnVuY3Rpb24oU2VuZFN0cmVhbS5wcm90b3R5cGUucm9vdCxcbiAgJ3NlbmQuZnJvbTogcGFzcyByb290IGFzIG9wdGlvbicpXG5cblNlbmRTdHJlYW0ucHJvdG90eXBlLnJvb3QgPSBkZXByZWNhdGUuZnVuY3Rpb24oU2VuZFN0cmVhbS5wcm90b3R5cGUucm9vdCxcbiAgJ3NlbmQucm9vdDogcGFzcyByb290IGFzIG9wdGlvbicpXG5cbi8qKlxuICogU2V0IG1heC1hZ2UgdG8gYG1heEFnZWAuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1heEFnZVxuICogQHJldHVybiB7U2VuZFN0cmVhbX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU2VuZFN0cmVhbS5wcm90b3R5cGUubWF4YWdlID0gZGVwcmVjYXRlLmZ1bmN0aW9uKGZ1bmN0aW9uIG1heGFnZSAobWF4QWdlKSB7XG4gIHRoaXMuX21heGFnZSA9IHR5cGVvZiBtYXhBZ2UgPT09ICdzdHJpbmcnXG4gICAgPyBtcyhtYXhBZ2UpXG4gICAgOiBOdW1iZXIobWF4QWdlKVxuICB0aGlzLl9tYXhhZ2UgPSAhaXNOYU4odGhpcy5fbWF4YWdlKVxuICAgID8gTWF0aC5taW4oTWF0aC5tYXgoMCwgdGhpcy5fbWF4YWdlKSwgTUFYX01BWEFHRSlcbiAgICA6IDBcbiAgZGVidWcoJ21heC1hZ2UgJWQnLCB0aGlzLl9tYXhhZ2UpXG4gIHJldHVybiB0aGlzXG59LCAnc2VuZC5tYXhhZ2U6IHBhc3MgbWF4QWdlIGFzIG9wdGlvbicpXG5cbi8qKlxuICogRW1pdCBlcnJvciB3aXRoIGBzdGF0dXNgLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGF0dXNcbiAqIEBwYXJhbSB7RXJyb3J9IFtlcnJdXG4gKiBAcHJpdmF0ZVxuICovXG5cblNlbmRTdHJlYW0ucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gZXJyb3IgKHN0YXR1cywgZXJyKSB7XG4gIC8vIGVtaXQgaWYgbGlzdGVuZXJzIGluc3RlYWQgb2YgcmVzcG9uZGluZ1xuICBpZiAoaGFzTGlzdGVuZXJzKHRoaXMsICdlcnJvcicpKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBjcmVhdGVFcnJvcihzdGF0dXMsIGVyciwge1xuICAgICAgZXhwb3NlOiBmYWxzZVxuICAgIH0pKVxuICB9XG5cbiAgdmFyIHJlcyA9IHRoaXMucmVzXG4gIHZhciBtc2cgPSBzdGF0dXNlc1tzdGF0dXNdIHx8IFN0cmluZyhzdGF0dXMpXG4gIHZhciBkb2MgPSBjcmVhdGVIdG1sRG9jdW1lbnQoJ0Vycm9yJywgZXNjYXBlSHRtbChtc2cpKVxuXG4gIC8vIGNsZWFyIGV4aXN0aW5nIGhlYWRlcnNcbiAgY2xlYXJIZWFkZXJzKHJlcylcblxuICAvLyBhZGQgZXJyb3IgaGVhZGVyc1xuICBpZiAoZXJyICYmIGVyci5oZWFkZXJzKSB7XG4gICAgc2V0SGVhZGVycyhyZXMsIGVyci5oZWFkZXJzKVxuICB9XG5cbiAgLy8gc2VuZCBiYXNpYyByZXNwb25zZVxuICByZXMuc3RhdHVzQ29kZSA9IHN0YXR1c1xuICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAndGV4dC9odG1sOyBjaGFyc2V0PVVURi04JylcbiAgcmVzLnNldEhlYWRlcignQ29udGVudC1MZW5ndGgnLCBCdWZmZXIuYnl0ZUxlbmd0aChkb2MpKVxuICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVNlY3VyaXR5LVBvbGljeScsIFwiZGVmYXVsdC1zcmMgJ25vbmUnXCIpXG4gIHJlcy5zZXRIZWFkZXIoJ1gtQ29udGVudC1UeXBlLU9wdGlvbnMnLCAnbm9zbmlmZicpXG4gIHJlcy5lbmQoZG9jKVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBwYXRobmFtZSBlbmRzIHdpdGggXCIvXCIuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cblxuU2VuZFN0cmVhbS5wcm90b3R5cGUuaGFzVHJhaWxpbmdTbGFzaCA9IGZ1bmN0aW9uIGhhc1RyYWlsaW5nU2xhc2ggKCkge1xuICByZXR1cm4gdGhpcy5wYXRoW3RoaXMucGF0aC5sZW5ndGggLSAxXSA9PT0gJy8nXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhpcyBpcyBhIGNvbmRpdGlvbmFsIEdFVCByZXF1ZXN0LlxuICpcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5TZW5kU3RyZWFtLnByb3RvdHlwZS5pc0NvbmRpdGlvbmFsR0VUID0gZnVuY3Rpb24gaXNDb25kaXRpb25hbEdFVCAoKSB7XG4gIHJldHVybiB0aGlzLnJlcS5oZWFkZXJzWydpZi1tYXRjaCddIHx8XG4gICAgdGhpcy5yZXEuaGVhZGVyc1snaWYtdW5tb2RpZmllZC1zaW5jZSddIHx8XG4gICAgdGhpcy5yZXEuaGVhZGVyc1snaWYtbm9uZS1tYXRjaCddIHx8XG4gICAgdGhpcy5yZXEuaGVhZGVyc1snaWYtbW9kaWZpZWQtc2luY2UnXVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSByZXF1ZXN0IHByZWNvbmRpdGlvbnMgZmFpbGVkLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5cblNlbmRTdHJlYW0ucHJvdG90eXBlLmlzUHJlY29uZGl0aW9uRmFpbHVyZSA9IGZ1bmN0aW9uIGlzUHJlY29uZGl0aW9uRmFpbHVyZSAoKSB7XG4gIHZhciByZXEgPSB0aGlzLnJlcVxuICB2YXIgcmVzID0gdGhpcy5yZXNcblxuICAvLyBpZi1tYXRjaFxuICB2YXIgbWF0Y2ggPSByZXEuaGVhZGVyc1snaWYtbWF0Y2gnXVxuICBpZiAobWF0Y2gpIHtcbiAgICB2YXIgZXRhZyA9IHJlcy5nZXRIZWFkZXIoJ0VUYWcnKVxuICAgIHJldHVybiAhZXRhZyB8fCAobWF0Y2ggIT09ICcqJyAmJiBwYXJzZVRva2VuTGlzdChtYXRjaCkuZXZlcnkoZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICByZXR1cm4gbWF0Y2ggIT09IGV0YWcgJiYgbWF0Y2ggIT09ICdXLycgKyBldGFnICYmICdXLycgKyBtYXRjaCAhPT0gZXRhZ1xuICAgIH0pKVxuICB9XG5cbiAgLy8gaWYtdW5tb2RpZmllZC1zaW5jZVxuICB2YXIgdW5tb2RpZmllZFNpbmNlID0gcGFyc2VIdHRwRGF0ZShyZXEuaGVhZGVyc1snaWYtdW5tb2RpZmllZC1zaW5jZSddKVxuICBpZiAoIWlzTmFOKHVubW9kaWZpZWRTaW5jZSkpIHtcbiAgICB2YXIgbGFzdE1vZGlmaWVkID0gcGFyc2VIdHRwRGF0ZShyZXMuZ2V0SGVhZGVyKCdMYXN0LU1vZGlmaWVkJykpXG4gICAgcmV0dXJuIGlzTmFOKGxhc3RNb2RpZmllZCkgfHwgbGFzdE1vZGlmaWVkID4gdW5tb2RpZmllZFNpbmNlXG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBTdHJpcCBjb250ZW50LSogaGVhZGVyIGZpZWxkcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5cblNlbmRTdHJlYW0ucHJvdG90eXBlLnJlbW92ZUNvbnRlbnRIZWFkZXJGaWVsZHMgPSBmdW5jdGlvbiByZW1vdmVDb250ZW50SGVhZGVyRmllbGRzICgpIHtcbiAgdmFyIHJlcyA9IHRoaXMucmVzXG4gIHZhciBoZWFkZXJzID0gZ2V0SGVhZGVyTmFtZXMocmVzKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaGVhZGVycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBoZWFkZXIgPSBoZWFkZXJzW2ldXG4gICAgaWYgKGhlYWRlci5zdWJzdHIoMCwgOCkgPT09ICdjb250ZW50LScgJiYgaGVhZGVyICE9PSAnY29udGVudC1sb2NhdGlvbicpIHtcbiAgICAgIHJlcy5yZW1vdmVIZWFkZXIoaGVhZGVyKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlc3BvbmQgd2l0aCAzMDQgbm90IG1vZGlmaWVkLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNlbmRTdHJlYW0ucHJvdG90eXBlLm5vdE1vZGlmaWVkID0gZnVuY3Rpb24gbm90TW9kaWZpZWQgKCkge1xuICB2YXIgcmVzID0gdGhpcy5yZXNcbiAgZGVidWcoJ25vdCBtb2RpZmllZCcpXG4gIHRoaXMucmVtb3ZlQ29udGVudEhlYWRlckZpZWxkcygpXG4gIHJlcy5zdGF0dXNDb2RlID0gMzA0XG4gIHJlcy5lbmQoKVxufVxuXG4vKipcbiAqIFJhaXNlIGVycm9yIHRoYXQgaGVhZGVycyBhbHJlYWR5IHNlbnQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU2VuZFN0cmVhbS5wcm90b3R5cGUuaGVhZGVyc0FscmVhZHlTZW50ID0gZnVuY3Rpb24gaGVhZGVyc0FscmVhZHlTZW50ICgpIHtcbiAgdmFyIGVyciA9IG5ldyBFcnJvcignQ2FuXFwndCBzZXQgaGVhZGVycyBhZnRlciB0aGV5IGFyZSBzZW50LicpXG4gIGRlYnVnKCdoZWFkZXJzIGFscmVhZHkgc2VudCcpXG4gIHRoaXMuZXJyb3IoNTAwLCBlcnIpXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIHJlcXVlc3QgaXMgY2FjaGVhYmxlLCBha2FcbiAqIHJlc3BvbmRlZCB3aXRoIDJ4eCBvciAzMDQgKHNlZSBSRkMgMjYxNiBzZWN0aW9uIDE0LjJ7NSw2fSkuXG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNlbmRTdHJlYW0ucHJvdG90eXBlLmlzQ2FjaGFibGUgPSBmdW5jdGlvbiBpc0NhY2hhYmxlICgpIHtcbiAgdmFyIHN0YXR1c0NvZGUgPSB0aGlzLnJlcy5zdGF0dXNDb2RlXG4gIHJldHVybiAoc3RhdHVzQ29kZSA+PSAyMDAgJiYgc3RhdHVzQ29kZSA8IDMwMCkgfHxcbiAgICBzdGF0dXNDb2RlID09PSAzMDRcbn1cblxuLyoqXG4gKiBIYW5kbGUgc3RhdCgpIGVycm9yLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yXG4gKiBAcHJpdmF0ZVxuICovXG5cblNlbmRTdHJlYW0ucHJvdG90eXBlLm9uU3RhdEVycm9yID0gZnVuY3Rpb24gb25TdGF0RXJyb3IgKGVycm9yKSB7XG4gIHN3aXRjaCAoZXJyb3IuY29kZSkge1xuICAgIGNhc2UgJ0VOQU1FVE9PTE9ORyc6XG4gICAgY2FzZSAnRU5PRU5UJzpcbiAgICBjYXNlICdFTk9URElSJzpcbiAgICAgIHRoaXMuZXJyb3IoNDA0LCBlcnJvcilcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMuZXJyb3IoNTAwLCBlcnJvcilcbiAgICAgIGJyZWFrXG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgY2FjaGUgaXMgZnJlc2guXG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNlbmRTdHJlYW0ucHJvdG90eXBlLmlzRnJlc2ggPSBmdW5jdGlvbiBpc0ZyZXNoICgpIHtcbiAgcmV0dXJuIGZyZXNoKHRoaXMucmVxLmhlYWRlcnMsIHtcbiAgICAnZXRhZyc6IHRoaXMucmVzLmdldEhlYWRlcignRVRhZycpLFxuICAgICdsYXN0LW1vZGlmaWVkJzogdGhpcy5yZXMuZ2V0SGVhZGVyKCdMYXN0LU1vZGlmaWVkJylcbiAgfSlcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgcmFuZ2UgaXMgZnJlc2guXG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNlbmRTdHJlYW0ucHJvdG90eXBlLmlzUmFuZ2VGcmVzaCA9IGZ1bmN0aW9uIGlzUmFuZ2VGcmVzaCAoKSB7XG4gIHZhciBpZlJhbmdlID0gdGhpcy5yZXEuaGVhZGVyc1snaWYtcmFuZ2UnXVxuXG4gIGlmICghaWZSYW5nZSkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvLyBpZi1yYW5nZSBhcyBldGFnXG4gIGlmIChpZlJhbmdlLmluZGV4T2YoJ1wiJykgIT09IC0xKSB7XG4gICAgdmFyIGV0YWcgPSB0aGlzLnJlcy5nZXRIZWFkZXIoJ0VUYWcnKVxuICAgIHJldHVybiBCb29sZWFuKGV0YWcgJiYgaWZSYW5nZS5pbmRleE9mKGV0YWcpICE9PSAtMSlcbiAgfVxuXG4gIC8vIGlmLXJhbmdlIGFzIG1vZGlmaWVkIGRhdGVcbiAgdmFyIGxhc3RNb2RpZmllZCA9IHRoaXMucmVzLmdldEhlYWRlcignTGFzdC1Nb2RpZmllZCcpXG4gIHJldHVybiBwYXJzZUh0dHBEYXRlKGxhc3RNb2RpZmllZCkgPD0gcGFyc2VIdHRwRGF0ZShpZlJhbmdlKVxufVxuXG4vKipcbiAqIFJlZGlyZWN0IHRvIHBhdGguXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAqIEBwcml2YXRlXG4gKi9cblxuU2VuZFN0cmVhbS5wcm90b3R5cGUucmVkaXJlY3QgPSBmdW5jdGlvbiByZWRpcmVjdCAocGF0aCkge1xuICB2YXIgcmVzID0gdGhpcy5yZXNcblxuICBpZiAoaGFzTGlzdGVuZXJzKHRoaXMsICdkaXJlY3RvcnknKSkge1xuICAgIHRoaXMuZW1pdCgnZGlyZWN0b3J5JywgcmVzLCBwYXRoKVxuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHRoaXMuaGFzVHJhaWxpbmdTbGFzaCgpKSB7XG4gICAgdGhpcy5lcnJvcig0MDMpXG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgbG9jID0gZW5jb2RlVXJsKGNvbGxhcHNlTGVhZGluZ1NsYXNoZXModGhpcy5wYXRoICsgJy8nKSlcbiAgdmFyIGRvYyA9IGNyZWF0ZUh0bWxEb2N1bWVudCgnUmVkaXJlY3RpbmcnLCAnUmVkaXJlY3RpbmcgdG8gPGEgaHJlZj1cIicgKyBlc2NhcGVIdG1sKGxvYykgKyAnXCI+JyArXG4gICAgZXNjYXBlSHRtbChsb2MpICsgJzwvYT4nKVxuXG4gIC8vIHJlZGlyZWN0XG4gIHJlcy5zdGF0dXNDb2RlID0gMzAxXG4gIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICd0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLTgnKVxuICByZXMuc2V0SGVhZGVyKCdDb250ZW50LUxlbmd0aCcsIEJ1ZmZlci5ieXRlTGVuZ3RoKGRvYykpXG4gIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtU2VjdXJpdHktUG9saWN5JywgXCJkZWZhdWx0LXNyYyAnbm9uZSdcIilcbiAgcmVzLnNldEhlYWRlcignWC1Db250ZW50LVR5cGUtT3B0aW9ucycsICdub3NuaWZmJylcbiAgcmVzLnNldEhlYWRlcignTG9jYXRpb24nLCBsb2MpXG4gIHJlcy5lbmQoZG9jKVxufVxuXG4vKipcbiAqIFBpcGUgdG8gYHJlcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmVhbX0gcmVzXG4gKiBAcmV0dXJuIHtTdHJlYW19IHJlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TZW5kU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gcGlwZSAocmVzKSB7XG4gIC8vIHJvb3QgcGF0aFxuICB2YXIgcm9vdCA9IHRoaXMuX3Jvb3RcblxuICAvLyByZWZlcmVuY2VzXG4gIHRoaXMucmVzID0gcmVzXG5cbiAgLy8gZGVjb2RlIHRoZSBwYXRoXG4gIHZhciBwYXRoID0gZGVjb2RlKHRoaXMucGF0aClcbiAgaWYgKHBhdGggPT09IC0xKSB7XG4gICAgdGhpcy5lcnJvcig0MDApXG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgLy8gbnVsbCBieXRlKHMpXG4gIGlmICh+cGF0aC5pbmRleE9mKCdcXDAnKSkge1xuICAgIHRoaXMuZXJyb3IoNDAwKVxuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIHZhciBwYXJ0c1xuICBpZiAocm9vdCAhPT0gbnVsbCkge1xuICAgIC8vIG5vcm1hbGl6ZVxuICAgIGlmIChwYXRoKSB7XG4gICAgICBwYXRoID0gbm9ybWFsaXplKCcuJyArIHNlcCArIHBhdGgpXG4gICAgfVxuXG4gICAgLy8gbWFsaWNpb3VzIHBhdGhcbiAgICBpZiAoVVBfUEFUSF9SRUdFWFAudGVzdChwYXRoKSkge1xuICAgICAgZGVidWcoJ21hbGljaW91cyBwYXRoIFwiJXNcIicsIHBhdGgpXG4gICAgICB0aGlzLmVycm9yKDQwMylcbiAgICAgIHJldHVybiByZXNcbiAgICB9XG5cbiAgICAvLyBleHBsb2RlIHBhdGggcGFydHNcbiAgICBwYXJ0cyA9IHBhdGguc3BsaXQoc2VwKVxuXG4gICAgLy8gam9pbiAvIG5vcm1hbGl6ZSBmcm9tIG9wdGlvbmFsIHJvb3QgZGlyXG4gICAgcGF0aCA9IG5vcm1hbGl6ZShqb2luKHJvb3QsIHBhdGgpKVxuICB9IGVsc2Uge1xuICAgIC8vIFwiLi5cIiBpcyBtYWxpY2lvdXMgd2l0aG91dCBcInJvb3RcIlxuICAgIGlmIChVUF9QQVRIX1JFR0VYUC50ZXN0KHBhdGgpKSB7XG4gICAgICBkZWJ1ZygnbWFsaWNpb3VzIHBhdGggXCIlc1wiJywgcGF0aClcbiAgICAgIHRoaXMuZXJyb3IoNDAzKVxuICAgICAgcmV0dXJuIHJlc1xuICAgIH1cblxuICAgIC8vIGV4cGxvZGUgcGF0aCBwYXJ0c1xuICAgIHBhcnRzID0gbm9ybWFsaXplKHBhdGgpLnNwbGl0KHNlcClcblxuICAgIC8vIHJlc29sdmUgdGhlIHBhdGhcbiAgICBwYXRoID0gcmVzb2x2ZShwYXRoKVxuICB9XG5cbiAgLy8gZG90ZmlsZSBoYW5kbGluZ1xuICBpZiAoY29udGFpbnNEb3RGaWxlKHBhcnRzKSkge1xuICAgIHZhciBhY2Nlc3MgPSB0aGlzLl9kb3RmaWxlc1xuXG4gICAgLy8gbGVnYWN5IHN1cHBvcnRcbiAgICBpZiAoYWNjZXNzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGFjY2VzcyA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdWzBdID09PSAnLidcbiAgICAgICAgPyAodGhpcy5faGlkZGVuID8gJ2FsbG93JyA6ICdpZ25vcmUnKVxuICAgICAgICA6ICdhbGxvdydcbiAgICB9XG5cbiAgICBkZWJ1ZygnJXMgZG90ZmlsZSBcIiVzXCInLCBhY2Nlc3MsIHBhdGgpXG4gICAgc3dpdGNoIChhY2Nlc3MpIHtcbiAgICAgIGNhc2UgJ2FsbG93JzpcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2RlbnknOlxuICAgICAgICB0aGlzLmVycm9yKDQwMylcbiAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgY2FzZSAnaWdub3JlJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMuZXJyb3IoNDA0KVxuICAgICAgICByZXR1cm4gcmVzXG4gICAgfVxuICB9XG5cbiAgLy8gaW5kZXggZmlsZSBzdXBwb3J0XG4gIGlmICh0aGlzLl9pbmRleC5sZW5ndGggJiYgdGhpcy5oYXNUcmFpbGluZ1NsYXNoKCkpIHtcbiAgICB0aGlzLnNlbmRJbmRleChwYXRoKVxuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIHRoaXMuc2VuZEZpbGUocGF0aClcbiAgcmV0dXJuIHJlc1xufVxuXG4vKipcbiAqIFRyYW5zZmVyIGBwYXRoYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TZW5kU3RyZWFtLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gc2VuZCAocGF0aCwgc3RhdCkge1xuICB2YXIgbGVuID0gc3RhdC5zaXplXG4gIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zXG4gIHZhciBvcHRzID0ge31cbiAgdmFyIHJlcyA9IHRoaXMucmVzXG4gIHZhciByZXEgPSB0aGlzLnJlcVxuICB2YXIgcmFuZ2VzID0gcmVxLmhlYWRlcnMucmFuZ2VcbiAgdmFyIG9mZnNldCA9IG9wdGlvbnMuc3RhcnQgfHwgMFxuXG4gIGlmIChoZWFkZXJzU2VudChyZXMpKSB7XG4gICAgLy8gaW1wb3NzaWJsZSB0byBzZW5kIG5vd1xuICAgIHRoaXMuaGVhZGVyc0FscmVhZHlTZW50KClcbiAgICByZXR1cm5cbiAgfVxuXG4gIGRlYnVnKCdwaXBlIFwiJXNcIicsIHBhdGgpXG5cbiAgLy8gc2V0IGhlYWRlciBmaWVsZHNcbiAgdGhpcy5zZXRIZWFkZXIocGF0aCwgc3RhdClcblxuICAvLyBzZXQgY29udGVudC10eXBlXG4gIHRoaXMudHlwZShwYXRoKVxuXG4gIC8vIGNvbmRpdGlvbmFsIEdFVCBzdXBwb3J0XG4gIGlmICh0aGlzLmlzQ29uZGl0aW9uYWxHRVQoKSkge1xuICAgIGlmICh0aGlzLmlzUHJlY29uZGl0aW9uRmFpbHVyZSgpKSB7XG4gICAgICB0aGlzLmVycm9yKDQxMilcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0aGlzLmlzQ2FjaGFibGUoKSAmJiB0aGlzLmlzRnJlc2goKSkge1xuICAgICAgdGhpcy5ub3RNb2RpZmllZCgpXG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cblxuICAvLyBhZGp1c3QgbGVuIHRvIHN0YXJ0L2VuZCBvcHRpb25zXG4gIGxlbiA9IE1hdGgubWF4KDAsIGxlbiAtIG9mZnNldClcbiAgaWYgKG9wdGlvbnMuZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgYnl0ZXMgPSBvcHRpb25zLmVuZCAtIG9mZnNldCArIDFcbiAgICBpZiAobGVuID4gYnl0ZXMpIGxlbiA9IGJ5dGVzXG4gIH1cblxuICAvLyBSYW5nZSBzdXBwb3J0XG4gIGlmICh0aGlzLl9hY2NlcHRSYW5nZXMgJiYgQllURVNfUkFOR0VfUkVHRVhQLnRlc3QocmFuZ2VzKSkge1xuICAgIC8vIHBhcnNlXG4gICAgcmFuZ2VzID0gcGFyc2VSYW5nZShsZW4sIHJhbmdlcywge1xuICAgICAgY29tYmluZTogdHJ1ZVxuICAgIH0pXG5cbiAgICAvLyBJZi1SYW5nZSBzdXBwb3J0XG4gICAgaWYgKCF0aGlzLmlzUmFuZ2VGcmVzaCgpKSB7XG4gICAgICBkZWJ1ZygncmFuZ2Ugc3RhbGUnKVxuICAgICAgcmFuZ2VzID0gLTJcbiAgICB9XG5cbiAgICAvLyB1bnNhdGlzZmlhYmxlXG4gICAgaWYgKHJhbmdlcyA9PT0gLTEpIHtcbiAgICAgIGRlYnVnKCdyYW5nZSB1bnNhdGlzZmlhYmxlJylcblxuICAgICAgLy8gQ29udGVudC1SYW5nZVxuICAgICAgcmVzLnNldEhlYWRlcignQ29udGVudC1SYW5nZScsIGNvbnRlbnRSYW5nZSgnYnl0ZXMnLCBsZW4pKVxuXG4gICAgICAvLyA0MTYgUmVxdWVzdGVkIFJhbmdlIE5vdCBTYXRpc2ZpYWJsZVxuICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoNDE2LCB7XG4gICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtUmFuZ2UnOiByZXMuZ2V0SGVhZGVyKCdDb250ZW50LVJhbmdlJykgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyB2YWxpZCAoc3ludGFjdGljYWxseSBpbnZhbGlkL211bHRpcGxlIHJhbmdlcyBhcmUgdHJlYXRlZCBhcyBhIHJlZ3VsYXIgcmVzcG9uc2UpXG4gICAgaWYgKHJhbmdlcyAhPT0gLTIgJiYgcmFuZ2VzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgZGVidWcoJ3JhbmdlICVqJywgcmFuZ2VzKVxuXG4gICAgICAvLyBDb250ZW50LVJhbmdlXG4gICAgICByZXMuc3RhdHVzQ29kZSA9IDIwNlxuICAgICAgcmVzLnNldEhlYWRlcignQ29udGVudC1SYW5nZScsIGNvbnRlbnRSYW5nZSgnYnl0ZXMnLCBsZW4sIHJhbmdlc1swXSkpXG5cbiAgICAgIC8vIGFkanVzdCBmb3IgcmVxdWVzdGVkIHJhbmdlXG4gICAgICBvZmZzZXQgKz0gcmFuZ2VzWzBdLnN0YXJ0XG4gICAgICBsZW4gPSByYW5nZXNbMF0uZW5kIC0gcmFuZ2VzWzBdLnN0YXJ0ICsgMVxuICAgIH1cbiAgfVxuXG4gIC8vIGNsb25lIG9wdGlvbnNcbiAgZm9yICh2YXIgcHJvcCBpbiBvcHRpb25zKSB7XG4gICAgb3B0c1twcm9wXSA9IG9wdGlvbnNbcHJvcF1cbiAgfVxuXG4gIC8vIHNldCByZWFkIG9wdGlvbnNcbiAgb3B0cy5zdGFydCA9IG9mZnNldFxuICBvcHRzLmVuZCA9IE1hdGgubWF4KG9mZnNldCwgb2Zmc2V0ICsgbGVuIC0gMSlcblxuICAvLyBjb250ZW50LWxlbmd0aFxuICByZXMuc2V0SGVhZGVyKCdDb250ZW50LUxlbmd0aCcsIGxlbilcblxuICAvLyBIRUFEIHN1cHBvcnRcbiAgaWYgKHJlcS5tZXRob2QgPT09ICdIRUFEJykge1xuICAgIHJlcy5lbmQoKVxuICAgIHJldHVyblxuICB9XG5cbiAgdGhpcy5zdHJlYW0ocGF0aCwgb3B0cylcbn1cblxuLyoqXG4gKiBUcmFuc2ZlciBmaWxlIGZvciBgcGF0aGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5TZW5kU3RyZWFtLnByb3RvdHlwZS5zZW5kRmlsZSA9IGZ1bmN0aW9uIHNlbmRGaWxlIChwYXRoKSB7XG4gIHZhciBpID0gMFxuICB2YXIgc2VsZiA9IHRoaXNcblxuICBkZWJ1Zygnc3RhdCBcIiVzXCInLCBwYXRoKVxuICBmcy5zdGF0KHBhdGgsIGZ1bmN0aW9uIG9uc3RhdCAoZXJyLCBzdGF0KSB7XG4gICAgaWYgKGVyciAmJiBlcnIuY29kZSA9PT0gJ0VOT0VOVCcgJiYgIWV4dG5hbWUocGF0aCkgJiYgcGF0aFtwYXRoLmxlbmd0aCAtIDFdICE9PSBzZXApIHtcbiAgICAgIC8vIG5vdCBmb3VuZCwgY2hlY2sgZXh0ZW5zaW9uc1xuICAgICAgcmV0dXJuIG5leHQoZXJyKVxuICAgIH1cbiAgICBpZiAoZXJyKSByZXR1cm4gc2VsZi5vblN0YXRFcnJvcihlcnIpXG4gICAgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSkgcmV0dXJuIHNlbGYucmVkaXJlY3QocGF0aClcbiAgICBzZWxmLmVtaXQoJ2ZpbGUnLCBwYXRoLCBzdGF0KVxuICAgIHNlbGYuc2VuZChwYXRoLCBzdGF0KVxuICB9KVxuXG4gIGZ1bmN0aW9uIG5leHQgKGVycikge1xuICAgIGlmIChzZWxmLl9leHRlbnNpb25zLmxlbmd0aCA8PSBpKSB7XG4gICAgICByZXR1cm4gZXJyXG4gICAgICAgID8gc2VsZi5vblN0YXRFcnJvcihlcnIpXG4gICAgICAgIDogc2VsZi5lcnJvcig0MDQpXG4gICAgfVxuXG4gICAgdmFyIHAgPSBwYXRoICsgJy4nICsgc2VsZi5fZXh0ZW5zaW9uc1tpKytdXG5cbiAgICBkZWJ1Zygnc3RhdCBcIiVzXCInLCBwKVxuICAgIGZzLnN0YXQocCwgZnVuY3Rpb24gKGVyciwgc3RhdCkge1xuICAgICAgaWYgKGVycikgcmV0dXJuIG5leHQoZXJyKVxuICAgICAgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSkgcmV0dXJuIG5leHQoKVxuICAgICAgc2VsZi5lbWl0KCdmaWxlJywgcCwgc3RhdClcbiAgICAgIHNlbGYuc2VuZChwLCBzdGF0KVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiBUcmFuc2ZlciBpbmRleCBmb3IgYHBhdGhgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuU2VuZFN0cmVhbS5wcm90b3R5cGUuc2VuZEluZGV4ID0gZnVuY3Rpb24gc2VuZEluZGV4IChwYXRoKSB7XG4gIHZhciBpID0gLTFcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgZnVuY3Rpb24gbmV4dCAoZXJyKSB7XG4gICAgaWYgKCsraSA+PSBzZWxmLl9pbmRleC5sZW5ndGgpIHtcbiAgICAgIGlmIChlcnIpIHJldHVybiBzZWxmLm9uU3RhdEVycm9yKGVycilcbiAgICAgIHJldHVybiBzZWxmLmVycm9yKDQwNClcbiAgICB9XG5cbiAgICB2YXIgcCA9IGpvaW4ocGF0aCwgc2VsZi5faW5kZXhbaV0pXG5cbiAgICBkZWJ1Zygnc3RhdCBcIiVzXCInLCBwKVxuICAgIGZzLnN0YXQocCwgZnVuY3Rpb24gKGVyciwgc3RhdCkge1xuICAgICAgaWYgKGVycikgcmV0dXJuIG5leHQoZXJyKVxuICAgICAgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSkgcmV0dXJuIG5leHQoKVxuICAgICAgc2VsZi5lbWl0KCdmaWxlJywgcCwgc3RhdClcbiAgICAgIHNlbGYuc2VuZChwLCBzdGF0KVxuICAgIH0pXG4gIH1cblxuICBuZXh0KClcbn1cblxuLyoqXG4gKiBTdHJlYW0gYHBhdGhgIHRvIHRoZSByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNlbmRTdHJlYW0ucHJvdG90eXBlLnN0cmVhbSA9IGZ1bmN0aW9uIHN0cmVhbSAocGF0aCwgb3B0aW9ucykge1xuICAvLyBUT0RPOiB0aGlzIGlzIGFsbCBsYW1lLCByZWZhY3RvciBtZWVlZVxuICB2YXIgZmluaXNoZWQgPSBmYWxzZVxuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIHJlcyA9IHRoaXMucmVzXG5cbiAgLy8gcGlwZVxuICB2YXIgc3RyZWFtID0gZnMuY3JlYXRlUmVhZFN0cmVhbShwYXRoLCBvcHRpb25zKVxuICB0aGlzLmVtaXQoJ3N0cmVhbScsIHN0cmVhbSlcbiAgc3RyZWFtLnBpcGUocmVzKVxuXG4gIC8vIHJlc3BvbnNlIGZpbmlzaGVkLCBkb25lIHdpdGggdGhlIGZkXG4gIG9uRmluaXNoZWQocmVzLCBmdW5jdGlvbiBvbmZpbmlzaGVkICgpIHtcbiAgICBmaW5pc2hlZCA9IHRydWVcbiAgICBkZXN0cm95KHN0cmVhbSlcbiAgfSlcblxuICAvLyBlcnJvciBoYW5kbGluZyBjb2RlLXNtZWxsXG4gIHN0cmVhbS5vbignZXJyb3InLCBmdW5jdGlvbiBvbmVycm9yIChlcnIpIHtcbiAgICAvLyByZXF1ZXN0IGFscmVhZHkgZmluaXNoZWRcbiAgICBpZiAoZmluaXNoZWQpIHJldHVyblxuXG4gICAgLy8gY2xlYW4gdXAgc3RyZWFtXG4gICAgZmluaXNoZWQgPSB0cnVlXG4gICAgZGVzdHJveShzdHJlYW0pXG5cbiAgICAvLyBlcnJvclxuICAgIHNlbGYub25TdGF0RXJyb3IoZXJyKVxuICB9KVxuXG4gIC8vIGVuZFxuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uIG9uZW5kICgpIHtcbiAgICBzZWxmLmVtaXQoJ2VuZCcpXG4gIH0pXG59XG5cbi8qKlxuICogU2V0IGNvbnRlbnQtdHlwZSBiYXNlZCBvbiBgcGF0aGBcbiAqIGlmIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5TZW5kU3RyZWFtLnByb3RvdHlwZS50eXBlID0gZnVuY3Rpb24gdHlwZSAocGF0aCkge1xuICB2YXIgcmVzID0gdGhpcy5yZXNcblxuICBpZiAocmVzLmdldEhlYWRlcignQ29udGVudC1UeXBlJykpIHJldHVyblxuXG4gIHZhciB0eXBlID0gbWltZS5sb29rdXAocGF0aClcblxuICBpZiAoIXR5cGUpIHtcbiAgICBkZWJ1Zygnbm8gY29udGVudC10eXBlJylcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjaGFyc2V0ID0gbWltZS5jaGFyc2V0cy5sb29rdXAodHlwZSlcblxuICBkZWJ1ZygnY29udGVudC10eXBlICVzJywgdHlwZSlcbiAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgdHlwZSArIChjaGFyc2V0ID8gJzsgY2hhcnNldD0nICsgY2hhcnNldCA6ICcnKSlcbn1cblxuLyoqXG4gKiBTZXQgcmVzcG9uc2UgaGVhZGVyIGZpZWxkcywgbW9zdFxuICogZmllbGRzIG1heSBiZSBwcmUtZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtPYmplY3R9IHN0YXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNlbmRTdHJlYW0ucHJvdG90eXBlLnNldEhlYWRlciA9IGZ1bmN0aW9uIHNldEhlYWRlciAocGF0aCwgc3RhdCkge1xuICB2YXIgcmVzID0gdGhpcy5yZXNcblxuICB0aGlzLmVtaXQoJ2hlYWRlcnMnLCByZXMsIHBhdGgsIHN0YXQpXG5cbiAgaWYgKHRoaXMuX2FjY2VwdFJhbmdlcyAmJiAhcmVzLmdldEhlYWRlcignQWNjZXB0LVJhbmdlcycpKSB7XG4gICAgZGVidWcoJ2FjY2VwdCByYW5nZXMnKVxuICAgIHJlcy5zZXRIZWFkZXIoJ0FjY2VwdC1SYW5nZXMnLCAnYnl0ZXMnKVxuICB9XG5cbiAgaWYgKHRoaXMuX2NhY2hlQ29udHJvbCAmJiAhcmVzLmdldEhlYWRlcignQ2FjaGUtQ29udHJvbCcpKSB7XG4gICAgdmFyIGNhY2hlQ29udHJvbCA9ICdwdWJsaWMsIG1heC1hZ2U9JyArIE1hdGguZmxvb3IodGhpcy5fbWF4YWdlIC8gMTAwMClcblxuICAgIGlmICh0aGlzLl9pbW11dGFibGUpIHtcbiAgICAgIGNhY2hlQ29udHJvbCArPSAnLCBpbW11dGFibGUnXG4gICAgfVxuXG4gICAgZGVidWcoJ2NhY2hlLWNvbnRyb2wgJXMnLCBjYWNoZUNvbnRyb2wpXG4gICAgcmVzLnNldEhlYWRlcignQ2FjaGUtQ29udHJvbCcsIGNhY2hlQ29udHJvbClcbiAgfVxuXG4gIGlmICh0aGlzLl9sYXN0TW9kaWZpZWQgJiYgIXJlcy5nZXRIZWFkZXIoJ0xhc3QtTW9kaWZpZWQnKSkge1xuICAgIHZhciBtb2RpZmllZCA9IHN0YXQubXRpbWUudG9VVENTdHJpbmcoKVxuICAgIGRlYnVnKCdtb2RpZmllZCAlcycsIG1vZGlmaWVkKVxuICAgIHJlcy5zZXRIZWFkZXIoJ0xhc3QtTW9kaWZpZWQnLCBtb2RpZmllZClcbiAgfVxuXG4gIGlmICh0aGlzLl9ldGFnICYmICFyZXMuZ2V0SGVhZGVyKCdFVGFnJykpIHtcbiAgICB2YXIgdmFsID0gZXRhZyhzdGF0KVxuICAgIGRlYnVnKCdldGFnICVzJywgdmFsKVxuICAgIHJlcy5zZXRIZWFkZXIoJ0VUYWcnLCB2YWwpXG4gIH1cbn1cblxuLyoqXG4gKiBDbGVhciBhbGwgaGVhZGVycyBmcm9tIGEgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHJlc1xuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjbGVhckhlYWRlcnMgKHJlcykge1xuICB2YXIgaGVhZGVycyA9IGdldEhlYWRlck5hbWVzKHJlcylcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGhlYWRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICByZXMucmVtb3ZlSGVhZGVyKGhlYWRlcnNbaV0pXG4gIH1cbn1cblxuLyoqXG4gKiBDb2xsYXBzZSBhbGwgbGVhZGluZyBzbGFzaGVzIGludG8gYSBzaW5nbGUgc2xhc2hcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjb2xsYXBzZUxlYWRpbmdTbGFzaGVzIChzdHIpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3RyW2ldICE9PSAnLycpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGkgPiAxXG4gICAgPyAnLycgKyBzdHIuc3Vic3RyKGkpXG4gICAgOiBzdHJcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgcGF0aCBwYXJ0cyBjb250YWluIGEgZG90ZmlsZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb250YWluc0RvdEZpbGUgKHBhcnRzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGFydCA9IHBhcnRzW2ldXG4gICAgaWYgKHBhcnQubGVuZ3RoID4gMSAmJiBwYXJ0WzBdID09PSAnLicpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgQ29udGVudC1SYW5nZSBoZWFkZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG4gKiBAcGFyYW0ge2FycmF5fSBbcmFuZ2VdXG4gKi9cblxuZnVuY3Rpb24gY29udGVudFJhbmdlICh0eXBlLCBzaXplLCByYW5nZSkge1xuICByZXR1cm4gdHlwZSArICcgJyArIChyYW5nZSA/IHJhbmdlLnN0YXJ0ICsgJy0nICsgcmFuZ2UuZW5kIDogJyonKSArICcvJyArIHNpemVcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBtaW5pbWFsIEhUTUwgZG9jdW1lbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlXG4gKiBAcGFyYW0ge3N0cmluZ30gYm9keVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVIdG1sRG9jdW1lbnQgKHRpdGxlLCBib2R5KSB7XG4gIHJldHVybiAnPCFET0NUWVBFIGh0bWw+XFxuJyArXG4gICAgJzxodG1sIGxhbmc9XCJlblwiPlxcbicgK1xuICAgICc8aGVhZD5cXG4nICtcbiAgICAnPG1ldGEgY2hhcnNldD1cInV0Zi04XCI+XFxuJyArXG4gICAgJzx0aXRsZT4nICsgdGl0bGUgKyAnPC90aXRsZT5cXG4nICtcbiAgICAnPC9oZWFkPlxcbicgK1xuICAgICc8Ym9keT5cXG4nICtcbiAgICAnPHByZT4nICsgYm9keSArICc8L3ByZT5cXG4nICtcbiAgICAnPC9ib2R5PlxcbicgK1xuICAgICc8L2h0bWw+XFxuJ1xufVxuXG4vKipcbiAqIGRlY29kZVVSSUNvbXBvbmVudC5cbiAqXG4gKiBBbGxvd3MgVjggdG8gb25seSBkZW9wdGltaXplIHRoaXMgZm4gaW5zdGVhZCBvZiBhbGxcbiAqIG9mIHNlbmQoKS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZGVjb2RlIChwYXRoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChwYXRoKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgaGVhZGVyIG5hbWVzIG9uIGEgcmVzcG5zZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzXG4gKiBAcmV0dXJucyB7YXJyYXlbc3RyaW5nXX1cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ2V0SGVhZGVyTmFtZXMgKHJlcykge1xuICByZXR1cm4gdHlwZW9mIHJlcy5nZXRIZWFkZXJOYW1lcyAhPT0gJ2Z1bmN0aW9uJ1xuICAgID8gT2JqZWN0LmtleXMocmVzLl9oZWFkZXJzIHx8IHt9KVxuICAgIDogcmVzLmdldEhlYWRlck5hbWVzKClcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgZW1pdHRlciBoYXMgbGlzdGVuZXJzIG9mIGEgZ2l2ZW4gdHlwZS5cbiAqXG4gKiBUaGUgd2F5IHRvIGRvIHRoaXMgY2hlY2sgaXMgZG9uZSB0aHJlZSBkaWZmZXJlbnQgd2F5cyBpbiBOb2RlLmpzID49IDAuOFxuICogc28gdGhpcyBjb25zb2xpZGF0ZXMgdGhlbSBpbnRvIGEgbWluaW1hbCBzZXQgdXNpbmcgaW5zdGFuY2UgbWV0aG9kcy5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gZW1pdHRlclxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBoYXNMaXN0ZW5lcnMgKGVtaXR0ZXIsIHR5cGUpIHtcbiAgdmFyIGNvdW50ID0gdHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCAhPT0gJ2Z1bmN0aW9uJ1xuICAgID8gZW1pdHRlci5saXN0ZW5lcnModHlwZSkubGVuZ3RoXG4gICAgOiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSlcblxuICByZXR1cm4gY291bnQgPiAwXG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHRoZSByZXNwb25zZSBoZWFkZXJzIGhhdmUgYmVlbiBzZW50LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBoZWFkZXJzU2VudCAocmVzKSB7XG4gIHJldHVybiB0eXBlb2YgcmVzLmhlYWRlcnNTZW50ICE9PSAnYm9vbGVhbidcbiAgICA/IEJvb2xlYW4ocmVzLl9oZWFkZXIpXG4gICAgOiByZXMuaGVhZGVyc1NlbnRcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGluZGV4IG9wdGlvbiBpbnRvIGFuIGFycmF5LlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbnxzdHJpbmd8YXJyYXl9IHZhbFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplTGlzdCAodmFsLCBuYW1lKSB7XG4gIHZhciBsaXN0ID0gW10uY29uY2F0KHZhbCB8fCBbXSlcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIGxpc3RbaV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKG5hbWUgKyAnIG11c3QgYmUgYXJyYXkgb2Ygc3RyaW5ncyBvciBmYWxzZScpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxpc3Rcbn1cblxuLyoqXG4gKiBQYXJzZSBhbiBIVFRQIERhdGUgaW50byBhIG51bWJlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZGF0ZVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZUh0dHBEYXRlIChkYXRlKSB7XG4gIHZhciB0aW1lc3RhbXAgPSBkYXRlICYmIERhdGUucGFyc2UoZGF0ZSlcblxuICByZXR1cm4gdHlwZW9mIHRpbWVzdGFtcCA9PT0gJ251bWJlcidcbiAgICA/IHRpbWVzdGFtcFxuICAgIDogTmFOXG59XG5cbi8qKlxuICogUGFyc2UgYSBIVFRQIHRva2VuIGxpc3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZVRva2VuTGlzdCAoc3RyKSB7XG4gIHZhciBlbmQgPSAwXG4gIHZhciBsaXN0ID0gW11cbiAgdmFyIHN0YXJ0ID0gMFxuXG4gIC8vIGdhdGhlciB0b2tlbnNcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHN0ci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHN3aXRjaCAoc3RyLmNoYXJDb2RlQXQoaSkpIHtcbiAgICAgIGNhc2UgMHgyMDogLyogICAqL1xuICAgICAgICBpZiAoc3RhcnQgPT09IGVuZCkge1xuICAgICAgICAgIHN0YXJ0ID0gZW5kID0gaSArIDFcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAweDJjOiAvKiAsICovXG4gICAgICAgIGxpc3QucHVzaChzdHIuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpKVxuICAgICAgICBzdGFydCA9IGVuZCA9IGkgKyAxXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbmQgPSBpICsgMVxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpbmFsIHRva2VuXG4gIGxpc3QucHVzaChzdHIuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpKVxuXG4gIHJldHVybiBsaXN0XG59XG5cbi8qKlxuICogU2V0IGFuIG9iamVjdCBvZiBoZWFkZXJzIG9uIGEgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHJlc1xuICogQHBhcmFtIHtvYmplY3R9IGhlYWRlcnNcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2V0SGVhZGVycyAocmVzLCBoZWFkZXJzKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoaGVhZGVycylcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXVxuICAgIHJlcy5zZXRIZWFkZXIoa2V5LCBoZWFkZXJzW2tleV0pXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2hCYXNlID0gcmVxdWlyZSgnaGFzaC1iYXNlJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgQVJSQVkxNiA9IG5ldyBBcnJheSgxNilcblxuZnVuY3Rpb24gTUQ1ICgpIHtcbiAgSGFzaEJhc2UuY2FsbCh0aGlzLCA2NClcblxuICAvLyBzdGF0ZVxuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxufVxuXG5pbmhlcml0cyhNRDUsIEhhc2hCYXNlKVxuXG5NRDUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBNID0gQVJSQVkxNlxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIE1baV0gPSB0aGlzLl9ibG9jay5yZWFkSW50MzJMRShpICogNClcblxuICB2YXIgYSA9IHRoaXMuX2FcbiAgdmFyIGIgPSB0aGlzLl9iXG4gIHZhciBjID0gdGhpcy5fY1xuICB2YXIgZCA9IHRoaXMuX2RcblxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bMF0sIDB4ZDc2YWE0NzgsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVsxXSwgMHhlOGM3Yjc1NiwgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVsyXSwgMHgyNDIwNzBkYiwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVszXSwgMHhjMWJkY2VlZSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVs0XSwgMHhmNTdjMGZhZiwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzVdLCAweDQ3ODdjNjJhLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzZdLCAweGE4MzA0NjEzLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzddLCAweGZkNDY5NTAxLCAyMilcbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzhdLCAweDY5ODA5OGQ4LCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bOV0sIDB4OGI0NGY3YWYsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMTBdLCAweGZmZmY1YmIxLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzExXSwgMHg4OTVjZDdiZSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVsxMl0sIDB4NmI5MDExMjIsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVsxM10sIDB4ZmQ5ODcxOTMsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMTRdLCAweGE2Nzk0MzhlLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzE1XSwgMHg0OWI0MDgyMSwgMjIpXG5cbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzFdLCAweGY2MWUyNTYyLCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bNl0sIDB4YzA0MGIzNDAsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVsxMV0sIDB4MjY1ZTVhNTEsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bMF0sIDB4ZTliNmM3YWEsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bNV0sIDB4ZDYyZjEwNWQsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsxMF0sIDB4MDI0NDE0NTMsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVsxNV0sIDB4ZDhhMWU2ODEsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bNF0sIDB4ZTdkM2ZiYzgsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bOV0sIDB4MjFlMWNkZTYsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsxNF0sIDB4YzMzNzA3ZDYsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVszXSwgMHhmNGQ1MGQ4NywgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVs4XSwgMHg0NTVhMTRlZCwgMjApXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVsxM10sIDB4YTllM2U5MDUsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsyXSwgMHhmY2VmYTNmOCwgOSlcbiAgYyA9IGZuRyhjLCBkLCBhLCBiLCBNWzddLCAweDY3NmYwMmQ5LCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzEyXSwgMHg4ZDJhNGM4YSwgMjApXG5cbiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzVdLCAweGZmZmEzOTQyLCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bOF0sIDB4ODc3MWY2ODEsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bMTFdLCAweDZkOWQ2MTIyLCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzE0XSwgMHhmZGU1MzgwYywgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVsxXSwgMHhhNGJlZWE0NCwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzRdLCAweDRiZGVjZmE5LCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzddLCAweGY2YmI0YjYwLCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzEwXSwgMHhiZWJmYmM3MCwgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVsxM10sIDB4Mjg5YjdlYzYsIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVswXSwgMHhlYWExMjdmYSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVszXSwgMHhkNGVmMzA4NSwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVs2XSwgMHgwNDg4MWQwNSwgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVs5XSwgMHhkOWQ0ZDAzOSwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzEyXSwgMHhlNmRiOTllNSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVsxNV0sIDB4MWZhMjdjZjgsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bMl0sIDB4YzRhYzU2NjUsIDIzKVxuXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVswXSwgMHhmNDI5MjI0NCwgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzddLCAweDQzMmFmZjk3LCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzE0XSwgMHhhYjk0MjNhNywgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVs1XSwgMHhmYzkzYTAzOSwgMjEpXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVsxMl0sIDB4NjU1YjU5YzMsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVszXSwgMHg4ZjBjY2M5MiwgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsxMF0sIDB4ZmZlZmY0N2QsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bMV0sIDB4ODU4NDVkZDEsIDIxKVxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bOF0sIDB4NmZhODdlNGYsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVsxNV0sIDB4ZmUyY2U2ZTAsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bNl0sIDB4YTMwMTQzMTQsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bMTNdLCAweDRlMDgxMWExLCAyMSlcbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzRdLCAweGY3NTM3ZTgyLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bMTFdLCAweGJkM2FmMjM1LCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzJdLCAweDJhZDdkMmJiLCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzldLCAweGViODZkMzkxLCAyMSlcblxuICB0aGlzLl9hID0gKHRoaXMuX2EgKyBhKSB8IDBcbiAgdGhpcy5fYiA9ICh0aGlzLl9iICsgYikgfCAwXG4gIHRoaXMuX2MgPSAodGhpcy5fYyArIGMpIHwgMFxuICB0aGlzLl9kID0gKHRoaXMuX2QgKyBkKSB8IDBcbn1cblxuTUQ1LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBjcmVhdGUgcGFkZGluZyBhbmQgaGFuZGxlIGJsb2Nrc1xuICB0aGlzLl9ibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IDB4ODBcbiAgaWYgKHRoaXMuX2Jsb2NrT2Zmc2V0ID4gNTYpIHtcbiAgICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA2NClcbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG5cbiAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzBdLCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMV0sIDYwKVxuICB0aGlzLl91cGRhdGUoKVxuXG4gIC8vIHByb2R1Y2UgcmVzdWx0XG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYSwgMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9iLCA0KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2MsIDgpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZCwgMTIpXG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gcm90bCAoeCwgbikge1xuICByZXR1cm4gKHggPDwgbikgfCAoeCA+Pj4gKDMyIC0gbikpXG59XG5cbmZ1bmN0aW9uIGZuRiAoYSwgYiwgYywgZCwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBjKSB8ICgofmIpICYgZCkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5HIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiAmIGQpIHwgKGMgJiAofmQpKSkgKyBtICsgaykgfCAwLCBzKSArIGIpIHwgMFxufVxuXG5mdW5jdGlvbiBmbkggKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKGIgXiBjIF4gZCkgKyBtICsgaykgfCAwLCBzKSArIGIpIHwgMFxufVxuXG5mdW5jdGlvbiBmbkkgKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChjIF4gKGIgfCAofmQpKSkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNRDVcbiIsIid1c2Ugc3RyaWN0J1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlclxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2hCYXNlID0gcmVxdWlyZSgnaGFzaC1iYXNlJylcblxudmFyIEFSUkFZMTYgPSBuZXcgQXJyYXkoMTYpXG5cbnZhciB6bCA9IFtcbiAgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcbiAgNywgNCwgMTMsIDEsIDEwLCA2LCAxNSwgMywgMTIsIDAsIDksIDUsIDIsIDE0LCAxMSwgOCxcbiAgMywgMTAsIDE0LCA0LCA5LCAxNSwgOCwgMSwgMiwgNywgMCwgNiwgMTMsIDExLCA1LCAxMixcbiAgMSwgOSwgMTEsIDEwLCAwLCA4LCAxMiwgNCwgMTMsIDMsIDcsIDE1LCAxNCwgNSwgNiwgMixcbiAgNCwgMCwgNSwgOSwgNywgMTIsIDIsIDEwLCAxNCwgMSwgMywgOCwgMTEsIDYsIDE1LCAxM1xuXVxuXG52YXIgenIgPSBbXG4gIDUsIDE0LCA3LCAwLCA5LCAyLCAxMSwgNCwgMTMsIDYsIDE1LCA4LCAxLCAxMCwgMywgMTIsXG4gIDYsIDExLCAzLCA3LCAwLCAxMywgNSwgMTAsIDE0LCAxNSwgOCwgMTIsIDQsIDksIDEsIDIsXG4gIDE1LCA1LCAxLCAzLCA3LCAxNCwgNiwgOSwgMTEsIDgsIDEyLCAyLCAxMCwgMCwgNCwgMTMsXG4gIDgsIDYsIDQsIDEsIDMsIDExLCAxNSwgMCwgNSwgMTIsIDIsIDEzLCA5LCA3LCAxMCwgMTQsXG4gIDEyLCAxNSwgMTAsIDQsIDEsIDUsIDgsIDcsIDYsIDIsIDEzLCAxNCwgMCwgMywgOSwgMTFcbl1cblxudmFyIHNsID0gW1xuICAxMSwgMTQsIDE1LCAxMiwgNSwgOCwgNywgOSwgMTEsIDEzLCAxNCwgMTUsIDYsIDcsIDksIDgsXG4gIDcsIDYsIDgsIDEzLCAxMSwgOSwgNywgMTUsIDcsIDEyLCAxNSwgOSwgMTEsIDcsIDEzLCAxMixcbiAgMTEsIDEzLCA2LCA3LCAxNCwgOSwgMTMsIDE1LCAxNCwgOCwgMTMsIDYsIDUsIDEyLCA3LCA1LFxuICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCA5LCA4LCA5LCAxNCwgNSwgNiwgOCwgNiwgNSwgMTIsXG4gIDksIDE1LCA1LCAxMSwgNiwgOCwgMTMsIDEyLCA1LCAxMiwgMTMsIDE0LCAxMSwgOCwgNSwgNlxuXVxuXG52YXIgc3IgPSBbXG4gIDgsIDksIDksIDExLCAxMywgMTUsIDE1LCA1LCA3LCA3LCA4LCAxMSwgMTQsIDE0LCAxMiwgNixcbiAgOSwgMTMsIDE1LCA3LCAxMiwgOCwgOSwgMTEsIDcsIDcsIDEyLCA3LCA2LCAxNSwgMTMsIDExLFxuICA5LCA3LCAxNSwgMTEsIDgsIDYsIDYsIDE0LCAxMiwgMTMsIDUsIDE0LCAxMywgMTMsIDcsIDUsXG4gIDE1LCA1LCA4LCAxMSwgMTQsIDE0LCA2LCAxNCwgNiwgOSwgMTIsIDksIDEyLCA1LCAxNSwgOCxcbiAgOCwgNSwgMTIsIDksIDEyLCA1LCAxNCwgNiwgOCwgMTMsIDYsIDUsIDE1LCAxMywgMTEsIDExXG5dXG5cbnZhciBobCA9IFsweDAwMDAwMDAwLCAweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjLCAweGE5NTNmZDRlXVxudmFyIGhyID0gWzB4NTBhMjhiZTYsIDB4NWM0ZGQxMjQsIDB4NmQ3MDNlZjMsIDB4N2E2ZDc2ZTksIDB4MDAwMDAwMDBdXG5cbmZ1bmN0aW9uIFJJUEVNRDE2MCAoKSB7XG4gIEhhc2hCYXNlLmNhbGwodGhpcywgNjQpXG5cbiAgLy8gc3RhdGVcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjBcbn1cblxuaW5oZXJpdHMoUklQRU1EMTYwLCBIYXNoQmFzZSlcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgd29yZHMgPSBBUlJBWTE2XG4gIGZvciAodmFyIGogPSAwOyBqIDwgMTY7ICsraikgd29yZHNbal0gPSB0aGlzLl9ibG9jay5yZWFkSW50MzJMRShqICogNClcblxuICB2YXIgYWwgPSB0aGlzLl9hIHwgMFxuICB2YXIgYmwgPSB0aGlzLl9iIHwgMFxuICB2YXIgY2wgPSB0aGlzLl9jIHwgMFxuICB2YXIgZGwgPSB0aGlzLl9kIHwgMFxuICB2YXIgZWwgPSB0aGlzLl9lIHwgMFxuXG4gIHZhciBhciA9IHRoaXMuX2EgfCAwXG4gIHZhciBiciA9IHRoaXMuX2IgfCAwXG4gIHZhciBjciA9IHRoaXMuX2MgfCAwXG4gIHZhciBkciA9IHRoaXMuX2QgfCAwXG4gIHZhciBlciA9IHRoaXMuX2UgfCAwXG5cbiAgLy8gY29tcHV0YXRpb25cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSArPSAxKSB7XG4gICAgdmFyIHRsXG4gICAgdmFyIHRyXG4gICAgaWYgKGkgPCAxNikge1xuICAgICAgdGwgPSBmbjEoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzBdLCBzbFtpXSlcbiAgICAgIHRyID0gZm41KGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclswXSwgc3JbaV0pXG4gICAgfSBlbHNlIGlmIChpIDwgMzIpIHtcbiAgICAgIHRsID0gZm4yKGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFsxXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuNChhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbMV0sIHNyW2ldKVxuICAgIH0gZWxzZSBpZiAoaSA8IDQ4KSB7XG4gICAgICB0bCA9IGZuMyhhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbMl0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjMoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzJdLCBzcltpXSlcbiAgICB9IGVsc2UgaWYgKGkgPCA2NCkge1xuICAgICAgdGwgPSBmbjQoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzNdLCBzbFtpXSlcbiAgICAgIHRyID0gZm4yKGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclszXSwgc3JbaV0pXG4gICAgfSBlbHNlIHsgLy8gaWYgKGk8ODApIHtcbiAgICAgIHRsID0gZm41KGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFs0XSwgc2xbaV0pXG4gICAgICB0ciA9IGZuMShhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbNF0sIHNyW2ldKVxuICAgIH1cblxuICAgIGFsID0gZWxcbiAgICBlbCA9IGRsXG4gICAgZGwgPSByb3RsKGNsLCAxMClcbiAgICBjbCA9IGJsXG4gICAgYmwgPSB0bFxuXG4gICAgYXIgPSBlclxuICAgIGVyID0gZHJcbiAgICBkciA9IHJvdGwoY3IsIDEwKVxuICAgIGNyID0gYnJcbiAgICBiciA9IHRyXG4gIH1cblxuICAvLyB1cGRhdGUgc3RhdGVcbiAgdmFyIHQgPSAodGhpcy5fYiArIGNsICsgZHIpIHwgMFxuICB0aGlzLl9iID0gKHRoaXMuX2MgKyBkbCArIGVyKSB8IDBcbiAgdGhpcy5fYyA9ICh0aGlzLl9kICsgZWwgKyBhcikgfCAwXG4gIHRoaXMuX2QgPSAodGhpcy5fZSArIGFsICsgYnIpIHwgMFxuICB0aGlzLl9lID0gKHRoaXMuX2EgKyBibCArIGNyKSB8IDBcbiAgdGhpcy5fYSA9IHRcbn1cblxuUklQRU1EMTYwLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBjcmVhdGUgcGFkZGluZyBhbmQgaGFuZGxlIGJsb2Nrc1xuICB0aGlzLl9ibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IDB4ODBcbiAgaWYgKHRoaXMuX2Jsb2NrT2Zmc2V0ID4gNTYpIHtcbiAgICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA2NClcbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG5cbiAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzBdLCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMV0sIDYwKVxuICB0aGlzLl91cGRhdGUoKVxuXG4gIC8vIHByb2R1Y2UgcmVzdWx0XG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2MgPyBCdWZmZXIuYWxsb2MoMjApIDogbmV3IEJ1ZmZlcigyMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9hLCAwKVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2IsIDQpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYywgOClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9kLCAxMilcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9lLCAxNilcbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiByb3RsICh4LCBuKSB7XG4gIHJldHVybiAoeCA8PCBuKSB8ICh4ID4+PiAoMzIgLSBuKSlcbn1cblxuZnVuY3Rpb24gZm4xIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gYyBeIGQpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm4yIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiAmIGMpIHwgKCh+YikgJiBkKSkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjMgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiIHwgKH5jKSkgXiBkKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuNCAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBkKSB8IChjICYgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm41IChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gKGMgfCAofmQpKSkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJJUEVNRDE2MFxuIiwidmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFNIQSAoYWxnb3JpdGhtKSB7XG4gIGFsZ29yaXRobSA9IGFsZ29yaXRobS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIEFsZ29yaXRobSA9IGV4cG9ydHNbYWxnb3JpdGhtXVxuICBpZiAoIUFsZ29yaXRobSkgdGhyb3cgbmV3IEVycm9yKGFsZ29yaXRobSArICcgaXMgbm90IHN1cHBvcnRlZCAod2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMpJylcblxuICByZXR1cm4gbmV3IEFsZ29yaXRobSgpXG59XG5cbmV4cG9ydHMuc2hhID0gcmVxdWlyZSgnLi9zaGEnKVxuZXhwb3J0cy5zaGExID0gcmVxdWlyZSgnLi9zaGExJylcbmV4cG9ydHMuc2hhMjI0ID0gcmVxdWlyZSgnLi9zaGEyMjQnKVxuZXhwb3J0cy5zaGEyNTYgPSByZXF1aXJlKCcuL3NoYTI1NicpXG5leHBvcnRzLnNoYTM4NCA9IHJlcXVpcmUoJy4vc2hhMzg0JylcbmV4cG9ydHMuc2hhNTEyID0gcmVxdWlyZSgnLi9zaGE1MTInKVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBDaXBoZXIob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gIHRoaXMudHlwZSA9IHRoaXMub3B0aW9ucy50eXBlO1xuICB0aGlzLmJsb2NrU2l6ZSA9IDg7XG4gIHRoaXMuX2luaXQoKTtcblxuICB0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheSh0aGlzLmJsb2NrU2l6ZSk7XG4gIHRoaXMuYnVmZmVyT2ZmID0gMDtcbn1cbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyO1xuXG5DaXBoZXIucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gX2luaXQoKSB7XG4gIC8vIE1pZ2h0IGJlIG92ZXJyaWRlZFxufTtcblxuQ2lwaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZGF0YSkge1xuICBpZiAoZGF0YS5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0aGlzLnR5cGUgPT09ICdkZWNyeXB0JylcbiAgICByZXR1cm4gdGhpcy5fdXBkYXRlRGVjcnlwdChkYXRhKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl91cGRhdGVFbmNyeXB0KGRhdGEpO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fYnVmZmVyID0gZnVuY3Rpb24gX2J1ZmZlcihkYXRhLCBvZmYpIHtcbiAgLy8gQXBwZW5kIGRhdGEgdG8gYnVmZmVyXG4gIHZhciBtaW4gPSBNYXRoLm1pbih0aGlzLmJ1ZmZlci5sZW5ndGggLSB0aGlzLmJ1ZmZlck9mZiwgZGF0YS5sZW5ndGggLSBvZmYpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1pbjsgaSsrKVxuICAgIHRoaXMuYnVmZmVyW3RoaXMuYnVmZmVyT2ZmICsgaV0gPSBkYXRhW29mZiArIGldO1xuICB0aGlzLmJ1ZmZlck9mZiArPSBtaW47XG5cbiAgLy8gU2hpZnQgbmV4dFxuICByZXR1cm4gbWluO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fZmx1c2hCdWZmZXIgPSBmdW5jdGlvbiBfZmx1c2hCdWZmZXIob3V0LCBvZmYpIHtcbiAgdGhpcy5fdXBkYXRlKHRoaXMuYnVmZmVyLCAwLCBvdXQsIG9mZik7XG4gIHRoaXMuYnVmZmVyT2ZmID0gMDtcbiAgcmV0dXJuIHRoaXMuYmxvY2tTaXplO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlRW5jcnlwdCA9IGZ1bmN0aW9uIF91cGRhdGVFbmNyeXB0KGRhdGEpIHtcbiAgdmFyIGlucHV0T2ZmID0gMDtcbiAgdmFyIG91dHB1dE9mZiA9IDA7XG5cbiAgdmFyIGNvdW50ID0gKCh0aGlzLmJ1ZmZlck9mZiArIGRhdGEubGVuZ3RoKSAvIHRoaXMuYmxvY2tTaXplKSB8IDA7XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoY291bnQgKiB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgaWYgKHRoaXMuYnVmZmVyT2ZmICE9PSAwKSB7XG4gICAgaW5wdXRPZmYgKz0gdGhpcy5fYnVmZmVyKGRhdGEsIGlucHV0T2ZmKTtcblxuICAgIGlmICh0aGlzLmJ1ZmZlck9mZiA9PT0gdGhpcy5idWZmZXIubGVuZ3RoKVxuICAgICAgb3V0cHV0T2ZmICs9IHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgb3V0cHV0T2ZmKTtcbiAgfVxuXG4gIC8vIFdyaXRlIGJsb2Nrc1xuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGggLSAoKGRhdGEubGVuZ3RoIC0gaW5wdXRPZmYpICUgdGhpcy5ibG9ja1NpemUpO1xuICBmb3IgKDsgaW5wdXRPZmYgPCBtYXg7IGlucHV0T2ZmICs9IHRoaXMuYmxvY2tTaXplKSB7XG4gICAgdGhpcy5fdXBkYXRlKGRhdGEsIGlucHV0T2ZmLCBvdXQsIG91dHB1dE9mZik7XG4gICAgb3V0cHV0T2ZmICs9IHRoaXMuYmxvY2tTaXplO1xuICB9XG5cbiAgLy8gUXVldWUgcmVzdFxuICBmb3IgKDsgaW5wdXRPZmYgPCBkYXRhLmxlbmd0aDsgaW5wdXRPZmYrKywgdGhpcy5idWZmZXJPZmYrKylcbiAgICB0aGlzLmJ1ZmZlclt0aGlzLmJ1ZmZlck9mZl0gPSBkYXRhW2lucHV0T2ZmXTtcblxuICByZXR1cm4gb3V0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlRGVjcnlwdCA9IGZ1bmN0aW9uIF91cGRhdGVEZWNyeXB0KGRhdGEpIHtcbiAgdmFyIGlucHV0T2ZmID0gMDtcbiAgdmFyIG91dHB1dE9mZiA9IDA7XG5cbiAgdmFyIGNvdW50ID0gTWF0aC5jZWlsKCh0aGlzLmJ1ZmZlck9mZiArIGRhdGEubGVuZ3RoKSAvIHRoaXMuYmxvY2tTaXplKSAtIDE7XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoY291bnQgKiB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogb3B0aW1pemUgaXQsIHRoaXMgaXMgZmFyIGZyb20gb3B0aW1hbFxuICBmb3IgKDsgY291bnQgPiAwOyBjb3VudC0tKSB7XG4gICAgaW5wdXRPZmYgKz0gdGhpcy5fYnVmZmVyKGRhdGEsIGlucHV0T2ZmKTtcbiAgICBvdXRwdXRPZmYgKz0gdGhpcy5fZmx1c2hCdWZmZXIob3V0LCBvdXRwdXRPZmYpO1xuICB9XG5cbiAgLy8gQnVmZmVyIHJlc3Qgb2YgdGhlIGlucHV0XG4gIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuZmluYWwgPSBmdW5jdGlvbiBmaW5hbChidWZmZXIpIHtcbiAgdmFyIGZpcnN0O1xuICBpZiAoYnVmZmVyKVxuICAgIGZpcnN0ID0gdGhpcy51cGRhdGUoYnVmZmVyKTtcblxuICB2YXIgbGFzdDtcbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKVxuICAgIGxhc3QgPSB0aGlzLl9maW5hbEVuY3J5cHQoKTtcbiAgZWxzZVxuICAgIGxhc3QgPSB0aGlzLl9maW5hbERlY3J5cHQoKTtcblxuICBpZiAoZmlyc3QpXG4gICAgcmV0dXJuIGZpcnN0LmNvbmNhdChsYXN0KTtcbiAgZWxzZVxuICAgIHJldHVybiBsYXN0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fcGFkID0gZnVuY3Rpb24gX3BhZChidWZmZXIsIG9mZikge1xuICBpZiAob2ZmID09PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB3aGlsZSAob2ZmIDwgYnVmZmVyLmxlbmd0aClcbiAgICBidWZmZXJbb2ZmKytdID0gMDtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsRW5jcnlwdCA9IGZ1bmN0aW9uIF9maW5hbEVuY3J5cHQoKSB7XG4gIGlmICghdGhpcy5fcGFkKHRoaXMuYnVmZmVyLCB0aGlzLmJ1ZmZlck9mZikpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBvdXQgPSBuZXcgQXJyYXkodGhpcy5ibG9ja1NpemUpO1xuICB0aGlzLl91cGRhdGUodGhpcy5idWZmZXIsIDAsIG91dCwgMCk7XG4gIHJldHVybiBvdXQ7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLl91bnBhZCA9IGZ1bmN0aW9uIF91bnBhZChidWZmZXIpIHtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsRGVjcnlwdCA9IGZ1bmN0aW9uIF9maW5hbERlY3J5cHQoKSB7XG4gIGFzc2VydC5lcXVhbCh0aGlzLmJ1ZmZlck9mZiwgdGhpcy5ibG9ja1NpemUsICdOb3QgZW5vdWdoIGRhdGEgdG8gZGVjcnlwdCcpO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KHRoaXMuYmxvY2tTaXplKTtcbiAgdGhpcy5fZmx1c2hCdWZmZXIob3V0LCAwKTtcblxuICByZXR1cm4gdGhpcy5fdW5wYWQob3V0KTtcbn07XG4iLCJ2YXIgY2lwaGVycyA9IHJlcXVpcmUoJy4vZW5jcnlwdGVyJylcbnZhciBkZWNpcGhlcnMgPSByZXF1aXJlKCcuL2RlY3J5cHRlcicpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzL2xpc3QuanNvbicpXG5cbmZ1bmN0aW9uIGdldENpcGhlcnMgKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMobW9kZXMpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gZXhwb3J0cy5DaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZUNpcGhlclxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGV4cG9ydHMuQ2lwaGVyaXYgPSBjaXBoZXJzLmNyZWF0ZUNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gZXhwb3J0cy5EZWNpcGhlciA9IGRlY2lwaGVycy5jcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gZXhwb3J0cy5EZWNpcGhlcml2ID0gZGVjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXZcbmV4cG9ydHMubGlzdENpcGhlcnMgPSBleHBvcnRzLmdldENpcGhlcnMgPSBnZXRDaXBoZXJzXG4iLCJ2YXIgbW9kZU1vZHVsZXMgPSB7XG4gIEVDQjogcmVxdWlyZSgnLi9lY2InKSxcbiAgQ0JDOiByZXF1aXJlKCcuL2NiYycpLFxuICBDRkI6IHJlcXVpcmUoJy4vY2ZiJyksXG4gIENGQjg6IHJlcXVpcmUoJy4vY2ZiOCcpLFxuICBDRkIxOiByZXF1aXJlKCcuL2NmYjEnKSxcbiAgT0ZCOiByZXF1aXJlKCcuL29mYicpLFxuICBDVFI6IHJlcXVpcmUoJy4vY3RyJyksXG4gIEdDTTogcmVxdWlyZSgnLi9jdHInKVxufVxuXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL2xpc3QuanNvbicpXG5cbmZvciAodmFyIGtleSBpbiBtb2Rlcykge1xuICBtb2Rlc1trZXldLm1vZHVsZSA9IG1vZGVNb2R1bGVzW21vZGVzW2tleV0ubW9kZV1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb2Rlc1xuIiwidmFyIHI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmFuZChsZW4pIHtcbiAgaWYgKCFyKVxuICAgIHIgPSBuZXcgUmFuZChudWxsKTtcblxuICByZXR1cm4gci5nZW5lcmF0ZShsZW4pO1xufTtcblxuZnVuY3Rpb24gUmFuZChyYW5kKSB7XG4gIHRoaXMucmFuZCA9IHJhbmQ7XG59XG5tb2R1bGUuZXhwb3J0cy5SYW5kID0gUmFuZDtcblxuUmFuZC5wcm90b3R5cGUuZ2VuZXJhdGUgPSBmdW5jdGlvbiBnZW5lcmF0ZShsZW4pIHtcbiAgcmV0dXJuIHRoaXMuX3JhbmQobGVuKTtcbn07XG5cbi8vIEVtdWxhdGUgY3J5cHRvIEFQSSB1c2luZyByYW5keVxuUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gIGlmICh0aGlzLnJhbmQuZ2V0Qnl0ZXMpXG4gICAgcmV0dXJuIHRoaXMucmFuZC5nZXRCeXRlcyhuKTtcblxuICB2YXIgcmVzID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSsrKVxuICAgIHJlc1tpXSA9IHRoaXMucmFuZC5nZXRCeXRlKCk7XG4gIHJldHVybiByZXM7XG59O1xuXG5pZiAodHlwZW9mIHNlbGYgPT09ICdvYmplY3QnKSB7XG4gIGlmIChzZWxmLmNyeXB0byAmJiBzZWxmLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBNb2Rlcm4gYnJvd3NlcnNcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShuKTtcbiAgICAgIHNlbGYuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9O1xuICB9IGVsc2UgaWYgKHNlbGYubXNDcnlwdG8gJiYgc2VsZi5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBJRVxuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikge1xuICAgICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgICAgc2VsZi5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyKTtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfTtcblxuICAvLyBTYWZhcmkncyBXZWJXb3JrZXJzIGRvIG5vdCBoYXZlIGBjcnlwdG9gXG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBPbGQganVua1xuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCB5ZXQnKTtcbiAgICB9O1xuICB9XG59IGVsc2Uge1xuICAvLyBOb2RlLmpzIG9yIFdlYiB3b3JrZXIgd2l0aCBubyBjcnlwdG8gc3VwcG9ydFxuICB0cnkge1xuICAgIHZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbiAgICBpZiAodHlwZW9mIGNyeXB0by5yYW5kb21CeXRlcyAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCcpO1xuXG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKG4pO1xuICAgIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxufVxuIiwidmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGNydDtcbmZ1bmN0aW9uIGJsaW5kKHByaXYpIHtcbiAgdmFyIHIgPSBnZXRyKHByaXYpO1xuICB2YXIgYmxpbmRlciA9IHIudG9SZWQoYm4ubW9udChwcml2Lm1vZHVsdXMpKVxuICAucmVkUG93KG5ldyBibihwcml2LnB1YmxpY0V4cG9uZW50KSkuZnJvbVJlZCgpO1xuICByZXR1cm4ge1xuICAgIGJsaW5kZXI6IGJsaW5kZXIsXG4gICAgdW5ibGluZGVyOnIuaW52bShwcml2Lm1vZHVsdXMpXG4gIH07XG59XG5mdW5jdGlvbiBjcnQobXNnLCBwcml2KSB7XG4gIHZhciBibGluZHMgPSBibGluZChwcml2KTtcbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKCk7XG4gIHZhciBtb2QgPSBibi5tb250KHByaXYubW9kdWx1cyk7XG4gIHZhciBibGluZGVkID0gbmV3IGJuKG1zZykubXVsKGJsaW5kcy5ibGluZGVyKS51bW9kKHByaXYubW9kdWx1cyk7XG4gIHZhciBjMSA9IGJsaW5kZWQudG9SZWQoYm4ubW9udChwcml2LnByaW1lMSkpO1xuICB2YXIgYzIgPSBibGluZGVkLnRvUmVkKGJuLm1vbnQocHJpdi5wcmltZTIpKTtcbiAgdmFyIHFpbnYgPSBwcml2LmNvZWZmaWNpZW50O1xuICB2YXIgcCA9IHByaXYucHJpbWUxO1xuICB2YXIgcSA9IHByaXYucHJpbWUyO1xuICB2YXIgbTEgPSBjMS5yZWRQb3cocHJpdi5leHBvbmVudDEpO1xuICB2YXIgbTIgPSBjMi5yZWRQb3cocHJpdi5leHBvbmVudDIpO1xuICBtMSA9IG0xLmZyb21SZWQoKTtcbiAgbTIgPSBtMi5mcm9tUmVkKCk7XG4gIHZhciBoID0gbTEuaXN1YihtMikuaW11bChxaW52KS51bW9kKHApO1xuICBoLmltdWwocSk7XG4gIG0yLmlhZGQoaCk7XG4gIHJldHVybiBuZXcgQnVmZmVyKG0yLmltdWwoYmxpbmRzLnVuYmxpbmRlcikudW1vZChwcml2Lm1vZHVsdXMpLnRvQXJyYXkoZmFsc2UsIGxlbikpO1xufVxuY3J0LmdldHIgPSBnZXRyO1xuZnVuY3Rpb24gZ2V0cihwcml2KSB7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgd2hpbGUgKHIuY21wKHByaXYubW9kdWx1cykgPj0gIDAgfHwgIXIudW1vZChwcml2LnByaW1lMSkgfHwgIXIudW1vZChwcml2LnByaW1lMikpIHtcbiAgICByID0gbmV3IGJuKHJhbmRvbUJ5dGVzKGxlbikpO1xuICB9XG4gIHJldHVybiByO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWxsaXB0aWMgPSBleHBvcnRzO1xuXG5lbGxpcHRpYy52ZXJzaW9uID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbmVsbGlwdGljLnV0aWxzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy91dGlscycpO1xuZWxsaXB0aWMucmFuZCA9IHJlcXVpcmUoJ2Jyb3JhbmQnKTtcbmVsbGlwdGljLmN1cnZlID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9jdXJ2ZScpO1xuZWxsaXB0aWMuY3VydmVzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9jdXJ2ZXMnKTtcblxuLy8gUHJvdG9jb2xzXG5lbGxpcHRpYy5lYyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvZWMnKTtcbmVsbGlwdGljLmVkZHNhID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9lZGRzYScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmVzID0gZXhwb3J0cztcblxudmFyIGhhc2ggPSByZXF1aXJlKCdoYXNoLmpzJyk7XG52YXIgY3VydmUgPSByZXF1aXJlKCcuL2N1cnZlJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIFByZXNldEN1cnZlKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ3Nob3J0JylcbiAgICB0aGlzLmN1cnZlID0gbmV3IGN1cnZlLnNob3J0KG9wdGlvbnMpO1xuICBlbHNlIGlmIChvcHRpb25zLnR5cGUgPT09ICdlZHdhcmRzJylcbiAgICB0aGlzLmN1cnZlID0gbmV3IGN1cnZlLmVkd2FyZHMob3B0aW9ucyk7XG4gIGVsc2VcbiAgICB0aGlzLmN1cnZlID0gbmV3IGN1cnZlLm1vbnQob3B0aW9ucyk7XG4gIHRoaXMuZyA9IHRoaXMuY3VydmUuZztcbiAgdGhpcy5uID0gdGhpcy5jdXJ2ZS5uO1xuICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2g7XG5cbiAgYXNzZXJ0KHRoaXMuZy52YWxpZGF0ZSgpLCAnSW52YWxpZCBjdXJ2ZScpO1xuICBhc3NlcnQodGhpcy5nLm11bCh0aGlzLm4pLmlzSW5maW5pdHkoKSwgJ0ludmFsaWQgY3VydmUsIEcqTiAhPSBPJyk7XG59XG5jdXJ2ZXMuUHJlc2V0Q3VydmUgPSBQcmVzZXRDdXJ2ZTtcblxuZnVuY3Rpb24gZGVmaW5lQ3VydmUobmFtZSwgb3B0aW9ucykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VydmVzLCBuYW1lLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjdXJ2ZSA9IG5ldyBQcmVzZXRDdXJ2ZShvcHRpb25zKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdXJ2ZXMsIG5hbWUsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogY3VydmVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGN1cnZlO1xuICAgIH1cbiAgfSk7XG59XG5cbmRlZmluZUN1cnZlKCdwMTkyJywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogJ3AxOTInLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnLFxuICBhOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmMnLFxuICBiOiAnNjQyMTA1MTkgZTU5YzgwZTcgMGZhN2U5YWIgNzIyNDMwNDkgZmViOGRlZWMgYzE0NmI5YjEnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgOTlkZWY4MzYgMTQ2YmM5YjEgYjRkMjI4MzEnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMTg4ZGE4MGUgYjAzMDkwZjYgN2NiZjIwZWIgNDNhMTg4MDAgZjRmZjBhZmQgODJmZjEwMTInLFxuICAgICcwNzE5MmI5NSBmZmM4ZGE3OCA2MzEwMTFlZCA2YjI0Y2RkNSA3M2Y5NzdhMSAxZTc5NDgxMSdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdwMjI0Jywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogJ3AyMjQnLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnLFxuICBhOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUnLFxuICBiOiAnYjQwNTBhODUgMGMwNGIzYWIgZjU0MTMyNTYgNTA0NGIwYjcgZDdiZmQ4YmEgMjcwYjM5NDMgMjM1NWZmYjQnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZjE2YTIgZTBiOGYwM2UgMTNkZDI5NDUgNWM1YzJhM2QnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnYjcwZTBjYmQgNmJiNGJmN2YgMzIxMzkwYjkgNGEwM2MxZDMgNTZjMjExMjIgMzQzMjgwZDYgMTE1YzFkMjEnLFxuICAgICdiZDM3NjM4OCBiNWY3MjNmYiA0YzIyZGZlNiBjZDQzNzVhMCA1YTA3NDc2NCA0NGQ1ODE5OSA4NTAwN2UzNCdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdwMjU2Jywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogbnVsbCxcbiAgcDogJ2ZmZmZmZmZmIDAwMDAwMDAxIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmJyxcbiAgYTogJ2ZmZmZmZmZmIDAwMDAwMDAxIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZjJyxcbiAgYjogJzVhYzYzNWQ4IGFhM2E5M2U3IGIzZWJiZDU1IDc2OTg4NmJjIDY1MWQwNmIwIGNjNTNiMGY2IDNiY2UzYzNlIDI3ZDI2MDRiJyxcbiAgbjogJ2ZmZmZmZmZmIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGJjZTZmYWFkIGE3MTc5ZTg0IGYzYjljYWMyIGZjNjMyNTUxJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzZiMTdkMWYyIGUxMmM0MjQ3IGY4YmNlNmU1IDYzYTQ0MGYyIDc3MDM3ZDgxIDJkZWIzM2EwIGY0YTEzOTQ1IGQ4OThjMjk2JyxcbiAgICAnNGZlMzQyZTIgZmUxYTdmOWIgOGVlN2ViNGEgN2MwZjllMTYgMmJjZTMzNTcgNmIzMTVlY2UgY2JiNjQwNjggMzdiZjUxZjUnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDM4NCcsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZlIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmJyxcbiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmUgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmMnLFxuICBiOiAnYjMzMTJmYTcgZTIzZWU3ZTQgOTg4ZTA1NmIgZTNmODJkMTkgMTgxZDljNmUgZmU4MTQxMTIgMDMxNDA4OGYgJyArXG4gICAgICc1MDEzODc1YSBjNjU2Mzk4ZCA4YTJlZDE5ZCAyYTg1YzhlZCBkM2VjMmFlZicsXG4gIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBjNzYzNGQ4MSAnICtcbiAgICAgJ2Y0MzcyZGRmIDU4MWEwZGIyIDQ4YjBhNzdhIGVjZWMxOTZhIGNjYzUyOTczJyxcbiAgaGFzaDogaGFzaC5zaGEzODQsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJ2FhODdjYTIyIGJlOGIwNTM3IDhlYjFjNzFlIGYzMjBhZDc0IDZlMWQzYjYyIDhiYTc5Yjk4IDU5Zjc0MWUwIDgyNTQyYTM4ICcgK1xuICAgICc1NTAyZjI1ZCBiZjU1Mjk2YyAzYTU0NWUzOCA3Mjc2MGFiNycsXG4gICAgJzM2MTdkZTRhIDk2MjYyYzZmIDVkOWU5OGJmIDkyOTJkYzI5IGY4ZjQxZGJkIDI4OWExNDdjIGU5ZGEzMTEzIGI1ZjBiOGMwICcgK1xuICAgICcwYTYwYjFjZSAxZDdlODE5ZCA3YTQzMWQ3YyA5MGVhMGU1ZidcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdwNTIxJywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogbnVsbCxcbiAgcDogJzAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZicsXG4gIGE6ICcwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmMnLFxuICBiOiAnMDAwMDAwNTEgOTUzZWI5NjEgOGUxYzlhMWYgOTI5YTIxYTAgYjY4NTQwZWUgYTJkYTcyNWIgJyArXG4gICAgICc5OWIzMTVmMyBiOGI0ODk5MSA4ZWYxMDllMSA1NjE5Mzk1MSBlYzdlOTM3YiAxNjUyYzBiZCAnICtcbiAgICAgJzNiYjFiZjA3IDM1NzNkZjg4IDNkMmMzNGYxIGVmNDUxZmQ0IDZiNTAzZjAwJyxcbiAgbjogJzAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmEgNTE4Njg3ODMgYmYyZjk2NmIgN2ZjYzAxNDggJyArXG4gICAgICdmNzA5YTVkMCAzYmI1YzliOCA4OTljNDdhZSBiYjZmYjcxZSA5MTM4NjQwOScsXG4gIGhhc2g6IGhhc2guc2hhNTEyLFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICcwMDAwMDBjNiA4NThlMDZiNyAwNDA0ZTljZCA5ZTNlY2I2NiAyMzk1YjQ0MiA5YzY0ODEzOSAnICtcbiAgICAnMDUzZmI1MjEgZjgyOGFmNjAgNmI0ZDNkYmEgYTE0YjVlNzcgZWZlNzU5MjggZmUxZGMxMjcgJyArXG4gICAgJ2EyZmZhOGRlIDMzNDhiM2MxIDg1NmE0MjliIGY5N2U3ZTMxIGMyZTViZDY2JyxcbiAgICAnMDAwMDAxMTggMzkyOTZhNzggOWEzYmMwMDQgNWM4YTVmYjQgMmM3ZDFiZDkgOThmNTQ0NDkgJyArXG4gICAgJzU3OWI0NDY4IDE3YWZiZDE3IDI3M2U2NjJjIDk3ZWU3Mjk5IDVlZjQyNjQwIGM1NTBiOTAxICcgK1xuICAgICczZmFkMDc2MSAzNTNjNzA4NiBhMjcyYzI0MCA4OGJlOTQ3NiA5ZmQxNjY1MCdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdjdXJ2ZTI1NTE5Jywge1xuICB0eXBlOiAnbW9udCcsXG4gIHByaW1lOiAncDI1NTE5JyxcbiAgcDogJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnLFxuICBhOiAnNzZkMDYnLFxuICBiOiAnMScsXG4gIG46ICcxMDAwMDAwMDAwMDAwMDAwIDAwMDAwMDAwMDAwMDAwMDAgMTRkZWY5ZGVhMmY3OWNkNiA1ODEyNjMxYTVjZjVkM2VkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzknXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgnZWQyNTUxOScsIHtcbiAgdHlwZTogJ2Vkd2FyZHMnLFxuICBwcmltZTogJ3AyNTUxOScsXG4gIHA6ICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyxcbiAgYTogJy0xJyxcbiAgYzogJzEnLFxuICAvLyAtMTIxNjY1ICogKDEyMTY2Nl4oLTEpKSAobW9kIFApXG4gIGQ6ICc1MjAzNmNlZTJiNmZmZTczIDhjYzc0MDc5Nzc3OWU4OTggMDA3MDBhNGQ0MTQxZDhhYiA3NWViNGRjYTEzNTk3OGEzJyxcbiAgbjogJzEwMDAwMDAwMDAwMDAwMDAgMDAwMDAwMDAwMDAwMDAwMCAxNGRlZjlkZWEyZjc5Y2Q2IDU4MTI2MzFhNWNmNWQzZWQnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMjE2OTM2ZDNjZDZlNTNmZWMwYTRlMjMxZmRkNmRjNWM2OTJjYzc2MDk1MjVhN2IyYzk1NjJkNjA4ZjI1ZDUxYScsXG5cbiAgICAvLyA0LzVcbiAgICAnNjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY1OCdcbiAgXVxufSk7XG5cbnZhciBwcmU7XG50cnkge1xuICBwcmUgPSByZXF1aXJlKCcuL3ByZWNvbXB1dGVkL3NlY3AyNTZrMScpO1xufSBjYXRjaCAoZSkge1xuICBwcmUgPSB1bmRlZmluZWQ7XG59XG5cbmRlZmluZUN1cnZlKCdzZWNwMjU2azEnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiAnazI1NicsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicsXG4gIGE6ICcwJyxcbiAgYjogJzcnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgYmFhZWRjZTYgYWY0OGEwM2IgYmZkMjVlOGMgZDAzNjQxNDEnLFxuICBoOiAnMScsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuXG4gIC8vIFByZWNvbXB1dGVkIGVuZG9tb3JwaGlzbVxuICBiZXRhOiAnN2FlOTZhMmI2NTdjMDcxMDZlNjQ0NzllYWMzNDM0ZTk5Y2YwNDk3NTEyZjU4OTk1YzEzOTZjMjg3MTk1MDFlZScsXG4gIGxhbWJkYTogJzUzNjNhZDRjYzA1YzMwZTBhNTI2MWMwMjg4MTI2NDVhMTIyZTIyZWEyMDgxNjY3OGRmMDI5NjdjMWIyM2JkNzInLFxuICBiYXNpczogW1xuICAgIHtcbiAgICAgIGE6ICczMDg2ZDIyMWE3ZDQ2YmNkZTg2YzkwZTQ5Mjg0ZWIxNScsXG4gICAgICBiOiAnLWU0NDM3ZWQ2MDEwZTg4Mjg2ZjU0N2ZhOTBhYmZlNGMzJ1xuICAgIH0sXG4gICAge1xuICAgICAgYTogJzExNGNhNTBmN2E4ZTJmM2Y2NTdjMTEwOGQ5ZDQ0Y2ZkOCcsXG4gICAgICBiOiAnMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTUnXG4gICAgfVxuICBdLFxuXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzc5YmU2NjdlZjlkY2JiYWM1NWEwNjI5NWNlODcwYjA3MDI5YmZjZGIyZGNlMjhkOTU5ZjI4MTViMTZmODE3OTgnLFxuICAgICc0ODNhZGE3NzI2YTNjNDY1NWRhNGZiZmMwZTExMDhhOGZkMTdiNDQ4YTY4NTU0MTk5YzQ3ZDA4ZmZiMTBkNGI4JyxcbiAgICBwcmVcbiAgXVxufSk7XG4iLCJ2YXIgaGFzaCA9IGV4cG9ydHM7XG5cbmhhc2gudXRpbHMgPSByZXF1aXJlKCcuL2hhc2gvdXRpbHMnKTtcbmhhc2guY29tbW9uID0gcmVxdWlyZSgnLi9oYXNoL2NvbW1vbicpO1xuaGFzaC5zaGEgPSByZXF1aXJlKCcuL2hhc2gvc2hhJyk7XG5oYXNoLnJpcGVtZCA9IHJlcXVpcmUoJy4vaGFzaC9yaXBlbWQnKTtcbmhhc2guaG1hYyA9IHJlcXVpcmUoJy4vaGFzaC9obWFjJyk7XG5cbi8vIFByb3h5IGhhc2ggZnVuY3Rpb25zIHRvIHRoZSBtYWluIG9iamVjdFxuaGFzaC5zaGExID0gaGFzaC5zaGEuc2hhMTtcbmhhc2guc2hhMjU2ID0gaGFzaC5zaGEuc2hhMjU2O1xuaGFzaC5zaGEyMjQgPSBoYXNoLnNoYS5zaGEyMjQ7XG5oYXNoLnNoYTM4NCA9IGhhc2guc2hhLnNoYTM4NDtcbmhhc2guc2hhNTEyID0gaGFzaC5zaGEuc2hhNTEyO1xuaGFzaC5yaXBlbWQxNjAgPSBoYXNoLnJpcGVtZC5yaXBlbWQxNjA7XG4iLCIvKiFcbiAqIHRvaWRlbnRpZmllclxuICogQ29weXJpZ2h0KGMpIDIwMTYgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB0b0lkZW50aWZpZXJcblxuLyoqXG4gKiBUcmFzZm9ybSB0aGUgZ2l2ZW4gc3RyaW5nIGludG8gYSBKYXZhU2NyaXB0IGlkZW50aWZpZXJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHRvSWRlbnRpZmllciAoc3RyKSB7XG4gIHJldHVybiBzdHJcbiAgICAuc3BsaXQoJyAnKVxuICAgIC5tYXAoZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICByZXR1cm4gdG9rZW4uc2xpY2UoMCwgMSkudG9VcHBlckNhc2UoKSArIHRva2VuLnNsaWNlKDEpXG4gICAgfSlcbiAgICAuam9pbignJylcbiAgICAucmVwbGFjZSgvW14gXzAtOWEtel0vZ2ksICcnKVxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gU29tZSBlbnZpcm9ubWVudHMgZG9uJ3QgaGF2ZSBnbG9iYWwgQnVmZmVyIChlLmcuIFJlYWN0IE5hdGl2ZSkuXG4vLyBTb2x1dGlvbiB3b3VsZCBiZSBpbnN0YWxsaW5nIG5wbSBtb2R1bGVzIFwiYnVmZmVyXCIgYW5kIFwic3RyZWFtXCIgZXhwbGljaXRseS5cbnZhciBCdWZmZXIgPSByZXF1aXJlKFwic2FmZXItYnVmZmVyXCIpLkJ1ZmZlcjtcblxudmFyIGJvbUhhbmRsaW5nID0gcmVxdWlyZShcIi4vYm9tLWhhbmRsaW5nXCIpLFxuICAgIGljb252ID0gbW9kdWxlLmV4cG9ydHM7XG5cbi8vIEFsbCBjb2RlY3MgYW5kIGFsaWFzZXMgYXJlIGtlcHQgaGVyZSwga2V5ZWQgYnkgZW5jb2RpbmcgbmFtZS9hbGlhcy5cbi8vIFRoZXkgYXJlIGxhenkgbG9hZGVkIGluIGBpY29udi5nZXRDb2RlY2AgZnJvbSBgZW5jb2RpbmdzL2luZGV4LmpzYC5cbmljb252LmVuY29kaW5ncyA9IG51bGw7XG5cbi8vIENoYXJhY3RlcnMgZW1pdHRlZCBpbiBjYXNlIG9mIGVycm9yLlxuaWNvbnYuZGVmYXVsdENoYXJVbmljb2RlID0gJ++/vSc7XG5pY29udi5kZWZhdWx0Q2hhclNpbmdsZUJ5dGUgPSAnPyc7XG5cbi8vIFB1YmxpYyBBUEkuXG5pY29udi5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoc3RyLCBlbmNvZGluZywgb3B0aW9ucykge1xuICAgIHN0ciA9IFwiXCIgKyAoc3RyIHx8IFwiXCIpOyAvLyBFbnN1cmUgc3RyaW5nLlxuXG4gICAgdmFyIGVuY29kZXIgPSBpY29udi5nZXRFbmNvZGVyKGVuY29kaW5nLCBvcHRpb25zKTtcblxuICAgIHZhciByZXMgPSBlbmNvZGVyLndyaXRlKHN0cik7XG4gICAgdmFyIHRyYWlsID0gZW5jb2Rlci5lbmQoKTtcbiAgICBcbiAgICByZXR1cm4gKHRyYWlsICYmIHRyYWlsLmxlbmd0aCA+IDApID8gQnVmZmVyLmNvbmNhdChbcmVzLCB0cmFpbF0pIDogcmVzO1xufVxuXG5pY29udi5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoYnVmLCBlbmNvZGluZywgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgYnVmID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoIWljb252LnNraXBEZWNvZGVXYXJuaW5nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdJY29udi1saXRlIHdhcm5pbmc6IGRlY29kZSgpLWluZyBzdHJpbmdzIGlzIGRlcHJlY2F0ZWQuIFJlZmVyIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9hc2h0dWNoa2luL2ljb252LWxpdGUvd2lraS9Vc2UtQnVmZmVycy13aGVuLWRlY29kaW5nJyk7XG4gICAgICAgICAgICBpY29udi5za2lwRGVjb2RlV2FybmluZyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBidWYgPSBCdWZmZXIuZnJvbShcIlwiICsgKGJ1ZiB8fCBcIlwiKSwgXCJiaW5hcnlcIik7IC8vIEVuc3VyZSBidWZmZXIuXG4gICAgfVxuXG4gICAgdmFyIGRlY29kZXIgPSBpY29udi5nZXREZWNvZGVyKGVuY29kaW5nLCBvcHRpb25zKTtcblxuICAgIHZhciByZXMgPSBkZWNvZGVyLndyaXRlKGJ1Zik7XG4gICAgdmFyIHRyYWlsID0gZGVjb2Rlci5lbmQoKTtcblxuICAgIHJldHVybiB0cmFpbCA/IChyZXMgKyB0cmFpbCkgOiByZXM7XG59XG5cbmljb252LmVuY29kaW5nRXhpc3RzID0gZnVuY3Rpb24gZW5jb2RpbmdFeGlzdHMoZW5jKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWNvbnYuZ2V0Q29kZWMoZW5jKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG4vLyBMZWdhY3kgYWxpYXNlcyB0byBjb252ZXJ0IGZ1bmN0aW9uc1xuaWNvbnYudG9FbmNvZGluZyA9IGljb252LmVuY29kZTtcbmljb252LmZyb21FbmNvZGluZyA9IGljb252LmRlY29kZTtcblxuLy8gU2VhcmNoIGZvciBhIGNvZGVjIGluIGljb252LmVuY29kaW5ncy4gQ2FjaGUgY29kZWMgZGF0YSBpbiBpY29udi5fY29kZWNEYXRhQ2FjaGUuXG5pY29udi5fY29kZWNEYXRhQ2FjaGUgPSB7fTtcbmljb252LmdldENvZGVjID0gZnVuY3Rpb24gZ2V0Q29kZWMoZW5jb2RpbmcpIHtcbiAgICBpZiAoIWljb252LmVuY29kaW5ncylcbiAgICAgICAgaWNvbnYuZW5jb2RpbmdzID0gcmVxdWlyZShcIi4uL2VuY29kaW5nc1wiKTsgLy8gTGF6eSBsb2FkIGFsbCBlbmNvZGluZyBkZWZpbml0aW9ucy5cbiAgICBcbiAgICAvLyBDYW5vbmljYWxpemUgZW5jb2RpbmcgbmFtZTogc3RyaXAgYWxsIG5vbi1hbHBoYW51bWVyaWMgY2hhcnMgYW5kIGFwcGVuZGVkIHllYXIuXG4gICAgdmFyIGVuYyA9IGljb252Ll9jYW5vbmljYWxpemVFbmNvZGluZyhlbmNvZGluZyk7XG5cbiAgICAvLyBUcmF2ZXJzZSBpY29udi5lbmNvZGluZ3MgdG8gZmluZCBhY3R1YWwgY29kZWMuXG4gICAgdmFyIGNvZGVjT3B0aW9ucyA9IHt9O1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBjb2RlYyA9IGljb252Ll9jb2RlY0RhdGFDYWNoZVtlbmNdO1xuICAgICAgICBpZiAoY29kZWMpXG4gICAgICAgICAgICByZXR1cm4gY29kZWM7XG5cbiAgICAgICAgdmFyIGNvZGVjRGVmID0gaWNvbnYuZW5jb2RpbmdzW2VuY107XG5cbiAgICAgICAgc3dpdGNoICh0eXBlb2YgY29kZWNEZWYpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjogLy8gRGlyZWN0IGFsaWFzIHRvIG90aGVyIGVuY29kaW5nLlxuICAgICAgICAgICAgICAgIGVuYyA9IGNvZGVjRGVmO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwib2JqZWN0XCI6IC8vIEFsaWFzIHdpdGggb3B0aW9ucy4gQ2FuIGJlIGxheWVyZWQuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGNvZGVjRGVmKVxuICAgICAgICAgICAgICAgICAgICBjb2RlY09wdGlvbnNba2V5XSA9IGNvZGVjRGVmW2tleV07XG5cbiAgICAgICAgICAgICAgICBpZiAoIWNvZGVjT3B0aW9ucy5lbmNvZGluZ05hbWUpXG4gICAgICAgICAgICAgICAgICAgIGNvZGVjT3B0aW9ucy5lbmNvZGluZ05hbWUgPSBlbmM7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZW5jID0gY29kZWNEZWYudHlwZTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6IC8vIENvZGVjIGl0c2VsZi5cbiAgICAgICAgICAgICAgICBpZiAoIWNvZGVjT3B0aW9ucy5lbmNvZGluZ05hbWUpXG4gICAgICAgICAgICAgICAgICAgIGNvZGVjT3B0aW9ucy5lbmNvZGluZ05hbWUgPSBlbmM7XG5cbiAgICAgICAgICAgICAgICAvLyBUaGUgY29kZWMgZnVuY3Rpb24gbXVzdCBsb2FkIGFsbCB0YWJsZXMgYW5kIHJldHVybiBvYmplY3Qgd2l0aCAuZW5jb2RlciBhbmQgLmRlY29kZXIgbWV0aG9kcy5cbiAgICAgICAgICAgICAgICAvLyBJdCdsbCBiZSBjYWxsZWQgb25seSBvbmNlIChmb3IgZWFjaCBkaWZmZXJlbnQgb3B0aW9ucyBvYmplY3QpLlxuICAgICAgICAgICAgICAgIGNvZGVjID0gbmV3IGNvZGVjRGVmKGNvZGVjT3B0aW9ucywgaWNvbnYpO1xuXG4gICAgICAgICAgICAgICAgaWNvbnYuX2NvZGVjRGF0YUNhY2hlW2NvZGVjT3B0aW9ucy5lbmNvZGluZ05hbWVdID0gY29kZWM7IC8vIFNhdmUgaXQgdG8gYmUgcmV1c2VkIGxhdGVyLlxuICAgICAgICAgICAgICAgIHJldHVybiBjb2RlYztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbmNvZGluZyBub3QgcmVjb2duaXplZDogJ1wiICsgZW5jb2RpbmcgKyBcIicgKHNlYXJjaGVkIGFzOiAnXCIrZW5jK1wiJylcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmljb252Ll9jYW5vbmljYWxpemVFbmNvZGluZyA9IGZ1bmN0aW9uKGVuY29kaW5nKSB7XG4gICAgLy8gQ2Fub25pY2FsaXplIGVuY29kaW5nIG5hbWU6IHN0cmlwIGFsbCBub24tYWxwaGFudW1lcmljIGNoYXJzIGFuZCBhcHBlbmRlZCB5ZWFyLlxuICAgIHJldHVybiAoJycrZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvOlxcZHs0fSR8W14wLTlhLXpdL2csIFwiXCIpO1xufVxuXG5pY29udi5nZXRFbmNvZGVyID0gZnVuY3Rpb24gZ2V0RW5jb2RlcihlbmNvZGluZywgb3B0aW9ucykge1xuICAgIHZhciBjb2RlYyA9IGljb252LmdldENvZGVjKGVuY29kaW5nKSxcbiAgICAgICAgZW5jb2RlciA9IG5ldyBjb2RlYy5lbmNvZGVyKG9wdGlvbnMsIGNvZGVjKTtcblxuICAgIGlmIChjb2RlYy5ib21Bd2FyZSAmJiBvcHRpb25zICYmIG9wdGlvbnMuYWRkQk9NKVxuICAgICAgICBlbmNvZGVyID0gbmV3IGJvbUhhbmRsaW5nLlByZXBlbmRCT00oZW5jb2Rlciwgb3B0aW9ucyk7XG5cbiAgICByZXR1cm4gZW5jb2Rlcjtcbn1cblxuaWNvbnYuZ2V0RGVjb2RlciA9IGZ1bmN0aW9uIGdldERlY29kZXIoZW5jb2RpbmcsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29kZWMgPSBpY29udi5nZXRDb2RlYyhlbmNvZGluZyksXG4gICAgICAgIGRlY29kZXIgPSBuZXcgY29kZWMuZGVjb2RlcihvcHRpb25zLCBjb2RlYyk7XG5cbiAgICBpZiAoY29kZWMuYm9tQXdhcmUgJiYgIShvcHRpb25zICYmIG9wdGlvbnMuc3RyaXBCT00gPT09IGZhbHNlKSlcbiAgICAgICAgZGVjb2RlciA9IG5ldyBib21IYW5kbGluZy5TdHJpcEJPTShkZWNvZGVyLCBvcHRpb25zKTtcblxuICAgIHJldHVybiBkZWNvZGVyO1xufVxuXG5cbi8vIExvYWQgZXh0ZW5zaW9ucyBpbiBOb2RlLiBBbGwgb2YgdGhlbSBhcmUgb21pdHRlZCBpbiBCcm93c2VyaWZ5IGJ1aWxkIHZpYSAnYnJvd3NlcicgZmllbGQgaW4gcGFja2FnZS5qc29uLlxudmFyIG5vZGVWZXIgPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy52ZXJzaW9ucyAmJiBwcm9jZXNzLnZlcnNpb25zLm5vZGU7XG5pZiAobm9kZVZlcikge1xuXG4gICAgLy8gTG9hZCBzdHJlYW1pbmcgc3VwcG9ydCBpbiBOb2RlIHYwLjEwK1xuICAgIHZhciBub2RlVmVyQXJyID0gbm9kZVZlci5zcGxpdChcIi5cIikubWFwKE51bWJlcik7XG4gICAgaWYgKG5vZGVWZXJBcnJbMF0gPiAwIHx8IG5vZGVWZXJBcnJbMV0gPj0gMTApIHtcbiAgICAgICAgcmVxdWlyZShcIi4vc3RyZWFtc1wiKShpY29udik7XG4gICAgfVxuXG4gICAgLy8gTG9hZCBOb2RlIHByaW1pdGl2ZSBleHRlbnNpb25zLlxuICAgIHJlcXVpcmUoXCIuL2V4dGVuZC1ub2RlXCIpKGljb252KTtcbn1cblxuaWYgKFwixIBcIiAhPSBcIlxcdTAxMDBcIikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJpY29udi1saXRlIHdhcm5pbmc6IGphdmFzY3JpcHQgZmlsZXMgdXNlIGVuY29kaW5nIGRpZmZlcmVudCBmcm9tIHV0Zi04LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FzaHR1Y2hraW4vaWNvbnYtbGl0ZS93aWtpL0phdmFzY3JpcHQtc291cmNlLWZpbGUtZW5jb2RpbmdzIGZvciBtb3JlIGluZm8uXCIpO1xufVxuIiwiLyohXG4gKiB1bnBpcGVcbiAqIENvcHlyaWdodChjKSAyMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVucGlwZVxuXG4vKipcbiAqIERldGVybWluZSBpZiB0aGVyZSBhcmUgTm9kZS5qcyBwaXBlLWxpa2UgZGF0YSBsaXN0ZW5lcnMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGhhc1BpcGVEYXRhTGlzdGVuZXJzKHN0cmVhbSkge1xuICB2YXIgbGlzdGVuZXJzID0gc3RyZWFtLmxpc3RlbmVycygnZGF0YScpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobGlzdGVuZXJzW2ldLm5hbWUgPT09ICdvbmRhdGEnKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufVxuXG4vKipcbiAqIFVucGlwZSBhIHN0cmVhbSBmcm9tIGFsbCBkZXN0aW5hdGlvbnMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHN0cmVhbVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHVucGlwZShzdHJlYW0pIHtcbiAgaWYgKCFzdHJlYW0pIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzdHJlYW0gaXMgcmVxdWlyZWQnKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBzdHJlYW0udW5waXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gbmV3LXN0eWxlXG4gICAgc3RyZWFtLnVucGlwZSgpXG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBOb2RlLmpzIDAuOCBoYWNrXG4gIGlmICghaGFzUGlwZURhdGFMaXN0ZW5lcnMoc3RyZWFtKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGxpc3RlbmVyXG4gIHZhciBsaXN0ZW5lcnMgPSBzdHJlYW0ubGlzdGVuZXJzKCdjbG9zZScpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXVxuXG4gICAgaWYgKGxpc3RlbmVyLm5hbWUgIT09ICdjbGVhbnVwJyAmJiBsaXN0ZW5lci5uYW1lICE9PSAnb25jbG9zZScpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgLy8gaW52b2tlIHRoZSBsaXN0ZW5lclxuICAgIGxpc3RlbmVyLmNhbGwoc3RyZWFtKVxuICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRhYmxlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbnZhciBFRWxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiAoZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lcnModHlwZSkubGVuZ3RoO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgZGVidWdVdGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGRlYnVnID0gdm9pZCAwO1xuaWYgKGRlYnVnVXRpbCAmJiBkZWJ1Z1V0aWwuZGVidWdsb2cpIHtcbiAgZGVidWcgPSBkZWJ1Z1V0aWwuZGVidWdsb2coJ3N0cmVhbScpO1xufSBlbHNlIHtcbiAgZGVidWcgPSBmdW5jdGlvbiAoKSB7fTtcbn1cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyTGlzdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0Jyk7XG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xudmFyIFN0cmluZ0RlY29kZXI7XG5cbnV0aWwuaW5oZXJpdHMoUmVhZGFibGUsIFN0cmVhbSk7XG5cbnZhciBrUHJveHlFdmVudHMgPSBbJ2Vycm9yJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knLCAncGF1c2UnLCAncmVzdW1lJ107XG5cbmZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4pIHtcbiAgLy8gU2FkbHkgdGhpcyBpcyBub3QgY2FjaGVhYmxlIGFzIHNvbWUgbGlicmFyaWVzIGJ1bmRsZSB0aGVpciBvd25cbiAgLy8gZXZlbnQgZW1pdHRlciBpbXBsZW1lbnRhdGlvbiB3aXRoIHRoZW0uXG4gIGlmICh0eXBlb2YgZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHJldHVybiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lcihldmVudCwgZm4pO1xuXG4gIC8vIFRoaXMgaXMgYSBoYWNrIHRvIG1ha2Ugc3VyZSB0aGF0IG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSBhbnlcbiAgLy8gdXNlcmxhbmQgb25lcy4gIE5FVkVSIERPIFRISVMuIFRoaXMgaXMgaGVyZSBvbmx5IGJlY2F1c2UgdGhpcyBjb2RlIG5lZWRzXG4gIC8vIHRvIGNvbnRpbnVlIHRvIHdvcmsgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBOb2RlLmpzIHRoYXQgZG8gbm90IGluY2x1ZGVcbiAgLy8gdGhlIHByZXBlbmRMaXN0ZW5lcigpIG1ldGhvZC4gVGhlIGdvYWwgaXMgdG8gZXZlbnR1YWxseSByZW1vdmUgdGhpcyBoYWNrLlxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkgZW1pdHRlci5vbihldmVudCwgZm4pO2Vsc2UgaWYgKGlzQXJyYXkoZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkpIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0udW5zaGlmdChmbik7ZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdID0gW2ZuLCBlbWl0dGVyLl9ldmVudHNbZXZlbnRdXTtcbn1cblxuZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG4gIHZhciBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0b1xuICAvLyBtYWtlIGFsbCB0aGUgYnVmZmVyIG1lcmdpbmcgYW5kIGxlbmd0aCBjaGVja3MgZ28gYXdheVxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCBpdCBzdG9wcyBjYWxsaW5nIF9yZWFkKCkgdG8gZmlsbCB0aGUgYnVmZmVyXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgXCJkb24ndCBjYWxsIF9yZWFkIHByZWVtcHRpdmVseSBldmVyXCJcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHJlYWRhYmxlSHdtID0gb3B0aW9ucy5yZWFkYWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAocmVhZGFibGVId20gfHwgcmVhZGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSByZWFkYWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gQSBsaW5rZWQgbGlzdCBpcyB1c2VkIHRvIHN0b3JlIGRhdGEgY2h1bmtzIGluc3RlYWQgb2YgYW4gYXJyYXkgYmVjYXVzZSB0aGVcbiAgLy8gbGlua2VkIGxpc3QgY2FuIHJlbW92ZSBlbGVtZW50cyBmcm9tIHRoZSBiZWdpbm5pbmcgZmFzdGVyIHRoYW5cbiAgLy8gYXJyYXkuc2hpZnQoKVxuICB0aGlzLmJ1ZmZlciA9IG5ldyBCdWZmZXJMaXN0KCk7XG4gIHRoaXMubGVuZ3RoID0gMDtcbiAgdGhpcy5waXBlcyA9IG51bGw7XG4gIHRoaXMucGlwZXNDb3VudCA9IDA7XG4gIHRoaXMuZmxvd2luZyA9IG51bGw7XG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgdGhpcy5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIHRoaXMucmVhZGluZyA9IGZhbHNlO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIGV2ZW50ICdyZWFkYWJsZScvJ2RhdGEnIGlzIGVtaXR0ZWRcbiAgLy8gaW1tZWRpYXRlbHksIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2VcbiAgLy8gYW55IGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHJlYWQgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cbiAgdGhpcy5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlO1xuICB0aGlzLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIHRoZSBudW1iZXIgb2Ygd3JpdGVycyB0aGF0IGFyZSBhd2FpdGluZyBhIGRyYWluIGV2ZW50IGluIC5waXBlKClzXG4gIHRoaXMuYXdhaXREcmFpbiA9IDA7XG5cbiAgLy8gaWYgdHJ1ZSwgYSBtYXliZVJlYWRNb3JlIGhhcyBiZWVuIHNjaGVkdWxlZFxuICB0aGlzLnJlYWRpbmdNb3JlID0gZmFsc2U7XG5cbiAgdGhpcy5kZWNvZGVyID0gbnVsbDtcbiAgdGhpcy5lbmNvZGluZyA9IG51bGw7XG4gIGlmIChvcHRpb25zLmVuY29kaW5nKSB7XG4gICAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zLmVuY29kaW5nKTtcbiAgICB0aGlzLmVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSkgcmV0dXJuIG5ldyBSZWFkYWJsZShvcHRpb25zKTtcblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlID0gbmV3IFJlYWRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5XG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlYWQgPT09ICdmdW5jdGlvbicpIHRoaXMuX3JlYWQgPSBvcHRpb25zLnJlYWQ7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5SZWFkYWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMucHVzaChudWxsKTtcbiAgY2IoZXJyKTtcbn07XG5cbi8vIE1hbnVhbGx5IHNob3ZlIHNvbWV0aGluZyBpbnRvIHRoZSByZWFkKCkgYnVmZmVyLlxuLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsXG4vLyBzaW1pbGFyIHRvIGhvdyBXcml0YWJsZS53cml0ZSgpIHJldHVybnMgdHJ1ZSBpZiB5b3Ugc2hvdWxkXG4vLyB3cml0ZSgpIHNvbWUgbW9yZS5cblJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgc2tpcENodW5rQ2hlY2s7XG5cbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5jb2RpbmcgfHwgc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuICAgICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykge1xuICAgICAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gICAgICAgIGVuY29kaW5nID0gJyc7XG4gICAgICB9XG4gICAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBlbmNvZGluZywgZmFsc2UsIHNraXBDaHVua0NoZWNrKTtcbn07XG5cbi8vIFVuc2hpZnQgc2hvdWxkICphbHdheXMqIGJlIHNvbWV0aGluZyBkaXJlY3RseSBvdXQgb2YgcmVhZCgpXG5SZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xufTtcblxuZnVuY3Rpb24gcmVhZGFibGVBZGRDaHVuayhzdHJlYW0sIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCwgc2tpcENodW5rQ2hlY2spIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKCFza2lwQ2h1bmtDaGVjaykgZXIgPSBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKTtcbiAgICBpZiAoZXIpIHtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsgJiYgY2h1bmsubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgIXN0YXRlLm9iamVjdE1vZGUgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGNodW5rKSAhPT0gQnVmZmVyLnByb3RvdHlwZSkge1xuICAgICAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWRkVG9Gcm9udCkge1xuICAgICAgICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudCcpKTtlbHNlIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuZW5kZWQpIHtcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIWVuY29kaW5nKSB7XG4gICAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICAgICAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuay5sZW5ndGggIT09IDApIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7ZWxzZSBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFhZGRUb0Zyb250KSB7XG4gICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5lZWRNb3JlRGF0YShzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBhZGRUb0Zyb250KSB7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuc3luYykge1xuICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgY2h1bmspO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9IGVsc2Uge1xuICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGluZm8uXG4gICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIGlmIChhZGRUb0Zyb250KSBzdGF0ZS5idWZmZXIudW5zaGlmdChjaHVuayk7ZWxzZSBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG5cbiAgICBpZiAoc3RhdGUubmVlZFJlYWRhYmxlKSBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbiAgfVxuICBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKSB7XG4gIHZhciBlcjtcbiAgaWYgKCFfaXNVaW50OEFycmF5KGNodW5rKSAmJiB0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICByZXR1cm4gZXI7XG59XG5cbi8vIGlmIGl0J3MgcGFzdCB0aGUgaGlnaCB3YXRlciBtYXJrLCB3ZSBjYW4gcHVzaCBpbiBzb21lIG1vcmUuXG4vLyBBbHNvLCBpZiB3ZSBoYXZlIG5vIGRhdGEgeWV0LCB3ZSBjYW4gc3RhbmQgc29tZVxuLy8gbW9yZSBieXRlcy4gIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsXG4vLyBzdWNoIGFzIHRoZSByZXBsLiAgQWxzbywgaWYgdGhlIHB1c2goKSB0cmlnZ2VyZWQgYVxuLy8gcmVhZGFibGUgZXZlbnQsIGFuZCB0aGUgdXNlciBjYWxsZWQgcmVhZChsYXJnZU51bWJlcikgc3VjaCB0aGF0XG4vLyBuZWVkUmVhZGFibGUgd2FzIHNldCwgdGhlbiB3ZSBvdWdodCB0byBwdXNoIG1vcmUsIHNvIHRoYXQgYW5vdGhlclxuLy8gJ3JlYWRhYmxlJyBldmVudCB3aWxsIGJlIHRyaWdnZXJlZC5cbmZ1bmN0aW9uIG5lZWRNb3JlRGF0YShzdGF0ZSkge1xuICByZXR1cm4gIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5uZWVkUmVhZGFibGUgfHwgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5sZW5ndGggPT09IDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPT09IGZhbHNlO1xufTtcblxuLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5SZWFkYWJsZS5wcm90b3R5cGUuc2V0RW5jb2RpbmcgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYyk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2RpbmcgPSBlbmM7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDhNQlxudmFyIE1BWF9IV00gPSAweDgwMDAwMDtcbmZ1bmN0aW9uIGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pIHtcbiAgaWYgKG4gPj0gTUFYX0hXTSkge1xuICAgIG4gPSBNQVhfSFdNO1xuICB9IGVsc2Uge1xuICAgIC8vIEdldCB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIDIgdG8gcHJldmVudCBpbmNyZWFzaW5nIGh3bSBleGNlc3NpdmVseSBpblxuICAgIC8vIHRpbnkgYW1vdW50c1xuICAgIG4tLTtcbiAgICBuIHw9IG4gPj4+IDE7XG4gICAgbiB8PSBuID4+PiAyO1xuICAgIG4gfD0gbiA+Pj4gNDtcbiAgICBuIHw9IG4gPj4+IDg7XG4gICAgbiB8PSBuID4+PiAxNjtcbiAgICBuKys7XG4gIH1cbiAgcmV0dXJuIG47XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkge1xuICBpZiAobiA8PSAwIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgcmV0dXJuIDA7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXR1cm4gMTtcbiAgaWYgKG4gIT09IG4pIHtcbiAgICAvLyBPbmx5IGZsb3cgb25lIGJ1ZmZlciBhdCBhIHRpbWVcbiAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGgpIHJldHVybiBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhLmxlbmd0aDtlbHNlIHJldHVybiBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgLy8gSWYgd2UncmUgYXNraW5nIGZvciBtb3JlIHRoYW4gdGhlIGN1cnJlbnQgaHdtLCB0aGVuIHJhaXNlIHRoZSBod20uXG4gIGlmIChuID4gc3RhdGUuaGlnaFdhdGVyTWFyaykgc3RhdGUuaGlnaFdhdGVyTWFyayA9IGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pO1xuICBpZiAobiA8PSBzdGF0ZS5sZW5ndGgpIHJldHVybiBuO1xuICAvLyBEb24ndCBoYXZlIGVub3VnaFxuICBpZiAoIXN0YXRlLmVuZGVkKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gc3RhdGUubGVuZ3RoO1xufVxuXG4vLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LlxuUmVhZGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAobikge1xuICBkZWJ1ZygncmVhZCcsIG4pO1xuICBuID0gcGFyc2VJbnQobiwgMTApO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgbk9yaWcgPSBuO1xuXG4gIGlmIChuICE9PSAwKSBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcblxuICAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhIGJ1bmNoIG9mIGRhdGEgaW4gdGhlIGJ1ZmZlciwgdGhlbiBqdXN0IHRyaWdnZXJcbiAgLy8gdGhlICdyZWFkYWJsZScgZXZlbnQgYW5kIG1vdmUgb24uXG4gIGlmIChuID09PSAwICYmIHN0YXRlLm5lZWRSZWFkYWJsZSAmJiAoc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUuZW5kZWQpKSB7XG4gICAgZGVidWcoJ3JlYWQ6IGVtaXRSZWFkYWJsZScsIHN0YXRlLmxlbmd0aCwgc3RhdGUuZW5kZWQpO1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO2Vsc2UgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbiA9IGhvd011Y2hUb1JlYWQobiwgc3RhdGUpO1xuXG4gIC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIEFsbCB0aGUgYWN0dWFsIGNodW5rIGdlbmVyYXRpb24gbG9naWMgbmVlZHMgdG8gYmVcbiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluXG4gIC8vIHN5bnRoZXRpYyBzdHJlYW0gY2FzZXMsIHN1Y2ggYXMgcGFzc3Rocm91Z2ggc3RyZWFtcywgX3JlYWRcbiAgLy8gbWF5IGJlIGEgY29tcGxldGVseSBzeW5jaHJvbm91cyBvcGVyYXRpb24gd2hpY2ggbWF5IGNoYW5nZVxuICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlblxuICAvLyBiZWZvcmUgdGhlcmUgd2FzICpub3QqIGVub3VnaC5cbiAgLy9cbiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6XG4gIC8vIDEuIEZpZ3VyZSBvdXQgd2hhdCB0aGUgc3RhdGUgb2YgdGhpbmdzIHdpbGwgYmUgYWZ0ZXIgd2UgZG9cbiAgLy8gYSByZWFkIGZyb20gdGhlIGJ1ZmZlci5cbiAgLy9cbiAgLy8gMi4gSWYgdGhhdCByZXN1bHRpbmcgc3RhdGUgd2lsbCB0cmlnZ2VyIGEgX3JlYWQsIHRoZW4gY2FsbCBfcmVhZC5cbiAgLy8gTm90ZSB0aGF0IHRoaXMgbWF5IGJlIGFzeW5jaHJvbm91cywgb3Igc3luY2hyb25vdXMuICBZZXMsIGl0IGlzXG4gIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhblxuICAvLyB0aGF0IHRoZSBSZWFkYWJsZSBjbGFzcyBzaG91bGQgYmVoYXZlIGltcHJvcGVybHksIGFzIHN0cmVhbXMgYXJlXG4gIC8vIGRlc2lnbmVkIHRvIGJlIHN5bmMvYXN5bmMgYWdub3N0aWMuXG4gIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbFxuICAvLyBoYXMgcmV0dXJuZWQgeWV0KSwgc28gdGhhdCB3ZSBrbm93IHdoZXRoZXIgb3Igbm90IGl0J3Mgc2FmZSB0byBlbWl0XG4gIC8vICdyZWFkYWJsZScgZXRjLlxuICAvL1xuICAvLyAzLiBBY3R1YWxseSBwdWxsIHRoZSByZXF1ZXN0ZWQgY2h1bmtzIG91dCBvZiB0aGUgYnVmZmVyIGFuZCByZXR1cm4uXG5cbiAgLy8gaWYgd2UgbmVlZCBhIHJlYWRhYmxlIGV2ZW50LCB0aGVuIHdlIG5lZWQgdG8gZG8gc29tZSByZWFkaW5nLlxuICB2YXIgZG9SZWFkID0gc3RhdGUubmVlZFJlYWRhYmxlO1xuICBkZWJ1ZygnbmVlZCByZWFkYWJsZScsIGRvUmVhZCk7XG5cbiAgLy8gaWYgd2UgY3VycmVudGx5IGhhdmUgbGVzcyB0aGFuIHRoZSBoaWdoV2F0ZXJNYXJrLCB0aGVuIGFsc28gcmVhZCBzb21lXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkb1JlYWQgPSB0cnVlO1xuICAgIGRlYnVnKCdsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyaycsIGRvUmVhZCk7XG4gIH1cblxuICAvLyBob3dldmVyLCBpZiB3ZSd2ZSBlbmRlZCwgdGhlbiB0aGVyZSdzIG5vIHBvaW50LCBhbmQgaWYgd2UncmUgYWxyZWFkeVxuICAvLyByZWFkaW5nLCB0aGVuIGl0J3MgdW5uZWNlc3NhcnkuXG4gIGlmIChzdGF0ZS5lbmRlZCB8fCBzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZG9SZWFkID0gZmFsc2U7XG4gICAgZGVidWcoJ3JlYWRpbmcgb3IgZW5kZWQnLCBkb1JlYWQpO1xuICB9IGVsc2UgaWYgKGRvUmVhZCkge1xuICAgIGRlYnVnKCdkbyByZWFkJyk7XG4gICAgc3RhdGUucmVhZGluZyA9IHRydWU7XG4gICAgc3RhdGUuc3luYyA9IHRydWU7XG4gICAgLy8gaWYgdGhlIGxlbmd0aCBpcyBjdXJyZW50bHkgemVybywgdGhlbiB3ZSAqbmVlZCogYSByZWFkYWJsZSBldmVudC5cbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2RcbiAgICB0aGlzLl9yZWFkKHN0YXRlLmhpZ2hXYXRlck1hcmspO1xuICAgIHN0YXRlLnN5bmMgPSBmYWxzZTtcbiAgICAvLyBJZiBfcmVhZCBwdXNoZWQgZGF0YSBzeW5jaHJvbm91c2x5LCB0aGVuIGByZWFkaW5nYCB3aWxsIGJlIGZhbHNlLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHJlLWV2YWx1YXRlIGhvdyBtdWNoIGRhdGEgd2UgY2FuIHJldHVybiB0byB0aGUgdXNlci5cbiAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZSk7XG4gIH1cblxuICB2YXIgcmV0O1xuICBpZiAobiA+IDApIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtlbHNlIHJldCA9IG51bGw7XG5cbiAgaWYgKHJldCA9PT0gbnVsbCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgbiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUubGVuZ3RoIC09IG47XG4gIH1cblxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSWYgd2UgaGF2ZSBub3RoaW5nIGluIHRoZSBidWZmZXIsIHRoZW4gd2Ugd2FudCB0byBrbm93XG4gICAgLy8gYXMgc29vbiBhcyB3ZSAqZG8qIGdldCBzb21ldGhpbmcgaW50byB0aGUgYnVmZmVyLlxuICAgIGlmICghc3RhdGUuZW5kZWQpIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgICAvLyBJZiB3ZSB0cmllZCB0byByZWFkKCkgcGFzdCB0aGUgRU9GLCB0aGVuIGVtaXQgZW5kIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgfVxuXG4gIGlmIChyZXQgIT09IG51bGwpIHRoaXMuZW1pdCgnZGF0YScsIHJldCk7XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUuZW5kZWQpIHJldHVybjtcbiAgaWYgKHN0YXRlLmRlY29kZXIpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuXG4gIC8vIGVtaXQgJ3JlYWRhYmxlJyBub3cgdG8gbWFrZSBzdXJlIGl0IGdldHMgcGlja2VkIHVwLlxuICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbn1cblxuLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcbi8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7XG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUuc3luYykgcG5hLm5leHRUaWNrKGVtaXRSZWFkYWJsZV8sIHN0cmVhbSk7ZWxzZSBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcbiAgZGVidWcoJ2VtaXQgcmVhZGFibGUnKTtcbiAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7XG4gIGZsb3coc3RyZWFtKTtcbn1cblxuLy8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcbi8vIGFuZCBjYWxsZWQgcmVhZCgpIHRvIGNvbnN1bWUgc29tZSBkYXRhLiAgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWRcbi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmXG4vLyBpdCdzIGluIHByb2dyZXNzLlxuLy8gSG93ZXZlciwgaWYgd2UncmUgbm90IGVuZGVkLCBvciByZWFkaW5nLCBhbmQgdGhlIGxlbmd0aCA8IGh3bSxcbi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nTW9yZSkge1xuICAgIHN0YXRlLnJlYWRpbmdNb3JlID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2sobWF5YmVSZWFkTW9yZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJiBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZGVidWcoJ21heWJlUmVhZE1vcmUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKVxuICAgICAgLy8gZGlkbid0IGdldCBhbnkgZGF0YSwgc3RvcCBzcGlubmluZy5cbiAgICAgIGJyZWFrO2Vsc2UgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB9XG4gIHN0YXRlLnJlYWRpbmdNb3JlID0gZmFsc2U7XG59XG5cbi8vIGFic3RyYWN0IG1ldGhvZC4gIHRvIGJlIG92ZXJyaWRkZW4gaW4gc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vIGNhbGwgY2IoZXIsIGRhdGEpIHdoZXJlIGRhdGEgaXMgPD0gbiBpbiBsZW5ndGguXG4vLyBmb3IgdmlydHVhbCAobm9uLXN0cmluZywgbm9uLWJ1ZmZlcikgc3RyZWFtcywgXCJsZW5ndGhcIiBpcyBzb21ld2hhdFxuLy8gYXJiaXRyYXJ5LCBhbmQgcGVyaGFwcyBub3QgdmVyeSBtZWFuaW5nZnVsLlxuUmVhZGFibGUucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignX3JlYWQoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykge1xuICB2YXIgc3JjID0gdGhpcztcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBzdGF0ZS5waXBlcyA9IFtzdGF0ZS5waXBlcywgZGVzdF07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgc3RhdGUucGlwZXMucHVzaChkZXN0KTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHN0YXRlLnBpcGVzQ291bnQgKz0gMTtcbiAgZGVidWcoJ3BpcGUgY291bnQ9JWQgb3B0cz0laicsIHN0YXRlLnBpcGVzQ291bnQsIHBpcGVPcHRzKTtcblxuICB2YXIgZG9FbmQgPSAoIXBpcGVPcHRzIHx8IHBpcGVPcHRzLmVuZCAhPT0gZmFsc2UpICYmIGRlc3QgIT09IHByb2Nlc3Muc3Rkb3V0ICYmIGRlc3QgIT09IHByb2Nlc3Muc3RkZXJyO1xuXG4gIHZhciBlbmRGbiA9IGRvRW5kID8gb25lbmQgOiB1bnBpcGU7XG4gIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBwbmEubmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTtcblxuICBkZXN0Lm9uKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlLCB1bnBpcGVJbmZvKSB7XG4gICAgZGVidWcoJ29udW5waXBlJyk7XG4gICAgaWYgKHJlYWRhYmxlID09PSBzcmMpIHtcbiAgICAgIGlmICh1bnBpcGVJbmZvICYmIHVucGlwZUluZm8uaGFzVW5waXBlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdW5waXBlSW5mby5oYXNVbnBpcGVkID0gdHJ1ZTtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGRlYnVnKCdvbmVuZCcpO1xuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuICAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cbiAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIHZhciBjbGVhbmVkVXAgPSBmYWxzZTtcbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBkZWJ1ZygnY2xlYW51cCcpO1xuICAgIC8vIGNsZWFudXAgZXZlbnQgaGFuZGxlcnMgb25jZSB0aGUgcGlwZSBpcyBicm9rZW5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcigndW5waXBlJywgb251bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgdW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuXG4gICAgY2xlYW5lZFVwID0gdHJ1ZTtcblxuICAgIC8vIGlmIHRoZSByZWFkZXIgaXMgd2FpdGluZyBmb3IgYSBkcmFpbiBldmVudCBmcm9tIHRoaXNcbiAgICAvLyBzcGVjaWZpYyB3cml0ZXIsIHRoZW4gaXQgd291bGQgY2F1c2UgaXQgdG8gbmV2ZXIgc3RhcnRcbiAgICAvLyBmbG93aW5nIGFnYWluLlxuICAgIC8vIFNvLCBpZiB0aGlzIGlzIGF3YWl0aW5nIGEgZHJhaW4sIHRoZW4gd2UganVzdCBjYWxsIGl0IG5vdy5cbiAgICAvLyBJZiB3ZSBkb24ndCBrbm93LCB0aGVuIGFzc3VtZSB0aGF0IHdlIGFyZSB3YWl0aW5nIGZvciBvbmUuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gJiYgKCFkZXN0Ll93cml0YWJsZVN0YXRlIHx8IGRlc3QuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSkgb25kcmFpbigpO1xuICB9XG5cbiAgLy8gSWYgdGhlIHVzZXIgcHVzaGVzIG1vcmUgZGF0YSB3aGlsZSB3ZSdyZSB3cml0aW5nIHRvIGRlc3QgdGhlbiB3ZSdsbCBlbmQgdXBcbiAgLy8gaW4gb25kYXRhIGFnYWluLiBIb3dldmVyLCB3ZSBvbmx5IHdhbnQgdG8gaW5jcmVhc2UgYXdhaXREcmFpbiBvbmNlIGJlY2F1c2VcbiAgLy8gZGVzdCB3aWxsIG9ubHkgZW1pdCBvbmUgJ2RyYWluJyBldmVudCBmb3IgdGhlIG11bHRpcGxlIHdyaXRlcy5cbiAgLy8gPT4gSW50cm9kdWNlIGEgZ3VhcmQgb24gaW5jcmVhc2luZyBhd2FpdERyYWluLlxuICB2YXIgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICBzcmMub24oJ2RhdGEnLCBvbmRhdGEpO1xuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBkZWJ1Zygnb25kYXRhJyk7XG4gICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICAgIHZhciByZXQgPSBkZXN0LndyaXRlKGNodW5rKTtcbiAgICBpZiAoZmFsc2UgPT09IHJldCAmJiAhaW5jcmVhc2VkQXdhaXREcmFpbikge1xuICAgICAgLy8gSWYgdGhlIHVzZXIgdW5waXBlZCBkdXJpbmcgYGRlc3Qud3JpdGUoKWAsIGl0IGlzIHBvc3NpYmxlXG4gICAgICAvLyB0byBnZXQgc3R1Y2sgaW4gYSBwZXJtYW5lbnRseSBwYXVzZWQgc3RhdGUgaWYgdGhhdCB3cml0ZVxuICAgICAgLy8gYWxzbyByZXR1cm5lZCBmYWxzZS5cbiAgICAgIC8vID0+IENoZWNrIHdoZXRoZXIgYGRlc3RgIGlzIHN0aWxsIGEgcGlwaW5nIGRlc3RpbmF0aW9uLlxuICAgICAgaWYgKChzdGF0ZS5waXBlc0NvdW50ID09PSAxICYmIHN0YXRlLnBpcGVzID09PSBkZXN0IHx8IHN0YXRlLnBpcGVzQ291bnQgPiAxICYmIGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpICE9PSAtMSkgJiYgIWNsZWFuZWRVcCkge1xuICAgICAgICBkZWJ1ZygnZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlJywgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4pO1xuICAgICAgICBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbisrO1xuICAgICAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHNyYy5wYXVzZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBkZXN0IGhhcyBhbiBlcnJvciwgdGhlbiBzdG9wIHBpcGluZyBpbnRvIGl0LlxuICAvLyBob3dldmVyLCBkb24ndCBzdXBwcmVzcyB0aGUgdGhyb3dpbmcgYmVoYXZpb3IgZm9yIHRoaXMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTtcbiAgICB1bnBpcGUoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGRlc3QuZW1pdCgnZXJyb3InLCBlcik7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIHVzZXJsYW5kIG9uZXMuXG4gIHByZXBlbmRMaXN0ZW5lcihkZXN0LCAnZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIGRlYnVnKCdvbmZpbmlzaCcpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cbiAgZnVuY3Rpb24gdW5waXBlKCkge1xuICAgIGRlYnVnKCd1bnBpcGUnKTtcbiAgICBzcmMudW5waXBlKGRlc3QpO1xuICB9XG5cbiAgLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cbiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTtcblxuICAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpO1xuICAgIHNyYy5yZXN1bWUoKTtcbiAgfVxuXG4gIHJldHVybiBkZXN0O1xufTtcblxuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXRlID0gc3JjLl9yZWFkYWJsZVN0YXRlO1xuICAgIGRlYnVnKCdwaXBlT25EcmFpbicsIHN0YXRlLmF3YWl0RHJhaW4pO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluKSBzdGF0ZS5hd2FpdERyYWluLS07XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgRUVsaXN0ZW5lckNvdW50KHNyYywgJ2RhdGEnKSkge1xuICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgICBmbG93KHNyYyk7XG4gICAgfVxuICB9O1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHVucGlwZUluZm8gPSB7IGhhc1VucGlwZWQ6IGZhbHNlIH07XG5cbiAgLy8gaWYgd2UncmUgbm90IHBpcGluZyBhbnl3aGVyZSwgdGhlbiBkbyBub3RoaW5nLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMCkgcmV0dXJuIHRoaXM7XG5cbiAgLy8ganVzdCBvbmUgZGVzdGluYXRpb24uICBtb3N0IGNvbW1vbiBjYXNlLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkge1xuICAgIC8vIHBhc3NlZCBpbiBvbmUsIGJ1dCBpdCdzIG5vdCB0aGUgcmlnaHQgb25lLlxuICAgIGlmIChkZXN0ICYmIGRlc3QgIT09IHN0YXRlLnBpcGVzKSByZXR1cm4gdGhpcztcblxuICAgIGlmICghZGVzdCkgZGVzdCA9IHN0YXRlLnBpcGVzO1xuXG4gICAgLy8gZ290IGEgbWF0Y2guXG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICBpZiAoZGVzdCkgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHNsb3cgY2FzZS4gbXVsdGlwbGUgcGlwZSBkZXN0aW5hdGlvbnMuXG5cbiAgaWYgKCFkZXN0KSB7XG4gICAgLy8gcmVtb3ZlIGFsbC5cbiAgICB2YXIgZGVzdHMgPSBzdGF0ZS5waXBlcztcbiAgICB2YXIgbGVuID0gc3RhdGUucGlwZXNDb3VudDtcbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdHNbaV0uZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgfXJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gdHJ5IHRvIGZpbmQgdGhlIHJpZ2h0IG9uZS5cbiAgdmFyIGluZGV4ID0gaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCk7XG4gIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiB0aGlzO1xuXG4gIHN0YXRlLnBpcGVzLnNwbGljZShpbmRleCwgMSk7XG4gIHN0YXRlLnBpcGVzQ291bnQgLT0gMTtcbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07XG5cbiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHNldCB1cCBkYXRhIGV2ZW50cyBpZiB0aGV5IGFyZSBhc2tlZCBmb3Jcbi8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nXG5SZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcblxuICBpZiAoZXYgPT09ICdkYXRhJykge1xuICAgIC8vIFN0YXJ0IGZsb3dpbmcgb24gbmV4dCB0aWNrIGlmIHN0cmVhbSBpc24ndCBleHBsaWNpdGx5IHBhdXNlZFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgIT09IGZhbHNlKSB0aGlzLnJlc3VtZSgpO1xuICB9IGVsc2UgaWYgKGV2ID09PSAncmVhZGFibGUnKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgIXN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nKSB7XG4gICAgICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmICghc3RhdGUucmVhZGluZykge1xuICAgICAgICBwbmEubmV4dFRpY2soblJlYWRpbmdOZXh0VGljaywgdGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmxlbmd0aCkge1xuICAgICAgICBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5SZWFkYWJsZS5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBSZWFkYWJsZS5wcm90b3R5cGUub247XG5cbmZ1bmN0aW9uIG5SZWFkaW5nTmV4dFRpY2soc2VsZikge1xuICBkZWJ1ZygncmVhZGFibGUgbmV4dHRpY2sgcmVhZCAwJyk7XG4gIHNlbGYucmVhZCgwKTtcbn1cblxuLy8gcGF1c2UoKSBhbmQgcmVzdW1lKCkgYXJlIHJlbW5hbnRzIG9mIHRoZSBsZWdhY3kgcmVhZGFibGUgc3RyZWFtIEFQSVxuLy8gSWYgdGhlIHVzZXIgdXNlcyB0aGVtLCB0aGVuIHN3aXRjaCBpbnRvIG9sZCBtb2RlLlxuUmVhZGFibGUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZScpO1xuICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgIHJlc3VtZSh0aGlzLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiByZXN1bWUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkge1xuICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKHJlc3VtZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9XG5cbiAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gIHN0YXRlLmF3YWl0RHJhaW4gPSAwO1xuICBzdHJlYW0uZW1pdCgncmVzdW1lJyk7XG4gIGZsb3coc3RyZWFtKTtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLnJlYWRpbmcpIHN0cmVhbS5yZWFkKDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdjYWxsIHBhdXNlIGZsb3dpbmc9JWonLCB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpO1xuICBpZiAoZmFsc2UgIT09IHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwYXVzZScpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZsb3coc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2Zsb3cnLCBzdGF0ZS5mbG93aW5nKTtcbiAgd2hpbGUgKHN0YXRlLmZsb3dpbmcgJiYgc3RyZWFtLnJlYWQoKSAhPT0gbnVsbCkge31cbn1cblxuLy8gd3JhcCBhbiBvbGQtc3R5bGUgc3RyZWFtIGFzIHRoZSBhc3luYyBkYXRhIHNvdXJjZS5cbi8vIFRoaXMgaXMgKm5vdCogcGFydCBvZiB0aGUgcmVhZGFibGUgc3RyZWFtIGludGVyZmFjZS5cbi8vIEl0IGlzIGFuIHVnbHkgdW5mb3J0dW5hdGUgbWVzcyBvZiBoaXN0b3J5LlxuUmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuXG4gIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cmFwcGVkIGVuZCcpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIF90aGlzLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIF90aGlzLnB1c2gobnVsbCk7XG4gIH0pO1xuXG4gIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcblxuICAgIC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZVxuICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdW5kZWZpbmVkKSkgcmV0dXJuO2Vsc2UgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpIHJldHVybjtcblxuICAgIHZhciByZXQgPSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICBpZiAoIXJldCkge1xuICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5wYXVzZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gcHJveHkgYWxsIHRoZSBvdGhlciBtZXRob2RzLlxuICAvLyBpbXBvcnRhbnQgd2hlbiB3cmFwcGluZyBmaWx0ZXJzIGFuZCBkdXBsZXhlcy5cbiAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHtcbiAgICBpZiAodGhpc1tpXSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzdHJlYW1baV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmVhbVttZXRob2RdLmFwcGx5KHN0cmVhbSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH0oaSk7XG4gICAgfVxuICB9XG5cbiAgLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLlxuICBmb3IgKHZhciBuID0gMDsgbiA8IGtQcm94eUV2ZW50cy5sZW5ndGg7IG4rKykge1xuICAgIHN0cmVhbS5vbihrUHJveHlFdmVudHNbbl0sIHRoaXMuZW1pdC5iaW5kKHRoaXMsIGtQcm94eUV2ZW50c1tuXSkpO1xuICB9XG5cbiAgLy8gd2hlbiB3ZSB0cnkgdG8gY29uc3VtZSBzb21lIG1vcmUgYnl0ZXMsIHNpbXBseSB1bnBhdXNlIHRoZVxuICAvLyB1bmRlcmx5aW5nIHN0cmVhbS5cbiAgdGhpcy5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTtcbiAgICBpZiAocGF1c2VkKSB7XG4gICAgICBwYXVzZWQgPSBmYWxzZTtcbiAgICAgIHN0cmVhbS5yZXN1bWUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7XG5cbi8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy5cbi8vIExlbmd0aCBpcyB0aGUgY29tYmluZWQgbGVuZ3RocyBvZiBhbGwgdGhlIGJ1ZmZlcnMgaW4gdGhlIGxpc3QuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0KG4sIHN0YXRlKSB7XG4gIC8vIG5vdGhpbmcgYnVmZmVyZWRcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHJldDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldCA9IHN0YXRlLmJ1ZmZlci5zaGlmdCgpO2Vsc2UgaWYgKCFuIHx8IG4gPj0gc3RhdGUubGVuZ3RoKSB7XG4gICAgLy8gcmVhZCBpdCBhbGwsIHRydW5jYXRlIHRoZSBsaXN0XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIHJldCA9IHN0YXRlLmJ1ZmZlci5qb2luKCcnKTtlbHNlIGlmIChzdGF0ZS5idWZmZXIubGVuZ3RoID09PSAxKSByZXQgPSBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhO2Vsc2UgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbmNhdChzdGF0ZS5sZW5ndGgpO1xuICAgIHN0YXRlLmJ1ZmZlci5jbGVhcigpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlYWQgcGFydCBvZiBsaXN0XG4gICAgcmV0ID0gZnJvbUxpc3RQYXJ0aWFsKG4sIHN0YXRlLmJ1ZmZlciwgc3RhdGUuZGVjb2Rlcik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBFeHRyYWN0cyBvbmx5IGVub3VnaCBidWZmZXJlZCBkYXRhIHRvIHNhdGlzZnkgdGhlIGFtb3VudCByZXF1ZXN0ZWQuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0UGFydGlhbChuLCBsaXN0LCBoYXNTdHJpbmdzKSB7XG4gIHZhciByZXQ7XG4gIGlmIChuIDwgbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gc2xpY2UgaXMgdGhlIHNhbWUgZm9yIGJ1ZmZlcnMgYW5kIHN0cmluZ3NcbiAgICByZXQgPSBsaXN0LmhlYWQuZGF0YS5zbGljZSgwLCBuKTtcbiAgICBsaXN0LmhlYWQuZGF0YSA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKG4pO1xuICB9IGVsc2UgaWYgKG4gPT09IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIGZpcnN0IGNodW5rIGlzIGEgcGVyZmVjdCBtYXRjaFxuICAgIHJldCA9IGxpc3Quc2hpZnQoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZXN1bHQgc3BhbnMgbW9yZSB0aGFuIG9uZSBidWZmZXJcbiAgICByZXQgPSBoYXNTdHJpbmdzID8gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkgOiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGNoYXJhY3RlcnMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhXG4vLyBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIHtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgdmFyIHJldCA9IHAuZGF0YTtcbiAgbiAtPSByZXQubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBzdHIgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IHN0ci5sZW5ndGggPyBzdHIubGVuZ3RoIDogbjtcbiAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHJldCArPSBzdHI7ZWxzZSByZXQgKz0gc3RyLnNsaWNlKDAsIG4pO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBzdHIuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YSBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpIHtcbiAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuKTtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgcC5kYXRhLmNvcHkocmV0KTtcbiAgbiAtPSBwLmRhdGEubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBidWYgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IGJ1Zi5sZW5ndGggPyBidWYubGVuZ3RoIDogbjtcbiAgICBidWYuY29weShyZXQsIHJldC5sZW5ndGggLSBuLCAwLCBuYik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBidWYubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IGJ1Zi5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgYmVmb3JlIGNvbnN1bWluZyBhbGwgdGhlIGJ5dGVzLCB0aGVuIHRoYXQgaXMgYVxuICAvLyBidWcgaW4gbm9kZS4gIFNob3VsZCBuZXZlciBoYXBwZW4uXG4gIGlmIChzdGF0ZS5sZW5ndGggPiAwKSB0aHJvdyBuZXcgRXJyb3IoJ1wiZW5kUmVhZGFibGUoKVwiIGNhbGxlZCBvbiBub24tZW1wdHkgc3RyZWFtJyk7XG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhlbmRSZWFkYWJsZU5ULCBzdGF0ZSwgc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZU5UKHN0YXRlLCBzdHJlYW0pIHtcbiAgLy8gQ2hlY2sgdGhhdCB3ZSBkaWRuJ3QgZ2V0IG9uZSBsYXN0IHVuc2hpZnQuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiBzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICBzdGF0ZS5lbmRFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZW5kJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5kZXhPZih4cywgeCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh4c1tpXSA9PT0geCkgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vLyB1bmRvY3VtZW50ZWQgY2IoKSBBUEksIG5lZWRlZCBmb3IgY29yZSwgbm90IGZvciBwdWJsaWMgQVBJXG5mdW5jdGlvbiBkZXN0cm95KGVyciwgY2IpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgcmVhZGFibGVEZXN0cm95ZWQgPSB0aGlzLl9yZWFkYWJsZVN0YXRlICYmIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB2YXIgd3JpdGFibGVEZXN0cm95ZWQgPSB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuXG4gIGlmIChyZWFkYWJsZURlc3Ryb3llZCB8fCB3cml0YWJsZURlc3Ryb3llZCkge1xuICAgIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9IGVsc2UgaWYgKGVyciAmJiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUgfHwgIXRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSkge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHdlIHNldCBkZXN0cm95ZWQgdG8gdHJ1ZSBiZWZvcmUgZmlyaW5nIGVycm9yIGNhbGxiYWNrcyBpbiBvcmRlclxuICAvLyB0byBtYWtlIGl0IHJlLWVudHJhbmNlIHNhZmUgaW4gY2FzZSBkZXN0cm95KCkgaXMgY2FsbGVkIHdpdGhpbiBjYWxsYmFja3NcblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGlmIHRoaXMgaXMgYSBkdXBsZXggc3RyZWFtIG1hcmsgdGhlIHdyaXRhYmxlIHBhcnQgYXMgZGVzdHJveWVkIGFzIHdlbGxcbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICB0aGlzLl9kZXN0cm95KGVyciB8fCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKCFjYiAmJiBlcnIpIHtcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgX3RoaXMsIGVycik7XG4gICAgICBpZiAoX3RoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgICAgX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHVuZGVzdHJveSgpIHtcbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0RXJyb3JOVChzZWxmLCBlcnIpIHtcbiAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZXN0cm95OiBkZXN0cm95LFxuICB1bmRlc3Ryb3k6IHVuZGVzdHJveVxufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkb1xuLy8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGEuICBTb21ldGltZXMgaXQncyBjYWxsZWQgYSBcImZpbHRlclwiLFxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcbi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGRcbi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLilcbi8vXG4vLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhXG4vLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSxcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLlxuLy9cbi8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcbi8vXG4vLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcbi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXNcbi8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWxcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cbi8vXG4vLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlblxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcbi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZVxuLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3Rcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcbi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsXG4vLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueVxuLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpblxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG4vLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluXG4vLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGxcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG4vLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LlxuLy9cbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcbi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWxcbi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5mdW5jdGlvbiBhZnRlclRyYW5zZm9ybShlciwgZGF0YSkge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3dyaXRlIGNhbGxiYWNrIGNhbGxlZCBtdWx0aXBsZSB0aW1lcycpKTtcbiAgfVxuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcblxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICB0aGlzLnB1c2goZGF0YSk7XG5cbiAgY2IoZXIpO1xuXG4gIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcbiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSB7XG4gICAgYWZ0ZXJUcmFuc2Zvcm06IGFmdGVyVHJhbnNmb3JtLmJpbmQodGhpcyksXG4gICAgbmVlZFRyYW5zZm9ybTogZmFsc2UsXG4gICAgdHJhbnNmb3JtaW5nOiBmYWxzZSxcbiAgICB3cml0ZWNiOiBudWxsLFxuICAgIHdyaXRlY2h1bms6IG51bGwsXG4gICAgd3JpdGVlbmNvZGluZzogbnVsbFxuICB9O1xuXG4gIC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgLy8gd2UgaGF2ZSBpbXBsZW1lbnRlZCB0aGUgX3JlYWQgbWV0aG9kLCBhbmQgZG9uZSB0aGUgb3RoZXIgdGhpbmdzXG4gIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGVcbiAgLy8gc3luYyBndWFyZCBmbGFnLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMuZmx1c2g7XG4gIH1cblxuICAvLyBXaGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuXG4gIHRoaXMub24oJ3ByZWZpbmlzaCcsIHByZWZpbmlzaCk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaCgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5fZmx1c2goZnVuY3Rpb24gKGVyLCBkYXRhKSB7XG4gICAgICBkb25lKF90aGlzLCBlciwgZGF0YSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZG9uZSh0aGlzLCBudWxsLCBudWxsKTtcbiAgfVxufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgcmV0dXJuIER1cGxleC5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XG59O1xuXG4vLyBUaGlzIGlzIHRoZSBwYXJ0IHdoZXJlIHlvdSBkbyBzdHVmZiFcbi8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gaW4gaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vICdjaHVuaycgaXMgYW4gaW5wdXQgY2h1bmsuXG4vL1xuLy8gQ2FsbCBgcHVzaChuZXdDaHVuaylgIHRvIHBhc3MgYWxvbmcgdHJhbnNmb3JtZWQgb3V0cHV0XG4vLyB0byB0aGUgcmVhZGFibGUgc2lkZS4gIFlvdSBtYXkgY2FsbCAncHVzaCcgemVybyBvciBtb3JlIHRpbWVzLlxuLy9cbi8vIENhbGwgYGNiKGVycilgIHdoZW4geW91IGFyZSBkb25lIHdpdGggdGhpcyBjaHVuay4gIElmIHlvdSBwYXNzXG4vLyBhbiBlcnJvciwgdGhlbiB0aGF0J2xsIHB1dCB0aGUgaHVydCBvbiB0aGUgd2hvbGUgb3BlcmF0aW9uLiAgSWYgeW91XG4vLyBuZXZlciBjYWxsIGNiKCksIHRoZW4geW91J2xsIG5ldmVyIGdldCBhbm90aGVyIGNodW5rLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdHJhbnNmb3JtKCkgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy53cml0ZWNiID0gY2I7XG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcbiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuICBpZiAoIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiB0cy53cml0ZWNiICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuICAgIHRoaXMuX3RyYW5zZm9ybSh0cy53cml0ZWNodW5rLCB0cy53cml0ZWVuY29kaW5nLCB0cy5hZnRlclRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxuICAgIC8vIHdpbGwgZ2V0IHByb2Nlc3NlZCwgbm93IHRoYXQgd2UndmUgYXNrZWQgZm9yIGl0LlxuICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlO1xuICB9XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsIGVyciwgZnVuY3Rpb24gKGVycjIpIHtcbiAgICBjYihlcnIyKTtcbiAgICBfdGhpczIuZW1pdCgnY2xvc2UnKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHN0cmVhbS5wdXNoKGRhdGEpO1xuXG4gIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnNcbiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkXG4gIGlmIChzdHJlYW0uX3dyaXRhYmxlU3RhdGUubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMCcpO1xuXG4gIGlmIChzdHJlYW0uX3RyYW5zZm9ybVN0YXRlLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nJyk7XG5cbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIG9iamVjdEFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxuLy8gY29tcGFyZSBhbmQgaXNCdWZmZXIgdGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9ibG9iLzY4MGU5ZTVlNDg4ZjIyYWFjMjc1OTlhNTdkYzg0NGE2MzE1OTI4ZGQvaW5kZXguanNcbi8vIG9yaWdpbmFsIG5vdGljZTpcblxuLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgeCA9IGEubGVuZ3RoO1xuICB2YXIgeSA9IGIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldO1xuICAgICAgeSA9IGJbaV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgaWYgKHkgPCB4KSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiBpc0J1ZmZlcihiKSB7XG4gIGlmIChnbG9iYWwuQnVmZmVyICYmIHR5cGVvZiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIoYik7XG4gIH1cbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcik7XG59XG5cbi8vIGJhc2VkIG9uIG5vZGUgYXNzZXJ0LCBvcmlnaW5hbCBub3RpY2U6XG4vLyBOQjogVGhlIFVSTCB0byB0aGUgQ29tbW9uSlMgc3BlYyBpcyBrZXB0IGp1c3QgZm9yIHRyYWRpdGlvbi5cbi8vICAgICBub2RlLWFzc2VydCBoYXMgZXZvbHZlZCBhIGxvdCBzaW5jZSB0aGVuLCBib3RoIGluIEFQSSBhbmQgYmVoYXZpb3IuXG5cbi8vIGh0dHA6Ly93aWtpLmNvbW1vbmpzLm9yZy93aWtpL1VuaXRfVGVzdGluZy8xLjBcbi8vXG4vLyBUSElTIElTIE5PVCBURVNURUQgTk9SIExJS0VMWSBUTyBXT1JLIE9VVFNJREUgVjghXG4vL1xuLy8gT3JpZ2luYWxseSBmcm9tIG5hcndoYWwuanMgKGh0dHA6Ly9uYXJ3aGFsanMub3JnKVxuLy8gQ29weXJpZ2h0IChjKSAyMDA5IFRob21hcyBSb2JpbnNvbiA8Mjgwbm9ydGguY29tPlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICdTb2Z0d2FyZScpLCB0b1xuLy8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGVcbi8vIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vclxuLy8gc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU5cbi8vIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cbi8vIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwvJyk7XG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwU2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgZnVuY3Rpb25zSGF2ZU5hbWVzID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbygpIHt9Lm5hbWUgPT09ICdmb28nO1xufSgpKTtcbmZ1bmN0aW9uIHBUb1N0cmluZyAob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKTtcbn1cbmZ1bmN0aW9uIGlzVmlldyhhcnJidWYpIHtcbiAgaWYgKGlzQnVmZmVyKGFycmJ1ZikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KGFycmJ1Zik7XG4gIH1cbiAgaWYgKCFhcnJidWYpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGFycmJ1ZiBpbnN0YW5jZW9mIERhdGFWaWV3KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGFycmJ1Zi5idWZmZXIgJiYgYXJyYnVmLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuLy8gMS4gVGhlIGFzc2VydCBtb2R1bGUgcHJvdmlkZXMgZnVuY3Rpb25zIHRoYXQgdGhyb3dcbi8vIEFzc2VydGlvbkVycm9yJ3Mgd2hlbiBwYXJ0aWN1bGFyIGNvbmRpdGlvbnMgYXJlIG5vdCBtZXQuIFRoZVxuLy8gYXNzZXJ0IG1vZHVsZSBtdXN0IGNvbmZvcm0gdG8gdGhlIGZvbGxvd2luZyBpbnRlcmZhY2UuXG5cbnZhciBhc3NlcnQgPSBtb2R1bGUuZXhwb3J0cyA9IG9rO1xuXG4vLyAyLiBUaGUgQXNzZXJ0aW9uRXJyb3IgaXMgZGVmaW5lZCBpbiBhc3NlcnQuXG4vLyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHsgbWVzc2FnZTogbWVzc2FnZSxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWw6IGFjdHVhbCxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZDogZXhwZWN0ZWQgfSlcblxudmFyIHJlZ2V4ID0gL1xccypmdW5jdGlvblxccysoW15cXChcXHNdKilcXHMqLztcbi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUvYmxvYi9hZGVlZWVjOGJmY2M2MDY4YjE4N2Q3ZDlmYjNkNWJiMWQzYTMwODk5L2ltcGxlbWVudGF0aW9uLmpzXG5mdW5jdGlvbiBnZXROYW1lKGZ1bmMpIHtcbiAgaWYgKCF1dGlsLmlzRnVuY3Rpb24oZnVuYykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGZ1bmN0aW9uc0hhdmVOYW1lcykge1xuICAgIHJldHVybiBmdW5jLm5hbWU7XG4gIH1cbiAgdmFyIHN0ciA9IGZ1bmMudG9TdHJpbmcoKTtcbiAgdmFyIG1hdGNoID0gc3RyLm1hdGNoKHJlZ2V4KTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdO1xufVxuYXNzZXJ0LkFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gQXNzZXJ0aW9uRXJyb3Iob3B0aW9ucykge1xuICB0aGlzLm5hbWUgPSAnQXNzZXJ0aW9uRXJyb3InO1xuICB0aGlzLmFjdHVhbCA9IG9wdGlvbnMuYWN0dWFsO1xuICB0aGlzLmV4cGVjdGVkID0gb3B0aW9ucy5leHBlY3RlZDtcbiAgdGhpcy5vcGVyYXRvciA9IG9wdGlvbnMub3BlcmF0b3I7XG4gIGlmIChvcHRpb25zLm1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBvcHRpb25zLm1lc3NhZ2U7XG4gICAgdGhpcy5nZW5lcmF0ZWRNZXNzYWdlID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5tZXNzYWdlID0gZ2V0TWVzc2FnZSh0aGlzKTtcbiAgICB0aGlzLmdlbmVyYXRlZE1lc3NhZ2UgPSB0cnVlO1xuICB9XG4gIHZhciBzdGFja1N0YXJ0RnVuY3Rpb24gPSBvcHRpb25zLnN0YWNrU3RhcnRGdW5jdGlvbiB8fCBmYWlsO1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBzdGFja1N0YXJ0RnVuY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIC8vIG5vbiB2OCBicm93c2VycyBzbyB3ZSBjYW4gaGF2ZSBhIHN0YWNrdHJhY2VcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCk7XG4gICAgaWYgKGVyci5zdGFjaykge1xuICAgICAgdmFyIG91dCA9IGVyci5zdGFjaztcblxuICAgICAgLy8gdHJ5IHRvIHN0cmlwIHVzZWxlc3MgZnJhbWVzXG4gICAgICB2YXIgZm5fbmFtZSA9IGdldE5hbWUoc3RhY2tTdGFydEZ1bmN0aW9uKTtcbiAgICAgIHZhciBpZHggPSBvdXQuaW5kZXhPZignXFxuJyArIGZuX25hbWUpO1xuICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgIC8vIG9uY2Ugd2UgaGF2ZSBsb2NhdGVkIHRoZSBmdW5jdGlvbiBmcmFtZVxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHN0cmlwIG91dCBldmVyeXRoaW5nIGJlZm9yZSBpdCAoYW5kIGl0cyBsaW5lKVxuICAgICAgICB2YXIgbmV4dF9saW5lID0gb3V0LmluZGV4T2YoJ1xcbicsIGlkeCArIDEpO1xuICAgICAgICBvdXQgPSBvdXQuc3Vic3RyaW5nKG5leHRfbGluZSArIDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YWNrID0gb3V0O1xuICAgIH1cbiAgfVxufTtcblxuLy8gYXNzZXJ0LkFzc2VydGlvbkVycm9yIGluc3RhbmNlb2YgRXJyb3JcbnV0aWwuaW5oZXJpdHMoYXNzZXJ0LkFzc2VydGlvbkVycm9yLCBFcnJvcik7XG5cbmZ1bmN0aW9uIHRydW5jYXRlKHMsIG4pIHtcbiAgaWYgKHR5cGVvZiBzID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzLmxlbmd0aCA8IG4gPyBzIDogcy5zbGljZSgwLCBuKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcztcbiAgfVxufVxuZnVuY3Rpb24gaW5zcGVjdChzb21ldGhpbmcpIHtcbiAgaWYgKGZ1bmN0aW9uc0hhdmVOYW1lcyB8fCAhdXRpbC5pc0Z1bmN0aW9uKHNvbWV0aGluZykpIHtcbiAgICByZXR1cm4gdXRpbC5pbnNwZWN0KHNvbWV0aGluZyk7XG4gIH1cbiAgdmFyIHJhd25hbWUgPSBnZXROYW1lKHNvbWV0aGluZyk7XG4gIHZhciBuYW1lID0gcmF3bmFtZSA/ICc6ICcgKyByYXduYW1lIDogJyc7XG4gIHJldHVybiAnW0Z1bmN0aW9uJyArICBuYW1lICsgJ10nO1xufVxuZnVuY3Rpb24gZ2V0TWVzc2FnZShzZWxmKSB7XG4gIHJldHVybiB0cnVuY2F0ZShpbnNwZWN0KHNlbGYuYWN0dWFsKSwgMTI4KSArICcgJyArXG4gICAgICAgICBzZWxmLm9wZXJhdG9yICsgJyAnICtcbiAgICAgICAgIHRydW5jYXRlKGluc3BlY3Qoc2VsZi5leHBlY3RlZCksIDEyOCk7XG59XG5cbi8vIEF0IHByZXNlbnQgb25seSB0aGUgdGhyZWUga2V5cyBtZW50aW9uZWQgYWJvdmUgYXJlIHVzZWQgYW5kXG4vLyB1bmRlcnN0b29kIGJ5IHRoZSBzcGVjLiBJbXBsZW1lbnRhdGlvbnMgb3Igc3ViIG1vZHVsZXMgY2FuIHBhc3Ncbi8vIG90aGVyIGtleXMgdG8gdGhlIEFzc2VydGlvbkVycm9yJ3MgY29uc3RydWN0b3IgLSB0aGV5IHdpbGwgYmVcbi8vIGlnbm9yZWQuXG5cbi8vIDMuIEFsbCBvZiB0aGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBtdXN0IHRocm93IGFuIEFzc2VydGlvbkVycm9yXG4vLyB3aGVuIGEgY29ycmVzcG9uZGluZyBjb25kaXRpb24gaXMgbm90IG1ldCwgd2l0aCBhIG1lc3NhZ2UgdGhhdFxuLy8gbWF5IGJlIHVuZGVmaW5lZCBpZiBub3QgcHJvdmlkZWQuICBBbGwgYXNzZXJ0aW9uIG1ldGhvZHMgcHJvdmlkZVxuLy8gYm90aCB0aGUgYWN0dWFsIGFuZCBleHBlY3RlZCB2YWx1ZXMgdG8gdGhlIGFzc2VydGlvbiBlcnJvciBmb3Jcbi8vIGRpc3BsYXkgcHVycG9zZXMuXG5cbmZ1bmN0aW9uIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgb3BlcmF0b3IsIHN0YWNrU3RhcnRGdW5jdGlvbikge1xuICB0aHJvdyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHtcbiAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgIGFjdHVhbDogYWN0dWFsLFxuICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICBvcGVyYXRvcjogb3BlcmF0b3IsXG4gICAgc3RhY2tTdGFydEZ1bmN0aW9uOiBzdGFja1N0YXJ0RnVuY3Rpb25cbiAgfSk7XG59XG5cbi8vIEVYVEVOU0lPTiEgYWxsb3dzIGZvciB3ZWxsIGJlaGF2ZWQgZXJyb3JzIGRlZmluZWQgZWxzZXdoZXJlLlxuYXNzZXJ0LmZhaWwgPSBmYWlsO1xuXG4vLyA0LiBQdXJlIGFzc2VydGlvbiB0ZXN0cyB3aGV0aGVyIGEgdmFsdWUgaXMgdHJ1dGh5LCBhcyBkZXRlcm1pbmVkXG4vLyBieSAhIWd1YXJkLlxuLy8gYXNzZXJ0Lm9rKGd1YXJkLCBtZXNzYWdlX29wdCk7XG4vLyBUaGlzIHN0YXRlbWVudCBpcyBlcXVpdmFsZW50IHRvIGFzc2VydC5lcXVhbCh0cnVlLCAhIWd1YXJkLFxuLy8gbWVzc2FnZV9vcHQpOy4gVG8gdGVzdCBzdHJpY3RseSBmb3IgdGhlIHZhbHVlIHRydWUsIHVzZVxuLy8gYXNzZXJ0LnN0cmljdEVxdWFsKHRydWUsIGd1YXJkLCBtZXNzYWdlX29wdCk7LlxuXG5mdW5jdGlvbiBvayh2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAoIXZhbHVlKSBmYWlsKHZhbHVlLCB0cnVlLCBtZXNzYWdlLCAnPT0nLCBhc3NlcnQub2spO1xufVxuYXNzZXJ0Lm9rID0gb2s7XG5cbi8vIDUuIFRoZSBlcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgc2hhbGxvdywgY29lcmNpdmUgZXF1YWxpdHkgd2l0aFxuLy8gPT0uXG4vLyBhc3NlcnQuZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuZXF1YWwgPSBmdW5jdGlvbiBlcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgIT0gZXhwZWN0ZWQpIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJz09JywgYXNzZXJ0LmVxdWFsKTtcbn07XG5cbi8vIDYuIFRoZSBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciB3aGV0aGVyIHR3byBvYmplY3RzIGFyZSBub3QgZXF1YWxcbi8vIHdpdGggIT0gYXNzZXJ0Lm5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdEVxdWFsID0gZnVuY3Rpb24gbm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsID09IGV4cGVjdGVkKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnIT0nLCBhc3NlcnQubm90RXF1YWwpO1xuICB9XG59O1xuXG4vLyA3LiBUaGUgZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGEgZGVlcCBlcXVhbGl0eSByZWxhdGlvbi5cbi8vIGFzc2VydC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuZGVlcEVxdWFsID0gZnVuY3Rpb24gZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIGZhbHNlKSkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ2RlZXBFcXVhbCcsIGFzc2VydC5kZWVwRXF1YWwpO1xuICB9XG59O1xuXG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsID0gZnVuY3Rpb24gZGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIHRydWUpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnZGVlcFN0cmljdEVxdWFsJywgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgc3RyaWN0LCBtZW1vcykge1xuICAvLyA3LjEuIEFsbCBpZGVudGljYWwgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc0J1ZmZlcihhY3R1YWwpICYmIGlzQnVmZmVyKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBjb21wYXJlKGFjdHVhbCwgZXhwZWN0ZWQpID09PSAwO1xuXG4gIC8vIDcuMi4gSWYgdGhlIGV4cGVjdGVkIHZhbHVlIGlzIGEgRGF0ZSBvYmplY3QsIHRoZSBhY3R1YWwgdmFsdWUgaXNcbiAgLy8gZXF1aXZhbGVudCBpZiBpdCBpcyBhbHNvIGEgRGF0ZSBvYmplY3QgdGhhdCByZWZlcnMgdG8gdGhlIHNhbWUgdGltZS5cbiAgfSBlbHNlIGlmICh1dGlsLmlzRGF0ZShhY3R1YWwpICYmIHV0aWwuaXNEYXRlKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBhY3R1YWwuZ2V0VGltZSgpID09PSBleHBlY3RlZC5nZXRUaW1lKCk7XG5cbiAgLy8gNy4zIElmIHRoZSBleHBlY3RlZCB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3QsIHRoZSBhY3R1YWwgdmFsdWUgaXNcbiAgLy8gZXF1aXZhbGVudCBpZiBpdCBpcyBhbHNvIGEgUmVnRXhwIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNvdXJjZSBhbmRcbiAgLy8gcHJvcGVydGllcyAoYGdsb2JhbGAsIGBtdWx0aWxpbmVgLCBgbGFzdEluZGV4YCwgYGlnbm9yZUNhc2VgKS5cbiAgfSBlbHNlIGlmICh1dGlsLmlzUmVnRXhwKGFjdHVhbCkgJiYgdXRpbC5pc1JlZ0V4cChleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gYWN0dWFsLnNvdXJjZSA9PT0gZXhwZWN0ZWQuc291cmNlICYmXG4gICAgICAgICAgIGFjdHVhbC5nbG9iYWwgPT09IGV4cGVjdGVkLmdsb2JhbCAmJlxuICAgICAgICAgICBhY3R1YWwubXVsdGlsaW5lID09PSBleHBlY3RlZC5tdWx0aWxpbmUgJiZcbiAgICAgICAgICAgYWN0dWFsLmxhc3RJbmRleCA9PT0gZXhwZWN0ZWQubGFzdEluZGV4ICYmXG4gICAgICAgICAgIGFjdHVhbC5pZ25vcmVDYXNlID09PSBleHBlY3RlZC5pZ25vcmVDYXNlO1xuXG4gIC8vIDcuNC4gT3RoZXIgcGFpcnMgdGhhdCBkbyBub3QgYm90aCBwYXNzIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyxcbiAgLy8gZXF1aXZhbGVuY2UgaXMgZGV0ZXJtaW5lZCBieSA9PS5cbiAgfSBlbHNlIGlmICgoYWN0dWFsID09PSBudWxsIHx8IHR5cGVvZiBhY3R1YWwgIT09ICdvYmplY3QnKSAmJlxuICAgICAgICAgICAgIChleHBlY3RlZCA9PT0gbnVsbCB8fCB0eXBlb2YgZXhwZWN0ZWQgIT09ICdvYmplY3QnKSkge1xuICAgIHJldHVybiBzdHJpY3QgPyBhY3R1YWwgPT09IGV4cGVjdGVkIDogYWN0dWFsID09IGV4cGVjdGVkO1xuXG4gIC8vIElmIGJvdGggdmFsdWVzIGFyZSBpbnN0YW5jZXMgb2YgdHlwZWQgYXJyYXlzLCB3cmFwIHRoZWlyIHVuZGVybHlpbmdcbiAgLy8gQXJyYXlCdWZmZXJzIGluIGEgQnVmZmVyIGVhY2ggdG8gaW5jcmVhc2UgcGVyZm9ybWFuY2VcbiAgLy8gVGhpcyBvcHRpbWl6YXRpb24gcmVxdWlyZXMgdGhlIGFycmF5cyB0byBoYXZlIHRoZSBzYW1lIHR5cGUgYXMgY2hlY2tlZCBieVxuICAvLyBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nIChha2EgcFRvU3RyaW5nKS4gTmV2ZXIgcGVyZm9ybSBiaW5hcnlcbiAgLy8gY29tcGFyaXNvbnMgZm9yIEZsb2F0KkFycmF5cywgdGhvdWdoLCBzaW5jZSBlLmcuICswID09PSAtMCBidXQgdGhlaXJcbiAgLy8gYml0IHBhdHRlcm5zIGFyZSBub3QgaWRlbnRpY2FsLlxuICB9IGVsc2UgaWYgKGlzVmlldyhhY3R1YWwpICYmIGlzVmlldyhleHBlY3RlZCkgJiZcbiAgICAgICAgICAgICBwVG9TdHJpbmcoYWN0dWFsKSA9PT0gcFRvU3RyaW5nKGV4cGVjdGVkKSAmJlxuICAgICAgICAgICAgICEoYWN0dWFsIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8XG4gICAgICAgICAgICAgICBhY3R1YWwgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXkpKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUobmV3IFVpbnQ4QXJyYXkoYWN0dWFsLmJ1ZmZlciksXG4gICAgICAgICAgICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoZXhwZWN0ZWQuYnVmZmVyKSkgPT09IDA7XG5cbiAgLy8gNy41IEZvciBhbGwgb3RoZXIgT2JqZWN0IHBhaXJzLCBpbmNsdWRpbmcgQXJyYXkgb2JqZWN0cywgZXF1aXZhbGVuY2UgaXNcbiAgLy8gZGV0ZXJtaW5lZCBieSBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGFzIHZlcmlmaWVkXG4gIC8vIHdpdGggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKSwgdGhlIHNhbWUgc2V0IG9mIGtleXNcbiAgLy8gKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeVxuICAvLyBjb3JyZXNwb25kaW5nIGtleSwgYW5kIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4gTm90ZTogdGhpc1xuICAvLyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cbiAgfSBlbHNlIGlmIChpc0J1ZmZlcihhY3R1YWwpICE9PSBpc0J1ZmZlcihleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgbWVtb3MgPSBtZW1vcyB8fCB7YWN0dWFsOiBbXSwgZXhwZWN0ZWQ6IFtdfTtcblxuICAgIHZhciBhY3R1YWxJbmRleCA9IG1lbW9zLmFjdHVhbC5pbmRleE9mKGFjdHVhbCk7XG4gICAgaWYgKGFjdHVhbEluZGV4ICE9PSAtMSkge1xuICAgICAgaWYgKGFjdHVhbEluZGV4ID09PSBtZW1vcy5leHBlY3RlZC5pbmRleE9mKGV4cGVjdGVkKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vcy5hY3R1YWwucHVzaChhY3R1YWwpO1xuICAgIG1lbW9zLmV4cGVjdGVkLnB1c2goZXhwZWN0ZWQpO1xuXG4gICAgcmV0dXJuIG9iakVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQsIHN0cmljdCwgbWVtb3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG59XG5cbmZ1bmN0aW9uIG9iakVxdWl2KGEsIGIsIHN0cmljdCwgYWN0dWFsVmlzaXRlZE9iamVjdHMpIHtcbiAgaWYgKGEgPT09IG51bGwgfHwgYSA9PT0gdW5kZWZpbmVkIHx8IGIgPT09IG51bGwgfHwgYiA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy8gaWYgb25lIGlzIGEgcHJpbWl0aXZlLCB0aGUgb3RoZXIgbXVzdCBiZSBzYW1lXG4gIGlmICh1dGlsLmlzUHJpbWl0aXZlKGEpIHx8IHV0aWwuaXNQcmltaXRpdmUoYikpXG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIGlmIChzdHJpY3QgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGEpICE9PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYikpXG4gICAgcmV0dXJuIGZhbHNlO1xuICB2YXIgYUlzQXJncyA9IGlzQXJndW1lbnRzKGEpO1xuICB2YXIgYklzQXJncyA9IGlzQXJndW1lbnRzKGIpO1xuICBpZiAoKGFJc0FyZ3MgJiYgIWJJc0FyZ3MpIHx8ICghYUlzQXJncyAmJiBiSXNBcmdzKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmIChhSXNBcmdzKSB7XG4gICAgYSA9IHBTbGljZS5jYWxsKGEpO1xuICAgIGIgPSBwU2xpY2UuY2FsbChiKTtcbiAgICByZXR1cm4gX2RlZXBFcXVhbChhLCBiLCBzdHJpY3QpO1xuICB9XG4gIHZhciBrYSA9IG9iamVjdEtleXMoYSk7XG4gIHZhciBrYiA9IG9iamVjdEtleXMoYik7XG4gIHZhciBrZXksIGk7XG4gIC8vIGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoa2V5cyBpbmNvcnBvcmF0ZXNcbiAgLy8gaGFzT3duUHJvcGVydHkpXG4gIGlmIChrYS5sZW5ndGggIT09IGtiLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vdGhlIHNhbWUgc2V0IG9mIGtleXMgKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksXG4gIGthLnNvcnQoKTtcbiAga2Iuc29ydCgpO1xuICAvL35+fmNoZWFwIGtleSB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGthW2ldICE9PSBrYltpXSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvL2VxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleSwgYW5kXG4gIC8vfn5+cG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGtleSA9IGthW2ldO1xuICAgIGlmICghX2RlZXBFcXVhbChhW2tleV0sIGJba2V5XSwgc3RyaWN0LCBhY3R1YWxWaXNpdGVkT2JqZWN0cykpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIDguIFRoZSBub24tZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGZvciBhbnkgZGVlcCBpbmVxdWFsaXR5LlxuLy8gYXNzZXJ0Lm5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5ub3REZWVwRXF1YWwgPSBmdW5jdGlvbiBub3REZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBmYWxzZSkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdub3REZWVwRXF1YWwnLCBhc3NlcnQubm90RGVlcEVxdWFsKTtcbiAgfVxufTtcblxuYXNzZXJ0Lm5vdERlZXBTdHJpY3RFcXVhbCA9IG5vdERlZXBTdHJpY3RFcXVhbDtcbmZ1bmN0aW9uIG5vdERlZXBTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIHRydWUpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnbm90RGVlcFN0cmljdEVxdWFsJywgbm90RGVlcFN0cmljdEVxdWFsKTtcbiAgfVxufVxuXG5cbi8vIDkuIFRoZSBzdHJpY3QgZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIHN0cmljdCBlcXVhbGl0eSwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4vLyBhc3NlcnQuc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuc3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBzdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnPT09JywgYXNzZXJ0LnN0cmljdEVxdWFsKTtcbiAgfVxufTtcblxuLy8gMTAuIFRoZSBzdHJpY3Qgbm9uLWVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBmb3Igc3RyaWN0IGluZXF1YWxpdHksIGFzXG4vLyBkZXRlcm1pbmVkIGJ5ICE9PS4gIGFzc2VydC5ub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5ub3RTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIG5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICchPT0nLCBhc3NlcnQubm90U3RyaWN0RXF1YWwpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSB7XG4gIGlmICghYWN0dWFsIHx8ICFleHBlY3RlZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZXhwZWN0ZWQpID09ICdbb2JqZWN0IFJlZ0V4cF0nKSB7XG4gICAgcmV0dXJuIGV4cGVjdGVkLnRlc3QoYWN0dWFsKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKGFjdHVhbCBpbnN0YW5jZW9mIGV4cGVjdGVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJZ25vcmUuICBUaGUgaW5zdGFuY2VvZiBjaGVjayBkb2Vzbid0IHdvcmsgZm9yIGFycm93IGZ1bmN0aW9ucy5cbiAgfVxuXG4gIGlmIChFcnJvci5pc1Byb3RvdHlwZU9mKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBleHBlY3RlZC5jYWxsKHt9LCBhY3R1YWwpID09PSB0cnVlO1xufVxuXG5mdW5jdGlvbiBfdHJ5QmxvY2soYmxvY2spIHtcbiAgdmFyIGVycm9yO1xuICB0cnkge1xuICAgIGJsb2NrKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnJvciA9IGU7XG4gIH1cbiAgcmV0dXJuIGVycm9yO1xufVxuXG5mdW5jdGlvbiBfdGhyb3dzKHNob3VsZFRocm93LCBibG9jaywgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgdmFyIGFjdHVhbDtcblxuICBpZiAodHlwZW9mIGJsb2NrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJibG9ja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICBtZXNzYWdlID0gZXhwZWN0ZWQ7XG4gICAgZXhwZWN0ZWQgPSBudWxsO1xuICB9XG5cbiAgYWN0dWFsID0gX3RyeUJsb2NrKGJsb2NrKTtcblxuICBtZXNzYWdlID0gKGV4cGVjdGVkICYmIGV4cGVjdGVkLm5hbWUgPyAnICgnICsgZXhwZWN0ZWQubmFtZSArICcpLicgOiAnLicpICtcbiAgICAgICAgICAgIChtZXNzYWdlID8gJyAnICsgbWVzc2FnZSA6ICcuJyk7XG5cbiAgaWYgKHNob3VsZFRocm93ICYmICFhY3R1YWwpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsICdNaXNzaW5nIGV4cGVjdGVkIGV4Y2VwdGlvbicgKyBtZXNzYWdlKTtcbiAgfVxuXG4gIHZhciB1c2VyUHJvdmlkZWRNZXNzYWdlID0gdHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnO1xuICB2YXIgaXNVbndhbnRlZEV4Y2VwdGlvbiA9ICFzaG91bGRUaHJvdyAmJiB1dGlsLmlzRXJyb3IoYWN0dWFsKTtcbiAgdmFyIGlzVW5leHBlY3RlZEV4Y2VwdGlvbiA9ICFzaG91bGRUaHJvdyAmJiBhY3R1YWwgJiYgIWV4cGVjdGVkO1xuXG4gIGlmICgoaXNVbndhbnRlZEV4Y2VwdGlvbiAmJlxuICAgICAgdXNlclByb3ZpZGVkTWVzc2FnZSAmJlxuICAgICAgZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkpIHx8XG4gICAgICBpc1VuZXhwZWN0ZWRFeGNlcHRpb24pIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsICdHb3QgdW53YW50ZWQgZXhjZXB0aW9uJyArIG1lc3NhZ2UpO1xuICB9XG5cbiAgaWYgKChzaG91bGRUaHJvdyAmJiBhY3R1YWwgJiYgZXhwZWN0ZWQgJiZcbiAgICAgICFleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSkgfHwgKCFzaG91bGRUaHJvdyAmJiBhY3R1YWwpKSB7XG4gICAgdGhyb3cgYWN0dWFsO1xuICB9XG59XG5cbi8vIDExLiBFeHBlY3RlZCB0byB0aHJvdyBhbiBlcnJvcjpcbi8vIGFzc2VydC50aHJvd3MoYmxvY2ssIEVycm9yX29wdCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQudGhyb3dzID0gZnVuY3Rpb24oYmxvY2ssIC8qb3B0aW9uYWwqL2Vycm9yLCAvKm9wdGlvbmFsKi9tZXNzYWdlKSB7XG4gIF90aHJvd3ModHJ1ZSwgYmxvY2ssIGVycm9yLCBtZXNzYWdlKTtcbn07XG5cbi8vIEVYVEVOU0lPTiEgVGhpcyBpcyBhbm5veWluZyB0byB3cml0ZSBvdXRzaWRlIHRoaXMgbW9kdWxlLlxuYXNzZXJ0LmRvZXNOb3RUaHJvdyA9IGZ1bmN0aW9uKGJsb2NrLCAvKm9wdGlvbmFsKi9lcnJvciwgLypvcHRpb25hbCovbWVzc2FnZSkge1xuICBfdGhyb3dzKGZhbHNlLCBibG9jaywgZXJyb3IsIG1lc3NhZ2UpO1xufTtcblxuYXNzZXJ0LmlmRXJyb3IgPSBmdW5jdGlvbihlcnIpIHsgaWYgKGVycikgdGhyb3cgZXJyOyB9O1xuXG4vLyBFeHBvc2UgYSBzdHJpY3Qgb25seSB2YXJpYW50IG9mIGFzc2VydFxuZnVuY3Rpb24gc3RyaWN0KHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICghdmFsdWUpIGZhaWwodmFsdWUsIHRydWUsIG1lc3NhZ2UsICc9PScsIHN0cmljdCk7XG59XG5hc3NlcnQuc3RyaWN0ID0gb2JqZWN0QXNzaWduKHN0cmljdCwgYXNzZXJ0LCB7XG4gIGVxdWFsOiBhc3NlcnQuc3RyaWN0RXF1YWwsXG4gIGRlZXBFcXVhbDogYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCxcbiAgbm90RXF1YWw6IGFzc2VydC5ub3RTdHJpY3RFcXVhbCxcbiAgbm90RGVlcEVxdWFsOiBhc3NlcnQubm90RGVlcFN0cmljdEVxdWFsXG59KTtcbmFzc2VydC5zdHJpY3Quc3RyaWN0ID0gYXNzZXJ0LnN0cmljdDtcblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoaGFzT3duLmNhbGwob2JqLCBrZXkpKSBrZXlzLnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIE5vdGU6IGFkbGVyMzIgdGFrZXMgMTIlIGZvciBsZXZlbCAwIGFuZCAyJSBmb3IgbGV2ZWwgNi5cbi8vIEl0IGlzbid0IHdvcnRoIGl0IHRvIG1ha2UgYWRkaXRpb25hbCBvcHRpbWl6YXRpb25zIGFzIGluIG9yaWdpbmFsLlxuLy8gU21hbGwgc2l6ZSBpcyBwcmVmZXJhYmxlLlxuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmZ1bmN0aW9uIGFkbGVyMzIoYWRsZXIsIGJ1ZiwgbGVuLCBwb3MpIHtcbiAgdmFyIHMxID0gKGFkbGVyICYgMHhmZmZmKSB8MCxcbiAgICAgIHMyID0gKChhZGxlciA+Pj4gMTYpICYgMHhmZmZmKSB8MCxcbiAgICAgIG4gPSAwO1xuXG4gIHdoaWxlIChsZW4gIT09IDApIHtcbiAgICAvLyBTZXQgbGltaXQgfiB0d2ljZSBsZXNzIHRoYW4gNTU1MiwgdG8ga2VlcFxuICAgIC8vIHMyIGluIDMxLWJpdHMsIGJlY2F1c2Ugd2UgZm9yY2Ugc2lnbmVkIGludHMuXG4gICAgLy8gaW4gb3RoZXIgY2FzZSAlPSB3aWxsIGZhaWwuXG4gICAgbiA9IGxlbiA+IDIwMDAgPyAyMDAwIDogbGVuO1xuICAgIGxlbiAtPSBuO1xuXG4gICAgZG8ge1xuICAgICAgczEgPSAoczEgKyBidWZbcG9zKytdKSB8MDtcbiAgICAgIHMyID0gKHMyICsgczEpIHwwO1xuICAgIH0gd2hpbGUgKC0tbik7XG5cbiAgICBzMSAlPSA2NTUyMTtcbiAgICBzMiAlPSA2NTUyMTtcbiAgfVxuXG4gIHJldHVybiAoczEgfCAoczIgPDwgMTYpKSB8MDtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGFkbGVyMzI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIE5vdGU6IHdlIGNhbid0IGdldCBzaWduaWZpY2FudCBzcGVlZCBib29zdCBoZXJlLlxuLy8gU28gd3JpdGUgY29kZSB0byBtaW5pbWl6ZSBzaXplIC0gbm8gcHJlZ2VuZXJhdGVkIHRhYmxlc1xuLy8gYW5kIGFycmF5IHRvb2xzIGRlcGVuZGVuY2llcy5cblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG4vLyBVc2Ugb3JkaW5hcnkgYXJyYXksIHNpbmNlIHVudHlwZWQgbWFrZXMgbm8gYm9vc3QgaGVyZVxuZnVuY3Rpb24gbWFrZVRhYmxlKCkge1xuICB2YXIgYywgdGFibGUgPSBbXTtcblxuICBmb3IgKHZhciBuID0gMDsgbiA8IDI1NjsgbisrKSB7XG4gICAgYyA9IG47XG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCA4OyBrKyspIHtcbiAgICAgIGMgPSAoKGMgJiAxKSA/ICgweEVEQjg4MzIwIF4gKGMgPj4+IDEpKSA6IChjID4+PiAxKSk7XG4gICAgfVxuICAgIHRhYmxlW25dID0gYztcbiAgfVxuXG4gIHJldHVybiB0YWJsZTtcbn1cblxuLy8gQ3JlYXRlIHRhYmxlIG9uIGxvYWQuIEp1c3QgMjU1IHNpZ25lZCBsb25ncy4gTm90IGEgcHJvYmxlbS5cbnZhciBjcmNUYWJsZSA9IG1ha2VUYWJsZSgpO1xuXG5cbmZ1bmN0aW9uIGNyYzMyKGNyYywgYnVmLCBsZW4sIHBvcykge1xuICB2YXIgdCA9IGNyY1RhYmxlLFxuICAgICAgZW5kID0gcG9zICsgbGVuO1xuXG4gIGNyYyBePSAtMTtcblxuICBmb3IgKHZhciBpID0gcG9zOyBpIDwgZW5kOyBpKyspIHtcbiAgICBjcmMgPSAoY3JjID4+PiA4KSBeIHRbKGNyYyBeIGJ1ZltpXSkgJiAweEZGXTtcbiAgfVxuXG4gIHJldHVybiAoY3JjIF4gKC0xKSk7IC8vID4+PiAwO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gY3JjMzI7XG4iLCIvKiFcbiAqIG1pbWUtdHlwZXNcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogQ29weXJpZ2h0KGMpIDIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBkYiA9IHJlcXVpcmUoJ21pbWUtZGInKVxudmFyIGV4dG5hbWUgPSByZXF1aXJlKCdwYXRoJykuZXh0bmFtZVxuXG4vKipcbiAqIE1vZHVsZSB2YXJpYWJsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBFWFRSQUNUX1RZUEVfUkVHRVhQID0gL15cXHMqKFteO1xcc10qKSg/Ojt8XFxzfCQpL1xudmFyIFRFWFRfVFlQRV9SRUdFWFAgPSAvXnRleHRcXC8vaVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbmV4cG9ydHMuY2hhcnNldCA9IGNoYXJzZXRcbmV4cG9ydHMuY2hhcnNldHMgPSB7IGxvb2t1cDogY2hhcnNldCB9XG5leHBvcnRzLmNvbnRlbnRUeXBlID0gY29udGVudFR5cGVcbmV4cG9ydHMuZXh0ZW5zaW9uID0gZXh0ZW5zaW9uXG5leHBvcnRzLmV4dGVuc2lvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5leHBvcnRzLmxvb2t1cCA9IGxvb2t1cFxuZXhwb3J0cy50eXBlcyA9IE9iamVjdC5jcmVhdGUobnVsbClcblxuLy8gUG9wdWxhdGUgdGhlIGV4dGVuc2lvbnMvdHlwZXMgbWFwc1xucG9wdWxhdGVNYXBzKGV4cG9ydHMuZXh0ZW5zaW9ucywgZXhwb3J0cy50eXBlcylcblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgY2hhcnNldCBmb3IgYSBNSU1FIHR5cGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEByZXR1cm4ge2Jvb2xlYW58c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGNoYXJzZXQgKHR5cGUpIHtcbiAgaWYgKCF0eXBlIHx8IHR5cGVvZiB0eXBlICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gVE9ETzogdXNlIG1lZGlhLXR5cGVyXG4gIHZhciBtYXRjaCA9IEVYVFJBQ1RfVFlQRV9SRUdFWFAuZXhlYyh0eXBlKVxuICB2YXIgbWltZSA9IG1hdGNoICYmIGRiW21hdGNoWzFdLnRvTG93ZXJDYXNlKCldXG5cbiAgaWYgKG1pbWUgJiYgbWltZS5jaGFyc2V0KSB7XG4gICAgcmV0dXJuIG1pbWUuY2hhcnNldFxuICB9XG5cbiAgLy8gZGVmYXVsdCB0ZXh0LyogdG8gdXRmLThcbiAgaWYgKG1hdGNoICYmIFRFWFRfVFlQRV9SRUdFWFAudGVzdChtYXRjaFsxXSkpIHtcbiAgICByZXR1cm4gJ1VURi04J1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZnVsbCBDb250ZW50LVR5cGUgaGVhZGVyIGdpdmVuIGEgTUlNRSB0eXBlIG9yIGV4dGVuc2lvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtib29sZWFufHN0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBjb250ZW50VHlwZSAoc3RyKSB7XG4gIC8vIFRPRE86IHNob3VsZCB0aGlzIGV2ZW4gYmUgaW4gdGhpcyBtb2R1bGU/XG4gIGlmICghc3RyIHx8IHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICB2YXIgbWltZSA9IHN0ci5pbmRleE9mKCcvJykgPT09IC0xXG4gICAgPyBleHBvcnRzLmxvb2t1cChzdHIpXG4gICAgOiBzdHJcblxuICBpZiAoIW1pbWUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIFRPRE86IHVzZSBjb250ZW50LXR5cGUgb3Igb3RoZXIgbW9kdWxlXG4gIGlmIChtaW1lLmluZGV4T2YoJ2NoYXJzZXQnKSA9PT0gLTEpIHtcbiAgICB2YXIgY2hhcnNldCA9IGV4cG9ydHMuY2hhcnNldChtaW1lKVxuICAgIGlmIChjaGFyc2V0KSBtaW1lICs9ICc7IGNoYXJzZXQ9JyArIGNoYXJzZXQudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgcmV0dXJuIG1pbWVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgZXh0ZW5zaW9uIGZvciBhIE1JTUUgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHJldHVybiB7Ym9vbGVhbnxzdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gZXh0ZW5zaW9uICh0eXBlKSB7XG4gIGlmICghdHlwZSB8fCB0eXBlb2YgdHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIFRPRE86IHVzZSBtZWRpYS10eXBlclxuICB2YXIgbWF0Y2ggPSBFWFRSQUNUX1RZUEVfUkVHRVhQLmV4ZWModHlwZSlcblxuICAvLyBnZXQgZXh0ZW5zaW9uc1xuICB2YXIgZXh0cyA9IG1hdGNoICYmIGV4cG9ydHMuZXh0ZW5zaW9uc1ttYXRjaFsxXS50b0xvd2VyQ2FzZSgpXVxuXG4gIGlmICghZXh0cyB8fCAhZXh0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiBleHRzWzBdXG59XG5cbi8qKlxuICogTG9va3VwIHRoZSBNSU1FIHR5cGUgZm9yIGEgZmlsZSBwYXRoL2V4dGVuc2lvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogQHJldHVybiB7Ym9vbGVhbnxzdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gbG9va3VwIChwYXRoKSB7XG4gIGlmICghcGF0aCB8fCB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIGdldCB0aGUgZXh0ZW5zaW9uIChcImV4dFwiIG9yIFwiLmV4dFwiIG9yIGZ1bGwgcGF0aClcbiAgdmFyIGV4dGVuc2lvbiA9IGV4dG5hbWUoJ3guJyArIHBhdGgpXG4gICAgLnRvTG93ZXJDYXNlKClcbiAgICAuc3Vic3RyKDEpXG5cbiAgaWYgKCFleHRlbnNpb24pIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLnR5cGVzW2V4dGVuc2lvbl0gfHwgZmFsc2Vcbn1cblxuLyoqXG4gKiBQb3B1bGF0ZSB0aGUgZXh0ZW5zaW9ucyBhbmQgdHlwZXMgbWFwcy5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcG9wdWxhdGVNYXBzIChleHRlbnNpb25zLCB0eXBlcykge1xuICAvLyBzb3VyY2UgcHJlZmVyZW5jZSAobGVhc3QgLT4gbW9zdClcbiAgdmFyIHByZWZlcmVuY2UgPSBbJ25naW54JywgJ2FwYWNoZScsIHVuZGVmaW5lZCwgJ2lhbmEnXVxuXG4gIE9iamVjdC5rZXlzKGRiKS5mb3JFYWNoKGZ1bmN0aW9uIGZvckVhY2hNaW1lVHlwZSAodHlwZSkge1xuICAgIHZhciBtaW1lID0gZGJbdHlwZV1cbiAgICB2YXIgZXh0cyA9IG1pbWUuZXh0ZW5zaW9uc1xuXG4gICAgaWYgKCFleHRzIHx8ICFleHRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gbWltZSAtPiBleHRlbnNpb25zXG4gICAgZXh0ZW5zaW9uc1t0eXBlXSA9IGV4dHNcblxuICAgIC8vIGV4dGVuc2lvbiAtPiBtaW1lXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZXh0ZW5zaW9uID0gZXh0c1tpXVxuXG4gICAgICBpZiAodHlwZXNbZXh0ZW5zaW9uXSkge1xuICAgICAgICB2YXIgZnJvbSA9IHByZWZlcmVuY2UuaW5kZXhPZihkYlt0eXBlc1tleHRlbnNpb25dXS5zb3VyY2UpXG4gICAgICAgIHZhciB0byA9IHByZWZlcmVuY2UuaW5kZXhPZihtaW1lLnNvdXJjZSlcblxuICAgICAgICBpZiAodHlwZXNbZXh0ZW5zaW9uXSAhPT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScgJiZcbiAgICAgICAgICAoZnJvbSA+IHRvIHx8IChmcm9tID09PSB0byAmJiB0eXBlc1tleHRlbnNpb25dLnN1YnN0cigwLCAxMikgPT09ICdhcHBsaWNhdGlvbi8nKSkpIHtcbiAgICAgICAgICAvLyBza2lwIHRoZSByZW1hcHBpbmdcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCB0aGUgZXh0ZW5zaW9uIC0+IG1pbWVcbiAgICAgIHR5cGVzW2V4dGVuc2lvbl0gPSB0eXBlXG4gICAgfVxuICB9KVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxudmFyIGhleFRhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gICAgICAgIGFycmF5LnB1c2goJyUnICsgKChpIDwgMTYgPyAnMCcgOiAnJykgKyBpLnRvU3RyaW5nKDE2KSkudG9VcHBlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xufSgpKTtcblxudmFyIGNvbXBhY3RRdWV1ZSA9IGZ1bmN0aW9uIGNvbXBhY3RRdWV1ZShxdWV1ZSkge1xuICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAxKSB7XG4gICAgICAgIHZhciBpdGVtID0gcXVldWUucG9wKCk7XG4gICAgICAgIHZhciBvYmogPSBpdGVtLm9ialtpdGVtLnByb3BdO1xuXG4gICAgICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgIHZhciBjb21wYWN0ZWQgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9ialtqXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFjdGVkLnB1c2gob2JqW2pdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGl0ZW0ub2JqW2l0ZW0ucHJvcF0gPSBjb21wYWN0ZWQ7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgYXJyYXlUb09iamVjdCA9IGZ1bmN0aW9uIGFycmF5VG9PYmplY3Qoc291cmNlLCBvcHRpb25zKSB7XG4gICAgdmFyIG9iaiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBvYmpbaV0gPSBzb3VyY2VbaV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xufTtcblxudmFyIG1lcmdlID0gZnVuY3Rpb24gbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgICAgICB0YXJnZXQucHVzaChzb3VyY2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCAmJiB0eXBlb2YgdGFyZ2V0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKChvcHRpb25zICYmIChvcHRpb25zLnBsYWluT2JqZWN0cyB8fCBvcHRpb25zLmFsbG93UHJvdG90eXBlcykpIHx8ICFoYXMuY2FsbChPYmplY3QucHJvdG90eXBlLCBzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W3NvdXJjZV0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFt0YXJnZXQsIHNvdXJjZV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0IHx8IHR5cGVvZiB0YXJnZXQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBbdGFyZ2V0XS5jb25jYXQoc291cmNlKTtcbiAgICB9XG5cbiAgICB2YXIgbWVyZ2VUYXJnZXQgPSB0YXJnZXQ7XG4gICAgaWYgKGlzQXJyYXkodGFyZ2V0KSAmJiAhaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIG1lcmdlVGFyZ2V0ID0gYXJyYXlUb09iamVjdCh0YXJnZXQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChpc0FycmF5KHRhcmdldCkgJiYgaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIHNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgICBpZiAoaGFzLmNhbGwodGFyZ2V0LCBpKSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRJdGVtID0gdGFyZ2V0W2ldO1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRJdGVtICYmIHR5cGVvZiB0YXJnZXRJdGVtID09PSAnb2JqZWN0JyAmJiBpdGVtICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRbaV0gPSBtZXJnZSh0YXJnZXRJdGVtLCBpdGVtLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc291cmNlW2tleV07XG5cbiAgICAgICAgaWYgKGhhcy5jYWxsKGFjYywga2V5KSkge1xuICAgICAgICAgICAgYWNjW2tleV0gPSBtZXJnZShhY2Nba2V5XSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWNjW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIG1lcmdlVGFyZ2V0KTtcbn07XG5cbnZhciBhc3NpZ24gPSBmdW5jdGlvbiBhc3NpZ25TaW5nbGVTb3VyY2UodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc291cmNlKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICAgIGFjY1trZXldID0gc291cmNlW2tleV07XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgdGFyZ2V0KTtcbn07XG5cbnZhciBkZWNvZGUgPSBmdW5jdGlvbiAoc3RyLCBkZWNvZGVyLCBjaGFyc2V0KSB7XG4gICAgdmFyIHN0cldpdGhvdXRQbHVzID0gc3RyLnJlcGxhY2UoL1xcKy9nLCAnICcpO1xuICAgIGlmIChjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgLy8gdW5lc2NhcGUgbmV2ZXIgdGhyb3dzLCBubyB0cnkuLi5jYXRjaCBuZWVkZWQ6XG4gICAgICAgIHJldHVybiBzdHJXaXRob3V0UGx1cy5yZXBsYWNlKC8lWzAtOWEtZl17Mn0vZ2ksIHVuZXNjYXBlKTtcbiAgICB9XG4gICAgLy8gdXRmLThcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cldpdGhvdXRQbHVzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBzdHJXaXRob3V0UGx1cztcbiAgICB9XG59O1xuXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKHN0ciwgZGVmYXVsdEVuY29kZXIsIGNoYXJzZXQpIHtcbiAgICAvLyBUaGlzIGNvZGUgd2FzIG9yaWdpbmFsbHkgd3JpdHRlbiBieSBCcmlhbiBXaGl0ZSAobXNjZGV4KSBmb3IgdGhlIGlvLmpzIGNvcmUgcXVlcnlzdHJpbmcgbGlicmFyeS5cbiAgICAvLyBJdCBoYXMgYmVlbiBhZGFwdGVkIGhlcmUgZm9yIHN0cmljdGVyIGFkaGVyZW5jZSB0byBSRkMgMzk4NlxuICAgIGlmIChzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgdmFyIHN0cmluZyA9IHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gc3RyIDogU3RyaW5nKHN0cik7XG5cbiAgICBpZiAoY2hhcnNldCA9PT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHJldHVybiBlc2NhcGUoc3RyaW5nKS5yZXBsYWNlKC8ldVswLTlhLWZdezR9L2dpLCBmdW5jdGlvbiAoJDApIHtcbiAgICAgICAgICAgIHJldHVybiAnJTI2JTIzJyArIHBhcnNlSW50KCQwLnNsaWNlKDIpLCAxNikgKyAnJTNCJztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIG91dCA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBjID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgYyA9PT0gMHgyRCAvLyAtXG4gICAgICAgICAgICB8fCBjID09PSAweDJFIC8vIC5cbiAgICAgICAgICAgIHx8IGMgPT09IDB4NUYgLy8gX1xuICAgICAgICAgICAgfHwgYyA9PT0gMHg3RSAvLyB+XG4gICAgICAgICAgICB8fCAoYyA+PSAweDMwICYmIGMgPD0gMHgzOSkgLy8gMC05XG4gICAgICAgICAgICB8fCAoYyA+PSAweDQxICYmIGMgPD0gMHg1QSkgLy8gYS16XG4gICAgICAgICAgICB8fCAoYyA+PSAweDYxICYmIGMgPD0gMHg3QSkgLy8gQS1aXG4gICAgICAgICkge1xuICAgICAgICAgICAgb3V0ICs9IHN0cmluZy5jaGFyQXQoaSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjIDwgMHg4MCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0ICsgaGV4VGFibGVbY107XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjIDwgMHg4MDApIHtcbiAgICAgICAgICAgIG91dCA9IG91dCArIChoZXhUYWJsZVsweEMwIHwgKGMgPj4gNildICsgaGV4VGFibGVbMHg4MCB8IChjICYgMHgzRildKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweEQ4MDAgfHwgYyA+PSAweEUwMDApIHtcbiAgICAgICAgICAgIG91dCA9IG91dCArIChoZXhUYWJsZVsweEUwIHwgKGMgPj4gMTIpXSArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gNikgJiAweDNGKV0gKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICAgIGMgPSAweDEwMDAwICsgKCgoYyAmIDB4M0ZGKSA8PCAxMCkgfCAoc3RyaW5nLmNoYXJDb2RlQXQoaSkgJiAweDNGRikpO1xuICAgICAgICBvdXQgKz0gaGV4VGFibGVbMHhGMCB8IChjID4+IDE4KV1cbiAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiAxMikgJiAweDNGKV1cbiAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiA2KSAmIDB4M0YpXVxuICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cbnZhciBjb21wYWN0ID0gZnVuY3Rpb24gY29tcGFjdCh2YWx1ZSkge1xuICAgIHZhciBxdWV1ZSA9IFt7IG9iajogeyBvOiB2YWx1ZSB9LCBwcm9wOiAnbycgfV07XG4gICAgdmFyIHJlZnMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBxdWV1ZVtpXTtcbiAgICAgICAgdmFyIG9iaiA9IGl0ZW0ub2JqW2l0ZW0ucHJvcF07XG5cbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtleXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2pdO1xuICAgICAgICAgICAgdmFyIHZhbCA9IG9ialtrZXldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbCAhPT0gbnVsbCAmJiByZWZzLmluZGV4T2YodmFsKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKHsgb2JqOiBvYmosIHByb3A6IGtleSB9KTtcbiAgICAgICAgICAgICAgICByZWZzLnB1c2godmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBhY3RRdWV1ZShxdWV1ZSk7XG5cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuXG52YXIgaXNSZWdFeHAgPSBmdW5jdGlvbiBpc1JlZ0V4cChvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufTtcblxudmFyIGlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIob2JqKSB7XG4gICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiAhIShvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopKTtcbn07XG5cbnZhciBjb21iaW5lID0gZnVuY3Rpb24gY29tYmluZShhLCBiKSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdChhLCBiKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGFycmF5VG9PYmplY3Q6IGFycmF5VG9PYmplY3QsXG4gICAgYXNzaWduOiBhc3NpZ24sXG4gICAgY29tYmluZTogY29tYmluZSxcbiAgICBjb21wYWN0OiBjb21wYWN0LFxuICAgIGRlY29kZTogZGVjb2RlLFxuICAgIGVuY29kZTogZW5jb2RlLFxuICAgIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgICBpc1JlZ0V4cDogaXNSZWdFeHAsXG4gICAgbWVyZ2U6IG1lcmdlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcbnZhciBwZXJjZW50VHdlbnRpZXMgPSAvJTIwL2c7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgICdkZWZhdWx0JzogJ1JGQzM5ODYnLFxuICAgIGZvcm1hdHRlcnM6IHtcbiAgICAgICAgUkZDMTczODogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwbGFjZS5jYWxsKHZhbHVlLCBwZXJjZW50VHdlbnRpZXMsICcrJyk7XG4gICAgICAgIH0sXG4gICAgICAgIFJGQzM5ODY6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBSRkMxNzM4OiAnUkZDMTczOCcsXG4gICAgUkZDMzk4NjogJ1JGQzM5ODYnXG59O1xuIiwiLyohXG4gKiBleHByZXNzXG4gKiBDb3B5cmlnaHQoYykgMjAwOS0yMDEzIFRKIEhvbG93YXljaHVrXG4gKiBDb3B5cmlnaHQoYykgMjAxMyBSb21hbiBTaHR5bG1hblxuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBSb3V0ZSA9IHJlcXVpcmUoJy4vcm91dGUnKTtcbnZhciBMYXllciA9IHJlcXVpcmUoJy4vbGF5ZXInKTtcbnZhciBtZXRob2RzID0gcmVxdWlyZSgnbWV0aG9kcycpO1xudmFyIG1peGluID0gcmVxdWlyZSgndXRpbHMtbWVyZ2UnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2V4cHJlc3M6cm91dGVyJyk7XG52YXIgZGVwcmVjYXRlID0gcmVxdWlyZSgnZGVwZCcpKCdleHByZXNzJyk7XG52YXIgZmxhdHRlbiA9IHJlcXVpcmUoJ2FycmF5LWZsYXR0ZW4nKTtcbnZhciBwYXJzZVVybCA9IHJlcXVpcmUoJ3BhcnNldXJsJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdzZXRwcm90b3R5cGVvZicpXG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIG9iamVjdFJlZ0V4cCA9IC9eXFxbb2JqZWN0IChcXFMrKVxcXSQvO1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBJbml0aWFsaXplIGEgbmV3IGBSb3V0ZXJgIHdpdGggdGhlIGdpdmVuIGBvcHRpb25zYC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtSb3V0ZXJ9IHdoaWNoIGlzIGFuIGNhbGxhYmxlIGZ1bmN0aW9uXG4gKiBAcHVibGljXG4gKi9cblxudmFyIHByb3RvID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gb3B0aW9ucyB8fCB7fTtcblxuICBmdW5jdGlvbiByb3V0ZXIocmVxLCByZXMsIG5leHQpIHtcbiAgICByb3V0ZXIuaGFuZGxlKHJlcSwgcmVzLCBuZXh0KTtcbiAgfVxuXG4gIC8vIG1peGluIFJvdXRlciBjbGFzcyBmdW5jdGlvbnNcbiAgc2V0UHJvdG90eXBlT2Yocm91dGVyLCBwcm90bylcblxuICByb3V0ZXIucGFyYW1zID0ge307XG4gIHJvdXRlci5fcGFyYW1zID0gW107XG4gIHJvdXRlci5jYXNlU2Vuc2l0aXZlID0gb3B0cy5jYXNlU2Vuc2l0aXZlO1xuICByb3V0ZXIubWVyZ2VQYXJhbXMgPSBvcHRzLm1lcmdlUGFyYW1zO1xuICByb3V0ZXIuc3RyaWN0ID0gb3B0cy5zdHJpY3Q7XG4gIHJvdXRlci5zdGFjayA9IFtdO1xuXG4gIHJldHVybiByb3V0ZXI7XG59O1xuXG4vKipcbiAqIE1hcCB0aGUgZ2l2ZW4gcGFyYW0gcGxhY2Vob2xkZXIgYG5hbWVgKHMpIHRvIHRoZSBnaXZlbiBjYWxsYmFjay5cbiAqXG4gKiBQYXJhbWV0ZXIgbWFwcGluZyBpcyB1c2VkIHRvIHByb3ZpZGUgcHJlLWNvbmRpdGlvbnMgdG8gcm91dGVzXG4gKiB3aGljaCB1c2Ugbm9ybWFsaXplZCBwbGFjZWhvbGRlcnMuIEZvciBleGFtcGxlIGEgXzp1c2VyX2lkXyBwYXJhbWV0ZXJcbiAqIGNvdWxkIGF1dG9tYXRpY2FsbHkgbG9hZCBhIHVzZXIncyBpbmZvcm1hdGlvbiBmcm9tIHRoZSBkYXRhYmFzZSB3aXRob3V0XG4gKiBhbnkgYWRkaXRpb25hbCBjb2RlLFxuICpcbiAqIFRoZSBjYWxsYmFjayB1c2VzIHRoZSBzYW1lIHNpZ25hdHVyZSBhcyBtaWRkbGV3YXJlLCB0aGUgb25seSBkaWZmZXJlbmNlXG4gKiBiZWluZyB0aGF0IHRoZSB2YWx1ZSBvZiB0aGUgcGxhY2Vob2xkZXIgaXMgcGFzc2VkLCBpbiB0aGlzIGNhc2UgdGhlIF9pZF9cbiAqIG9mIHRoZSB1c2VyLiBPbmNlIHRoZSBgbmV4dCgpYCBmdW5jdGlvbiBpcyBpbnZva2VkLCBqdXN0IGxpa2UgbWlkZGxld2FyZVxuICogaXQgd2lsbCBjb250aW51ZSBvbiB0byBleGVjdXRlIHRoZSByb3V0ZSwgb3Igc3Vic2VxdWVudCBwYXJhbWV0ZXIgZnVuY3Rpb25zLlxuICpcbiAqIEp1c3QgbGlrZSBpbiBtaWRkbGV3YXJlLCB5b3UgbXVzdCBlaXRoZXIgcmVzcG9uZCB0byB0aGUgcmVxdWVzdCBvciBjYWxsIG5leHRcbiAqIHRvIGF2b2lkIHN0YWxsaW5nIHRoZSByZXF1ZXN0LlxuICpcbiAqICBhcHAucGFyYW0oJ3VzZXJfaWQnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCwgaWQpe1xuICogICAgVXNlci5maW5kKGlkLCBmdW5jdGlvbihlcnIsIHVzZXIpe1xuICogICAgICBpZiAoZXJyKSB7XG4gKiAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcbiAqICAgICAgfSBlbHNlIGlmICghdXNlcikge1xuICogICAgICAgIHJldHVybiBuZXh0KG5ldyBFcnJvcignZmFpbGVkIHRvIGxvYWQgdXNlcicpKTtcbiAqICAgICAgfVxuICogICAgICByZXEudXNlciA9IHVzZXI7XG4gKiAgICAgIG5leHQoKTtcbiAqICAgIH0pO1xuICogIH0pO1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7YXBwfSBmb3IgY2hhaW5pbmdcbiAqIEBwdWJsaWNcbiAqL1xuXG5wcm90by5wYXJhbSA9IGZ1bmN0aW9uIHBhcmFtKG5hbWUsIGZuKSB7XG4gIC8vIHBhcmFtIGxvZ2ljXG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGRlcHJlY2F0ZSgncm91dGVyLnBhcmFtKGZuKTogUmVmYWN0b3IgdG8gdXNlIHBhdGggcGFyYW1zJyk7XG4gICAgdGhpcy5fcGFyYW1zLnB1c2gobmFtZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gYXBwbHkgcGFyYW0gZnVuY3Rpb25zXG4gIHZhciBwYXJhbXMgPSB0aGlzLl9wYXJhbXM7XG4gIHZhciBsZW4gPSBwYXJhbXMubGVuZ3RoO1xuICB2YXIgcmV0O1xuXG4gIGlmIChuYW1lWzBdID09PSAnOicpIHtcbiAgICBkZXByZWNhdGUoJ3JvdXRlci5wYXJhbSgnICsgSlNPTi5zdHJpbmdpZnkobmFtZSkgKyAnLCBmbik6IFVzZSByb3V0ZXIucGFyYW0oJyArIEpTT04uc3RyaW5naWZ5KG5hbWUuc3Vic3RyKDEpKSArICcsIGZuKSBpbnN0ZWFkJyk7XG4gICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChyZXQgPSBwYXJhbXNbaV0obmFtZSwgZm4pKSB7XG4gICAgICBmbiA9IHJldDtcbiAgICB9XG4gIH1cblxuICAvLyBlbnN1cmUgd2UgZW5kIHVwIHdpdGggYVxuICAvLyBtaWRkbGV3YXJlIGZ1bmN0aW9uXG4gIGlmICgnZnVuY3Rpb24nICE9PSB0eXBlb2YgZm4pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcGFyYW0oKSBjYWxsIGZvciAnICsgbmFtZSArICcsIGdvdCAnICsgZm4pO1xuICB9XG5cbiAgKHRoaXMucGFyYW1zW25hbWVdID0gdGhpcy5wYXJhbXNbbmFtZV0gfHwgW10pLnB1c2goZm4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXEsIHJlcyBpbnRvIHRoZSByb3V0ZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnByb3RvLmhhbmRsZSA9IGZ1bmN0aW9uIGhhbmRsZShyZXEsIHJlcywgb3V0KSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBkZWJ1ZygnZGlzcGF0Y2hpbmcgJXMgJXMnLCByZXEubWV0aG9kLCByZXEudXJsKTtcblxuICB2YXIgaWR4ID0gMDtcbiAgdmFyIHByb3RvaG9zdCA9IGdldFByb3RvaG9zdChyZXEudXJsKSB8fCAnJ1xuICB2YXIgcmVtb3ZlZCA9ICcnO1xuICB2YXIgc2xhc2hBZGRlZCA9IGZhbHNlO1xuICB2YXIgcGFyYW1jYWxsZWQgPSB7fTtcblxuICAvLyBzdG9yZSBvcHRpb25zIGZvciBPUFRJT05TIHJlcXVlc3RcbiAgLy8gb25seSB1c2VkIGlmIE9QVElPTlMgcmVxdWVzdFxuICB2YXIgb3B0aW9ucyA9IFtdO1xuXG4gIC8vIG1pZGRsZXdhcmUgYW5kIHJvdXRlc1xuICB2YXIgc3RhY2sgPSBzZWxmLnN0YWNrO1xuXG4gIC8vIG1hbmFnZSBpbnRlci1yb3V0ZXIgdmFyaWFibGVzXG4gIHZhciBwYXJlbnRQYXJhbXMgPSByZXEucGFyYW1zO1xuICB2YXIgcGFyZW50VXJsID0gcmVxLmJhc2VVcmwgfHwgJyc7XG4gIHZhciBkb25lID0gcmVzdG9yZShvdXQsIHJlcSwgJ2Jhc2VVcmwnLCAnbmV4dCcsICdwYXJhbXMnKTtcblxuICAvLyBzZXR1cCBuZXh0IGxheWVyXG4gIHJlcS5uZXh0ID0gbmV4dDtcblxuICAvLyBmb3Igb3B0aW9ucyByZXF1ZXN0cywgcmVzcG9uZCB3aXRoIGEgZGVmYXVsdCBpZiBub3RoaW5nIGVsc2UgcmVzcG9uZHNcbiAgaWYgKHJlcS5tZXRob2QgPT09ICdPUFRJT05TJykge1xuICAgIGRvbmUgPSB3cmFwKGRvbmUsIGZ1bmN0aW9uKG9sZCwgZXJyKSB7XG4gICAgICBpZiAoZXJyIHx8IG9wdGlvbnMubGVuZ3RoID09PSAwKSByZXR1cm4gb2xkKGVycik7XG4gICAgICBzZW5kT3B0aW9uc1Jlc3BvbnNlKHJlcywgb3B0aW9ucywgb2xkKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHNldHVwIGJhc2ljIHJlcSB2YWx1ZXNcbiAgcmVxLmJhc2VVcmwgPSBwYXJlbnRVcmw7XG4gIHJlcS5vcmlnaW5hbFVybCA9IHJlcS5vcmlnaW5hbFVybCB8fCByZXEudXJsO1xuXG4gIG5leHQoKTtcblxuICBmdW5jdGlvbiBuZXh0KGVycikge1xuICAgIHZhciBsYXllckVycm9yID0gZXJyID09PSAncm91dGUnXG4gICAgICA/IG51bGxcbiAgICAgIDogZXJyO1xuXG4gICAgLy8gcmVtb3ZlIGFkZGVkIHNsYXNoXG4gICAgaWYgKHNsYXNoQWRkZWQpIHtcbiAgICAgIHJlcS51cmwgPSByZXEudXJsLnN1YnN0cigxKTtcbiAgICAgIHNsYXNoQWRkZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyByZXN0b3JlIGFsdGVyZWQgcmVxLnVybFxuICAgIGlmIChyZW1vdmVkLmxlbmd0aCAhPT0gMCkge1xuICAgICAgcmVxLmJhc2VVcmwgPSBwYXJlbnRVcmw7XG4gICAgICByZXEudXJsID0gcHJvdG9ob3N0ICsgcmVtb3ZlZCArIHJlcS51cmwuc3Vic3RyKHByb3RvaG9zdC5sZW5ndGgpO1xuICAgICAgcmVtb3ZlZCA9ICcnO1xuICAgIH1cblxuICAgIC8vIHNpZ25hbCB0byBleGl0IHJvdXRlclxuICAgIGlmIChsYXllckVycm9yID09PSAncm91dGVyJykge1xuICAgICAgc2V0SW1tZWRpYXRlKGRvbmUsIG51bGwpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBubyBtb3JlIG1hdGNoaW5nIGxheWVyc1xuICAgIGlmIChpZHggPj0gc3RhY2subGVuZ3RoKSB7XG4gICAgICBzZXRJbW1lZGlhdGUoZG9uZSwgbGF5ZXJFcnJvcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZ2V0IHBhdGhuYW1lIG9mIHJlcXVlc3RcbiAgICB2YXIgcGF0aCA9IGdldFBhdGhuYW1lKHJlcSk7XG5cbiAgICBpZiAocGF0aCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZG9uZShsYXllckVycm9yKTtcbiAgICB9XG5cbiAgICAvLyBmaW5kIG5leHQgbWF0Y2hpbmcgbGF5ZXJcbiAgICB2YXIgbGF5ZXI7XG4gICAgdmFyIG1hdGNoO1xuICAgIHZhciByb3V0ZTtcblxuICAgIHdoaWxlIChtYXRjaCAhPT0gdHJ1ZSAmJiBpZHggPCBzdGFjay5sZW5ndGgpIHtcbiAgICAgIGxheWVyID0gc3RhY2tbaWR4KytdO1xuICAgICAgbWF0Y2ggPSBtYXRjaExheWVyKGxheWVyLCBwYXRoKTtcbiAgICAgIHJvdXRlID0gbGF5ZXIucm91dGU7XG5cbiAgICAgIGlmICh0eXBlb2YgbWF0Y2ggIT09ICdib29sZWFuJykge1xuICAgICAgICAvLyBob2xkIG9uIHRvIGxheWVyRXJyb3JcbiAgICAgICAgbGF5ZXJFcnJvciA9IGxheWVyRXJyb3IgfHwgbWF0Y2g7XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXRjaCAhPT0gdHJ1ZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyb3V0ZSkge1xuICAgICAgICAvLyBwcm9jZXNzIG5vbi1yb3V0ZSBoYW5kbGVycyBub3JtYWxseVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxheWVyRXJyb3IpIHtcbiAgICAgICAgLy8gcm91dGVzIGRvIG5vdCBtYXRjaCB3aXRoIGEgcGVuZGluZyBlcnJvclxuICAgICAgICBtYXRjaCA9IGZhbHNlO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIG1ldGhvZCA9IHJlcS5tZXRob2Q7XG4gICAgICB2YXIgaGFzX21ldGhvZCA9IHJvdXRlLl9oYW5kbGVzX21ldGhvZChtZXRob2QpO1xuXG4gICAgICAvLyBidWlsZCB1cCBhdXRvbWF0aWMgb3B0aW9ucyByZXNwb25zZVxuICAgICAgaWYgKCFoYXNfbWV0aG9kICYmIG1ldGhvZCA9PT0gJ09QVElPTlMnKSB7XG4gICAgICAgIGFwcGVuZE1ldGhvZHMob3B0aW9ucywgcm91dGUuX29wdGlvbnMoKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGRvbid0IGV2ZW4gYm90aGVyIG1hdGNoaW5nIHJvdXRlXG4gICAgICBpZiAoIWhhc19tZXRob2QgJiYgbWV0aG9kICE9PSAnSEVBRCcpIHtcbiAgICAgICAgbWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gbm8gbWF0Y2hcbiAgICBpZiAobWF0Y2ggIT09IHRydWUpIHtcbiAgICAgIHJldHVybiBkb25lKGxheWVyRXJyb3IpO1xuICAgIH1cblxuICAgIC8vIHN0b3JlIHJvdXRlIGZvciBkaXNwYXRjaCBvbiBjaGFuZ2VcbiAgICBpZiAocm91dGUpIHtcbiAgICAgIHJlcS5yb3V0ZSA9IHJvdXRlO1xuICAgIH1cblxuICAgIC8vIENhcHR1cmUgb25lLXRpbWUgbGF5ZXIgdmFsdWVzXG4gICAgcmVxLnBhcmFtcyA9IHNlbGYubWVyZ2VQYXJhbXNcbiAgICAgID8gbWVyZ2VQYXJhbXMobGF5ZXIucGFyYW1zLCBwYXJlbnRQYXJhbXMpXG4gICAgICA6IGxheWVyLnBhcmFtcztcbiAgICB2YXIgbGF5ZXJQYXRoID0gbGF5ZXIucGF0aDtcblxuICAgIC8vIHRoaXMgc2hvdWxkIGJlIGRvbmUgZm9yIHRoZSBsYXllclxuICAgIHNlbGYucHJvY2Vzc19wYXJhbXMobGF5ZXIsIHBhcmFtY2FsbGVkLCByZXEsIHJlcywgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gbmV4dChsYXllckVycm9yIHx8IGVycik7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb3V0ZSkge1xuICAgICAgICByZXR1cm4gbGF5ZXIuaGFuZGxlX3JlcXVlc3QocmVxLCByZXMsIG5leHQpO1xuICAgICAgfVxuXG4gICAgICB0cmltX3ByZWZpeChsYXllciwgbGF5ZXJFcnJvciwgbGF5ZXJQYXRoLCBwYXRoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyaW1fcHJlZml4KGxheWVyLCBsYXllckVycm9yLCBsYXllclBhdGgsIHBhdGgpIHtcbiAgICBpZiAobGF5ZXJQYXRoLmxlbmd0aCAhPT0gMCkge1xuICAgICAgLy8gVmFsaWRhdGUgcGF0aCBicmVha3Mgb24gYSBwYXRoIHNlcGFyYXRvclxuICAgICAgdmFyIGMgPSBwYXRoW2xheWVyUGF0aC5sZW5ndGhdXG4gICAgICBpZiAoYyAmJiBjICE9PSAnLycgJiYgYyAhPT0gJy4nKSByZXR1cm4gbmV4dChsYXllckVycm9yKVxuXG4gICAgICAvLyBUcmltIG9mZiB0aGUgcGFydCBvZiB0aGUgdXJsIHRoYXQgbWF0Y2hlcyB0aGUgcm91dGVcbiAgICAgIC8vIG1pZGRsZXdhcmUgKC51c2Ugc3R1ZmYpIG5lZWRzIHRvIGhhdmUgdGhlIHBhdGggc3RyaXBwZWRcbiAgICAgIGRlYnVnKCd0cmltIHByZWZpeCAoJXMpIGZyb20gdXJsICVzJywgbGF5ZXJQYXRoLCByZXEudXJsKTtcbiAgICAgIHJlbW92ZWQgPSBsYXllclBhdGg7XG4gICAgICByZXEudXJsID0gcHJvdG9ob3N0ICsgcmVxLnVybC5zdWJzdHIocHJvdG9ob3N0Lmxlbmd0aCArIHJlbW92ZWQubGVuZ3RoKTtcblxuICAgICAgLy8gRW5zdXJlIGxlYWRpbmcgc2xhc2hcbiAgICAgIGlmICghcHJvdG9ob3N0ICYmIHJlcS51cmxbMF0gIT09ICcvJykge1xuICAgICAgICByZXEudXJsID0gJy8nICsgcmVxLnVybDtcbiAgICAgICAgc2xhc2hBZGRlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIFNldHVwIGJhc2UgVVJMIChubyB0cmFpbGluZyBzbGFzaClcbiAgICAgIHJlcS5iYXNlVXJsID0gcGFyZW50VXJsICsgKHJlbW92ZWRbcmVtb3ZlZC5sZW5ndGggLSAxXSA9PT0gJy8nXG4gICAgICAgID8gcmVtb3ZlZC5zdWJzdHJpbmcoMCwgcmVtb3ZlZC5sZW5ndGggLSAxKVxuICAgICAgICA6IHJlbW92ZWQpO1xuICAgIH1cblxuICAgIGRlYnVnKCclcyAlcyA6ICVzJywgbGF5ZXIubmFtZSwgbGF5ZXJQYXRoLCByZXEub3JpZ2luYWxVcmwpO1xuXG4gICAgaWYgKGxheWVyRXJyb3IpIHtcbiAgICAgIGxheWVyLmhhbmRsZV9lcnJvcihsYXllckVycm9yLCByZXEsIHJlcywgbmV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxheWVyLmhhbmRsZV9yZXF1ZXN0KHJlcSwgcmVzLCBuZXh0KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogUHJvY2VzcyBhbnkgcGFyYW1ldGVycyBmb3IgdGhlIGxheWVyLlxuICogQHByaXZhdGVcbiAqL1xuXG5wcm90by5wcm9jZXNzX3BhcmFtcyA9IGZ1bmN0aW9uIHByb2Nlc3NfcGFyYW1zKGxheWVyLCBjYWxsZWQsIHJlcSwgcmVzLCBkb25lKSB7XG4gIHZhciBwYXJhbXMgPSB0aGlzLnBhcmFtcztcblxuICAvLyBjYXB0dXJlZCBwYXJhbWV0ZXJzIGZyb20gdGhlIGxheWVyLCBrZXlzIGFuZCB2YWx1ZXNcbiAgdmFyIGtleXMgPSBsYXllci5rZXlzO1xuXG4gIC8vIGZhc3QgdHJhY2tcbiAgaWYgKCFrZXlzIHx8IGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGRvbmUoKTtcbiAgfVxuXG4gIHZhciBpID0gMDtcbiAgdmFyIG5hbWU7XG4gIHZhciBwYXJhbUluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgdmFyIHBhcmFtVmFsO1xuICB2YXIgcGFyYW1DYWxsYmFja3M7XG4gIHZhciBwYXJhbUNhbGxlZDtcblxuICAvLyBwcm9jZXNzIHBhcmFtcyBpbiBvcmRlclxuICAvLyBwYXJhbSBjYWxsYmFja3MgY2FuIGJlIGFzeW5jXG4gIGZ1bmN0aW9uIHBhcmFtKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgfVxuXG4gICAgaWYgKGkgPj0ga2V5cy5sZW5ndGggKSB7XG4gICAgICByZXR1cm4gZG9uZSgpO1xuICAgIH1cblxuICAgIHBhcmFtSW5kZXggPSAwO1xuICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICBuYW1lID0ga2V5Lm5hbWU7XG4gICAgcGFyYW1WYWwgPSByZXEucGFyYW1zW25hbWVdO1xuICAgIHBhcmFtQ2FsbGJhY2tzID0gcGFyYW1zW25hbWVdO1xuICAgIHBhcmFtQ2FsbGVkID0gY2FsbGVkW25hbWVdO1xuXG4gICAgaWYgKHBhcmFtVmFsID09PSB1bmRlZmluZWQgfHwgIXBhcmFtQ2FsbGJhY2tzKSB7XG4gICAgICByZXR1cm4gcGFyYW0oKTtcbiAgICB9XG5cbiAgICAvLyBwYXJhbSBwcmV2aW91c2x5IGNhbGxlZCB3aXRoIHNhbWUgdmFsdWUgb3IgZXJyb3Igb2NjdXJyZWRcbiAgICBpZiAocGFyYW1DYWxsZWQgJiYgKHBhcmFtQ2FsbGVkLm1hdGNoID09PSBwYXJhbVZhbFxuICAgICAgfHwgKHBhcmFtQ2FsbGVkLmVycm9yICYmIHBhcmFtQ2FsbGVkLmVycm9yICE9PSAncm91dGUnKSkpIHtcbiAgICAgIC8vIHJlc3RvcmUgdmFsdWVcbiAgICAgIHJlcS5wYXJhbXNbbmFtZV0gPSBwYXJhbUNhbGxlZC52YWx1ZTtcblxuICAgICAgLy8gbmV4dCBwYXJhbVxuICAgICAgcmV0dXJuIHBhcmFtKHBhcmFtQ2FsbGVkLmVycm9yKTtcbiAgICB9XG5cbiAgICBjYWxsZWRbbmFtZV0gPSBwYXJhbUNhbGxlZCA9IHtcbiAgICAgIGVycm9yOiBudWxsLFxuICAgICAgbWF0Y2g6IHBhcmFtVmFsLFxuICAgICAgdmFsdWU6IHBhcmFtVmFsXG4gICAgfTtcblxuICAgIHBhcmFtQ2FsbGJhY2soKTtcbiAgfVxuXG4gIC8vIHNpbmdsZSBwYXJhbSBjYWxsYmFja3NcbiAgZnVuY3Rpb24gcGFyYW1DYWxsYmFjayhlcnIpIHtcbiAgICB2YXIgZm4gPSBwYXJhbUNhbGxiYWNrc1twYXJhbUluZGV4KytdO1xuXG4gICAgLy8gc3RvcmUgdXBkYXRlZCB2YWx1ZVxuICAgIHBhcmFtQ2FsbGVkLnZhbHVlID0gcmVxLnBhcmFtc1trZXkubmFtZV07XG5cbiAgICBpZiAoZXJyKSB7XG4gICAgICAvLyBzdG9yZSBlcnJvclxuICAgICAgcGFyYW1DYWxsZWQuZXJyb3IgPSBlcnI7XG4gICAgICBwYXJhbShlcnIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZm4pIHJldHVybiBwYXJhbSgpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZuKHJlcSwgcmVzLCBwYXJhbUNhbGxiYWNrLCBwYXJhbVZhbCwga2V5Lm5hbWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHBhcmFtQ2FsbGJhY2soZSk7XG4gICAgfVxuICB9XG5cbiAgcGFyYW0oKTtcbn07XG5cbi8qKlxuICogVXNlIHRoZSBnaXZlbiBtaWRkbGV3YXJlIGZ1bmN0aW9uLCB3aXRoIG9wdGlvbmFsIHBhdGgsIGRlZmF1bHRpbmcgdG8gXCIvXCIuXG4gKlxuICogVXNlIChsaWtlIGAuYWxsYCkgd2lsbCBydW4gZm9yIGFueSBodHRwIE1FVEhPRCwgYnV0IGl0IHdpbGwgbm90IGFkZFxuICogaGFuZGxlcnMgZm9yIHRob3NlIG1ldGhvZHMgc28gT1BUSU9OUyByZXF1ZXN0cyB3aWxsIG5vdCBjb25zaWRlciBgLnVzZWBcbiAqIGZ1bmN0aW9ucyBldmVuIGlmIHRoZXkgY291bGQgcmVzcG9uZC5cbiAqXG4gKiBUaGUgb3RoZXIgZGlmZmVyZW5jZSBpcyB0aGF0IF9yb3V0ZV8gcGF0aCBpcyBzdHJpcHBlZCBhbmQgbm90IHZpc2libGVcbiAqIHRvIHRoZSBoYW5kbGVyIGZ1bmN0aW9uLiBUaGUgbWFpbiBlZmZlY3Qgb2YgdGhpcyBmZWF0dXJlIGlzIHRoYXQgbW91bnRlZFxuICogaGFuZGxlcnMgY2FuIG9wZXJhdGUgd2l0aG91dCBhbnkgY29kZSBjaGFuZ2VzIHJlZ2FyZGxlc3Mgb2YgdGhlIFwicHJlZml4XCJcbiAqIHBhdGhuYW1lLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuXG5wcm90by51c2UgPSBmdW5jdGlvbiB1c2UoZm4pIHtcbiAgdmFyIG9mZnNldCA9IDA7XG4gIHZhciBwYXRoID0gJy8nO1xuXG4gIC8vIGRlZmF1bHQgcGF0aCB0byAnLydcbiAgLy8gZGlzYW1iaWd1YXRlIHJvdXRlci51c2UoW2ZuXSlcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBhcmcgPSBmbjtcblxuICAgIHdoaWxlIChBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnLmxlbmd0aCAhPT0gMCkge1xuICAgICAgYXJnID0gYXJnWzBdO1xuICAgIH1cblxuICAgIC8vIGZpcnN0IGFyZyBpcyB0aGUgcGF0aFxuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvZmZzZXQgPSAxO1xuICAgICAgcGF0aCA9IGZuO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjYWxsYmFja3MgPSBmbGF0dGVuKHNsaWNlLmNhbGwoYXJndW1lbnRzLCBvZmZzZXQpKTtcblxuICBpZiAoY2FsbGJhY2tzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JvdXRlci51c2UoKSByZXF1aXJlcyBhIG1pZGRsZXdhcmUgZnVuY3Rpb24nKVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZm4gPSBjYWxsYmFja3NbaV07XG5cbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSb3V0ZXIudXNlKCkgcmVxdWlyZXMgYSBtaWRkbGV3YXJlIGZ1bmN0aW9uIGJ1dCBnb3QgYSAnICsgZ2V0dHlwZShmbikpXG4gICAgfVxuXG4gICAgLy8gYWRkIHRoZSBtaWRkbGV3YXJlXG4gICAgZGVidWcoJ3VzZSAlbyAlcycsIHBhdGgsIGZuLm5hbWUgfHwgJzxhbm9ueW1vdXM+JylcblxuICAgIHZhciBsYXllciA9IG5ldyBMYXllcihwYXRoLCB7XG4gICAgICBzZW5zaXRpdmU6IHRoaXMuY2FzZVNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdDogZmFsc2UsXG4gICAgICBlbmQ6IGZhbHNlXG4gICAgfSwgZm4pO1xuXG4gICAgbGF5ZXIucm91dGUgPSB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLnN0YWNrLnB1c2gobGF5ZXIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBSb3V0ZSBmb3IgdGhlIGdpdmVuIHBhdGguXG4gKlxuICogRWFjaCByb3V0ZSBjb250YWlucyBhIHNlcGFyYXRlIG1pZGRsZXdhcmUgc3RhY2sgYW5kIFZFUkIgaGFuZGxlcnMuXG4gKlxuICogU2VlIHRoZSBSb3V0ZSBhcGkgZG9jdW1lbnRhdGlvbiBmb3IgZGV0YWlscyBvbiBhZGRpbmcgaGFuZGxlcnNcbiAqIGFuZCBtaWRkbGV3YXJlIHRvIHJvdXRlcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHJldHVybiB7Um91dGV9XG4gKiBAcHVibGljXG4gKi9cblxucHJvdG8ucm91dGUgPSBmdW5jdGlvbiByb3V0ZShwYXRoKSB7XG4gIHZhciByb3V0ZSA9IG5ldyBSb3V0ZShwYXRoKTtcblxuICB2YXIgbGF5ZXIgPSBuZXcgTGF5ZXIocGF0aCwge1xuICAgIHNlbnNpdGl2ZTogdGhpcy5jYXNlU2Vuc2l0aXZlLFxuICAgIHN0cmljdDogdGhpcy5zdHJpY3QsXG4gICAgZW5kOiB0cnVlXG4gIH0sIHJvdXRlLmRpc3BhdGNoLmJpbmQocm91dGUpKTtcblxuICBsYXllci5yb3V0ZSA9IHJvdXRlO1xuXG4gIHRoaXMuc3RhY2sucHVzaChsYXllcik7XG4gIHJldHVybiByb3V0ZTtcbn07XG5cbi8vIGNyZWF0ZSBSb3V0ZXIjVkVSQiBmdW5jdGlvbnNcbm1ldGhvZHMuY29uY2F0KCdhbGwnKS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCl7XG4gIHByb3RvW21ldGhvZF0gPSBmdW5jdGlvbihwYXRoKXtcbiAgICB2YXIgcm91dGUgPSB0aGlzLnJvdXRlKHBhdGgpXG4gICAgcm91dGVbbWV0aG9kXS5hcHBseShyb3V0ZSwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn0pO1xuXG4vLyBhcHBlbmQgbWV0aG9kcyB0byBhIGxpc3Qgb2YgbWV0aG9kc1xuZnVuY3Rpb24gYXBwZW5kTWV0aG9kcyhsaXN0LCBhZGRpdGlvbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFkZGl0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1ldGhvZCA9IGFkZGl0aW9uW2ldO1xuICAgIGlmIChsaXN0LmluZGV4T2YobWV0aG9kKSA9PT0gLTEpIHtcbiAgICAgIGxpc3QucHVzaChtZXRob2QpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBnZXQgcGF0aG5hbWUgb2YgcmVxdWVzdFxuZnVuY3Rpb24gZ2V0UGF0aG5hbWUocmVxKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHBhcnNlVXJsKHJlcSkucGF0aG5hbWU7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLy8gR2V0IGdldCBwcm90b2NvbCArIGhvc3QgZm9yIGEgVVJMXG5mdW5jdGlvbiBnZXRQcm90b2hvc3QodXJsKSB7XG4gIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJyB8fCB1cmwubGVuZ3RoID09PSAwIHx8IHVybFswXSA9PT0gJy8nKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gdXJsLmluZGV4T2YoJz8nKVxuICB2YXIgcGF0aExlbmd0aCA9IHNlYXJjaEluZGV4ICE9PSAtMVxuICAgID8gc2VhcmNoSW5kZXhcbiAgICA6IHVybC5sZW5ndGhcbiAgdmFyIGZxZG5JbmRleCA9IHVybC5zdWJzdHIoMCwgcGF0aExlbmd0aCkuaW5kZXhPZignOi8vJylcblxuICByZXR1cm4gZnFkbkluZGV4ICE9PSAtMVxuICAgID8gdXJsLnN1YnN0cigwLCB1cmwuaW5kZXhPZignLycsIDMgKyBmcWRuSW5kZXgpKVxuICAgIDogdW5kZWZpbmVkXG59XG5cbi8vIGdldCB0eXBlIGZvciBlcnJvciBtZXNzYWdlXG5mdW5jdGlvbiBnZXR0eXBlKG9iaikge1xuICB2YXIgdHlwZSA9IHR5cGVvZiBvYmo7XG5cbiAgaWYgKHR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cblxuICAvLyBpbnNwZWN0IFtbQ2xhc3NdXSBmb3Igb2JqZWN0c1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopXG4gICAgLnJlcGxhY2Uob2JqZWN0UmVnRXhwLCAnJDEnKTtcbn1cblxuLyoqXG4gKiBNYXRjaCBwYXRoIHRvIGEgbGF5ZXIuXG4gKlxuICogQHBhcmFtIHtMYXllcn0gbGF5ZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG1hdGNoTGF5ZXIobGF5ZXIsIHBhdGgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbGF5ZXIubWF0Y2gocGF0aCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBlcnI7XG4gIH1cbn1cblxuLy8gbWVyZ2UgcGFyYW1zIHdpdGggcGFyZW50IHBhcmFtc1xuZnVuY3Rpb24gbWVyZ2VQYXJhbXMocGFyYW1zLCBwYXJlbnQpIHtcbiAgaWYgKHR5cGVvZiBwYXJlbnQgIT09ICdvYmplY3QnIHx8ICFwYXJlbnQpIHtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG5cbiAgLy8gbWFrZSBjb3B5IG9mIHBhcmVudCBmb3IgYmFzZVxuICB2YXIgb2JqID0gbWl4aW4oe30sIHBhcmVudCk7XG5cbiAgLy8gc2ltcGxlIG5vbi1udW1lcmljIG1lcmdpbmdcbiAgaWYgKCEoMCBpbiBwYXJhbXMpIHx8ICEoMCBpbiBwYXJlbnQpKSB7XG4gICAgcmV0dXJuIG1peGluKG9iaiwgcGFyYW1zKTtcbiAgfVxuXG4gIHZhciBpID0gMDtcbiAgdmFyIG8gPSAwO1xuXG4gIC8vIGRldGVybWluZSBudW1lcmljIGdhcHNcbiAgd2hpbGUgKGkgaW4gcGFyYW1zKSB7XG4gICAgaSsrO1xuICB9XG5cbiAgd2hpbGUgKG8gaW4gcGFyZW50KSB7XG4gICAgbysrO1xuICB9XG5cbiAgLy8gb2Zmc2V0IG51bWVyaWMgaW5kaWNlcyBpbiBwYXJhbXMgYmVmb3JlIG1lcmdlXG4gIGZvciAoaS0tOyBpID49IDA7IGktLSkge1xuICAgIHBhcmFtc1tpICsgb10gPSBwYXJhbXNbaV07XG5cbiAgICAvLyBjcmVhdGUgaG9sZXMgZm9yIHRoZSBtZXJnZSB3aGVuIG5lY2Vzc2FyeVxuICAgIGlmIChpIDwgbykge1xuICAgICAgZGVsZXRlIHBhcmFtc1tpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWl4aW4ob2JqLCBwYXJhbXMpO1xufVxuXG4vLyByZXN0b3JlIG9iaiBwcm9wcyBhZnRlciBmdW5jdGlvblxuZnVuY3Rpb24gcmVzdG9yZShmbiwgb2JqKSB7XG4gIHZhciBwcm9wcyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMik7XG4gIHZhciB2YWxzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAyKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgcHJvcHNbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIHZhbHNbaV0gPSBvYmpbcHJvcHNbaV1dO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAvLyByZXN0b3JlIHZhbHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmpbcHJvcHNbaV1dID0gdmFsc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuLy8gc2VuZCBhbiBPUFRJT05TIHJlc3BvbnNlXG5mdW5jdGlvbiBzZW5kT3B0aW9uc1Jlc3BvbnNlKHJlcywgb3B0aW9ucywgbmV4dCkge1xuICB0cnkge1xuICAgIHZhciBib2R5ID0gb3B0aW9ucy5qb2luKCcsJyk7XG4gICAgcmVzLnNldCgnQWxsb3cnLCBib2R5KTtcbiAgICByZXMuc2VuZChib2R5KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbmV4dChlcnIpO1xuICB9XG59XG5cbi8vIHdyYXAgYSBmdW5jdGlvblxuZnVuY3Rpb24gd3JhcChvbGQsIGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwcm94eSgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoICsgMSk7XG5cbiAgICBhcmdzWzBdID0gb2xkO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFyZ3NbaSArIDFdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9O1xufVxuIiwiLyohXG4gKiBleHByZXNzXG4gKiBDb3B5cmlnaHQoYykgMjAwOS0yMDEzIFRKIEhvbG93YXljaHVrXG4gKiBDb3B5cmlnaHQoYykgMjAxMyBSb21hbiBTaHR5bG1hblxuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2V4cHJlc3M6cm91dGVyOnJvdXRlJyk7XG52YXIgZmxhdHRlbiA9IHJlcXVpcmUoJ2FycmF5LWZsYXR0ZW4nKTtcbnZhciBMYXllciA9IHJlcXVpcmUoJy4vbGF5ZXInKTtcbnZhciBtZXRob2RzID0gcmVxdWlyZSgnbWV0aG9kcycpO1xuXG4vKipcbiAqIE1vZHVsZSB2YXJpYWJsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBSb3V0ZTtcblxuLyoqXG4gKiBJbml0aWFsaXplIGBSb3V0ZWAgd2l0aCB0aGUgZ2l2ZW4gYHBhdGhgLFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gUm91dGUocGF0aCkge1xuICB0aGlzLnBhdGggPSBwYXRoO1xuICB0aGlzLnN0YWNrID0gW107XG5cbiAgZGVidWcoJ25ldyAlbycsIHBhdGgpXG5cbiAgLy8gcm91dGUgaGFuZGxlcnMgZm9yIHZhcmlvdXMgaHR0cCBtZXRob2RzXG4gIHRoaXMubWV0aG9kcyA9IHt9O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB0aGUgcm91dGUgaGFuZGxlcyBhIGdpdmVuIG1ldGhvZC5cbiAqIEBwcml2YXRlXG4gKi9cblxuUm91dGUucHJvdG90eXBlLl9oYW5kbGVzX21ldGhvZCA9IGZ1bmN0aW9uIF9oYW5kbGVzX21ldGhvZChtZXRob2QpIHtcbiAgaWYgKHRoaXMubWV0aG9kcy5fYWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgbmFtZSA9IG1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmIChuYW1lID09PSAnaGVhZCcgJiYgIXRoaXMubWV0aG9kc1snaGVhZCddKSB7XG4gICAgbmFtZSA9ICdnZXQnO1xuICB9XG5cbiAgcmV0dXJuIEJvb2xlYW4odGhpcy5tZXRob2RzW25hbWVdKTtcbn07XG5cbi8qKlxuICogQHJldHVybiB7QXJyYXl9IHN1cHBvcnRlZCBIVFRQIG1ldGhvZHNcbiAqIEBwcml2YXRlXG4gKi9cblxuUm91dGUucHJvdG90eXBlLl9vcHRpb25zID0gZnVuY3Rpb24gX29wdGlvbnMoKSB7XG4gIHZhciBtZXRob2RzID0gT2JqZWN0LmtleXModGhpcy5tZXRob2RzKTtcblxuICAvLyBhcHBlbmQgYXV0b21hdGljIGhlYWRcbiAgaWYgKHRoaXMubWV0aG9kcy5nZXQgJiYgIXRoaXMubWV0aG9kcy5oZWFkKSB7XG4gICAgbWV0aG9kcy5wdXNoKCdoZWFkJyk7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG1ldGhvZHMubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBtYWtlIHVwcGVyIGNhc2VcbiAgICBtZXRob2RzW2ldID0gbWV0aG9kc1tpXS50b1VwcGVyQ2FzZSgpO1xuICB9XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG4vKipcbiAqIGRpc3BhdGNoIHJlcSwgcmVzIGludG8gdGhpcyByb3V0ZVxuICogQHByaXZhdGVcbiAqL1xuXG5Sb3V0ZS5wcm90b3R5cGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaChyZXEsIHJlcywgZG9uZSkge1xuICB2YXIgaWR4ID0gMDtcbiAgdmFyIHN0YWNrID0gdGhpcy5zdGFjaztcbiAgaWYgKHN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBkb25lKCk7XG4gIH1cblxuICB2YXIgbWV0aG9kID0gcmVxLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICBpZiAobWV0aG9kID09PSAnaGVhZCcgJiYgIXRoaXMubWV0aG9kc1snaGVhZCddKSB7XG4gICAgbWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICByZXEucm91dGUgPSB0aGlzO1xuXG4gIG5leHQoKTtcblxuICBmdW5jdGlvbiBuZXh0KGVycikge1xuICAgIC8vIHNpZ25hbCB0byBleGl0IHJvdXRlXG4gICAgaWYgKGVyciAmJiBlcnIgPT09ICdyb3V0ZScpIHtcbiAgICAgIHJldHVybiBkb25lKCk7XG4gICAgfVxuXG4gICAgLy8gc2lnbmFsIHRvIGV4aXQgcm91dGVyXG4gICAgaWYgKGVyciAmJiBlcnIgPT09ICdyb3V0ZXInKSB7XG4gICAgICByZXR1cm4gZG9uZShlcnIpXG4gICAgfVxuXG4gICAgdmFyIGxheWVyID0gc3RhY2tbaWR4KytdO1xuICAgIGlmICghbGF5ZXIpIHtcbiAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgfVxuXG4gICAgaWYgKGxheWVyLm1ldGhvZCAmJiBsYXllci5tZXRob2QgIT09IG1ldGhvZCkge1xuICAgICAgcmV0dXJuIG5leHQoZXJyKTtcbiAgICB9XG5cbiAgICBpZiAoZXJyKSB7XG4gICAgICBsYXllci5oYW5kbGVfZXJyb3IoZXJyLCByZXEsIHJlcywgbmV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxheWVyLmhhbmRsZV9yZXF1ZXN0KHJlcSwgcmVzLCBuZXh0KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQWRkIGEgaGFuZGxlciBmb3IgYWxsIEhUVFAgdmVyYnMgdG8gdGhpcyByb3V0ZS5cbiAqXG4gKiBCZWhhdmVzIGp1c3QgbGlrZSBtaWRkbGV3YXJlIGFuZCBjYW4gcmVzcG9uZCBvciBjYWxsIGBuZXh0YFxuICogdG8gY29udGludWUgcHJvY2Vzc2luZy5cbiAqXG4gKiBZb3UgY2FuIHVzZSBtdWx0aXBsZSBgLmFsbGAgY2FsbCB0byBhZGQgbXVsdGlwbGUgaGFuZGxlcnMuXG4gKlxuICogICBmdW5jdGlvbiBjaGVja19zb21ldGhpbmcocmVxLCByZXMsIG5leHQpe1xuICogICAgIG5leHQoKTtcbiAqICAgfTtcbiAqXG4gKiAgIGZ1bmN0aW9uIHZhbGlkYXRlX3VzZXIocmVxLCByZXMsIG5leHQpe1xuICogICAgIG5leHQoKTtcbiAqICAgfTtcbiAqXG4gKiAgIHJvdXRlXG4gKiAgIC5hbGwodmFsaWRhdGVfdXNlcilcbiAqICAgLmFsbChjaGVja19zb21ldGhpbmcpXG4gKiAgIC5nZXQoZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpe1xuICogICAgIHJlcy5zZW5kKCdoZWxsbyB3b3JsZCcpO1xuICogICB9KTtcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBoYW5kbGVyXG4gKiBAcmV0dXJuIHtSb3V0ZX0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJvdXRlLnByb3RvdHlwZS5hbGwgPSBmdW5jdGlvbiBhbGwoKSB7XG4gIHZhciBoYW5kbGVzID0gZmxhdHRlbihzbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBoYW5kbGUgPSBoYW5kbGVzW2ldO1xuXG4gICAgaWYgKHR5cGVvZiBoYW5kbGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciB0eXBlID0gdG9TdHJpbmcuY2FsbChoYW5kbGUpO1xuICAgICAgdmFyIG1zZyA9ICdSb3V0ZS5hbGwoKSByZXF1aXJlcyBhIGNhbGxiYWNrIGZ1bmN0aW9uIGJ1dCBnb3QgYSAnICsgdHlwZVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihtc2cpO1xuICAgIH1cblxuICAgIHZhciBsYXllciA9IExheWVyKCcvJywge30sIGhhbmRsZSk7XG4gICAgbGF5ZXIubWV0aG9kID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5tZXRob2RzLl9hbGwgPSB0cnVlO1xuICAgIHRoaXMuc3RhY2sucHVzaChsYXllcik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbm1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihtZXRob2Qpe1xuICBSb3V0ZS5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGhhbmRsZXMgPSBmbGF0dGVuKHNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoYW5kbGUgPSBoYW5kbGVzW2ldO1xuXG4gICAgICBpZiAodHlwZW9mIGhhbmRsZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgdHlwZSA9IHRvU3RyaW5nLmNhbGwoaGFuZGxlKTtcbiAgICAgICAgdmFyIG1zZyA9ICdSb3V0ZS4nICsgbWV0aG9kICsgJygpIHJlcXVpcmVzIGEgY2FsbGJhY2sgZnVuY3Rpb24gYnV0IGdvdCBhICcgKyB0eXBlXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfVxuXG4gICAgICBkZWJ1ZygnJXMgJW8nLCBtZXRob2QsIHRoaXMucGF0aClcblxuICAgICAgdmFyIGxheWVyID0gTGF5ZXIoJy8nLCB7fSwgaGFuZGxlKTtcbiAgICAgIGxheWVyLm1ldGhvZCA9IG1ldGhvZDtcblxuICAgICAgdGhpcy5tZXRob2RzW21ldGhvZF0gPSB0cnVlO1xuICAgICAgdGhpcy5zdGFjay5wdXNoKGxheWVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn0pO1xuIiwiLyohXG4gKiBleHByZXNzXG4gKiBDb3B5cmlnaHQoYykgMjAwOS0yMDEzIFRKIEhvbG93YXljaHVrXG4gKiBDb3B5cmlnaHQoYykgMjAxMyBSb21hbiBTaHR5bG1hblxuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBwYXRoUmVnZXhwID0gcmVxdWlyZSgncGF0aC10by1yZWdleHAnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2V4cHJlc3M6cm91dGVyOmxheWVyJyk7XG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IExheWVyO1xuXG5mdW5jdGlvbiBMYXllcihwYXRoLCBvcHRpb25zLCBmbikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTGF5ZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBMYXllcihwYXRoLCBvcHRpb25zLCBmbik7XG4gIH1cblxuICBkZWJ1ZygnbmV3ICVvJywgcGF0aClcbiAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHRoaXMuaGFuZGxlID0gZm47XG4gIHRoaXMubmFtZSA9IGZuLm5hbWUgfHwgJzxhbm9ueW1vdXM+JztcbiAgdGhpcy5wYXJhbXMgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGF0aCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5yZWdleHAgPSBwYXRoUmVnZXhwKHBhdGgsIHRoaXMua2V5cyA9IFtdLCBvcHRzKTtcblxuICAvLyBzZXQgZmFzdCBwYXRoIGZsYWdzXG4gIHRoaXMucmVnZXhwLmZhc3Rfc3RhciA9IHBhdGggPT09ICcqJ1xuICB0aGlzLnJlZ2V4cC5mYXN0X3NsYXNoID0gcGF0aCA9PT0gJy8nICYmIG9wdHMuZW5kID09PSBmYWxzZVxufVxuXG4vKipcbiAqIEhhbmRsZSB0aGUgZXJyb3IgZm9yIHRoZSBsYXllci5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvclxuICogQHBhcmFtIHtSZXF1ZXN0fSByZXFcbiAqIEBwYXJhbSB7UmVzcG9uc2V9IHJlc1xuICogQHBhcmFtIHtmdW5jdGlvbn0gbmV4dFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTGF5ZXIucHJvdG90eXBlLmhhbmRsZV9lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZV9lcnJvcihlcnJvciwgcmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGZuID0gdGhpcy5oYW5kbGU7XG5cbiAgaWYgKGZuLmxlbmd0aCAhPT0gNCkge1xuICAgIC8vIG5vdCBhIHN0YW5kYXJkIGVycm9yIGhhbmRsZXJcbiAgICByZXR1cm4gbmV4dChlcnJvcik7XG4gIH1cblxuICB0cnkge1xuICAgIGZuKGVycm9yLCByZXEsIHJlcywgbmV4dCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIG5leHQoZXJyKTtcbiAgfVxufTtcblxuLyoqXG4gKiBIYW5kbGUgdGhlIHJlcXVlc3QgZm9yIHRoZSBsYXllci5cbiAqXG4gKiBAcGFyYW0ge1JlcXVlc3R9IHJlcVxuICogQHBhcmFtIHtSZXNwb25zZX0gcmVzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBuZXh0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5MYXllci5wcm90b3R5cGUuaGFuZGxlX3JlcXVlc3QgPSBmdW5jdGlvbiBoYW5kbGUocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGZuID0gdGhpcy5oYW5kbGU7XG5cbiAgaWYgKGZuLmxlbmd0aCA+IDMpIHtcbiAgICAvLyBub3QgYSBzdGFuZGFyZCByZXF1ZXN0IGhhbmRsZXJcbiAgICByZXR1cm4gbmV4dCgpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBmbihyZXEsIHJlcywgbmV4dCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIG5leHQoZXJyKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGlzIHJvdXRlIG1hdGNoZXMgYHBhdGhgLCBpZiBzb1xuICogcG9wdWxhdGUgYC5wYXJhbXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTGF5ZXIucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24gbWF0Y2gocGF0aCkge1xuICB2YXIgbWF0Y2hcblxuICBpZiAocGF0aCAhPSBudWxsKSB7XG4gICAgLy8gZmFzdCBwYXRoIG5vbi1lbmRpbmcgbWF0Y2ggZm9yIC8gKGFueSBwYXRoIG1hdGNoZXMpXG4gICAgaWYgKHRoaXMucmVnZXhwLmZhc3Rfc2xhc2gpIHtcbiAgICAgIHRoaXMucGFyYW1zID0ge31cbiAgICAgIHRoaXMucGF0aCA9ICcnXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIC8vIGZhc3QgcGF0aCBmb3IgKiAoZXZlcnl0aGluZyBtYXRjaGVkIGluIGEgcGFyYW0pXG4gICAgaWYgKHRoaXMucmVnZXhwLmZhc3Rfc3Rhcikge1xuICAgICAgdGhpcy5wYXJhbXMgPSB7JzAnOiBkZWNvZGVfcGFyYW0ocGF0aCl9XG4gICAgICB0aGlzLnBhdGggPSBwYXRoXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIC8vIG1hdGNoIHRoZSBwYXRoXG4gICAgbWF0Y2ggPSB0aGlzLnJlZ2V4cC5leGVjKHBhdGgpXG4gIH1cblxuICBpZiAoIW1hdGNoKSB7XG4gICAgdGhpcy5wYXJhbXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wYXRoID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIHN0b3JlIHZhbHVlc1xuICB0aGlzLnBhcmFtcyA9IHt9O1xuICB0aGlzLnBhdGggPSBtYXRjaFswXVxuXG4gIHZhciBrZXlzID0gdGhpcy5rZXlzO1xuICB2YXIgcGFyYW1zID0gdGhpcy5wYXJhbXM7XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBtYXRjaC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2kgLSAxXTtcbiAgICB2YXIgcHJvcCA9IGtleS5uYW1lO1xuICAgIHZhciB2YWwgPSBkZWNvZGVfcGFyYW0obWF0Y2hbaV0pXG5cbiAgICBpZiAodmFsICE9PSB1bmRlZmluZWQgfHwgIShoYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmFtcywgcHJvcCkpKSB7XG4gICAgICBwYXJhbXNbcHJvcF0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIERlY29kZSBwYXJhbSB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGRlY29kZV9wYXJhbSh2YWwpIHtcbiAgaWYgKHR5cGVvZiB2YWwgIT09ICdzdHJpbmcnIHx8IHZhbC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHZhbCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgZXJyLm1lc3NhZ2UgPSAnRmFpbGVkIHRvIGRlY29kZSBwYXJhbSBcXCcnICsgdmFsICsgJ1xcJyc7XG4gICAgICBlcnIuc3RhdHVzID0gZXJyLnN0YXR1c0NvZGUgPSA0MDA7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyO1xuICB9XG59XG4iLCIvKiFcbiAqIGV4cHJlc3NcbiAqIENvcHlyaWdodChjKSAyMDA5LTIwMTMgVEogSG9sb3dheWNodWtcbiAqIENvcHlyaWdodChjKSAyMDEzIFJvbWFuIFNodHlsbWFuXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgbWVyZ2UgPSByZXF1aXJlKCd1dGlscy1tZXJnZScpXG52YXIgcGFyc2VVcmwgPSByZXF1aXJlKCdwYXJzZXVybCcpO1xudmFyIHFzID0gcmVxdWlyZSgncXMnKTtcblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcXVlcnkob3B0aW9ucykge1xuICB2YXIgb3B0cyA9IG1lcmdlKHt9LCBvcHRpb25zKVxuICB2YXIgcXVlcnlwYXJzZSA9IHFzLnBhcnNlO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHF1ZXJ5cGFyc2UgPSBvcHRpb25zO1xuICAgIG9wdHMgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAob3B0cyAhPT0gdW5kZWZpbmVkICYmIG9wdHMuYWxsb3dQcm90b3R5cGVzID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBiYWNrLWNvbXBhdCBmb3IgcXMgbW9kdWxlXG4gICAgb3B0cy5hbGxvd1Byb3RvdHlwZXMgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHF1ZXJ5KHJlcSwgcmVzLCBuZXh0KXtcbiAgICBpZiAoIXJlcS5xdWVyeSkge1xuICAgICAgdmFyIHZhbCA9IHBhcnNlVXJsKHJlcSkucXVlcnk7XG4gICAgICByZXEucXVlcnkgPSBxdWVyeXBhcnNlKHZhbCwgb3B0cyk7XG4gICAgfVxuXG4gICAgbmV4dCgpO1xuICB9O1xufTtcbiIsImV4cG9ydHMuZmV0Y2ggPSBpc0Z1bmN0aW9uKGdsb2JhbC5mZXRjaCkgJiYgaXNGdW5jdGlvbihnbG9iYWwuUmVhZGFibGVTdHJlYW0pXG5cbmV4cG9ydHMud3JpdGFibGVTdHJlYW0gPSBpc0Z1bmN0aW9uKGdsb2JhbC5Xcml0YWJsZVN0cmVhbSlcblxuZXhwb3J0cy5hYm9ydENvbnRyb2xsZXIgPSBpc0Z1bmN0aW9uKGdsb2JhbC5BYm9ydENvbnRyb2xsZXIpXG5cbmV4cG9ydHMuYmxvYkNvbnN0cnVjdG9yID0gZmFsc2VcbnRyeSB7XG5cdG5ldyBCbG9iKFtuZXcgQXJyYXlCdWZmZXIoMSldKVxuXHRleHBvcnRzLmJsb2JDb25zdHJ1Y3RvciA9IHRydWVcbn0gY2F0Y2ggKGUpIHt9XG5cbi8vIFRoZSB4aHIgcmVxdWVzdCB0byBleGFtcGxlLmNvbSBtYXkgdmlvbGF0ZSBzb21lIHJlc3RyaWN0aXZlIENTUCBjb25maWd1cmF0aW9ucyxcbi8vIHNvIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBicm93c2VyIHRoYXQgc3VwcG9ydHMgYGZldGNoYCwgYXZvaWQgY2FsbGluZyBnZXRYSFIoKVxuLy8gYW5kIGFzc3VtZSBzdXBwb3J0IGZvciBjZXJ0YWluIGZlYXR1cmVzIGJlbG93LlxudmFyIHhoclxuZnVuY3Rpb24gZ2V0WEhSICgpIHtcblx0Ly8gQ2FjaGUgdGhlIHhociB2YWx1ZVxuXHRpZiAoeGhyICE9PSB1bmRlZmluZWQpIHJldHVybiB4aHJcblxuXHRpZiAoZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0KSB7XG5cdFx0eGhyID0gbmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCgpXG5cdFx0Ly8gSWYgWERvbWFpblJlcXVlc3QgaXMgYXZhaWxhYmxlIChpZSBvbmx5LCB3aGVyZSB4aHIgbWlnaHQgbm90IHdvcmtcblx0XHQvLyBjcm9zcyBkb21haW4pLCB1c2UgdGhlIHBhZ2UgbG9jYXRpb24uIE90aGVyd2lzZSB1c2UgZXhhbXBsZS5jb21cblx0XHQvLyBOb3RlOiB0aGlzIGRvZXNuJ3QgYWN0dWFsbHkgbWFrZSBhbiBodHRwIHJlcXVlc3QuXG5cdFx0dHJ5IHtcblx0XHRcdHhoci5vcGVuKCdHRVQnLCBnbG9iYWwuWERvbWFpblJlcXVlc3QgPyAnLycgOiAnaHR0cHM6Ly9leGFtcGxlLmNvbScpXG5cdFx0fSBjYXRjaChlKSB7XG5cdFx0XHR4aHIgPSBudWxsXG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIFNlcnZpY2Ugd29ya2VycyBkb24ndCBoYXZlIFhIUlxuXHRcdHhociA9IG51bGxcblx0fVxuXHRyZXR1cm4geGhyXG59XG5cbmZ1bmN0aW9uIGNoZWNrVHlwZVN1cHBvcnQgKHR5cGUpIHtcblx0dmFyIHhociA9IGdldFhIUigpXG5cdGlmICgheGhyKSByZXR1cm4gZmFsc2Vcblx0dHJ5IHtcblx0XHR4aHIucmVzcG9uc2VUeXBlID0gdHlwZVxuXHRcdHJldHVybiB4aHIucmVzcG9uc2VUeXBlID09PSB0eXBlXG5cdH0gY2F0Y2ggKGUpIHt9XG5cdHJldHVybiBmYWxzZVxufVxuXG4vLyBGb3Igc29tZSBzdHJhbmdlIHJlYXNvbiwgU2FmYXJpIDcuMCByZXBvcnRzIHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgPT09ICdvYmplY3QnLlxuLy8gU2FmYXJpIDcuMSBhcHBlYXJzIHRvIGhhdmUgZml4ZWQgdGhpcyBidWcuXG52YXIgaGF2ZUFycmF5QnVmZmVyID0gdHlwZW9mIGdsb2JhbC5BcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCdcbnZhciBoYXZlU2xpY2UgPSBoYXZlQXJyYXlCdWZmZXIgJiYgaXNGdW5jdGlvbihnbG9iYWwuQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKVxuXG4vLyBJZiBmZXRjaCBpcyBzdXBwb3J0ZWQsIHRoZW4gYXJyYXlidWZmZXIgd2lsbCBiZSBzdXBwb3J0ZWQgdG9vLiBTa2lwIGNhbGxpbmdcbi8vIGNoZWNrVHlwZVN1cHBvcnQoKSwgc2luY2UgdGhhdCBjYWxscyBnZXRYSFIoKS5cbmV4cG9ydHMuYXJyYXlidWZmZXIgPSBleHBvcnRzLmZldGNoIHx8IChoYXZlQXJyYXlCdWZmZXIgJiYgY2hlY2tUeXBlU3VwcG9ydCgnYXJyYXlidWZmZXInKSlcblxuLy8gVGhlc2UgbmV4dCB0d28gdGVzdHMgdW5hdm9pZGFibHkgc2hvdyB3YXJuaW5ncyBpbiBDaHJvbWUuIFNpbmNlIGZldGNoIHdpbGwgYWx3YXlzXG4vLyBiZSB1c2VkIGlmIGl0J3MgYXZhaWxhYmxlLCBqdXN0IHJldHVybiBmYWxzZSBmb3IgdGhlc2UgdG8gYXZvaWQgdGhlIHdhcm5pbmdzLlxuZXhwb3J0cy5tc3N0cmVhbSA9ICFleHBvcnRzLmZldGNoICYmIGhhdmVTbGljZSAmJiBjaGVja1R5cGVTdXBwb3J0KCdtcy1zdHJlYW0nKVxuZXhwb3J0cy5tb3pjaHVua2VkYXJyYXlidWZmZXIgPSAhZXhwb3J0cy5mZXRjaCAmJiBoYXZlQXJyYXlCdWZmZXIgJiZcblx0Y2hlY2tUeXBlU3VwcG9ydCgnbW96LWNodW5rZWQtYXJyYXlidWZmZXInKVxuXG4vLyBJZiBmZXRjaCBpcyBzdXBwb3J0ZWQsIHRoZW4gb3ZlcnJpZGVNaW1lVHlwZSB3aWxsIGJlIHN1cHBvcnRlZCB0b28uIFNraXAgY2FsbGluZ1xuLy8gZ2V0WEhSKCkuXG5leHBvcnRzLm92ZXJyaWRlTWltZVR5cGUgPSBleHBvcnRzLmZldGNoIHx8IChnZXRYSFIoKSA/IGlzRnVuY3Rpb24oZ2V0WEhSKCkub3ZlcnJpZGVNaW1lVHlwZSkgOiBmYWxzZSlcblxuZXhwb3J0cy52YkFycmF5ID0gaXNGdW5jdGlvbihnbG9iYWwuVkJBcnJheSlcblxuZnVuY3Rpb24gaXNGdW5jdGlvbiAodmFsdWUpIHtcblx0cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJ1xufVxuXG54aHIgPSBudWxsIC8vIEhlbHAgZ2NcbiIsInZhciBjYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9jYXBhYmlsaXR5JylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBzdHJlYW0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKVxuXG52YXIgclN0YXRlcyA9IGV4cG9ydHMucmVhZHlTdGF0ZXMgPSB7XG5cdFVOU0VOVDogMCxcblx0T1BFTkVEOiAxLFxuXHRIRUFERVJTX1JFQ0VJVkVEOiAyLFxuXHRMT0FESU5HOiAzLFxuXHRET05FOiA0XG59XG5cbnZhciBJbmNvbWluZ01lc3NhZ2UgPSBleHBvcnRzLkluY29taW5nTWVzc2FnZSA9IGZ1bmN0aW9uICh4aHIsIHJlc3BvbnNlLCBtb2RlLCBmZXRjaFRpbWVyKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXHRzdHJlYW0uUmVhZGFibGUuY2FsbChzZWxmKVxuXG5cdHNlbGYuX21vZGUgPSBtb2RlXG5cdHNlbGYuaGVhZGVycyA9IHt9XG5cdHNlbGYucmF3SGVhZGVycyA9IFtdXG5cdHNlbGYudHJhaWxlcnMgPSB7fVxuXHRzZWxmLnJhd1RyYWlsZXJzID0gW11cblxuXHQvLyBGYWtlIHRoZSAnY2xvc2UnIGV2ZW50LCBidXQgb25seSBvbmNlICdlbmQnIGZpcmVzXG5cdHNlbGYub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcblx0XHQvLyBUaGUgbmV4dFRpY2sgaXMgbmVjZXNzYXJ5IHRvIHByZXZlbnQgdGhlICdyZXF1ZXN0JyBtb2R1bGUgZnJvbSBjYXVzaW5nIGFuIGluZmluaXRlIGxvb3Bcblx0XHRwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcblx0XHRcdHNlbGYuZW1pdCgnY2xvc2UnKVxuXHRcdH0pXG5cdH0pXG5cblx0aWYgKG1vZGUgPT09ICdmZXRjaCcpIHtcblx0XHRzZWxmLl9mZXRjaFJlc3BvbnNlID0gcmVzcG9uc2VcblxuXHRcdHNlbGYudXJsID0gcmVzcG9uc2UudXJsXG5cdFx0c2VsZi5zdGF0dXNDb2RlID0gcmVzcG9uc2Uuc3RhdHVzXG5cdFx0c2VsZi5zdGF0dXNNZXNzYWdlID0gcmVzcG9uc2Uuc3RhdHVzVGV4dFxuXHRcdFxuXHRcdHJlc3BvbnNlLmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyLCBrZXkpe1xuXHRcdFx0c2VsZi5oZWFkZXJzW2tleS50b0xvd2VyQ2FzZSgpXSA9IGhlYWRlclxuXHRcdFx0c2VsZi5yYXdIZWFkZXJzLnB1c2goa2V5LCBoZWFkZXIpXG5cdFx0fSlcblxuXHRcdGlmIChjYXBhYmlsaXR5LndyaXRhYmxlU3RyZWFtKSB7XG5cdFx0XHR2YXIgd3JpdGFibGUgPSBuZXcgV3JpdGFibGVTdHJlYW0oe1xuXHRcdFx0XHR3cml0ZTogZnVuY3Rpb24gKGNodW5rKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFx0XHRcdGlmIChzZWxmLl9kZXN0cm95ZWQpIHtcblx0XHRcdFx0XHRcdFx0cmVqZWN0KClcblx0XHRcdFx0XHRcdH0gZWxzZSBpZihzZWxmLnB1c2gobmV3IEJ1ZmZlcihjaHVuaykpKSB7XG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoKVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0c2VsZi5fcmVzdW1lRmV0Y2ggPSByZXNvbHZlXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fSxcblx0XHRcdFx0Y2xvc2U6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRnbG9iYWwuY2xlYXJUaW1lb3V0KGZldGNoVGltZXIpXG5cdFx0XHRcdFx0aWYgKCFzZWxmLl9kZXN0cm95ZWQpXG5cdFx0XHRcdFx0XHRzZWxmLnB1c2gobnVsbClcblx0XHRcdFx0fSxcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0XHRpZiAoIXNlbGYuX2Rlc3Ryb3llZClcblx0XHRcdFx0XHRcdHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHJlc3BvbnNlLmJvZHkucGlwZVRvKHdyaXRhYmxlKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0Z2xvYmFsLmNsZWFyVGltZW91dChmZXRjaFRpbWVyKVxuXHRcdFx0XHRcdGlmICghc2VsZi5fZGVzdHJveWVkKVxuXHRcdFx0XHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0XHRcdFx0fSlcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHR9IGNhdGNoIChlKSB7fSAvLyBwaXBlVG8gbWV0aG9kIGlzbid0IGRlZmluZWQuIENhbid0IGZpbmQgYSBiZXR0ZXIgd2F5IHRvIGZlYXR1cmUgdGVzdCB0aGlzXG5cdFx0fVxuXHRcdC8vIGZhbGxiYWNrIGZvciB3aGVuIHdyaXRhYmxlU3RyZWFtIG9yIHBpcGVUbyBhcmVuJ3QgYXZhaWxhYmxlXG5cdFx0dmFyIHJlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKClcblx0XHRmdW5jdGlvbiByZWFkICgpIHtcblx0XHRcdHJlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0XHRcdGlmIChzZWxmLl9kZXN0cm95ZWQpXG5cdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRcdGlmIChyZXN1bHQuZG9uZSkge1xuXHRcdFx0XHRcdGdsb2JhbC5jbGVhclRpbWVvdXQoZmV0Y2hUaW1lcilcblx0XHRcdFx0XHRzZWxmLnB1c2gobnVsbClcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLnB1c2gobmV3IEJ1ZmZlcihyZXN1bHQudmFsdWUpKVxuXHRcdFx0XHRyZWFkKClcblx0XHRcdH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0Z2xvYmFsLmNsZWFyVGltZW91dChmZXRjaFRpbWVyKVxuXHRcdFx0XHRpZiAoIXNlbGYuX2Rlc3Ryb3llZClcblx0XHRcdFx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKVxuXHRcdFx0fSlcblx0XHR9XG5cdFx0cmVhZCgpXG5cdH0gZWxzZSB7XG5cdFx0c2VsZi5feGhyID0geGhyXG5cdFx0c2VsZi5fcG9zID0gMFxuXG5cdFx0c2VsZi51cmwgPSB4aHIucmVzcG9uc2VVUkxcblx0XHRzZWxmLnN0YXR1c0NvZGUgPSB4aHIuc3RhdHVzXG5cdFx0c2VsZi5zdGF0dXNNZXNzYWdlID0geGhyLnN0YXR1c1RleHRcblx0XHR2YXIgaGVhZGVycyA9IHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKS5zcGxpdCgvXFxyP1xcbi8pXG5cdFx0aGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXIpIHtcblx0XHRcdHZhciBtYXRjaGVzID0gaGVhZGVyLm1hdGNoKC9eKFteOl0rKTpcXHMqKC4qKS8pXG5cdFx0XHRpZiAobWF0Y2hlcykge1xuXHRcdFx0XHR2YXIga2V5ID0gbWF0Y2hlc1sxXS50b0xvd2VyQ2FzZSgpXG5cdFx0XHRcdGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuXHRcdFx0XHRcdGlmIChzZWxmLmhlYWRlcnNba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRzZWxmLmhlYWRlcnNba2V5XSA9IFtdXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNlbGYuaGVhZGVyc1trZXldLnB1c2gobWF0Y2hlc1syXSlcblx0XHRcdFx0fSBlbHNlIGlmIChzZWxmLmhlYWRlcnNba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0c2VsZi5oZWFkZXJzW2tleV0gKz0gJywgJyArIG1hdGNoZXNbMl1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWxmLmhlYWRlcnNba2V5XSA9IG1hdGNoZXNbMl1cblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLnJhd0hlYWRlcnMucHVzaChtYXRjaGVzWzFdLCBtYXRjaGVzWzJdKVxuXHRcdFx0fVxuXHRcdH0pXG5cblx0XHRzZWxmLl9jaGFyc2V0ID0gJ3gtdXNlci1kZWZpbmVkJ1xuXHRcdGlmICghY2FwYWJpbGl0eS5vdmVycmlkZU1pbWVUeXBlKSB7XG5cdFx0XHR2YXIgbWltZVR5cGUgPSBzZWxmLnJhd0hlYWRlcnNbJ21pbWUtdHlwZSddXG5cdFx0XHRpZiAobWltZVR5cGUpIHtcblx0XHRcdFx0dmFyIGNoYXJzZXRNYXRjaCA9IG1pbWVUeXBlLm1hdGNoKC87XFxzKmNoYXJzZXQ9KFteO10pKDt8JCkvKVxuXHRcdFx0XHRpZiAoY2hhcnNldE1hdGNoKSB7XG5cdFx0XHRcdFx0c2VsZi5fY2hhcnNldCA9IGNoYXJzZXRNYXRjaFsxXS50b0xvd2VyQ2FzZSgpXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICghc2VsZi5fY2hhcnNldClcblx0XHRcdFx0c2VsZi5fY2hhcnNldCA9ICd1dGYtOCcgLy8gYmVzdCBndWVzc1xuXHRcdH1cblx0fVxufVxuXG5pbmhlcml0cyhJbmNvbWluZ01lc3NhZ2UsIHN0cmVhbS5SZWFkYWJsZSlcblxuSW5jb21pbmdNZXNzYWdlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cblx0dmFyIHJlc29sdmUgPSBzZWxmLl9yZXN1bWVGZXRjaFxuXHRpZiAocmVzb2x2ZSkge1xuXHRcdHNlbGYuX3Jlc3VtZUZldGNoID0gbnVsbFxuXHRcdHJlc29sdmUoKVxuXHR9XG59XG5cbkluY29taW5nTWVzc2FnZS5wcm90b3R5cGUuX29uWEhSUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdHZhciB4aHIgPSBzZWxmLl94aHJcblxuXHR2YXIgcmVzcG9uc2UgPSBudWxsXG5cdHN3aXRjaCAoc2VsZi5fbW9kZSkge1xuXHRcdGNhc2UgJ3RleHQ6dmJhcnJheSc6IC8vIEZvciBJRTlcblx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gclN0YXRlcy5ET05FKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gVGhpcyBmYWlscyBpbiBJRThcblx0XHRcdFx0cmVzcG9uc2UgPSBuZXcgZ2xvYmFsLlZCQXJyYXkoeGhyLnJlc3BvbnNlQm9keSkudG9BcnJheSgpXG5cdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdFx0aWYgKHJlc3BvbnNlICE9PSBudWxsKSB7XG5cdFx0XHRcdHNlbGYucHVzaChuZXcgQnVmZmVyKHJlc3BvbnNlKSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdH1cblx0XHRcdC8vIEZhbGxzIHRocm91Z2ggaW4gSUU4XHRcblx0XHRjYXNlICd0ZXh0Jzpcblx0XHRcdHRyeSB7IC8vIFRoaXMgd2lsbCBmYWlsIHdoZW4gcmVhZHlTdGF0ZSA9IDMgaW4gSUU5LiBTd2l0Y2ggbW9kZSBhbmQgd2FpdCBmb3IgcmVhZHlTdGF0ZSA9IDRcblx0XHRcdFx0cmVzcG9uc2UgPSB4aHIucmVzcG9uc2VUZXh0XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdHNlbGYuX21vZGUgPSAndGV4dDp2YmFycmF5J1xuXHRcdFx0XHRicmVha1xuXHRcdFx0fVxuXHRcdFx0aWYgKHJlc3BvbnNlLmxlbmd0aCA+IHNlbGYuX3Bvcykge1xuXHRcdFx0XHR2YXIgbmV3RGF0YSA9IHJlc3BvbnNlLnN1YnN0cihzZWxmLl9wb3MpXG5cdFx0XHRcdGlmIChzZWxmLl9jaGFyc2V0ID09PSAneC11c2VyLWRlZmluZWQnKSB7XG5cdFx0XHRcdFx0dmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIobmV3RGF0YS5sZW5ndGgpXG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBuZXdEYXRhLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRcdFx0YnVmZmVyW2ldID0gbmV3RGF0YS5jaGFyQ29kZUF0KGkpICYgMHhmZlxuXG5cdFx0XHRcdFx0c2VsZi5wdXNoKGJ1ZmZlcilcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWxmLnB1c2gobmV3RGF0YSwgc2VsZi5fY2hhcnNldClcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLl9wb3MgPSByZXNwb25zZS5sZW5ndGhcblx0XHRcdH1cblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSAnYXJyYXlidWZmZXInOlxuXHRcdFx0aWYgKHhoci5yZWFkeVN0YXRlICE9PSByU3RhdGVzLkRPTkUgfHwgIXhoci5yZXNwb25zZSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdHJlc3BvbnNlID0geGhyLnJlc3BvbnNlXG5cdFx0XHRzZWxmLnB1c2gobmV3IEJ1ZmZlcihuZXcgVWludDhBcnJheShyZXNwb25zZSkpKVxuXHRcdFx0YnJlYWtcblx0XHRjYXNlICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcic6IC8vIHRha2Ugd2hvbGVcblx0XHRcdHJlc3BvbnNlID0geGhyLnJlc3BvbnNlXG5cdFx0XHRpZiAoeGhyLnJlYWR5U3RhdGUgIT09IHJTdGF0ZXMuTE9BRElORyB8fCAhcmVzcG9uc2UpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRzZWxmLnB1c2gobmV3IEJ1ZmZlcihuZXcgVWludDhBcnJheShyZXNwb25zZSkpKVxuXHRcdFx0YnJlYWtcblx0XHRjYXNlICdtcy1zdHJlYW0nOlxuXHRcdFx0cmVzcG9uc2UgPSB4aHIucmVzcG9uc2Vcblx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gclN0YXRlcy5MT0FESU5HKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0dmFyIHJlYWRlciA9IG5ldyBnbG9iYWwuTVNTdHJlYW1SZWFkZXIoKVxuXHRcdFx0cmVhZGVyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGlmIChyZWFkZXIucmVzdWx0LmJ5dGVMZW5ndGggPiBzZWxmLl9wb3MpIHtcblx0XHRcdFx0XHRzZWxmLnB1c2gobmV3IEJ1ZmZlcihuZXcgVWludDhBcnJheShyZWFkZXIucmVzdWx0LnNsaWNlKHNlbGYuX3BvcykpKSlcblx0XHRcdFx0XHRzZWxmLl9wb3MgPSByZWFkZXIucmVzdWx0LmJ5dGVMZW5ndGhcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5wdXNoKG51bGwpXG5cdFx0XHR9XG5cdFx0XHQvLyByZWFkZXIub25lcnJvciA9ID8/PyAvLyBUT0RPOiB0aGlzXG5cdFx0XHRyZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIocmVzcG9uc2UpXG5cdFx0XHRicmVha1xuXHR9XG5cblx0Ly8gVGhlIG1zLXN0cmVhbSBjYXNlIGhhbmRsZXMgZW5kIHNlcGFyYXRlbHkgaW4gcmVhZGVyLm9ubG9hZCgpXG5cdGlmIChzZWxmLl94aHIucmVhZHlTdGF0ZSA9PT0gclN0YXRlcy5ET05FICYmIHNlbGYuX21vZGUgIT09ICdtcy1zdHJlYW0nKSB7XG5cdFx0c2VsZi5wdXNoKG51bGwpXG5cdH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCIvKiFcbiAqIGNvbnRlbnQtZGlzcG9zaXRpb25cbiAqIENvcHlyaWdodChjKSAyMDE0LTIwMTcgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudERpc3Bvc2l0aW9uXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGJhc2VuYW1lID0gcmVxdWlyZSgncGF0aCcpLmJhc2VuYW1lXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuLyoqXG4gKiBSZWdFeHAgdG8gbWF0Y2ggbm9uIGF0dHItY2hhciwgKmFmdGVyKiBlbmNvZGVVUklDb21wb25lbnQgKGkuZS4gbm90IGluY2x1ZGluZyBcIiVcIilcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIEVOQ09ERV9VUkxfQVRUUl9DSEFSX1JFR0VYUCA9IC9bXFx4MDAtXFx4MjBcIicoKSosLzo7PD0+P0BbXFxcXFxcXXt9XFx4N2ZdL2cgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb250cm9sLXJlZ2V4XG5cbi8qKlxuICogUmVnRXhwIHRvIG1hdGNoIHBlcmNlbnQgZW5jb2RpbmcgZXNjYXBlLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgSEVYX0VTQ0FQRV9SRUdFWFAgPSAvJVswLTlBLUZhLWZdezJ9L1xudmFyIEhFWF9FU0NBUEVfUkVQTEFDRV9SRUdFWFAgPSAvJShbMC05QS1GYS1mXXsyfSkvZ1xuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCBub24tbGF0aW4xIGNoYXJhY3RlcnMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBOT05fTEFUSU4xX1JFR0VYUCA9IC9bXlxceDIwLVxceDdlXFx4YTAtXFx4ZmZdL2dcblxuLyoqXG4gKiBSZWdFeHAgdG8gbWF0Y2ggcXVvdGVkLXBhaXIgaW4gUkZDIDI2MTZcbiAqXG4gKiBxdW90ZWQtcGFpciA9IFwiXFxcIiBDSEFSXG4gKiBDSEFSICAgICAgICA9IDxhbnkgVVMtQVNDSUkgY2hhcmFjdGVyIChvY3RldHMgMCAtIDEyNyk+XG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBRRVNDX1JFR0VYUCA9IC9cXFxcKFtcXHUwMDAwLVxcdTAwN2ZdKS9nIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29udHJvbC1yZWdleFxuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCBjaGFycyB0aGF0IG11c3QgYmUgcXVvdGVkLXBhaXIgaW4gUkZDIDI2MTZcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIFFVT1RFX1JFR0VYUCA9IC8oW1xcXFxcIl0pL2dcblxuLyoqXG4gKiBSZWdFeHAgZm9yIHZhcmlvdXMgUkZDIDI2MTYgZ3JhbW1hclxuICpcbiAqIHBhcmFtZXRlciAgICAgPSB0b2tlbiBcIj1cIiAoIHRva2VuIHwgcXVvdGVkLXN0cmluZyApXG4gKiB0b2tlbiAgICAgICAgID0gMSo8YW55IENIQVIgZXhjZXB0IENUTHMgb3Igc2VwYXJhdG9ycz5cbiAqIHNlcGFyYXRvcnMgICAgPSBcIihcIiB8IFwiKVwiIHwgXCI8XCIgfCBcIj5cIiB8IFwiQFwiXG4gKiAgICAgICAgICAgICAgIHwgXCIsXCIgfCBcIjtcIiB8IFwiOlwiIHwgXCJcXFwiIHwgPFwiPlxuICogICAgICAgICAgICAgICB8IFwiL1wiIHwgXCJbXCIgfCBcIl1cIiB8IFwiP1wiIHwgXCI9XCJcbiAqICAgICAgICAgICAgICAgfCBcIntcIiB8IFwifVwiIHwgU1AgfCBIVFxuICogcXVvdGVkLXN0cmluZyA9ICggPFwiPiAqKHFkdGV4dCB8IHF1b3RlZC1wYWlyICkgPFwiPiApXG4gKiBxZHRleHQgICAgICAgID0gPGFueSBURVhUIGV4Y2VwdCA8XCI+PlxuICogcXVvdGVkLXBhaXIgICA9IFwiXFxcIiBDSEFSXG4gKiBDSEFSICAgICAgICAgID0gPGFueSBVUy1BU0NJSSBjaGFyYWN0ZXIgKG9jdGV0cyAwIC0gMTI3KT5cbiAqIFRFWFQgICAgICAgICAgPSA8YW55IE9DVEVUIGV4Y2VwdCBDVExzLCBidXQgaW5jbHVkaW5nIExXUz5cbiAqIExXUyAgICAgICAgICAgPSBbQ1JMRl0gMSooIFNQIHwgSFQgKVxuICogQ1JMRiAgICAgICAgICA9IENSIExGXG4gKiBDUiAgICAgICAgICAgID0gPFVTLUFTQ0lJIENSLCBjYXJyaWFnZSByZXR1cm4gKDEzKT5cbiAqIExGICAgICAgICAgICAgPSA8VVMtQVNDSUkgTEYsIGxpbmVmZWVkICgxMCk+XG4gKiBTUCAgICAgICAgICAgID0gPFVTLUFTQ0lJIFNQLCBzcGFjZSAoMzIpPlxuICogSFQgICAgICAgICAgICA9IDxVUy1BU0NJSSBIVCwgaG9yaXpvbnRhbC10YWIgKDkpPlxuICogQ1RMICAgICAgICAgICA9IDxhbnkgVVMtQVNDSUkgY29udHJvbCBjaGFyYWN0ZXIgKG9jdGV0cyAwIC0gMzEpIGFuZCBERUwgKDEyNyk+XG4gKiBPQ1RFVCAgICAgICAgID0gPGFueSA4LWJpdCBzZXF1ZW5jZSBvZiBkYXRhPlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgUEFSQU1fUkVHRVhQID0gLztbXFx4MDlcXHgyMF0qKFshIyQlJicqKy4wLTlBLVpeX2BhLXp8fi1dKylbXFx4MDlcXHgyMF0qPVtcXHgwOVxceDIwXSooXCIoPzpbXFx4MjAhXFx4MjMtXFx4NWJcXHg1ZC1cXHg3ZVxceDgwLVxceGZmXXxcXFxcW1xceDIwLVxceDdlXSkqXCJ8WyEjJCUmJyorLjAtOUEtWl5fYGEtenx+LV0rKVtcXHgwOVxceDIwXSovZyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbnZhciBURVhUX1JFR0VYUCA9IC9eW1xceDIwLVxceDdlXFx4ODAtXFx4ZmZdKyQvXG52YXIgVE9LRU5fUkVHRVhQID0gL15bISMkJSYnKisuMC05QS1aXl9gYS16fH4tXSskL1xuXG4vKipcbiAqIFJlZ0V4cCBmb3IgdmFyaW91cyBSRkMgNTk4NyBncmFtbWFyXG4gKlxuICogZXh0LXZhbHVlICAgICA9IGNoYXJzZXQgIFwiJ1wiIFsgbGFuZ3VhZ2UgXSBcIidcIiB2YWx1ZS1jaGFyc1xuICogY2hhcnNldCAgICAgICA9IFwiVVRGLThcIiAvIFwiSVNPLTg4NTktMVwiIC8gbWltZS1jaGFyc2V0XG4gKiBtaW1lLWNoYXJzZXQgID0gMSptaW1lLWNoYXJzZXRjXG4gKiBtaW1lLWNoYXJzZXRjID0gQUxQSEEgLyBESUdJVFxuICogICAgICAgICAgICAgICAvIFwiIVwiIC8gXCIjXCIgLyBcIiRcIiAvIFwiJVwiIC8gXCImXCJcbiAqICAgICAgICAgICAgICAgLyBcIitcIiAvIFwiLVwiIC8gXCJeXCIgLyBcIl9cIiAvIFwiYFwiXG4gKiAgICAgICAgICAgICAgIC8gXCJ7XCIgLyBcIn1cIiAvIFwiflwiXG4gKiBsYW5ndWFnZSAgICAgID0gKCAyKjNBTFBIQSBbIGV4dGxhbmcgXSApXG4gKiAgICAgICAgICAgICAgIC8gNEFMUEhBXG4gKiAgICAgICAgICAgICAgIC8gNSo4QUxQSEFcbiAqIGV4dGxhbmcgICAgICAgPSAqMyggXCItXCIgM0FMUEhBIClcbiAqIHZhbHVlLWNoYXJzICAgPSAqKCBwY3QtZW5jb2RlZCAvIGF0dHItY2hhciApXG4gKiBwY3QtZW5jb2RlZCAgID0gXCIlXCIgSEVYRElHIEhFWERJR1xuICogYXR0ci1jaGFyICAgICA9IEFMUEhBIC8gRElHSVRcbiAqICAgICAgICAgICAgICAgLyBcIiFcIiAvIFwiI1wiIC8gXCIkXCIgLyBcIiZcIiAvIFwiK1wiIC8gXCItXCIgLyBcIi5cIlxuICogICAgICAgICAgICAgICAvIFwiXlwiIC8gXCJfXCIgLyBcImBcIiAvIFwifFwiIC8gXCJ+XCJcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIEVYVF9WQUxVRV9SRUdFWFAgPSAvXihbQS1aYS16MC05ISMkJSYrXFwtXl9ge31+XSspJyg/OltBLVphLXpdezIsM30oPzotW0EtWmEtel17M30pezAsM318W0EtWmEtel17NCw4fXwpJygoPzolWzAtOUEtRmEtZl17Mn18W0EtWmEtejAtOSEjJCYrLl5fYHx+LV0pKykkL1xuXG4vKipcbiAqIFJlZ0V4cCBmb3IgdmFyaW91cyBSRkMgNjI2NiBncmFtbWFyXG4gKlxuICogZGlzcG9zaXRpb24tdHlwZSA9IFwiaW5saW5lXCIgfCBcImF0dGFjaG1lbnRcIiB8IGRpc3AtZXh0LXR5cGVcbiAqIGRpc3AtZXh0LXR5cGUgICAgPSB0b2tlblxuICogZGlzcG9zaXRpb24tcGFybSA9IGZpbGVuYW1lLXBhcm0gfCBkaXNwLWV4dC1wYXJtXG4gKiBmaWxlbmFtZS1wYXJtICAgID0gXCJmaWxlbmFtZVwiIFwiPVwiIHZhbHVlXG4gKiAgICAgICAgICAgICAgICAgIHwgXCJmaWxlbmFtZSpcIiBcIj1cIiBleHQtdmFsdWVcbiAqIGRpc3AtZXh0LXBhcm0gICAgPSB0b2tlbiBcIj1cIiB2YWx1ZVxuICogICAgICAgICAgICAgICAgICB8IGV4dC10b2tlbiBcIj1cIiBleHQtdmFsdWVcbiAqIGV4dC10b2tlbiAgICAgICAgPSA8dGhlIGNoYXJhY3RlcnMgaW4gdG9rZW4sIGZvbGxvd2VkIGJ5IFwiKlwiPlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgRElTUE9TSVRJT05fVFlQRV9SRUdFWFAgPSAvXihbISMkJSYnKisuMC05QS1aXl9gYS16fH4tXSspW1xceDA5XFx4MjBdKig/OiR8OykvIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29udHJvbC1yZWdleFxuXG4vKipcbiAqIENyZWF0ZSBhbiBhdHRhY2htZW50IENvbnRlbnQtRGlzcG9zaXRpb24gaGVhZGVyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbZmlsZW5hbWVdXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudHlwZT1hdHRhY2htZW50XVxuICogQHBhcmFtIHtzdHJpbmd8Ym9vbGVhbn0gW29wdGlvbnMuZmFsbGJhY2s9dHJ1ZV1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjb250ZW50RGlzcG9zaXRpb24gKGZpbGVuYW1lLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gb3B0aW9ucyB8fCB7fVxuXG4gIC8vIGdldCB0eXBlXG4gIHZhciB0eXBlID0gb3B0cy50eXBlIHx8ICdhdHRhY2htZW50J1xuXG4gIC8vIGdldCBwYXJhbWV0ZXJzXG4gIHZhciBwYXJhbXMgPSBjcmVhdGVwYXJhbXMoZmlsZW5hbWUsIG9wdHMuZmFsbGJhY2spXG5cbiAgLy8gZm9ybWF0IGludG8gc3RyaW5nXG4gIHJldHVybiBmb3JtYXQobmV3IENvbnRlbnREaXNwb3NpdGlvbih0eXBlLCBwYXJhbXMpKVxufVxuXG4vKipcbiAqIENyZWF0ZSBwYXJhbWV0ZXJzIG9iamVjdCBmcm9tIGZpbGVuYW1lIGFuZCBmYWxsYmFjay5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW2ZpbGVuYW1lXVxuICogQHBhcmFtIHtzdHJpbmd8Ym9vbGVhbn0gW2ZhbGxiYWNrPXRydWVdXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZXBhcmFtcyAoZmlsZW5hbWUsIGZhbGxiYWNrKSB7XG4gIGlmIChmaWxlbmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgcGFyYW1zID0ge31cblxuICBpZiAodHlwZW9mIGZpbGVuYW1lICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ZpbGVuYW1lIG11c3QgYmUgYSBzdHJpbmcnKVxuICB9XG5cbiAgLy8gZmFsbGJhY2sgZGVmYXVsdHMgdG8gdHJ1ZVxuICBpZiAoZmFsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGZhbGxiYWNrID0gdHJ1ZVxuICB9XG5cbiAgaWYgKHR5cGVvZiBmYWxsYmFjayAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIGZhbGxiYWNrICE9PSAnYm9vbGVhbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdmYWxsYmFjayBtdXN0IGJlIGEgc3RyaW5nIG9yIGJvb2xlYW4nKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBmYWxsYmFjayA9PT0gJ3N0cmluZycgJiYgTk9OX0xBVElOMV9SRUdFWFAudGVzdChmYWxsYmFjaykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdmYWxsYmFjayBtdXN0IGJlIElTTy04ODU5LTEgc3RyaW5nJylcbiAgfVxuXG4gIC8vIHJlc3RyaWN0IHRvIGZpbGUgYmFzZSBuYW1lXG4gIHZhciBuYW1lID0gYmFzZW5hbWUoZmlsZW5hbWUpXG5cbiAgLy8gZGV0ZXJtaW5lIGlmIG5hbWUgaXMgc3VpdGFibGUgZm9yIHF1b3RlZCBzdHJpbmdcbiAgdmFyIGlzUXVvdGVkU3RyaW5nID0gVEVYVF9SRUdFWFAudGVzdChuYW1lKVxuXG4gIC8vIGdlbmVyYXRlIGZhbGxiYWNrIG5hbWVcbiAgdmFyIGZhbGxiYWNrTmFtZSA9IHR5cGVvZiBmYWxsYmFjayAhPT0gJ3N0cmluZydcbiAgICA/IGZhbGxiYWNrICYmIGdldGxhdGluMShuYW1lKVxuICAgIDogYmFzZW5hbWUoZmFsbGJhY2spXG4gIHZhciBoYXNGYWxsYmFjayA9IHR5cGVvZiBmYWxsYmFja05hbWUgPT09ICdzdHJpbmcnICYmIGZhbGxiYWNrTmFtZSAhPT0gbmFtZVxuXG4gIC8vIHNldCBleHRlbmRlZCBmaWxlbmFtZSBwYXJhbWV0ZXJcbiAgaWYgKGhhc0ZhbGxiYWNrIHx8ICFpc1F1b3RlZFN0cmluZyB8fCBIRVhfRVNDQVBFX1JFR0VYUC50ZXN0KG5hbWUpKSB7XG4gICAgcGFyYW1zWydmaWxlbmFtZSonXSA9IG5hbWVcbiAgfVxuXG4gIC8vIHNldCBmaWxlbmFtZSBwYXJhbWV0ZXJcbiAgaWYgKGlzUXVvdGVkU3RyaW5nIHx8IGhhc0ZhbGxiYWNrKSB7XG4gICAgcGFyYW1zLmZpbGVuYW1lID0gaGFzRmFsbGJhY2tcbiAgICAgID8gZmFsbGJhY2tOYW1lXG4gICAgICA6IG5hbWVcbiAgfVxuXG4gIHJldHVybiBwYXJhbXNcbn1cblxuLyoqXG4gKiBGb3JtYXQgb2JqZWN0IHRvIENvbnRlbnQtRGlzcG9zaXRpb24gaGVhZGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7c3RyaW5nfSBvYmoudHlwZVxuICogQHBhcmFtIHtvYmplY3R9IFtvYmoucGFyYW1ldGVyc11cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0IChvYmopIHtcbiAgdmFyIHBhcmFtZXRlcnMgPSBvYmoucGFyYW1ldGVyc1xuICB2YXIgdHlwZSA9IG9iai50eXBlXG5cbiAgaWYgKCF0eXBlIHx8IHR5cGVvZiB0eXBlICE9PSAnc3RyaW5nJyB8fCAhVE9LRU5fUkVHRVhQLnRlc3QodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHR5cGUnKVxuICB9XG5cbiAgLy8gc3RhcnQgd2l0aCBub3JtYWxpemVkIHR5cGVcbiAgdmFyIHN0cmluZyA9IFN0cmluZyh0eXBlKS50b0xvd2VyQ2FzZSgpXG5cbiAgLy8gYXBwZW5kIHBhcmFtZXRlcnNcbiAgaWYgKHBhcmFtZXRlcnMgJiYgdHlwZW9mIHBhcmFtZXRlcnMgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHBhcmFtXG4gICAgdmFyIHBhcmFtcyA9IE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpLnNvcnQoKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhcmFtID0gcGFyYW1zW2ldXG5cbiAgICAgIHZhciB2YWwgPSBwYXJhbS5zdWJzdHIoLTEpID09PSAnKidcbiAgICAgICAgPyB1c3RyaW5nKHBhcmFtZXRlcnNbcGFyYW1dKVxuICAgICAgICA6IHFzdHJpbmcocGFyYW1ldGVyc1twYXJhbV0pXG5cbiAgICAgIHN0cmluZyArPSAnOyAnICsgcGFyYW0gKyAnPScgKyB2YWxcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyaW5nXG59XG5cbi8qKlxuICogRGVjb2RlIGEgUkZDIDY5ODcgZmllbGQgdmFsdWUgKGdyYWNlZnVsbHkpLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZGVjb2RlZmllbGQgKHN0cikge1xuICB2YXIgbWF0Y2ggPSBFWFRfVkFMVUVfUkVHRVhQLmV4ZWMoc3RyKVxuXG4gIGlmICghbWF0Y2gpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGV4dGVuZGVkIGZpZWxkIHZhbHVlJylcbiAgfVxuXG4gIHZhciBjaGFyc2V0ID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKVxuICB2YXIgZW5jb2RlZCA9IG1hdGNoWzJdXG4gIHZhciB2YWx1ZVxuXG4gIC8vIHRvIGJpbmFyeSBzdHJpbmdcbiAgdmFyIGJpbmFyeSA9IGVuY29kZWQucmVwbGFjZShIRVhfRVNDQVBFX1JFUExBQ0VfUkVHRVhQLCBwZGVjb2RlKVxuXG4gIHN3aXRjaCAoY2hhcnNldCkge1xuICAgIGNhc2UgJ2lzby04ODU5LTEnOlxuICAgICAgdmFsdWUgPSBnZXRsYXRpbjEoYmluYXJ5KVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgICB2YWx1ZSA9IEJ1ZmZlci5mcm9tKGJpbmFyeSwgJ2JpbmFyeScpLnRvU3RyaW5nKCd1dGY4JylcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Vuc3VwcG9ydGVkIGNoYXJzZXQgaW4gZXh0ZW5kZWQgZmllbGQnKVxuICB9XG5cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IElTTy04ODU5LTEgdmVyc2lvbiBvZiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbFxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRsYXRpbjEgKHZhbCkge1xuICAvLyBzaW1wbGUgVW5pY29kZSAtPiBJU08tODg1OS0xIHRyYW5zZm9ybWF0aW9uXG4gIHJldHVybiBTdHJpbmcodmFsKS5yZXBsYWNlKE5PTl9MQVRJTjFfUkVHRVhQLCAnPycpXG59XG5cbi8qKlxuICogUGFyc2UgQ29udGVudC1EaXNwb3NpdGlvbiBoZWFkZXIgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZSAoc3RyaW5nKSB7XG4gIGlmICghc3RyaW5nIHx8IHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgc3RyaW5nIGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIHZhciBtYXRjaCA9IERJU1BPU0lUSU9OX1RZUEVfUkVHRVhQLmV4ZWMoc3RyaW5nKVxuXG4gIGlmICghbWF0Y2gpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHR5cGUgZm9ybWF0JylcbiAgfVxuXG4gIC8vIG5vcm1hbGl6ZSB0eXBlXG4gIHZhciBpbmRleCA9IG1hdGNoWzBdLmxlbmd0aFxuICB2YXIgdHlwZSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKClcblxuICB2YXIga2V5XG4gIHZhciBuYW1lcyA9IFtdXG4gIHZhciBwYXJhbXMgPSB7fVxuICB2YXIgdmFsdWVcblxuICAvLyBjYWxjdWxhdGUgaW5kZXggdG8gc3RhcnQgYXRcbiAgaW5kZXggPSBQQVJBTV9SRUdFWFAubGFzdEluZGV4ID0gbWF0Y2hbMF0uc3Vic3RyKC0xKSA9PT0gJzsnXG4gICAgPyBpbmRleCAtIDFcbiAgICA6IGluZGV4XG5cbiAgLy8gbWF0Y2ggcGFyYW1ldGVyc1xuICB3aGlsZSAoKG1hdGNoID0gUEFSQU1fUkVHRVhQLmV4ZWMoc3RyaW5nKSkpIHtcbiAgICBpZiAobWF0Y2guaW5kZXggIT09IGluZGV4KSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHBhcmFtZXRlciBmb3JtYXQnKVxuICAgIH1cblxuICAgIGluZGV4ICs9IG1hdGNoWzBdLmxlbmd0aFxuICAgIGtleSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKClcbiAgICB2YWx1ZSA9IG1hdGNoWzJdXG5cbiAgICBpZiAobmFtZXMuaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBkdXBsaWNhdGUgcGFyYW1ldGVyJylcbiAgICB9XG5cbiAgICBuYW1lcy5wdXNoKGtleSlcblxuICAgIGlmIChrZXkuaW5kZXhPZignKicpICsgMSA9PT0ga2V5Lmxlbmd0aCkge1xuICAgICAgLy8gZGVjb2RlIGV4dGVuZGVkIHZhbHVlXG4gICAgICBrZXkgPSBrZXkuc2xpY2UoMCwgLTEpXG4gICAgICB2YWx1ZSA9IGRlY29kZWZpZWxkKHZhbHVlKVxuXG4gICAgICAvLyBvdmVyd3JpdGUgZXhpc3RpbmcgdmFsdWVcbiAgICAgIHBhcmFtc1trZXldID0gdmFsdWVcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBwYXJhbXNba2V5XSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgaWYgKHZhbHVlWzBdID09PSAnXCInKSB7XG4gICAgICAvLyByZW1vdmUgcXVvdGVzIGFuZCBlc2NhcGVzXG4gICAgICB2YWx1ZSA9IHZhbHVlXG4gICAgICAgIC5zdWJzdHIoMSwgdmFsdWUubGVuZ3RoIC0gMilcbiAgICAgICAgLnJlcGxhY2UoUUVTQ19SRUdFWFAsICckMScpXG4gICAgfVxuXG4gICAgcGFyYW1zW2tleV0gPSB2YWx1ZVxuICB9XG5cbiAgaWYgKGluZGV4ICE9PSAtMSAmJiBpbmRleCAhPT0gc3RyaW5nLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgcGFyYW1ldGVyIGZvcm1hdCcpXG4gIH1cblxuICByZXR1cm4gbmV3IENvbnRlbnREaXNwb3NpdGlvbih0eXBlLCBwYXJhbXMpXG59XG5cbi8qKlxuICogUGVyY2VudCBkZWNvZGUgYSBzaW5nbGUgY2hhcmFjdGVyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBoZXhcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGRlY29kZSAoc3RyLCBoZXgpIHtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoaGV4LCAxNikpXG59XG5cbi8qKlxuICogUGVyY2VudCBlbmNvZGUgYSBzaW5nbGUgY2hhcmFjdGVyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGFyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBlbmNvZGUgKGNoYXIpIHtcbiAgcmV0dXJuICclJyArIFN0cmluZyhjaGFyKVxuICAgIC5jaGFyQ29kZUF0KDApXG4gICAgLnRvU3RyaW5nKDE2KVxuICAgIC50b1VwcGVyQ2FzZSgpXG59XG5cbi8qKlxuICogUXVvdGUgYSBzdHJpbmcgZm9yIEhUVFAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbFxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBxc3RyaW5nICh2YWwpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyh2YWwpXG5cbiAgcmV0dXJuICdcIicgKyBzdHIucmVwbGFjZShRVU9URV9SRUdFWFAsICdcXFxcJDEnKSArICdcIidcbn1cblxuLyoqXG4gKiBFbmNvZGUgYSBVbmljb2RlIHN0cmluZyBmb3IgSFRUUCAoUkZDIDU5ODcpLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWxcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gdXN0cmluZyAodmFsKSB7XG4gIHZhciBzdHIgPSBTdHJpbmcodmFsKVxuXG4gIC8vIHBlcmNlbnQgZW5jb2RlIGFzIFVURi04XG4gIHZhciBlbmNvZGVkID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0cilcbiAgICAucmVwbGFjZShFTkNPREVfVVJMX0FUVFJfQ0hBUl9SRUdFWFAsIHBlbmNvZGUpXG5cbiAgcmV0dXJuICdVVEYtOFxcJ1xcJycgKyBlbmNvZGVkXG59XG5cbi8qKlxuICogQ2xhc3MgZm9yIHBhcnNlZCBDb250ZW50LURpc3Bvc2l0aW9uIGhlYWRlciBmb3Igdjggb3B0aW1pemF0aW9uXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbWV0ZXJzXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuXG5mdW5jdGlvbiBDb250ZW50RGlzcG9zaXRpb24gKHR5cGUsIHBhcmFtZXRlcnMpIHtcbiAgdGhpcy50eXBlID0gdHlwZVxuICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzXG59XG4iLCIvKiFcbiAqIGV0YWdcbiAqIENvcHlyaWdodChjKSAyMDE0LTIwMTYgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXRhZ1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKVxudmFyIFN0YXRzID0gcmVxdWlyZSgnZnMnKS5TdGF0c1xuXG4vKipcbiAqIE1vZHVsZSB2YXJpYWJsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcblxuLyoqXG4gKiBHZW5lcmF0ZSBhbiBlbnRpdHkgdGFnLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyfHN0cmluZ30gZW50aXR5XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGVudGl0eXRhZyAoZW50aXR5KSB7XG4gIGlmIChlbnRpdHkubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gZmFzdC1wYXRoIGVtcHR5XG4gICAgcmV0dXJuICdcIjAtMmptajdsNXJTdzB5VmIvdmxXQVlrSy9ZQndrXCInXG4gIH1cblxuICAvLyBjb21wdXRlIGhhc2ggb2YgZW50aXR5XG4gIHZhciBoYXNoID0gY3J5cHRvXG4gICAgLmNyZWF0ZUhhc2goJ3NoYTEnKVxuICAgIC51cGRhdGUoZW50aXR5LCAndXRmOCcpXG4gICAgLmRpZ2VzdCgnYmFzZTY0JylcbiAgICAuc3Vic3RyaW5nKDAsIDI3KVxuXG4gIC8vIGNvbXB1dGUgbGVuZ3RoIG9mIGVudGl0eVxuICB2YXIgbGVuID0gdHlwZW9mIGVudGl0eSA9PT0gJ3N0cmluZydcbiAgICA/IEJ1ZmZlci5ieXRlTGVuZ3RoKGVudGl0eSwgJ3V0ZjgnKVxuICAgIDogZW50aXR5Lmxlbmd0aFxuXG4gIHJldHVybiAnXCInICsgbGVuLnRvU3RyaW5nKDE2KSArICctJyArIGhhc2ggKyAnXCInXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgc2ltcGxlIEVUYWcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8QnVmZmVyfFN0YXRzfSBlbnRpdHlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMud2Vha11cbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBldGFnIChlbnRpdHksIG9wdGlvbnMpIHtcbiAgaWYgKGVudGl0eSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgZW50aXR5IGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIC8vIHN1cHBvcnQgZnMuU3RhdHMgb2JqZWN0XG4gIHZhciBpc1N0YXRzID0gaXNzdGF0cyhlbnRpdHkpXG4gIHZhciB3ZWFrID0gb3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy53ZWFrID09PSAnYm9vbGVhbidcbiAgICA/IG9wdGlvbnMud2Vha1xuICAgIDogaXNTdGF0c1xuXG4gIC8vIHZhbGlkYXRlIGFyZ3VtZW50XG4gIGlmICghaXNTdGF0cyAmJiB0eXBlb2YgZW50aXR5ICE9PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzQnVmZmVyKGVudGl0eSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBlbnRpdHkgbXVzdCBiZSBzdHJpbmcsIEJ1ZmZlciwgb3IgZnMuU3RhdHMnKVxuICB9XG5cbiAgLy8gZ2VuZXJhdGUgZW50aXR5IHRhZ1xuICB2YXIgdGFnID0gaXNTdGF0c1xuICAgID8gc3RhdHRhZyhlbnRpdHkpXG4gICAgOiBlbnRpdHl0YWcoZW50aXR5KVxuXG4gIHJldHVybiB3ZWFrXG4gICAgPyAnVy8nICsgdGFnXG4gICAgOiB0YWdcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgb2JqZWN0IGlzIGEgU3RhdHMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc3N0YXRzIChvYmopIHtcbiAgLy8gZ2VudWluZSBmcy5TdGF0c1xuICBpZiAodHlwZW9mIFN0YXRzID09PSAnZnVuY3Rpb24nICYmIG9iaiBpbnN0YW5jZW9mIFN0YXRzKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8vIHF1YWNrIHF1YWNrXG4gIHJldHVybiBvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiZcbiAgICAnY3RpbWUnIGluIG9iaiAmJiB0b1N0cmluZy5jYWxsKG9iai5jdGltZSkgPT09ICdbb2JqZWN0IERhdGVdJyAmJlxuICAgICdtdGltZScgaW4gb2JqICYmIHRvU3RyaW5nLmNhbGwob2JqLm10aW1lKSA9PT0gJ1tvYmplY3QgRGF0ZV0nICYmXG4gICAgJ2lubycgaW4gb2JqICYmIHR5cGVvZiBvYmouaW5vID09PSAnbnVtYmVyJyAmJlxuICAgICdzaXplJyBpbiBvYmogJiYgdHlwZW9mIG9iai5zaXplID09PSAnbnVtYmVyJ1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEgdGFnIGZvciBhIHN0YXQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHN0YXRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc3RhdHRhZyAoc3RhdCkge1xuICB2YXIgbXRpbWUgPSBzdGF0Lm10aW1lLmdldFRpbWUoKS50b1N0cmluZygxNilcbiAgdmFyIHNpemUgPSBzdGF0LnNpemUudG9TdHJpbmcoMTYpXG5cbiAgcmV0dXJuICdcIicgKyBzaXplICsgJy0nICsgbXRpbWUgKyAnXCInXG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5yYW5kb21CeXRlcyA9IGV4cG9ydHMucm5nID0gZXhwb3J0cy5wc2V1ZG9SYW5kb21CeXRlcyA9IGV4cG9ydHMucHJuZyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJylcbmV4cG9ydHMuY3JlYXRlSGFzaCA9IGV4cG9ydHMuSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbmV4cG9ydHMuY3JlYXRlSG1hYyA9IGV4cG9ydHMuSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJylcblxudmFyIGFsZ29zID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1zaWduL2FsZ29zJylcbnZhciBhbGdvS2V5cyA9IE9iamVjdC5rZXlzKGFsZ29zKVxudmFyIGhhc2hlcyA9IFsnc2hhMScsICdzaGEyMjQnLCAnc2hhMjU2JywgJ3NoYTM4NCcsICdzaGE1MTInLCAnbWQ1JywgJ3JtZDE2MCddLmNvbmNhdChhbGdvS2V5cylcbmV4cG9ydHMuZ2V0SGFzaGVzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaGFzaGVzXG59XG5cbnZhciBwID0gcmVxdWlyZSgncGJrZGYyJylcbmV4cG9ydHMucGJrZGYyID0gcC5wYmtkZjJcbmV4cG9ydHMucGJrZGYyU3luYyA9IHAucGJrZGYyU3luY1xuXG52YXIgYWVzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1jaXBoZXInKVxuXG5leHBvcnRzLkNpcGhlciA9IGFlcy5DaXBoZXJcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gYWVzLmNyZWF0ZUNpcGhlclxuZXhwb3J0cy5DaXBoZXJpdiA9IGFlcy5DaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGFlcy5jcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5EZWNpcGhlciA9IGFlcy5EZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGFlcy5jcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5EZWNpcGhlcml2ID0gYWVzLkRlY2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGFlcy5jcmVhdGVEZWNpcGhlcml2XG5leHBvcnRzLmdldENpcGhlcnMgPSBhZXMuZ2V0Q2lwaGVyc1xuZXhwb3J0cy5saXN0Q2lwaGVycyA9IGFlcy5saXN0Q2lwaGVyc1xuXG52YXIgZGggPSByZXF1aXJlKCdkaWZmaWUtaGVsbG1hbicpXG5cbmV4cG9ydHMuRGlmZmllSGVsbG1hbkdyb3VwID0gZGguRGlmZmllSGVsbG1hbkdyb3VwXG5leHBvcnRzLmNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cCA9IGRoLmNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cFxuZXhwb3J0cy5nZXREaWZmaWVIZWxsbWFuID0gZGguZ2V0RGlmZmllSGVsbG1hblxuZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuID0gZGguY3JlYXRlRGlmZmllSGVsbG1hblxuZXhwb3J0cy5EaWZmaWVIZWxsbWFuID0gZGguRGlmZmllSGVsbG1hblxuXG52YXIgc2lnbiA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktc2lnbicpXG5cbmV4cG9ydHMuY3JlYXRlU2lnbiA9IHNpZ24uY3JlYXRlU2lnblxuZXhwb3J0cy5TaWduID0gc2lnbi5TaWduXG5leHBvcnRzLmNyZWF0ZVZlcmlmeSA9IHNpZ24uY3JlYXRlVmVyaWZ5XG5leHBvcnRzLlZlcmlmeSA9IHNpZ24uVmVyaWZ5XG5cbmV4cG9ydHMuY3JlYXRlRUNESCA9IHJlcXVpcmUoJ2NyZWF0ZS1lY2RoJylcblxudmFyIHB1YmxpY0VuY3J5cHQgPSByZXF1aXJlKCdwdWJsaWMtZW5jcnlwdCcpXG5cbmV4cG9ydHMucHVibGljRW5jcnlwdCA9IHB1YmxpY0VuY3J5cHQucHVibGljRW5jcnlwdFxuZXhwb3J0cy5wcml2YXRlRW5jcnlwdCA9IHB1YmxpY0VuY3J5cHQucHJpdmF0ZUVuY3J5cHRcbmV4cG9ydHMucHVibGljRGVjcnlwdCA9IHB1YmxpY0VuY3J5cHQucHVibGljRGVjcnlwdFxuZXhwb3J0cy5wcml2YXRlRGVjcnlwdCA9IHB1YmxpY0VuY3J5cHQucHJpdmF0ZURlY3J5cHRcblxuLy8gdGhlIGxlYXN0IEkgY2FuIGRvIGlzIG1ha2UgZXJyb3IgbWVzc2FnZXMgZm9yIHRoZSByZXN0IG9mIHRoZSBub2RlLmpzL2NyeXB0byBhcGkuXG4vLyA7W1xuLy8gICAnY3JlYXRlQ3JlZGVudGlhbHMnXG4vLyBdLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbi8vICAgZXhwb3J0c1tuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICB0aHJvdyBuZXcgRXJyb3IoW1xuLy8gICAgICAgJ3NvcnJ5LCAnICsgbmFtZSArICcgaXMgbm90IGltcGxlbWVudGVkIHlldCcsXG4vLyAgICAgICAnd2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMnLFxuLy8gICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9jcnlwdG8tYnJvd3NlcmlmeS9jcnlwdG8tYnJvd3NlcmlmeSdcbi8vICAgICBdLmpvaW4oJ1xcbicpKVxuLy8gICB9XG4vLyB9KVxuXG52YXIgcmYgPSByZXF1aXJlKCdyYW5kb21maWxsJylcblxuZXhwb3J0cy5yYW5kb21GaWxsID0gcmYucmFuZG9tRmlsbFxuZXhwb3J0cy5yYW5kb21GaWxsU3luYyA9IHJmLnJhbmRvbUZpbGxTeW5jXG5cbmV4cG9ydHMuY3JlYXRlQ3JlZGVudGlhbHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcihbXG4gICAgJ3NvcnJ5LCBjcmVhdGVDcmVkZW50aWFscyBpcyBub3QgaW1wbGVtZW50ZWQgeWV0JyxcbiAgICAnd2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMnLFxuICAgICdodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvLWJyb3dzZXJpZnkvY3J5cHRvLWJyb3dzZXJpZnknXG4gIF0uam9pbignXFxuJykpXG59XG5cbmV4cG9ydHMuY29uc3RhbnRzID0ge1xuICAnREhfQ0hFQ0tfUF9OT1RfU0FGRV9QUklNRSc6IDIsXG4gICdESF9DSEVDS19QX05PVF9QUklNRSc6IDEsXG4gICdESF9VTkFCTEVfVE9fQ0hFQ0tfR0VORVJBVE9SJzogNCxcbiAgJ0RIX05PVF9TVUlUQUJMRV9HRU5FUkFUT1InOiA4LFxuICAnTlBOX0VOQUJMRUQnOiAxLFxuICAnQUxQTl9FTkFCTEVEJzogMSxcbiAgJ1JTQV9QS0NTMV9QQURESU5HJzogMSxcbiAgJ1JTQV9TU0xWMjNfUEFERElORyc6IDIsXG4gICdSU0FfTk9fUEFERElORyc6IDMsXG4gICdSU0FfUEtDUzFfT0FFUF9QQURESU5HJzogNCxcbiAgJ1JTQV9YOTMxX1BBRERJTkcnOiA1LFxuICAnUlNBX1BLQ1MxX1BTU19QQURESU5HJzogNixcbiAgJ1BPSU5UX0NPTlZFUlNJT05fQ09NUFJFU1NFRCc6IDIsXG4gICdQT0lOVF9DT05WRVJTSU9OX1VOQ09NUFJFU1NFRCc6IDQsXG4gICdQT0lOVF9DT05WRVJTSU9OX0hZQlJJRCc6IDZcbn1cbiIsIid1c2Ugc3RyaWN0J1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIHRocm93SWZOb3RTdHJpbmdPckJ1ZmZlciAodmFsLCBwcmVmaXgpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodmFsKSAmJiB0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocHJlZml4ICsgJyBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgYnVmZmVyJylcbiAgfVxufVxuXG5mdW5jdGlvbiBIYXNoQmFzZSAoYmxvY2tTaXplKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fYmxvY2sgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tTaXplKVxuICB0aGlzLl9ibG9ja1NpemUgPSBibG9ja1NpemVcbiAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIHRoaXMuX2xlbmd0aCA9IFswLCAwLCAwLCAwXVxuXG4gIHRoaXMuX2ZpbmFsaXplZCA9IGZhbHNlXG59XG5cbmluaGVyaXRzKEhhc2hCYXNlLCBUcmFuc2Zvcm0pXG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgdmFyIGVycm9yID0gbnVsbFxuICB0cnkge1xuICAgIHRoaXMudXBkYXRlKGNodW5rLCBlbmNvZGluZylcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IgPSBlcnJcbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9yKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciBlcnJvciA9IG51bGxcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5kaWdlc3QoKSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IgPSBlcnJcbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9yKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGVuY29kaW5nKSB7XG4gIHRocm93SWZOb3RTdHJpbmdPckJ1ZmZlcihkYXRhLCAnRGF0YScpXG4gIGlmICh0aGlzLl9maW5hbGl6ZWQpIHRocm93IG5ldyBFcnJvcignRGlnZXN0IGFscmVhZHkgY2FsbGVkJylcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBlbmNvZGluZylcblxuICAvLyBjb25zdW1lIGRhdGFcbiAgdmFyIGJsb2NrID0gdGhpcy5fYmxvY2tcbiAgdmFyIG9mZnNldCA9IDBcbiAgd2hpbGUgKHRoaXMuX2Jsb2NrT2Zmc2V0ICsgZGF0YS5sZW5ndGggLSBvZmZzZXQgPj0gdGhpcy5fYmxvY2tTaXplKSB7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMuX2Jsb2NrT2Zmc2V0OyBpIDwgdGhpcy5fYmxvY2tTaXplOykgYmxvY2tbaSsrXSA9IGRhdGFbb2Zmc2V0KytdXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuICB3aGlsZSAob2Zmc2V0IDwgZGF0YS5sZW5ndGgpIGJsb2NrW3RoaXMuX2Jsb2NrT2Zmc2V0KytdID0gZGF0YVtvZmZzZXQrK11cblxuICAvLyB1cGRhdGUgbGVuZ3RoXG4gIGZvciAodmFyIGogPSAwLCBjYXJyeSA9IGRhdGEubGVuZ3RoICogODsgY2FycnkgPiAwOyArK2opIHtcbiAgICB0aGlzLl9sZW5ndGhbal0gKz0gY2FycnlcbiAgICBjYXJyeSA9ICh0aGlzLl9sZW5ndGhbal0gLyAweDAxMDAwMDAwMDApIHwgMFxuICAgIGlmIChjYXJyeSA+IDApIHRoaXMuX2xlbmd0aFtqXSAtPSAweDAxMDAwMDAwMDAgKiBjYXJyeVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3VwZGF0ZSBpcyBub3QgaW1wbGVtZW50ZWQnKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGlmICh0aGlzLl9maW5hbGl6ZWQpIHRocm93IG5ldyBFcnJvcignRGlnZXN0IGFscmVhZHkgY2FsbGVkJylcbiAgdGhpcy5fZmluYWxpemVkID0gdHJ1ZVxuXG4gIHZhciBkaWdlc3QgPSB0aGlzLl9kaWdlc3QoKVxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkgZGlnZXN0ID0gZGlnZXN0LnRvU3RyaW5nKGVuY29kaW5nKVxuXG4gIC8vIHJlc2V0IHN0YXRlXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMClcbiAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB0aGlzLl9sZW5ndGhbaV0gPSAwXG5cbiAgcmV0dXJuIGRpZ2VzdFxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfZGlnZXN0IGlzIG5vdCBpbXBsZW1lbnRlZCcpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaEJhc2VcbiIsIi8qKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0yNTYsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgMTgwLTJcbiAqIFZlcnNpb24gMi4yLWJldGEgQ29weXJpZ2h0IEFuZ2VsIE1hcmluLCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDA5LlxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICpcbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NDI4QTJGOTgsIDB4NzEzNzQ0OTEsIDB4QjVDMEZCQ0YsIDB4RTlCNURCQTUsXG4gIDB4Mzk1NkMyNUIsIDB4NTlGMTExRjEsIDB4OTIzRjgyQTQsIDB4QUIxQzVFRDUsXG4gIDB4RDgwN0FBOTgsIDB4MTI4MzVCMDEsIDB4MjQzMTg1QkUsIDB4NTUwQzdEQzMsXG4gIDB4NzJCRTVENzQsIDB4ODBERUIxRkUsIDB4OUJEQzA2QTcsIDB4QzE5QkYxNzQsXG4gIDB4RTQ5QjY5QzEsIDB4RUZCRTQ3ODYsIDB4MEZDMTlEQzYsIDB4MjQwQ0ExQ0MsXG4gIDB4MkRFOTJDNkYsIDB4NEE3NDg0QUEsIDB4NUNCMEE5REMsIDB4NzZGOTg4REEsXG4gIDB4OTgzRTUxNTIsIDB4QTgzMUM2NkQsIDB4QjAwMzI3QzgsIDB4QkY1OTdGQzcsXG4gIDB4QzZFMDBCRjMsIDB4RDVBNzkxNDcsIDB4MDZDQTYzNTEsIDB4MTQyOTI5NjcsXG4gIDB4MjdCNzBBODUsIDB4MkUxQjIxMzgsIDB4NEQyQzZERkMsIDB4NTMzODBEMTMsXG4gIDB4NjUwQTczNTQsIDB4NzY2QTBBQkIsIDB4ODFDMkM5MkUsIDB4OTI3MjJDODUsXG4gIDB4QTJCRkU4QTEsIDB4QTgxQTY2NEIsIDB4QzI0QjhCNzAsIDB4Qzc2QzUxQTMsXG4gIDB4RDE5MkU4MTksIDB4RDY5OTA2MjQsIDB4RjQwRTM1ODUsIDB4MTA2QUEwNzAsXG4gIDB4MTlBNEMxMTYsIDB4MUUzNzZDMDgsIDB4Mjc0ODc3NEMsIDB4MzRCMEJDQjUsXG4gIDB4MzkxQzBDQjMsIDB4NEVEOEFBNEEsIDB4NUI5Q0NBNEYsIDB4NjgyRTZGRjMsXG4gIDB4NzQ4RjgyRUUsIDB4NzhBNTYzNkYsIDB4ODRDODc4MTQsIDB4OENDNzAyMDgsXG4gIDB4OTBCRUZGRkEsIDB4QTQ1MDZDRUIsIDB4QkVGOUEzRjcsIDB4QzY3MTc4RjJcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoNjQpXG5cbmZ1bmN0aW9uIFNoYTI1NiAoKSB7XG4gIHRoaXMuaW5pdCgpXG5cbiAgdGhpcy5fdyA9IFcgLy8gbmV3IEFycmF5KDY0KVxuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTI1NiwgSGFzaClcblxuU2hhMjU2LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2YTA5ZTY2N1xuICB0aGlzLl9iID0gMHhiYjY3YWU4NVxuICB0aGlzLl9jID0gMHgzYzZlZjM3MlxuICB0aGlzLl9kID0gMHhhNTRmZjUzYVxuICB0aGlzLl9lID0gMHg1MTBlNTI3ZlxuICB0aGlzLl9mID0gMHg5YjA1Njg4Y1xuICB0aGlzLl9nID0gMHgxZjgzZDlhYlxuICB0aGlzLl9oID0gMHg1YmUwY2QxOVxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIGNoICh4LCB5LCB6KSB7XG4gIHJldHVybiB6IF4gKHggJiAoeSBeIHopKVxufVxuXG5mdW5jdGlvbiBtYWogKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgfCAoeiAmICh4IHwgeSkpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMCAoeCkge1xuICByZXR1cm4gKHggPj4+IDIgfCB4IDw8IDMwKSBeICh4ID4+PiAxMyB8IHggPDwgMTkpIF4gKHggPj4+IDIyIHwgeCA8PCAxMClcbn1cblxuZnVuY3Rpb24gc2lnbWExICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gNiB8IHggPDwgMjYpIF4gKHggPj4+IDExIHwgeCA8PCAyMSkgXiAoeCA+Pj4gMjUgfCB4IDw8IDcpXG59XG5cbmZ1bmN0aW9uIGdhbW1hMCAoeCkge1xuICByZXR1cm4gKHggPj4+IDcgfCB4IDw8IDI1KSBeICh4ID4+PiAxOCB8IHggPDwgMTQpIF4gKHggPj4+IDMpXG59XG5cbmZ1bmN0aW9uIGdhbW1hMSAoeCkge1xuICByZXR1cm4gKHggPj4+IDE3IHwgeCA8PCAxNSkgXiAoeCA+Pj4gMTkgfCB4IDw8IDEzKSBeICh4ID4+PiAxMClcbn1cblxuU2hhMjU2LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG4gIHZhciBmID0gdGhpcy5fZiB8IDBcbiAgdmFyIGcgPSB0aGlzLl9nIHwgMFxuICB2YXIgaCA9IHRoaXMuX2ggfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgZm9yICg7IGkgPCA2NDsgKytpKSBXW2ldID0gKGdhbW1hMShXW2kgLSAyXSkgKyBXW2kgLSA3XSArIGdhbW1hMChXW2kgLSAxNV0pICsgV1tpIC0gMTZdKSB8IDBcblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDY0OyArK2opIHtcbiAgICB2YXIgVDEgPSAoaCArIHNpZ21hMShlKSArIGNoKGUsIGYsIGcpICsgS1tqXSArIFdbal0pIHwgMFxuICAgIHZhciBUMiA9IChzaWdtYTAoYSkgKyBtYWooYSwgYiwgYykpIHwgMFxuXG4gICAgaCA9IGdcbiAgICBnID0gZlxuICAgIGYgPSBlXG4gICAgZSA9IChkICsgVDEpIHwgMFxuICAgIGQgPSBjXG4gICAgYyA9IGJcbiAgICBiID0gYVxuICAgIGEgPSAoVDEgKyBUMikgfCAwXG4gIH1cblxuICB0aGlzLl9hID0gKGEgKyB0aGlzLl9hKSB8IDBcbiAgdGhpcy5fYiA9IChiICsgdGhpcy5fYikgfCAwXG4gIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICB0aGlzLl9kID0gKGQgKyB0aGlzLl9kKSB8IDBcbiAgdGhpcy5fZSA9IChlICsgdGhpcy5fZSkgfCAwXG4gIHRoaXMuX2YgPSAoZiArIHRoaXMuX2YpIHwgMFxuICB0aGlzLl9nID0gKGcgKyB0aGlzLl9nKSB8IDBcbiAgdGhpcy5faCA9IChoICsgdGhpcy5faCkgfCAwXG59XG5cblNoYTI1Ni5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDMyKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lLCAxNilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZiwgMjApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2csIDI0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9oLCAyOClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTI1NlxuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDQyOGEyZjk4LCAweGQ3MjhhZTIyLCAweDcxMzc0NDkxLCAweDIzZWY2NWNkLFxuICAweGI1YzBmYmNmLCAweGVjNGQzYjJmLCAweGU5YjVkYmE1LCAweDgxODlkYmJjLFxuICAweDM5NTZjMjViLCAweGYzNDhiNTM4LCAweDU5ZjExMWYxLCAweGI2MDVkMDE5LFxuICAweDkyM2Y4MmE0LCAweGFmMTk0ZjliLCAweGFiMWM1ZWQ1LCAweGRhNmQ4MTE4LFxuICAweGQ4MDdhYTk4LCAweGEzMDMwMjQyLCAweDEyODM1YjAxLCAweDQ1NzA2ZmJlLFxuICAweDI0MzE4NWJlLCAweDRlZTRiMjhjLCAweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyLFxuICAweDcyYmU1ZDc0LCAweGYyN2I4OTZmLCAweDgwZGViMWZlLCAweDNiMTY5NmIxLFxuICAweDliZGMwNmE3LCAweDI1YzcxMjM1LCAweGMxOWJmMTc0LCAweGNmNjkyNjk0LFxuICAweGU0OWI2OWMxLCAweDllZjE0YWQyLCAweGVmYmU0Nzg2LCAweDM4NGYyNWUzLFxuICAweDBmYzE5ZGM2LCAweDhiOGNkNWI1LCAweDI0MGNhMWNjLCAweDc3YWM5YzY1LFxuICAweDJkZTkyYzZmLCAweDU5MmIwMjc1LCAweDRhNzQ4NGFhLCAweDZlYTZlNDgzLFxuICAweDVjYjBhOWRjLCAweGJkNDFmYmQ0LCAweDc2Zjk4OGRhLCAweDgzMTE1M2I1LFxuICAweDk4M2U1MTUyLCAweGVlNjZkZmFiLCAweGE4MzFjNjZkLCAweDJkYjQzMjEwLFxuICAweGIwMDMyN2M4LCAweDk4ZmIyMTNmLCAweGJmNTk3ZmM3LCAweGJlZWYwZWU0LFxuICAweGM2ZTAwYmYzLCAweDNkYTg4ZmMyLCAweGQ1YTc5MTQ3LCAweDkzMGFhNzI1LFxuICAweDA2Y2E2MzUxLCAweGUwMDM4MjZmLCAweDE0MjkyOTY3LCAweDBhMGU2ZTcwLFxuICAweDI3YjcwYTg1LCAweDQ2ZDIyZmZjLCAweDJlMWIyMTM4LCAweDVjMjZjOTI2LFxuICAweDRkMmM2ZGZjLCAweDVhYzQyYWVkLCAweDUzMzgwZDEzLCAweDlkOTViM2RmLFxuICAweDY1MGE3MzU0LCAweDhiYWY2M2RlLCAweDc2NmEwYWJiLCAweDNjNzdiMmE4LFxuICAweDgxYzJjOTJlLCAweDQ3ZWRhZWU2LCAweDkyNzIyYzg1LCAweDE0ODIzNTNiLFxuICAweGEyYmZlOGExLCAweDRjZjEwMzY0LCAweGE4MWE2NjRiLCAweGJjNDIzMDAxLFxuICAweGMyNGI4YjcwLCAweGQwZjg5NzkxLCAweGM3NmM1MWEzLCAweDA2NTRiZTMwLFxuICAweGQxOTJlODE5LCAweGQ2ZWY1MjE4LCAweGQ2OTkwNjI0LCAweDU1NjVhOTEwLFxuICAweGY0MGUzNTg1LCAweDU3NzEyMDJhLCAweDEwNmFhMDcwLCAweDMyYmJkMWI4LFxuICAweDE5YTRjMTE2LCAweGI4ZDJkMGM4LCAweDFlMzc2YzA4LCAweDUxNDFhYjUzLFxuICAweDI3NDg3NzRjLCAweGRmOGVlYjk5LCAweDM0YjBiY2I1LCAweGUxOWI0OGE4LFxuICAweDM5MWMwY2IzLCAweGM1Yzk1YTYzLCAweDRlZDhhYTRhLCAweGUzNDE4YWNiLFxuICAweDViOWNjYTRmLCAweDc3NjNlMzczLCAweDY4MmU2ZmYzLCAweGQ2YjJiOGEzLFxuICAweDc0OGY4MmVlLCAweDVkZWZiMmZjLCAweDc4YTU2MzZmLCAweDQzMTcyZjYwLFxuICAweDg0Yzg3ODE0LCAweGExZjBhYjcyLCAweDhjYzcwMjA4LCAweDFhNjQzOWVjLFxuICAweDkwYmVmZmZhLCAweDIzNjMxZTI4LCAweGE0NTA2Y2ViLCAweGRlODJiZGU5LFxuICAweGJlZjlhM2Y3LCAweGIyYzY3OTE1LCAweGM2NzE3OGYyLCAweGUzNzI1MzJiLFxuICAweGNhMjczZWNlLCAweGVhMjY2MTljLCAweGQxODZiOGM3LCAweDIxYzBjMjA3LFxuICAweGVhZGE3ZGQ2LCAweGNkZTBlYjFlLCAweGY1N2Q0ZjdmLCAweGVlNmVkMTc4LFxuICAweDA2ZjA2N2FhLCAweDcyMTc2ZmJhLCAweDBhNjM3ZGM1LCAweGEyYzg5OGE2LFxuICAweDExM2Y5ODA0LCAweGJlZjkwZGFlLCAweDFiNzEwYjM1LCAweDEzMWM0NzFiLFxuICAweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0LCAweDMyY2FhYjdiLCAweDQwYzcyNDkzLFxuICAweDNjOWViZTBhLCAweDE1YzliZWJjLCAweDQzMWQ2N2M0LCAweDljMTAwZDRjLFxuICAweDRjYzVkNGJlLCAweGNiM2U0MmI2LCAweDU5N2YyOTljLCAweGZjNjU3ZTJhLFxuICAweDVmY2I2ZmFiLCAweDNhZDZmYWVjLCAweDZjNDQxOThjLCAweDRhNDc1ODE3XG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDE2MClcblxuZnVuY3Rpb24gU2hhNTEyICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgMTI4LCAxMTIpXG59XG5cbmluaGVyaXRzKFNoYTUxMiwgSGFzaClcblxuU2hhNTEyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9haCA9IDB4NmEwOWU2NjdcbiAgdGhpcy5fYmggPSAweGJiNjdhZTg1XG4gIHRoaXMuX2NoID0gMHgzYzZlZjM3MlxuICB0aGlzLl9kaCA9IDB4YTU0ZmY1M2FcbiAgdGhpcy5fZWggPSAweDUxMGU1MjdmXG4gIHRoaXMuX2ZoID0gMHg5YjA1Njg4Y1xuICB0aGlzLl9naCA9IDB4MWY4M2Q5YWJcbiAgdGhpcy5faGggPSAweDViZTBjZDE5XG5cbiAgdGhpcy5fYWwgPSAweGYzYmNjOTA4XG4gIHRoaXMuX2JsID0gMHg4NGNhYTczYlxuICB0aGlzLl9jbCA9IDB4ZmU5NGY4MmJcbiAgdGhpcy5fZGwgPSAweDVmMWQzNmYxXG4gIHRoaXMuX2VsID0gMHhhZGU2ODJkMVxuICB0aGlzLl9mbCA9IDB4MmIzZTZjMWZcbiAgdGhpcy5fZ2wgPSAweGZiNDFiZDZiXG4gIHRoaXMuX2hsID0gMHgxMzdlMjE3OVxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIENoICh4LCB5LCB6KSB7XG4gIHJldHVybiB6IF4gKHggJiAoeSBeIHopKVxufVxuXG5mdW5jdGlvbiBtYWogKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgfCAoeiAmICh4IHwgeSkpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAyOCB8IHhsIDw8IDQpIF4gKHhsID4+PiAyIHwgeCA8PCAzMCkgXiAoeGwgPj4+IDcgfCB4IDw8IDI1KVxufVxuXG5mdW5jdGlvbiBzaWdtYTEgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTQgfCB4bCA8PCAxOCkgXiAoeCA+Pj4gMTggfCB4bCA8PCAxNCkgXiAoeGwgPj4+IDkgfCB4IDw8IDIzKVxufVxuXG5mdW5jdGlvbiBHYW1tYTAgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwgeGwgPDwgMjQpIF4gKHggPj4+IDcpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMGwgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwgeGwgPDwgMjQpIF4gKHggPj4+IDcgfCB4bCA8PCAyNSlcbn1cblxuZnVuY3Rpb24gR2FtbWExICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE5IHwgeGwgPDwgMTMpIF4gKHhsID4+PiAyOSB8IHggPDwgMykgXiAoeCA+Pj4gNilcbn1cblxuZnVuY3Rpb24gR2FtbWExbCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxOSB8IHhsIDw8IDEzKSBeICh4bCA+Pj4gMjkgfCB4IDw8IDMpIF4gKHggPj4+IDYgfCB4bCA8PCAyNilcbn1cblxuZnVuY3Rpb24gZ2V0Q2FycnkgKGEsIGIpIHtcbiAgcmV0dXJuIChhID4+PiAwKSA8IChiID4+PiAwKSA/IDEgOiAwXG59XG5cblNoYTUxMi5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhaCA9IHRoaXMuX2FoIHwgMFxuICB2YXIgYmggPSB0aGlzLl9iaCB8IDBcbiAgdmFyIGNoID0gdGhpcy5fY2ggfCAwXG4gIHZhciBkaCA9IHRoaXMuX2RoIHwgMFxuICB2YXIgZWggPSB0aGlzLl9laCB8IDBcbiAgdmFyIGZoID0gdGhpcy5fZmggfCAwXG4gIHZhciBnaCA9IHRoaXMuX2doIHwgMFxuICB2YXIgaGggPSB0aGlzLl9oaCB8IDBcblxuICB2YXIgYWwgPSB0aGlzLl9hbCB8IDBcbiAgdmFyIGJsID0gdGhpcy5fYmwgfCAwXG4gIHZhciBjbCA9IHRoaXMuX2NsIHwgMFxuICB2YXIgZGwgPSB0aGlzLl9kbCB8IDBcbiAgdmFyIGVsID0gdGhpcy5fZWwgfCAwXG4gIHZhciBmbCA9IHRoaXMuX2ZsIHwgMFxuICB2YXIgZ2wgPSB0aGlzLl9nbCB8IDBcbiAgdmFyIGhsID0gdGhpcy5faGwgfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzMjsgaSArPSAyKSB7XG4gICAgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gICAgV1tpICsgMV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0ICsgNClcbiAgfVxuICBmb3IgKDsgaSA8IDE2MDsgaSArPSAyKSB7XG4gICAgdmFyIHhoID0gV1tpIC0gMTUgKiAyXVxuICAgIHZhciB4bCA9IFdbaSAtIDE1ICogMiArIDFdXG4gICAgdmFyIGdhbW1hMCA9IEdhbW1hMCh4aCwgeGwpXG4gICAgdmFyIGdhbW1hMGwgPSBHYW1tYTBsKHhsLCB4aClcblxuICAgIHhoID0gV1tpIC0gMiAqIDJdXG4gICAgeGwgPSBXW2kgLSAyICogMiArIDFdXG4gICAgdmFyIGdhbW1hMSA9IEdhbW1hMSh4aCwgeGwpXG4gICAgdmFyIGdhbW1hMWwgPSBHYW1tYTFsKHhsLCB4aClcblxuICAgIC8vIFdbaV0gPSBnYW1tYTAgKyBXW2kgLSA3XSArIGdhbW1hMSArIFdbaSAtIDE2XVxuICAgIHZhciBXaTdoID0gV1tpIC0gNyAqIDJdXG4gICAgdmFyIFdpN2wgPSBXW2kgLSA3ICogMiArIDFdXG5cbiAgICB2YXIgV2kxNmggPSBXW2kgLSAxNiAqIDJdXG4gICAgdmFyIFdpMTZsID0gV1tpIC0gMTYgKiAyICsgMV1cblxuICAgIHZhciBXaWwgPSAoZ2FtbWEwbCArIFdpN2wpIHwgMFxuICAgIHZhciBXaWggPSAoZ2FtbWEwICsgV2k3aCArIGdldENhcnJ5KFdpbCwgZ2FtbWEwbCkpIHwgMFxuICAgIFdpbCA9IChXaWwgKyBnYW1tYTFsKSB8IDBcbiAgICBXaWggPSAoV2loICsgZ2FtbWExICsgZ2V0Q2FycnkoV2lsLCBnYW1tYTFsKSkgfCAwXG4gICAgV2lsID0gKFdpbCArIFdpMTZsKSB8IDBcbiAgICBXaWggPSAoV2loICsgV2kxNmggKyBnZXRDYXJyeShXaWwsIFdpMTZsKSkgfCAwXG5cbiAgICBXW2ldID0gV2loXG4gICAgV1tpICsgMV0gPSBXaWxcbiAgfVxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgMTYwOyBqICs9IDIpIHtcbiAgICBXaWggPSBXW2pdXG4gICAgV2lsID0gV1tqICsgMV1cblxuICAgIHZhciBtYWpoID0gbWFqKGFoLCBiaCwgY2gpXG4gICAgdmFyIG1hamwgPSBtYWooYWwsIGJsLCBjbClcblxuICAgIHZhciBzaWdtYTBoID0gc2lnbWEwKGFoLCBhbClcbiAgICB2YXIgc2lnbWEwbCA9IHNpZ21hMChhbCwgYWgpXG4gICAgdmFyIHNpZ21hMWggPSBzaWdtYTEoZWgsIGVsKVxuICAgIHZhciBzaWdtYTFsID0gc2lnbWExKGVsLCBlaClcblxuICAgIC8vIHQxID0gaCArIHNpZ21hMSArIGNoICsgS1tqXSArIFdbal1cbiAgICB2YXIgS2loID0gS1tqXVxuICAgIHZhciBLaWwgPSBLW2ogKyAxXVxuXG4gICAgdmFyIGNoaCA9IENoKGVoLCBmaCwgZ2gpXG4gICAgdmFyIGNobCA9IENoKGVsLCBmbCwgZ2wpXG5cbiAgICB2YXIgdDFsID0gKGhsICsgc2lnbWExbCkgfCAwXG4gICAgdmFyIHQxaCA9IChoaCArIHNpZ21hMWggKyBnZXRDYXJyeSh0MWwsIGhsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIGNobCkgfCAwXG4gICAgdDFoID0gKHQxaCArIGNoaCArIGdldENhcnJ5KHQxbCwgY2hsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIEtpbCkgfCAwXG4gICAgdDFoID0gKHQxaCArIEtpaCArIGdldENhcnJ5KHQxbCwgS2lsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIFdpbCkgfCAwXG4gICAgdDFoID0gKHQxaCArIFdpaCArIGdldENhcnJ5KHQxbCwgV2lsKSkgfCAwXG5cbiAgICAvLyB0MiA9IHNpZ21hMCArIG1halxuICAgIHZhciB0MmwgPSAoc2lnbWEwbCArIG1hamwpIHwgMFxuICAgIHZhciB0MmggPSAoc2lnbWEwaCArIG1hamggKyBnZXRDYXJyeSh0MmwsIHNpZ21hMGwpKSB8IDBcblxuICAgIGhoID0gZ2hcbiAgICBobCA9IGdsXG4gICAgZ2ggPSBmaFxuICAgIGdsID0gZmxcbiAgICBmaCA9IGVoXG4gICAgZmwgPSBlbFxuICAgIGVsID0gKGRsICsgdDFsKSB8IDBcbiAgICBlaCA9IChkaCArIHQxaCArIGdldENhcnJ5KGVsLCBkbCkpIHwgMFxuICAgIGRoID0gY2hcbiAgICBkbCA9IGNsXG4gICAgY2ggPSBiaFxuICAgIGNsID0gYmxcbiAgICBiaCA9IGFoXG4gICAgYmwgPSBhbFxuICAgIGFsID0gKHQxbCArIHQybCkgfCAwXG4gICAgYWggPSAodDFoICsgdDJoICsgZ2V0Q2FycnkoYWwsIHQxbCkpIHwgMFxuICB9XG5cbiAgdGhpcy5fYWwgPSAodGhpcy5fYWwgKyBhbCkgfCAwXG4gIHRoaXMuX2JsID0gKHRoaXMuX2JsICsgYmwpIHwgMFxuICB0aGlzLl9jbCA9ICh0aGlzLl9jbCArIGNsKSB8IDBcbiAgdGhpcy5fZGwgPSAodGhpcy5fZGwgKyBkbCkgfCAwXG4gIHRoaXMuX2VsID0gKHRoaXMuX2VsICsgZWwpIHwgMFxuICB0aGlzLl9mbCA9ICh0aGlzLl9mbCArIGZsKSB8IDBcbiAgdGhpcy5fZ2wgPSAodGhpcy5fZ2wgKyBnbCkgfCAwXG4gIHRoaXMuX2hsID0gKHRoaXMuX2hsICsgaGwpIHwgMFxuXG4gIHRoaXMuX2FoID0gKHRoaXMuX2FoICsgYWggKyBnZXRDYXJyeSh0aGlzLl9hbCwgYWwpKSB8IDBcbiAgdGhpcy5fYmggPSAodGhpcy5fYmggKyBiaCArIGdldENhcnJ5KHRoaXMuX2JsLCBibCkpIHwgMFxuICB0aGlzLl9jaCA9ICh0aGlzLl9jaCArIGNoICsgZ2V0Q2FycnkodGhpcy5fY2wsIGNsKSkgfCAwXG4gIHRoaXMuX2RoID0gKHRoaXMuX2RoICsgZGggKyBnZXRDYXJyeSh0aGlzLl9kbCwgZGwpKSB8IDBcbiAgdGhpcy5fZWggPSAodGhpcy5fZWggKyBlaCArIGdldENhcnJ5KHRoaXMuX2VsLCBlbCkpIHwgMFxuICB0aGlzLl9maCA9ICh0aGlzLl9maCArIGZoICsgZ2V0Q2FycnkodGhpcy5fZmwsIGZsKSkgfCAwXG4gIHRoaXMuX2doID0gKHRoaXMuX2doICsgZ2ggKyBnZXRDYXJyeSh0aGlzLl9nbCwgZ2wpKSB8IDBcbiAgdGhpcy5faGggPSAodGhpcy5faGggKyBoaCArIGdldENhcnJ5KHRoaXMuX2hsLCBobCkpIHwgMFxufVxuXG5TaGE1MTIucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg2NClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2FoLCB0aGlzLl9hbCwgMClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2JoLCB0aGlzLl9ibCwgOClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2NoLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kaCwgdGhpcy5fZGwsIDI0KVxuICB3cml0ZUludDY0QkUodGhpcy5fZWgsIHRoaXMuX2VsLCAzMilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2ZoLCB0aGlzLl9mbCwgNDApXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9naCwgdGhpcy5fZ2wsIDQ4KVxuICB3cml0ZUludDY0QkUodGhpcy5faGgsIHRoaXMuX2hsLCA1NilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTUxMlxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgTGVnYWN5ID0gcmVxdWlyZSgnLi9sZWdhY3knKVxudmFyIEJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBtZDUgPSByZXF1aXJlKCdjcmVhdGUtaGFzaC9tZDUnKVxudmFyIFJJUEVNRDE2MCA9IHJlcXVpcmUoJ3JpcGVtZDE2MCcpXG5cbnZhciBzaGEgPSByZXF1aXJlKCdzaGEuanMnKVxuXG52YXIgWkVST1MgPSBCdWZmZXIuYWxsb2MoMTI4KVxuXG5mdW5jdGlvbiBIbWFjIChhbGcsIGtleSkge1xuICBCYXNlLmNhbGwodGhpcywgJ2RpZ2VzdCcpXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgIGtleSA9IEJ1ZmZlci5mcm9tKGtleSlcbiAgfVxuXG4gIHZhciBibG9ja3NpemUgPSAoYWxnID09PSAnc2hhNTEyJyB8fCBhbGcgPT09ICdzaGEzODQnKSA/IDEyOCA6IDY0XG5cbiAgdGhpcy5fYWxnID0gYWxnXG4gIHRoaXMuX2tleSA9IGtleVxuICBpZiAoa2V5Lmxlbmd0aCA+IGJsb2Nrc2l6ZSkge1xuICAgIHZhciBoYXNoID0gYWxnID09PSAncm1kMTYwJyA/IG5ldyBSSVBFTUQxNjAoKSA6IHNoYShhbGcpXG4gICAga2V5ID0gaGFzaC51cGRhdGUoa2V5KS5kaWdlc3QoKVxuICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPCBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIFpFUk9TXSwgYmxvY2tzaXplKVxuICB9XG5cbiAgdmFyIGlwYWQgPSB0aGlzLl9pcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcbiAgdmFyIG9wYWQgPSB0aGlzLl9vcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzZcbiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1Q1xuICB9XG4gIHRoaXMuX2hhc2ggPSBhbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hhKGFsZylcbiAgdGhpcy5faGFzaC51cGRhdGUoaXBhZClcbn1cblxuaW5oZXJpdHMoSG1hYywgQmFzZSlcblxuSG1hYy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG59XG5cbkhtYWMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGggPSB0aGlzLl9oYXNoLmRpZ2VzdCgpXG4gIHZhciBoYXNoID0gdGhpcy5fYWxnID09PSAncm1kMTYwJyA/IG5ldyBSSVBFTUQxNjAoKSA6IHNoYSh0aGlzLl9hbGcpXG4gIHJldHVybiBoYXNoLnVwZGF0ZSh0aGlzLl9vcGFkKS51cGRhdGUoaCkuZGlnZXN0KClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVIbWFjIChhbGcsIGtleSkge1xuICBhbGcgPSBhbGcudG9Mb3dlckNhc2UoKVxuICBpZiAoYWxnID09PSAncm1kMTYwJyB8fCBhbGcgPT09ICdyaXBlbWQxNjAnKSB7XG4gICAgcmV0dXJuIG5ldyBIbWFjKCdybWQxNjAnLCBrZXkpXG4gIH1cbiAgaWYgKGFsZyA9PT0gJ21kNScpIHtcbiAgICByZXR1cm4gbmV3IExlZ2FjeShtZDUsIGtleSlcbiAgfVxuICByZXR1cm4gbmV3IEhtYWMoYWxnLCBrZXkpXG59XG4iLCJ2YXIgTUQ1ID0gcmVxdWlyZSgnbWQ1LmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHJldHVybiBuZXcgTUQ1KCkudXBkYXRlKGJ1ZmZlcikuZGlnZXN0KClcbn1cbiIsImV4cG9ydHMucGJrZGYyID0gcmVxdWlyZSgnLi9saWIvYXN5bmMnKVxuZXhwb3J0cy5wYmtkZjJTeW5jID0gcmVxdWlyZSgnLi9saWIvc3luYycpXG4iLCJ2YXIgTUFYX0FMTE9DID0gTWF0aC5wb3coMiwgMzApIC0gMSAvLyBkZWZhdWx0IGluIGlvanNcblxuZnVuY3Rpb24gY2hlY2tCdWZmZXIgKGJ1ZiwgbmFtZSkge1xuICBpZiAodHlwZW9mIGJ1ZiAhPT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihuYW1lICsgJyBtdXN0IGJlIGEgYnVmZmVyIG9yIHN0cmluZycpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbikge1xuICBjaGVja0J1ZmZlcihwYXNzd29yZCwgJ1Bhc3N3b3JkJylcbiAgY2hlY2tCdWZmZXIoc2FsdCwgJ1NhbHQnKVxuXG4gIGlmICh0eXBlb2YgaXRlcmF0aW9ucyAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJdGVyYXRpb25zIG5vdCBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoaXRlcmF0aW9ucyA8IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgaXRlcmF0aW9ucycpXG4gIH1cblxuICBpZiAodHlwZW9mIGtleWxlbiAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdLZXkgbGVuZ3RoIG5vdCBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoa2V5bGVuIDwgMCB8fCBrZXlsZW4gPiBNQVhfQUxMT0MgfHwga2V5bGVuICE9PSBrZXlsZW4pIHsgLyogZXNsaW50IG5vLXNlbGYtY29tcGFyZTogMCAqL1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBrZXkgbGVuZ3RoJylcbiAgfVxufVxuIiwidmFyIGRlZmF1bHRFbmNvZGluZ1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChwcm9jZXNzLmJyb3dzZXIpIHtcbiAgZGVmYXVsdEVuY29kaW5nID0gJ3V0Zi04J1xufSBlbHNlIHtcbiAgdmFyIHBWZXJzaW9uTWFqb3IgPSBwYXJzZUludChwcm9jZXNzLnZlcnNpb24uc3BsaXQoJy4nKVswXS5zbGljZSgxKSwgMTApXG5cbiAgZGVmYXVsdEVuY29kaW5nID0gcFZlcnNpb25NYWpvciA+PSA2ID8gJ3V0Zi04JyA6ICdiaW5hcnknXG59XG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRFbmNvZGluZ1xuIiwidmFyIG1kNSA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoL21kNScpXG52YXIgUklQRU1EMTYwID0gcmVxdWlyZSgncmlwZW1kMTYwJylcbnZhciBzaGEgPSByZXF1aXJlKCdzaGEuanMnKVxuXG52YXIgY2hlY2tQYXJhbWV0ZXJzID0gcmVxdWlyZSgnLi9wcmVjb25kaXRpb24nKVxudmFyIGRlZmF1bHRFbmNvZGluZyA9IHJlcXVpcmUoJy4vZGVmYXVsdC1lbmNvZGluZycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBaRVJPUyA9IEJ1ZmZlci5hbGxvYygxMjgpXG52YXIgc2l6ZXMgPSB7XG4gIG1kNTogMTYsXG4gIHNoYTE6IDIwLFxuICBzaGEyMjQ6IDI4LFxuICBzaGEyNTY6IDMyLFxuICBzaGEzODQ6IDQ4LFxuICBzaGE1MTI6IDY0LFxuICBybWQxNjA6IDIwLFxuICByaXBlbWQxNjA6IDIwXG59XG5cbmZ1bmN0aW9uIEhtYWMgKGFsZywga2V5LCBzYWx0TGVuKSB7XG4gIHZhciBoYXNoID0gZ2V0RGlnZXN0KGFsZylcbiAgdmFyIGJsb2Nrc2l6ZSA9IChhbGcgPT09ICdzaGE1MTInIHx8IGFsZyA9PT0gJ3NoYTM4NCcpID8gMTI4IDogNjRcblxuICBpZiAoa2V5Lmxlbmd0aCA+IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IGhhc2goa2V5KVxuICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPCBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIFpFUk9TXSwgYmxvY2tzaXplKVxuICB9XG5cbiAgdmFyIGlwYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplICsgc2l6ZXNbYWxnXSlcbiAgdmFyIG9wYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplICsgc2l6ZXNbYWxnXSlcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3NpemU7IGkrKykge1xuICAgIGlwYWRbaV0gPSBrZXlbaV0gXiAweDM2XG4gICAgb3BhZFtpXSA9IGtleVtpXSBeIDB4NUNcbiAgfVxuXG4gIHZhciBpcGFkMSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUgKyBzYWx0TGVuICsgNClcbiAgaXBhZC5jb3B5KGlwYWQxLCAwLCAwLCBibG9ja3NpemUpXG4gIHRoaXMuaXBhZDEgPSBpcGFkMVxuICB0aGlzLmlwYWQyID0gaXBhZFxuICB0aGlzLm9wYWQgPSBvcGFkXG4gIHRoaXMuYWxnID0gYWxnXG4gIHRoaXMuYmxvY2tzaXplID0gYmxvY2tzaXplXG4gIHRoaXMuaGFzaCA9IGhhc2hcbiAgdGhpcy5zaXplID0gc2l6ZXNbYWxnXVxufVxuXG5IbWFjLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoZGF0YSwgaXBhZCkge1xuICBkYXRhLmNvcHkoaXBhZCwgdGhpcy5ibG9ja3NpemUpXG4gIHZhciBoID0gdGhpcy5oYXNoKGlwYWQpXG4gIGguY29weSh0aGlzLm9wYWQsIHRoaXMuYmxvY2tzaXplKVxuICByZXR1cm4gdGhpcy5oYXNoKHRoaXMub3BhZClcbn1cblxuZnVuY3Rpb24gZ2V0RGlnZXN0IChhbGcpIHtcbiAgZnVuY3Rpb24gc2hhRnVuYyAoZGF0YSkge1xuICAgIHJldHVybiBzaGEoYWxnKS51cGRhdGUoZGF0YSkuZGlnZXN0KClcbiAgfVxuICBmdW5jdGlvbiBybWQxNjBGdW5jIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBSSVBFTUQxNjAoKS51cGRhdGUoZGF0YSkuZGlnZXN0KClcbiAgfVxuXG4gIGlmIChhbGcgPT09ICdybWQxNjAnIHx8IGFsZyA9PT0gJ3JpcGVtZDE2MCcpIHJldHVybiBybWQxNjBGdW5jXG4gIGlmIChhbGcgPT09ICdtZDUnKSByZXR1cm4gbWQ1XG4gIHJldHVybiBzaGFGdW5jXG59XG5cbmZ1bmN0aW9uIHBia2RmMiAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0KSB7XG4gIGNoZWNrUGFyYW1ldGVycyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuKVxuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhc3N3b3JkKSkgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZCwgZGVmYXVsdEVuY29kaW5nKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkgc2FsdCA9IEJ1ZmZlci5mcm9tKHNhbHQsIGRlZmF1bHRFbmNvZGluZylcblxuICBkaWdlc3QgPSBkaWdlc3QgfHwgJ3NoYTEnXG5cbiAgdmFyIGhtYWMgPSBuZXcgSG1hYyhkaWdlc3QsIHBhc3N3b3JkLCBzYWx0Lmxlbmd0aClcblxuICB2YXIgREsgPSBCdWZmZXIuYWxsb2NVbnNhZmUoa2V5bGVuKVxuICB2YXIgYmxvY2sxID0gQnVmZmVyLmFsbG9jVW5zYWZlKHNhbHQubGVuZ3RoICsgNClcbiAgc2FsdC5jb3B5KGJsb2NrMSwgMCwgMCwgc2FsdC5sZW5ndGgpXG5cbiAgdmFyIGRlc3RQb3MgPSAwXG4gIHZhciBoTGVuID0gc2l6ZXNbZGlnZXN0XVxuICB2YXIgbCA9IE1hdGguY2VpbChrZXlsZW4gLyBoTGVuKVxuXG4gIGZvciAodmFyIGkgPSAxOyBpIDw9IGw7IGkrKykge1xuICAgIGJsb2NrMS53cml0ZVVJbnQzMkJFKGksIHNhbHQubGVuZ3RoKVxuXG4gICAgdmFyIFQgPSBobWFjLnJ1bihibG9jazEsIGhtYWMuaXBhZDEpXG4gICAgdmFyIFUgPSBUXG5cbiAgICBmb3IgKHZhciBqID0gMTsgaiA8IGl0ZXJhdGlvbnM7IGorKykge1xuICAgICAgVSA9IGhtYWMucnVuKFUsIGhtYWMuaXBhZDIpXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGhMZW47IGsrKykgVFtrXSBePSBVW2tdXG4gICAgfVxuXG4gICAgVC5jb3B5KERLLCBkZXN0UG9zKVxuICAgIGRlc3RQb3MgKz0gaExlblxuICB9XG5cbiAgcmV0dXJuIERLXG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGJrZGYyXG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFKGJ5dGVzLCBvZmYpIHtcbiAgdmFyIHJlcyA9ICAoYnl0ZXNbMCArIG9mZl0gPDwgMjQpIHxcbiAgICAgICAgICAgICAoYnl0ZXNbMSArIG9mZl0gPDwgMTYpIHxcbiAgICAgICAgICAgICAoYnl0ZXNbMiArIG9mZl0gPDwgOCkgfFxuICAgICAgICAgICAgIGJ5dGVzWzMgKyBvZmZdO1xuICByZXR1cm4gcmVzID4+PiAwO1xufTtcblxuZXhwb3J0cy53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRShieXRlcywgdmFsdWUsIG9mZikge1xuICBieXRlc1swICsgb2ZmXSA9IHZhbHVlID4+PiAyNDtcbiAgYnl0ZXNbMSArIG9mZl0gPSAodmFsdWUgPj4+IDE2KSAmIDB4ZmY7XG4gIGJ5dGVzWzIgKyBvZmZdID0gKHZhbHVlID4+PiA4KSAmIDB4ZmY7XG4gIGJ5dGVzWzMgKyBvZmZdID0gdmFsdWUgJiAweGZmO1xufTtcblxuZXhwb3J0cy5pcCA9IGZ1bmN0aW9uIGlwKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICBmb3IgKHZhciBpID0gNjsgaSA+PSAwOyBpIC09IDIpIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5SID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gNjsgaSA+PSAwOyBpIC09IDIpIHtcbiAgICBmb3IgKHZhciBqID0gMTsgaiA8PSAyNTsgaiArPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5SID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAxOyBqIDw9IDI1OyBqICs9IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxuZXhwb3J0cy5yaXAgPSBmdW5jdGlvbiByaXAoaW5MLCBpblIsIG91dCwgb2ZmKSB7XG4gIHZhciBvdXRMID0gMDtcbiAgdmFyIG91dFIgPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDI0OyBqID49IDA7IGogLT0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluTCA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuICBmb3IgKHZhciBpID0gNDsgaSA8IDg7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpblIgPj4+IChqICsgaSkpICYgMTtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxuZXhwb3J0cy5wYzEgPSBmdW5jdGlvbiBwYzEoaW5MLCBpblIsIG91dCwgb2ZmKSB7XG4gIHZhciBvdXRMID0gMDtcbiAgdmFyIG91dFIgPSAwO1xuXG4gIC8vIDcsIDE1LCAyMywgMzEsIDM5LCA0NywgNTUsIDYzXG4gIC8vIDYsIDE0LCAyMiwgMzAsIDM5LCA0NywgNTUsIDYzXG4gIC8vIDUsIDEzLCAyMSwgMjksIDM5LCA0NywgNTUsIDYzXG4gIC8vIDQsIDEyLCAyMCwgMjhcbiAgZm9yICh2YXIgaSA9IDc7IGkgPj0gNTsgaS0tKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluUiA+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpbkwgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgb3V0TCA8PD0gMTtcbiAgICBvdXRMIHw9IChpblIgPj4gKGogKyBpKSkgJiAxO1xuICB9XG5cbiAgLy8gMSwgOSwgMTcsIDI1LCAzMywgNDEsIDQ5LCA1N1xuICAvLyAyLCAxMCwgMTgsIDI2LCAzNCwgNDIsIDUwLCA1OFxuICAvLyAzLCAxMSwgMTksIDI3LCAzNSwgNDMsIDUxLCA1OVxuICAvLyAzNiwgNDQsIDUyLCA2MFxuICBmb3IgKHZhciBpID0gMTsgaSA8PSAzOyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5SID4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluTCA+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG4gIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICBvdXRSIDw8PSAxO1xuICAgIG91dFIgfD0gKGluTCA+PiAoaiArIGkpKSAmIDE7XG4gIH1cblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxuZXhwb3J0cy5yMjhzaGwgPSBmdW5jdGlvbiByMjhzaGwobnVtLCBzaGlmdCkge1xuICByZXR1cm4gKChudW0gPDwgc2hpZnQpICYgMHhmZmZmZmZmKSB8IChudW0gPj4+ICgyOCAtIHNoaWZ0KSk7XG59O1xuXG52YXIgcGMydGFibGUgPSBbXG4gIC8vIGluTCA9PiBvdXRMXG4gIDE0LCAxMSwgMTcsIDQsIDI3LCAyMywgMjUsIDAsXG4gIDEzLCAyMiwgNywgMTgsIDUsIDksIDE2LCAyNCxcbiAgMiwgMjAsIDEyLCAyMSwgMSwgOCwgMTUsIDI2LFxuXG4gIC8vIGluUiA9PiBvdXRSXG4gIDE1LCA0LCAyNSwgMTksIDksIDEsIDI2LCAxNixcbiAgNSwgMTEsIDIzLCA4LCAxMiwgNywgMTcsIDAsXG4gIDIyLCAzLCAxMCwgMTQsIDYsIDIwLCAyNywgMjRcbl07XG5cbmV4cG9ydHMucGMyID0gZnVuY3Rpb24gcGMyKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICB2YXIgbGVuID0gcGMydGFibGUubGVuZ3RoID4+PiAxO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgb3V0TCA8PD0gMTtcbiAgICBvdXRMIHw9IChpbkwgPj4+IHBjMnRhYmxlW2ldKSAmIDB4MTtcbiAgfVxuICBmb3IgKHZhciBpID0gbGVuOyBpIDwgcGMydGFibGUubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRSIDw8PSAxO1xuICAgIG91dFIgfD0gKGluUiA+Pj4gcGMydGFibGVbaV0pICYgMHgxO1xuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMuZXhwYW5kID0gZnVuY3Rpb24gZXhwYW5kKHIsIG91dCwgb2ZmKSB7XG4gIHZhciBvdXRMID0gMDtcbiAgdmFyIG91dFIgPSAwO1xuXG4gIG91dEwgPSAoKHIgJiAxKSA8PCA1KSB8IChyID4+PiAyNyk7XG4gIGZvciAodmFyIGkgPSAyMzsgaSA+PSAxNTsgaSAtPSA0KSB7XG4gICAgb3V0TCA8PD0gNjtcbiAgICBvdXRMIHw9IChyID4+PiBpKSAmIDB4M2Y7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDExOyBpID49IDM7IGkgLT0gNCkge1xuICAgIG91dFIgfD0gKHIgPj4+IGkpICYgMHgzZjtcbiAgICBvdXRSIDw8PSA2O1xuICB9XG4gIG91dFIgfD0gKChyICYgMHgxZikgPDwgMSkgfCAociA+Pj4gMzEpO1xuXG4gIG91dFtvZmYgKyAwXSA9IG91dEwgPj4+IDA7XG4gIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7XG59O1xuXG52YXIgc1RhYmxlID0gW1xuICAxNCwgMCwgNCwgMTUsIDEzLCA3LCAxLCA0LCAyLCAxNCwgMTUsIDIsIDExLCAxMywgOCwgMSxcbiAgMywgMTAsIDEwLCA2LCA2LCAxMiwgMTIsIDExLCA1LCA5LCA5LCA1LCAwLCAzLCA3LCA4LFxuICA0LCAxNSwgMSwgMTIsIDE0LCA4LCA4LCAyLCAxMywgNCwgNiwgOSwgMiwgMSwgMTEsIDcsXG4gIDE1LCA1LCAxMiwgMTEsIDksIDMsIDcsIDE0LCAzLCAxMCwgMTAsIDAsIDUsIDYsIDAsIDEzLFxuXG4gIDE1LCAzLCAxLCAxMywgOCwgNCwgMTQsIDcsIDYsIDE1LCAxMSwgMiwgMywgOCwgNCwgMTQsXG4gIDksIDEyLCA3LCAwLCAyLCAxLCAxMywgMTAsIDEyLCA2LCAwLCA5LCA1LCAxMSwgMTAsIDUsXG4gIDAsIDEzLCAxNCwgOCwgNywgMTAsIDExLCAxLCAxMCwgMywgNCwgMTUsIDEzLCA0LCAxLCAyLFxuICA1LCAxMSwgOCwgNiwgMTIsIDcsIDYsIDEyLCA5LCAwLCAzLCA1LCAyLCAxNCwgMTUsIDksXG5cbiAgMTAsIDEzLCAwLCA3LCA5LCAwLCAxNCwgOSwgNiwgMywgMywgNCwgMTUsIDYsIDUsIDEwLFxuICAxLCAyLCAxMywgOCwgMTIsIDUsIDcsIDE0LCAxMSwgMTIsIDQsIDExLCAyLCAxNSwgOCwgMSxcbiAgMTMsIDEsIDYsIDEwLCA0LCAxMywgOSwgMCwgOCwgNiwgMTUsIDksIDMsIDgsIDAsIDcsXG4gIDExLCA0LCAxLCAxNSwgMiwgMTQsIDEyLCAzLCA1LCAxMSwgMTAsIDUsIDE0LCAyLCA3LCAxMixcblxuICA3LCAxMywgMTMsIDgsIDE0LCAxMSwgMywgNSwgMCwgNiwgNiwgMTUsIDksIDAsIDEwLCAzLFxuICAxLCA0LCAyLCA3LCA4LCAyLCA1LCAxMiwgMTEsIDEsIDEyLCAxMCwgNCwgMTQsIDE1LCA5LFxuICAxMCwgMywgNiwgMTUsIDksIDAsIDAsIDYsIDEyLCAxMCwgMTEsIDEsIDcsIDEzLCAxMywgOCxcbiAgMTUsIDksIDEsIDQsIDMsIDUsIDE0LCAxMSwgNSwgMTIsIDIsIDcsIDgsIDIsIDQsIDE0LFxuXG4gIDIsIDE0LCAxMiwgMTEsIDQsIDIsIDEsIDEyLCA3LCA0LCAxMCwgNywgMTEsIDEzLCA2LCAxLFxuICA4LCA1LCA1LCAwLCAzLCAxNSwgMTUsIDEwLCAxMywgMywgMCwgOSwgMTQsIDgsIDksIDYsXG4gIDQsIDExLCAyLCA4LCAxLCAxMiwgMTEsIDcsIDEwLCAxLCAxMywgMTQsIDcsIDIsIDgsIDEzLFxuICAxNSwgNiwgOSwgMTUsIDEyLCAwLCA1LCA5LCA2LCAxMCwgMywgNCwgMCwgNSwgMTQsIDMsXG5cbiAgMTIsIDEwLCAxLCAxNSwgMTAsIDQsIDE1LCAyLCA5LCA3LCAyLCAxMiwgNiwgOSwgOCwgNSxcbiAgMCwgNiwgMTMsIDEsIDMsIDEzLCA0LCAxNCwgMTQsIDAsIDcsIDExLCA1LCAzLCAxMSwgOCxcbiAgOSwgNCwgMTQsIDMsIDE1LCAyLCA1LCAxMiwgMiwgOSwgOCwgNSwgMTIsIDE1LCAzLCAxMCxcbiAgNywgMTEsIDAsIDE0LCA0LCAxLCAxMCwgNywgMSwgNiwgMTMsIDAsIDExLCA4LCA2LCAxMyxcblxuICA0LCAxMywgMTEsIDAsIDIsIDExLCAxNCwgNywgMTUsIDQsIDAsIDksIDgsIDEsIDEzLCAxMCxcbiAgMywgMTQsIDEyLCAzLCA5LCA1LCA3LCAxMiwgNSwgMiwgMTAsIDE1LCA2LCA4LCAxLCA2LFxuICAxLCA2LCA0LCAxMSwgMTEsIDEzLCAxMywgOCwgMTIsIDEsIDMsIDQsIDcsIDEwLCAxNCwgNyxcbiAgMTAsIDksIDE1LCA1LCA2LCAwLCA4LCAxNSwgMCwgMTQsIDUsIDIsIDksIDMsIDIsIDEyLFxuXG4gIDEzLCAxLCAyLCAxNSwgOCwgMTMsIDQsIDgsIDYsIDEwLCAxNSwgMywgMTEsIDcsIDEsIDQsXG4gIDEwLCAxMiwgOSwgNSwgMywgNiwgMTQsIDExLCA1LCAwLCAwLCAxNCwgMTIsIDksIDcsIDIsXG4gIDcsIDIsIDExLCAxLCA0LCAxNCwgMSwgNywgOSwgNCwgMTIsIDEwLCAxNCwgOCwgMiwgMTMsXG4gIDAsIDE1LCA2LCAxMiwgMTAsIDksIDEzLCAwLCAxNSwgMywgMywgNSwgNSwgNiwgOCwgMTFcbl07XG5cbmV4cG9ydHMuc3Vic3RpdHV0ZSA9IGZ1bmN0aW9uIHN1YnN0aXR1dGUoaW5MLCBpblIpIHtcbiAgdmFyIG91dCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIGIgPSAoaW5MID4+PiAoMTggLSBpICogNikpICYgMHgzZjtcbiAgICB2YXIgc2IgPSBzVGFibGVbaSAqIDB4NDAgKyBiXTtcblxuICAgIG91dCA8PD0gNDtcbiAgICBvdXQgfD0gc2I7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICB2YXIgYiA9IChpblIgPj4+ICgxOCAtIGkgKiA2KSkgJiAweDNmO1xuICAgIHZhciBzYiA9IHNUYWJsZVs0ICogMHg0MCArIGkgKiAweDQwICsgYl07XG5cbiAgICBvdXQgPDw9IDQ7XG4gICAgb3V0IHw9IHNiO1xuICB9XG4gIHJldHVybiBvdXQgPj4+IDA7XG59O1xuXG52YXIgcGVybXV0ZVRhYmxlID0gW1xuICAxNiwgMjUsIDEyLCAxMSwgMywgMjAsIDQsIDE1LCAzMSwgMTcsIDksIDYsIDI3LCAxNCwgMSwgMjIsXG4gIDMwLCAyNCwgOCwgMTgsIDAsIDUsIDI5LCAyMywgMTMsIDE5LCAyLCAyNiwgMTAsIDIxLCAyOCwgN1xuXTtcblxuZXhwb3J0cy5wZXJtdXRlID0gZnVuY3Rpb24gcGVybXV0ZShudW0pIHtcbiAgdmFyIG91dCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGVybXV0ZVRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0IDw8PSAxO1xuICAgIG91dCB8PSAobnVtID4+PiBwZXJtdXRlVGFibGVbaV0pICYgMHgxO1xuICB9XG4gIHJldHVybiBvdXQgPj4+IDA7XG59O1xuXG5leHBvcnRzLnBhZFNwbGl0ID0gZnVuY3Rpb24gcGFkU3BsaXQobnVtLCBzaXplLCBncm91cCkge1xuICB2YXIgc3RyID0gbnVtLnRvU3RyaW5nKDIpO1xuICB3aGlsZSAoc3RyLmxlbmd0aCA8IHNpemUpXG4gICAgc3RyID0gJzAnICsgc3RyO1xuXG4gIHZhciBvdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyBpICs9IGdyb3VwKVxuICAgIG91dC5wdXNoKHN0ci5zbGljZShpLCBpICsgZ3JvdXApKTtcbiAgcmV0dXJuIG91dC5qb2luKCcgJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIENpcGhlciA9IHJlcXVpcmUoJy4vY2lwaGVyJyk7XG5cbmZ1bmN0aW9uIERFU1N0YXRlKCkge1xuICB0aGlzLnRtcCA9IG5ldyBBcnJheSgyKTtcbiAgdGhpcy5rZXlzID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gREVTKG9wdGlvbnMpIHtcbiAgQ2lwaGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdmFyIHN0YXRlID0gbmV3IERFU1N0YXRlKCk7XG4gIHRoaXMuX2Rlc1N0YXRlID0gc3RhdGU7XG5cbiAgdGhpcy5kZXJpdmVLZXlzKHN0YXRlLCBvcHRpb25zLmtleSk7XG59XG5pbmhlcml0cyhERVMsIENpcGhlcik7XG5tb2R1bGUuZXhwb3J0cyA9IERFUztcblxuREVTLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgREVTKG9wdGlvbnMpO1xufTtcblxudmFyIHNoaWZ0VGFibGUgPSBbXG4gIDEsIDEsIDIsIDIsIDIsIDIsIDIsIDIsXG4gIDEsIDIsIDIsIDIsIDIsIDIsIDIsIDFcbl07XG5cbkRFUy5wcm90b3R5cGUuZGVyaXZlS2V5cyA9IGZ1bmN0aW9uIGRlcml2ZUtleXMoc3RhdGUsIGtleSkge1xuICBzdGF0ZS5rZXlzID0gbmV3IEFycmF5KDE2ICogMik7XG5cbiAgYXNzZXJ0LmVxdWFsKGtleS5sZW5ndGgsIHRoaXMuYmxvY2tTaXplLCAnSW52YWxpZCBrZXkgbGVuZ3RoJyk7XG5cbiAgdmFyIGtMID0gdXRpbHMucmVhZFVJbnQzMkJFKGtleSwgMCk7XG4gIHZhciBrUiA9IHV0aWxzLnJlYWRVSW50MzJCRShrZXksIDQpO1xuXG4gIHV0aWxzLnBjMShrTCwga1IsIHN0YXRlLnRtcCwgMCk7XG4gIGtMID0gc3RhdGUudG1wWzBdO1xuICBrUiA9IHN0YXRlLnRtcFsxXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5rZXlzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIHNoaWZ0ID0gc2hpZnRUYWJsZVtpID4+PiAxXTtcbiAgICBrTCA9IHV0aWxzLnIyOHNobChrTCwgc2hpZnQpO1xuICAgIGtSID0gdXRpbHMucjI4c2hsKGtSLCBzaGlmdCk7XG4gICAgdXRpbHMucGMyKGtMLCBrUiwgc3RhdGUua2V5cywgaSk7XG4gIH1cbn07XG5cbkRFUy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUoaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fZGVzU3RhdGU7XG5cbiAgdmFyIGwgPSB1dGlscy5yZWFkVUludDMyQkUoaW5wLCBpbk9mZik7XG4gIHZhciByID0gdXRpbHMucmVhZFVJbnQzMkJFKGlucCwgaW5PZmYgKyA0KTtcblxuICAvLyBJbml0aWFsIFBlcm11dGF0aW9uXG4gIHV0aWxzLmlwKGwsIHIsIHN0YXRlLnRtcCwgMCk7XG4gIGwgPSBzdGF0ZS50bXBbMF07XG4gIHIgPSBzdGF0ZS50bXBbMV07XG5cbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKVxuICAgIHRoaXMuX2VuY3J5cHQoc3RhdGUsIGwsIHIsIHN0YXRlLnRtcCwgMCk7XG4gIGVsc2VcbiAgICB0aGlzLl9kZWNyeXB0KHN0YXRlLCBsLCByLCBzdGF0ZS50bXAsIDApO1xuXG4gIGwgPSBzdGF0ZS50bXBbMF07XG4gIHIgPSBzdGF0ZS50bXBbMV07XG5cbiAgdXRpbHMud3JpdGVVSW50MzJCRShvdXQsIGwsIG91dE9mZik7XG4gIHV0aWxzLndyaXRlVUludDMyQkUob3V0LCByLCBvdXRPZmYgKyA0KTtcbn07XG5cbkRFUy5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIF9wYWQoYnVmZmVyLCBvZmYpIHtcbiAgdmFyIHZhbHVlID0gYnVmZmVyLmxlbmd0aCAtIG9mZjtcbiAgZm9yICh2YXIgaSA9IG9mZjsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKylcbiAgICBidWZmZXJbaV0gPSB2YWx1ZTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkRFUy5wcm90b3R5cGUuX3VucGFkID0gZnVuY3Rpb24gX3VucGFkKGJ1ZmZlcikge1xuICB2YXIgcGFkID0gYnVmZmVyW2J1ZmZlci5sZW5ndGggLSAxXTtcbiAgZm9yICh2YXIgaSA9IGJ1ZmZlci5sZW5ndGggLSBwYWQ7IGkgPCBidWZmZXIubGVuZ3RoOyBpKyspXG4gICAgYXNzZXJ0LmVxdWFsKGJ1ZmZlcltpXSwgcGFkKTtcblxuICByZXR1cm4gYnVmZmVyLnNsaWNlKDAsIGJ1ZmZlci5sZW5ndGggLSBwYWQpO1xufTtcblxuREVTLnByb3RvdHlwZS5fZW5jcnlwdCA9IGZ1bmN0aW9uIF9lbmNyeXB0KHN0YXRlLCBsU3RhcnQsIHJTdGFydCwgb3V0LCBvZmYpIHtcbiAgdmFyIGwgPSBsU3RhcnQ7XG4gIHZhciByID0gclN0YXJ0O1xuXG4gIC8vIEFwcGx5IGYoKSB4MTYgdGltZXNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5rZXlzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGtleUwgPSBzdGF0ZS5rZXlzW2ldO1xuICAgIHZhciBrZXlSID0gc3RhdGUua2V5c1tpICsgMV07XG5cbiAgICAvLyBmKHIsIGspXG4gICAgdXRpbHMuZXhwYW5kKHIsIHN0YXRlLnRtcCwgMCk7XG5cbiAgICBrZXlMIF49IHN0YXRlLnRtcFswXTtcbiAgICBrZXlSIF49IHN0YXRlLnRtcFsxXTtcbiAgICB2YXIgcyA9IHV0aWxzLnN1YnN0aXR1dGUoa2V5TCwga2V5Uik7XG4gICAgdmFyIGYgPSB1dGlscy5wZXJtdXRlKHMpO1xuXG4gICAgdmFyIHQgPSByO1xuICAgIHIgPSAobCBeIGYpID4+PiAwO1xuICAgIGwgPSB0O1xuICB9XG5cbiAgLy8gUmV2ZXJzZSBJbml0aWFsIFBlcm11dGF0aW9uXG4gIHV0aWxzLnJpcChyLCBsLCBvdXQsIG9mZik7XG59O1xuXG5ERVMucHJvdG90eXBlLl9kZWNyeXB0ID0gZnVuY3Rpb24gX2RlY3J5cHQoc3RhdGUsIGxTdGFydCwgclN0YXJ0LCBvdXQsIG9mZikge1xuICB2YXIgbCA9IHJTdGFydDtcbiAgdmFyIHIgPSBsU3RhcnQ7XG5cbiAgLy8gQXBwbHkgZigpIHgxNiB0aW1lc1xuICBmb3IgKHZhciBpID0gc3RhdGUua2V5cy5sZW5ndGggLSAyOyBpID49IDA7IGkgLT0gMikge1xuICAgIHZhciBrZXlMID0gc3RhdGUua2V5c1tpXTtcbiAgICB2YXIga2V5UiA9IHN0YXRlLmtleXNbaSArIDFdO1xuXG4gICAgLy8gZihyLCBrKVxuICAgIHV0aWxzLmV4cGFuZChsLCBzdGF0ZS50bXAsIDApO1xuXG4gICAga2V5TCBePSBzdGF0ZS50bXBbMF07XG4gICAga2V5UiBePSBzdGF0ZS50bXBbMV07XG4gICAgdmFyIHMgPSB1dGlscy5zdWJzdGl0dXRlKGtleUwsIGtleVIpO1xuICAgIHZhciBmID0gdXRpbHMucGVybXV0ZShzKTtcblxuICAgIHZhciB0ID0gbDtcbiAgICBsID0gKHIgXiBmKSA+Pj4gMDtcbiAgICByID0gdDtcbiAgfVxuXG4gIC8vIFJldmVyc2UgSW5pdGlhbCBQZXJtdXRhdGlvblxuICB1dGlscy5yaXAobCwgciwgb3V0LCBvZmYpO1xufTtcbiIsInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIGluY3IzMiA9IHJlcXVpcmUoJy4uL2luY3IzMicpXG5cbmZ1bmN0aW9uIGdldEJsb2NrIChzZWxmKSB7XG4gIHZhciBvdXQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrUmF3KHNlbGYuX3ByZXYpXG4gIGluY3IzMihzZWxmLl9wcmV2KVxuICByZXR1cm4gb3V0XG59XG5cbnZhciBibG9ja1NpemUgPSAxNlxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHZhciBjaHVua051bSA9IE1hdGguY2VpbChjaHVuay5sZW5ndGggLyBibG9ja1NpemUpXG4gIHZhciBzdGFydCA9IHNlbGYuX2NhY2hlLmxlbmd0aFxuICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW1xuICAgIHNlbGYuX2NhY2hlLFxuICAgIEJ1ZmZlci5hbGxvY1Vuc2FmZShjaHVua051bSAqIGJsb2NrU2l6ZSlcbiAgXSlcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaHVua051bTsgaSsrKSB7XG4gICAgdmFyIG91dCA9IGdldEJsb2NrKHNlbGYpXG4gICAgdmFyIG9mZnNldCA9IHN0YXJ0ICsgaSAqIGJsb2NrU2l6ZVxuICAgIHNlbGYuX2NhY2hlLndyaXRlVUludDMyQkUob3V0WzBdLCBvZmZzZXQgKyAwKVxuICAgIHNlbGYuX2NhY2hlLndyaXRlVUludDMyQkUob3V0WzFdLCBvZmZzZXQgKyA0KVxuICAgIHNlbGYuX2NhY2hlLndyaXRlVUludDMyQkUob3V0WzJdLCBvZmZzZXQgKyA4KVxuICAgIHNlbGYuX2NhY2hlLndyaXRlVUludDMyQkUob3V0WzNdLCBvZmZzZXQgKyAxMilcbiAgfVxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuIiwiZnVuY3Rpb24gaW5jcjMyIChpdikge1xuICB2YXIgbGVuID0gaXYubGVuZ3RoXG4gIHZhciBpdGVtXG4gIHdoaWxlIChsZW4tLSkge1xuICAgIGl0ZW0gPSBpdi5yZWFkVUludDgobGVuKVxuICAgIGlmIChpdGVtID09PSAyNTUpIHtcbiAgICAgIGl2LndyaXRlVUludDgoMCwgbGVuKVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtKytcbiAgICAgIGl2LndyaXRlVUludDgoaXRlbSwgbGVuKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gaW5jcjMyXG4iLCJ2YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEdIQVNIID0gcmVxdWlyZSgnLi9naGFzaCcpXG52YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG52YXIgaW5jcjMyID0gcmVxdWlyZSgnLi9pbmNyMzInKVxuXG5mdW5jdGlvbiB4b3JUZXN0IChhLCBiKSB7XG4gIHZhciBvdXQgPSAwXG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIG91dCsrXG5cbiAgdmFyIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIG91dCArPSAoYVtpXSBeIGJbaV0pXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIGNhbGNJdiAoc2VsZiwgaXYsIGNrKSB7XG4gIGlmIChpdi5sZW5ndGggPT09IDEyKSB7XG4gICAgc2VsZi5fZmluSUQgPSBCdWZmZXIuY29uY2F0KFtpdiwgQnVmZmVyLmZyb20oWzAsIDAsIDAsIDFdKV0pXG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW2l2LCBCdWZmZXIuZnJvbShbMCwgMCwgMCwgMl0pXSlcbiAgfVxuICB2YXIgZ2hhc2ggPSBuZXcgR0hBU0goY2spXG4gIHZhciBsZW4gPSBpdi5sZW5ndGhcbiAgdmFyIHRvUGFkID0gbGVuICUgMTZcbiAgZ2hhc2gudXBkYXRlKGl2KVxuICBpZiAodG9QYWQpIHtcbiAgICB0b1BhZCA9IDE2IC0gdG9QYWRcbiAgICBnaGFzaC51cGRhdGUoQnVmZmVyLmFsbG9jKHRvUGFkLCAwKSlcbiAgfVxuICBnaGFzaC51cGRhdGUoQnVmZmVyLmFsbG9jKDgsIDApKVxuICB2YXIgaXZCaXRzID0gbGVuICogOFxuICB2YXIgdGFpbCA9IEJ1ZmZlci5hbGxvYyg4KVxuICB0YWlsLndyaXRlVUludEJFKGl2Qml0cywgMCwgOClcbiAgZ2hhc2gudXBkYXRlKHRhaWwpXG4gIHNlbGYuX2ZpbklEID0gZ2hhc2guc3RhdGVcbiAgdmFyIG91dCA9IEJ1ZmZlci5mcm9tKHNlbGYuX2ZpbklEKVxuICBpbmNyMzIob3V0KVxuICByZXR1cm4gb3V0XG59XG5mdW5jdGlvbiBTdHJlYW1DaXBoZXIgKG1vZGUsIGtleSwgaXYsIGRlY3J5cHQpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcblxuICB2YXIgaCA9IEJ1ZmZlci5hbGxvYyg0LCAwKVxuXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdmFyIGNrID0gdGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayhoKVxuICB0aGlzLl9naGFzaCA9IG5ldyBHSEFTSChjaylcbiAgaXYgPSBjYWxjSXYodGhpcywgaXYsIGNrKVxuXG4gIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdilcbiAgdGhpcy5fY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdGhpcy5fc2VjQ2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdGhpcy5fZGVjcnlwdCA9IGRlY3J5cHRcbiAgdGhpcy5fYWxlbiA9IDBcbiAgdGhpcy5fbGVuID0gMFxuICB0aGlzLl9tb2RlID0gbW9kZVxuXG4gIHRoaXMuX2F1dGhUYWcgPSBudWxsXG4gIHRoaXMuX2NhbGxlZCA9IGZhbHNlXG59XG5cbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgaWYgKCF0aGlzLl9jYWxsZWQgJiYgdGhpcy5fYWxlbikge1xuICAgIHZhciBydW1wID0gMTYgLSAodGhpcy5fYWxlbiAlIDE2KVxuICAgIGlmIChydW1wIDwgMTYpIHtcbiAgICAgIHJ1bXAgPSBCdWZmZXIuYWxsb2MocnVtcCwgMClcbiAgICAgIHRoaXMuX2doYXNoLnVwZGF0ZShydW1wKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuX2NhbGxlZCA9IHRydWVcbiAgdmFyIG91dCA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgaWYgKHRoaXMuX2RlY3J5cHQpIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUoY2h1bmspXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKG91dClcbiAgfVxuICB0aGlzLl9sZW4gKz0gY2h1bmsubGVuZ3RoXG4gIHJldHVybiBvdXRcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9kZWNyeXB0ICYmICF0aGlzLl9hdXRoVGFnKSB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YScpXG5cbiAgdmFyIHRhZyA9IHhvcih0aGlzLl9naGFzaC5maW5hbCh0aGlzLl9hbGVuICogOCwgdGhpcy5fbGVuICogOCksIHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2sodGhpcy5fZmluSUQpKVxuICBpZiAodGhpcy5fZGVjcnlwdCAmJiB4b3JUZXN0KHRhZywgdGhpcy5fYXV0aFRhZykpIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhJylcblxuICB0aGlzLl9hdXRoVGFnID0gdGFnXG4gIHRoaXMuX2NpcGhlci5zY3J1YigpXG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuZ2V0QXV0aFRhZyA9IGZ1bmN0aW9uIGdldEF1dGhUYWcgKCkge1xuICBpZiAodGhpcy5fZGVjcnlwdCB8fCAhQnVmZmVyLmlzQnVmZmVyKHRoaXMuX2F1dGhUYWcpKSB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcblxuICByZXR1cm4gdGhpcy5fYXV0aFRhZ1xufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiBzZXRBdXRoVGFnICh0YWcpIHtcbiAgaWYgKCF0aGlzLl9kZWNyeXB0KSB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcblxuICB0aGlzLl9hdXRoVGFnID0gdGFnXG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gc2V0QUFEIChidWYpIHtcbiAgaWYgKHRoaXMuX2NhbGxlZCkgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIHNldCBBQUQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuXG4gIHRoaXMuX2doYXNoLnVwZGF0ZShidWYpXG4gIHRoaXMuX2FsZW4gKz0gYnVmLmxlbmd0aFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUNpcGhlclxuIiwidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gU3RyZWFtQ2lwaGVyIChtb2RlLCBrZXksIGl2LCBkZWNyeXB0KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX2NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX3NlY0NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0XG4gIHRoaXMuX21vZGUgPSBtb2RlXG59XG5cbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaywgdGhpcy5fZGVjcnlwdClcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2NpcGhlci5zY3J1YigpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG4iLCJ2YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmaW5kUHJpbWU7XG5maW5kUHJpbWUuc2ltcGxlU2lldmUgPSBzaW1wbGVTaWV2ZTtcbmZpbmRQcmltZS5mZXJtYXRUZXN0ID0gZmVybWF0VGVzdDtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgVFdFTlRZRk9VUiA9IG5ldyBCTigyNCk7XG52YXIgTWlsbGVyUmFiaW4gPSByZXF1aXJlKCdtaWxsZXItcmFiaW4nKTtcbnZhciBtaWxsZXJSYWJpbiA9IG5ldyBNaWxsZXJSYWJpbigpO1xudmFyIE9ORSA9IG5ldyBCTigxKTtcbnZhciBUV08gPSBuZXcgQk4oMik7XG52YXIgRklWRSA9IG5ldyBCTig1KTtcbnZhciBTSVhURUVOID0gbmV3IEJOKDE2KTtcbnZhciBFSUdIVCA9IG5ldyBCTig4KTtcbnZhciBURU4gPSBuZXcgQk4oMTApO1xudmFyIFRIUkVFID0gbmV3IEJOKDMpO1xudmFyIFNFVkVOID0gbmV3IEJOKDcpO1xudmFyIEVMRVZFTiA9IG5ldyBCTigxMSk7XG52YXIgRk9VUiA9IG5ldyBCTig0KTtcbnZhciBUV0VMVkUgPSBuZXcgQk4oMTIpO1xudmFyIHByaW1lcyA9IG51bGw7XG5cbmZ1bmN0aW9uIF9nZXRQcmltZXMoKSB7XG4gIGlmIChwcmltZXMgIT09IG51bGwpXG4gICAgcmV0dXJuIHByaW1lcztcblxuICB2YXIgbGltaXQgPSAweDEwMDAwMDtcbiAgdmFyIHJlcyA9IFtdO1xuICByZXNbMF0gPSAyO1xuICBmb3IgKHZhciBpID0gMSwgayA9IDM7IGsgPCBsaW1pdDsgayArPSAyKSB7XG4gICAgdmFyIHNxcnQgPSBNYXRoLmNlaWwoTWF0aC5zcXJ0KGspKTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGkgJiYgcmVzW2pdIDw9IHNxcnQ7IGorKylcbiAgICAgIGlmIChrICUgcmVzW2pdID09PSAwKVxuICAgICAgICBicmVhaztcblxuICAgIGlmIChpICE9PSBqICYmIHJlc1tqXSA8PSBzcXJ0KVxuICAgICAgY29udGludWU7XG5cbiAgICByZXNbaSsrXSA9IGs7XG4gIH1cbiAgcHJpbWVzID0gcmVzO1xuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBzaW1wbGVTaWV2ZShwKSB7XG4gIHZhciBwcmltZXMgPSBfZ2V0UHJpbWVzKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmltZXMubGVuZ3RoOyBpKyspXG4gICAgaWYgKHAubW9kbihwcmltZXNbaV0pID09PSAwKSB7XG4gICAgICBpZiAocC5jbXBuKHByaW1lc1tpXSkgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBmZXJtYXRUZXN0KHApIHtcbiAgdmFyIHJlZCA9IEJOLm1vbnQocCk7XG4gIHJldHVybiBUV08udG9SZWQocmVkKS5yZWRQb3cocC5zdWJuKDEpKS5mcm9tUmVkKCkuY21wbigxKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZmluZFByaW1lKGJpdHMsIGdlbikge1xuICBpZiAoYml0cyA8IDE2KSB7XG4gICAgLy8gdGhpcyBpcyB3aGF0IG9wZW5zc2wgZG9lc1xuICAgIGlmIChnZW4gPT09IDIgfHwgZ2VuID09PSA1KSB7XG4gICAgICByZXR1cm4gbmV3IEJOKFsweDhjLCAweDdiXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgQk4oWzB4OGMsIDB4MjddKTtcbiAgICB9XG4gIH1cbiAgZ2VuID0gbmV3IEJOKGdlbik7XG5cbiAgdmFyIG51bSwgbjI7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBudW0gPSBuZXcgQk4ocmFuZG9tQnl0ZXMoTWF0aC5jZWlsKGJpdHMgLyA4KSkpO1xuICAgIHdoaWxlIChudW0uYml0TGVuZ3RoKCkgPiBiaXRzKSB7XG4gICAgICBudW0uaXNocm4oMSk7XG4gICAgfVxuICAgIGlmIChudW0uaXNFdmVuKCkpIHtcbiAgICAgIG51bS5pYWRkKE9ORSk7XG4gICAgfVxuICAgIGlmICghbnVtLnRlc3RuKDEpKSB7XG4gICAgICBudW0uaWFkZChUV08pO1xuICAgIH1cbiAgICBpZiAoIWdlbi5jbXAoVFdPKSkge1xuICAgICAgd2hpbGUgKG51bS5tb2QoVFdFTlRZRk9VUikuY21wKEVMRVZFTikpIHtcbiAgICAgICAgbnVtLmlhZGQoRk9VUik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghZ2VuLmNtcChGSVZFKSkge1xuICAgICAgd2hpbGUgKG51bS5tb2QoVEVOKS5jbXAoVEhSRUUpKSB7XG4gICAgICAgIG51bS5pYWRkKEZPVVIpO1xuICAgICAgfVxuICAgIH1cbiAgICBuMiA9IG51bS5zaHJuKDEpO1xuICAgIGlmIChzaW1wbGVTaWV2ZShuMikgJiYgc2ltcGxlU2lldmUobnVtKSAmJlxuICAgICAgZmVybWF0VGVzdChuMikgJiYgZmVybWF0VGVzdChudW0pICYmXG4gICAgICBtaWxsZXJSYWJpbi50ZXN0KG4yKSAmJiBtaWxsZXJSYWJpbi50ZXN0KG51bSkpIHtcbiAgICAgIHJldHVybiBudW07XG4gICAgfVxuICB9XG5cbn1cbiIsInZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgYnJvcmFuZCA9IHJlcXVpcmUoJ2Jyb3JhbmQnKTtcblxuZnVuY3Rpb24gTWlsbGVyUmFiaW4ocmFuZCkge1xuICB0aGlzLnJhbmQgPSByYW5kIHx8IG5ldyBicm9yYW5kLlJhbmQoKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gTWlsbGVyUmFiaW47XG5cbk1pbGxlclJhYmluLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShyYW5kKSB7XG4gIHJldHVybiBuZXcgTWlsbGVyUmFiaW4ocmFuZCk7XG59O1xuXG5NaWxsZXJSYWJpbi5wcm90b3R5cGUuX3JhbmRiZWxvdyA9IGZ1bmN0aW9uIF9yYW5kYmVsb3cobikge1xuICB2YXIgbGVuID0gbi5iaXRMZW5ndGgoKTtcbiAgdmFyIG1pbl9ieXRlcyA9IE1hdGguY2VpbChsZW4gLyA4KTtcblxuICAvLyBHZW5lcmFnZSByYW5kb20gYnl0ZXMgdW50aWwgYSBudW1iZXIgbGVzcyB0aGFuIG4gaXMgZm91bmQuXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0IDAuLm4tMSBoYXZlIGFuIGVxdWFsIHByb2JhYmlsaXR5IG9mIGJlaW5nIHNlbGVjdGVkLlxuICBkb1xuICAgIHZhciBhID0gbmV3IGJuKHRoaXMucmFuZC5nZW5lcmF0ZShtaW5fYnl0ZXMpKTtcbiAgd2hpbGUgKGEuY21wKG4pID49IDApO1xuXG4gIHJldHVybiBhO1xufTtcblxuTWlsbGVyUmFiaW4ucHJvdG90eXBlLl9yYW5kcmFuZ2UgPSBmdW5jdGlvbiBfcmFuZHJhbmdlKHN0YXJ0LCBzdG9wKSB7XG4gIC8vIEdlbmVyYXRlIGEgcmFuZG9tIG51bWJlciBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gc3RhcnQgYW5kIGxlc3MgdGhhbiBzdG9wLlxuICB2YXIgc2l6ZSA9IHN0b3Auc3ViKHN0YXJ0KTtcbiAgcmV0dXJuIHN0YXJ0LmFkZCh0aGlzLl9yYW5kYmVsb3coc2l6ZSkpO1xufTtcblxuTWlsbGVyUmFiaW4ucHJvdG90eXBlLnRlc3QgPSBmdW5jdGlvbiB0ZXN0KG4sIGssIGNiKSB7XG4gIHZhciBsZW4gPSBuLmJpdExlbmd0aCgpO1xuICB2YXIgcmVkID0gYm4ubW9udChuKTtcbiAgdmFyIHJvbmUgPSBuZXcgYm4oMSkudG9SZWQocmVkKTtcblxuICBpZiAoIWspXG4gICAgayA9IE1hdGgubWF4KDEsIChsZW4gLyA0OCkgfCAwKTtcblxuICAvLyBGaW5kIGQgYW5kIHMsIChuIC0gMSkgPSAoMiBeIHMpICogZDtcbiAgdmFyIG4xID0gbi5zdWJuKDEpO1xuICBmb3IgKHZhciBzID0gMDsgIW4xLnRlc3RuKHMpOyBzKyspIHt9XG4gIHZhciBkID0gbi5zaHJuKHMpO1xuXG4gIHZhciBybjEgPSBuMS50b1JlZChyZWQpO1xuXG4gIHZhciBwcmltZSA9IHRydWU7XG4gIGZvciAoOyBrID4gMDsgay0tKSB7XG4gICAgdmFyIGEgPSB0aGlzLl9yYW5kcmFuZ2UobmV3IGJuKDIpLCBuMSk7XG4gICAgaWYgKGNiKVxuICAgICAgY2IoYSk7XG5cbiAgICB2YXIgeCA9IGEudG9SZWQocmVkKS5yZWRQb3coZCk7XG4gICAgaWYgKHguY21wKHJvbmUpID09PSAwIHx8IHguY21wKHJuMSkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgczsgaSsrKSB7XG4gICAgICB4ID0geC5yZWRTcXIoKTtcblxuICAgICAgaWYgKHguY21wKHJvbmUpID09PSAwKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoeC5jbXAocm4xKSA9PT0gMClcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IHMpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gcHJpbWU7XG59O1xuXG5NaWxsZXJSYWJpbi5wcm90b3R5cGUuZ2V0RGl2aXNvciA9IGZ1bmN0aW9uIGdldERpdmlzb3Iobiwgaykge1xuICB2YXIgbGVuID0gbi5iaXRMZW5ndGgoKTtcbiAgdmFyIHJlZCA9IGJuLm1vbnQobik7XG4gIHZhciByb25lID0gbmV3IGJuKDEpLnRvUmVkKHJlZCk7XG5cbiAgaWYgKCFrKVxuICAgIGsgPSBNYXRoLm1heCgxLCAobGVuIC8gNDgpIHwgMCk7XG5cbiAgLy8gRmluZCBkIGFuZCBzLCAobiAtIDEpID0gKDIgXiBzKSAqIGQ7XG4gIHZhciBuMSA9IG4uc3VibigxKTtcbiAgZm9yICh2YXIgcyA9IDA7ICFuMS50ZXN0bihzKTsgcysrKSB7fVxuICB2YXIgZCA9IG4uc2hybihzKTtcblxuICB2YXIgcm4xID0gbjEudG9SZWQocmVkKTtcblxuICBmb3IgKDsgayA+IDA7IGstLSkge1xuICAgIHZhciBhID0gdGhpcy5fcmFuZHJhbmdlKG5ldyBibigyKSwgbjEpO1xuXG4gICAgdmFyIGcgPSBuLmdjZChhKTtcbiAgICBpZiAoZy5jbXBuKDEpICE9PSAwKVxuICAgICAgcmV0dXJuIGc7XG5cbiAgICB2YXIgeCA9IGEudG9SZWQocmVkKS5yZWRQb3coZCk7XG4gICAgaWYgKHguY21wKHJvbmUpID09PSAwIHx8IHguY21wKHJuMSkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgczsgaSsrKSB7XG4gICAgICB4ID0geC5yZWRTcXIoKTtcblxuICAgICAgaWYgKHguY21wKHJvbmUpID09PSAwKVxuICAgICAgICByZXR1cm4geC5mcm9tUmVkKCkuc3VibigxKS5nY2Qobik7XG4gICAgICBpZiAoeC5jbXAocm4xKSA9PT0gMClcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IHMpIHtcbiAgICAgIHggPSB4LnJlZFNxcigpO1xuICAgICAgcmV0dXJuIHguZnJvbVJlZCgpLnN1Ym4oMSkuZ2NkKG4pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IGV4cG9ydHM7XG5cbmZ1bmN0aW9uIHRvQXJyYXkobXNnLCBlbmMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkobXNnKSlcbiAgICByZXR1cm4gbXNnLnNsaWNlKCk7XG4gIGlmICghbXNnKVxuICAgIHJldHVybiBbXTtcbiAgdmFyIHJlcyA9IFtdO1xuICBpZiAodHlwZW9mIG1zZyAhPT0gJ3N0cmluZycpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICAgIHJlc1tpXSA9IG1zZ1tpXSB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICBpZiAoZW5jID09PSAnaGV4Jykge1xuICAgIG1zZyA9IG1zZy5yZXBsYWNlKC9bXmEtejAtOV0rL2lnLCAnJyk7XG4gICAgaWYgKG1zZy5sZW5ndGggJSAyICE9PSAwKVxuICAgICAgbXNnID0gJzAnICsgbXNnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSAyKVxuICAgICAgcmVzLnB1c2gocGFyc2VJbnQobXNnW2ldICsgbXNnW2kgKyAxXSwgMTYpKTtcbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBtc2cuY2hhckNvZGVBdChpKTtcbiAgICAgIHZhciBoaSA9IGMgPj4gODtcbiAgICAgIHZhciBsbyA9IGMgJiAweGZmO1xuICAgICAgaWYgKGhpKVxuICAgICAgICByZXMucHVzaChoaSwgbG8pO1xuICAgICAgZWxzZVxuICAgICAgICByZXMucHVzaChsbyk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG51dGlscy50b0FycmF5ID0gdG9BcnJheTtcblxuZnVuY3Rpb24gemVybzIod29yZCkge1xuICBpZiAod29yZC5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuICcwJyArIHdvcmQ7XG4gIGVsc2VcbiAgICByZXR1cm4gd29yZDtcbn1cbnV0aWxzLnplcm8yID0gemVybzI7XG5cbmZ1bmN0aW9uIHRvSGV4KG1zZykge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKVxuICAgIHJlcyArPSB6ZXJvMihtc2dbaV0udG9TdHJpbmcoMTYpKTtcbiAgcmV0dXJuIHJlcztcbn1cbnV0aWxzLnRvSGV4ID0gdG9IZXg7XG5cbnV0aWxzLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShhcnIsIGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdG9IZXgoYXJyKTtcbiAgZWxzZVxuICAgIHJldHVybiBhcnI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmUgPSBleHBvcnRzO1xuXG5jdXJ2ZS5iYXNlID0gcmVxdWlyZSgnLi9iYXNlJyk7XG5jdXJ2ZS5zaG9ydCA9IHJlcXVpcmUoJy4vc2hvcnQnKTtcbmN1cnZlLm1vbnQgPSByZXF1aXJlKCcuL21vbnQnKTtcbmN1cnZlLmVkd2FyZHMgPSByZXF1aXJlKCcuL2Vkd2FyZHMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciByb3RyMzIgPSB1dGlscy5yb3RyMzI7XG5cbmZ1bmN0aW9uIGZ0XzEocywgeCwgeSwgeikge1xuICBpZiAocyA9PT0gMClcbiAgICByZXR1cm4gY2gzMih4LCB5LCB6KTtcbiAgaWYgKHMgPT09IDEgfHwgcyA9PT0gMylcbiAgICByZXR1cm4gcDMyKHgsIHksIHopO1xuICBpZiAocyA9PT0gMilcbiAgICByZXR1cm4gbWFqMzIoeCwgeSwgeik7XG59XG5leHBvcnRzLmZ0XzEgPSBmdF8xO1xuXG5mdW5jdGlvbiBjaDMyKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgXiAoKH54KSAmIHopO1xufVxuZXhwb3J0cy5jaDMyID0gY2gzMjtcblxuZnVuY3Rpb24gbWFqMzIoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSBeICh4ICYgeikgXiAoeSAmIHopO1xufVxuZXhwb3J0cy5tYWozMiA9IG1hajMyO1xuXG5mdW5jdGlvbiBwMzIoeCwgeSwgeikge1xuICByZXR1cm4geCBeIHkgXiB6O1xufVxuZXhwb3J0cy5wMzIgPSBwMzI7XG5cbmZ1bmN0aW9uIHMwXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgMikgXiByb3RyMzIoeCwgMTMpIF4gcm90cjMyKHgsIDIyKTtcbn1cbmV4cG9ydHMuczBfMjU2ID0gczBfMjU2O1xuXG5mdW5jdGlvbiBzMV8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDYpIF4gcm90cjMyKHgsIDExKSBeIHJvdHIzMih4LCAyNSk7XG59XG5leHBvcnRzLnMxXzI1NiA9IHMxXzI1NjtcblxuZnVuY3Rpb24gZzBfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCA3KSBeIHJvdHIzMih4LCAxOCkgXiAoeCA+Pj4gMyk7XG59XG5leHBvcnRzLmcwXzI1NiA9IGcwXzI1NjtcblxuZnVuY3Rpb24gZzFfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCAxNykgXiByb3RyMzIoeCwgMTkpIF4gKHggPj4+IDEwKTtcbn1cbmV4cG9ydHMuZzFfMjU2ID0gZzFfMjU2O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xudmFyIHNoYUNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG52YXIgc3VtMzIgPSB1dGlscy5zdW0zMjtcbnZhciBzdW0zMl80ID0gdXRpbHMuc3VtMzJfNDtcbnZhciBzdW0zMl81ID0gdXRpbHMuc3VtMzJfNTtcbnZhciBjaDMyID0gc2hhQ29tbW9uLmNoMzI7XG52YXIgbWFqMzIgPSBzaGFDb21tb24ubWFqMzI7XG52YXIgczBfMjU2ID0gc2hhQ29tbW9uLnMwXzI1NjtcbnZhciBzMV8yNTYgPSBzaGFDb21tb24uczFfMjU2O1xudmFyIGcwXzI1NiA9IHNoYUNvbW1vbi5nMF8yNTY7XG52YXIgZzFfMjU2ID0gc2hhQ29tbW9uLmcxXzI1NjtcblxudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbnZhciBzaGEyNTZfSyA9IFtcbiAgMHg0MjhhMmY5OCwgMHg3MTM3NDQ5MSwgMHhiNWMwZmJjZiwgMHhlOWI1ZGJhNSxcbiAgMHgzOTU2YzI1YiwgMHg1OWYxMTFmMSwgMHg5MjNmODJhNCwgMHhhYjFjNWVkNSxcbiAgMHhkODA3YWE5OCwgMHgxMjgzNWIwMSwgMHgyNDMxODViZSwgMHg1NTBjN2RjMyxcbiAgMHg3MmJlNWQ3NCwgMHg4MGRlYjFmZSwgMHg5YmRjMDZhNywgMHhjMTliZjE3NCxcbiAgMHhlNDliNjljMSwgMHhlZmJlNDc4NiwgMHgwZmMxOWRjNiwgMHgyNDBjYTFjYyxcbiAgMHgyZGU5MmM2ZiwgMHg0YTc0ODRhYSwgMHg1Y2IwYTlkYywgMHg3NmY5ODhkYSxcbiAgMHg5ODNlNTE1MiwgMHhhODMxYzY2ZCwgMHhiMDAzMjdjOCwgMHhiZjU5N2ZjNyxcbiAgMHhjNmUwMGJmMywgMHhkNWE3OTE0NywgMHgwNmNhNjM1MSwgMHgxNDI5Mjk2NyxcbiAgMHgyN2I3MGE4NSwgMHgyZTFiMjEzOCwgMHg0ZDJjNmRmYywgMHg1MzM4MGQxMyxcbiAgMHg2NTBhNzM1NCwgMHg3NjZhMGFiYiwgMHg4MWMyYzkyZSwgMHg5MjcyMmM4NSxcbiAgMHhhMmJmZThhMSwgMHhhODFhNjY0YiwgMHhjMjRiOGI3MCwgMHhjNzZjNTFhMyxcbiAgMHhkMTkyZTgxOSwgMHhkNjk5MDYyNCwgMHhmNDBlMzU4NSwgMHgxMDZhYTA3MCxcbiAgMHgxOWE0YzExNiwgMHgxZTM3NmMwOCwgMHgyNzQ4Nzc0YywgMHgzNGIwYmNiNSxcbiAgMHgzOTFjMGNiMywgMHg0ZWQ4YWE0YSwgMHg1YjljY2E0ZiwgMHg2ODJlNmZmMyxcbiAgMHg3NDhmODJlZSwgMHg3OGE1NjM2ZiwgMHg4NGM4NzgxNCwgMHg4Y2M3MDIwOCxcbiAgMHg5MGJlZmZmYSwgMHhhNDUwNmNlYiwgMHhiZWY5YTNmNywgMHhjNjcxNzhmMlxuXTtcblxuZnVuY3Rpb24gU0hBMjU2KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMjU2KSlcbiAgICByZXR1cm4gbmV3IFNIQTI1NigpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHg2YTA5ZTY2NywgMHhiYjY3YWU4NSwgMHgzYzZlZjM3MiwgMHhhNTRmZjUzYSxcbiAgICAweDUxMGU1MjdmLCAweDliMDU2ODhjLCAweDFmODNkOWFiLCAweDViZTBjZDE5XG4gIF07XG4gIHRoaXMuayA9IHNoYTI1Nl9LO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoNjQpO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBMjU2LCBCbG9ja0hhc2gpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEEyNTY7XG5cblNIQTI1Ni5ibG9ja1NpemUgPSA1MTI7XG5TSEEyNTYub3V0U2l6ZSA9IDI1NjtcblNIQTI1Ni5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEyNTYucGFkTGVuZ3RoID0gNjQ7XG5cblNIQTI1Ni5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgVyA9IHRoaXMuVztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspXG4gICAgV1tpXSA9IG1zZ1tzdGFydCArIGldO1xuICBmb3IgKDsgaSA8IFcubGVuZ3RoOyBpKyspXG4gICAgV1tpXSA9IHN1bTMyXzQoZzFfMjU2KFdbaSAtIDJdKSwgV1tpIC0gN10sIGcwXzI1NihXW2kgLSAxNV0pLCBXW2kgLSAxNl0pO1xuXG4gIHZhciBhID0gdGhpcy5oWzBdO1xuICB2YXIgYiA9IHRoaXMuaFsxXTtcbiAgdmFyIGMgPSB0aGlzLmhbMl07XG4gIHZhciBkID0gdGhpcy5oWzNdO1xuICB2YXIgZSA9IHRoaXMuaFs0XTtcbiAgdmFyIGYgPSB0aGlzLmhbNV07XG4gIHZhciBnID0gdGhpcy5oWzZdO1xuICB2YXIgaCA9IHRoaXMuaFs3XTtcblxuICBhc3NlcnQodGhpcy5rLmxlbmd0aCA9PT0gVy5sZW5ndGgpO1xuICBmb3IgKGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBUMSA9IHN1bTMyXzUoaCwgczFfMjU2KGUpLCBjaDMyKGUsIGYsIGcpLCB0aGlzLmtbaV0sIFdbaV0pO1xuICAgIHZhciBUMiA9IHN1bTMyKHMwXzI1NihhKSwgbWFqMzIoYSwgYiwgYykpO1xuICAgIGggPSBnO1xuICAgIGcgPSBmO1xuICAgIGYgPSBlO1xuICAgIGUgPSBzdW0zMihkLCBUMSk7XG4gICAgZCA9IGM7XG4gICAgYyA9IGI7XG4gICAgYiA9IGE7XG4gICAgYSA9IHN1bTMyKFQxLCBUMik7XG4gIH1cblxuICB0aGlzLmhbMF0gPSBzdW0zMih0aGlzLmhbMF0sIGEpO1xuICB0aGlzLmhbMV0gPSBzdW0zMih0aGlzLmhbMV0sIGIpO1xuICB0aGlzLmhbMl0gPSBzdW0zMih0aGlzLmhbMl0sIGMpO1xuICB0aGlzLmhbM10gPSBzdW0zMih0aGlzLmhbM10sIGQpO1xuICB0aGlzLmhbNF0gPSBzdW0zMih0aGlzLmhbNF0sIGUpO1xuICB0aGlzLmhbNV0gPSBzdW0zMih0aGlzLmhbNV0sIGYpO1xuICB0aGlzLmhbNl0gPSBzdW0zMih0aGlzLmhbNl0sIGcpO1xuICB0aGlzLmhbN10gPSBzdW0zMih0aGlzLmhbN10sIGgpO1xufTtcblxuU0hBMjU2LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbnZhciByb3RyNjRfaGkgPSB1dGlscy5yb3RyNjRfaGk7XG52YXIgcm90cjY0X2xvID0gdXRpbHMucm90cjY0X2xvO1xudmFyIHNocjY0X2hpID0gdXRpbHMuc2hyNjRfaGk7XG52YXIgc2hyNjRfbG8gPSB1dGlscy5zaHI2NF9sbztcbnZhciBzdW02NCA9IHV0aWxzLnN1bTY0O1xudmFyIHN1bTY0X2hpID0gdXRpbHMuc3VtNjRfaGk7XG52YXIgc3VtNjRfbG8gPSB1dGlscy5zdW02NF9sbztcbnZhciBzdW02NF80X2hpID0gdXRpbHMuc3VtNjRfNF9oaTtcbnZhciBzdW02NF80X2xvID0gdXRpbHMuc3VtNjRfNF9sbztcbnZhciBzdW02NF81X2hpID0gdXRpbHMuc3VtNjRfNV9oaTtcbnZhciBzdW02NF81X2xvID0gdXRpbHMuc3VtNjRfNV9sbztcblxudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbnZhciBzaGE1MTJfSyA9IFtcbiAgMHg0MjhhMmY5OCwgMHhkNzI4YWUyMiwgMHg3MTM3NDQ5MSwgMHgyM2VmNjVjZCxcbiAgMHhiNWMwZmJjZiwgMHhlYzRkM2IyZiwgMHhlOWI1ZGJhNSwgMHg4MTg5ZGJiYyxcbiAgMHgzOTU2YzI1YiwgMHhmMzQ4YjUzOCwgMHg1OWYxMTFmMSwgMHhiNjA1ZDAxOSxcbiAgMHg5MjNmODJhNCwgMHhhZjE5NGY5YiwgMHhhYjFjNWVkNSwgMHhkYTZkODExOCxcbiAgMHhkODA3YWE5OCwgMHhhMzAzMDI0MiwgMHgxMjgzNWIwMSwgMHg0NTcwNmZiZSxcbiAgMHgyNDMxODViZSwgMHg0ZWU0YjI4YywgMHg1NTBjN2RjMywgMHhkNWZmYjRlMixcbiAgMHg3MmJlNWQ3NCwgMHhmMjdiODk2ZiwgMHg4MGRlYjFmZSwgMHgzYjE2OTZiMSxcbiAgMHg5YmRjMDZhNywgMHgyNWM3MTIzNSwgMHhjMTliZjE3NCwgMHhjZjY5MjY5NCxcbiAgMHhlNDliNjljMSwgMHg5ZWYxNGFkMiwgMHhlZmJlNDc4NiwgMHgzODRmMjVlMyxcbiAgMHgwZmMxOWRjNiwgMHg4YjhjZDViNSwgMHgyNDBjYTFjYywgMHg3N2FjOWM2NSxcbiAgMHgyZGU5MmM2ZiwgMHg1OTJiMDI3NSwgMHg0YTc0ODRhYSwgMHg2ZWE2ZTQ4MyxcbiAgMHg1Y2IwYTlkYywgMHhiZDQxZmJkNCwgMHg3NmY5ODhkYSwgMHg4MzExNTNiNSxcbiAgMHg5ODNlNTE1MiwgMHhlZTY2ZGZhYiwgMHhhODMxYzY2ZCwgMHgyZGI0MzIxMCxcbiAgMHhiMDAzMjdjOCwgMHg5OGZiMjEzZiwgMHhiZjU5N2ZjNywgMHhiZWVmMGVlNCxcbiAgMHhjNmUwMGJmMywgMHgzZGE4OGZjMiwgMHhkNWE3OTE0NywgMHg5MzBhYTcyNSxcbiAgMHgwNmNhNjM1MSwgMHhlMDAzODI2ZiwgMHgxNDI5Mjk2NywgMHgwYTBlNmU3MCxcbiAgMHgyN2I3MGE4NSwgMHg0NmQyMmZmYywgMHgyZTFiMjEzOCwgMHg1YzI2YzkyNixcbiAgMHg0ZDJjNmRmYywgMHg1YWM0MmFlZCwgMHg1MzM4MGQxMywgMHg5ZDk1YjNkZixcbiAgMHg2NTBhNzM1NCwgMHg4YmFmNjNkZSwgMHg3NjZhMGFiYiwgMHgzYzc3YjJhOCxcbiAgMHg4MWMyYzkyZSwgMHg0N2VkYWVlNiwgMHg5MjcyMmM4NSwgMHgxNDgyMzUzYixcbiAgMHhhMmJmZThhMSwgMHg0Y2YxMDM2NCwgMHhhODFhNjY0YiwgMHhiYzQyMzAwMSxcbiAgMHhjMjRiOGI3MCwgMHhkMGY4OTc5MSwgMHhjNzZjNTFhMywgMHgwNjU0YmUzMCxcbiAgMHhkMTkyZTgxOSwgMHhkNmVmNTIxOCwgMHhkNjk5MDYyNCwgMHg1NTY1YTkxMCxcbiAgMHhmNDBlMzU4NSwgMHg1NzcxMjAyYSwgMHgxMDZhYTA3MCwgMHgzMmJiZDFiOCxcbiAgMHgxOWE0YzExNiwgMHhiOGQyZDBjOCwgMHgxZTM3NmMwOCwgMHg1MTQxYWI1MyxcbiAgMHgyNzQ4Nzc0YywgMHhkZjhlZWI5OSwgMHgzNGIwYmNiNSwgMHhlMTliNDhhOCxcbiAgMHgzOTFjMGNiMywgMHhjNWM5NWE2MywgMHg0ZWQ4YWE0YSwgMHhlMzQxOGFjYixcbiAgMHg1YjljY2E0ZiwgMHg3NzYzZTM3MywgMHg2ODJlNmZmMywgMHhkNmIyYjhhMyxcbiAgMHg3NDhmODJlZSwgMHg1ZGVmYjJmYywgMHg3OGE1NjM2ZiwgMHg0MzE3MmY2MCxcbiAgMHg4NGM4NzgxNCwgMHhhMWYwYWI3MiwgMHg4Y2M3MDIwOCwgMHgxYTY0MzllYyxcbiAgMHg5MGJlZmZmYSwgMHgyMzYzMWUyOCwgMHhhNDUwNmNlYiwgMHhkZTgyYmRlOSxcbiAgMHhiZWY5YTNmNywgMHhiMmM2NzkxNSwgMHhjNjcxNzhmMiwgMHhlMzcyNTMyYixcbiAgMHhjYTI3M2VjZSwgMHhlYTI2NjE5YywgMHhkMTg2YjhjNywgMHgyMWMwYzIwNyxcbiAgMHhlYWRhN2RkNiwgMHhjZGUwZWIxZSwgMHhmNTdkNGY3ZiwgMHhlZTZlZDE3OCxcbiAgMHgwNmYwNjdhYSwgMHg3MjE3NmZiYSwgMHgwYTYzN2RjNSwgMHhhMmM4OThhNixcbiAgMHgxMTNmOTgwNCwgMHhiZWY5MGRhZSwgMHgxYjcxMGIzNSwgMHgxMzFjNDcxYixcbiAgMHgyOGRiNzdmNSwgMHgyMzA0N2Q4NCwgMHgzMmNhYWI3YiwgMHg0MGM3MjQ5MyxcbiAgMHgzYzllYmUwYSwgMHgxNWM5YmViYywgMHg0MzFkNjdjNCwgMHg5YzEwMGQ0YyxcbiAgMHg0Y2M1ZDRiZSwgMHhjYjNlNDJiNiwgMHg1OTdmMjk5YywgMHhmYzY1N2UyYSxcbiAgMHg1ZmNiNmZhYiwgMHgzYWQ2ZmFlYywgMHg2YzQ0MTk4YywgMHg0YTQ3NTgxN1xuXTtcblxuZnVuY3Rpb24gU0hBNTEyKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBNTEyKSlcbiAgICByZXR1cm4gbmV3IFNIQTUxMigpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHg2YTA5ZTY2NywgMHhmM2JjYzkwOCxcbiAgICAweGJiNjdhZTg1LCAweDg0Y2FhNzNiLFxuICAgIDB4M2M2ZWYzNzIsIDB4ZmU5NGY4MmIsXG4gICAgMHhhNTRmZjUzYSwgMHg1ZjFkMzZmMSxcbiAgICAweDUxMGU1MjdmLCAweGFkZTY4MmQxLFxuICAgIDB4OWIwNTY4OGMsIDB4MmIzZTZjMWYsXG4gICAgMHgxZjgzZDlhYiwgMHhmYjQxYmQ2YixcbiAgICAweDViZTBjZDE5LCAweDEzN2UyMTc5IF07XG4gIHRoaXMuayA9IHNoYTUxMl9LO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoMTYwKTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTUxMiwgQmxvY2tIYXNoKTtcbm1vZHVsZS5leHBvcnRzID0gU0hBNTEyO1xuXG5TSEE1MTIuYmxvY2tTaXplID0gMTAyNDtcblNIQTUxMi5vdXRTaXplID0gNTEyO1xuU0hBNTEyLmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTUxMi5wYWRMZW5ndGggPSAxMjg7XG5cblNIQTUxMi5wcm90b3R5cGUuX3ByZXBhcmVCbG9jayA9IGZ1bmN0aW9uIF9wcmVwYXJlQmxvY2sobXNnLCBzdGFydCkge1xuICB2YXIgVyA9IHRoaXMuVztcblxuICAvLyAzMiB4IDMyYml0IHdvcmRzXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG4gIGZvciAoOyBpIDwgVy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBjMF9oaSA9IGcxXzUxMl9oaShXW2kgLSA0XSwgV1tpIC0gM10pOyAgLy8gaSAtIDJcbiAgICB2YXIgYzBfbG8gPSBnMV81MTJfbG8oV1tpIC0gNF0sIFdbaSAtIDNdKTtcbiAgICB2YXIgYzFfaGkgPSBXW2kgLSAxNF07ICAvLyBpIC0gN1xuICAgIHZhciBjMV9sbyA9IFdbaSAtIDEzXTtcbiAgICB2YXIgYzJfaGkgPSBnMF81MTJfaGkoV1tpIC0gMzBdLCBXW2kgLSAyOV0pOyAgLy8gaSAtIDE1XG4gICAgdmFyIGMyX2xvID0gZzBfNTEyX2xvKFdbaSAtIDMwXSwgV1tpIC0gMjldKTtcbiAgICB2YXIgYzNfaGkgPSBXW2kgLSAzMl07ICAvLyBpIC0gMTZcbiAgICB2YXIgYzNfbG8gPSBXW2kgLSAzMV07XG5cbiAgICBXW2ldID0gc3VtNjRfNF9oaShcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyk7XG4gICAgV1tpICsgMV0gPSBzdW02NF80X2xvKFxuICAgICAgYzBfaGksIGMwX2xvLFxuICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgYzNfaGksIGMzX2xvKTtcbiAgfVxufTtcblxuU0hBNTEyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHRoaXMuX3ByZXBhcmVCbG9jayhtc2csIHN0YXJ0KTtcblxuICB2YXIgVyA9IHRoaXMuVztcblxuICB2YXIgYWggPSB0aGlzLmhbMF07XG4gIHZhciBhbCA9IHRoaXMuaFsxXTtcbiAgdmFyIGJoID0gdGhpcy5oWzJdO1xuICB2YXIgYmwgPSB0aGlzLmhbM107XG4gIHZhciBjaCA9IHRoaXMuaFs0XTtcbiAgdmFyIGNsID0gdGhpcy5oWzVdO1xuICB2YXIgZGggPSB0aGlzLmhbNl07XG4gIHZhciBkbCA9IHRoaXMuaFs3XTtcbiAgdmFyIGVoID0gdGhpcy5oWzhdO1xuICB2YXIgZWwgPSB0aGlzLmhbOV07XG4gIHZhciBmaCA9IHRoaXMuaFsxMF07XG4gIHZhciBmbCA9IHRoaXMuaFsxMV07XG4gIHZhciBnaCA9IHRoaXMuaFsxMl07XG4gIHZhciBnbCA9IHRoaXMuaFsxM107XG4gIHZhciBoaCA9IHRoaXMuaFsxNF07XG4gIHZhciBobCA9IHRoaXMuaFsxNV07XG5cbiAgYXNzZXJ0KHRoaXMuay5sZW5ndGggPT09IFcubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBXLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGMwX2hpID0gaGg7XG4gICAgdmFyIGMwX2xvID0gaGw7XG4gICAgdmFyIGMxX2hpID0gczFfNTEyX2hpKGVoLCBlbCk7XG4gICAgdmFyIGMxX2xvID0gczFfNTEyX2xvKGVoLCBlbCk7XG4gICAgdmFyIGMyX2hpID0gY2g2NF9oaShlaCwgZWwsIGZoLCBmbCwgZ2gsIGdsKTtcbiAgICB2YXIgYzJfbG8gPSBjaDY0X2xvKGVoLCBlbCwgZmgsIGZsLCBnaCwgZ2wpO1xuICAgIHZhciBjM19oaSA9IHRoaXMua1tpXTtcbiAgICB2YXIgYzNfbG8gPSB0aGlzLmtbaSArIDFdO1xuICAgIHZhciBjNF9oaSA9IFdbaV07XG4gICAgdmFyIGM0X2xvID0gV1tpICsgMV07XG5cbiAgICB2YXIgVDFfaGkgPSBzdW02NF81X2hpKFxuICAgICAgYzBfaGksIGMwX2xvLFxuICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgYzNfaGksIGMzX2xvLFxuICAgICAgYzRfaGksIGM0X2xvKTtcbiAgICB2YXIgVDFfbG8gPSBzdW02NF81X2xvKFxuICAgICAgYzBfaGksIGMwX2xvLFxuICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgYzNfaGksIGMzX2xvLFxuICAgICAgYzRfaGksIGM0X2xvKTtcblxuICAgIGMwX2hpID0gczBfNTEyX2hpKGFoLCBhbCk7XG4gICAgYzBfbG8gPSBzMF81MTJfbG8oYWgsIGFsKTtcbiAgICBjMV9oaSA9IG1hajY0X2hpKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wpO1xuICAgIGMxX2xvID0gbWFqNjRfbG8oYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCk7XG5cbiAgICB2YXIgVDJfaGkgPSBzdW02NF9oaShjMF9oaSwgYzBfbG8sIGMxX2hpLCBjMV9sbyk7XG4gICAgdmFyIFQyX2xvID0gc3VtNjRfbG8oYzBfaGksIGMwX2xvLCBjMV9oaSwgYzFfbG8pO1xuXG4gICAgaGggPSBnaDtcbiAgICBobCA9IGdsO1xuXG4gICAgZ2ggPSBmaDtcbiAgICBnbCA9IGZsO1xuXG4gICAgZmggPSBlaDtcbiAgICBmbCA9IGVsO1xuXG4gICAgZWggPSBzdW02NF9oaShkaCwgZGwsIFQxX2hpLCBUMV9sbyk7XG4gICAgZWwgPSBzdW02NF9sbyhkbCwgZGwsIFQxX2hpLCBUMV9sbyk7XG5cbiAgICBkaCA9IGNoO1xuICAgIGRsID0gY2w7XG5cbiAgICBjaCA9IGJoO1xuICAgIGNsID0gYmw7XG5cbiAgICBiaCA9IGFoO1xuICAgIGJsID0gYWw7XG5cbiAgICBhaCA9IHN1bTY0X2hpKFQxX2hpLCBUMV9sbywgVDJfaGksIFQyX2xvKTtcbiAgICBhbCA9IHN1bTY0X2xvKFQxX2hpLCBUMV9sbywgVDJfaGksIFQyX2xvKTtcbiAgfVxuXG4gIHN1bTY0KHRoaXMuaCwgMCwgYWgsIGFsKTtcbiAgc3VtNjQodGhpcy5oLCAyLCBiaCwgYmwpO1xuICBzdW02NCh0aGlzLmgsIDQsIGNoLCBjbCk7XG4gIHN1bTY0KHRoaXMuaCwgNiwgZGgsIGRsKTtcbiAgc3VtNjQodGhpcy5oLCA4LCBlaCwgZWwpO1xuICBzdW02NCh0aGlzLmgsIDEwLCBmaCwgZmwpO1xuICBzdW02NCh0aGlzLmgsIDEyLCBnaCwgZ2wpO1xuICBzdW02NCh0aGlzLmgsIDE0LCBoaCwgaGwpO1xufTtcblxuU0hBNTEyLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcblxuZnVuY3Rpb24gY2g2NF9oaSh4aCwgeGwsIHloLCB5bCwgemgpIHtcbiAgdmFyIHIgPSAoeGggJiB5aCkgXiAoKH54aCkgJiB6aCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gY2g2NF9sbyh4aCwgeGwsIHloLCB5bCwgemgsIHpsKSB7XG4gIHZhciByID0gKHhsICYgeWwpIF4gKCh+eGwpICYgemwpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIG1hajY0X2hpKHhoLCB4bCwgeWgsIHlsLCB6aCkge1xuICB2YXIgciA9ICh4aCAmIHloKSBeICh4aCAmIHpoKSBeICh5aCAmIHpoKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYWo2NF9sbyh4aCwgeGwsIHloLCB5bCwgemgsIHpsKSB7XG4gIHZhciByID0gKHhsICYgeWwpIF4gKHhsICYgemwpIF4gKHlsICYgemwpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMwXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMjgpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCAyKTsgIC8vIDM0XG4gIHZhciBjMl9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDcpOyAgLy8gMzlcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMF81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDI4KTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgMik7ICAvLyAzNFxuICB2YXIgYzJfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCA3KTsgIC8vIDM5XG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczFfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxNCk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE4KTtcbiAgdmFyIGMyX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgOSk7ICAvLyA0MVxuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMxXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTQpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxOCk7XG4gIHZhciBjMl9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDkpOyAgLy8gNDFcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMF81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDEpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCA4KTtcbiAgdmFyIGMyX2hpID0gc2hyNjRfaGkoeGgsIHhsLCA3KTtcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMF81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDEpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCA4KTtcbiAgdmFyIGMyX2xvID0gc2hyNjRfbG8oeGgsIHhsLCA3KTtcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMV81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE5KTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgMjkpOyAgLy8gNjFcbiAgdmFyIGMyX2hpID0gc2hyNjRfaGkoeGgsIHhsLCA2KTtcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMV81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDE5KTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgMjkpOyAgLy8gNjFcbiAgdmFyIGMyX2xvID0gc2hyNjRfbG8oeGgsIHhsLCA2KTtcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBSZXBvcnRlciA9IHJlcXVpcmUoJy4uL2Jhc2UnKS5SZXBvcnRlcjtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbmZ1bmN0aW9uIERlY29kZXJCdWZmZXIoYmFzZSwgb3B0aW9ucykge1xuICBSZXBvcnRlci5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiYXNlKSkge1xuICAgIHRoaXMuZXJyb3IoJ0lucHV0IG5vdCBCdWZmZXInKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmJhc2UgPSBiYXNlO1xuICB0aGlzLm9mZnNldCA9IDA7XG4gIHRoaXMubGVuZ3RoID0gYmFzZS5sZW5ndGg7XG59XG5pbmhlcml0cyhEZWNvZGVyQnVmZmVyLCBSZXBvcnRlcik7XG5leHBvcnRzLkRlY29kZXJCdWZmZXIgPSBEZWNvZGVyQnVmZmVyO1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gc2F2ZSgpIHtcbiAgcmV0dXJuIHsgb2Zmc2V0OiB0aGlzLm9mZnNldCwgcmVwb3J0ZXI6IFJlcG9ydGVyLnByb3RvdHlwZS5zYXZlLmNhbGwodGhpcykgfTtcbn07XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnJlc3RvcmUgPSBmdW5jdGlvbiByZXN0b3JlKHNhdmUpIHtcbiAgLy8gUmV0dXJuIHNraXBwZWQgZGF0YVxuICB2YXIgcmVzID0gbmV3IERlY29kZXJCdWZmZXIodGhpcy5iYXNlKTtcbiAgcmVzLm9mZnNldCA9IHNhdmUub2Zmc2V0O1xuICByZXMubGVuZ3RoID0gdGhpcy5vZmZzZXQ7XG5cbiAgdGhpcy5vZmZzZXQgPSBzYXZlLm9mZnNldDtcbiAgUmVwb3J0ZXIucHJvdG90eXBlLnJlc3RvcmUuY2FsbCh0aGlzLCBzYXZlLnJlcG9ydGVyKTtcblxuICByZXR1cm4gcmVzO1xufTtcblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uIGlzRW1wdHkoKSB7XG4gIHJldHVybiB0aGlzLm9mZnNldCA9PT0gdGhpcy5sZW5ndGg7XG59O1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDgoZmFpbCkge1xuICBpZiAodGhpcy5vZmZzZXQgKyAxIDw9IHRoaXMubGVuZ3RoKVxuICAgIHJldHVybiB0aGlzLmJhc2UucmVhZFVJbnQ4KHRoaXMub2Zmc2V0KyssIHRydWUpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuZXJyb3IoZmFpbCB8fCAnRGVjb2RlckJ1ZmZlciBvdmVycnVuJyk7XG59XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnNraXAgPSBmdW5jdGlvbiBza2lwKGJ5dGVzLCBmYWlsKSB7XG4gIGlmICghKHRoaXMub2Zmc2V0ICsgYnl0ZXMgPD0gdGhpcy5sZW5ndGgpKVxuICAgIHJldHVybiB0aGlzLmVycm9yKGZhaWwgfHwgJ0RlY29kZXJCdWZmZXIgb3ZlcnJ1bicpO1xuXG4gIHZhciByZXMgPSBuZXcgRGVjb2RlckJ1ZmZlcih0aGlzLmJhc2UpO1xuXG4gIC8vIFNoYXJlIHJlcG9ydGVyIHN0YXRlXG4gIHJlcy5fcmVwb3J0ZXJTdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgcmVzLm9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICByZXMubGVuZ3RoID0gdGhpcy5vZmZzZXQgKyBieXRlcztcbiAgdGhpcy5vZmZzZXQgKz0gYnl0ZXM7XG4gIHJldHVybiByZXM7XG59XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnJhdyA9IGZ1bmN0aW9uIHJhdyhzYXZlKSB7XG4gIHJldHVybiB0aGlzLmJhc2Uuc2xpY2Uoc2F2ZSA/IHNhdmUub2Zmc2V0IDogdGhpcy5vZmZzZXQsIHRoaXMubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gRW5jb2RlckJ1ZmZlcih2YWx1ZSwgcmVwb3J0ZXIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZS5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgaWYgKCEoaXRlbSBpbnN0YW5jZW9mIEVuY29kZXJCdWZmZXIpKVxuICAgICAgICBpdGVtID0gbmV3IEVuY29kZXJCdWZmZXIoaXRlbSwgcmVwb3J0ZXIpO1xuICAgICAgdGhpcy5sZW5ndGggKz0gaXRlbS5sZW5ndGg7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9LCB0aGlzKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKCEoMCA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSAweGZmKSlcbiAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignbm9uLWJ5dGUgRW5jb2RlckJ1ZmZlciB2YWx1ZScpO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmxlbmd0aCA9IDE7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHZhbHVlKTtcbiAgfSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXBvcnRlci5lcnJvcignVW5zdXBwb3J0ZWQgdHlwZTogJyArIHR5cGVvZiB2YWx1ZSk7XG4gIH1cbn1cbmV4cG9ydHMuRW5jb2RlckJ1ZmZlciA9IEVuY29kZXJCdWZmZXI7XG5cbkVuY29kZXJCdWZmZXIucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKG91dCwgb2Zmc2V0KSB7XG4gIGlmICghb3V0KVxuICAgIG91dCA9IG5ldyBCdWZmZXIodGhpcy5sZW5ndGgpO1xuICBpZiAoIW9mZnNldClcbiAgICBvZmZzZXQgPSAwO1xuXG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMClcbiAgICByZXR1cm4gb3V0O1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7XG4gICAgdGhpcy52YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGl0ZW0uam9pbihvdXQsIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gaXRlbS5sZW5ndGg7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgIG91dFtvZmZzZXRdID0gdGhpcy52YWx1ZTtcbiAgICBlbHNlIGlmICh0eXBlb2YgdGhpcy52YWx1ZSA9PT0gJ3N0cmluZycpXG4gICAgICBvdXQud3JpdGUodGhpcy52YWx1ZSwgb2Zmc2V0KTtcbiAgICBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIodGhpcy52YWx1ZSkpXG4gICAgICB0aGlzLnZhbHVlLmNvcHkob3V0LCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSB0aGlzLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59O1xuIiwidmFyIGNvbnN0YW50cyA9IGV4cG9ydHM7XG5cbi8vIEhlbHBlclxuY29uc3RhbnRzLl9yZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZShtYXApIHtcbiAgdmFyIHJlcyA9IHt9O1xuXG4gIE9iamVjdC5rZXlzKG1hcCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAvLyBDb252ZXJ0IGtleSB0byBpbnRlZ2VyIGlmIGl0IGlzIHN0cmluZ2lmaWVkXG4gICAgaWYgKChrZXkgfCAwKSA9PSBrZXkpXG4gICAgICBrZXkgPSBrZXkgfCAwO1xuXG4gICAgdmFyIHZhbHVlID0gbWFwW2tleV07XG4gICAgcmVzW3ZhbHVlXSA9IGtleTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbmNvbnN0YW50cy5kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIGFzbjEgPSByZXF1aXJlKCcuLi8uLi9hc24xJyk7XG52YXIgYmFzZSA9IGFzbjEuYmFzZTtcbnZhciBiaWdudW0gPSBhc24xLmJpZ251bTtcblxuLy8gSW1wb3J0IERFUiBjb25zdGFudHNcbnZhciBkZXIgPSBhc24xLmNvbnN0YW50cy5kZXI7XG5cbmZ1bmN0aW9uIERFUkRlY29kZXIoZW50aXR5KSB7XG4gIHRoaXMuZW5jID0gJ2Rlcic7XG4gIHRoaXMubmFtZSA9IGVudGl0eS5uYW1lO1xuICB0aGlzLmVudGl0eSA9IGVudGl0eTtcblxuICAvLyBDb25zdHJ1Y3QgYmFzZSB0cmVlXG4gIHRoaXMudHJlZSA9IG5ldyBERVJOb2RlKCk7XG4gIHRoaXMudHJlZS5faW5pdChlbnRpdHkuYm9keSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBERVJEZWNvZGVyO1xuXG5ERVJEZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoZGF0YSwgb3B0aW9ucykge1xuICBpZiAoIShkYXRhIGluc3RhbmNlb2YgYmFzZS5EZWNvZGVyQnVmZmVyKSlcbiAgICBkYXRhID0gbmV3IGJhc2UuRGVjb2RlckJ1ZmZlcihkYXRhLCBvcHRpb25zKTtcblxuICByZXR1cm4gdGhpcy50cmVlLl9kZWNvZGUoZGF0YSwgb3B0aW9ucyk7XG59O1xuXG4vLyBUcmVlIG1ldGhvZHNcblxuZnVuY3Rpb24gREVSTm9kZShwYXJlbnQpIHtcbiAgYmFzZS5Ob2RlLmNhbGwodGhpcywgJ2RlcicsIHBhcmVudCk7XG59XG5pbmhlcml0cyhERVJOb2RlLCBiYXNlLk5vZGUpO1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fcGVla1RhZyA9IGZ1bmN0aW9uIHBlZWtUYWcoYnVmZmVyLCB0YWcsIGFueSkge1xuICBpZiAoYnVmZmVyLmlzRW1wdHkoKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIHN0YXRlID0gYnVmZmVyLnNhdmUoKTtcbiAgdmFyIGRlY29kZWRUYWcgPSBkZXJEZWNvZGVUYWcoYnVmZmVyLCAnRmFpbGVkIHRvIHBlZWsgdGFnOiBcIicgKyB0YWcgKyAnXCInKTtcbiAgaWYgKGJ1ZmZlci5pc0Vycm9yKGRlY29kZWRUYWcpKVxuICAgIHJldHVybiBkZWNvZGVkVGFnO1xuXG4gIGJ1ZmZlci5yZXN0b3JlKHN0YXRlKTtcblxuICByZXR1cm4gZGVjb2RlZFRhZy50YWcgPT09IHRhZyB8fCBkZWNvZGVkVGFnLnRhZ1N0ciA9PT0gdGFnIHx8XG4gICAgKGRlY29kZWRUYWcudGFnU3RyICsgJ29mJykgPT09IHRhZyB8fCBhbnk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlVGFnID0gZnVuY3Rpb24gZGVjb2RlVGFnKGJ1ZmZlciwgdGFnLCBhbnkpIHtcbiAgdmFyIGRlY29kZWRUYWcgPSBkZXJEZWNvZGVUYWcoYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRmFpbGVkIHRvIGRlY29kZSB0YWcgb2YgXCInICsgdGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihkZWNvZGVkVGFnKSlcbiAgICByZXR1cm4gZGVjb2RlZFRhZztcblxuICB2YXIgbGVuID0gZGVyRGVjb2RlTGVuKGJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvZGVkVGFnLnByaW1pdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAnRmFpbGVkIHRvIGdldCBsZW5ndGggb2YgXCInICsgdGFnICsgJ1wiJyk7XG5cbiAgLy8gRmFpbHVyZVxuICBpZiAoYnVmZmVyLmlzRXJyb3IobGVuKSlcbiAgICByZXR1cm4gbGVuO1xuXG4gIGlmICghYW55ICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZyAhPT0gdGFnICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZ1N0ciAhPT0gdGFnICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZ1N0ciArICdvZicgIT09IHRhZykge1xuICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0ZhaWxlZCB0byBtYXRjaCB0YWc6IFwiJyArIHRhZyArICdcIicpO1xuICB9XG5cbiAgaWYgKGRlY29kZWRUYWcucHJpbWl0aXZlIHx8IGxlbiAhPT0gbnVsbClcbiAgICByZXR1cm4gYnVmZmVyLnNraXAobGVuLCAnRmFpbGVkIHRvIG1hdGNoIGJvZHkgb2Y6IFwiJyArIHRhZyArICdcIicpO1xuXG4gIC8vIEluZGVmaW5pdGUgbGVuZ3RoLi4uIGZpbmQgRU5EIHRhZ1xuICB2YXIgc3RhdGUgPSBidWZmZXIuc2F2ZSgpO1xuICB2YXIgcmVzID0gdGhpcy5fc2tpcFVudGlsRW5kKFxuICAgICAgYnVmZmVyLFxuICAgICAgJ0ZhaWxlZCB0byBza2lwIGluZGVmaW5pdGUgbGVuZ3RoIGJvZHk6IFwiJyArIHRoaXMudGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihyZXMpKVxuICAgIHJldHVybiByZXM7XG5cbiAgbGVuID0gYnVmZmVyLm9mZnNldCAtIHN0YXRlLm9mZnNldDtcbiAgYnVmZmVyLnJlc3RvcmUoc3RhdGUpO1xuICByZXR1cm4gYnVmZmVyLnNraXAobGVuLCAnRmFpbGVkIHRvIG1hdGNoIGJvZHkgb2Y6IFwiJyArIHRhZyArICdcIicpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3NraXBVbnRpbEVuZCA9IGZ1bmN0aW9uIHNraXBVbnRpbEVuZChidWZmZXIsIGZhaWwpIHtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgdGFnID0gZGVyRGVjb2RlVGFnKGJ1ZmZlciwgZmFpbCk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHRhZykpXG4gICAgICByZXR1cm4gdGFnO1xuICAgIHZhciBsZW4gPSBkZXJEZWNvZGVMZW4oYnVmZmVyLCB0YWcucHJpbWl0aXZlLCBmYWlsKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IobGVuKSlcbiAgICAgIHJldHVybiBsZW47XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0YWcucHJpbWl0aXZlIHx8IGxlbiAhPT0gbnVsbClcbiAgICAgIHJlcyA9IGJ1ZmZlci5za2lwKGxlbilcbiAgICBlbHNlXG4gICAgICByZXMgPSB0aGlzLl9za2lwVW50aWxFbmQoYnVmZmVyLCBmYWlsKTtcblxuICAgIC8vIEZhaWx1cmVcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IocmVzKSlcbiAgICAgIHJldHVybiByZXM7XG5cbiAgICBpZiAodGFnLnRhZ1N0ciA9PT0gJ2VuZCcpXG4gICAgICBicmVhaztcbiAgfVxufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZUxpc3QgPSBmdW5jdGlvbiBkZWNvZGVMaXN0KGJ1ZmZlciwgdGFnLCBkZWNvZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB3aGlsZSAoIWJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICB2YXIgcG9zc2libGVFbmQgPSB0aGlzLl9wZWVrVGFnKGJ1ZmZlciwgJ2VuZCcpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcihwb3NzaWJsZUVuZCkpXG4gICAgICByZXR1cm4gcG9zc2libGVFbmQ7XG5cbiAgICB2YXIgcmVzID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLCAnZGVyJywgb3B0aW9ucyk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHJlcykgJiYgcG9zc2libGVFbmQpXG4gICAgICBicmVhaztcbiAgICByZXN1bHQucHVzaChyZXMpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlU3RyID0gZnVuY3Rpb24gZGVjb2RlU3RyKGJ1ZmZlciwgdGFnKSB7XG4gIGlmICh0YWcgPT09ICdiaXRzdHInKSB7XG4gICAgdmFyIHVudXNlZCA9IGJ1ZmZlci5yZWFkVUludDgoKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IodW51c2VkKSlcbiAgICAgIHJldHVybiB1bnVzZWQ7XG4gICAgcmV0dXJuIHsgdW51c2VkOiB1bnVzZWQsIGRhdGE6IGJ1ZmZlci5yYXcoKSB9O1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2JtcHN0cicpIHtcbiAgICB2YXIgcmF3ID0gYnVmZmVyLnJhdygpO1xuICAgIGlmIChyYXcubGVuZ3RoICUgMiA9PT0gMSlcbiAgICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nIG9mIHN0cmluZyB0eXBlOiBibXBzdHIgbGVuZ3RoIG1pc21hdGNoJyk7XG5cbiAgICB2YXIgc3RyID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXcubGVuZ3RoIC8gMjsgaSsrKSB7XG4gICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShyYXcucmVhZFVJbnQxNkJFKGkgKiAyKSk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnbnVtc3RyJykge1xuICAgIHZhciBudW1zdHIgPSBidWZmZXIucmF3KCkudG9TdHJpbmcoJ2FzY2lpJyk7XG4gICAgaWYgKCF0aGlzLl9pc051bXN0cihudW1zdHIpKSB7XG4gICAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdudW1zdHIgdW5zdXBwb3J0ZWQgY2hhcmFjdGVycycpO1xuICAgIH1cbiAgICByZXR1cm4gbnVtc3RyO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ29jdHN0cicpIHtcbiAgICByZXR1cm4gYnVmZmVyLnJhdygpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5yYXcoKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdwcmludHN0cicpIHtcbiAgICB2YXIgcHJpbnRzdHIgPSBidWZmZXIucmF3KCkudG9TdHJpbmcoJ2FzY2lpJyk7XG4gICAgaWYgKCF0aGlzLl9pc1ByaW50c3RyKHByaW50c3RyKSkge1xuICAgICAgcmV0dXJuIGJ1ZmZlci5lcnJvcignRGVjb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAncHJpbnRzdHIgdW5zdXBwb3J0ZWQgY2hhcmFjdGVycycpO1xuICAgIH1cbiAgICByZXR1cm4gcHJpbnRzdHI7XG4gIH0gZWxzZSBpZiAoL3N0ciQvLnRlc3QodGFnKSkge1xuICAgIHJldHVybiBidWZmZXIucmF3KCkudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArIHRhZyArICcgdW5zdXBwb3J0ZWQnKTtcbiAgfVxufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZU9iamlkID0gZnVuY3Rpb24gZGVjb2RlT2JqaWQoYnVmZmVyLCB2YWx1ZXMsIHJlbGF0aXZlKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICB2YXIgaWRlbnQgPSAwO1xuICB3aGlsZSAoIWJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICB2YXIgc3ViaWRlbnQgPSBidWZmZXIucmVhZFVJbnQ4KCk7XG4gICAgaWRlbnQgPDw9IDc7XG4gICAgaWRlbnQgfD0gc3ViaWRlbnQgJiAweDdmO1xuICAgIGlmICgoc3ViaWRlbnQgJiAweDgwKSA9PT0gMCkge1xuICAgICAgaWRlbnRpZmllcnMucHVzaChpZGVudCk7XG4gICAgICBpZGVudCA9IDA7XG4gICAgfVxuICB9XG4gIGlmIChzdWJpZGVudCAmIDB4ODApXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudCk7XG5cbiAgdmFyIGZpcnN0ID0gKGlkZW50aWZpZXJzWzBdIC8gNDApIHwgMDtcbiAgdmFyIHNlY29uZCA9IGlkZW50aWZpZXJzWzBdICUgNDA7XG5cbiAgaWYgKHJlbGF0aXZlKVxuICAgIHJlc3VsdCA9IGlkZW50aWZpZXJzO1xuICBlbHNlXG4gICAgcmVzdWx0ID0gW2ZpcnN0LCBzZWNvbmRdLmNvbmNhdChpZGVudGlmaWVycy5zbGljZSgxKSk7XG5cbiAgaWYgKHZhbHVlcykge1xuICAgIHZhciB0bXAgPSB2YWx1ZXNbcmVzdWx0LmpvaW4oJyAnKV07XG4gICAgaWYgKHRtcCA9PT0gdW5kZWZpbmVkKVxuICAgICAgdG1wID0gdmFsdWVzW3Jlc3VsdC5qb2luKCcuJyldO1xuICAgIGlmICh0bXAgIT09IHVuZGVmaW5lZClcbiAgICAgIHJlc3VsdCA9IHRtcDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlVGltZSA9IGZ1bmN0aW9uIGRlY29kZVRpbWUoYnVmZmVyLCB0YWcpIHtcbiAgdmFyIHN0ciA9IGJ1ZmZlci5yYXcoKS50b1N0cmluZygpO1xuICBpZiAodGFnID09PSAnZ2VudGltZScpIHtcbiAgICB2YXIgeWVhciA9IHN0ci5zbGljZSgwLCA0KSB8IDA7XG4gICAgdmFyIG1vbiA9IHN0ci5zbGljZSg0LCA2KSB8IDA7XG4gICAgdmFyIGRheSA9IHN0ci5zbGljZSg2LCA4KSB8IDA7XG4gICAgdmFyIGhvdXIgPSBzdHIuc2xpY2UoOCwgMTApIHwgMDtcbiAgICB2YXIgbWluID0gc3RyLnNsaWNlKDEwLCAxMikgfCAwO1xuICAgIHZhciBzZWMgPSBzdHIuc2xpY2UoMTIsIDE0KSB8IDA7XG4gIH0gZWxzZSBpZiAodGFnID09PSAndXRjdGltZScpIHtcbiAgICB2YXIgeWVhciA9IHN0ci5zbGljZSgwLCAyKSB8IDA7XG4gICAgdmFyIG1vbiA9IHN0ci5zbGljZSgyLCA0KSB8IDA7XG4gICAgdmFyIGRheSA9IHN0ci5zbGljZSg0LCA2KSB8IDA7XG4gICAgdmFyIGhvdXIgPSBzdHIuc2xpY2UoNiwgOCkgfCAwO1xuICAgIHZhciBtaW4gPSBzdHIuc2xpY2UoOCwgMTApIHwgMDtcbiAgICB2YXIgc2VjID0gc3RyLnNsaWNlKDEwLCAxMikgfCAwO1xuICAgIGlmICh5ZWFyIDwgNzApXG4gICAgICB5ZWFyID0gMjAwMCArIHllYXI7XG4gICAgZWxzZVxuICAgICAgeWVhciA9IDE5MDAgKyB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nICcgKyB0YWcgKyAnIHRpbWUgaXMgbm90IHN1cHBvcnRlZCB5ZXQnKTtcbiAgfVxuXG4gIHJldHVybiBEYXRlLlVUQyh5ZWFyLCBtb24gLSAxLCBkYXksIGhvdXIsIG1pbiwgc2VjLCAwKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVOdWxsID0gZnVuY3Rpb24gZGVjb2RlTnVsbChidWZmZXIpIHtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlQm9vbCA9IGZ1bmN0aW9uIGRlY29kZUJvb2woYnVmZmVyKSB7XG4gIHZhciByZXMgPSBidWZmZXIucmVhZFVJbnQ4KCk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihyZXMpKVxuICAgIHJldHVybiByZXM7XG4gIGVsc2VcbiAgICByZXR1cm4gcmVzICE9PSAwO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZUludCA9IGZ1bmN0aW9uIGRlY29kZUludChidWZmZXIsIHZhbHVlcykge1xuICAvLyBCaWdpbnQsIHJldHVybiBhcyBpdCBpcyAoYXNzdW1lIGJpZyBlbmRpYW4pXG4gIHZhciByYXcgPSBidWZmZXIucmF3KCk7XG4gIHZhciByZXMgPSBuZXcgYmlnbnVtKHJhdyk7XG5cbiAgaWYgKHZhbHVlcylcbiAgICByZXMgPSB2YWx1ZXNbcmVzLnRvU3RyaW5nKDEwKV0gfHwgcmVzO1xuXG4gIHJldHVybiByZXM7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fdXNlID0gZnVuY3Rpb24gdXNlKGVudGl0eSwgb2JqKSB7XG4gIGlmICh0eXBlb2YgZW50aXR5ID09PSAnZnVuY3Rpb24nKVxuICAgIGVudGl0eSA9IGVudGl0eShvYmopO1xuICByZXR1cm4gZW50aXR5Ll9nZXREZWNvZGVyKCdkZXInKS50cmVlO1xufTtcblxuLy8gVXRpbGl0eSBtZXRob2RzXG5cbmZ1bmN0aW9uIGRlckRlY29kZVRhZyhidWYsIGZhaWwpIHtcbiAgdmFyIHRhZyA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gIGlmIChidWYuaXNFcnJvcih0YWcpKVxuICAgIHJldHVybiB0YWc7XG5cbiAgdmFyIGNscyA9IGRlci50YWdDbGFzc1t0YWcgPj4gNl07XG4gIHZhciBwcmltaXRpdmUgPSAodGFnICYgMHgyMCkgPT09IDA7XG5cbiAgLy8gTXVsdGktb2N0ZXQgdGFnIC0gbG9hZFxuICBpZiAoKHRhZyAmIDB4MWYpID09PSAweDFmKSB7XG4gICAgdmFyIG9jdCA9IHRhZztcbiAgICB0YWcgPSAwO1xuICAgIHdoaWxlICgob2N0ICYgMHg4MCkgPT09IDB4ODApIHtcbiAgICAgIG9jdCA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gICAgICBpZiAoYnVmLmlzRXJyb3Iob2N0KSlcbiAgICAgICAgcmV0dXJuIG9jdDtcblxuICAgICAgdGFnIDw8PSA3O1xuICAgICAgdGFnIHw9IG9jdCAmIDB4N2Y7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRhZyAmPSAweDFmO1xuICB9XG4gIHZhciB0YWdTdHIgPSBkZXIudGFnW3RhZ107XG5cbiAgcmV0dXJuIHtcbiAgICBjbHM6IGNscyxcbiAgICBwcmltaXRpdmU6IHByaW1pdGl2ZSxcbiAgICB0YWc6IHRhZyxcbiAgICB0YWdTdHI6IHRhZ1N0clxuICB9O1xufVxuXG5mdW5jdGlvbiBkZXJEZWNvZGVMZW4oYnVmLCBwcmltaXRpdmUsIGZhaWwpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gIGlmIChidWYuaXNFcnJvcihsZW4pKVxuICAgIHJldHVybiBsZW47XG5cbiAgLy8gSW5kZWZpbml0ZSBmb3JtXG4gIGlmICghcHJpbWl0aXZlICYmIGxlbiA9PT0gMHg4MClcbiAgICByZXR1cm4gbnVsbDtcblxuICAvLyBEZWZpbml0ZSBmb3JtXG4gIGlmICgobGVuICYgMHg4MCkgPT09IDApIHtcbiAgICAvLyBTaG9ydCBmb3JtXG4gICAgcmV0dXJuIGxlbjtcbiAgfVxuXG4gIC8vIExvbmcgZm9ybVxuICB2YXIgbnVtID0gbGVuICYgMHg3ZjtcbiAgaWYgKG51bSA+IDQpXG4gICAgcmV0dXJuIGJ1Zi5lcnJvcignbGVuZ3RoIG9jdGVjdCBpcyB0b28gbG9uZycpO1xuXG4gIGxlbiA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtOyBpKyspIHtcbiAgICBsZW4gPDw9IDg7XG4gICAgdmFyIGogPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICAgIGlmIChidWYuaXNFcnJvcihqKSlcbiAgICAgIHJldHVybiBqO1xuICAgIGxlbiB8PSBqO1xuICB9XG5cbiAgcmV0dXJuIGxlbjtcbn1cbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuXG52YXIgYXNuMSA9IHJlcXVpcmUoJy4uLy4uL2FzbjEnKTtcbnZhciBiYXNlID0gYXNuMS5iYXNlO1xuXG4vLyBJbXBvcnQgREVSIGNvbnN0YW50c1xudmFyIGRlciA9IGFzbjEuY29uc3RhbnRzLmRlcjtcblxuZnVuY3Rpb24gREVSRW5jb2RlcihlbnRpdHkpIHtcbiAgdGhpcy5lbmMgPSAnZGVyJztcbiAgdGhpcy5uYW1lID0gZW50aXR5Lm5hbWU7XG4gIHRoaXMuZW50aXR5ID0gZW50aXR5O1xuXG4gIC8vIENvbnN0cnVjdCBiYXNlIHRyZWVcbiAgdGhpcy50cmVlID0gbmV3IERFUk5vZGUoKTtcbiAgdGhpcy50cmVlLl9pbml0KGVudGl0eS5ib2R5KTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IERFUkVuY29kZXI7XG5cbkRFUkVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCByZXBvcnRlcikge1xuICByZXR1cm4gdGhpcy50cmVlLl9lbmNvZGUoZGF0YSwgcmVwb3J0ZXIpLmpvaW4oKTtcbn07XG5cbi8vIFRyZWUgbWV0aG9kc1xuXG5mdW5jdGlvbiBERVJOb2RlKHBhcmVudCkge1xuICBiYXNlLk5vZGUuY2FsbCh0aGlzLCAnZGVyJywgcGFyZW50KTtcbn1cbmluaGVyaXRzKERFUk5vZGUsIGJhc2UuTm9kZSk7XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVDb21wb3NpdGUgPSBmdW5jdGlvbiBlbmNvZGVDb21wb3NpdGUodGFnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNscyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCkge1xuICB2YXIgZW5jb2RlZFRhZyA9IGVuY29kZVRhZyh0YWcsIHByaW1pdGl2ZSwgY2xzLCB0aGlzLnJlcG9ydGVyKTtcblxuICAvLyBTaG9ydCBmb3JtXG4gIGlmIChjb250ZW50Lmxlbmd0aCA8IDB4ODApIHtcbiAgICB2YXIgaGVhZGVyID0gbmV3IEJ1ZmZlcigyKTtcbiAgICBoZWFkZXJbMF0gPSBlbmNvZGVkVGFnO1xuICAgIGhlYWRlclsxXSA9IGNvbnRlbnQubGVuZ3RoO1xuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFsgaGVhZGVyLCBjb250ZW50IF0pO1xuICB9XG5cbiAgLy8gTG9uZyBmb3JtXG4gIC8vIENvdW50IG9jdGV0cyByZXF1aXJlZCB0byBzdG9yZSBsZW5ndGhcbiAgdmFyIGxlbk9jdGV0cyA9IDE7XG4gIGZvciAodmFyIGkgPSBjb250ZW50Lmxlbmd0aDsgaSA+PSAweDEwMDsgaSA+Pj0gOClcbiAgICBsZW5PY3RldHMrKztcblxuICB2YXIgaGVhZGVyID0gbmV3IEJ1ZmZlcigxICsgMSArIGxlbk9jdGV0cyk7XG4gIGhlYWRlclswXSA9IGVuY29kZWRUYWc7XG4gIGhlYWRlclsxXSA9IDB4ODAgfCBsZW5PY3RldHM7XG5cbiAgZm9yICh2YXIgaSA9IDEgKyBsZW5PY3RldHMsIGogPSBjb250ZW50Lmxlbmd0aDsgaiA+IDA7IGktLSwgaiA+Pj0gOClcbiAgICBoZWFkZXJbaV0gPSBqICYgMHhmZjtcblxuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbIGhlYWRlciwgY29udGVudCBdKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVTdHIgPSBmdW5jdGlvbiBlbmNvZGVTdHIoc3RyLCB0YWcpIHtcbiAgaWYgKHRhZyA9PT0gJ2JpdHN0cicpIHtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbIHN0ci51bnVzZWQgfCAwLCBzdHIuZGF0YSBdKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdibXBzdHInKSB7XG4gICAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoc3RyLmxlbmd0aCAqIDIpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBidWYud3JpdGVVSW50MTZCRShzdHIuY2hhckNvZGVBdChpKSwgaSAqIDIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihidWYpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ251bXN0cicpIHtcbiAgICBpZiAoIXRoaXMuX2lzTnVtc3RyKHN0cikpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdFbmNvZGluZyBvZiBzdHJpbmcgdHlwZTogbnVtc3RyIHN1cHBvcnRzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29ubHkgZGlnaXRzIGFuZCBzcGFjZScpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihzdHIpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3ByaW50c3RyJykge1xuICAgIGlmICghdGhpcy5faXNQcmludHN0cihzdHIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignRW5jb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6IHByaW50c3RyIHN1cHBvcnRzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29ubHkgbGF0aW4gdXBwZXIgYW5kIGxvd2VyIGNhc2UgbGV0dGVycywgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlnaXRzLCBzcGFjZSwgYXBvc3Ryb3BoZSwgbGVmdCBhbmQgcmlndGggJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGFyZW50aGVzaXMsIHBsdXMgc2lnbiwgY29tbWEsIGh5cGhlbiwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZG90LCBzbGFzaCwgY29sb24sIGVxdWFsIHNpZ24sICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3F1ZXN0aW9uIG1hcmsnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTtcbiAgfSBlbHNlIGlmICgvc3RyJC8udGVzdCh0YWcpKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdvYmpEZXNjJykge1xuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nIG9mIHN0cmluZyB0eXBlOiAnICsgdGFnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIHVuc3VwcG9ydGVkJyk7XG4gIH1cbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVPYmppZCA9IGZ1bmN0aW9uIGVuY29kZU9iamlkKGlkLCB2YWx1ZXMsIHJlbGF0aXZlKSB7XG4gIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCF2YWx1ZXMpXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignc3RyaW5nIG9iamlkIGdpdmVuLCBidXQgbm8gdmFsdWVzIG1hcCBmb3VuZCcpO1xuICAgIGlmICghdmFsdWVzLmhhc093blByb3BlcnR5KGlkKSlcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdvYmppZCBub3QgZm91bmQgaW4gdmFsdWVzIG1hcCcpO1xuICAgIGlkID0gdmFsdWVzW2lkXS5zcGxpdCgvW1xcc1xcLl0rL2cpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWQubGVuZ3RoOyBpKyspXG4gICAgICBpZFtpXSB8PSAwO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaWQpKSB7XG4gICAgaWQgPSBpZC5zbGljZSgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWQubGVuZ3RoOyBpKyspXG4gICAgICBpZFtpXSB8PSAwO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KGlkKSkge1xuICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdvYmppZCgpIHNob3VsZCBiZSBlaXRoZXIgYXJyYXkgb3Igc3RyaW5nLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ290OiAnICsgSlNPTi5zdHJpbmdpZnkoaWQpKTtcbiAgfVxuXG4gIGlmICghcmVsYXRpdmUpIHtcbiAgICBpZiAoaWRbMV0gPj0gNDApXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignU2Vjb25kIG9iamlkIGlkZW50aWZpZXIgT09CJyk7XG4gICAgaWQuc3BsaWNlKDAsIDIsIGlkWzBdICogNDAgKyBpZFsxXSk7XG4gIH1cblxuICAvLyBDb3VudCBudW1iZXIgb2Ygb2N0ZXRzXG4gIHZhciBzaXplID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpZGVudCA9IGlkW2ldO1xuICAgIGZvciAoc2l6ZSsrOyBpZGVudCA+PSAweDgwOyBpZGVudCA+Pj0gNylcbiAgICAgIHNpemUrKztcbiAgfVxuXG4gIHZhciBvYmppZCA9IG5ldyBCdWZmZXIoc2l6ZSk7XG4gIHZhciBvZmZzZXQgPSBvYmppZC5sZW5ndGggLSAxO1xuICBmb3IgKHZhciBpID0gaWQubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgaWRlbnQgPSBpZFtpXTtcbiAgICBvYmppZFtvZmZzZXQtLV0gPSBpZGVudCAmIDB4N2Y7XG4gICAgd2hpbGUgKChpZGVudCA+Pj0gNykgPiAwKVxuICAgICAgb2JqaWRbb2Zmc2V0LS1dID0gMHg4MCB8IChpZGVudCAmIDB4N2YpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIob2JqaWQpO1xufTtcblxuZnVuY3Rpb24gdHdvKG51bSkge1xuICBpZiAobnVtIDwgMTApXG4gICAgcmV0dXJuICcwJyArIG51bTtcbiAgZWxzZVxuICAgIHJldHVybiBudW07XG59XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVUaW1lID0gZnVuY3Rpb24gZW5jb2RlVGltZSh0aW1lLCB0YWcpIHtcbiAgdmFyIHN0cjtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh0aW1lKTtcblxuICBpZiAodGFnID09PSAnZ2VudGltZScpIHtcbiAgICBzdHIgPSBbXG4gICAgICB0d28oZGF0ZS5nZXRGdWxsWWVhcigpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0RhdGUoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENIb3VycygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01pbnV0ZXMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENTZWNvbmRzKCkpLFxuICAgICAgJ1onXG4gICAgXS5qb2luKCcnKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICd1dGN0aW1lJykge1xuICAgIHN0ciA9IFtcbiAgICAgIHR3byhkYXRlLmdldEZ1bGxZZWFyKCkgJSAxMDApLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDRGF0ZSgpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0hvdXJzKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDTWludXRlcygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ1NlY29uZHMoKSksXG4gICAgICAnWidcbiAgICBdLmpvaW4oJycpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nICcgKyB0YWcgKyAnIHRpbWUgaXMgbm90IHN1cHBvcnRlZCB5ZXQnKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9lbmNvZGVTdHIoc3RyLCAnb2N0c3RyJyk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlTnVsbCA9IGZ1bmN0aW9uIGVuY29kZU51bGwoKSB7XG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKCcnKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVJbnQgPSBmdW5jdGlvbiBlbmNvZGVJbnQobnVtLCB2YWx1ZXMpIHtcbiAgaWYgKHR5cGVvZiBudW0gPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCF2YWx1ZXMpXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignU3RyaW5nIGludCBvciBlbnVtIGdpdmVuLCBidXQgbm8gdmFsdWVzIG1hcCcpO1xuICAgIGlmICghdmFsdWVzLmhhc093blByb3BlcnR5KG51bSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdWYWx1ZXMgbWFwIGRvZXNuXFwndCBjb250YWluOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KG51bSkpO1xuICAgIH1cbiAgICBudW0gPSB2YWx1ZXNbbnVtXTtcbiAgfVxuXG4gIC8vIEJpZ251bSwgYXNzdW1lIGJpZyBlbmRpYW5cbiAgaWYgKHR5cGVvZiBudW0gIT09ICdudW1iZXInICYmICFCdWZmZXIuaXNCdWZmZXIobnVtKSkge1xuICAgIHZhciBudW1BcnJheSA9IG51bS50b0FycmF5KCk7XG4gICAgaWYgKCFudW0uc2lnbiAmJiBudW1BcnJheVswXSAmIDB4ODApIHtcbiAgICAgIG51bUFycmF5LnVuc2hpZnQoMCk7XG4gICAgfVxuICAgIG51bSA9IG5ldyBCdWZmZXIobnVtQXJyYXkpO1xuICB9XG5cbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihudW0pKSB7XG4gICAgdmFyIHNpemUgPSBudW0ubGVuZ3RoO1xuICAgIGlmIChudW0ubGVuZ3RoID09PSAwKVxuICAgICAgc2l6ZSsrO1xuXG4gICAgdmFyIG91dCA9IG5ldyBCdWZmZXIoc2l6ZSk7XG4gICAgbnVtLmNvcHkob3V0KTtcbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMClcbiAgICAgIG91dFswXSA9IDBcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihvdXQpO1xuICB9XG5cbiAgaWYgKG51bSA8IDB4ODApXG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIobnVtKTtcblxuICBpZiAobnVtIDwgMHgxMDApXG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWzAsIG51bV0pO1xuXG4gIHZhciBzaXplID0gMTtcbiAgZm9yICh2YXIgaSA9IG51bTsgaSA+PSAweDEwMDsgaSA+Pj0gOClcbiAgICBzaXplKys7XG5cbiAgdmFyIG91dCA9IG5ldyBBcnJheShzaXplKTtcbiAgZm9yICh2YXIgaSA9IG91dC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIG91dFtpXSA9IG51bSAmIDB4ZmY7XG4gICAgbnVtID4+PSA4O1xuICB9XG4gIGlmKG91dFswXSAmIDB4ODApIHtcbiAgICBvdXQudW5zaGlmdCgwKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKG5ldyBCdWZmZXIob3V0KSk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlQm9vbCA9IGZ1bmN0aW9uIGVuY29kZUJvb2wodmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIodmFsdWUgPyAweGZmIDogMCk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fdXNlID0gZnVuY3Rpb24gdXNlKGVudGl0eSwgb2JqKSB7XG4gIGlmICh0eXBlb2YgZW50aXR5ID09PSAnZnVuY3Rpb24nKVxuICAgIGVudGl0eSA9IGVudGl0eShvYmopO1xuICByZXR1cm4gZW50aXR5Ll9nZXRFbmNvZGVyKCdkZXInKS50cmVlO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3NraXBEZWZhdWx0ID0gZnVuY3Rpb24gc2tpcERlZmF1bHQoZGF0YUJ1ZmZlciwgcmVwb3J0ZXIsIHBhcmVudCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIHZhciBpO1xuICBpZiAoc3RhdGVbJ2RlZmF1bHQnXSA9PT0gbnVsbClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGRhdGEgPSBkYXRhQnVmZmVyLmpvaW4oKTtcbiAgaWYgKHN0YXRlLmRlZmF1bHRCdWZmZXIgPT09IHVuZGVmaW5lZClcbiAgICBzdGF0ZS5kZWZhdWx0QnVmZmVyID0gdGhpcy5fZW5jb2RlVmFsdWUoc3RhdGVbJ2RlZmF1bHQnXSwgcmVwb3J0ZXIsIHBhcmVudCkuam9pbigpO1xuXG4gIGlmIChkYXRhLmxlbmd0aCAhPT0gc3RhdGUuZGVmYXVsdEJ1ZmZlci5sZW5ndGgpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAoaT0wOyBpIDwgZGF0YS5sZW5ndGg7IGkrKylcbiAgICBpZiAoZGF0YVtpXSAhPT0gc3RhdGUuZGVmYXVsdEJ1ZmZlcltpXSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8vIFV0aWxpdHkgbWV0aG9kc1xuXG5mdW5jdGlvbiBlbmNvZGVUYWcodGFnLCBwcmltaXRpdmUsIGNscywgcmVwb3J0ZXIpIHtcbiAgdmFyIHJlcztcblxuICBpZiAodGFnID09PSAnc2Vxb2YnKVxuICAgIHRhZyA9ICdzZXEnO1xuICBlbHNlIGlmICh0YWcgPT09ICdzZXRvZicpXG4gICAgdGFnID0gJ3NldCc7XG5cbiAgaWYgKGRlci50YWdCeU5hbWUuaGFzT3duUHJvcGVydHkodGFnKSlcbiAgICByZXMgPSBkZXIudGFnQnlOYW1lW3RhZ107XG4gIGVsc2UgaWYgKHR5cGVvZiB0YWcgPT09ICdudW1iZXInICYmICh0YWcgfCAwKSA9PT0gdGFnKVxuICAgIHJlcyA9IHRhZztcbiAgZWxzZVxuICAgIHJldHVybiByZXBvcnRlci5lcnJvcignVW5rbm93biB0YWc6ICcgKyB0YWcpO1xuXG4gIGlmIChyZXMgPj0gMHgxZilcbiAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ011bHRpLW9jdGV0IHRhZyBlbmNvZGluZyB1bnN1cHBvcnRlZCcpO1xuXG4gIGlmICghcHJpbWl0aXZlKVxuICAgIHJlcyB8PSAweDIwO1xuXG4gIHJlcyB8PSAoZGVyLnRhZ0NsYXNzQnlOYW1lW2NscyB8fCAndW5pdmVyc2FsJ10gPDwgNik7XG5cbiAgcmV0dXJuIHJlcztcbn1cbiIsInZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNlZWQsIGxlbikge1xuICB2YXIgdCA9IEJ1ZmZlci5hbGxvYygwKVxuICB2YXIgaSA9IDBcbiAgdmFyIGNcbiAgd2hpbGUgKHQubGVuZ3RoIDwgbGVuKSB7XG4gICAgYyA9IGkyb3BzKGkrKylcbiAgICB0ID0gQnVmZmVyLmNvbmNhdChbdCwgY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShzZWVkKS51cGRhdGUoYykuZGlnZXN0KCldKVxuICB9XG4gIHJldHVybiB0LnNsaWNlKDAsIGxlbilcbn1cblxuZnVuY3Rpb24gaTJvcHMgKGMpIHtcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0KVxuICBvdXQud3JpdGVVSW50MzJCRShjLCAwKVxuICByZXR1cm4gb3V0XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhvciAoYSwgYikge1xuICB2YXIgbGVuID0gYS5sZW5ndGhcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgYVtpXSBePSBiW2ldXG4gIH1cbiAgcmV0dXJuIGFcbn1cbiIsInZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiB3aXRoUHVibGljIChwYWRkZWRNc2csIGtleSkge1xuICByZXR1cm4gQnVmZmVyLmZyb20ocGFkZGVkTXNnXG4gICAgLnRvUmVkKEJOLm1vbnQoa2V5Lm1vZHVsdXMpKVxuICAgIC5yZWRQb3cobmV3IEJOKGtleS5wdWJsaWNFeHBvbmVudCkpXG4gICAgLmZyb21SZWQoKVxuICAgIC50b0FycmF5KCkpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2l0aFB1YmxpY1xuIiwiLyohXG4gKiBmcmVzaFxuICogQ29weXJpZ2h0KGMpIDIwMTIgVEogSG9sb3dheWNodWtcbiAqIENvcHlyaWdodChjKSAyMDE2LTIwMTcgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIFJlZ0V4cCB0byBjaGVjayBmb3Igbm8tY2FjaGUgdG9rZW4gaW4gQ2FjaGUtQ29udHJvbC5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIENBQ0hFX0NPTlRST0xfTk9fQ0FDSEVfUkVHRVhQID0gLyg/Ol58LClcXHMqP25vLWNhY2hlXFxzKj8oPzosfCQpL1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnJlc2hcblxuLyoqXG4gKiBDaGVjayBmcmVzaG5lc3Mgb2YgdGhlIHJlc3BvbnNlIHVzaW5nIHJlcXVlc3QgYW5kIHJlc3BvbnNlIGhlYWRlcnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlcUhlYWRlcnNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZXNIZWFkZXJzXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZyZXNoIChyZXFIZWFkZXJzLCByZXNIZWFkZXJzKSB7XG4gIC8vIGZpZWxkc1xuICB2YXIgbW9kaWZpZWRTaW5jZSA9IHJlcUhlYWRlcnNbJ2lmLW1vZGlmaWVkLXNpbmNlJ11cbiAgdmFyIG5vbmVNYXRjaCA9IHJlcUhlYWRlcnNbJ2lmLW5vbmUtbWF0Y2gnXVxuXG4gIC8vIHVuY29uZGl0aW9uYWwgcmVxdWVzdFxuICBpZiAoIW1vZGlmaWVkU2luY2UgJiYgIW5vbmVNYXRjaCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gQWx3YXlzIHJldHVybiBzdGFsZSB3aGVuIENhY2hlLUNvbnRyb2w6IG5vLWNhY2hlXG4gIC8vIHRvIHN1cHBvcnQgZW5kLXRvLWVuZCByZWxvYWQgcmVxdWVzdHNcbiAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI2MTYjc2VjdGlvbi0xNC45LjRcbiAgdmFyIGNhY2hlQ29udHJvbCA9IHJlcUhlYWRlcnNbJ2NhY2hlLWNvbnRyb2wnXVxuICBpZiAoY2FjaGVDb250cm9sICYmIENBQ0hFX0NPTlRST0xfTk9fQ0FDSEVfUkVHRVhQLnRlc3QoY2FjaGVDb250cm9sKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gaWYtbm9uZS1tYXRjaFxuICBpZiAobm9uZU1hdGNoICYmIG5vbmVNYXRjaCAhPT0gJyonKSB7XG4gICAgdmFyIGV0YWcgPSByZXNIZWFkZXJzWydldGFnJ11cblxuICAgIGlmICghZXRhZykge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgdmFyIGV0YWdTdGFsZSA9IHRydWVcbiAgICB2YXIgbWF0Y2hlcyA9IHBhcnNlVG9rZW5MaXN0KG5vbmVNYXRjaClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdGNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBtYXRjaCA9IG1hdGNoZXNbaV1cbiAgICAgIGlmIChtYXRjaCA9PT0gZXRhZyB8fCBtYXRjaCA9PT0gJ1cvJyArIGV0YWcgfHwgJ1cvJyArIG1hdGNoID09PSBldGFnKSB7XG4gICAgICAgIGV0YWdTdGFsZSA9IGZhbHNlXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV0YWdTdGFsZSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLy8gaWYtbW9kaWZpZWQtc2luY2VcbiAgaWYgKG1vZGlmaWVkU2luY2UpIHtcbiAgICB2YXIgbGFzdE1vZGlmaWVkID0gcmVzSGVhZGVyc1snbGFzdC1tb2RpZmllZCddXG4gICAgdmFyIG1vZGlmaWVkU3RhbGUgPSAhbGFzdE1vZGlmaWVkIHx8ICEocGFyc2VIdHRwRGF0ZShsYXN0TW9kaWZpZWQpIDw9IHBhcnNlSHR0cERhdGUobW9kaWZpZWRTaW5jZSkpXG5cbiAgICBpZiAobW9kaWZpZWRTdGFsZSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWVcbn1cblxuLyoqXG4gKiBQYXJzZSBhbiBIVFRQIERhdGUgaW50byBhIG51bWJlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZGF0ZVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZUh0dHBEYXRlIChkYXRlKSB7XG4gIHZhciB0aW1lc3RhbXAgPSBkYXRlICYmIERhdGUucGFyc2UoZGF0ZSlcblxuICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogZ3VhcmQgYWdhaW5zdCBkYXRlLmpzIERhdGUucGFyc2UgcGF0Y2hpbmdcbiAgcmV0dXJuIHR5cGVvZiB0aW1lc3RhbXAgPT09ICdudW1iZXInXG4gICAgPyB0aW1lc3RhbXBcbiAgICA6IE5hTlxufVxuXG4vKipcbiAqIFBhcnNlIGEgSFRUUCB0b2tlbiBsaXN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VUb2tlbkxpc3QgKHN0cikge1xuICB2YXIgZW5kID0gMFxuICB2YXIgbGlzdCA9IFtdXG4gIHZhciBzdGFydCA9IDBcblxuICAvLyBnYXRoZXIgdG9rZW5zXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzdHIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBzd2l0Y2ggKHN0ci5jaGFyQ29kZUF0KGkpKSB7XG4gICAgICBjYXNlIDB4MjA6IC8qICAgKi9cbiAgICAgICAgaWYgKHN0YXJ0ID09PSBlbmQpIHtcbiAgICAgICAgICBzdGFydCA9IGVuZCA9IGkgKyAxXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgMHgyYzogLyogLCAqL1xuICAgICAgICBsaXN0LnB1c2goc3RyLnN1YnN0cmluZyhzdGFydCwgZW5kKSlcbiAgICAgICAgc3RhcnQgPSBlbmQgPSBpICsgMVxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZW5kID0gaSArIDFcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICAvLyBmaW5hbCB0b2tlblxuICBsaXN0LnB1c2goc3RyLnN1YnN0cmluZyhzdGFydCwgZW5kKSlcblxuICByZXR1cm4gbGlzdFxufVxuIiwiLyohXG4gKiByYW5nZS1wYXJzZXJcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgVEogSG9sb3dheWNodWtcbiAqIENvcHlyaWdodChjKSAyMDE1LTIwMTYgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcmFuZ2VQYXJzZXJcblxuLyoqXG4gKiBQYXJzZSBcIlJhbmdlXCIgaGVhZGVyIGBzdHJgIHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBmaWxlIGBzaXplYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gc2l6ZVxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybiB7QXJyYXl9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gcmFuZ2VQYXJzZXIgKHNpemUsIHN0ciwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzdHIgbXVzdCBiZSBhIHN0cmluZycpXG4gIH1cblxuICB2YXIgaW5kZXggPSBzdHIuaW5kZXhPZignPScpXG5cbiAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgIHJldHVybiAtMlxuICB9XG5cbiAgLy8gc3BsaXQgdGhlIHJhbmdlIHN0cmluZ1xuICB2YXIgYXJyID0gc3RyLnNsaWNlKGluZGV4ICsgMSkuc3BsaXQoJywnKVxuICB2YXIgcmFuZ2VzID0gW11cblxuICAvLyBhZGQgcmFuZ2VzIHR5cGVcbiAgcmFuZ2VzLnR5cGUgPSBzdHIuc2xpY2UoMCwgaW5kZXgpXG5cbiAgLy8gcGFyc2UgYWxsIHJhbmdlc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIHZhciByYW5nZSA9IGFycltpXS5zcGxpdCgnLScpXG4gICAgdmFyIHN0YXJ0ID0gcGFyc2VJbnQocmFuZ2VbMF0sIDEwKVxuICAgIHZhciBlbmQgPSBwYXJzZUludChyYW5nZVsxXSwgMTApXG5cbiAgICAvLyAtbm5uXG4gICAgaWYgKGlzTmFOKHN0YXJ0KSkge1xuICAgICAgc3RhcnQgPSBzaXplIC0gZW5kXG4gICAgICBlbmQgPSBzaXplIC0gMVxuICAgIC8vIG5ubi1cbiAgICB9IGVsc2UgaWYgKGlzTmFOKGVuZCkpIHtcbiAgICAgIGVuZCA9IHNpemUgLSAxXG4gICAgfVxuXG4gICAgLy8gbGltaXQgbGFzdC1ieXRlLXBvcyB0byBjdXJyZW50IGxlbmd0aFxuICAgIGlmIChlbmQgPiBzaXplIC0gMSkge1xuICAgICAgZW5kID0gc2l6ZSAtIDFcbiAgICB9XG5cbiAgICAvLyBpbnZhbGlkIG9yIHVuc2F0aXNpZmlhYmxlXG4gICAgaWYgKGlzTmFOKHN0YXJ0KSB8fCBpc05hTihlbmQpIHx8IHN0YXJ0ID4gZW5kIHx8IHN0YXJ0IDwgMCkge1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICAvLyBhZGQgcmFuZ2VcbiAgICByYW5nZXMucHVzaCh7XG4gICAgICBzdGFydDogc3RhcnQsXG4gICAgICBlbmQ6IGVuZFxuICAgIH0pXG4gIH1cblxuICBpZiAocmFuZ2VzLmxlbmd0aCA8IDEpIHtcbiAgICAvLyB1bnNhdGlzaWZpYWJsZVxuICAgIHJldHVybiAtMVxuICB9XG5cbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5jb21iaW5lXG4gICAgPyBjb21iaW5lUmFuZ2VzKHJhbmdlcylcbiAgICA6IHJhbmdlc1xufVxuXG4vKipcbiAqIENvbWJpbmUgb3ZlcmxhcHBpbmcgJiBhZGphY2VudCByYW5nZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbWJpbmVSYW5nZXMgKHJhbmdlcykge1xuICB2YXIgb3JkZXJlZCA9IHJhbmdlcy5tYXAobWFwV2l0aEluZGV4KS5zb3J0KHNvcnRCeVJhbmdlU3RhcnQpXG5cbiAgZm9yICh2YXIgaiA9IDAsIGkgPSAxOyBpIDwgb3JkZXJlZC5sZW5ndGg7IGkrKykge1xuICAgIHZhciByYW5nZSA9IG9yZGVyZWRbaV1cbiAgICB2YXIgY3VycmVudCA9IG9yZGVyZWRbal1cblxuICAgIGlmIChyYW5nZS5zdGFydCA+IGN1cnJlbnQuZW5kICsgMSkge1xuICAgICAgLy8gbmV4dCByYW5nZVxuICAgICAgb3JkZXJlZFsrK2pdID0gcmFuZ2VcbiAgICB9IGVsc2UgaWYgKHJhbmdlLmVuZCA+IGN1cnJlbnQuZW5kKSB7XG4gICAgICAvLyBleHRlbmQgcmFuZ2VcbiAgICAgIGN1cnJlbnQuZW5kID0gcmFuZ2UuZW5kXG4gICAgICBjdXJyZW50LmluZGV4ID0gTWF0aC5taW4oY3VycmVudC5pbmRleCwgcmFuZ2UuaW5kZXgpXG4gICAgfVxuICB9XG5cbiAgLy8gdHJpbSBvcmRlcmVkIGFycmF5XG4gIG9yZGVyZWQubGVuZ3RoID0gaiArIDFcblxuICAvLyBnZW5lcmF0ZSBjb21iaW5lZCByYW5nZVxuICB2YXIgY29tYmluZWQgPSBvcmRlcmVkLnNvcnQoc29ydEJ5UmFuZ2VJbmRleCkubWFwKG1hcFdpdGhvdXRJbmRleClcblxuICAvLyBjb3B5IHJhbmdlcyB0eXBlXG4gIGNvbWJpbmVkLnR5cGUgPSByYW5nZXMudHlwZVxuXG4gIHJldHVybiBjb21iaW5lZFxufVxuXG4vKipcbiAqIE1hcCBmdW5jdGlvbiB0byBhZGQgaW5kZXggdmFsdWUgdG8gcmFuZ2VzLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBtYXBXaXRoSW5kZXggKHJhbmdlLCBpbmRleCkge1xuICByZXR1cm4ge1xuICAgIHN0YXJ0OiByYW5nZS5zdGFydCxcbiAgICBlbmQ6IHJhbmdlLmVuZCxcbiAgICBpbmRleDogaW5kZXhcbiAgfVxufVxuXG4vKipcbiAqIE1hcCBmdW5jdGlvbiB0byByZW1vdmUgaW5kZXggdmFsdWUgZnJvbSByYW5nZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG1hcFdpdGhvdXRJbmRleCAocmFuZ2UpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGFydDogcmFuZ2Uuc3RhcnQsXG4gICAgZW5kOiByYW5nZS5lbmRcbiAgfVxufVxuXG4vKipcbiAqIFNvcnQgZnVuY3Rpb24gdG8gc29ydCByYW5nZXMgYnkgaW5kZXguXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNvcnRCeVJhbmdlSW5kZXggKGEsIGIpIHtcbiAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4XG59XG5cbi8qKlxuICogU29ydCBmdW5jdGlvbiB0byBzb3J0IHJhbmdlcyBieSBzdGFydCBwb3NpdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc29ydEJ5UmFuZ2VTdGFydCAoYSwgYikge1xuICByZXR1cm4gYS5zdGFydCAtIGIuc3RhcnRcbn1cbiIsIi8qIVxuICogcHJveHktYWRkclxuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNiBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBwcm94eWFkZHJcbm1vZHVsZS5leHBvcnRzLmFsbCA9IGFsbGFkZHJzXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBmb3J3YXJkZWQgPSByZXF1aXJlKCdmb3J3YXJkZWQnKVxudmFyIGlwYWRkciA9IHJlcXVpcmUoJ2lwYWRkci5qcycpXG5cbi8qKlxuICogVmFyaWFibGVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgRElHSVRfUkVHRVhQID0gL15bMC05XSskL1xudmFyIGlzaXAgPSBpcGFkZHIuaXNWYWxpZFxudmFyIHBhcnNlaXAgPSBpcGFkZHIucGFyc2VcblxuLyoqXG4gKiBQcmUtZGVmaW5lZCBJUCByYW5nZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBJUF9SQU5HRVMgPSB7XG4gIGxpbmtsb2NhbDogWycxNjkuMjU0LjAuMC8xNicsICdmZTgwOjovMTAnXSxcbiAgbG9vcGJhY2s6IFsnMTI3LjAuMC4xLzgnLCAnOjoxLzEyOCddLFxuICB1bmlxdWVsb2NhbDogWycxMC4wLjAuMC84JywgJzE3Mi4xNi4wLjAvMTInLCAnMTkyLjE2OC4wLjAvMTYnLCAnZmMwMDo6LzcnXVxufVxuXG4vKipcbiAqIEdldCBhbGwgYWRkcmVzc2VzIGluIHRoZSByZXF1ZXN0LCBvcHRpb25hbGx5IHN0b3BwaW5nXG4gKiBhdCB0aGUgZmlyc3QgdW50cnVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZXF1ZXN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5fFN0cmluZ30gW3RydXN0XVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGFsbGFkZHJzIChyZXEsIHRydXN0KSB7XG4gIC8vIGdldCBhZGRyZXNzZXNcbiAgdmFyIGFkZHJzID0gZm9yd2FyZGVkKHJlcSlcblxuICBpZiAoIXRydXN0KSB7XG4gICAgLy8gUmV0dXJuIGFsbCBhZGRyZXNzZXNcbiAgICByZXR1cm4gYWRkcnNcbiAgfVxuXG4gIGlmICh0eXBlb2YgdHJ1c3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0cnVzdCA9IGNvbXBpbGUodHJ1c3QpXG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFkZHJzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIGlmICh0cnVzdChhZGRyc1tpXSwgaSkpIGNvbnRpbnVlXG5cbiAgICBhZGRycy5sZW5ndGggPSBpICsgMVxuICB9XG5cbiAgcmV0dXJuIGFkZHJzXG59XG5cbi8qKlxuICogQ29tcGlsZSBhcmd1bWVudCBpbnRvIHRydXN0IGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSB2YWxcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29tcGlsZSAodmFsKSB7XG4gIGlmICghdmFsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgaXMgcmVxdWlyZWQnKVxuICB9XG5cbiAgdmFyIHRydXN0XG5cbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdHJ1c3QgPSBbdmFsXVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgIHRydXN0ID0gdmFsLnNsaWNlKClcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1bnN1cHBvcnRlZCB0cnVzdCBhcmd1bWVudCcpXG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRydXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFsID0gdHJ1c3RbaV1cblxuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKElQX1JBTkdFUywgdmFsKSkge1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICAvLyBTcGxpY2UgaW4gcHJlLWRlZmluZWQgcmFuZ2VcbiAgICB2YWwgPSBJUF9SQU5HRVNbdmFsXVxuICAgIHRydXN0LnNwbGljZS5hcHBseSh0cnVzdCwgW2ksIDFdLmNvbmNhdCh2YWwpKVxuICAgIGkgKz0gdmFsLmxlbmd0aCAtIDFcbiAgfVxuXG4gIHJldHVybiBjb21waWxlVHJ1c3QoY29tcGlsZVJhbmdlU3VibmV0cyh0cnVzdCkpXG59XG5cbi8qKlxuICogQ29tcGlsZSBgYXJyYCBlbGVtZW50cyBpbnRvIHJhbmdlIHN1Ym5ldHMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbXBpbGVSYW5nZVN1Ym5ldHMgKGFycikge1xuICB2YXIgcmFuZ2VTdWJuZXRzID0gbmV3IEFycmF5KGFyci5sZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICByYW5nZVN1Ym5ldHNbaV0gPSBwYXJzZWlwTm90YXRpb24oYXJyW2ldKVxuICB9XG5cbiAgcmV0dXJuIHJhbmdlU3VibmV0c1xufVxuXG4vKipcbiAqIENvbXBpbGUgcmFuZ2Ugc3VibmV0IGFycmF5IGludG8gdHJ1c3QgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcmFuZ2VTdWJuZXRzXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbXBpbGVUcnVzdCAocmFuZ2VTdWJuZXRzKSB7XG4gIC8vIFJldHVybiBvcHRpbWl6ZWQgZnVuY3Rpb24gYmFzZWQgb24gbGVuZ3RoXG4gIHZhciBsZW4gPSByYW5nZVN1Ym5ldHMubGVuZ3RoXG4gIHJldHVybiBsZW4gPT09IDBcbiAgICA/IHRydXN0Tm9uZVxuICAgIDogbGVuID09PSAxXG4gICAgICA/IHRydXN0U2luZ2xlKHJhbmdlU3VibmV0c1swXSlcbiAgICAgIDogdHJ1c3RNdWx0aShyYW5nZVN1Ym5ldHMpXG59XG5cbi8qKlxuICogUGFyc2UgSVAgbm90YXRpb24gc3RyaW5nIGludG8gcmFuZ2Ugc3VibmV0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBub3RlXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlaXBOb3RhdGlvbiAobm90ZSkge1xuICB2YXIgcG9zID0gbm90ZS5sYXN0SW5kZXhPZignLycpXG4gIHZhciBzdHIgPSBwb3MgIT09IC0xXG4gICAgPyBub3RlLnN1YnN0cmluZygwLCBwb3MpXG4gICAgOiBub3RlXG5cbiAgaWYgKCFpc2lwKHN0cikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIElQIGFkZHJlc3M6ICcgKyBzdHIpXG4gIH1cblxuICB2YXIgaXAgPSBwYXJzZWlwKHN0cilcblxuICBpZiAocG9zID09PSAtMSAmJiBpcC5raW5kKCkgPT09ICdpcHY2JyAmJiBpcC5pc0lQdjRNYXBwZWRBZGRyZXNzKCkpIHtcbiAgICAvLyBTdG9yZSBhcyBJUHY0XG4gICAgaXAgPSBpcC50b0lQdjRBZGRyZXNzKClcbiAgfVxuXG4gIHZhciBtYXggPSBpcC5raW5kKCkgPT09ICdpcHY2J1xuICAgID8gMTI4XG4gICAgOiAzMlxuXG4gIHZhciByYW5nZSA9IHBvcyAhPT0gLTFcbiAgICA/IG5vdGUuc3Vic3RyaW5nKHBvcyArIDEsIG5vdGUubGVuZ3RoKVxuICAgIDogbnVsbFxuXG4gIGlmIChyYW5nZSA9PT0gbnVsbCkge1xuICAgIHJhbmdlID0gbWF4XG4gIH0gZWxzZSBpZiAoRElHSVRfUkVHRVhQLnRlc3QocmFuZ2UpKSB7XG4gICAgcmFuZ2UgPSBwYXJzZUludChyYW5nZSwgMTApXG4gIH0gZWxzZSBpZiAoaXAua2luZCgpID09PSAnaXB2NCcgJiYgaXNpcChyYW5nZSkpIHtcbiAgICByYW5nZSA9IHBhcnNlTmV0bWFzayhyYW5nZSlcbiAgfSBlbHNlIHtcbiAgICByYW5nZSA9IG51bGxcbiAgfVxuXG4gIGlmIChyYW5nZSA8PSAwIHx8IHJhbmdlID4gbWF4KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCByYW5nZSBvbiBhZGRyZXNzOiAnICsgbm90ZSlcbiAgfVxuXG4gIHJldHVybiBbaXAsIHJhbmdlXVxufVxuXG4vKipcbiAqIFBhcnNlIG5ldG1hc2sgc3RyaW5nIGludG8gQ0lEUiByYW5nZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmV0bWFza1xuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZU5ldG1hc2sgKG5ldG1hc2spIHtcbiAgdmFyIGlwID0gcGFyc2VpcChuZXRtYXNrKVxuICB2YXIga2luZCA9IGlwLmtpbmQoKVxuXG4gIHJldHVybiBraW5kID09PSAnaXB2NCdcbiAgICA/IGlwLnByZWZpeExlbmd0aEZyb21TdWJuZXRNYXNrKClcbiAgICA6IG51bGxcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgYWRkcmVzcyBvZiBwcm94aWVkIHJlcXVlc3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlcXVlc3RcbiAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXl8U3RyaW5nfSB0cnVzdFxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHByb3h5YWRkciAocmVxLCB0cnVzdCkge1xuICBpZiAoIXJlcSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlcSBhcmd1bWVudCBpcyByZXF1aXJlZCcpXG4gIH1cblxuICBpZiAoIXRydXN0KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndHJ1c3QgYXJndW1lbnQgaXMgcmVxdWlyZWQnKVxuICB9XG5cbiAgdmFyIGFkZHJzID0gYWxsYWRkcnMocmVxLCB0cnVzdClcbiAgdmFyIGFkZHIgPSBhZGRyc1thZGRycy5sZW5ndGggLSAxXVxuXG4gIHJldHVybiBhZGRyXG59XG5cbi8qKlxuICogU3RhdGljIHRydXN0IGZ1bmN0aW9uIHRvIHRydXN0IG5vdGhpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiB0cnVzdE5vbmUgKCkge1xuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBDb21waWxlIHRydXN0IGZ1bmN0aW9uIGZvciBtdWx0aXBsZSBzdWJuZXRzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHN1Ym5ldHNcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gdHJ1c3RNdWx0aSAoc3VibmV0cykge1xuICByZXR1cm4gZnVuY3Rpb24gdHJ1c3QgKGFkZHIpIHtcbiAgICBpZiAoIWlzaXAoYWRkcikpIHJldHVybiBmYWxzZVxuXG4gICAgdmFyIGlwID0gcGFyc2VpcChhZGRyKVxuICAgIHZhciBpcGNvbnZcbiAgICB2YXIga2luZCA9IGlwLmtpbmQoKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJuZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc3VibmV0ID0gc3VibmV0c1tpXVxuICAgICAgdmFyIHN1Ym5ldGlwID0gc3VibmV0WzBdXG4gICAgICB2YXIgc3VibmV0a2luZCA9IHN1Ym5ldGlwLmtpbmQoKVxuICAgICAgdmFyIHN1Ym5ldHJhbmdlID0gc3VibmV0WzFdXG4gICAgICB2YXIgdHJ1c3RlZCA9IGlwXG5cbiAgICAgIGlmIChraW5kICE9PSBzdWJuZXRraW5kKSB7XG4gICAgICAgIGlmIChzdWJuZXRraW5kID09PSAnaXB2NCcgJiYgIWlwLmlzSVB2NE1hcHBlZEFkZHJlc3MoKSkge1xuICAgICAgICAgIC8vIEluY29tcGF0aWJsZSBJUCBhZGRyZXNzZXNcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpcGNvbnYpIHtcbiAgICAgICAgICAvLyBDb252ZXJ0IElQIHRvIG1hdGNoIHN1Ym5ldCBJUCBraW5kXG4gICAgICAgICAgaXBjb252ID0gc3VibmV0a2luZCA9PT0gJ2lwdjQnXG4gICAgICAgICAgICA/IGlwLnRvSVB2NEFkZHJlc3MoKVxuICAgICAgICAgICAgOiBpcC50b0lQdjRNYXBwZWRBZGRyZXNzKClcbiAgICAgICAgfVxuXG4gICAgICAgIHRydXN0ZWQgPSBpcGNvbnZcbiAgICAgIH1cblxuICAgICAgaWYgKHRydXN0ZWQubWF0Y2goc3VibmV0aXAsIHN1Ym5ldHJhbmdlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qKlxuICogQ29tcGlsZSB0cnVzdCBmdW5jdGlvbiBmb3Igc2luZ2xlIHN1Ym5ldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3VibmV0XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHRydXN0U2luZ2xlIChzdWJuZXQpIHtcbiAgdmFyIHN1Ym5ldGlwID0gc3VibmV0WzBdXG4gIHZhciBzdWJuZXRraW5kID0gc3VibmV0aXAua2luZCgpXG4gIHZhciBzdWJuZXRpc2lwdjQgPSBzdWJuZXRraW5kID09PSAnaXB2NCdcbiAgdmFyIHN1Ym5ldHJhbmdlID0gc3VibmV0WzFdXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHRydXN0IChhZGRyKSB7XG4gICAgaWYgKCFpc2lwKGFkZHIpKSByZXR1cm4gZmFsc2VcblxuICAgIHZhciBpcCA9IHBhcnNlaXAoYWRkcilcbiAgICB2YXIga2luZCA9IGlwLmtpbmQoKVxuXG4gICAgaWYgKGtpbmQgIT09IHN1Ym5ldGtpbmQpIHtcbiAgICAgIGlmIChzdWJuZXRpc2lwdjQgJiYgIWlwLmlzSVB2NE1hcHBlZEFkZHJlc3MoKSkge1xuICAgICAgICAvLyBJbmNvbXBhdGlibGUgSVAgYWRkcmVzc2VzXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuXG4gICAgICAvLyBDb252ZXJ0IElQIHRvIG1hdGNoIHN1Ym5ldCBJUCBraW5kXG4gICAgICBpcCA9IHN1Ym5ldGlzaXB2NFxuICAgICAgICA/IGlwLnRvSVB2NEFkZHJlc3MoKVxuICAgICAgICA6IGlwLnRvSVB2NE1hcHBlZEFkZHJlc3MoKVxuICAgIH1cblxuICAgIHJldHVybiBpcC5tYXRjaChzdWJuZXRpcCwgc3VibmV0cmFuZ2UpXG4gIH1cbn1cbiIsImltcG9ydCBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XHJcblxyXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XHJcblxyXG5hcHAuZ2V0KFwiL1wiLCAocmVxLCByZXMpID0+IHtcclxuICAgIHJlcy5zZW5kKFwid2VsY29tZVwiKTtcclxufSk7XHJcblxyXG5hcHAubGlzdGVuKDgwKTsiLCIvKiFcbiAqIGV4cHJlc3NcbiAqIENvcHlyaWdodChjKSAyMDA5LTIwMTMgVEogSG9sb3dheWNodWtcbiAqIENvcHlyaWdodChjKSAyMDEzIFJvbWFuIFNodHlsbWFuXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvZXhwcmVzcycpO1xuIiwiLyohXG4gKiBleHByZXNzXG4gKiBDb3B5cmlnaHQoYykgMjAwOS0yMDEzIFRKIEhvbG93YXljaHVrXG4gKiBDb3B5cmlnaHQoYykgMjAxMyBSb21hbiBTaHR5bG1hblxuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGJvZHlQYXJzZXIgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xudmFyIG1peGluID0gcmVxdWlyZSgnbWVyZ2UtZGVzY3JpcHRvcnMnKTtcbnZhciBwcm90byA9IHJlcXVpcmUoJy4vYXBwbGljYXRpb24nKTtcbnZhciBSb3V0ZSA9IHJlcXVpcmUoJy4vcm91dGVyL3JvdXRlJyk7XG52YXIgUm91dGVyID0gcmVxdWlyZSgnLi9yb3V0ZXInKTtcbnZhciByZXEgPSByZXF1aXJlKCcuL3JlcXVlc3QnKTtcbnZhciByZXMgPSByZXF1aXJlKCcuL3Jlc3BvbnNlJyk7XG5cbi8qKlxuICogRXhwb3NlIGBjcmVhdGVBcHBsaWNhdGlvbigpYC5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVBcHBsaWNhdGlvbjtcblxuLyoqXG4gKiBDcmVhdGUgYW4gZXhwcmVzcyBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlQXBwbGljYXRpb24oKSB7XG4gIHZhciBhcHAgPSBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICAgIGFwcC5oYW5kbGUocmVxLCByZXMsIG5leHQpO1xuICB9O1xuXG4gIG1peGluKGFwcCwgRXZlbnRFbWl0dGVyLnByb3RvdHlwZSwgZmFsc2UpO1xuICBtaXhpbihhcHAsIHByb3RvLCBmYWxzZSk7XG5cbiAgLy8gZXhwb3NlIHRoZSBwcm90b3R5cGUgdGhhdCB3aWxsIGdldCBzZXQgb24gcmVxdWVzdHNcbiAgYXBwLnJlcXVlc3QgPSBPYmplY3QuY3JlYXRlKHJlcSwge1xuICAgIGFwcDogeyBjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogYXBwIH1cbiAgfSlcblxuICAvLyBleHBvc2UgdGhlIHByb3RvdHlwZSB0aGF0IHdpbGwgZ2V0IHNldCBvbiByZXNwb25zZXNcbiAgYXBwLnJlc3BvbnNlID0gT2JqZWN0LmNyZWF0ZShyZXMsIHtcbiAgICBhcHA6IHsgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWU6IGFwcCB9XG4gIH0pXG5cbiAgYXBwLmluaXQoKTtcbiAgcmV0dXJuIGFwcDtcbn1cblxuLyoqXG4gKiBFeHBvc2UgdGhlIHByb3RvdHlwZXMuXG4gKi9cblxuZXhwb3J0cy5hcHBsaWNhdGlvbiA9IHByb3RvO1xuZXhwb3J0cy5yZXF1ZXN0ID0gcmVxO1xuZXhwb3J0cy5yZXNwb25zZSA9IHJlcztcblxuLyoqXG4gKiBFeHBvc2UgY29uc3RydWN0b3JzLlxuICovXG5cbmV4cG9ydHMuUm91dGUgPSBSb3V0ZTtcbmV4cG9ydHMuUm91dGVyID0gUm91dGVyO1xuXG4vKipcbiAqIEV4cG9zZSBtaWRkbGV3YXJlXG4gKi9cblxuZXhwb3J0cy5qc29uID0gYm9keVBhcnNlci5qc29uXG5leHBvcnRzLnF1ZXJ5ID0gcmVxdWlyZSgnLi9taWRkbGV3YXJlL3F1ZXJ5Jyk7XG5leHBvcnRzLnJhdyA9IGJvZHlQYXJzZXIucmF3XG5leHBvcnRzLnN0YXRpYyA9IHJlcXVpcmUoJ3NlcnZlLXN0YXRpYycpO1xuZXhwb3J0cy50ZXh0ID0gYm9keVBhcnNlci50ZXh0XG5leHBvcnRzLnVybGVuY29kZWQgPSBib2R5UGFyc2VyLnVybGVuY29kZWRcblxuLyoqXG4gKiBSZXBsYWNlIHJlbW92ZWQgbWlkZGxld2FyZSB3aXRoIGFuIGFwcHJvcHJpYXRlIGVycm9yIG1lc3NhZ2UuXG4gKi9cblxudmFyIHJlbW92ZWRNaWRkbGV3YXJlcyA9IFtcbiAgJ2JvZHlQYXJzZXInLFxuICAnY29tcHJlc3MnLFxuICAnY29va2llU2Vzc2lvbicsXG4gICdzZXNzaW9uJyxcbiAgJ2xvZ2dlcicsXG4gICdjb29raWVQYXJzZXInLFxuICAnZmF2aWNvbicsXG4gICdyZXNwb25zZVRpbWUnLFxuICAnZXJyb3JIYW5kbGVyJyxcbiAgJ3RpbWVvdXQnLFxuICAnbWV0aG9kT3ZlcnJpZGUnLFxuICAndmhvc3QnLFxuICAnY3NyZicsXG4gICdkaXJlY3RvcnknLFxuICAnbGltaXQnLFxuICAnbXVsdGlwYXJ0JyxcbiAgJ3N0YXRpY0NhY2hlJ1xuXVxuXG5yZW1vdmVkTWlkZGxld2FyZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNb3N0IG1pZGRsZXdhcmUgKGxpa2UgJyArIG5hbWUgKyAnKSBpcyBubyBsb25nZXIgYnVuZGxlZCB3aXRoIEV4cHJlc3MgYW5kIG11c3QgYmUgaW5zdGFsbGVkIHNlcGFyYXRlbHkuIFBsZWFzZSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3NlbmNoYWxhYnMvY29ubmVjdCNtaWRkbGV3YXJlLicpO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufSk7XG4iLCIvKiFcbiAqIGJvZHktcGFyc2VyXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgZGVwcmVjYXRlID0gcmVxdWlyZSgnZGVwZCcpKCdib2R5LXBhcnNlcicpXG5cbi8qKlxuICogQ2FjaGUgb2YgbG9hZGVkIHBhcnNlcnMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBwYXJzZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG4vKipcbiAqIEB0eXBlZGVmIFBhcnNlcnNcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IGpzb25cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IHJhd1xuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gdGV4dFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gdXJsZW5jb2RlZFxuICovXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAdHlwZSB7UGFyc2Vyc31cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBkZXByZWNhdGUuZnVuY3Rpb24oYm9keVBhcnNlcixcbiAgJ2JvZHlQYXJzZXI6IHVzZSBpbmRpdmlkdWFsIGpzb24vdXJsZW5jb2RlZCBtaWRkbGV3YXJlcycpXG5cbi8qKlxuICogSlNPTiBwYXJzZXIuXG4gKiBAcHVibGljXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdqc29uJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogY3JlYXRlUGFyc2VyR2V0dGVyKCdqc29uJylcbn0pXG5cbi8qKlxuICogUmF3IHBhcnNlci5cbiAqIEBwdWJsaWNcbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3JhdycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGNyZWF0ZVBhcnNlckdldHRlcigncmF3Jylcbn0pXG5cbi8qKlxuICogVGV4dCBwYXJzZXIuXG4gKiBAcHVibGljXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICd0ZXh0Jywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogY3JlYXRlUGFyc2VyR2V0dGVyKCd0ZXh0Jylcbn0pXG5cbi8qKlxuICogVVJMLWVuY29kZWQgcGFyc2VyLlxuICogQHB1YmxpY1xuICovXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAndXJsZW5jb2RlZCcsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGNyZWF0ZVBhcnNlckdldHRlcigndXJsZW5jb2RlZCcpXG59KVxuXG4vKipcbiAqIENyZWF0ZSBhIG1pZGRsZXdhcmUgdG8gcGFyc2UganNvbiBhbmQgdXJsZW5jb2RlZCBib2RpZXMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKiBAZGVwcmVjYXRlZFxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGJvZHlQYXJzZXIgKG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB7fVxuXG4gIC8vIGV4Y2x1ZGUgdHlwZSBvcHRpb25cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIG9wdGlvbnMpIHtcbiAgICAgIGlmIChwcm9wICE9PSAndHlwZScpIHtcbiAgICAgICAgb3B0c1twcm9wXSA9IG9wdGlvbnNbcHJvcF1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgX3VybGVuY29kZWQgPSBleHBvcnRzLnVybGVuY29kZWQob3B0cylcbiAgdmFyIF9qc29uID0gZXhwb3J0cy5qc29uKG9wdHMpXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGJvZHlQYXJzZXIgKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgX2pzb24ocmVxLCByZXMsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChlcnIpIHJldHVybiBuZXh0KGVycilcbiAgICAgIF91cmxlbmNvZGVkKHJlcSwgcmVzLCBuZXh0KVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBnZXR0ZXIgZm9yIGxvYWRpbmcgYSBwYXJzZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVBhcnNlckdldHRlciAobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICByZXR1cm4gbG9hZFBhcnNlcihuYW1lKVxuICB9XG59XG5cbi8qKlxuICogTG9hZCBhIHBhcnNlciBtb2R1bGUuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWRQYXJzZXIgKHBhcnNlck5hbWUpIHtcbiAgdmFyIHBhcnNlciA9IHBhcnNlcnNbcGFyc2VyTmFtZV1cblxuICBpZiAocGFyc2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcGFyc2VyXG4gIH1cblxuICAvLyB0aGlzIHVzZXMgYSBzd2l0Y2ggZm9yIHN0YXRpYyByZXF1aXJlIGFuYWx5c2lzXG4gIHN3aXRjaCAocGFyc2VyTmFtZSkge1xuICAgIGNhc2UgJ2pzb24nOlxuICAgICAgcGFyc2VyID0gcmVxdWlyZSgnLi9saWIvdHlwZXMvanNvbicpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3Jhdyc6XG4gICAgICBwYXJzZXIgPSByZXF1aXJlKCcuL2xpYi90eXBlcy9yYXcnKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd0ZXh0JzpcbiAgICAgIHBhcnNlciA9IHJlcXVpcmUoJy4vbGliL3R5cGVzL3RleHQnKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1cmxlbmNvZGVkJzpcbiAgICAgIHBhcnNlciA9IHJlcXVpcmUoJy4vbGliL3R5cGVzL3VybGVuY29kZWQnKVxuICAgICAgYnJlYWtcbiAgfVxuXG4gIC8vIHN0b3JlIHRvIHByZXZlbnQgaW52b2tpbmcgcmVxdWlyZSgpXG4gIHJldHVybiAocGFyc2Vyc1twYXJzZXJOYW1lXSA9IHBhcnNlcilcbn1cbiIsIi8qIVxuICogYm9keS1wYXJzZXJcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGJ5dGVzID0gcmVxdWlyZSgnYnl0ZXMnKVxudmFyIGNvbnRlbnRUeXBlID0gcmVxdWlyZSgnY29udGVudC10eXBlJylcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJ2h0dHAtZXJyb3JzJylcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2JvZHktcGFyc2VyOmpzb24nKVxudmFyIHJlYWQgPSByZXF1aXJlKCcuLi9yZWFkJylcbnZhciB0eXBlaXMgPSByZXF1aXJlKCd0eXBlLWlzJylcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpzb25cblxuLyoqXG4gKiBSZWdFeHAgdG8gbWF0Y2ggdGhlIGZpcnN0IG5vbi1zcGFjZSBpbiBhIHN0cmluZy5cbiAqXG4gKiBBbGxvd2VkIHdoaXRlc3BhY2UgaXMgZGVmaW5lZCBpbiBSRkMgNzE1OTpcbiAqXG4gKiAgICB3cyA9ICooXG4gKiAgICAgICAgICAgICV4MjAgLyAgICAgICAgICAgICAgOyBTcGFjZVxuICogICAgICAgICAgICAleDA5IC8gICAgICAgICAgICAgIDsgSG9yaXpvbnRhbCB0YWJcbiAqICAgICAgICAgICAgJXgwQSAvICAgICAgICAgICAgICA7IExpbmUgZmVlZCBvciBOZXcgbGluZVxuICogICAgICAgICAgICAleDBEICkgICAgICAgICAgICAgIDsgQ2FycmlhZ2UgcmV0dXJuXG4gKi9cblxudmFyIEZJUlNUX0NIQVJfUkVHRVhQID0gL15bXFx4MjBcXHgwOVxceDBhXFx4MGRdKiguKS8gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb250cm9sLXJlZ2V4XG5cbi8qKlxuICogQ3JlYXRlIGEgbWlkZGxld2FyZSB0byBwYXJzZSBKU09OIGJvZGllcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBqc29uIChvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBsaW1pdCA9IHR5cGVvZiBvcHRzLmxpbWl0ICE9PSAnbnVtYmVyJ1xuICAgID8gYnl0ZXMucGFyc2Uob3B0cy5saW1pdCB8fCAnMTAwa2InKVxuICAgIDogb3B0cy5saW1pdFxuICB2YXIgaW5mbGF0ZSA9IG9wdHMuaW5mbGF0ZSAhPT0gZmFsc2VcbiAgdmFyIHJldml2ZXIgPSBvcHRzLnJldml2ZXJcbiAgdmFyIHN0cmljdCA9IG9wdHMuc3RyaWN0ICE9PSBmYWxzZVxuICB2YXIgdHlwZSA9IG9wdHMudHlwZSB8fCAnYXBwbGljYXRpb24vanNvbidcbiAgdmFyIHZlcmlmeSA9IG9wdHMudmVyaWZ5IHx8IGZhbHNlXG5cbiAgaWYgKHZlcmlmeSAhPT0gZmFsc2UgJiYgdHlwZW9mIHZlcmlmeSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiB2ZXJpZnkgbXVzdCBiZSBmdW5jdGlvbicpXG4gIH1cblxuICAvLyBjcmVhdGUgdGhlIGFwcHJvcHJpYXRlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25cbiAgdmFyIHNob3VsZFBhcnNlID0gdHlwZW9mIHR5cGUgIT09ICdmdW5jdGlvbidcbiAgICA/IHR5cGVDaGVja2VyKHR5cGUpXG4gICAgOiB0eXBlXG5cbiAgZnVuY3Rpb24gcGFyc2UgKGJvZHkpIHtcbiAgICBpZiAoYm9keS5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIHNwZWNpYWwtY2FzZSBlbXB0eSBqc29uIGJvZHksIGFzIGl0J3MgYSBjb21tb24gY2xpZW50LXNpZGUgbWlzdGFrZVxuICAgICAgLy8gVE9ETzogbWF5YmUgbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZSBvciBwYXJ0IG9mIFwic3RyaWN0XCIgb3B0aW9uXG4gICAgICByZXR1cm4ge31cbiAgICB9XG5cbiAgICBpZiAoc3RyaWN0KSB7XG4gICAgICB2YXIgZmlyc3QgPSBmaXJzdGNoYXIoYm9keSlcblxuICAgICAgaWYgKGZpcnN0ICE9PSAneycgJiYgZmlyc3QgIT09ICdbJykge1xuICAgICAgICBkZWJ1Zygnc3RyaWN0IHZpb2xhdGlvbicpXG4gICAgICAgIHRocm93IGNyZWF0ZVN0cmljdFN5bnRheEVycm9yKGJvZHksIGZpcnN0KVxuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBkZWJ1ZygncGFyc2UganNvbicpXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShib2R5LCByZXZpdmVyKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5vcm1hbGl6ZUpzb25TeW50YXhFcnJvcihlLCB7XG4gICAgICAgIG1lc3NhZ2U6IGUubWVzc2FnZSxcbiAgICAgICAgc3RhY2s6IGUuc3RhY2tcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGpzb25QYXJzZXIgKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgaWYgKHJlcS5fYm9keSkge1xuICAgICAgZGVidWcoJ2JvZHkgYWxyZWFkeSBwYXJzZWQnKVxuICAgICAgbmV4dCgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICByZXEuYm9keSA9IHJlcS5ib2R5IHx8IHt9XG5cbiAgICAvLyBza2lwIHJlcXVlc3RzIHdpdGhvdXQgYm9kaWVzXG4gICAgaWYgKCF0eXBlaXMuaGFzQm9keShyZXEpKSB7XG4gICAgICBkZWJ1Zygnc2tpcCBlbXB0eSBib2R5JylcbiAgICAgIG5leHQoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZGVidWcoJ2NvbnRlbnQtdHlwZSAlaicsIHJlcS5oZWFkZXJzWydjb250ZW50LXR5cGUnXSlcblxuICAgIC8vIGRldGVybWluZSBpZiByZXF1ZXN0IHNob3VsZCBiZSBwYXJzZWRcbiAgICBpZiAoIXNob3VsZFBhcnNlKHJlcSkpIHtcbiAgICAgIGRlYnVnKCdza2lwIHBhcnNpbmcnKVxuICAgICAgbmV4dCgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBhc3NlcnQgY2hhcnNldCBwZXIgUkZDIDcxNTkgc2VjIDguMVxuICAgIHZhciBjaGFyc2V0ID0gZ2V0Q2hhcnNldChyZXEpIHx8ICd1dGYtOCdcbiAgICBpZiAoY2hhcnNldC5zdWJzdHIoMCwgNCkgIT09ICd1dGYtJykge1xuICAgICAgZGVidWcoJ2ludmFsaWQgY2hhcnNldCcpXG4gICAgICBuZXh0KGNyZWF0ZUVycm9yKDQxNSwgJ3Vuc3VwcG9ydGVkIGNoYXJzZXQgXCInICsgY2hhcnNldC50b1VwcGVyQ2FzZSgpICsgJ1wiJywge1xuICAgICAgICBjaGFyc2V0OiBjaGFyc2V0LFxuICAgICAgICB0eXBlOiAnY2hhcnNldC51bnN1cHBvcnRlZCdcbiAgICAgIH0pKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcmVhZFxuICAgIHJlYWQocmVxLCByZXMsIG5leHQsIHBhcnNlLCBkZWJ1Zywge1xuICAgICAgZW5jb2Rpbmc6IGNoYXJzZXQsXG4gICAgICBpbmZsYXRlOiBpbmZsYXRlLFxuICAgICAgbGltaXQ6IGxpbWl0LFxuICAgICAgdmVyaWZ5OiB2ZXJpZnlcbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIHN0cmljdCB2aW9sYXRpb24gc3ludGF4IGVycm9yIG1hdGNoaW5nIG5hdGl2ZSBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge3N0cmluZ30gY2hhclxuICogQHJldHVybiB7RXJyb3J9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0cmljdFN5bnRheEVycm9yIChzdHIsIGNoYXIpIHtcbiAgdmFyIGluZGV4ID0gc3RyLmluZGV4T2YoY2hhcilcbiAgdmFyIHBhcnRpYWwgPSBzdHIuc3Vic3RyaW5nKDAsIGluZGV4KSArICcjJ1xuXG4gIHRyeSB7XG4gICAgSlNPTi5wYXJzZShwYXJ0aWFsKTsgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gdGhyb3cgbmV3IFN5bnRheEVycm9yKCdzdHJpY3QgdmlvbGF0aW9uJylcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBub3JtYWxpemVKc29uU3ludGF4RXJyb3IoZSwge1xuICAgICAgbWVzc2FnZTogZS5tZXNzYWdlLnJlcGxhY2UoJyMnLCBjaGFyKSxcbiAgICAgIHN0YWNrOiBlLnN0YWNrXG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmlyc3Qgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyIGluIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmaXJzdGNoYXIgKHN0cikge1xuICByZXR1cm4gRklSU1RfQ0hBUl9SRUdFWFAuZXhlYyhzdHIpWzFdXG59XG5cbi8qKlxuICogR2V0IHRoZSBjaGFyc2V0IG9mIGEgcmVxdWVzdC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcmVxXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRDaGFyc2V0IChyZXEpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gKGNvbnRlbnRUeXBlLnBhcnNlKHJlcSkucGFyYW1ldGVycy5jaGFyc2V0IHx8ICcnKS50b0xvd2VyQ2FzZSgpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSBTeW50YXhFcnJvciBmb3IgSlNPTi5wYXJzZS5cbiAqXG4gKiBAcGFyYW0ge1N5bnRheEVycm9yfSBlcnJvclxuICogQHBhcmFtIHtvYmplY3R9IG9ialxuICogQHJldHVybiB7U3ludGF4RXJyb3J9XG4gKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplSnNvblN5bnRheEVycm9yIChlcnJvciwgb2JqKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZXJyb3IpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV1cbiAgICBpZiAoa2V5ICE9PSAnc3RhY2snICYmIGtleSAhPT0gJ21lc3NhZ2UnKSB7XG4gICAgICBkZWxldGUgZXJyb3Jba2V5XVxuICAgIH1cbiAgfVxuXG4gIC8vIHJlcGxhY2Ugc3RhY2sgYmVmb3JlIG1lc3NhZ2UgZm9yIE5vZGUuanMgMC4xMCBhbmQgYmVsb3dcbiAgZXJyb3Iuc3RhY2sgPSBvYmouc3RhY2sucmVwbGFjZShlcnJvci5tZXNzYWdlLCBvYmoubWVzc2FnZSlcbiAgZXJyb3IubWVzc2FnZSA9IG9iai5tZXNzYWdlXG5cbiAgcmV0dXJuIGVycm9yXG59XG5cbi8qKlxuICogR2V0IHRoZSBzaW1wbGUgdHlwZSBjaGVja2VyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuXG5mdW5jdGlvbiB0eXBlQ2hlY2tlciAodHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24gY2hlY2tUeXBlIChyZXEpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0eXBlaXMocmVxLCB0eXBlKSlcbiAgfVxufVxuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Z1snZGVmYXVsdCddID0gY3JlYXRlRGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMgPSB7fTtcblxuLyoqXG4gKiBQcmV2aW91cyBsb2cgdGltZXN0YW1wLlxuICovXG5cbnZhciBwcmV2VGltZTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICB2YXIgaGFzaCA9IDAsIGk7XG5cbiAgZm9yIChpIGluIG5hbWVzcGFjZSkge1xuICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW01hdGguYWJzKGhhc2gpICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cbiAgZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgLy8gZGlzYWJsZWQ/XG4gICAgaWYgKCFkZWJ1Zy5lbmFibGVkKSByZXR1cm47XG5cbiAgICB2YXIgc2VsZiA9IGRlYnVnO1xuXG4gICAgLy8gc2V0IGBkaWZmYCB0aW1lc3RhbXBcbiAgICB2YXIgY3VyciA9ICtuZXcgRGF0ZSgpO1xuICAgIHZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG4gICAgc2VsZi5kaWZmID0gbXM7XG4gICAgc2VsZi5wcmV2ID0gcHJldlRpbWU7XG4gICAgc2VsZi5jdXJyID0gY3VycjtcbiAgICBwcmV2VGltZSA9IGN1cnI7XG5cbiAgICAvLyB0dXJuIHRoZSBgYXJndW1lbnRzYCBpbnRvIGEgcHJvcGVyIEFycmF5XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGFyZ3NbMF0gPSBleHBvcnRzLmNvZXJjZShhcmdzWzBdKTtcblxuICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGFyZ3NbMF0pIHtcbiAgICAgIC8vIGFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG4gICAgICBhcmdzLnVuc2hpZnQoJyVPJyk7XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCBmdW5jdGlvbihtYXRjaCwgZm9ybWF0KSB7XG4gICAgICAvLyBpZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG4gICAgICBpZiAobWF0Y2ggPT09ICclJScpIHJldHVybiBtYXRjaDtcbiAgICAgIGluZGV4Kys7XG4gICAgICB2YXIgZm9ybWF0dGVyID0gZXhwb3J0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG4gICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGZvcm1hdHRlcikge1xuICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07XG4gICAgICAgIG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuICAgICAgICAvLyBub3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG4gICAgICAgIGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIC8vIGFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG4gICAgZXhwb3J0cy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cbiAgICB2YXIgbG9nRm4gPSBkZWJ1Zy5sb2cgfHwgZXhwb3J0cy5sb2cgfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxuXG4gIGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgZGVidWcuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChuYW1lc3BhY2UpO1xuICBkZWJ1Zy51c2VDb2xvcnMgPSBleHBvcnRzLnVzZUNvbG9ycygpO1xuICBkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cbiAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmluaXQpIHtcbiAgICBleHBvcnRzLmluaXQoZGVidWcpO1xuICB9XG5cbiAgcmV0dXJuIGRlYnVnO1xufVxuXG4vKipcbiAqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcbiAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcbiAgZXhwb3J0cy5zYXZlKG5hbWVzcGFjZXMpO1xuXG4gIGV4cG9ydHMubmFtZXMgPSBbXTtcbiAgZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4gIHZhciBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlOyAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuICAgIG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcbiAgICAgIGV4cG9ydHMuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gIGV4cG9ydHMuZW5hYmxlKCcnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuICB2YXIgaSwgbGVuO1xuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDb2VyY2UgYHZhbGAuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICByZXR1cm4gdmFsO1xufVxuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKCg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgaWYgKG1zID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtcyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHJldHVybiBwbHVyYWwobXMsIGQsICdkYXknKSB8fFxuICAgIHBsdXJhbChtcywgaCwgJ2hvdXInKSB8fFxuICAgIHBsdXJhbChtcywgbSwgJ21pbnV0ZScpIHx8XG4gICAgcGx1cmFsKG1zLCBzLCAnc2Vjb25kJykgfHxcbiAgICBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xuICBpZiAobXMgPCBuKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtcyA8IG4gKiAxLjUpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihtcyAvIG4pICsgJyAnICsgbmFtZTtcbiAgfVxuICByZXR1cm4gTWF0aC5jZWlsKG1zIC8gbikgKyAnICcgKyBuYW1lICsgJ3MnO1xufVxuIiwiLyohXG4gKiByYXctYm9keVxuICogQ29weXJpZ2h0KGMpIDIwMTMtMjAxNCBKb25hdGhhbiBPbmdcbiAqIENvcHlyaWdodChjKSAyMDE0LTIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBieXRlcyA9IHJlcXVpcmUoJ2J5dGVzJylcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJ2h0dHAtZXJyb3JzJylcbnZhciBpY29udiA9IHJlcXVpcmUoJ2ljb252LWxpdGUnKVxudmFyIHVucGlwZSA9IHJlcXVpcmUoJ3VucGlwZScpXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdCb2R5XG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIElDT05WX0VOQ09ESU5HX01FU1NBR0VfUkVHRVhQID0gL15FbmNvZGluZyBub3QgcmVjb2duaXplZDogL1xuXG4vKipcbiAqIEdldCB0aGUgZGVjb2RlciBmb3IgYSBnaXZlbiBlbmNvZGluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZW5jb2RpbmdcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ2V0RGVjb2RlciAoZW5jb2RpbmcpIHtcbiAgaWYgKCFlbmNvZGluZykgcmV0dXJuIG51bGxcblxuICB0cnkge1xuICAgIHJldHVybiBpY29udi5nZXREZWNvZGVyKGVuY29kaW5nKVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gZXJyb3IgZ2V0dGluZyBkZWNvZGVyXG4gICAgaWYgKCFJQ09OVl9FTkNPRElOR19NRVNTQUdFX1JFR0VYUC50ZXN0KGUubWVzc2FnZSkpIHRocm93IGVcblxuICAgIC8vIHRoZSBlbmNvZGluZyB3YXMgbm90IGZvdW5kXG4gICAgdGhyb3cgY3JlYXRlRXJyb3IoNDE1LCAnc3BlY2lmaWVkIGVuY29kaW5nIHVuc3VwcG9ydGVkJywge1xuICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLFxuICAgICAgdHlwZTogJ2VuY29kaW5nLnVuc3VwcG9ydGVkJ1xuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIHJhdyBib2R5IG9mIGEgc3RyZWFtICh0eXBpY2FsbHkgSFRUUCkuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHN0cmVhbVxuICogQHBhcmFtIHtvYmplY3R8c3RyaW5nfGZ1bmN0aW9ufSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja11cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBnZXRSYXdCb2R5IChzdHJlYW0sIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBkb25lID0gY2FsbGJhY2tcbiAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKG9wdGlvbnMgPT09IHRydWUgfHwgdHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gc2hvcnQgY3V0IGZvciBlbmNvZGluZ1xuICAgIG9wdHMgPSB7XG4gICAgICBlbmNvZGluZzogb3B0aW9uc1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGRvbmUgPSBvcHRpb25zXG4gICAgb3B0cyA9IHt9XG4gIH1cblxuICAvLyB2YWxpZGF0ZSBjYWxsYmFjayBpcyBhIGZ1bmN0aW9uLCBpZiBwcm92aWRlZFxuICBpZiAoZG9uZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBkb25lICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJylcbiAgfVxuXG4gIC8vIHJlcXVpcmUgdGhlIGNhbGxiYWNrIHdpdGhvdXQgcHJvbWlzZXNcbiAgaWYgKCFkb25lICYmICFnbG9iYWwuUHJvbWlzZSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IGNhbGxiYWNrIGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIC8vIGdldCBlbmNvZGluZ1xuICB2YXIgZW5jb2RpbmcgPSBvcHRzLmVuY29kaW5nICE9PSB0cnVlXG4gICAgPyBvcHRzLmVuY29kaW5nXG4gICAgOiAndXRmLTgnXG5cbiAgLy8gY29udmVydCB0aGUgbGltaXQgdG8gYW4gaW50ZWdlclxuICB2YXIgbGltaXQgPSBieXRlcy5wYXJzZShvcHRzLmxpbWl0KVxuXG4gIC8vIGNvbnZlcnQgdGhlIGV4cGVjdGVkIGxlbmd0aCB0byBhbiBpbnRlZ2VyXG4gIHZhciBsZW5ndGggPSBvcHRzLmxlbmd0aCAhPSBudWxsICYmICFpc05hTihvcHRzLmxlbmd0aClcbiAgICA/IHBhcnNlSW50KG9wdHMubGVuZ3RoLCAxMClcbiAgICA6IG51bGxcblxuICBpZiAoZG9uZSkge1xuICAgIC8vIGNsYXNzaWMgY2FsbGJhY2sgc3R5bGVcbiAgICByZXR1cm4gcmVhZFN0cmVhbShzdHJlYW0sIGVuY29kaW5nLCBsZW5ndGgsIGxpbWl0LCBkb25lKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGV4ZWN1dG9yIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZWFkU3RyZWFtKHN0cmVhbSwgZW5jb2RpbmcsIGxlbmd0aCwgbGltaXQsIGZ1bmN0aW9uIG9uUmVhZCAoZXJyLCBidWYpIHtcbiAgICAgIGlmIChlcnIpIHJldHVybiByZWplY3QoZXJyKVxuICAgICAgcmVzb2x2ZShidWYpXG4gICAgfSlcbiAgfSlcbn1cblxuLyoqXG4gKiBIYWx0IGEgc3RyZWFtLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHJlYW1cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaGFsdCAoc3RyZWFtKSB7XG4gIC8vIHVucGlwZSBldmVyeXRoaW5nIGZyb20gdGhlIHN0cmVhbVxuICB1bnBpcGUoc3RyZWFtKVxuXG4gIC8vIHBhdXNlIHN0cmVhbVxuICBpZiAodHlwZW9mIHN0cmVhbS5wYXVzZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHN0cmVhbS5wYXVzZSgpXG4gIH1cbn1cblxuLyoqXG4gKiBSZWFkIHRoZSBkYXRhIGZyb20gdGhlIHN0cmVhbS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gc3RyZWFtXG4gKiBAcGFyYW0ge3N0cmluZ30gZW5jb2RpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdFxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiByZWFkU3RyZWFtIChzdHJlYW0sIGVuY29kaW5nLCBsZW5ndGgsIGxpbWl0LCBjYWxsYmFjaykge1xuICB2YXIgY29tcGxldGUgPSBmYWxzZVxuICB2YXIgc3luYyA9IHRydWVcblxuICAvLyBjaGVjayB0aGUgbGVuZ3RoIGFuZCBsaW1pdCBvcHRpb25zLlxuICAvLyBub3RlOiB3ZSBpbnRlbnRpb25hbGx5IGxlYXZlIHRoZSBzdHJlYW0gcGF1c2VkLFxuICAvLyBzbyB1c2VycyBzaG91bGQgaGFuZGxlIHRoZSBzdHJlYW0gdGhlbXNlbHZlcy5cbiAgaWYgKGxpbWl0ICE9PSBudWxsICYmIGxlbmd0aCAhPT0gbnVsbCAmJiBsZW5ndGggPiBsaW1pdCkge1xuICAgIHJldHVybiBkb25lKGNyZWF0ZUVycm9yKDQxMywgJ3JlcXVlc3QgZW50aXR5IHRvbyBsYXJnZScsIHtcbiAgICAgIGV4cGVjdGVkOiBsZW5ndGgsXG4gICAgICBsZW5ndGg6IGxlbmd0aCxcbiAgICAgIGxpbWl0OiBsaW1pdCxcbiAgICAgIHR5cGU6ICdlbnRpdHkudG9vLmxhcmdlJ1xuICAgIH0pKVxuICB9XG5cbiAgLy8gc3RyZWFtczE6IGFzc2VydCByZXF1ZXN0IGVuY29kaW5nIGlzIGJ1ZmZlci5cbiAgLy8gc3RyZWFtczIrOiBhc3NlcnQgdGhlIHN0cmVhbSBlbmNvZGluZyBpcyBidWZmZXIuXG4gIC8vICAgc3RyZWFtLl9kZWNvZGVyOiBzdHJlYW1zMVxuICAvLyAgIHN0YXRlLmVuY29kaW5nOiBzdHJlYW1zMlxuICAvLyAgIHN0YXRlLmRlY29kZXI6IHN0cmVhbXMyLCBzcGVjaWZpY2FsbHkgPCAwLjEwLjZcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlXG4gIGlmIChzdHJlYW0uX2RlY29kZXIgfHwgKHN0YXRlICYmIChzdGF0ZS5lbmNvZGluZyB8fCBzdGF0ZS5kZWNvZGVyKSkpIHtcbiAgICAvLyBkZXZlbG9wZXIgZXJyb3JcbiAgICByZXR1cm4gZG9uZShjcmVhdGVFcnJvcig1MDAsICdzdHJlYW0gZW5jb2Rpbmcgc2hvdWxkIG5vdCBiZSBzZXQnLCB7XG4gICAgICB0eXBlOiAnc3RyZWFtLmVuY29kaW5nLnNldCdcbiAgICB9KSlcbiAgfVxuXG4gIHZhciByZWNlaXZlZCA9IDBcbiAgdmFyIGRlY29kZXJcblxuICB0cnkge1xuICAgIGRlY29kZXIgPSBnZXREZWNvZGVyKGVuY29kaW5nKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gZG9uZShlcnIpXG4gIH1cblxuICB2YXIgYnVmZmVyID0gZGVjb2RlclxuICAgID8gJydcbiAgICA6IFtdXG5cbiAgLy8gYXR0YWNoIGxpc3RlbmVyc1xuICBzdHJlYW0ub24oJ2Fib3J0ZWQnLCBvbkFib3J0ZWQpXG4gIHN0cmVhbS5vbignY2xvc2UnLCBjbGVhbnVwKVxuICBzdHJlYW0ub24oJ2RhdGEnLCBvbkRhdGEpXG4gIHN0cmVhbS5vbignZW5kJywgb25FbmQpXG4gIHN0cmVhbS5vbignZXJyb3InLCBvbkVuZClcblxuICAvLyBtYXJrIHN5bmMgc2VjdGlvbiBjb21wbGV0ZVxuICBzeW5jID0gZmFsc2VcblxuICBmdW5jdGlvbiBkb25lICgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKVxuXG4gICAgLy8gY29weSBhcmd1bWVudHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV1cbiAgICB9XG5cbiAgICAvLyBtYXJrIGNvbXBsZXRlXG4gICAgY29tcGxldGUgPSB0cnVlXG5cbiAgICBpZiAoc3luYykge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhpbnZva2VDYWxsYmFjaylcbiAgICB9IGVsc2Uge1xuICAgICAgaW52b2tlQ2FsbGJhY2soKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludm9rZUNhbGxiYWNrICgpIHtcbiAgICAgIGNsZWFudXAoKVxuXG4gICAgICBpZiAoYXJnc1swXSkge1xuICAgICAgICAvLyBoYWx0IHRoZSBzdHJlYW0gb24gZXJyb3JcbiAgICAgICAgaGFsdChzdHJlYW0pXG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3MpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25BYm9ydGVkICgpIHtcbiAgICBpZiAoY29tcGxldGUpIHJldHVyblxuXG4gICAgZG9uZShjcmVhdGVFcnJvcig0MDAsICdyZXF1ZXN0IGFib3J0ZWQnLCB7XG4gICAgICBjb2RlOiAnRUNPTk5BQk9SVEVEJyxcbiAgICAgIGV4cGVjdGVkOiBsZW5ndGgsXG4gICAgICBsZW5ndGg6IGxlbmd0aCxcbiAgICAgIHJlY2VpdmVkOiByZWNlaXZlZCxcbiAgICAgIHR5cGU6ICdyZXF1ZXN0LmFib3J0ZWQnXG4gICAgfSkpXG4gIH1cblxuICBmdW5jdGlvbiBvbkRhdGEgKGNodW5rKSB7XG4gICAgaWYgKGNvbXBsZXRlKSByZXR1cm5cblxuICAgIHJlY2VpdmVkICs9IGNodW5rLmxlbmd0aFxuXG4gICAgaWYgKGxpbWl0ICE9PSBudWxsICYmIHJlY2VpdmVkID4gbGltaXQpIHtcbiAgICAgIGRvbmUoY3JlYXRlRXJyb3IoNDEzLCAncmVxdWVzdCBlbnRpdHkgdG9vIGxhcmdlJywge1xuICAgICAgICBsaW1pdDogbGltaXQsXG4gICAgICAgIHJlY2VpdmVkOiByZWNlaXZlZCxcbiAgICAgICAgdHlwZTogJ2VudGl0eS50b28ubGFyZ2UnXG4gICAgICB9KSlcbiAgICB9IGVsc2UgaWYgKGRlY29kZXIpIHtcbiAgICAgIGJ1ZmZlciArPSBkZWNvZGVyLndyaXRlKGNodW5rKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXIucHVzaChjaHVuaylcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkVuZCAoZXJyKSB7XG4gICAgaWYgKGNvbXBsZXRlKSByZXR1cm5cbiAgICBpZiAoZXJyKSByZXR1cm4gZG9uZShlcnIpXG5cbiAgICBpZiAobGVuZ3RoICE9PSBudWxsICYmIHJlY2VpdmVkICE9PSBsZW5ndGgpIHtcbiAgICAgIGRvbmUoY3JlYXRlRXJyb3IoNDAwLCAncmVxdWVzdCBzaXplIGRpZCBub3QgbWF0Y2ggY29udGVudCBsZW5ndGgnLCB7XG4gICAgICAgIGV4cGVjdGVkOiBsZW5ndGgsXG4gICAgICAgIGxlbmd0aDogbGVuZ3RoLFxuICAgICAgICByZWNlaXZlZDogcmVjZWl2ZWQsXG4gICAgICAgIHR5cGU6ICdyZXF1ZXN0LnNpemUuaW52YWxpZCdcbiAgICAgIH0pKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RyaW5nID0gZGVjb2RlclxuICAgICAgICA/IGJ1ZmZlciArIChkZWNvZGVyLmVuZCgpIHx8ICcnKVxuICAgICAgICA6IEJ1ZmZlci5jb25jYXQoYnVmZmVyKVxuICAgICAgZG9uZShudWxsLCBzdHJpbmcpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xlYW51cCAoKSB7XG4gICAgYnVmZmVyID0gbnVsbFxuXG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdhYm9ydGVkJywgb25BYm9ydGVkKVxuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uRGF0YSlcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uRW5kKVxuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbkVuZClcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cClcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgQk9NQ2hhciA9ICdcXHVGRUZGJztcblxuZXhwb3J0cy5QcmVwZW5kQk9NID0gUHJlcGVuZEJPTVdyYXBwZXJcbmZ1bmN0aW9uIFByZXBlbmRCT01XcmFwcGVyKGVuY29kZXIsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmVuY29kZXIgPSBlbmNvZGVyO1xuICAgIHRoaXMuYWRkQk9NID0gdHJ1ZTtcbn1cblxuUHJlcGVuZEJPTVdyYXBwZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgaWYgKHRoaXMuYWRkQk9NKSB7XG4gICAgICAgIHN0ciA9IEJPTUNoYXIgKyBzdHI7XG4gICAgICAgIHRoaXMuYWRkQk9NID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZW5jb2Rlci53cml0ZShzdHIpO1xufVxuXG5QcmVwZW5kQk9NV3JhcHBlci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5jb2Rlci5lbmQoKTtcbn1cblxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnRzLlN0cmlwQk9NID0gU3RyaXBCT01XcmFwcGVyO1xuZnVuY3Rpb24gU3RyaXBCT01XcmFwcGVyKGRlY29kZXIsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlY29kZXIgPSBkZWNvZGVyO1xuICAgIHRoaXMucGFzcyA9IGZhbHNlO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG59XG5cblN0cmlwQk9NV3JhcHBlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihidWYpIHtcbiAgICB2YXIgcmVzID0gdGhpcy5kZWNvZGVyLndyaXRlKGJ1Zik7XG4gICAgaWYgKHRoaXMucGFzcyB8fCAhcmVzKVxuICAgICAgICByZXR1cm4gcmVzO1xuXG4gICAgaWYgKHJlc1swXSA9PT0gQk9NQ2hhcikge1xuICAgICAgICByZXMgPSByZXMuc2xpY2UoMSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLnN0cmlwQk9NID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnN0cmlwQk9NKCk7XG4gICAgfVxuXG4gICAgdGhpcy5wYXNzID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzO1xufVxuXG5TdHJpcEJPTVdyYXBwZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmRlY29kZXIuZW5kKCk7XG59XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBVcGRhdGUgdGhpcyBhcnJheSBpZiB5b3UgYWRkL3JlbmFtZS9yZW1vdmUgZmlsZXMgaW4gdGhpcyBkaXJlY3RvcnkuXG4vLyBXZSBzdXBwb3J0IEJyb3dzZXJpZnkgYnkgc2tpcHBpbmcgYXV0b21hdGljIG1vZHVsZSBkaXNjb3ZlcnkgYW5kIHJlcXVpcmluZyBtb2R1bGVzIGRpcmVjdGx5LlxudmFyIG1vZHVsZXMgPSBbXG4gICAgcmVxdWlyZShcIi4vaW50ZXJuYWxcIiksXG4gICAgcmVxdWlyZShcIi4vdXRmMTZcIiksXG4gICAgcmVxdWlyZShcIi4vdXRmN1wiKSxcbiAgICByZXF1aXJlKFwiLi9zYmNzLWNvZGVjXCIpLFxuICAgIHJlcXVpcmUoXCIuL3NiY3MtZGF0YVwiKSxcbiAgICByZXF1aXJlKFwiLi9zYmNzLWRhdGEtZ2VuZXJhdGVkXCIpLFxuICAgIHJlcXVpcmUoXCIuL2RiY3MtY29kZWNcIiksXG4gICAgcmVxdWlyZShcIi4vZGJjcy1kYXRhXCIpLFxuXTtcblxuLy8gUHV0IGFsbCBlbmNvZGluZy9hbGlhcy9jb2RlYyBkZWZpbml0aW9ucyB0byBzaW5nbGUgb2JqZWN0IGFuZCBleHBvcnQgaXQuIFxuZm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1vZHVsZSA9IG1vZHVsZXNbaV07XG4gICAgZm9yICh2YXIgZW5jIGluIG1vZHVsZSlcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2R1bGUsIGVuYykpXG4gICAgICAgICAgICBleHBvcnRzW2VuY10gPSBtb2R1bGVbZW5jXTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoXCJzYWZlci1idWZmZXJcIikuQnVmZmVyO1xuXG4vLyBFeHBvcnQgTm9kZS5qcyBpbnRlcm5hbCBlbmNvZGluZ3MuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIC8vIEVuY29kaW5nc1xuICAgIHV0Zjg6ICAgeyB0eXBlOiBcIl9pbnRlcm5hbFwiLCBib21Bd2FyZTogdHJ1ZX0sXG4gICAgY2VzdTg6ICB7IHR5cGU6IFwiX2ludGVybmFsXCIsIGJvbUF3YXJlOiB0cnVlfSxcbiAgICB1bmljb2RlMTF1dGY4OiBcInV0ZjhcIixcblxuICAgIHVjczI6ICAgeyB0eXBlOiBcIl9pbnRlcm5hbFwiLCBib21Bd2FyZTogdHJ1ZX0sXG4gICAgdXRmMTZsZTogXCJ1Y3MyXCIsXG5cbiAgICBiaW5hcnk6IHsgdHlwZTogXCJfaW50ZXJuYWxcIiB9LFxuICAgIGJhc2U2NDogeyB0eXBlOiBcIl9pbnRlcm5hbFwiIH0sXG4gICAgaGV4OiAgICB7IHR5cGU6IFwiX2ludGVybmFsXCIgfSxcblxuICAgIC8vIENvZGVjLlxuICAgIF9pbnRlcm5hbDogSW50ZXJuYWxDb2RlYyxcbn07XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIEludGVybmFsQ29kZWMoY29kZWNPcHRpb25zLCBpY29udikge1xuICAgIHRoaXMuZW5jID0gY29kZWNPcHRpb25zLmVuY29kaW5nTmFtZTtcbiAgICB0aGlzLmJvbUF3YXJlID0gY29kZWNPcHRpb25zLmJvbUF3YXJlO1xuXG4gICAgaWYgKHRoaXMuZW5jID09PSBcImJhc2U2NFwiKVxuICAgICAgICB0aGlzLmVuY29kZXIgPSBJbnRlcm5hbEVuY29kZXJCYXNlNjQ7XG4gICAgZWxzZSBpZiAodGhpcy5lbmMgPT09IFwiY2VzdThcIikge1xuICAgICAgICB0aGlzLmVuYyA9IFwidXRmOFwiOyAvLyBVc2UgdXRmOCBmb3IgZGVjb2RpbmcuXG4gICAgICAgIHRoaXMuZW5jb2RlciA9IEludGVybmFsRW5jb2RlckNlc3U4O1xuXG4gICAgICAgIC8vIEFkZCBkZWNvZGVyIGZvciB2ZXJzaW9ucyBvZiBOb2RlIG5vdCBzdXBwb3J0aW5nIENFU1UtOFxuICAgICAgICBpZiAoQnVmZmVyLmZyb20oJ2VkYTBiZGVkYjJhOScsICdoZXgnKS50b1N0cmluZygpICE9PSAn8J+SqScpIHtcbiAgICAgICAgICAgIHRoaXMuZGVjb2RlciA9IEludGVybmFsRGVjb2RlckNlc3U4O1xuICAgICAgICAgICAgdGhpcy5kZWZhdWx0Q2hhclVuaWNvZGUgPSBpY29udi5kZWZhdWx0Q2hhclVuaWNvZGU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbkludGVybmFsQ29kZWMucHJvdG90eXBlLmVuY29kZXIgPSBJbnRlcm5hbEVuY29kZXI7XG5JbnRlcm5hbENvZGVjLnByb3RvdHlwZS5kZWNvZGVyID0gSW50ZXJuYWxEZWNvZGVyO1xuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBXZSB1c2Ugbm9kZS5qcyBpbnRlcm5hbCBkZWNvZGVyLiBJdHMgc2lnbmF0dXJlIGlzIHRoZSBzYW1lIGFzIG91cnMuXG52YXIgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyJykuU3RyaW5nRGVjb2RlcjtcblxuaWYgKCFTdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQpIC8vIE5vZGUgdjAuOCBkb2Vzbid0IGhhdmUgdGhpcyBtZXRob2QuXG4gICAgU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oKSB7fTtcblxuXG5mdW5jdGlvbiBJbnRlcm5hbERlY29kZXIob3B0aW9ucywgY29kZWMpIHtcbiAgICBTdHJpbmdEZWNvZGVyLmNhbGwodGhpcywgY29kZWMuZW5jKTtcbn1cblxuSW50ZXJuYWxEZWNvZGVyLnByb3RvdHlwZSA9IFN0cmluZ0RlY29kZXIucHJvdG90eXBlO1xuXG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFbmNvZGVyIGlzIG1vc3RseSB0cml2aWFsXG5cbmZ1bmN0aW9uIEludGVybmFsRW5jb2RlcihvcHRpb25zLCBjb2RlYykge1xuICAgIHRoaXMuZW5jID0gY29kZWMuZW5jO1xufVxuXG5JbnRlcm5hbEVuY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHN0ciwgdGhpcy5lbmMpO1xufVxuXG5JbnRlcm5hbEVuY29kZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKCkge1xufVxuXG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeGNlcHQgYmFzZTY0IGVuY29kZXIsIHdoaWNoIG11c3Qga2VlcCBpdHMgc3RhdGUuXG5cbmZ1bmN0aW9uIEludGVybmFsRW5jb2RlckJhc2U2NChvcHRpb25zLCBjb2RlYykge1xuICAgIHRoaXMucHJldlN0ciA9ICcnO1xufVxuXG5JbnRlcm5hbEVuY29kZXJCYXNlNjQucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgc3RyID0gdGhpcy5wcmV2U3RyICsgc3RyO1xuICAgIHZhciBjb21wbGV0ZVF1YWRzID0gc3RyLmxlbmd0aCAtIChzdHIubGVuZ3RoICUgNCk7XG4gICAgdGhpcy5wcmV2U3RyID0gc3RyLnNsaWNlKGNvbXBsZXRlUXVhZHMpO1xuICAgIHN0ciA9IHN0ci5zbGljZSgwLCBjb21wbGV0ZVF1YWRzKTtcblxuICAgIHJldHVybiBCdWZmZXIuZnJvbShzdHIsIFwiYmFzZTY0XCIpO1xufVxuXG5JbnRlcm5hbEVuY29kZXJCYXNlNjQucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh0aGlzLnByZXZTdHIsIFwiYmFzZTY0XCIpO1xufVxuXG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBDRVNVLTggZW5jb2RlciBpcyBhbHNvIHNwZWNpYWwuXG5cbmZ1bmN0aW9uIEludGVybmFsRW5jb2RlckNlc3U4KG9wdGlvbnMsIGNvZGVjKSB7XG59XG5cbkludGVybmFsRW5jb2RlckNlc3U4LnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHZhciBidWYgPSBCdWZmZXIuYWxsb2Moc3RyLmxlbmd0aCAqIDMpLCBidWZJZHggPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBOYWl2ZSBpbXBsZW1lbnRhdGlvbiwgYnV0IGl0IHdvcmtzIGJlY2F1c2UgQ0VTVS04IGlzIGVzcGVjaWFsbHkgZWFzeVxuICAgICAgICAvLyB0byBjb252ZXJ0IGZyb20gVVRGLTE2ICh3aGljaCBhbGwgSlMgc3RyaW5ncyBhcmUgZW5jb2RlZCBpbikuXG4gICAgICAgIGlmIChjaGFyQ29kZSA8IDB4ODApXG4gICAgICAgICAgICBidWZbYnVmSWR4KytdID0gY2hhckNvZGU7XG4gICAgICAgIGVsc2UgaWYgKGNoYXJDb2RlIDwgMHg4MDApIHtcbiAgICAgICAgICAgIGJ1ZltidWZJZHgrK10gPSAweEMwICsgKGNoYXJDb2RlID4+PiA2KTtcbiAgICAgICAgICAgIGJ1ZltidWZJZHgrK10gPSAweDgwICsgKGNoYXJDb2RlICYgMHgzZik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7IC8vIGNoYXJDb2RlIHdpbGwgYWx3YXlzIGJlIDwgMHgxMDAwMCBpbiBqYXZhc2NyaXB0LlxuICAgICAgICAgICAgYnVmW2J1ZklkeCsrXSA9IDB4RTAgKyAoY2hhckNvZGUgPj4+IDEyKTtcbiAgICAgICAgICAgIGJ1ZltidWZJZHgrK10gPSAweDgwICsgKChjaGFyQ29kZSA+Pj4gNikgJiAweDNmKTtcbiAgICAgICAgICAgIGJ1ZltidWZJZHgrK10gPSAweDgwICsgKGNoYXJDb2RlICYgMHgzZik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJ1Zi5zbGljZSgwLCBidWZJZHgpO1xufVxuXG5JbnRlcm5hbEVuY29kZXJDZXN1OC5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oKSB7XG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBDRVNVLTggZGVjb2RlciBpcyBub3QgaW1wbGVtZW50ZWQgaW4gTm9kZSB2NC4wK1xuXG5mdW5jdGlvbiBJbnRlcm5hbERlY29kZXJDZXN1OChvcHRpb25zLCBjb2RlYykge1xuICAgIHRoaXMuYWNjID0gMDtcbiAgICB0aGlzLmNvbnRCeXRlcyA9IDA7XG4gICAgdGhpcy5hY2NCeXRlcyA9IDA7XG4gICAgdGhpcy5kZWZhdWx0Q2hhclVuaWNvZGUgPSBjb2RlYy5kZWZhdWx0Q2hhclVuaWNvZGU7XG59XG5cbkludGVybmFsRGVjb2RlckNlc3U4LnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGJ1Zikge1xuICAgIHZhciBhY2MgPSB0aGlzLmFjYywgY29udEJ5dGVzID0gdGhpcy5jb250Qnl0ZXMsIGFjY0J5dGVzID0gdGhpcy5hY2NCeXRlcywgXG4gICAgICAgIHJlcyA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjdXJCeXRlID0gYnVmW2ldO1xuICAgICAgICBpZiAoKGN1ckJ5dGUgJiAweEMwKSAhPT0gMHg4MCkgeyAvLyBMZWFkaW5nIGJ5dGVcbiAgICAgICAgICAgIGlmIChjb250Qnl0ZXMgPiAwKSB7IC8vIFByZXZpb3VzIGNvZGUgaXMgaW52YWxpZFxuICAgICAgICAgICAgICAgIHJlcyArPSB0aGlzLmRlZmF1bHRDaGFyVW5pY29kZTtcbiAgICAgICAgICAgICAgICBjb250Qnl0ZXMgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3VyQnl0ZSA8IDB4ODApIHsgLy8gU2luZ2xlLWJ5dGUgY29kZVxuICAgICAgICAgICAgICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGN1ckJ5dGUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJCeXRlIDwgMHhFMCkgeyAvLyBUd28tYnl0ZSBjb2RlXG4gICAgICAgICAgICAgICAgYWNjID0gY3VyQnl0ZSAmIDB4MUY7XG4gICAgICAgICAgICAgICAgY29udEJ5dGVzID0gMTsgYWNjQnl0ZXMgPSAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJCeXRlIDwgMHhGMCkgeyAvLyBUaHJlZS1ieXRlIGNvZGVcbiAgICAgICAgICAgICAgICBhY2MgPSBjdXJCeXRlICYgMHgwRjtcbiAgICAgICAgICAgICAgICBjb250Qnl0ZXMgPSAyOyBhY2NCeXRlcyA9IDE7XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBGb3VyIG9yIG1vcmUgYXJlIG5vdCBzdXBwb3J0ZWQgZm9yIENFU1UtOC5cbiAgICAgICAgICAgICAgICByZXMgKz0gdGhpcy5kZWZhdWx0Q2hhclVuaWNvZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7IC8vIENvbnRpbnVhdGlvbiBieXRlXG4gICAgICAgICAgICBpZiAoY29udEJ5dGVzID4gMCkgeyAvLyBXZSdyZSB3YWl0aW5nIGZvciBpdC5cbiAgICAgICAgICAgICAgICBhY2MgPSAoYWNjIDw8IDYpIHwgKGN1ckJ5dGUgJiAweDNmKTtcbiAgICAgICAgICAgICAgICBjb250Qnl0ZXMtLTsgYWNjQnl0ZXMrKztcbiAgICAgICAgICAgICAgICBpZiAoY29udEJ5dGVzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBvdmVybG9uZyBlbmNvZGluZywgYnV0IHN1cHBvcnQgTW9kaWZpZWQgVVRGLTggKGVuY29kaW5nIE5VTEwgYXMgQzAgODApXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY2NCeXRlcyA9PT0gMiAmJiBhY2MgPCAweDgwICYmIGFjYyA+IDApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgKz0gdGhpcy5kZWZhdWx0Q2hhclVuaWNvZGU7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFjY0J5dGVzID09PSAzICYmIGFjYyA8IDB4ODAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzICs9IHRoaXMuZGVmYXVsdENoYXJVbmljb2RlO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBY3R1YWxseSBhZGQgY2hhcmFjdGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYWNjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBVbmV4cGVjdGVkIGNvbnRpbnVhdGlvbiBieXRlXG4gICAgICAgICAgICAgICAgcmVzICs9IHRoaXMuZGVmYXVsdENoYXJVbmljb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWNjID0gYWNjOyB0aGlzLmNvbnRCeXRlcyA9IGNvbnRCeXRlczsgdGhpcy5hY2NCeXRlcyA9IGFjY0J5dGVzO1xuICAgIHJldHVybiByZXM7XG59XG5cbkludGVybmFsRGVjb2RlckNlc3U4LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzID0gMDtcbiAgICBpZiAodGhpcy5jb250Qnl0ZXMgPiAwKVxuICAgICAgICByZXMgKz0gdGhpcy5kZWZhdWx0Q2hhclVuaWNvZGU7XG4gICAgcmV0dXJuIHJlcztcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoXCJzYWZlci1idWZmZXJcIikuQnVmZmVyO1xuXG4vLyBOb3RlOiBVVEYxNi1MRSAob3IgVUNTMikgY29kZWMgaXMgTm9kZS5qcyBuYXRpdmUuIFNlZSBlbmNvZGluZ3MvaW50ZXJuYWwuanNcblxuLy8gPT0gVVRGMTYtQkUgY29kZWMuID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZXhwb3J0cy51dGYxNmJlID0gVXRmMTZCRUNvZGVjO1xuZnVuY3Rpb24gVXRmMTZCRUNvZGVjKCkge1xufVxuXG5VdGYxNkJFQ29kZWMucHJvdG90eXBlLmVuY29kZXIgPSBVdGYxNkJFRW5jb2RlcjtcblV0ZjE2QkVDb2RlYy5wcm90b3R5cGUuZGVjb2RlciA9IFV0ZjE2QkVEZWNvZGVyO1xuVXRmMTZCRUNvZGVjLnByb3RvdHlwZS5ib21Bd2FyZSA9IHRydWU7XG5cblxuLy8gLS0gRW5jb2RpbmdcblxuZnVuY3Rpb24gVXRmMTZCRUVuY29kZXIoKSB7XG59XG5cblV0ZjE2QkVFbmNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHZhciBidWYgPSBCdWZmZXIuZnJvbShzdHIsICd1Y3MyJyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgdmFyIHRtcCA9IGJ1ZltpXTsgYnVmW2ldID0gYnVmW2krMV07IGJ1ZltpKzFdID0gdG1wO1xuICAgIH1cbiAgICByZXR1cm4gYnVmO1xufVxuXG5VdGYxNkJFRW5jb2Rlci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oKSB7XG59XG5cblxuLy8gLS0gRGVjb2RpbmdcblxuZnVuY3Rpb24gVXRmMTZCRURlY29kZXIoKSB7XG4gICAgdGhpcy5vdmVyZmxvd0J5dGUgPSAtMTtcbn1cblxuVXRmMTZCRURlY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oYnVmKSB7XG4gICAgaWYgKGJ1Zi5sZW5ndGggPT0gMClcbiAgICAgICAgcmV0dXJuICcnO1xuXG4gICAgdmFyIGJ1ZjIgPSBCdWZmZXIuYWxsb2MoYnVmLmxlbmd0aCArIDEpLFxuICAgICAgICBpID0gMCwgaiA9IDA7XG5cbiAgICBpZiAodGhpcy5vdmVyZmxvd0J5dGUgIT09IC0xKSB7XG4gICAgICAgIGJ1ZjJbMF0gPSBidWZbMF07XG4gICAgICAgIGJ1ZjJbMV0gPSB0aGlzLm92ZXJmbG93Qnl0ZTtcbiAgICAgICAgaSA9IDE7IGogPSAyO1xuICAgIH1cblxuICAgIGZvciAoOyBpIDwgYnVmLmxlbmd0aC0xOyBpICs9IDIsIGorPSAyKSB7XG4gICAgICAgIGJ1ZjJbal0gPSBidWZbaSsxXTtcbiAgICAgICAgYnVmMltqKzFdID0gYnVmW2ldO1xuICAgIH1cblxuICAgIHRoaXMub3ZlcmZsb3dCeXRlID0gKGkgPT0gYnVmLmxlbmd0aC0xKSA/IGJ1ZltidWYubGVuZ3RoLTFdIDogLTE7XG5cbiAgICByZXR1cm4gYnVmMi5zbGljZSgwLCBqKS50b1N0cmluZygndWNzMicpO1xufVxuXG5VdGYxNkJFRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oKSB7XG59XG5cblxuLy8gPT0gVVRGLTE2IGNvZGVjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIERlY29kZXIgY2hvb3NlcyBhdXRvbWF0aWNhbGx5IGZyb20gVVRGLTE2TEUgYW5kIFVURi0xNkJFIHVzaW5nIEJPTSBhbmQgc3BhY2UtYmFzZWQgaGV1cmlzdGljLlxuLy8gRGVmYXVsdHMgdG8gVVRGLTE2TEUsIGFzIGl0J3MgcHJldmFsZW50IGFuZCBkZWZhdWx0IGluIE5vZGUuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VURi0xNiBhbmQgaHR0cDovL2VuY29kaW5nLnNwZWMud2hhdHdnLm9yZy8jdXRmLTE2bGVcbi8vIERlY29kZXIgZGVmYXVsdCBjYW4gYmUgY2hhbmdlZDogaWNvbnYuZGVjb2RlKGJ1ZiwgJ3V0ZjE2Jywge2RlZmF1bHRFbmNvZGluZzogJ3V0Zi0xNmJlJ30pO1xuXG4vLyBFbmNvZGVyIHVzZXMgVVRGLTE2TEUgYW5kIHByZXBlbmRzIEJPTSAod2hpY2ggY2FuIGJlIG92ZXJyaWRkZW4gd2l0aCBhZGRCT006IGZhbHNlKS5cblxuZXhwb3J0cy51dGYxNiA9IFV0ZjE2Q29kZWM7XG5mdW5jdGlvbiBVdGYxNkNvZGVjKGNvZGVjT3B0aW9ucywgaWNvbnYpIHtcbiAgICB0aGlzLmljb252ID0gaWNvbnY7XG59XG5cblV0ZjE2Q29kZWMucHJvdG90eXBlLmVuY29kZXIgPSBVdGYxNkVuY29kZXI7XG5VdGYxNkNvZGVjLnByb3RvdHlwZS5kZWNvZGVyID0gVXRmMTZEZWNvZGVyO1xuXG5cbi8vIC0tIEVuY29kaW5nIChwYXNzLXRocm91Z2gpXG5cbmZ1bmN0aW9uIFV0ZjE2RW5jb2RlcihvcHRpb25zLCBjb2RlYykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGlmIChvcHRpb25zLmFkZEJPTSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICBvcHRpb25zLmFkZEJPTSA9IHRydWU7XG4gICAgdGhpcy5lbmNvZGVyID0gY29kZWMuaWNvbnYuZ2V0RW5jb2RlcigndXRmLTE2bGUnLCBvcHRpb25zKTtcbn1cblxuVXRmMTZFbmNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiB0aGlzLmVuY29kZXIud3JpdGUoc3RyKTtcbn1cblxuVXRmMTZFbmNvZGVyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5lbmNvZGVyLmVuZCgpO1xufVxuXG5cbi8vIC0tIERlY29kaW5nXG5cbmZ1bmN0aW9uIFV0ZjE2RGVjb2RlcihvcHRpb25zLCBjb2RlYykge1xuICAgIHRoaXMuZGVjb2RlciA9IG51bGw7XG4gICAgdGhpcy5pbml0aWFsQnl0ZXMgPSBbXTtcbiAgICB0aGlzLmluaXRpYWxCeXRlc0xlbiA9IDA7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHRoaXMuaWNvbnYgPSBjb2RlYy5pY29udjtcbn1cblxuVXRmMTZEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGJ1Zikge1xuICAgIGlmICghdGhpcy5kZWNvZGVyKSB7XG4gICAgICAgIC8vIENvZGVjIGlzIG5vdCBjaG9zZW4geWV0LiBBY2N1bXVsYXRlIGluaXRpYWwgYnl0ZXMuXG4gICAgICAgIHRoaXMuaW5pdGlhbEJ5dGVzLnB1c2goYnVmKTtcbiAgICAgICAgdGhpcy5pbml0aWFsQnl0ZXNMZW4gKz0gYnVmLmxlbmd0aDtcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLmluaXRpYWxCeXRlc0xlbiA8IDE2KSAvLyBXZSBuZWVkIG1vcmUgYnl0ZXMgdG8gdXNlIHNwYWNlIGhldXJpc3RpYyAoc2VlIGJlbG93KVxuICAgICAgICAgICAgcmV0dXJuICcnO1xuXG4gICAgICAgIC8vIFdlIGhhdmUgZW5vdWdoIGJ5dGVzIC0+IGRldGVjdCBlbmRpYW5uZXNzLlxuICAgICAgICB2YXIgYnVmID0gQnVmZmVyLmNvbmNhdCh0aGlzLmluaXRpYWxCeXRlcyksXG4gICAgICAgICAgICBlbmNvZGluZyA9IGRldGVjdEVuY29kaW5nKGJ1ZiwgdGhpcy5vcHRpb25zLmRlZmF1bHRFbmNvZGluZyk7XG4gICAgICAgIHRoaXMuZGVjb2RlciA9IHRoaXMuaWNvbnYuZ2V0RGVjb2RlcihlbmNvZGluZywgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgdGhpcy5pbml0aWFsQnl0ZXMubGVuZ3RoID0gdGhpcy5pbml0aWFsQnl0ZXNMZW4gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmRlY29kZXIud3JpdGUoYnVmKTtcbn1cblxuVXRmMTZEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuZGVjb2Rlcikge1xuICAgICAgICB2YXIgYnVmID0gQnVmZmVyLmNvbmNhdCh0aGlzLmluaXRpYWxCeXRlcyksXG4gICAgICAgICAgICBlbmNvZGluZyA9IGRldGVjdEVuY29kaW5nKGJ1ZiwgdGhpcy5vcHRpb25zLmRlZmF1bHRFbmNvZGluZyk7XG4gICAgICAgIHRoaXMuZGVjb2RlciA9IHRoaXMuaWNvbnYuZ2V0RGVjb2RlcihlbmNvZGluZywgdGhpcy5vcHRpb25zKTtcblxuICAgICAgICB2YXIgcmVzID0gdGhpcy5kZWNvZGVyLndyaXRlKGJ1ZiksXG4gICAgICAgICAgICB0cmFpbCA9IHRoaXMuZGVjb2Rlci5lbmQoKTtcblxuICAgICAgICByZXR1cm4gdHJhaWwgPyAocmVzICsgdHJhaWwpIDogcmVzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5kZWNvZGVyLmVuZCgpO1xufVxuXG5mdW5jdGlvbiBkZXRlY3RFbmNvZGluZyhidWYsIGRlZmF1bHRFbmNvZGluZykge1xuICAgIHZhciBlbmMgPSBkZWZhdWx0RW5jb2RpbmcgfHwgJ3V0Zi0xNmxlJztcblxuICAgIGlmIChidWYubGVuZ3RoID49IDIpIHtcbiAgICAgICAgLy8gQ2hlY2sgQk9NLlxuICAgICAgICBpZiAoYnVmWzBdID09IDB4RkUgJiYgYnVmWzFdID09IDB4RkYpIC8vIFVURi0xNkJFIEJPTVxuICAgICAgICAgICAgZW5jID0gJ3V0Zi0xNmJlJztcbiAgICAgICAgZWxzZSBpZiAoYnVmWzBdID09IDB4RkYgJiYgYnVmWzFdID09IDB4RkUpIC8vIFVURi0xNkxFIEJPTVxuICAgICAgICAgICAgZW5jID0gJ3V0Zi0xNmxlJztcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBObyBCT00gZm91bmQuIFRyeSB0byBkZWR1Y2UgZW5jb2RpbmcgZnJvbSBpbml0aWFsIGNvbnRlbnQuXG4gICAgICAgICAgICAvLyBNb3N0IG9mIHRoZSB0aW1lLCB0aGUgY29udGVudCBoYXMgQVNDSUkgY2hhcnMgKFUrMDAqKiksIGJ1dCB0aGUgb3Bwb3NpdGUgKFUrKiowMCkgaXMgdW5jb21tb24uXG4gICAgICAgICAgICAvLyBTbywgd2UgY291bnQgQVNDSUkgYXMgaWYgaXQgd2FzIExFIG9yIEJFLCBhbmQgZGVjaWRlIGZyb20gdGhhdC5cbiAgICAgICAgICAgIHZhciBhc2NpaUNoYXJzTEUgPSAwLCBhc2NpaUNoYXJzQkUgPSAwLCAvLyBDb3VudHMgb2YgY2hhcnMgaW4gYm90aCBwb3NpdGlvbnNcbiAgICAgICAgICAgICAgICBfbGVuID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIChidWYubGVuZ3RoICUgMiksIDY0KTsgLy8gTGVuIGlzIGFsd2F5cyBldmVuLlxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF9sZW47IGkgKz0gMikge1xuICAgICAgICAgICAgICAgIGlmIChidWZbaV0gPT09IDAgJiYgYnVmW2krMV0gIT09IDApIGFzY2lpQ2hhcnNCRSsrO1xuICAgICAgICAgICAgICAgIGlmIChidWZbaV0gIT09IDAgJiYgYnVmW2krMV0gPT09IDApIGFzY2lpQ2hhcnNMRSsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYXNjaWlDaGFyc0JFID4gYXNjaWlDaGFyc0xFKVxuICAgICAgICAgICAgICAgIGVuYyA9ICd1dGYtMTZiZSc7XG4gICAgICAgICAgICBlbHNlIGlmIChhc2NpaUNoYXJzQkUgPCBhc2NpaUNoYXJzTEUpXG4gICAgICAgICAgICAgICAgZW5jID0gJ3V0Zi0xNmxlJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlbmM7XG59XG5cblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgQnVmZmVyID0gcmVxdWlyZShcInNhZmVyLWJ1ZmZlclwiKS5CdWZmZXI7XG5cbi8vIFVURi03IGNvZGVjLCBhY2NvcmRpbmcgdG8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzIxNTJcbi8vIFNlZSBhbHNvIGJlbG93IGEgVVRGLTctSU1BUCBjb2RlYywgYWNjb3JkaW5nIHRvIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM1MDEjc2VjdGlvbi01LjEuM1xuXG5leHBvcnRzLnV0ZjcgPSBVdGY3Q29kZWM7XG5leHBvcnRzLnVuaWNvZGUxMXV0ZjcgPSAndXRmNyc7IC8vIEFsaWFzIFVOSUNPREUtMS0xLVVURi03XG5mdW5jdGlvbiBVdGY3Q29kZWMoY29kZWNPcHRpb25zLCBpY29udikge1xuICAgIHRoaXMuaWNvbnYgPSBpY29udjtcbn07XG5cblV0ZjdDb2RlYy5wcm90b3R5cGUuZW5jb2RlciA9IFV0ZjdFbmNvZGVyO1xuVXRmN0NvZGVjLnByb3RvdHlwZS5kZWNvZGVyID0gVXRmN0RlY29kZXI7XG5VdGY3Q29kZWMucHJvdG90eXBlLmJvbUF3YXJlID0gdHJ1ZTtcblxuXG4vLyAtLSBFbmNvZGluZ1xuXG52YXIgbm9uRGlyZWN0Q2hhcnMgPSAvW15BLVphLXowLTknXFwoXFwpLC1cXC5cXC86XFw/IFxcblxcclxcdF0rL2c7XG5cbmZ1bmN0aW9uIFV0ZjdFbmNvZGVyKG9wdGlvbnMsIGNvZGVjKSB7XG4gICAgdGhpcy5pY29udiA9IGNvZGVjLmljb252O1xufVxuXG5VdGY3RW5jb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihzdHIpIHtcbiAgICAvLyBOYWl2ZSBpbXBsZW1lbnRhdGlvbi5cbiAgICAvLyBOb24tZGlyZWN0IGNoYXJzIGFyZSBlbmNvZGVkIGFzIFwiKzxiYXNlNjQ+LVwiOyBzaW5nbGUgXCIrXCIgY2hhciBpcyBlbmNvZGVkIGFzIFwiKy1cIi5cbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc3RyLnJlcGxhY2Uobm9uRGlyZWN0Q2hhcnMsIGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgICAgIHJldHVybiBcIitcIiArIChjaHVuayA9PT0gJysnID8gJycgOiBcbiAgICAgICAgICAgIHRoaXMuaWNvbnYuZW5jb2RlKGNodW5rLCAndXRmMTYtYmUnKS50b1N0cmluZygnYmFzZTY0JykucmVwbGFjZSgvPSskLywgJycpKSBcbiAgICAgICAgICAgICsgXCItXCI7XG4gICAgfS5iaW5kKHRoaXMpKSk7XG59XG5cblV0ZjdFbmNvZGVyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbigpIHtcbn1cblxuXG4vLyAtLSBEZWNvZGluZ1xuXG5mdW5jdGlvbiBVdGY3RGVjb2RlcihvcHRpb25zLCBjb2RlYykge1xuICAgIHRoaXMuaWNvbnYgPSBjb2RlYy5pY29udjtcbiAgICB0aGlzLmluQmFzZTY0ID0gZmFsc2U7XG4gICAgdGhpcy5iYXNlNjRBY2N1bSA9ICcnO1xufVxuXG52YXIgYmFzZTY0UmVnZXggPSAvW0EtWmEtejAtOVxcLytdLztcbnZhciBiYXNlNjRDaGFycyA9IFtdO1xuZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKylcbiAgICBiYXNlNjRDaGFyc1tpXSA9IGJhc2U2NFJlZ2V4LnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShpKSk7XG5cbnZhciBwbHVzQ2hhciA9ICcrJy5jaGFyQ29kZUF0KDApLCBcbiAgICBtaW51c0NoYXIgPSAnLScuY2hhckNvZGVBdCgwKSxcbiAgICBhbmRDaGFyID0gJyYnLmNoYXJDb2RlQXQoMCk7XG5cblV0ZjdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGJ1Zikge1xuICAgIHZhciByZXMgPSBcIlwiLCBsYXN0SSA9IDAsXG4gICAgICAgIGluQmFzZTY0ID0gdGhpcy5pbkJhc2U2NCxcbiAgICAgICAgYmFzZTY0QWNjdW0gPSB0aGlzLmJhc2U2NEFjY3VtO1xuXG4gICAgLy8gVGhlIGRlY29kZXIgaXMgbW9yZSBpbnZvbHZlZCBhcyB3ZSBtdXN0IGhhbmRsZSBjaHVua3MgaW4gc3RyZWFtLlxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFpbkJhc2U2NCkgeyAvLyBXZSdyZSBpbiBkaXJlY3QgbW9kZS5cbiAgICAgICAgICAgIC8vIFdyaXRlIGRpcmVjdCBjaGFycyB1bnRpbCAnKydcbiAgICAgICAgICAgIGlmIChidWZbaV0gPT0gcGx1c0NoYXIpIHtcbiAgICAgICAgICAgICAgICByZXMgKz0gdGhpcy5pY29udi5kZWNvZGUoYnVmLnNsaWNlKGxhc3RJLCBpKSwgXCJhc2NpaVwiKTsgLy8gV3JpdGUgZGlyZWN0IGNoYXJzLlxuICAgICAgICAgICAgICAgIGxhc3RJID0gaSsxO1xuICAgICAgICAgICAgICAgIGluQmFzZTY0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHsgLy8gV2UgZGVjb2RlIGJhc2U2NC5cbiAgICAgICAgICAgIGlmICghYmFzZTY0Q2hhcnNbYnVmW2ldXSkgeyAvLyBCYXNlNjQgZW5kZWQuXG4gICAgICAgICAgICAgICAgaWYgKGkgPT0gbGFzdEkgJiYgYnVmW2ldID09IG1pbnVzQ2hhcikgey8vIFwiKy1cIiAtPiBcIitcIlxuICAgICAgICAgICAgICAgICAgICByZXMgKz0gXCIrXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGI2NHN0ciA9IGJhc2U2NEFjY3VtICsgYnVmLnNsaWNlKGxhc3RJLCBpKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICByZXMgKz0gdGhpcy5pY29udi5kZWNvZGUoQnVmZmVyLmZyb20oYjY0c3RyLCAnYmFzZTY0JyksIFwidXRmMTYtYmVcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGJ1ZltpXSAhPSBtaW51c0NoYXIpIC8vIE1pbnVzIGlzIGFic29yYmVkIGFmdGVyIGJhc2U2NC5cbiAgICAgICAgICAgICAgICAgICAgaS0tO1xuXG4gICAgICAgICAgICAgICAgbGFzdEkgPSBpKzE7XG4gICAgICAgICAgICAgICAgaW5CYXNlNjQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBiYXNlNjRBY2N1bSA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFpbkJhc2U2NCkge1xuICAgICAgICByZXMgKz0gdGhpcy5pY29udi5kZWNvZGUoYnVmLnNsaWNlKGxhc3RJKSwgXCJhc2NpaVwiKTsgLy8gV3JpdGUgZGlyZWN0IGNoYXJzLlxuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBiNjRzdHIgPSBiYXNlNjRBY2N1bSArIGJ1Zi5zbGljZShsYXN0SSkudG9TdHJpbmcoKTtcblxuICAgICAgICB2YXIgY2FuQmVEZWNvZGVkID0gYjY0c3RyLmxlbmd0aCAtIChiNjRzdHIubGVuZ3RoICUgOCk7IC8vIE1pbmltYWwgY2h1bms6IDIgcXVhZHMgLT4gMngzIGJ5dGVzIC0+IDMgY2hhcnMuXG4gICAgICAgIGJhc2U2NEFjY3VtID0gYjY0c3RyLnNsaWNlKGNhbkJlRGVjb2RlZCk7IC8vIFRoZSByZXN0IHdpbGwgYmUgZGVjb2RlZCBpbiBmdXR1cmUuXG4gICAgICAgIGI2NHN0ciA9IGI2NHN0ci5zbGljZSgwLCBjYW5CZURlY29kZWQpO1xuXG4gICAgICAgIHJlcyArPSB0aGlzLmljb252LmRlY29kZShCdWZmZXIuZnJvbShiNjRzdHIsICdiYXNlNjQnKSwgXCJ1dGYxNi1iZVwiKTtcbiAgICB9XG5cbiAgICB0aGlzLmluQmFzZTY0ID0gaW5CYXNlNjQ7XG4gICAgdGhpcy5iYXNlNjRBY2N1bSA9IGJhc2U2NEFjY3VtO1xuXG4gICAgcmV0dXJuIHJlcztcbn1cblxuVXRmN0RlY29kZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXMgPSBcIlwiO1xuICAgIGlmICh0aGlzLmluQmFzZTY0ICYmIHRoaXMuYmFzZTY0QWNjdW0ubGVuZ3RoID4gMClcbiAgICAgICAgcmVzID0gdGhpcy5pY29udi5kZWNvZGUoQnVmZmVyLmZyb20odGhpcy5iYXNlNjRBY2N1bSwgJ2Jhc2U2NCcpLCBcInV0ZjE2LWJlXCIpO1xuXG4gICAgdGhpcy5pbkJhc2U2NCA9IGZhbHNlO1xuICAgIHRoaXMuYmFzZTY0QWNjdW0gPSAnJztcbiAgICByZXR1cm4gcmVzO1xufVxuXG5cbi8vIFVURi03LUlNQVAgY29kZWMuXG4vLyBSRkMzNTAxIFNlYy4gNS4xLjMgTW9kaWZpZWQgVVRGLTcgKGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM1MDEjc2VjdGlvbi01LjEuMylcbi8vIERpZmZlcmVuY2VzOlxuLy8gICogQmFzZTY0IHBhcnQgaXMgc3RhcnRlZCBieSBcIiZcIiBpbnN0ZWFkIG9mIFwiK1wiXG4vLyAgKiBEaXJlY3QgY2hhcmFjdGVycyBhcmUgMHgyMC0weDdFLCBleGNlcHQgXCImXCIgKDB4MjYpXG4vLyAgKiBJbiBCYXNlNjQsIFwiLFwiIGlzIHVzZWQgaW5zdGVhZCBvZiBcIi9cIlxuLy8gICogQmFzZTY0IG11c3Qgbm90IGJlIHVzZWQgdG8gcmVwcmVzZW50IGRpcmVjdCBjaGFyYWN0ZXJzLlxuLy8gICogTm8gaW1wbGljaXQgc2hpZnQgYmFjayBmcm9tIEJhc2U2NCAoc2hvdWxkIGFsd2F5cyBlbmQgd2l0aCAnLScpXG4vLyAgKiBTdHJpbmcgbXVzdCBlbmQgaW4gbm9uLXNoaWZ0ZWQgcG9zaXRpb24uXG4vLyAgKiBcIi0mXCIgd2hpbGUgaW4gYmFzZTY0IGlzIG5vdCBhbGxvd2VkLlxuXG5cbmV4cG9ydHMudXRmN2ltYXAgPSBVdGY3SU1BUENvZGVjO1xuZnVuY3Rpb24gVXRmN0lNQVBDb2RlYyhjb2RlY09wdGlvbnMsIGljb252KSB7XG4gICAgdGhpcy5pY29udiA9IGljb252O1xufTtcblxuVXRmN0lNQVBDb2RlYy5wcm90b3R5cGUuZW5jb2RlciA9IFV0ZjdJTUFQRW5jb2RlcjtcblV0ZjdJTUFQQ29kZWMucHJvdG90eXBlLmRlY29kZXIgPSBVdGY3SU1BUERlY29kZXI7XG5VdGY3SU1BUENvZGVjLnByb3RvdHlwZS5ib21Bd2FyZSA9IHRydWU7XG5cblxuLy8gLS0gRW5jb2RpbmdcblxuZnVuY3Rpb24gVXRmN0lNQVBFbmNvZGVyKG9wdGlvbnMsIGNvZGVjKSB7XG4gICAgdGhpcy5pY29udiA9IGNvZGVjLmljb252O1xuICAgIHRoaXMuaW5CYXNlNjQgPSBmYWxzZTtcbiAgICB0aGlzLmJhc2U2NEFjY3VtID0gQnVmZmVyLmFsbG9jKDYpO1xuICAgIHRoaXMuYmFzZTY0QWNjdW1JZHggPSAwO1xufVxuXG5VdGY3SU1BUEVuY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgdmFyIGluQmFzZTY0ID0gdGhpcy5pbkJhc2U2NCxcbiAgICAgICAgYmFzZTY0QWNjdW0gPSB0aGlzLmJhc2U2NEFjY3VtLFxuICAgICAgICBiYXNlNjRBY2N1bUlkeCA9IHRoaXMuYmFzZTY0QWNjdW1JZHgsXG4gICAgICAgIGJ1ZiA9IEJ1ZmZlci5hbGxvYyhzdHIubGVuZ3RoKjUgKyAxMCksIGJ1ZklkeCA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdUNoYXIgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKDB4MjAgPD0gdUNoYXIgJiYgdUNoYXIgPD0gMHg3RSkgeyAvLyBEaXJlY3QgY2hhcmFjdGVyIG9yICcmJy5cbiAgICAgICAgICAgIGlmIChpbkJhc2U2NCkge1xuICAgICAgICAgICAgICAgIGlmIChiYXNlNjRBY2N1bUlkeCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmSWR4ICs9IGJ1Zi53cml0ZShiYXNlNjRBY2N1bS5zbGljZSgwLCBiYXNlNjRBY2N1bUlkeCkudG9TdHJpbmcoJ2Jhc2U2NCcpLnJlcGxhY2UoL1xcLy9nLCAnLCcpLnJlcGxhY2UoLz0rJC8sICcnKSwgYnVmSWR4KTtcbiAgICAgICAgICAgICAgICAgICAgYmFzZTY0QWNjdW1JZHggPSAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJ1ZltidWZJZHgrK10gPSBtaW51c0NoYXI7IC8vIFdyaXRlICctJywgdGhlbiBnbyB0byBkaXJlY3QgbW9kZS5cbiAgICAgICAgICAgICAgICBpbkJhc2U2NCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWluQmFzZTY0KSB7XG4gICAgICAgICAgICAgICAgYnVmW2J1ZklkeCsrXSA9IHVDaGFyOyAvLyBXcml0ZSBkaXJlY3QgY2hhcmFjdGVyXG5cbiAgICAgICAgICAgICAgICBpZiAodUNoYXIgPT09IGFuZENoYXIpICAvLyBBbXBlcnNhbmQgLT4gJyYtJ1xuICAgICAgICAgICAgICAgICAgICBidWZbYnVmSWR4KytdID0gbWludXNDaGFyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7IC8vIE5vbi1kaXJlY3QgY2hhcmFjdGVyXG4gICAgICAgICAgICBpZiAoIWluQmFzZTY0KSB7XG4gICAgICAgICAgICAgICAgYnVmW2J1ZklkeCsrXSA9IGFuZENoYXI7IC8vIFdyaXRlICcmJywgdGhlbiBnbyB0byBiYXNlNjQgbW9kZS5cbiAgICAgICAgICAgICAgICBpbkJhc2U2NCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5CYXNlNjQpIHtcbiAgICAgICAgICAgICAgICBiYXNlNjRBY2N1bVtiYXNlNjRBY2N1bUlkeCsrXSA9IHVDaGFyID4+IDg7XG4gICAgICAgICAgICAgICAgYmFzZTY0QWNjdW1bYmFzZTY0QWNjdW1JZHgrK10gPSB1Q2hhciAmIDB4RkY7XG5cbiAgICAgICAgICAgICAgICBpZiAoYmFzZTY0QWNjdW1JZHggPT0gYmFzZTY0QWNjdW0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZklkeCArPSBidWYud3JpdGUoYmFzZTY0QWNjdW0udG9TdHJpbmcoJ2Jhc2U2NCcpLnJlcGxhY2UoL1xcLy9nLCAnLCcpLCBidWZJZHgpO1xuICAgICAgICAgICAgICAgICAgICBiYXNlNjRBY2N1bUlkeCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5pbkJhc2U2NCA9IGluQmFzZTY0O1xuICAgIHRoaXMuYmFzZTY0QWNjdW1JZHggPSBiYXNlNjRBY2N1bUlkeDtcblxuICAgIHJldHVybiBidWYuc2xpY2UoMCwgYnVmSWR4KTtcbn1cblxuVXRmN0lNQVBFbmNvZGVyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jKDEwKSwgYnVmSWR4ID0gMDtcbiAgICBpZiAodGhpcy5pbkJhc2U2NCkge1xuICAgICAgICBpZiAodGhpcy5iYXNlNjRBY2N1bUlkeCA+IDApIHtcbiAgICAgICAgICAgIGJ1ZklkeCArPSBidWYud3JpdGUodGhpcy5iYXNlNjRBY2N1bS5zbGljZSgwLCB0aGlzLmJhc2U2NEFjY3VtSWR4KS50b1N0cmluZygnYmFzZTY0JykucmVwbGFjZSgvXFwvL2csICcsJykucmVwbGFjZSgvPSskLywgJycpLCBidWZJZHgpO1xuICAgICAgICAgICAgdGhpcy5iYXNlNjRBY2N1bUlkeCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBidWZbYnVmSWR4KytdID0gbWludXNDaGFyOyAvLyBXcml0ZSAnLScsIHRoZW4gZ28gdG8gZGlyZWN0IG1vZGUuXG4gICAgICAgIHRoaXMuaW5CYXNlNjQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmLnNsaWNlKDAsIGJ1ZklkeCk7XG59XG5cblxuLy8gLS0gRGVjb2RpbmdcblxuZnVuY3Rpb24gVXRmN0lNQVBEZWNvZGVyKG9wdGlvbnMsIGNvZGVjKSB7XG4gICAgdGhpcy5pY29udiA9IGNvZGVjLmljb252O1xuICAgIHRoaXMuaW5CYXNlNjQgPSBmYWxzZTtcbiAgICB0aGlzLmJhc2U2NEFjY3VtID0gJyc7XG59XG5cbnZhciBiYXNlNjRJTUFQQ2hhcnMgPSBiYXNlNjRDaGFycy5zbGljZSgpO1xuYmFzZTY0SU1BUENoYXJzWycsJy5jaGFyQ29kZUF0KDApXSA9IHRydWU7XG5cblV0ZjdJTUFQRGVjb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihidWYpIHtcbiAgICB2YXIgcmVzID0gXCJcIiwgbGFzdEkgPSAwLFxuICAgICAgICBpbkJhc2U2NCA9IHRoaXMuaW5CYXNlNjQsXG4gICAgICAgIGJhc2U2NEFjY3VtID0gdGhpcy5iYXNlNjRBY2N1bTtcblxuICAgIC8vIFRoZSBkZWNvZGVyIGlzIG1vcmUgaW52b2x2ZWQgYXMgd2UgbXVzdCBoYW5kbGUgY2h1bmtzIGluIHN0cmVhbS5cbiAgICAvLyBJdCBpcyBmb3JnaXZpbmcsIGNsb3NlciB0byBzdGFuZGFyZCBVVEYtNyAoZm9yIGV4YW1wbGUsICctJyBpcyBvcHRpb25hbCBhdCB0aGUgZW5kKS5cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghaW5CYXNlNjQpIHsgLy8gV2UncmUgaW4gZGlyZWN0IG1vZGUuXG4gICAgICAgICAgICAvLyBXcml0ZSBkaXJlY3QgY2hhcnMgdW50aWwgJyYnXG4gICAgICAgICAgICBpZiAoYnVmW2ldID09IGFuZENoYXIpIHtcbiAgICAgICAgICAgICAgICByZXMgKz0gdGhpcy5pY29udi5kZWNvZGUoYnVmLnNsaWNlKGxhc3RJLCBpKSwgXCJhc2NpaVwiKTsgLy8gV3JpdGUgZGlyZWN0IGNoYXJzLlxuICAgICAgICAgICAgICAgIGxhc3RJID0gaSsxO1xuICAgICAgICAgICAgICAgIGluQmFzZTY0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHsgLy8gV2UgZGVjb2RlIGJhc2U2NC5cbiAgICAgICAgICAgIGlmICghYmFzZTY0SU1BUENoYXJzW2J1ZltpXV0pIHsgLy8gQmFzZTY0IGVuZGVkLlxuICAgICAgICAgICAgICAgIGlmIChpID09IGxhc3RJICYmIGJ1ZltpXSA9PSBtaW51c0NoYXIpIHsgLy8gXCImLVwiIC0+IFwiJlwiXG4gICAgICAgICAgICAgICAgICAgIHJlcyArPSBcIiZcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYjY0c3RyID0gYmFzZTY0QWNjdW0gKyBidWYuc2xpY2UobGFzdEksIGkpLnRvU3RyaW5nKCkucmVwbGFjZSgvLC9nLCAnLycpO1xuICAgICAgICAgICAgICAgICAgICByZXMgKz0gdGhpcy5pY29udi5kZWNvZGUoQnVmZmVyLmZyb20oYjY0c3RyLCAnYmFzZTY0JyksIFwidXRmMTYtYmVcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGJ1ZltpXSAhPSBtaW51c0NoYXIpIC8vIE1pbnVzIG1heSBiZSBhYnNvcmJlZCBhZnRlciBiYXNlNjQuXG4gICAgICAgICAgICAgICAgICAgIGktLTtcblxuICAgICAgICAgICAgICAgIGxhc3RJID0gaSsxO1xuICAgICAgICAgICAgICAgIGluQmFzZTY0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYmFzZTY0QWNjdW0gPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICghaW5CYXNlNjQpIHtcbiAgICAgICAgcmVzICs9IHRoaXMuaWNvbnYuZGVjb2RlKGJ1Zi5zbGljZShsYXN0SSksIFwiYXNjaWlcIik7IC8vIFdyaXRlIGRpcmVjdCBjaGFycy5cbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYjY0c3RyID0gYmFzZTY0QWNjdW0gKyBidWYuc2xpY2UobGFzdEkpLnRvU3RyaW5nKCkucmVwbGFjZSgvLC9nLCAnLycpO1xuXG4gICAgICAgIHZhciBjYW5CZURlY29kZWQgPSBiNjRzdHIubGVuZ3RoIC0gKGI2NHN0ci5sZW5ndGggJSA4KTsgLy8gTWluaW1hbCBjaHVuazogMiBxdWFkcyAtPiAyeDMgYnl0ZXMgLT4gMyBjaGFycy5cbiAgICAgICAgYmFzZTY0QWNjdW0gPSBiNjRzdHIuc2xpY2UoY2FuQmVEZWNvZGVkKTsgLy8gVGhlIHJlc3Qgd2lsbCBiZSBkZWNvZGVkIGluIGZ1dHVyZS5cbiAgICAgICAgYjY0c3RyID0gYjY0c3RyLnNsaWNlKDAsIGNhbkJlRGVjb2RlZCk7XG5cbiAgICAgICAgcmVzICs9IHRoaXMuaWNvbnYuZGVjb2RlKEJ1ZmZlci5mcm9tKGI2NHN0ciwgJ2Jhc2U2NCcpLCBcInV0ZjE2LWJlXCIpO1xuICAgIH1cblxuICAgIHRoaXMuaW5CYXNlNjQgPSBpbkJhc2U2NDtcbiAgICB0aGlzLmJhc2U2NEFjY3VtID0gYmFzZTY0QWNjdW07XG5cbiAgICByZXR1cm4gcmVzO1xufVxuXG5VdGY3SU1BUERlY29kZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXMgPSBcIlwiO1xuICAgIGlmICh0aGlzLmluQmFzZTY0ICYmIHRoaXMuYmFzZTY0QWNjdW0ubGVuZ3RoID4gMClcbiAgICAgICAgcmVzID0gdGhpcy5pY29udi5kZWNvZGUoQnVmZmVyLmZyb20odGhpcy5iYXNlNjRBY2N1bSwgJ2Jhc2U2NCcpLCBcInV0ZjE2LWJlXCIpO1xuXG4gICAgdGhpcy5pbkJhc2U2NCA9IGZhbHNlO1xuICAgIHRoaXMuYmFzZTY0QWNjdW0gPSAnJztcbiAgICByZXR1cm4gcmVzO1xufVxuXG5cbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoXCJzYWZlci1idWZmZXJcIikuQnVmZmVyO1xuXG4vLyBTaW5nbGUtYnl0ZSBjb2RlYy4gTmVlZHMgYSAnY2hhcnMnIHN0cmluZyBwYXJhbWV0ZXIgdGhhdCBjb250YWlucyAyNTYgb3IgMTI4IGNoYXJzIHRoYXRcbi8vIGNvcnJlc3BvbmQgdG8gZW5jb2RlZCBieXRlcyAoaWYgMTI4IC0gdGhlbiBsb3dlciBoYWxmIGlzIEFTQ0lJKS4gXG5cbmV4cG9ydHMuX3NiY3MgPSBTQkNTQ29kZWM7XG5mdW5jdGlvbiBTQkNTQ29kZWMoY29kZWNPcHRpb25zLCBpY29udikge1xuICAgIGlmICghY29kZWNPcHRpb25zKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTQkNTIGNvZGVjIGlzIGNhbGxlZCB3aXRob3V0IHRoZSBkYXRhLlwiKVxuICAgIFxuICAgIC8vIFByZXBhcmUgY2hhciBidWZmZXIgZm9yIGRlY29kaW5nLlxuICAgIGlmICghY29kZWNPcHRpb25zLmNoYXJzIHx8IChjb2RlY09wdGlvbnMuY2hhcnMubGVuZ3RoICE9PSAxMjggJiYgY29kZWNPcHRpb25zLmNoYXJzLmxlbmd0aCAhPT0gMjU2KSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW5jb2RpbmcgJ1wiK2NvZGVjT3B0aW9ucy50eXBlK1wiJyBoYXMgaW5jb3JyZWN0ICdjaGFycycgKG11c3QgYmUgb2YgbGVuIDEyOCBvciAyNTYpXCIpO1xuICAgIFxuICAgIGlmIChjb2RlY09wdGlvbnMuY2hhcnMubGVuZ3RoID09PSAxMjgpIHtcbiAgICAgICAgdmFyIGFzY2lpU3RyaW5nID0gXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMjg7IGkrKylcbiAgICAgICAgICAgIGFzY2lpU3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoaSk7XG4gICAgICAgIGNvZGVjT3B0aW9ucy5jaGFycyA9IGFzY2lpU3RyaW5nICsgY29kZWNPcHRpb25zLmNoYXJzO1xuICAgIH1cblxuICAgIHRoaXMuZGVjb2RlQnVmID0gQnVmZmVyLmZyb20oY29kZWNPcHRpb25zLmNoYXJzLCAndWNzMicpO1xuICAgIFxuICAgIC8vIEVuY29kaW5nIGJ1ZmZlci5cbiAgICB2YXIgZW5jb2RlQnVmID0gQnVmZmVyLmFsbG9jKDY1NTM2LCBpY29udi5kZWZhdWx0Q2hhclNpbmdsZUJ5dGUuY2hhckNvZGVBdCgwKSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVjT3B0aW9ucy5jaGFycy5sZW5ndGg7IGkrKylcbiAgICAgICAgZW5jb2RlQnVmW2NvZGVjT3B0aW9ucy5jaGFycy5jaGFyQ29kZUF0KGkpXSA9IGk7XG5cbiAgICB0aGlzLmVuY29kZUJ1ZiA9IGVuY29kZUJ1Zjtcbn1cblxuU0JDU0NvZGVjLnByb3RvdHlwZS5lbmNvZGVyID0gU0JDU0VuY29kZXI7XG5TQkNTQ29kZWMucHJvdG90eXBlLmRlY29kZXIgPSBTQkNTRGVjb2RlcjtcblxuXG5mdW5jdGlvbiBTQkNTRW5jb2RlcihvcHRpb25zLCBjb2RlYykge1xuICAgIHRoaXMuZW5jb2RlQnVmID0gY29kZWMuZW5jb2RlQnVmO1xufVxuXG5TQkNTRW5jb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihzdHIpIHtcbiAgICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jKHN0ci5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKVxuICAgICAgICBidWZbaV0gPSB0aGlzLmVuY29kZUJ1ZltzdHIuY2hhckNvZGVBdChpKV07XG4gICAgXG4gICAgcmV0dXJuIGJ1Zjtcbn1cblxuU0JDU0VuY29kZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKCkge1xufVxuXG5cbmZ1bmN0aW9uIFNCQ1NEZWNvZGVyKG9wdGlvbnMsIGNvZGVjKSB7XG4gICAgdGhpcy5kZWNvZGVCdWYgPSBjb2RlYy5kZWNvZGVCdWY7XG59XG5cblNCQ1NEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGJ1Zikge1xuICAgIC8vIFN0cmluZ3MgYXJlIGltbXV0YWJsZSBpbiBKUyAtPiB3ZSB1c2UgdWNzMiBidWZmZXIgdG8gc3BlZWQgdXAgY29tcHV0YXRpb25zLlxuICAgIHZhciBkZWNvZGVCdWYgPSB0aGlzLmRlY29kZUJ1ZjtcbiAgICB2YXIgbmV3QnVmID0gQnVmZmVyLmFsbG9jKGJ1Zi5sZW5ndGgqMik7XG4gICAgdmFyIGlkeDEgPSAwLCBpZHgyID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZHgxID0gYnVmW2ldKjI7IGlkeDIgPSBpKjI7XG4gICAgICAgIG5ld0J1ZltpZHgyXSA9IGRlY29kZUJ1ZltpZHgxXTtcbiAgICAgICAgbmV3QnVmW2lkeDIrMV0gPSBkZWNvZGVCdWZbaWR4MSsxXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0J1Zi50b1N0cmluZygndWNzMicpO1xufVxuXG5TQkNTRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oKSB7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gTWFudWFsbHkgYWRkZWQgZGF0YSB0byBiZSB1c2VkIGJ5IHNiY3MgY29kZWMgaW4gYWRkaXRpb24gdG8gZ2VuZXJhdGVkIG9uZS5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgLy8gTm90IHN1cHBvcnRlZCBieSBpY29udiwgbm90IHN1cmUgd2h5LlxuICAgIFwiMTAwMjlcIjogXCJtYWNjZW50ZXVyb1wiLFxuICAgIFwibWFjY2VudGV1cm9cIjoge1xuICAgICAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgICAgICBcImNoYXJzXCI6IFwiw4TEgMSBw4nEhMOWw5zDocSFxIzDpMSNxIbEh8OpxbnFusSOw63Ej8SSxJPElsOzxJfDtMO2w7XDusSaxJvDvOKAoMKwxJjCo8Kn4oCiwrbDn8KuwqnihKLEmcKo4omgxKPErsSvxKriiaTiiaXEq8S24oiC4oiRxYLEu8S8xL3EvsS5xLrFhcWGxYPCrOKImsWExYfiiIbCq8K74oCmwqDFiMWQw5XFkcWM4oCT4oCU4oCc4oCd4oCY4oCZw7fil4rFjcWUxZXFmOKAueKAusWZxZbFl8Wg4oCa4oCexaHFmsWbw4HFpMWlw43FvcW+xarDk8OUxavFrsOaxa/FsMWxxbLFs8Odw73Et8W7xYHFvMSiy4dcIlxuICAgIH0sXG5cbiAgICBcIjgwOFwiOiBcImNwODA4XCIsXG4gICAgXCJpYm04MDhcIjogXCJjcDgwOFwiLFxuICAgIFwiY3A4MDhcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgICAgICBcImNoYXJzXCI6IFwi0JDQkdCS0JPQlNCV0JbQl9CY0JnQmtCb0JzQndCe0J/QoNCh0KLQo9Ck0KXQptCn0KjQqdCq0KvQrNCt0K7Qr9Cw0LHQstCz0LTQtdC20LfQuNC50LrQu9C80L3QvtC/4paR4paS4paT4pSC4pSk4pWh4pWi4pWW4pWV4pWj4pWR4pWX4pWd4pWc4pWb4pSQ4pSU4pS04pSs4pSc4pSA4pS84pWe4pWf4pWa4pWU4pWp4pWm4pWg4pWQ4pWs4pWn4pWo4pWk4pWl4pWZ4pWY4pWS4pWT4pWr4pWq4pSY4pSM4paI4paE4paM4paQ4paA0YDRgdGC0YPRhNGF0YbRh9GI0YnRitGL0YzRjdGO0Y/QgdGR0ITRlNCH0ZfQjtGewrDiiJnCt+KImuKEluKCrOKWoMKgXCJcbiAgICB9LFxuXG4gICAgXCJtaWtcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgICAgICBcImNoYXJzXCI6IFwi0JDQkdCS0JPQlNCV0JbQl9CY0JnQmtCb0JzQndCe0J/QoNCh0KLQo9Ck0KXQptCn0KjQqdCq0KvQrNCt0K7Qr9Cw0LHQstCz0LTQtdC20LfQuNC50LrQu9C80L3QvtC/0YDRgdGC0YPRhNGF0YbRh9GI0YnRitGL0YzRjdGO0Y/ilJTilLTilKzilJzilIDilLzilaPilZHilZrilZTilanilabilaDilZDilazilJDilpHilpLilpPilILilKTihJbCp+KVl+KVneKUmOKUjOKWiOKWhOKWjOKWkOKWgM6xw5/Ok8+AzqPPg8K1z4TOps6YzqnOtOKIns+GzrXiiKniiaHCseKJpeKJpOKMoOKMocO34omIwrDiiJnCt+KImuKBv8Ky4pagwqBcIlxuICAgIH0sXG5cbiAgICAvLyBBbGlhc2VzIG9mIGdlbmVyYXRlZCBlbmNvZGluZ3MuXG4gICAgXCJhc2NpaThiaXRcIjogXCJhc2NpaVwiLFxuICAgIFwidXNhc2NpaVwiOiBcImFzY2lpXCIsXG4gICAgXCJhbnNpeDM0XCI6IFwiYXNjaWlcIixcbiAgICBcImFuc2l4MzQxOTY4XCI6IFwiYXNjaWlcIixcbiAgICBcImFuc2l4MzQxOTg2XCI6IFwiYXNjaWlcIixcbiAgICBcImNzYXNjaWlcIjogXCJhc2NpaVwiLFxuICAgIFwiY3AzNjdcIjogXCJhc2NpaVwiLFxuICAgIFwiaWJtMzY3XCI6IFwiYXNjaWlcIixcbiAgICBcImlzb2lyNlwiOiBcImFzY2lpXCIsXG4gICAgXCJpc282NDZ1c1wiOiBcImFzY2lpXCIsXG4gICAgXCJpc282NDZpcnZcIjogXCJhc2NpaVwiLFxuICAgIFwidXNcIjogXCJhc2NpaVwiLFxuXG4gICAgXCJsYXRpbjFcIjogXCJpc284ODU5MVwiLFxuICAgIFwibGF0aW4yXCI6IFwiaXNvODg1OTJcIixcbiAgICBcImxhdGluM1wiOiBcImlzbzg4NTkzXCIsXG4gICAgXCJsYXRpbjRcIjogXCJpc284ODU5NFwiLFxuICAgIFwibGF0aW41XCI6IFwiaXNvODg1OTlcIixcbiAgICBcImxhdGluNlwiOiBcImlzbzg4NTkxMFwiLFxuICAgIFwibGF0aW43XCI6IFwiaXNvODg1OTEzXCIsXG4gICAgXCJsYXRpbjhcIjogXCJpc284ODU5MTRcIixcbiAgICBcImxhdGluOVwiOiBcImlzbzg4NTkxNVwiLFxuICAgIFwibGF0aW4xMFwiOiBcImlzbzg4NTkxNlwiLFxuXG4gICAgXCJjc2lzb2xhdGluMVwiOiBcImlzbzg4NTkxXCIsXG4gICAgXCJjc2lzb2xhdGluMlwiOiBcImlzbzg4NTkyXCIsXG4gICAgXCJjc2lzb2xhdGluM1wiOiBcImlzbzg4NTkzXCIsXG4gICAgXCJjc2lzb2xhdGluNFwiOiBcImlzbzg4NTk0XCIsXG4gICAgXCJjc2lzb2xhdGluY3lyaWxsaWNcIjogXCJpc284ODU5NVwiLFxuICAgIFwiY3Npc29sYXRpbmFyYWJpY1wiOiBcImlzbzg4NTk2XCIsXG4gICAgXCJjc2lzb2xhdGluZ3JlZWtcIiA6IFwiaXNvODg1OTdcIixcbiAgICBcImNzaXNvbGF0aW5oZWJyZXdcIjogXCJpc284ODU5OFwiLFxuICAgIFwiY3Npc29sYXRpbjVcIjogXCJpc284ODU5OVwiLFxuICAgIFwiY3Npc29sYXRpbjZcIjogXCJpc284ODU5MTBcIixcblxuICAgIFwibDFcIjogXCJpc284ODU5MVwiLFxuICAgIFwibDJcIjogXCJpc284ODU5MlwiLFxuICAgIFwibDNcIjogXCJpc284ODU5M1wiLFxuICAgIFwibDRcIjogXCJpc284ODU5NFwiLFxuICAgIFwibDVcIjogXCJpc284ODU5OVwiLFxuICAgIFwibDZcIjogXCJpc284ODU5MTBcIixcbiAgICBcImw3XCI6IFwiaXNvODg1OTEzXCIsXG4gICAgXCJsOFwiOiBcImlzbzg4NTkxNFwiLFxuICAgIFwibDlcIjogXCJpc284ODU5MTVcIixcbiAgICBcImwxMFwiOiBcImlzbzg4NTkxNlwiLFxuXG4gICAgXCJpc29pcjE0XCI6IFwiaXNvNjQ2anBcIixcbiAgICBcImlzb2lyNTdcIjogXCJpc282NDZjblwiLFxuICAgIFwiaXNvaXIxMDBcIjogXCJpc284ODU5MVwiLFxuICAgIFwiaXNvaXIxMDFcIjogXCJpc284ODU5MlwiLFxuICAgIFwiaXNvaXIxMDlcIjogXCJpc284ODU5M1wiLFxuICAgIFwiaXNvaXIxMTBcIjogXCJpc284ODU5NFwiLFxuICAgIFwiaXNvaXIxNDRcIjogXCJpc284ODU5NVwiLFxuICAgIFwiaXNvaXIxMjdcIjogXCJpc284ODU5NlwiLFxuICAgIFwiaXNvaXIxMjZcIjogXCJpc284ODU5N1wiLFxuICAgIFwiaXNvaXIxMzhcIjogXCJpc284ODU5OFwiLFxuICAgIFwiaXNvaXIxNDhcIjogXCJpc284ODU5OVwiLFxuICAgIFwiaXNvaXIxNTdcIjogXCJpc284ODU5MTBcIixcbiAgICBcImlzb2lyMTY2XCI6IFwidGlzNjIwXCIsXG4gICAgXCJpc29pcjE3OVwiOiBcImlzbzg4NTkxM1wiLFxuICAgIFwiaXNvaXIxOTlcIjogXCJpc284ODU5MTRcIixcbiAgICBcImlzb2lyMjAzXCI6IFwiaXNvODg1OTE1XCIsXG4gICAgXCJpc29pcjIyNlwiOiBcImlzbzg4NTkxNlwiLFxuXG4gICAgXCJjcDgxOVwiOiBcImlzbzg4NTkxXCIsXG4gICAgXCJpYm04MTlcIjogXCJpc284ODU5MVwiLFxuXG4gICAgXCJjeXJpbGxpY1wiOiBcImlzbzg4NTk1XCIsXG5cbiAgICBcImFyYWJpY1wiOiBcImlzbzg4NTk2XCIsXG4gICAgXCJhcmFiaWM4XCI6IFwiaXNvODg1OTZcIixcbiAgICBcImVjbWExMTRcIjogXCJpc284ODU5NlwiLFxuICAgIFwiYXNtbzcwOFwiOiBcImlzbzg4NTk2XCIsXG5cbiAgICBcImdyZWVrXCIgOiBcImlzbzg4NTk3XCIsXG4gICAgXCJncmVlazhcIiA6IFwiaXNvODg1OTdcIixcbiAgICBcImVjbWExMThcIiA6IFwiaXNvODg1OTdcIixcbiAgICBcImVsb3Q5MjhcIiA6IFwiaXNvODg1OTdcIixcblxuICAgIFwiaGVicmV3XCI6IFwiaXNvODg1OThcIixcbiAgICBcImhlYnJldzhcIjogXCJpc284ODU5OFwiLFxuXG4gICAgXCJ0dXJraXNoXCI6IFwiaXNvODg1OTlcIixcbiAgICBcInR1cmtpc2g4XCI6IFwiaXNvODg1OTlcIixcblxuICAgIFwidGhhaVwiOiBcImlzbzg4NTkxMVwiLFxuICAgIFwidGhhaThcIjogXCJpc284ODU5MTFcIixcblxuICAgIFwiY2VsdGljXCI6IFwiaXNvODg1OTE0XCIsXG4gICAgXCJjZWx0aWM4XCI6IFwiaXNvODg1OTE0XCIsXG4gICAgXCJpc29jZWx0aWNcIjogXCJpc284ODU5MTRcIixcblxuICAgIFwidGlzNjIwMFwiOiBcInRpczYyMFwiLFxuICAgIFwidGlzNjIwMjUyOTFcIjogXCJ0aXM2MjBcIixcbiAgICBcInRpczYyMDI1MzMwXCI6IFwidGlzNjIwXCIsXG5cbiAgICBcIjEwMDAwXCI6IFwibWFjcm9tYW5cIixcbiAgICBcIjEwMDA2XCI6IFwibWFjZ3JlZWtcIixcbiAgICBcIjEwMDA3XCI6IFwibWFjY3lyaWxsaWNcIixcbiAgICBcIjEwMDc5XCI6IFwibWFjaWNlbGFuZFwiLFxuICAgIFwiMTAwODFcIjogXCJtYWN0dXJraXNoXCIsXG5cbiAgICBcImNzcGM4Y29kZXBhZ2U0MzdcIjogXCJjcDQzN1wiLFxuICAgIFwiY3NwYzc3NWJhbHRpY1wiOiBcImNwNzc1XCIsXG4gICAgXCJjc3BjODUwbXVsdGlsaW5ndWFsXCI6IFwiY3A4NTBcIixcbiAgICBcImNzcGNwODUyXCI6IFwiY3A4NTJcIixcbiAgICBcImNzcGM4NjJsYXRpbmhlYnJld1wiOiBcImNwODYyXCIsXG4gICAgXCJjcGdyXCI6IFwiY3A4NjlcIixcblxuICAgIFwibXNlZVwiOiBcImNwMTI1MFwiLFxuICAgIFwibXNjeXJsXCI6IFwiY3AxMjUxXCIsXG4gICAgXCJtc2Fuc2lcIjogXCJjcDEyNTJcIixcbiAgICBcIm1zZ3JlZWtcIjogXCJjcDEyNTNcIixcbiAgICBcIm1zdHVya1wiOiBcImNwMTI1NFwiLFxuICAgIFwibXNoZWJyXCI6IFwiY3AxMjU1XCIsXG4gICAgXCJtc2FyYWJcIjogXCJjcDEyNTZcIixcbiAgICBcIndpbmJhbHRyaW1cIjogXCJjcDEyNTdcIixcblxuICAgIFwiY3AyMDg2NlwiOiBcImtvaThyXCIsXG4gICAgXCIyMDg2NlwiOiBcImtvaThyXCIsXG4gICAgXCJpYm04NzhcIjogXCJrb2k4clwiLFxuICAgIFwiY3Nrb2k4clwiOiBcImtvaThyXCIsXG5cbiAgICBcImNwMjE4NjZcIjogXCJrb2k4dVwiLFxuICAgIFwiMjE4NjZcIjogXCJrb2k4dVwiLFxuICAgIFwiaWJtMTE2OFwiOiBcImtvaTh1XCIsXG5cbiAgICBcInN0cmsxMDQ4MjAwMlwiOiBcInJrMTA0OFwiLFxuXG4gICAgXCJ0Y3ZuNTcxMlwiOiBcInRjdm5cIixcbiAgICBcInRjdm41NzEyMVwiOiBcInRjdm5cIixcblxuICAgIFwiZ2IxOTg4ODBcIjogXCJpc282NDZjblwiLFxuICAgIFwiY25cIjogXCJpc282NDZjblwiLFxuXG4gICAgXCJjc2lzbzE0amlzYzYyMjByb1wiOiBcImlzbzY0NmpwXCIsXG4gICAgXCJqaXNjNjIyMDE5Njlyb1wiOiBcImlzbzY0NmpwXCIsXG4gICAgXCJqcFwiOiBcImlzbzY0NmpwXCIsXG5cbiAgICBcImNzaHByb21hbjhcIjogXCJocHJvbWFuOFwiLFxuICAgIFwicjhcIjogXCJocHJvbWFuOFwiLFxuICAgIFwicm9tYW44XCI6IFwiaHByb21hbjhcIixcbiAgICBcInhyb21hbjhcIjogXCJocHJvbWFuOFwiLFxuICAgIFwiaWJtMTA1MVwiOiBcImhwcm9tYW44XCIsXG5cbiAgICBcIm1hY1wiOiBcIm1hY2ludG9zaFwiLFxuICAgIFwiY3NtYWNpbnRvc2hcIjogXCJtYWNpbnRvc2hcIixcbn07XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBHZW5lcmF0ZWQgZGF0YSBmb3Igc2JjcyBjb2RlYy4gRG9uJ3QgZWRpdCBtYW51YWxseS4gUmVnZW5lcmF0ZSB1c2luZyBnZW5lcmF0aW9uL2dlbi1zYmNzLmpzIHNjcmlwdC5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBcIjQzN1wiOiBcImNwNDM3XCIsXG4gIFwiNzM3XCI6IFwiY3A3MzdcIixcbiAgXCI3NzVcIjogXCJjcDc3NVwiLFxuICBcIjg1MFwiOiBcImNwODUwXCIsXG4gIFwiODUyXCI6IFwiY3A4NTJcIixcbiAgXCI4NTVcIjogXCJjcDg1NVwiLFxuICBcIjg1NlwiOiBcImNwODU2XCIsXG4gIFwiODU3XCI6IFwiY3A4NTdcIixcbiAgXCI4NThcIjogXCJjcDg1OFwiLFxuICBcIjg2MFwiOiBcImNwODYwXCIsXG4gIFwiODYxXCI6IFwiY3A4NjFcIixcbiAgXCI4NjJcIjogXCJjcDg2MlwiLFxuICBcIjg2M1wiOiBcImNwODYzXCIsXG4gIFwiODY0XCI6IFwiY3A4NjRcIixcbiAgXCI4NjVcIjogXCJjcDg2NVwiLFxuICBcIjg2NlwiOiBcImNwODY2XCIsXG4gIFwiODY5XCI6IFwiY3A4NjlcIixcbiAgXCI4NzRcIjogXCJ3aW5kb3dzODc0XCIsXG4gIFwiOTIyXCI6IFwiY3A5MjJcIixcbiAgXCIxMDQ2XCI6IFwiY3AxMDQ2XCIsXG4gIFwiMTEyNFwiOiBcImNwMTEyNFwiLFxuICBcIjExMjVcIjogXCJjcDExMjVcIixcbiAgXCIxMTI5XCI6IFwiY3AxMTI5XCIsXG4gIFwiMTEzM1wiOiBcImNwMTEzM1wiLFxuICBcIjExNjFcIjogXCJjcDExNjFcIixcbiAgXCIxMTYyXCI6IFwiY3AxMTYyXCIsXG4gIFwiMTE2M1wiOiBcImNwMTE2M1wiLFxuICBcIjEyNTBcIjogXCJ3aW5kb3dzMTI1MFwiLFxuICBcIjEyNTFcIjogXCJ3aW5kb3dzMTI1MVwiLFxuICBcIjEyNTJcIjogXCJ3aW5kb3dzMTI1MlwiLFxuICBcIjEyNTNcIjogXCJ3aW5kb3dzMTI1M1wiLFxuICBcIjEyNTRcIjogXCJ3aW5kb3dzMTI1NFwiLFxuICBcIjEyNTVcIjogXCJ3aW5kb3dzMTI1NVwiLFxuICBcIjEyNTZcIjogXCJ3aW5kb3dzMTI1NlwiLFxuICBcIjEyNTdcIjogXCJ3aW5kb3dzMTI1N1wiLFxuICBcIjEyNThcIjogXCJ3aW5kb3dzMTI1OFwiLFxuICBcIjI4NTkxXCI6IFwiaXNvODg1OTFcIixcbiAgXCIyODU5MlwiOiBcImlzbzg4NTkyXCIsXG4gIFwiMjg1OTNcIjogXCJpc284ODU5M1wiLFxuICBcIjI4NTk0XCI6IFwiaXNvODg1OTRcIixcbiAgXCIyODU5NVwiOiBcImlzbzg4NTk1XCIsXG4gIFwiMjg1OTZcIjogXCJpc284ODU5NlwiLFxuICBcIjI4NTk3XCI6IFwiaXNvODg1OTdcIixcbiAgXCIyODU5OFwiOiBcImlzbzg4NTk4XCIsXG4gIFwiMjg1OTlcIjogXCJpc284ODU5OVwiLFxuICBcIjI4NjAwXCI6IFwiaXNvODg1OTEwXCIsXG4gIFwiMjg2MDFcIjogXCJpc284ODU5MTFcIixcbiAgXCIyODYwM1wiOiBcImlzbzg4NTkxM1wiLFxuICBcIjI4NjA0XCI6IFwiaXNvODg1OTE0XCIsXG4gIFwiMjg2MDVcIjogXCJpc284ODU5MTVcIixcbiAgXCIyODYwNlwiOiBcImlzbzg4NTkxNlwiLFxuICBcIndpbmRvd3M4NzRcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIuKCrO+/ve+/ve+/ve+/veKApu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veKAmOKAmeKAnOKAneKAouKAk+KAlO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vcKg4LiB4LiC4LiD4LiE4LiF4LiG4LiH4LiI4LiJ4LiK4LiL4LiM4LiN4LiO4LiP4LiQ4LiR4LiS4LiT4LiU4LiV4LiW4LiX4LiY4LiZ4Lia4Lib4Lic4Lid4Lie4Lif4Lig4Lih4Lii4Lij4Lik4Lil4Lim4Lin4Lio4Lip4Liq4Lir4Lis4Lit4Liu4Liv4Liw4Lix4Liy4Liz4Li04Li14Li24Li34Li44Li54Li677+977+977+977+94Li/4LmA4LmB4LmC4LmD4LmE4LmF4LmG4LmH4LmI4LmJ4LmK4LmL4LmM4LmN4LmO4LmP4LmQ4LmR4LmS4LmT4LmU4LmV4LmW4LmX4LmY4LmZ4Lma4Lmb77+977+977+977+9XCJcbiAgfSxcbiAgXCJ3aW44NzRcIjogXCJ3aW5kb3dzODc0XCIsXG4gIFwiY3A4NzRcIjogXCJ3aW5kb3dzODc0XCIsXG4gIFwid2luZG93czEyNTBcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIuKCrO+/veKAmu+/veKAnuKApuKAoOKAoe+/veKAsMWg4oC5xZrFpMW9xbnvv73igJjigJnigJzigJ3igKLigJPigJTvv73ihKLFoeKAusWbxaXFvsW6wqDLh8uYxYHCpMSEwqbCp8KowqnFnsKrwqzCrcKuxbvCsMKxy5vFgsK0wrXCtsK3wrjEhcWfwrvEvcudxL7FvMWUw4HDgsSCw4TEucSGw4fEjMOJxJjDi8Saw43DjsSOxJDFg8WHw5PDlMWQw5bDl8WYxa7DmsWww5zDncWiw5/FlcOhw6LEg8OkxLrEh8OnxI3DqcSZw6vEm8Otw67Ej8SRxYTFiMOzw7TFkcO2w7fFmcWvw7rFscO8w73Fo8uZXCJcbiAgfSxcbiAgXCJ3aW4xMjUwXCI6IFwid2luZG93czEyNTBcIixcbiAgXCJjcDEyNTBcIjogXCJ3aW5kb3dzMTI1MFwiLFxuICBcIndpbmRvd3MxMjUxXCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLQgtCD4oCa0ZPigJ7igKbigKDigKHigqzigLDQieKAudCK0IzQi9CP0ZLigJjigJnigJzigJ3igKLigJPigJTvv73ihKLRmeKAutGa0ZzRm9GfwqDQjtGe0IjCpNKQwqbCp9CBwqnQhMKrwqzCrcKu0IfCsMKx0IbRltKRwrXCtsK30ZHihJbRlMK70ZjQhdGV0ZfQkNCR0JLQk9CU0JXQltCX0JjQmdCa0JvQnNCd0J7Qn9Cg0KHQotCj0KTQpdCm0KfQqNCp0KrQq9Cs0K3QrtCv0LDQsdCy0LPQtNC10LbQt9C40LnQutC70LzQvdC+0L/RgNGB0YLRg9GE0YXRhtGH0YjRidGK0YvRjNGN0Y7Rj1wiXG4gIH0sXG4gIFwid2luMTI1MVwiOiBcIndpbmRvd3MxMjUxXCIsXG4gIFwiY3AxMjUxXCI6IFwid2luZG93czEyNTFcIixcbiAgXCJ3aW5kb3dzMTI1MlwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwi4oKs77+94oCaxpLigJ7igKbigKDigKHLhuKAsMWg4oC5xZLvv73Fve+/ve+/veKAmOKAmeKAnOKAneKAouKAk+KAlMuc4oSixaHigLrFk++/vcW+xbjCoMKhwqLCo8KkwqXCpsKnwqjCqcKqwqvCrMKtwq7Cr8KwwrHCssKzwrTCtcK2wrfCuMK5wrrCu8K8wr3CvsK/w4DDgcOCw4PDhMOFw4bDh8OIw4nDisOLw4zDjcOOw4/DkMORw5LDk8OUw5XDlsOXw5jDmcOaw5vDnMOdw57Dn8Ogw6HDosOjw6TDpcOmw6fDqMOpw6rDq8Osw63DrsOvw7DDscOyw7PDtMO1w7bDt8O4w7nDusO7w7zDvcO+w79cIlxuICB9LFxuICBcIndpbjEyNTJcIjogXCJ3aW5kb3dzMTI1MlwiLFxuICBcImNwMTI1MlwiOiBcIndpbmRvd3MxMjUyXCIsXG4gIFwid2luZG93czEyNTNcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIuKCrO+/veKAmsaS4oCe4oCm4oCg4oCh77+94oCw77+94oC577+977+977+977+977+94oCY4oCZ4oCc4oCd4oCi4oCT4oCU77+94oSi77+94oC677+977+977+977+9wqDOhc6GwqPCpMKlwqbCp8Kowqnvv73Cq8Kswq3CruKAlcKwwrHCssKzzoTCtcK2wrfOiM6JzorCu86Mwr3Ojs6PzpDOkc6SzpPOlM6VzpbOl86YzpnOms6bzpzOnc6ezp/OoM6h77+9zqPOpM6lzqbOp86ozqnOqs6rzqzOrc6uzq/OsM6xzrLOs860zrXOts63zrjOuc66zrvOvM69zr7Ov8+Az4HPgs+Dz4TPhc+Gz4fPiM+Jz4rPi8+Mz43Pju+/vVwiXG4gIH0sXG4gIFwid2luMTI1M1wiOiBcIndpbmRvd3MxMjUzXCIsXG4gIFwiY3AxMjUzXCI6IFwid2luZG93czEyNTNcIixcbiAgXCJ3aW5kb3dzMTI1NFwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwi4oKs77+94oCaxpLigJ7igKbigKDigKHLhuKAsMWg4oC5xZLvv73vv73vv73vv73igJjigJnigJzigJ3igKLigJPigJTLnOKEosWh4oC6xZPvv73vv73FuMKgwqHCosKjwqTCpcKmwqfCqMKpwqrCq8Kswq3CrsKvwrDCscKywrPCtMK1wrbCt8K4wrnCusK7wrzCvcK+wr/DgMOBw4LDg8OEw4XDhsOHw4jDicOKw4vDjMONw47Dj8Sew5HDksOTw5TDlcOWw5fDmMOZw5rDm8OcxLDFnsOfw6DDocOiw6PDpMOlw6bDp8Oow6nDqsOrw6zDrcOuw6/En8Oxw7LDs8O0w7XDtsO3w7jDucO6w7vDvMSxxZ/Dv1wiXG4gIH0sXG4gIFwid2luMTI1NFwiOiBcIndpbmRvd3MxMjU0XCIsXG4gIFwiY3AxMjU0XCI6IFwid2luZG93czEyNTRcIixcbiAgXCJ3aW5kb3dzMTI1NVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwi4oKs77+94oCaxpLigJ7igKbigKDigKHLhuKAsO+/veKAue+/ve+/ve+/ve+/ve+/veKAmOKAmeKAnOKAneKAouKAk+KAlMuc4oSi77+94oC677+977+977+977+9wqDCocKiwqPigqrCpcKmwqfCqMKpw5fCq8Kswq3CrsKvwrDCscKywrPCtMK1wrbCt8K4wrnDt8K7wrzCvcK+wr/WsNax1rLWs9a01rXWtta31rjWuda61rvWvNa91r7Wv9eA14HXgteD17DXsdey17PXtO+/ve+/ve+/ve+/ve+/ve+/ve+/vdeQ15HXkteT15TXldeW15fXmNeZ15rXm9ec153Xntef16DXodei16PXpNel16bXp9eo16nXqu+/ve+/veKAjuKAj++/vVwiXG4gIH0sXG4gIFwid2luMTI1NVwiOiBcIndpbmRvd3MxMjU1XCIsXG4gIFwiY3AxMjU1XCI6IFwid2luZG93czEyNTVcIixcbiAgXCJ3aW5kb3dzMTI1NlwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwi4oKs2b7igJrGkuKAnuKApuKAoOKAocuG4oCw2bnigLnFktqG2pjaiNqv4oCY4oCZ4oCc4oCd4oCi4oCT4oCU2qnihKLakeKAusWT4oCM4oCN2rrCoNiMwqLCo8KkwqXCpsKnwqjCqdq+wqvCrMKtwq7Cr8KwwrHCssKzwrTCtcK2wrfCuMK52JvCu8K8wr3Cvtif24HYodii2KPYpNil2KbYp9io2KnYqtir2KzYrdiu2K/YsNix2LLYs9i02LXYtsOX2LfYuNi52LrZgNmB2YLZg8Og2YTDotmF2YbZh9mIw6fDqMOpw6rDq9mJ2YrDrsOv2YvZjNmN2Y7DtNmP2ZDDt9mRw7nZksO7w7zigI7igI/bklwiXG4gIH0sXG4gIFwid2luMTI1NlwiOiBcIndpbmRvd3MxMjU2XCIsXG4gIFwiY3AxMjU2XCI6IFwid2luZG93czEyNTZcIixcbiAgXCJ3aW5kb3dzMTI1N1wiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwi4oKs77+94oCa77+94oCe4oCm4oCg4oCh77+94oCw77+94oC577+9wqjLh8K477+94oCY4oCZ4oCc4oCd4oCi4oCT4oCU77+94oSi77+94oC677+9wq/Lm++/vcKg77+9wqLCo8Kk77+9wqbCp8OYwqnFlsKrwqzCrcKuw4bCsMKxwrLCs8K0wrXCtsK3w7jCucWXwrvCvMK9wr7DpsSExK7EgMSGw4TDhcSYxJLEjMOJxbnElsSixLbEqsS7xaDFg8WFw5PFjMOVw5bDl8WyxYHFmsWqw5zFu8W9w5/EhcSvxIHEh8Okw6XEmcSTxI3DqcW6xJfEo8S3xKvEvMWhxYTFhsOzxY3DtcO2w7fFs8WCxZvFq8O8xbzFvsuZXCJcbiAgfSxcbiAgXCJ3aW4xMjU3XCI6IFwid2luZG93czEyNTdcIixcbiAgXCJjcDEyNTdcIjogXCJ3aW5kb3dzMTI1N1wiLFxuICBcIndpbmRvd3MxMjU4XCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLigqzvv73igJrGkuKAnuKApuKAoOKAocuG4oCw77+94oC5xZLvv73vv73vv73vv73igJjigJnigJzigJ3igKLigJPigJTLnOKEou+/veKAusWT77+977+9xbjCoMKhwqLCo8KkwqXCpsKnwqjCqcKqwqvCrMKtwq7Cr8KwwrHCssKzwrTCtcK2wrfCuMK5wrrCu8K8wr3CvsK/w4DDgcOCxILDhMOFw4bDh8OIw4nDisOLzIDDjcOOw4/EkMORzInDk8OUxqDDlsOXw5jDmcOaw5vDnMavzIPDn8Ogw6HDosSDw6TDpcOmw6fDqMOpw6rDq8yBw63DrsOvxJHDscyjw7PDtMahw7bDt8O4w7nDusO7w7zGsOKCq8O/XCJcbiAgfSxcbiAgXCJ3aW4xMjU4XCI6IFwid2luZG93czEyNThcIixcbiAgXCJjcDEyNThcIjogXCJ3aW5kb3dzMTI1OFwiLFxuICBcImlzbzg4NTkxXCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLCgMKBwoLCg8KEwoXChsKHwojCicKKwovCjMKNwo7Cj8KQwpHCksKTwpTClcKWwpfCmMKZwprCm8Kcwp3CnsKfwqDCocKiwqPCpMKlwqbCp8KowqnCqsKrwqzCrcKuwq/CsMKxwrLCs8K0wrXCtsK3wrjCucK6wrvCvMK9wr7Cv8OAw4HDgsODw4TDhcOGw4fDiMOJw4rDi8OMw43DjsOPw5DDkcOSw5PDlMOVw5bDl8OYw5nDmsObw5zDncOew5/DoMOhw6LDo8Okw6XDpsOnw6jDqcOqw6vDrMOtw67Dr8Oww7HDssOzw7TDtcO2w7fDuMO5w7rDu8O8w73DvsO/XCJcbiAgfSxcbiAgXCJjcDI4NTkxXCI6IFwiaXNvODg1OTFcIixcbiAgXCJpc284ODU5MlwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiwoDCgcKCwoPChMKFwobCh8KIwonCisKLwozCjcKOwo/CkMKRwpLCk8KUwpXClsKXwpjCmcKawpvCnMKdwp7Cn8KgxITLmMWBwqTEvcWawqfCqMWgxZ7FpMW5wq3FvcW7wrDEhcubxYLCtMS+xZvLh8K4xaHFn8WlxbrLncW+xbzFlMOBw4LEgsOExLnEhsOHxIzDicSYw4vEmsONw47EjsSQxYPFh8OTw5TFkMOWw5fFmMWuw5rFsMOcw53FosOfxZXDocOixIPDpMS6xIfDp8SNw6nEmcOrxJvDrcOuxI/EkcWExYjDs8O0xZHDtsO3xZnFr8O6xbHDvMO9xaPLmVwiXG4gIH0sXG4gIFwiY3AyODU5MlwiOiBcImlzbzg4NTkyXCIsXG4gIFwiaXNvODg1OTNcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIsKAwoHCgsKDwoTChcKGwofCiMKJworCi8KMwo3CjsKPwpDCkcKSwpPClMKVwpbCl8KYwpnCmsKbwpzCncKewp/CoMSmy5jCo8Kk77+9xKTCp8KoxLDFnsSexLTCre+/vcW7wrDEp8KywrPCtMK1xKXCt8K4xLHFn8SfxLXCve+/vcW8w4DDgcOC77+9w4TEisSIw4fDiMOJw4rDi8OMw43DjsOP77+9w5HDksOTw5TEoMOWw5fEnMOZw5rDm8OcxazFnMOfw6DDocOi77+9w6TEi8SJw6fDqMOpw6rDq8Osw63DrsOv77+9w7HDssOzw7TEocO2w7fEncO5w7rDu8O8xa3FncuZXCJcbiAgfSxcbiAgXCJjcDI4NTkzXCI6IFwiaXNvODg1OTNcIixcbiAgXCJpc284ODU5NFwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiwoDCgcKCwoPChMKFwobCh8KIwonCisKLwozCjcKOwo/CkMKRwpLCk8KUwpXClsKXwpjCmcKawpvCnMKdwp7Cn8KgxITEuMWWwqTEqMS7wqfCqMWgxJLEosWmwq3FvcKvwrDEhcubxZfCtMSpxLzLh8K4xaHEk8SjxafFisW+xYvEgMOBw4LDg8OEw4XDhsSuxIzDicSYw4vElsONw47EqsSQxYXFjMS2w5TDlcOWw5fDmMWyw5rDm8OcxajFqsOfxIHDocOiw6PDpMOlw6bEr8SNw6nEmcOrxJfDrcOuxKvEkcWGxY3Et8O0w7XDtsO3w7jFs8O6w7vDvMWpxavLmVwiXG4gIH0sXG4gIFwiY3AyODU5NFwiOiBcImlzbzg4NTk0XCIsXG4gIFwiaXNvODg1OTVcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIsKAwoHCgsKDwoTChcKGwofCiMKJworCi8KMwo3CjsKPwpDCkcKSwpPClMKVwpbCl8KYwpnCmsKbwpzCncKewp/CoNCB0ILQg9CE0IXQhtCH0IjQidCK0IvQjMKt0I7Qj9CQ0JHQktCT0JTQldCW0JfQmNCZ0JrQm9Cc0J3QntCf0KDQodCi0KPQpNCl0KbQp9Co0KnQqtCr0KzQrdCu0K/QsNCx0LLQs9C00LXQttC30LjQudC60LvQvNC90L7Qv9GA0YHRgtGD0YTRhdGG0YfRiNGJ0YrRi9GM0Y3RjtGP4oSW0ZHRktGT0ZTRldGW0ZfRmNGZ0ZrRm9GcwqfRntGfXCJcbiAgfSxcbiAgXCJjcDI4NTk1XCI6IFwiaXNvODg1OTVcIixcbiAgXCJpc284ODU5NlwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiwoDCgcKCwoPChMKFwobCh8KIwonCisKLwozCjcKOwo/CkMKRwpLCk8KUwpXClsKXwpjCmcKawpvCnMKdwp7Cn8Kg77+977+977+9wqTvv73vv73vv73vv73vv73vv73vv73YjMKt77+977+977+977+977+977+977+977+977+977+977+977+977+92Jvvv73vv73vv73Yn++/vdih2KLYo9ik2KXYptin2KjYqdiq2KvYrNit2K7Yr9iw2LHYstiz2LTYtdi22LfYuNi52Lrvv73vv73vv73vv73vv73ZgNmB2YLZg9mE2YXZhtmH2YjZidmK2YvZjNmN2Y7Zj9mQ2ZHZku+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vVwiXG4gIH0sXG4gIFwiY3AyODU5NlwiOiBcImlzbzg4NTk2XCIsXG4gIFwiaXNvODg1OTdcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIsKAwoHCgsKDwoTChcKGwofCiMKJworCi8KMwo3CjsKPwpDCkcKSwpPClMKVwpbCl8KYwpnCmsKbwpzCncKewp/CoOKAmOKAmcKj4oKs4oKvwqbCp8KowqnNusKrwqzCre+/veKAlcKwwrHCssKzzoTOhc6GwrfOiM6JzorCu86Mwr3Ojs6PzpDOkc6SzpPOlM6VzpbOl86YzpnOms6bzpzOnc6ezp/OoM6h77+9zqPOpM6lzqbOp86ozqnOqs6rzqzOrc6uzq/OsM6xzrLOs860zrXOts63zrjOuc66zrvOvM69zr7Ov8+Az4HPgs+Dz4TPhc+Gz4fPiM+Jz4rPi8+Mz43Pju+/vVwiXG4gIH0sXG4gIFwiY3AyODU5N1wiOiBcImlzbzg4NTk3XCIsXG4gIFwiaXNvODg1OThcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIsKAwoHCgsKDwoTChcKGwofCiMKJworCi8KMwo3CjsKPwpDCkcKSwpPClMKVwpbCl8KYwpnCmsKbwpzCncKewp/CoO+/vcKiwqPCpMKlwqbCp8KowqnDl8KrwqzCrcKuwq/CsMKxwrLCs8K0wrXCtsK3wrjCucO3wrvCvMK9wr7vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73igJfXkNeR15LXk9eU15XXlteX15jXmdea15vXnNed157Xn9eg16HXotej16TXpdem16fXqNep16rvv73vv73igI7igI/vv71cIlxuICB9LFxuICBcImNwMjg1OThcIjogXCJpc284ODU5OFwiLFxuICBcImlzbzg4NTk5XCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLCgMKBwoLCg8KEwoXChsKHwojCicKKwovCjMKNwo7Cj8KQwpHCksKTwpTClcKWwpfCmMKZwprCm8Kcwp3CnsKfwqDCocKiwqPCpMKlwqbCp8KowqnCqsKrwqzCrcKuwq/CsMKxwrLCs8K0wrXCtsK3wrjCucK6wrvCvMK9wr7Cv8OAw4HDgsODw4TDhcOGw4fDiMOJw4rDi8OMw43DjsOPxJ7DkcOSw5PDlMOVw5bDl8OYw5nDmsObw5zEsMWew5/DoMOhw6LDo8Okw6XDpsOnw6jDqcOqw6vDrMOtw67Dr8Sfw7HDssOzw7TDtcO2w7fDuMO5w7rDu8O8xLHFn8O/XCJcbiAgfSxcbiAgXCJjcDI4NTk5XCI6IFwiaXNvODg1OTlcIixcbiAgXCJpc284ODU5MTBcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIsKAwoHCgsKDwoTChcKGwofCiMKJworCi8KMwo3CjsKPwpDCkcKSwpPClMKVwpbCl8KYwpnCmsKbwpzCncKewp/CoMSExJLEosSqxKjEtsKnxLvEkMWgxabFvcKtxarFisKwxIXEk8SjxKvEqcS3wrfEvMSRxaHFp8W+4oCVxavFi8SAw4HDgsODw4TDhcOGxK7EjMOJxJjDi8SWw43DjsOPw5DFhcWMw5PDlMOVw5bFqMOYxbLDmsObw5zDncOew5/EgcOhw6LDo8Okw6XDpsSvxI3DqcSZw6vEl8Otw67Dr8OwxYbFjcOzw7TDtcO2xanDuMWzw7rDu8O8w73DvsS4XCJcbiAgfSxcbiAgXCJjcDI4NjAwXCI6IFwiaXNvODg1OTEwXCIsXG4gIFwiaXNvODg1OTExXCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLCgMKBwoLCg8KEwoXChsKHwojCicKKwovCjMKNwo7Cj8KQwpHCksKTwpTClcKWwpfCmMKZwprCm8Kcwp3CnsKfwqDguIHguILguIPguITguIXguIbguIfguIjguInguIrguIvguIzguI3guI7guI/guJDguJHguJLguJPguJTguJXguJbguJfguJjguJnguJrguJvguJzguJ3guJ7guJ/guKDguKHguKLguKPguKTguKXguKbguKfguKjguKnguKrguKvguKzguK3guK7guK/guLDguLHguLLguLPguLTguLXguLbguLfguLjguLnguLrvv73vv73vv73vv73guL/guYDguYHguYLguYPguYTguYXguYbguYfguYjguYnguYrguYvguYzguY3guY7guY/guZDguZHguZLguZPguZTguZXguZbguZfguZjguZnguZrguZvvv73vv73vv73vv71cIlxuICB9LFxuICBcImNwMjg2MDFcIjogXCJpc284ODU5MTFcIixcbiAgXCJpc284ODU5MTNcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIsKAwoHCgsKDwoTChcKGwofCiMKJworCi8KMwo3CjsKPwpDCkcKSwpPClMKVwpbCl8KYwpnCmsKbwpzCncKewp/CoOKAncKiwqPCpOKAnsKmwqfDmMKpxZbCq8Kswq3CrsOGwrDCscKywrPigJzCtcK2wrfDuMK5xZfCu8K8wr3CvsOmxITErsSAxIbDhMOFxJjEksSMw4nFucSWxKLEtsSqxLvFoMWDxYXDk8WMw5XDlsOXxbLFgcWaxarDnMW7xb3Dn8SFxK/EgcSHw6TDpcSZxJPEjcOpxbrEl8SjxLfEq8S8xaHFhMWGw7PFjcO1w7bDt8WzxYLFm8Wrw7zFvMW+4oCZXCJcbiAgfSxcbiAgXCJjcDI4NjAzXCI6IFwiaXNvODg1OTEzXCIsXG4gIFwiaXNvODg1OTE0XCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLCgMKBwoLCg8KEwoXChsKHwojCicKKwovCjMKNwo7Cj8KQwpHCksKTwpTClcKWwpfCmMKZwprCm8Kcwp3CnsKfwqDhuILhuIPCo8SKxIvhuIrCp+G6gMKp4bqC4biL4buywq3CrsW44bie4bifxKDEoeG5gOG5gcK24bmW4bqB4bmX4bqD4bmg4buz4bqE4bqF4bmhw4DDgcOCw4PDhMOFw4bDh8OIw4nDisOLw4zDjcOOw4/FtMORw5LDk8OUw5XDluG5qsOYw5nDmsObw5zDncW2w5/DoMOhw6LDo8Okw6XDpsOnw6jDqcOqw6vDrMOtw67Dr8W1w7HDssOzw7TDtcO24bmrw7jDucO6w7vDvMO9xbfDv1wiXG4gIH0sXG4gIFwiY3AyODYwNFwiOiBcImlzbzg4NTkxNFwiLFxuICBcImlzbzg4NTkxNVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiwoDCgcKCwoPChMKFwobCh8KIwonCisKLwozCjcKOwo/CkMKRwpLCk8KUwpXClsKXwpjCmcKawpvCnMKdwp7Cn8KgwqHCosKj4oKswqXFoMKnxaHCqcKqwqvCrMKtwq7Cr8KwwrHCssKzxb3CtcK2wrfFvsK5wrrCu8WSxZPFuMK/w4DDgcOCw4PDhMOFw4bDh8OIw4nDisOLw4zDjcOOw4/DkMORw5LDk8OUw5XDlsOXw5jDmcOaw5vDnMOdw57Dn8Ogw6HDosOjw6TDpcOmw6fDqMOpw6rDq8Osw63DrsOvw7DDscOyw7PDtMO1w7bDt8O4w7nDusO7w7zDvcO+w79cIlxuICB9LFxuICBcImNwMjg2MDVcIjogXCJpc284ODU5MTVcIixcbiAgXCJpc284ODU5MTZcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIsKAwoHCgsKDwoTChcKGwofCiMKJworCi8KMwo3CjsKPwpDCkcKSwpPClMKVwpbCl8KYwpnCmsKbwpzCncKewp/CoMSExIXFgeKCrOKAnsWgwqfFocKpyJjCq8W5wq3FusW7wrDCscSMxYLFveKAncK2wrfFvsSNyJnCu8WSxZPFuMW8w4DDgcOCxILDhMSGw4bDh8OIw4nDisOLw4zDjcOOw4/EkMWDw5LDk8OUxZDDlsWaxbDDmcOaw5vDnMSYyJrDn8Ogw6HDosSDw6TEh8Omw6fDqMOpw6rDq8Osw63DrsOvxJHFhMOyw7PDtMWRw7bFm8Wxw7nDusO7w7zEmcibw79cIlxuICB9LFxuICBcImNwMjg2MDZcIjogXCJpc284ODU5MTZcIixcbiAgXCJjcDQzN1wiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiw4fDvMOpw6LDpMOgw6XDp8Oqw6vDqMOvw67DrMOEw4XDicOmw4bDtMO2w7LDu8O5w7/DlsOcwqLCo8Kl4oKnxpLDocOtw7PDusOxw5HCqsK6wr/ijJDCrMK9wrzCocKrwrvilpHilpLilpPilILilKTilaHilaLilZbilZXilaPilZHilZfilZ3ilZzilZvilJDilJTilLTilKzilJzilIDilLzilZ7ilZ/ilZrilZTilanilabilaDilZDilazilafilajilaTilaXilZnilZjilZLilZPilavilarilJjilIzilojiloTilozilpDiloDOscOfzpPPgM6jz4PCtc+EzqbOmM6pzrTiiJ7Phs614oip4omhwrHiiaXiiaTijKDijKHDt+KJiMKw4oiZwrfiiJrigb/CsuKWoMKgXCJcbiAgfSxcbiAgXCJpYm00MzdcIjogXCJjcDQzN1wiLFxuICBcImNzaWJtNDM3XCI6IFwiY3A0MzdcIixcbiAgXCJjcDczN1wiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwizpHOks6TzpTOlc6WzpfOmM6ZzprOm86czp3Ons6fzqDOoc6jzqTOpc6mzqfOqM6pzrHOss6zzrTOtc62zrfOuM65zrrOu868zr3Ovs6/z4DPgc+Dz4LPhM+Fz4bPh8+I4paR4paS4paT4pSC4pSk4pWh4pWi4pWW4pWV4pWj4pWR4pWX4pWd4pWc4pWb4pSQ4pSU4pS04pSs4pSc4pSA4pS84pWe4pWf4pWa4pWU4pWp4pWm4pWg4pWQ4pWs4pWn4pWo4pWk4pWl4pWZ4pWY4pWS4pWT4pWr4pWq4pSY4pSM4paI4paE4paM4paQ4paAz4nOrM6tzq7Pis6vz4zPjc+Lz47Ohs6IzonOis6Mzo7Oj8Kx4oml4omkzqrOq8O34omIwrDiiJnCt+KImuKBv8Ky4pagwqBcIlxuICB9LFxuICBcImlibTczN1wiOiBcImNwNzM3XCIsXG4gIFwiY3NpYm03MzdcIjogXCJjcDczN1wiLFxuICBcImNwNzc1XCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLEhsO8w6nEgcOkxKPDpcSHxYLEk8WWxZfEq8W5w4TDhcOJw6bDhsWNw7bEosKixZrFm8OWw5zDuMKjw5jDl8KkxIDEqsOzxbvFvMW64oCdwqbCqcKuwqzCvcK8xYHCq8K74paR4paS4paT4pSC4pSkxITEjMSYxJbilaPilZHilZfilZ3ErsWg4pSQ4pSU4pS04pSs4pSc4pSA4pS8xbLFquKVmuKVlOKVqeKVpuKVoOKVkOKVrMW9xIXEjcSZxJfEr8WhxbPFq8W+4pSY4pSM4paI4paE4paM4paQ4paAw5PDn8WMxYPDtcOVwrXFhMS2xLfEu8S8xYbEksWF4oCZwq3CseKAnMK+wrbCp8O34oCewrDiiJnCt8K5wrPCsuKWoMKgXCJcbiAgfSxcbiAgXCJpYm03NzVcIjogXCJjcDc3NVwiLFxuICBcImNzaWJtNzc1XCI6IFwiY3A3NzVcIixcbiAgXCJjcDg1MFwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiw4fDvMOpw6LDpMOgw6XDp8Oqw6vDqMOvw67DrMOEw4XDicOmw4bDtMO2w7LDu8O5w7/DlsOcw7jCo8OYw5fGksOhw63Ds8O6w7HDkcKqwrrCv8KuwqzCvcK8wqHCq8K74paR4paS4paT4pSC4pSkw4HDgsOAwqnilaPilZHilZfilZ3CosKl4pSQ4pSU4pS04pSs4pSc4pSA4pS8w6PDg+KVmuKVlOKVqeKVpuKVoOKVkOKVrMKkw7DDkMOKw4vDiMSxw43DjsOP4pSY4pSM4paI4paEwqbDjOKWgMOTw5/DlMOSw7XDlcK1w77DnsOaw5vDmcO9w53Cr8K0wq3CseKAl8K+wrbCp8O3wrjCsMKowrfCucKzwrLilqDCoFwiXG4gIH0sXG4gIFwiaWJtODUwXCI6IFwiY3A4NTBcIixcbiAgXCJjc2libTg1MFwiOiBcImNwODUwXCIsXG4gIFwiY3A4NTJcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIsOHw7zDqcOiw6TFr8SHw6fFgsOrxZDFkcOuxbnDhMSGw4nEucS6w7TDtsS9xL7FmsWbw5bDnMWkxaXFgcOXxI3DocOtw7PDusSExIXFvcW+xJjEmcKsxbrEjMWfwqvCu+KWkeKWkuKWk+KUguKUpMOBw4LEmsWe4pWj4pWR4pWX4pWdxbvFvOKUkOKUlOKUtOKUrOKUnOKUgOKUvMSCxIPilZrilZTilanilabilaDilZDilazCpMSRxJDEjsOLxI/Fh8ONw47Em+KUmOKUjOKWiOKWhMWixa7iloDDk8Ofw5TFg8WExYjFoMWhxZTDmsWVxbDDvcOdxaPCtMKty53Lm8uHy5jCp8O3wrjCsMKoy5nFscWYxZnilqDCoFwiXG4gIH0sXG4gIFwiaWJtODUyXCI6IFwiY3A4NTJcIixcbiAgXCJjc2libTg1MlwiOiBcImNwODUyXCIsXG4gIFwiY3A4NTVcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcItGS0ILRk9CD0ZHQgdGU0ITRldCF0ZbQhtGX0IfRmNCI0ZnQidGa0IrRm9CL0ZzQjNGe0I7Rn9CP0Y7QrtGK0KrQsNCQ0LHQkdGG0KbQtNCU0LXQldGE0KTQs9CTwqvCu+KWkeKWkuKWk+KUguKUpNGF0KXQuNCY4pWj4pWR4pWX4pWd0LnQmeKUkOKUlOKUtOKUrOKUnOKUgOKUvNC60JrilZrilZTilanilabilaDilZDilazCpNC70JvQvNCc0L3QndC+0J7Qv+KUmOKUjOKWiOKWhNCf0Y/iloDQr9GA0KDRgdCh0YLQotGD0KPQttCW0LLQktGM0KzihJbCrdGL0KvQt9CX0YjQqNGN0K3RidCp0YfQp8Kn4pagwqBcIlxuICB9LFxuICBcImlibTg1NVwiOiBcImNwODU1XCIsXG4gIFwiY3NpYm04NTVcIjogXCJjcDg1NVwiLFxuICBcImNwODU2XCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLXkNeR15LXk9eU15XXlteX15jXmdea15vXnNed157Xn9eg16HXotej16TXpdem16fXqNep16rvv73Co++/vcOX77+977+977+977+977+977+977+977+977+977+9wq7CrMK9wrzvv73Cq8K74paR4paS4paT4pSC4pSk77+977+977+9wqnilaPilZHilZfilZ3CosKl4pSQ4pSU4pS04pSs4pSc4pSA4pS877+977+94pWa4pWU4pWp4pWm4pWg4pWQ4pWswqTvv73vv73vv73vv73vv73vv73vv73vv73vv73ilJjilIzilojiloTCpu+/veKWgO+/ve+/ve+/ve+/ve+/ve+/vcK177+977+977+977+977+977+977+9wq/CtMKtwrHigJfCvsK2wqfDt8K4wrDCqMK3wrnCs8Ky4pagwqBcIlxuICB9LFxuICBcImlibTg1NlwiOiBcImNwODU2XCIsXG4gIFwiY3NpYm04NTZcIjogXCJjcDg1NlwiLFxuICBcImNwODU3XCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLDh8O8w6nDosOkw6DDpcOnw6rDq8Oow6/DrsSxw4TDhcOJw6bDhsO0w7bDssO7w7nEsMOWw5zDuMKjw5jFnsWfw6HDrcOzw7rDscORxJ7En8K/wq7CrMK9wrzCocKrwrvilpHilpLilpPilILilKTDgcOCw4DCqeKVo+KVkeKVl+KVncKiwqXilJDilJTilLTilKzilJzilIDilLzDo8OD4pWa4pWU4pWp4pWm4pWg4pWQ4pWswqTCusKqw4rDi8OI77+9w43DjsOP4pSY4pSM4paI4paEwqbDjOKWgMOTw5/DlMOSw7XDlcK177+9w5fDmsObw5nDrMO/wq/CtMKtwrHvv73CvsK2wqfDt8K4wrDCqMK3wrnCs8Ky4pagwqBcIlxuICB9LFxuICBcImlibTg1N1wiOiBcImNwODU3XCIsXG4gIFwiY3NpYm04NTdcIjogXCJjcDg1N1wiLFxuICBcImNwODU4XCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLDh8O8w6nDosOkw6DDpcOnw6rDq8Oow6/DrsOsw4TDhcOJw6bDhsO0w7bDssO7w7nDv8OWw5zDuMKjw5jDl8aSw6HDrcOzw7rDscORwqrCusK/wq7CrMK9wrzCocKrwrvilpHilpLilpPilILilKTDgcOCw4DCqeKVo+KVkeKVl+KVncKiwqXilJDilJTilLTilKzilJzilIDilLzDo8OD4pWa4pWU4pWp4pWm4pWg4pWQ4pWswqTDsMOQw4rDi8OI4oKsw43DjsOP4pSY4pSM4paI4paEwqbDjOKWgMOTw5/DlMOSw7XDlcK1w77DnsOaw5vDmcO9w53Cr8K0wq3CseKAl8K+wrbCp8O3wrjCsMKowrfCucKzwrLilqDCoFwiXG4gIH0sXG4gIFwiaWJtODU4XCI6IFwiY3A4NThcIixcbiAgXCJjc2libTg1OFwiOiBcImNwODU4XCIsXG4gIFwiY3A4NjBcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIsOHw7zDqcOiw6PDoMOBw6fDqsOKw6jDjcOUw6zDg8OCw4nDgMOIw7TDtcOyw5rDucOMw5XDnMKiwqPDmeKCp8OTw6HDrcOzw7rDscORwqrCusK/w5LCrMK9wrzCocKrwrvilpHilpLilpPilILilKTilaHilaLilZbilZXilaPilZHilZfilZ3ilZzilZvilJDilJTilLTilKzilJzilIDilLzilZ7ilZ/ilZrilZTilanilabilaDilZDilazilafilajilaTilaXilZnilZjilZLilZPilavilarilJjilIzilojiloTilozilpDiloDOscOfzpPPgM6jz4PCtc+EzqbOmM6pzrTiiJ7Phs614oip4omhwrHiiaXiiaTijKDijKHDt+KJiMKw4oiZwrfiiJrigb/CsuKWoMKgXCJcbiAgfSxcbiAgXCJpYm04NjBcIjogXCJjcDg2MFwiLFxuICBcImNzaWJtODYwXCI6IFwiY3A4NjBcIixcbiAgXCJjcDg2MVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiw4fDvMOpw6LDpMOgw6XDp8Oqw6vDqMOQw7DDnsOEw4XDicOmw4bDtMO2w77Du8Odw73DlsOcw7jCo8OY4oKnxpLDocOtw7PDusOBw43Dk8Oawr/ijJDCrMK9wrzCocKrwrvilpHilpLilpPilILilKTilaHilaLilZbilZXilaPilZHilZfilZ3ilZzilZvilJDilJTilLTilKzilJzilIDilLzilZ7ilZ/ilZrilZTilanilabilaDilZDilazilafilajilaTilaXilZnilZjilZLilZPilavilarilJjilIzilojiloTilozilpDiloDOscOfzpPPgM6jz4PCtc+EzqbOmM6pzrTiiJ7Phs614oip4omhwrHiiaXiiaTijKDijKHDt+KJiMKw4oiZwrfiiJrigb/CsuKWoMKgXCJcbiAgfSxcbiAgXCJpYm04NjFcIjogXCJjcDg2MVwiLFxuICBcImNzaWJtODYxXCI6IFwiY3A4NjFcIixcbiAgXCJjcDg2MlwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwi15DXkdeS15PXlNeV15bXl9eY15nXmteb15zXndee15/XoNeh16LXo9ek16XXpten16jXqdeqwqLCo8Kl4oKnxpLDocOtw7PDusOxw5HCqsK6wr/ijJDCrMK9wrzCocKrwrvilpHilpLilpPilILilKTilaHilaLilZbilZXilaPilZHilZfilZ3ilZzilZvilJDilJTilLTilKzilJzilIDilLzilZ7ilZ/ilZrilZTilanilabilaDilZDilazilafilajilaTilaXilZnilZjilZLilZPilavilarilJjilIzilojiloTilozilpDiloDOscOfzpPPgM6jz4PCtc+EzqbOmM6pzrTiiJ7Phs614oip4omhwrHiiaXiiaTijKDijKHDt+KJiMKw4oiZwrfiiJrigb/CsuKWoMKgXCJcbiAgfSxcbiAgXCJpYm04NjJcIjogXCJjcDg2MlwiLFxuICBcImNzaWJtODYyXCI6IFwiY3A4NjJcIixcbiAgXCJjcDg2M1wiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiw4fDvMOpw6LDgsOgwrbDp8Oqw6vDqMOvw67igJfDgMKnw4nDiMOKw7TDi8OPw7vDucKkw5TDnMKiwqPDmcObxpLCpsK0w7PDusKowrjCs8Kvw47ijJDCrMK9wrzCvsKrwrvilpHilpLilpPilILilKTilaHilaLilZbilZXilaPilZHilZfilZ3ilZzilZvilJDilJTilLTilKzilJzilIDilLzilZ7ilZ/ilZrilZTilanilabilaDilZDilazilafilajilaTilaXilZnilZjilZLilZPilavilarilJjilIzilojiloTilozilpDiloDOscOfzpPPgM6jz4PCtc+EzqbOmM6pzrTiiJ7Phs614oip4omhwrHiiaXiiaTijKDijKHDt+KJiMKw4oiZwrfiiJrigb/CsuKWoMKgXCJcbiAgfSxcbiAgXCJpYm04NjNcIjogXCJjcDg2M1wiLFxuICBcImNzaWJtODYzXCI6IFwiY3A4NjNcIixcbiAgXCJjcDg2NFwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiXFx1MDAwMFxcdTAwMDFcXHUwMDAyXFx1MDAwM1xcdTAwMDRcXHUwMDA1XFx1MDAwNlxcdTAwMDdcXGJcXHRcXG5cXHUwMDBiXFxmXFxyXFx1MDAwZVxcdTAwMGZcXHUwMDEwXFx1MDAxMVxcdTAwMTJcXHUwMDEzXFx1MDAxNFxcdTAwMTVcXHUwMDE2XFx1MDAxN1xcdTAwMThcXHUwMDE5XFx1MDAxYVxcdTAwMWJcXHUwMDFjXFx1MDAxZFxcdTAwMWVcXHUwMDFmICFcXFwiIyTZqiYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xcXFxdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f8KwwrfiiJniiJrilpLilIDilILilLzilKTilKzilJzilLTilJDilIzilJTilJjOsuKIns+GwrHCvcK84omIwqvCu++7t++7uO+/ve+/ve+7u++7vO+/vcKgwq3vuoLCo8Kk77qE77+977+977qO77qP77qV77qZ2Izvup3vuqHvuqXZoNmh2aLZo9mk2aXZptmn2ajZqe+7kdib77qx77q177q52J/Cou+6gO+6ge+6g++6he+7iu+6i++6je+6ke+6k++6l++6m++6n++6o++6p++6qe+6q++6re+6r++6s++6t++6u++6v++7ge+7he+7i++7j8KmwqzDt8OX77uJ2YDvu5Pvu5fvu5vvu5/vu6Pvu6fvu6vvu63vu6/vu7Pvur3vu4zvu47vu43vu6Hvub3Zke+7pe+7qe+7rO+7sO+7su+7kO+7le+7te+7tu+7ne+7me+7seKWoO+/vVwiXG4gIH0sXG4gIFwiaWJtODY0XCI6IFwiY3A4NjRcIixcbiAgXCJjc2libTg2NFwiOiBcImNwODY0XCIsXG4gIFwiY3A4NjVcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIsOHw7zDqcOiw6TDoMOlw6fDqsOrw6jDr8Ouw6zDhMOFw4nDpsOGw7TDtsOyw7vDucO/w5bDnMO4wqPDmOKCp8aSw6HDrcOzw7rDscORwqrCusK/4oyQwqzCvcK8wqHCq8Kk4paR4paS4paT4pSC4pSk4pWh4pWi4pWW4pWV4pWj4pWR4pWX4pWd4pWc4pWb4pSQ4pSU4pS04pSs4pSc4pSA4pS84pWe4pWf4pWa4pWU4pWp4pWm4pWg4pWQ4pWs4pWn4pWo4pWk4pWl4pWZ4pWY4pWS4pWT4pWr4pWq4pSY4pSM4paI4paE4paM4paQ4paAzrHDn86Tz4DOo8+DwrXPhM6mzpjOqc604oiez4bOteKIqeKJocKx4oml4omk4oyg4oyhw7fiiYjCsOKImcK34oia4oG/wrLilqDCoFwiXG4gIH0sXG4gIFwiaWJtODY1XCI6IFwiY3A4NjVcIixcbiAgXCJjc2libTg2NVwiOiBcImNwODY1XCIsXG4gIFwiY3A4NjZcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcItCQ0JHQktCT0JTQldCW0JfQmNCZ0JrQm9Cc0J3QntCf0KDQodCi0KPQpNCl0KbQp9Co0KnQqtCr0KzQrdCu0K/QsNCx0LLQs9C00LXQttC30LjQudC60LvQvNC90L7Qv+KWkeKWkuKWk+KUguKUpOKVoeKVouKVluKVleKVo+KVkeKVl+KVneKVnOKVm+KUkOKUlOKUtOKUrOKUnOKUgOKUvOKVnuKVn+KVmuKVlOKVqeKVpuKVoOKVkOKVrOKVp+KVqOKVpOKVpeKVmeKVmOKVkuKVk+KVq+KVquKUmOKUjOKWiOKWhOKWjOKWkOKWgNGA0YHRgtGD0YTRhdGG0YfRiNGJ0YrRi9GM0Y3RjtGP0IHRkdCE0ZTQh9GX0I7RnsKw4oiZwrfiiJrihJbCpOKWoMKgXCJcbiAgfSxcbiAgXCJpYm04NjZcIjogXCJjcDg2NlwiLFxuICBcImNzaWJtODY2XCI6IFwiY3A4NjZcIixcbiAgXCJjcDg2OVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwi77+977+977+977+977+977+9zobvv73Ct8KswqbigJjigJnOiOKAlc6JzorOqs6M77+977+9zo7Oq8Kpzo/CssKzzqzCo86tzq7Or8+KzpDPjM+NzpHOks6TzpTOlc6WzpfCvc6YzpnCq8K74paR4paS4paT4pSC4pSkzprOm86czp3ilaPilZHilZfilZ3Ons6f4pSQ4pSU4pS04pSs4pSc4pSA4pS8zqDOoeKVmuKVlOKVqeKVpuKVoOKVkOKVrM6jzqTOpc6mzqfOqM6pzrHOss6z4pSY4pSM4paI4paEzrTOteKWgM62zrfOuM65zrrOu868zr3Ovs6/z4DPgc+Dz4LPhM6Ewq3Csc+Fz4bPh8Knz4jOhcKwwqjPic+LzrDPjuKWoMKgXCJcbiAgfSxcbiAgXCJpYm04NjlcIjogXCJjcDg2OVwiLFxuICBcImNzaWJtODY5XCI6IFwiY3A4NjlcIixcbiAgXCJjcDkyMlwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiwoDCgcKCwoPChMKFwobCh8KIwonCisKLwozCjcKOwo/CkMKRwpLCk8KUwpXClsKXwpjCmcKawpvCnMKdwp7Cn8KgwqHCosKjwqTCpcKmwqfCqMKpwqrCq8Kswq3CruKAvsKwwrHCssKzwrTCtcK2wrfCuMK5wrrCu8K8wr3CvsK/w4DDgcOCw4PDhMOFw4bDh8OIw4nDisOLw4zDjcOOw4/FoMORw5LDk8OUw5XDlsOXw5jDmcOaw5vDnMOdxb3Dn8Ogw6HDosOjw6TDpcOmw6fDqMOpw6rDq8Osw63DrsOvxaHDscOyw7PDtMO1w7bDt8O4w7nDusO7w7zDvcW+w79cIlxuICB9LFxuICBcImlibTkyMlwiOiBcImNwOTIyXCIsXG4gIFwiY3NpYm05MjJcIjogXCJjcDkyMlwiLFxuICBcImNwMTA0NlwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwi77qIw5fDt++jtu+jte+jtO+jt++5scKI4pag4pSC4pSA4pSQ4pSM4pSU4pSY77m577m777m977m/77m377qK77uw77uz77uy77uO77uP77uQ77u277u477u677u8wqDvo7rvo7nvo7jCpO+ju++6i++6ke+6l++6m++6n++6o9iMwq3vuqfvurPZoNmh2aLZo9mk2aXZptmn2ajZqe+6t9ib77q777q/77uK2J/vu4vYodii2KPYpNil2KbYp9io2KnYqtir2KzYrdiu2K/YsNix2LLYs9i02LXYtti377uH2LnYuu+7jO+6gu+6hO+6ju+7k9mA2YHZgtmD2YTZhdmG2YfZiNmJ2YrZi9mM2Y3ZjtmP2ZDZkdmS77uX77ub77uf76O877u177u377u577u777uj77un77us77up77+9XCJcbiAgfSxcbiAgXCJpYm0xMDQ2XCI6IFwiY3AxMDQ2XCIsXG4gIFwiY3NpYm0xMDQ2XCI6IFwiY3AxMDQ2XCIsXG4gIFwiY3AxMTI0XCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLCgMKBwoLCg8KEwoXChsKHwojCicKKwovCjMKNwo7Cj8KQwpHCksKTwpTClcKWwpfCmMKZwprCm8Kcwp3CnsKfwqDQgdCC0pDQhNCF0IbQh9CI0InQitCL0IzCrdCO0I/QkNCR0JLQk9CU0JXQltCX0JjQmdCa0JvQnNCd0J7Qn9Cg0KHQotCj0KTQpdCm0KfQqNCp0KrQq9Cs0K3QrtCv0LDQsdCy0LPQtNC10LbQt9C40LnQutC70LzQvdC+0L/RgNGB0YLRg9GE0YXRhtGH0YjRidGK0YvRjNGN0Y7Rj+KEltGR0ZLSkdGU0ZXRltGX0ZjRmdGa0ZvRnMKn0Z7Rn1wiXG4gIH0sXG4gIFwiaWJtMTEyNFwiOiBcImNwMTEyNFwiLFxuICBcImNzaWJtMTEyNFwiOiBcImNwMTEyNFwiLFxuICBcImNwMTEyNVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwi0JDQkdCS0JPQlNCV0JbQl9CY0JnQmtCb0JzQndCe0J/QoNCh0KLQo9Ck0KXQptCn0KjQqdCq0KvQrNCt0K7Qr9Cw0LHQstCz0LTQtdC20LfQuNC50LrQu9C80L3QvtC/4paR4paS4paT4pSC4pSk4pWh4pWi4pWW4pWV4pWj4pWR4pWX4pWd4pWc4pWb4pSQ4pSU4pS04pSs4pSc4pSA4pS84pWe4pWf4pWa4pWU4pWp4pWm4pWg4pWQ4pWs4pWn4pWo4pWk4pWl4pWZ4pWY4pWS4pWT4pWr4pWq4pSY4pSM4paI4paE4paM4paQ4paA0YDRgdGC0YPRhNGF0YbRh9GI0YnRitGL0YzRjdGO0Y/QgdGR0pDSkdCE0ZTQhtGW0IfRl8K34oia4oSWwqTilqDCoFwiXG4gIH0sXG4gIFwiaWJtMTEyNVwiOiBcImNwMTEyNVwiLFxuICBcImNzaWJtMTEyNVwiOiBcImNwMTEyNVwiLFxuICBcImNwMTEyOVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiwoDCgcKCwoPChMKFwobCh8KIwonCisKLwozCjcKOwo/CkMKRwpLCk8KUwpXClsKXwpjCmcKawpvCnMKdwp7Cn8KgwqHCosKjwqTCpcKmwqfFk8KpwqrCq8Kswq3CrsKvwrDCscKywrPFuMK1wrbCt8WSwrnCusK7wrzCvcK+wr/DgMOBw4LEgsOEw4XDhsOHw4jDicOKw4vMgMONw47Dj8SQw5HMicOTw5TGoMOWw5fDmMOZw5rDm8Ocxq/Mg8Ofw6DDocOixIPDpMOlw6bDp8Oow6nDqsOrzIHDrcOuw6/EkcOxzKPDs8O0xqHDtsO3w7jDucO6w7vDvMaw4oKrw79cIlxuICB9LFxuICBcImlibTExMjlcIjogXCJjcDExMjlcIixcbiAgXCJjc2libTExMjlcIjogXCJjcDExMjlcIixcbiAgXCJjcDExMzNcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIsKAwoHCgsKDwoTChcKGwofCiMKJworCi8KMwo3CjsKPwpDCkcKSwpPClMKVwpbCl8KYwpnCmsKbwpzCncKewp/CoOC6geC6guC6hOC6h+C6iOC6quC6iuC6jeC6lOC6leC6luC6l+C6meC6muC6m+C6nOC6neC6nuC6n+C6oeC6ouC6o+C6peC6p+C6q+C6reC6ru+/ve+/ve+/veC6r+C6sOC6suC6s+C6tOC6teC6tuC6t+C6uOC6ueC6vOC6seC6u+C6ve+/ve+/ve+/veC7gOC7geC7guC7g+C7hOC7iOC7ieC7iuC7i+C7jOC7jeC7hu+/veC7nOC7neKCre+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veC7kOC7keC7kuC7k+C7lOC7leC7luC7l+C7mOC7me+/ve+/vcKiwqzCpu+/vVwiXG4gIH0sXG4gIFwiaWJtMTEzM1wiOiBcImNwMTEzM1wiLFxuICBcImNzaWJtMTEzM1wiOiBcImNwMTEzM1wiLFxuICBcImNwMTE2MVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+94LmI4LiB4LiC4LiD4LiE4LiF4LiG4LiH4LiI4LiJ4LiK4LiL4LiM4LiN4LiO4LiP4LiQ4LiR4LiS4LiT4LiU4LiV4LiW4LiX4LiY4LiZ4Lia4Lib4Lic4Lid4Lie4Lif4Lig4Lih4Lii4Lij4Lik4Lil4Lim4Lin4Lio4Lip4Liq4Lir4Lis4Lit4Liu4Liv4Liw4Lix4Liy4Liz4Li04Li14Li24Li34Li44Li54Li64LmJ4LmK4LmL4oKs4Li/4LmA4LmB4LmC4LmD4LmE4LmF4LmG4LmH4LmI4LmJ4LmK4LmL4LmM4LmN4LmO4LmP4LmQ4LmR4LmS4LmT4LmU4LmV4LmW4LmX4LmY4LmZ4Lma4LmbwqLCrMKmwqBcIlxuICB9LFxuICBcImlibTExNjFcIjogXCJjcDExNjFcIixcbiAgXCJjc2libTExNjFcIjogXCJjcDExNjFcIixcbiAgXCJjcDExNjJcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIuKCrMKBwoLCg8KE4oCmwobCh8KIwonCisKLwozCjcKOwo/CkOKAmOKAmeKAnOKAneKAouKAk+KAlMKYwpnCmsKbwpzCncKewp/CoOC4geC4guC4g+C4hOC4heC4huC4h+C4iOC4ieC4iuC4i+C4jOC4jeC4juC4j+C4kOC4keC4kuC4k+C4lOC4leC4luC4l+C4mOC4meC4muC4m+C4nOC4neC4nuC4n+C4oOC4oeC4ouC4o+C4pOC4peC4puC4p+C4qOC4qeC4quC4q+C4rOC4reC4ruC4r+C4sOC4seC4suC4s+C4tOC4teC4tuC4t+C4uOC4ueC4uu+/ve+/ve+/ve+/veC4v+C5gOC5geC5guC5g+C5hOC5heC5huC5h+C5iOC5ieC5iuC5i+C5jOC5jeC5juC5j+C5kOC5keC5kuC5k+C5lOC5leC5luC5l+C5mOC5meC5muC5m++/ve+/ve+/ve+/vVwiXG4gIH0sXG4gIFwiaWJtMTE2MlwiOiBcImNwMTE2MlwiLFxuICBcImNzaWJtMTE2MlwiOiBcImNwMTE2MlwiLFxuICBcImNwMTE2M1wiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiwoDCgcKCwoPChMKFwobCh8KIwonCisKLwozCjcKOwo/CkMKRwpLCk8KUwpXClsKXwpjCmcKawpvCnMKdwp7Cn8KgwqHCosKj4oKswqXCpsKnxZPCqcKqwqvCrMKtwq7Cr8KwwrHCssKzxbjCtcK2wrfFksK5wrrCu8K8wr3CvsK/w4DDgcOCxILDhMOFw4bDh8OIw4nDisOLzIDDjcOOw4/EkMORzInDk8OUxqDDlsOXw5jDmcOaw5vDnMavzIPDn8Ogw6HDosSDw6TDpcOmw6fDqMOpw6rDq8yBw63DrsOvxJHDscyjw7PDtMahw7bDt8O4w7nDusO7w7zGsOKCq8O/XCJcbiAgfSxcbiAgXCJpYm0xMTYzXCI6IFwiY3AxMTYzXCIsXG4gIFwiY3NpYm0xMTYzXCI6IFwiY3AxMTYzXCIsXG4gIFwibWFjY3JvYXRpYW5cIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIsOEw4XDh8OJw5HDlsOcw6HDoMOiw6TDo8Olw6fDqcOow6rDq8Otw6zDrsOvw7HDs8Oyw7TDtsO1w7rDucO7w7zigKDCsMKiwqPCp+KAosK2w5/CrsWg4oSiwrTCqOKJoMW9w5jiiJ7CseKJpOKJpeKIhsK14oiC4oiR4oiPxaHiiKvCqsK64oSmxb7DuMK/wqHCrOKImsaS4omIxIbCq8SM4oCmwqDDgMODw5XFksWTxJDigJTigJzigJ3igJjigJnDt+KXiu+/vcKp4oGEwqTigLnigLrDhsK74oCTwrfigJrigJ7igLDDgsSHw4HEjcOIw43DjsOPw4zDk8OUxJHDksOaw5vDmcSxy4bLnMKvz4DDi8uawrjDisOmy4dcIlxuICB9LFxuICBcIm1hY2N5cmlsbGljXCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLQkNCR0JLQk9CU0JXQltCX0JjQmdCa0JvQnNCd0J7Qn9Cg0KHQotCj0KTQpdCm0KfQqNCp0KrQq9Cs0K3QrtCv4oCgwrDCosKjwqfigKLCttCGwq7CqeKEotCC0ZLiiaDQg9GT4oiewrHiiaTiiaXRlsK14oiC0IjQhNGU0IfRl9CJ0ZnQitGa0ZjQhcKs4oiaxpLiiYjiiIbCq8K74oCmwqDQi9Gb0IzRnNGV4oCT4oCU4oCc4oCd4oCY4oCZw7figJ7QjtGe0I/Rn+KEltCB0ZHRj9Cw0LHQstCz0LTQtdC20LfQuNC50LrQu9C80L3QvtC/0YDRgdGC0YPRhNGF0YbRh9GI0YnRitGL0YzRjdGOwqRcIlxuICB9LFxuICBcIm1hY2dyZWVrXCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLDhMK5wrLDicKzw5bDnM6Fw6DDosOkzoTCqMOnw6nDqMOqw6vCo+KEosOuw6/igKLCveKAsMO0w7bCpsKtw7nDu8O84oCgzpPOlM6YzpvOns6gw5/CrsKpzqPOqsKn4omgwrDOh86RwrHiiaTiiaXCpc6SzpXOls6XzpnOms6czqbOq86ozqnOrM6dwqzOn86h4omIzqTCq8K74oCmwqDOpc6nzobOiMWT4oCT4oCV4oCc4oCd4oCY4oCZw7fOic6KzozOjs6tzq7Or8+Mzo/Pjc6xzrLPiM60zrXPhs6zzrfOuc6+zrrOu868zr3Ov8+Az47Pgc+Dz4TOuM+Jz4LPh8+FzrbPis+LzpDOsO+/vVwiXG4gIH0sXG4gIFwibWFjaWNlbGFuZFwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiw4TDhcOHw4nDkcOWw5zDocOgw6LDpMOjw6XDp8Opw6jDqsOrw63DrMOuw6/DscOzw7LDtMO2w7XDusO5w7vDvMOdwrDCosKjwqfigKLCtsOfwq7CqeKEosK0wqjiiaDDhsOY4oiewrHiiaTiiaXCpcK14oiC4oiR4oiPz4DiiKvCqsK64oSmw6bDuMK/wqHCrOKImsaS4omI4oiGwqvCu+KApsKgw4DDg8OVxZLFk+KAk+KAlOKAnOKAneKAmOKAmcO34peKw7/FuOKBhMKkw5DDsMOew77DvcK34oCa4oCe4oCww4LDisOBw4vDiMONw47Dj8OMw5PDlO+/vcOSw5rDm8OZxLHLhsucwq/LmMuZy5rCuMudy5vLh1wiXG4gIH0sXG4gIFwibWFjcm9tYW5cIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIsOEw4XDh8OJw5HDlsOcw6HDoMOiw6TDo8Olw6fDqcOow6rDq8Otw6zDrsOvw7HDs8Oyw7TDtsO1w7rDucO7w7zigKDCsMKiwqPCp+KAosK2w5/CrsKp4oSiwrTCqOKJoMOGw5jiiJ7CseKJpOKJpcKlwrXiiILiiJHiiI/PgOKIq8KqwrrihKbDpsO4wr/CocKs4oiaxpLiiYjiiIbCq8K74oCmwqDDgMODw5XFksWT4oCT4oCU4oCc4oCd4oCY4oCZw7fil4rDv8W44oGEwqTigLnigLrvrIHvrILigKHCt+KAmuKAnuKAsMOCw4rDgcOLw4jDjcOOw4/DjMOTw5Tvv73DksOaw5vDmcSxy4bLnMKvy5jLmcuawrjLncuby4dcIlxuICB9LFxuICBcIm1hY3JvbWFuaWFcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIsOEw4XDh8OJw5HDlsOcw6HDoMOiw6TDo8Olw6fDqcOow6rDq8Otw6zDrsOvw7HDs8Oyw7TDtsO1w7rDucO7w7zigKDCsMKiwqPCp+KAosK2w5/CrsKp4oSiwrTCqOKJoMSCxZ7iiJ7CseKJpOKJpcKlwrXiiILiiJHiiI/PgOKIq8KqwrrihKbEg8Wfwr/CocKs4oiaxpLiiYjiiIbCq8K74oCmwqDDgMODw5XFksWT4oCT4oCU4oCc4oCd4oCY4oCZw7fil4rDv8W44oGEwqTigLnigLrFosWj4oChwrfigJrigJ7igLDDgsOKw4HDi8OIw43DjsOPw4zDk8OU77+9w5LDmsObw5nEscuGy5zCr8uYy5nLmsK4y53Lm8uHXCJcbiAgfSxcbiAgXCJtYWN0aGFpXCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLCq8K74oCm76KM76KP76KS76KV76KY76KL76KO76KR76KU76KX4oCc4oCd76KZ77+94oCi76KE76KJ76KF76KG76KH76KI76KK76KN76KQ76KT76KW4oCY4oCZ77+9wqDguIHguILguIPguITguIXguIbguIfguIjguInguIrguIvguIzguI3guI7guI/guJDguJHguJLguJPguJTguJXguJbguJfguJjguJnguJrguJvguJzguJ3guJ7guJ/guKDguKHguKLguKPguKTguKXguKbguKfguKjguKnguKrguKvguKzguK3guK7guK/guLDguLHguLLguLPguLTguLXguLbguLfguLjguLnguLrvu7/igIvigJPigJTguL/guYDguYHguYLguYPguYTguYXguYbguYfguYjguYnguYrguYvguYzguY3ihKLguY/guZDguZHguZLguZPguZTguZXguZbguZfguZjguZnCrsKp77+977+977+977+9XCJcbiAgfSxcbiAgXCJtYWN0dXJraXNoXCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLDhMOFw4fDicORw5bDnMOhw6DDosOkw6PDpcOnw6nDqMOqw6vDrcOsw67Dr8Oxw7PDssO0w7bDtcO6w7nDu8O84oCgwrDCosKjwqfigKLCtsOfwq7CqeKEosK0wqjiiaDDhsOY4oiewrHiiaTiiaXCpcK14oiC4oiR4oiPz4DiiKvCqsK64oSmw6bDuMK/wqHCrOKImsaS4omI4oiGwqvCu+KApsKgw4DDg8OVxZLFk+KAk+KAlOKAnOKAneKAmOKAmcO34peKw7/FuMSexJ/EsMSxxZ7Fn+KAocK34oCa4oCe4oCww4LDisOBw4vDiMONw47Dj8OMw5PDlO+/vcOSw5rDm8OZ77+9y4bLnMKvy5jLmcuawrjLncuby4dcIlxuICB9LFxuICBcIm1hY3VrcmFpbmVcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcItCQ0JHQktCT0JTQldCW0JfQmNCZ0JrQm9Cc0J3QntCf0KDQodCi0KPQpNCl0KbQp9Co0KnQqtCr0KzQrdCu0K/igKDCsNKQwqPCp+KAosK20IbCrsKp4oSi0ILRkuKJoNCD0ZPiiJ7CseKJpOKJpdGWwrXSkdCI0ITRlNCH0ZfQidGZ0IrRmtGY0IXCrOKImsaS4omI4oiGwqvCu+KApsKg0IvRm9CM0ZzRleKAk+KAlOKAnOKAneKAmOKAmcO34oCe0I7RntCP0Z/ihJbQgdGR0Y/QsNCx0LLQs9C00LXQttC30LjQudC60LvQvNC90L7Qv9GA0YHRgtGD0YTRhdGG0YfRiNGJ0YrRi9GM0Y3RjsKkXCJcbiAgfSxcbiAgXCJrb2k4clwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwi4pSA4pSC4pSM4pSQ4pSU4pSY4pSc4pSk4pSs4pS04pS84paA4paE4paI4paM4paQ4paR4paS4paT4oyg4pag4oiZ4oia4omI4omk4omlwqDijKHCsMKywrfDt+KVkOKVkeKVktGR4pWT4pWU4pWV4pWW4pWX4pWY4pWZ4pWa4pWb4pWc4pWd4pWe4pWf4pWg4pWh0IHilaLilaPilaTilaXilabilafilajilanilarilavilazCqdGO0LDQsdGG0LTQtdGE0LPRhdC40LnQutC70LzQvdC+0L/Rj9GA0YHRgtGD0LbQstGM0YvQt9GI0Y3RidGH0YrQrtCQ0JHQptCU0JXQpNCT0KXQmNCZ0JrQm9Cc0J3QntCf0K/QoNCh0KLQo9CW0JLQrNCr0JfQqNCt0KnQp9CqXCJcbiAgfSxcbiAgXCJrb2k4dVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwi4pSA4pSC4pSM4pSQ4pSU4pSY4pSc4pSk4pSs4pS04pS84paA4paE4paI4paM4paQ4paR4paS4paT4oyg4pag4oiZ4oia4omI4omk4omlwqDijKHCsMKywrfDt+KVkOKVkeKVktGR0ZTilZTRltGX4pWX4pWY4pWZ4pWa4pWb0pHilZ3ilZ7ilZ/ilaDilaHQgdCE4pWj0IbQh+KVpuKVp+KVqOKVqeKVqtKQ4pWswqnRjtCw0LHRhtC00LXRhNCz0YXQuNC50LrQu9C80L3QvtC/0Y/RgNGB0YLRg9C20LLRjNGL0LfRiNGN0YnRh9GK0K7QkNCR0KbQlNCV0KTQk9Cl0JjQmdCa0JvQnNCd0J7Qn9Cv0KDQodCi0KPQltCS0KzQq9CX0KjQrdCp0KfQqlwiXG4gIH0sXG4gIFwia29pOHJ1XCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLilIDilILilIzilJDilJTilJjilJzilKTilKzilLTilLziloDiloTilojilozilpDilpHilpLilpPijKDilqDiiJniiJriiYjiiaTiiaXCoOKMocKwwrLCt8O34pWQ4pWR4pWS0ZHRlOKVlNGW0ZfilZfilZjilZnilZrilZvSkdGe4pWe4pWf4pWg4pWh0IHQhOKVo9CG0IfilabilafilajilanilarSkNCOwqnRjtCw0LHRhtC00LXRhNCz0YXQuNC50LrQu9C80L3QvtC/0Y/RgNGB0YLRg9C20LLRjNGL0LfRiNGN0YnRh9GK0K7QkNCR0KbQlNCV0KTQk9Cl0JjQmdCa0JvQnNCd0J7Qn9Cv0KDQodCi0KPQltCS0KzQq9CX0KjQrdCp0KfQqlwiXG4gIH0sXG4gIFwia29pOHRcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcItKb0pPigJrSkuKAnuKApuKAoOKAoe+/veKAsNKz4oC50rLSt9K277+90prigJjigJnigJzigJ3igKLigJPigJTvv73ihKLvv73igLrvv73vv73vv73vv73vv73Tr9Ou0ZHCpNOjwqbCp++/ve+/ve+/vcKrwqzCrcKu77+9wrDCscKy0IHvv73TosK2wrfvv73ihJbvv73Cu++/ve+/ve+/vcKp0Y7QsNCx0YbQtNC10YTQs9GF0LjQudC60LvQvNC90L7Qv9GP0YDRgdGC0YPQttCy0YzRi9C30YjRjdGJ0YfRitCu0JDQkdCm0JTQldCk0JPQpdCY0JnQmtCb0JzQndCe0J/Qr9Cg0KHQotCj0JbQktCs0KvQl9Co0K3QqdCn0KpcIlxuICB9LFxuICBcImFybXNjaWk4XCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLCgMKBwoLCg8KEwoXChsKHwojCicKKwovCjMKNwo7Cj8KQwpHCksKTwpTClcKWwpfCmMKZwprCm8Kcwp3CnsKfwqDvv73Wh9aJKSjCu8Kr4oCULtWdLC3WiuKAptWc1ZvVntSx1aHUstWi1LPVo9S01aTUtdWl1LbVptS31afUuNWo1LnVqdS61arUu9Wr1LzVrNS91a3UvtWu1L/Vr9WA1bDVgdWx1YLVstWD1bPVhNW01YXVtdWG1bbVh9W31YjVuNWJ1bnVitW61YvVu9WM1bzVjdW91Y7VvtWP1b/VkNaA1ZHWgdWS1oLVk9aD1ZTWhNWV1oXVltaG1Zrvv71cIlxuICB9LFxuICBcInJrMTA0OFwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwi0ILQg+KAmtGT4oCe4oCm4oCg4oCh4oKs4oCw0InigLnQitKa0rrQj9GS4oCY4oCZ4oCc4oCd4oCi4oCT4oCU77+94oSi0ZnigLrRmtKb0rvRn8Kg0rDSsdOYwqTTqMKmwqfQgcKp0pLCq8Kswq3CrtKuwrDCsdCG0ZbTqcK1wrbCt9GR4oSW0pPCu9OZ0qLSo9Kv0JDQkdCS0JPQlNCV0JbQl9CY0JnQmtCb0JzQndCe0J/QoNCh0KLQo9Ck0KXQptCn0KjQqdCq0KvQrNCt0K7Qr9Cw0LHQstCz0LTQtdC20LfQuNC50LrQu9C80L3QvtC/0YDRgdGC0YPRhNGF0YbRh9GI0YnRitGL0YzRjdGO0Y9cIlxuICB9LFxuICBcInRjdm5cIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIlxcdTAwMDDDmuG7pFxcdTAwMDPhu6rhu6zhu65cXHUwMDA3XFxiXFx0XFxuXFx1MDAwYlxcZlxcclxcdTAwMGVcXHUwMDBmXFx1MDAxMOG7qOG7sOG7suG7tuG7uMOd4bu0XFx1MDAxOFxcdTAwMTlcXHUwMDFhXFx1MDAxYlxcdTAwMWNcXHUwMDFkXFx1MDAxZVxcdTAwMWYgIVxcXCIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXFxcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn/DgOG6osODw4HhuqDhurbhuqzDiOG6uuG6vMOJ4bq44buGw4zhu4jEqMON4buKw5Lhu47DlcOT4buM4buY4buc4bue4bug4bua4buiw5nhu6bFqMKgxILDgsOKw5TGoMavxJDEg8Oiw6rDtMahxrDEkeG6sMyAzInMg8yBzKPDoOG6o8Ojw6HhuqHhurLhurHhurPhurXhuq/hurThuq7huqbhuqjhuqrhuqThu4DhurfhuqfhuqnhuqvhuqXhuq3DqOG7guG6u+G6vcOp4bq54buB4buD4buF4bq/4buHw6zhu4nhu4Thur7hu5LEqcOt4buLw7Lhu5Thu4/DtcOz4buN4buT4buV4buX4buR4buZ4bud4buf4buh4bub4bujw7nhu5bhu6fFqcO64bul4bur4but4buv4bup4bux4buz4bu34bu5w73hu7Xhu5BcIlxuICB9LFxuICBcImdlb3JnaWFuYWNhZGVteVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiwoDCgeKAmsaS4oCe4oCm4oCg4oChy4bigLDFoOKAucWSwo3CjsKPwpDigJjigJnigJzigJ3igKLigJPigJTLnOKEosWh4oC6xZPCncKexbjCoMKhwqLCo8KkwqXCpsKnwqjCqcKqwqvCrMKtwq7Cr8KwwrHCssKzwrTCtcK2wrfCuMK5wrrCu8K8wr3CvsK/4YOQ4YOR4YOS4YOT4YOU4YOV4YOW4YOX4YOY4YOZ4YOa4YOb4YOc4YOd4YOe4YOf4YOg4YOh4YOi4YOj4YOk4YOl4YOm4YOn4YOo4YOp4YOq4YOr4YOs4YOt4YOu4YOv4YOw4YOx4YOy4YOz4YO04YO14YO2w6fDqMOpw6rDq8Osw63DrsOvw7DDscOyw7PDtMO1w7bDt8O4w7nDusO7w7zDvcO+w79cIlxuICB9LFxuICBcImdlb3JnaWFucHNcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIsKAwoHigJrGkuKAnuKApuKAoOKAocuG4oCwxaDigLnFksKNwo7Cj8KQ4oCY4oCZ4oCc4oCd4oCi4oCT4oCUy5zihKLFoeKAusWTwp3CnsW4wqDCocKiwqPCpMKlwqbCp8KowqnCqsKrwqzCrcKuwq/CsMKxwrLCs8K0wrXCtsK3wrjCucK6wrvCvMK9wr7Cv+GDkOGDkeGDkuGDk+GDlOGDleGDluGDseGDl+GDmOGDmeGDmuGDm+GDnOGDsuGDneGDnuGDn+GDoOGDoeGDouGDs+GDo+GDpOGDpeGDpuGDp+GDqOGDqeGDquGDq+GDrOGDreGDruGDtOGDr+GDsOGDtcOmw6fDqMOpw6rDq8Osw63DrsOvw7DDscOyw7PDtMO1w7bDt8O4w7nDusO7w7zDvcO+w79cIlxuICB9LFxuICBcInB0MTU0XCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLSltKS067Sk+KAnuKAptK20q7SstKv0qDTotKi0prSutK40pfigJjigJnigJzigJ3igKLigJPigJTSs9K30qHTo9Kj0pvSu9K5wqDQjtGe0IjTqNKY0rDCp9CBwqnTmMKrwqzTr8Ku0pzCsNKx0IbRltKZ06nCtsK30ZHihJbTmcK70ZjSqtKr0p3QkNCR0JLQk9CU0JXQltCX0JjQmdCa0JvQnNCd0J7Qn9Cg0KHQotCj0KTQpdCm0KfQqNCp0KrQq9Cs0K3QrtCv0LDQsdCy0LPQtNC10LbQt9C40LnQutC70LzQvdC+0L/RgNGB0YLRg9GE0YXRhtGH0YjRidGK0YvRjNGN0Y7Rj1wiXG4gIH0sXG4gIFwidmlzY2lpXCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCJcXHUwMDAwXFx1MDAwMeG6slxcdTAwMDNcXHUwMDA04bq04bqqXFx1MDAwN1xcYlxcdFxcblxcdTAwMGJcXGZcXHJcXHUwMDBlXFx1MDAwZlxcdTAwMTBcXHUwMDExXFx1MDAxMlxcdTAwMTPhu7ZcXHUwMDE1XFx1MDAxNlxcdTAwMTdcXHUwMDE44bu4XFx1MDAxYVxcdTAwMWJcXHUwMDFjXFx1MDAxZOG7tFxcdTAwMWYgIVxcXCIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXFxcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn/huqDhuq7hurDhurbhuqThuqbhuqjhuqzhurzhurjhur7hu4Dhu4Lhu4Thu4bhu5Dhu5Lhu5Thu5bhu5jhu6Lhu5rhu5zhu57hu4rhu47hu4zhu4jhu6bFqOG7pOG7ssOV4bqv4bqx4bq34bql4bqn4bqp4bqt4bq94bq54bq/4buB4buD4buF4buH4buR4buT4buV4buX4bugxqDhu5nhu53hu5/hu4vhu7Dhu6jhu6rhu6zGoeG7m8avw4DDgcOCw4PhuqLEguG6s+G6tcOIw4nDiuG6usOMw43EqOG7s8SQ4bupw5LDk8OU4bqh4bu34bur4butw5nDmuG7ueG7tcOd4buhxrDDoMOhw6LDo+G6o8SD4buv4bqrw6jDqcOq4bq7w6zDrcSp4buJxJHhu7HDssOzw7TDteG7j+G7jeG7pcO5w7rFqeG7p8O94buj4buuXCJcbiAgfSxcbiAgXCJpc282NDZjblwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiXFx1MDAwMFxcdTAwMDFcXHUwMDAyXFx1MDAwM1xcdTAwMDRcXHUwMDA1XFx1MDAwNlxcdTAwMDdcXGJcXHRcXG5cXHUwMDBiXFxmXFxyXFx1MDAwZVxcdTAwMGZcXHUwMDEwXFx1MDAxMVxcdTAwMTJcXHUwMDEzXFx1MDAxNFxcdTAwMTVcXHUwMDE2XFx1MDAxN1xcdTAwMThcXHUwMDE5XFx1MDAxYVxcdTAwMWJcXHUwMDFjXFx1MDAxZFxcdTAwMWVcXHUwMDFmICFcXFwiI8KlJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xcXFxdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH3igL5/77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9XCJcbiAgfSxcbiAgXCJpc282NDZqcFwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiXFx1MDAwMFxcdTAwMDFcXHUwMDAyXFx1MDAwM1xcdTAwMDRcXHUwMDA1XFx1MDAwNlxcdTAwMDdcXGJcXHRcXG5cXHUwMDBiXFxmXFxyXFx1MDAwZVxcdTAwMGZcXHUwMDEwXFx1MDAxMVxcdTAwMTJcXHUwMDEzXFx1MDAxNFxcdTAwMTVcXHUwMDE2XFx1MDAxN1xcdTAwMThcXHUwMDE5XFx1MDAxYVxcdTAwMWJcXHUwMDFjXFx1MDAxZFxcdTAwMWVcXHUwMDFmICFcXFwiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbwqVdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH3igL5/77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9XCJcbiAgfSxcbiAgXCJocHJvbWFuOFwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiwoDCgcKCwoPChMKFwobCh8KIwonCisKLwozCjcKOwo/CkMKRwpLCk8KUwpXClsKXwpjCmcKawpvCnMKdwp7Cn8Kgw4DDgsOIw4rDi8OOw4/CtMuLy4bCqMucw5nDm+KCpMKvw53DvcKww4fDp8ORw7HCocK/wqTCo8KlwqfGksKiw6LDqsO0w7vDocOpw7PDusOgw6jDssO5w6TDq8O2w7zDhcOuw5jDhsOlw63DuMOmw4TDrMOWw5zDicOvw5/DlMOBw4PDo8OQw7DDjcOMw5PDksOVw7XFoMWhw5rFuMO/w57DvsK3wrXCtsK+4oCUwrzCvcKqwrrCq+KWoMK7wrHvv71cIlxuICB9LFxuICBcIm1hY2ludG9zaFwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiX3NiY3NcIixcbiAgICBcImNoYXJzXCI6IFwiw4TDhcOHw4nDkcOWw5zDocOgw6LDpMOjw6XDp8Opw6jDqsOrw63DrMOuw6/DscOzw7LDtMO2w7XDusO5w7vDvOKAoMKwwqLCo8Kn4oCiwrbDn8KuwqnihKLCtMKo4omgw4bDmOKInsKx4omk4omlwqXCteKIguKIkeKIj8+A4oirwqrCuuKEpsOmw7jCv8KhwqziiJrGkuKJiOKIhsKrwrvigKbCoMOAw4PDlcWSxZPigJPigJTigJzigJ3igJjigJnDt+KXisO/xbjigYTCpOKAueKAuu+sge+sguKAocK34oCa4oCe4oCww4LDisOBw4vDiMONw47Dj8OMw5PDlO+/vcOSw5rDm8OZxLHLhsucwq/LmMuZy5rCuMudy5vLh1wiXG4gIH0sXG4gIFwiYXNjaWlcIjoge1xuICAgIFwidHlwZVwiOiBcIl9zYmNzXCIsXG4gICAgXCJjaGFyc1wiOiBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vVwiXG4gIH0sXG4gIFwidGlzNjIwXCI6IHtcbiAgICBcInR5cGVcIjogXCJfc2Jjc1wiLFxuICAgIFwiY2hhcnNcIjogXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73guIHguILguIPguITguIXguIbguIfguIjguInguIrguIvguIzguI3guI7guI/guJDguJHguJLguJPguJTguJXguJbguJfguJjguJnguJrguJvguJzguJ3guJ7guJ/guKDguKHguKLguKPguKTguKXguKbguKfguKjguKnguKrguKvguKzguK3guK7guK/guLDguLHguLLguLPguLTguLXguLbguLfguLjguLnguLrvv73vv73vv73vv73guL/guYDguYHguYLguYPguYTguYXguYbguYfguYjguYnguYrguYvguYzguY3guY7guY/guZDguZHguZLguZPguZTguZXguZbguZfguZjguZnguZrguZvvv73vv73vv73vv71cIlxuICB9XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgQnVmZmVyID0gcmVxdWlyZShcInNhZmVyLWJ1ZmZlclwiKS5CdWZmZXI7XG5cbi8vIE11bHRpYnl0ZSBjb2RlYy4gSW4gdGhpcyBzY2hlbWUsIGEgY2hhcmFjdGVyIGlzIHJlcHJlc2VudGVkIGJ5IDEgb3IgbW9yZSBieXRlcy5cbi8vIE91ciBjb2RlYyBzdXBwb3J0cyBVVEYtMTYgc3Vycm9nYXRlcywgZXh0ZW5zaW9ucyBmb3IgR0IxODAzMCBhbmQgdW5pY29kZSBzZXF1ZW5jZXMuXG4vLyBUbyBzYXZlIG1lbW9yeSBhbmQgbG9hZGluZyB0aW1lLCB3ZSByZWFkIHRhYmxlIGZpbGVzIG9ubHkgd2hlbiByZXF1ZXN0ZWQuXG5cbmV4cG9ydHMuX2RiY3MgPSBEQkNTQ29kZWM7XG5cbnZhciBVTkFTU0lHTkVEID0gLTEsXG4gICAgR0IxODAzMF9DT0RFID0gLTIsXG4gICAgU0VRX1NUQVJUICA9IC0xMCxcbiAgICBOT0RFX1NUQVJUID0gLTEwMDAsXG4gICAgVU5BU1NJR05FRF9OT0RFID0gbmV3IEFycmF5KDB4MTAwKSxcbiAgICBERUZfQ0hBUiA9IC0xO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IDB4MTAwOyBpKyspXG4gICAgVU5BU1NJR05FRF9OT0RFW2ldID0gVU5BU1NJR05FRDtcblxuXG4vLyBDbGFzcyBEQkNTQ29kZWMgcmVhZHMgYW5kIGluaXRpYWxpemVzIG1hcHBpbmcgdGFibGVzLlxuZnVuY3Rpb24gREJDU0NvZGVjKGNvZGVjT3B0aW9ucywgaWNvbnYpIHtcbiAgICB0aGlzLmVuY29kaW5nTmFtZSA9IGNvZGVjT3B0aW9ucy5lbmNvZGluZ05hbWU7XG4gICAgaWYgKCFjb2RlY09wdGlvbnMpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRCQ1MgY29kZWMgaXMgY2FsbGVkIHdpdGhvdXQgdGhlIGRhdGEuXCIpXG4gICAgaWYgKCFjb2RlY09wdGlvbnMudGFibGUpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVuY29kaW5nICdcIiArIHRoaXMuZW5jb2RpbmdOYW1lICsgXCInIGhhcyBubyBkYXRhLlwiKTtcblxuICAgIC8vIExvYWQgdGFibGVzLlxuICAgIHZhciBtYXBwaW5nVGFibGUgPSBjb2RlY09wdGlvbnMudGFibGUoKTtcblxuXG4gICAgLy8gRGVjb2RlIHRhYmxlczogTUJDUyAtPiBVbmljb2RlLlxuXG4gICAgLy8gZGVjb2RlVGFibGVzIGlzIGEgdHJpZSwgZW5jb2RlZCBhcyBhbiBhcnJheSBvZiBhcnJheXMgb2YgaW50ZWdlcnMuIEludGVybmFsIGFycmF5cyBhcmUgdHJpZSBub2RlcyBhbmQgYWxsIGhhdmUgbGVuID0gMjU2LlxuICAgIC8vIFRyaWUgcm9vdCBpcyBkZWNvZGVUYWJsZXNbMF0uXG4gICAgLy8gVmFsdWVzOiA+PSAgMCAtPiB1bmljb2RlIGNoYXJhY3RlciBjb2RlLiBjYW4gYmUgPiAweEZGRkZcbiAgICAvLyAgICAgICAgID09IFVOQVNTSUdORUQgLT4gdW5rbm93bi91bmFzc2lnbmVkIHNlcXVlbmNlLlxuICAgIC8vICAgICAgICAgPT0gR0IxODAzMF9DT0RFIC0+IHRoaXMgaXMgdGhlIGVuZCBvZiBhIEdCMTgwMzAgNC1ieXRlIHNlcXVlbmNlLlxuICAgIC8vICAgICAgICAgPD0gTk9ERV9TVEFSVCAtPiBpbmRleCBvZiB0aGUgbmV4dCBub2RlIGluIG91ciB0cmllIHRvIHByb2Nlc3MgbmV4dCBieXRlLlxuICAgIC8vICAgICAgICAgPD0gU0VRX1NUQVJUICAtPiBpbmRleCBvZiB0aGUgc3RhcnQgb2YgYSBjaGFyYWN0ZXIgY29kZSBzZXF1ZW5jZSwgaW4gZGVjb2RlVGFibGVTZXEuXG4gICAgdGhpcy5kZWNvZGVUYWJsZXMgPSBbXTtcbiAgICB0aGlzLmRlY29kZVRhYmxlc1swXSA9IFVOQVNTSUdORURfTk9ERS5zbGljZSgwKTsgLy8gQ3JlYXRlIHJvb3Qgbm9kZS5cblxuICAgIC8vIFNvbWV0aW1lcyBhIE1CQ1MgY2hhciBjb3JyZXNwb25kcyB0byBhIHNlcXVlbmNlIG9mIHVuaWNvZGUgY2hhcnMuIFdlIHN0b3JlIHRoZW0gYXMgYXJyYXlzIG9mIGludGVnZXJzIGhlcmUuIFxuICAgIHRoaXMuZGVjb2RlVGFibGVTZXEgPSBbXTtcblxuICAgIC8vIEFjdHVhbCBtYXBwaW5nIHRhYmxlcyBjb25zaXN0IG9mIGNodW5rcy4gVXNlIHRoZW0gdG8gZmlsbCB1cCBkZWNvZGUgdGFibGVzLlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFwcGluZ1RhYmxlLmxlbmd0aDsgaSsrKVxuICAgICAgICB0aGlzLl9hZGREZWNvZGVDaHVuayhtYXBwaW5nVGFibGVbaV0pO1xuXG4gICAgdGhpcy5kZWZhdWx0Q2hhclVuaWNvZGUgPSBpY29udi5kZWZhdWx0Q2hhclVuaWNvZGU7XG5cbiAgICBcbiAgICAvLyBFbmNvZGUgdGFibGVzOiBVbmljb2RlIC0+IERCQ1MuXG5cbiAgICAvLyBgZW5jb2RlVGFibGVgIGlzIGFycmF5IG1hcHBpbmcgZnJvbSB1bmljb2RlIGNoYXIgdG8gZW5jb2RlZCBjaGFyLiBBbGwgaXRzIHZhbHVlcyBhcmUgaW50ZWdlcnMgZm9yIHBlcmZvcm1hbmNlLlxuICAgIC8vIEJlY2F1c2UgaXQgY2FuIGJlIHNwYXJzZSwgaXQgaXMgcmVwcmVzZW50ZWQgYXMgYXJyYXkgb2YgYnVja2V0cyBieSAyNTYgY2hhcnMgZWFjaC4gQnVja2V0IGNhbiBiZSBudWxsLlxuICAgIC8vIFZhbHVlczogPj0gIDAgLT4gaXQgaXMgYSBub3JtYWwgY2hhci4gV3JpdGUgdGhlIHZhbHVlIChpZiA8PTI1NiB0aGVuIDEgYnl0ZSwgaWYgPD02NTUzNiB0aGVuIDIgYnl0ZXMsIGV0Yy4pLlxuICAgIC8vICAgICAgICAgPT0gVU5BU1NJR05FRCAtPiBubyBjb252ZXJzaW9uIGZvdW5kLiBPdXRwdXQgYSBkZWZhdWx0IGNoYXIuXG4gICAgLy8gICAgICAgICA8PSBTRVFfU1RBUlQgIC0+IGl0J3MgYW4gaW5kZXggaW4gZW5jb2RlVGFibGVTZXEsIHNlZSBiZWxvdy4gVGhlIGNoYXJhY3RlciBzdGFydHMgYSBzZXF1ZW5jZS5cbiAgICB0aGlzLmVuY29kZVRhYmxlID0gW107XG4gICAgXG4gICAgLy8gYGVuY29kZVRhYmxlU2VxYCBpcyB1c2VkIHdoZW4gYSBzZXF1ZW5jZSBvZiB1bmljb2RlIGNoYXJhY3RlcnMgaXMgZW5jb2RlZCBhcyBhIHNpbmdsZSBjb2RlLiBXZSB1c2UgYSB0cmVlIG9mXG4gICAgLy8gb2JqZWN0cyB3aGVyZSBrZXlzIGNvcnJlc3BvbmQgdG8gY2hhcmFjdGVycyBpbiBzZXF1ZW5jZSBhbmQgbGVhZnMgYXJlIHRoZSBlbmNvZGVkIGRiY3MgdmFsdWVzLiBBIHNwZWNpYWwgREVGX0NIQVIga2V5XG4gICAgLy8gbWVhbnMgZW5kIG9mIHNlcXVlbmNlIChuZWVkZWQgd2hlbiBvbmUgc2VxdWVuY2UgaXMgYSBzdHJpY3Qgc3Vic2VxdWVuY2Ugb2YgYW5vdGhlcikuXG4gICAgLy8gT2JqZWN0cyBhcmUga2VwdCBzZXBhcmF0ZWx5IGZyb20gZW5jb2RlVGFibGUgdG8gaW5jcmVhc2UgcGVyZm9ybWFuY2UuXG4gICAgdGhpcy5lbmNvZGVUYWJsZVNlcSA9IFtdO1xuXG4gICAgLy8gU29tZSBjaGFycyBjYW4gYmUgZGVjb2RlZCwgYnV0IG5lZWQgbm90IGJlIGVuY29kZWQuXG4gICAgdmFyIHNraXBFbmNvZGVDaGFycyA9IHt9O1xuICAgIGlmIChjb2RlY09wdGlvbnMuZW5jb2RlU2tpcFZhbHMpXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZWNPcHRpb25zLmVuY29kZVNraXBWYWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdmFsID0gY29kZWNPcHRpb25zLmVuY29kZVNraXBWYWxzW2ldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgIHNraXBFbmNvZGVDaGFyc1t2YWxdID0gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gdmFsLmZyb207IGogPD0gdmFsLnRvOyBqKyspXG4gICAgICAgICAgICAgICAgICAgIHNraXBFbmNvZGVDaGFyc1tqXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgLy8gVXNlIGRlY29kZSB0cmllIHRvIHJlY3Vyc2l2ZWx5IGZpbGwgb3V0IGVuY29kZSB0YWJsZXMuXG4gICAgdGhpcy5fZmlsbEVuY29kZVRhYmxlKDAsIDAsIHNraXBFbmNvZGVDaGFycyk7XG5cbiAgICAvLyBBZGQgbW9yZSBlbmNvZGluZyBwYWlycyB3aGVuIG5lZWRlZC5cbiAgICBpZiAoY29kZWNPcHRpb25zLmVuY29kZUFkZCkge1xuICAgICAgICBmb3IgKHZhciB1Q2hhciBpbiBjb2RlY09wdGlvbnMuZW5jb2RlQWRkKVxuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjb2RlY09wdGlvbnMuZW5jb2RlQWRkLCB1Q2hhcikpXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0RW5jb2RlQ2hhcih1Q2hhci5jaGFyQ29kZUF0KDApLCBjb2RlY09wdGlvbnMuZW5jb2RlQWRkW3VDaGFyXSk7XG4gICAgfVxuXG4gICAgdGhpcy5kZWZDaGFyU0IgID0gdGhpcy5lbmNvZGVUYWJsZVswXVtpY29udi5kZWZhdWx0Q2hhclNpbmdsZUJ5dGUuY2hhckNvZGVBdCgwKV07XG4gICAgaWYgKHRoaXMuZGVmQ2hhclNCID09PSBVTkFTU0lHTkVEKSB0aGlzLmRlZkNoYXJTQiA9IHRoaXMuZW5jb2RlVGFibGVbMF1bJz8nXTtcbiAgICBpZiAodGhpcy5kZWZDaGFyU0IgPT09IFVOQVNTSUdORUQpIHRoaXMuZGVmQ2hhclNCID0gXCI/XCIuY2hhckNvZGVBdCgwKTtcblxuXG4gICAgLy8gTG9hZCAmIGNyZWF0ZSBHQjE4MDMwIHRhYmxlcyB3aGVuIG5lZWRlZC5cbiAgICBpZiAodHlwZW9mIGNvZGVjT3B0aW9ucy5nYjE4MDMwID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMuZ2IxODAzMCA9IGNvZGVjT3B0aW9ucy5nYjE4MDMwKCk7IC8vIExvYWQgR0IxODAzMCByYW5nZXMuXG5cbiAgICAgICAgLy8gQWRkIEdCMTgwMzAgZGVjb2RlIHRhYmxlcy5cbiAgICAgICAgdmFyIHRoaXJkQnl0ZU5vZGVJZHggPSB0aGlzLmRlY29kZVRhYmxlcy5sZW5ndGg7XG4gICAgICAgIHZhciB0aGlyZEJ5dGVOb2RlID0gdGhpcy5kZWNvZGVUYWJsZXNbdGhpcmRCeXRlTm9kZUlkeF0gPSBVTkFTU0lHTkVEX05PREUuc2xpY2UoMCk7XG5cbiAgICAgICAgdmFyIGZvdXJ0aEJ5dGVOb2RlSWR4ID0gdGhpcy5kZWNvZGVUYWJsZXMubGVuZ3RoO1xuICAgICAgICB2YXIgZm91cnRoQnl0ZU5vZGUgPSB0aGlzLmRlY29kZVRhYmxlc1tmb3VydGhCeXRlTm9kZUlkeF0gPSBVTkFTU0lHTkVEX05PREUuc2xpY2UoMCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDB4ODE7IGkgPD0gMHhGRTsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2Vjb25kQnl0ZU5vZGVJZHggPSBOT0RFX1NUQVJUIC0gdGhpcy5kZWNvZGVUYWJsZXNbMF1baV07XG4gICAgICAgICAgICB2YXIgc2Vjb25kQnl0ZU5vZGUgPSB0aGlzLmRlY29kZVRhYmxlc1tzZWNvbmRCeXRlTm9kZUlkeF07XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMHgzMDsgaiA8PSAweDM5OyBqKyspXG4gICAgICAgICAgICAgICAgc2Vjb25kQnl0ZU5vZGVbal0gPSBOT0RFX1NUQVJUIC0gdGhpcmRCeXRlTm9kZUlkeDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMHg4MTsgaSA8PSAweEZFOyBpKyspXG4gICAgICAgICAgICB0aGlyZEJ5dGVOb2RlW2ldID0gTk9ERV9TVEFSVCAtIGZvdXJ0aEJ5dGVOb2RlSWR4O1xuICAgICAgICBmb3IgKHZhciBpID0gMHgzMDsgaSA8PSAweDM5OyBpKyspXG4gICAgICAgICAgICBmb3VydGhCeXRlTm9kZVtpXSA9IEdCMTgwMzBfQ09ERVxuICAgIH0gICAgICAgIFxufVxuXG5EQkNTQ29kZWMucHJvdG90eXBlLmVuY29kZXIgPSBEQkNTRW5jb2RlcjtcbkRCQ1NDb2RlYy5wcm90b3R5cGUuZGVjb2RlciA9IERCQ1NEZWNvZGVyO1xuXG4vLyBEZWNvZGVyIGhlbHBlcnNcbkRCQ1NDb2RlYy5wcm90b3R5cGUuX2dldERlY29kZVRyaWVOb2RlID0gZnVuY3Rpb24oYWRkcikge1xuICAgIHZhciBieXRlcyA9IFtdO1xuICAgIGZvciAoOyBhZGRyID4gMDsgYWRkciA+Pj0gOClcbiAgICAgICAgYnl0ZXMucHVzaChhZGRyICYgMHhGRik7XG4gICAgaWYgKGJ5dGVzLmxlbmd0aCA9PSAwKVxuICAgICAgICBieXRlcy5wdXNoKDApO1xuXG4gICAgdmFyIG5vZGUgPSB0aGlzLmRlY29kZVRhYmxlc1swXTtcbiAgICBmb3IgKHZhciBpID0gYnl0ZXMubGVuZ3RoLTE7IGkgPiAwOyBpLS0pIHsgLy8gVHJhdmVyc2Ugbm9kZXMgZGVlcGVyIGludG8gdGhlIHRyaWUuXG4gICAgICAgIHZhciB2YWwgPSBub2RlW2J5dGVzW2ldXTtcblxuICAgICAgICBpZiAodmFsID09IFVOQVNTSUdORUQpIHsgLy8gQ3JlYXRlIG5ldyBub2RlLlxuICAgICAgICAgICAgbm9kZVtieXRlc1tpXV0gPSBOT0RFX1NUQVJUIC0gdGhpcy5kZWNvZGVUYWJsZXMubGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5kZWNvZGVUYWJsZXMucHVzaChub2RlID0gVU5BU1NJR05FRF9OT0RFLnNsaWNlKDApKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWwgPD0gTk9ERV9TVEFSVCkgeyAvLyBFeGlzdGluZyBub2RlLlxuICAgICAgICAgICAgbm9kZSA9IHRoaXMuZGVjb2RlVGFibGVzW05PREVfU1RBUlQgLSB2YWxdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk92ZXJ3cml0ZSBieXRlIGluIFwiICsgdGhpcy5lbmNvZGluZ05hbWUgKyBcIiwgYWRkcjogXCIgKyBhZGRyLnRvU3RyaW5nKDE2KSk7XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xufVxuXG5cbkRCQ1NDb2RlYy5wcm90b3R5cGUuX2FkZERlY29kZUNodW5rID0gZnVuY3Rpb24oY2h1bmspIHtcbiAgICAvLyBGaXJzdCBlbGVtZW50IG9mIGNodW5rIGlzIHRoZSBoZXggbWJjcyBjb2RlIHdoZXJlIHdlIHN0YXJ0LlxuICAgIHZhciBjdXJBZGRyID0gcGFyc2VJbnQoY2h1bmtbMF0sIDE2KTtcblxuICAgIC8vIENob29zZSB0aGUgZGVjb2Rpbmcgbm9kZSB3aGVyZSB3ZSdsbCB3cml0ZSBvdXIgY2hhcnMuXG4gICAgdmFyIHdyaXRlVGFibGUgPSB0aGlzLl9nZXREZWNvZGVUcmllTm9kZShjdXJBZGRyKTtcbiAgICBjdXJBZGRyID0gY3VyQWRkciAmIDB4RkY7XG5cbiAgICAvLyBXcml0ZSBhbGwgb3RoZXIgZWxlbWVudHMgb2YgdGhlIGNodW5rIHRvIHRoZSB0YWJsZS5cbiAgICBmb3IgKHZhciBrID0gMTsgayA8IGNodW5rLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gY2h1bmtba107XG4gICAgICAgIGlmICh0eXBlb2YgcGFydCA9PT0gXCJzdHJpbmdcIikgeyAvLyBTdHJpbmcsIHdyaXRlIGFzLWlzLlxuICAgICAgICAgICAgZm9yICh2YXIgbCA9IDA7IGwgPCBwYXJ0Lmxlbmd0aDspIHtcbiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IHBhcnQuY2hhckNvZGVBdChsKyspO1xuICAgICAgICAgICAgICAgIGlmICgweEQ4MDAgPD0gY29kZSAmJiBjb2RlIDwgMHhEQzAwKSB7IC8vIERlY29kZSBzdXJyb2dhdGVcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvZGVUcmFpbCA9IHBhcnQuY2hhckNvZGVBdChsKyspO1xuICAgICAgICAgICAgICAgICAgICBpZiAoMHhEQzAwIDw9IGNvZGVUcmFpbCAmJiBjb2RlVHJhaWwgPCAweEUwMDApXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZVRhYmxlW2N1ckFkZHIrK10gPSAweDEwMDAwICsgKGNvZGUgLSAweEQ4MDApICogMHg0MDAgKyAoY29kZVRyYWlsIC0gMHhEQzAwKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW5jb3JyZWN0IHN1cnJvZ2F0ZSBwYWlyIGluIFwiICArIHRoaXMuZW5jb2RpbmdOYW1lICsgXCIgYXQgY2h1bmsgXCIgKyBjaHVua1swXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKDB4MEZGMCA8IGNvZGUgJiYgY29kZSA8PSAweDBGRkYpIHsgLy8gQ2hhcmFjdGVyIHNlcXVlbmNlIChvdXIgb3duIGVuY29kaW5nIHVzZWQpXG4gICAgICAgICAgICAgICAgICAgIHZhciBsZW4gPSAweEZGRiAtIGNvZGUgKyAyO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VxID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG0gPSAwOyBtIDwgbGVuOyBtKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXEucHVzaChwYXJ0LmNoYXJDb2RlQXQobCsrKSk7IC8vIFNpbXBsZSB2YXJpYXRpb246IGRvbid0IHN1cHBvcnQgc3Vycm9nYXRlcyBvciBzdWJzZXF1ZW5jZXMgaW4gc2VxLlxuXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlVGFibGVbY3VyQWRkcisrXSA9IFNFUV9TVEFSVCAtIHRoaXMuZGVjb2RlVGFibGVTZXEubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlY29kZVRhYmxlU2VxLnB1c2goc2VxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB3cml0ZVRhYmxlW2N1ckFkZHIrK10gPSBjb2RlOyAvLyBCYXNpYyBjaGFyXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBwYXJ0ID09PSBcIm51bWJlclwiKSB7IC8vIEludGVnZXIsIG1lYW5pbmcgaW5jcmVhc2luZyBzZXF1ZW5jZSBzdGFydGluZyB3aXRoIHByZXYgY2hhcmFjdGVyLlxuICAgICAgICAgICAgdmFyIGNoYXJDb2RlID0gd3JpdGVUYWJsZVtjdXJBZGRyIC0gMV0gKyAxO1xuICAgICAgICAgICAgZm9yICh2YXIgbCA9IDA7IGwgPCBwYXJ0OyBsKyspXG4gICAgICAgICAgICAgICAgd3JpdGVUYWJsZVtjdXJBZGRyKytdID0gY2hhckNvZGUrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbmNvcnJlY3QgdHlwZSAnXCIgKyB0eXBlb2YgcGFydCArIFwiJyBnaXZlbiBpbiBcIiAgKyB0aGlzLmVuY29kaW5nTmFtZSArIFwiIGF0IGNodW5rIFwiICsgY2h1bmtbMF0pO1xuICAgIH1cbiAgICBpZiAoY3VyQWRkciA+IDB4RkYpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkluY29ycmVjdCBjaHVuayBpbiBcIiAgKyB0aGlzLmVuY29kaW5nTmFtZSArIFwiIGF0IGFkZHIgXCIgKyBjaHVua1swXSArIFwiOiB0b28gbG9uZ1wiICsgY3VyQWRkcik7XG59XG5cbi8vIEVuY29kZXIgaGVscGVyc1xuREJDU0NvZGVjLnByb3RvdHlwZS5fZ2V0RW5jb2RlQnVja2V0ID0gZnVuY3Rpb24odUNvZGUpIHtcbiAgICB2YXIgaGlnaCA9IHVDb2RlID4+IDg7IC8vIFRoaXMgY291bGQgYmUgPiAweEZGIGJlY2F1c2Ugb2YgYXN0cmFsIGNoYXJhY3RlcnMuXG4gICAgaWYgKHRoaXMuZW5jb2RlVGFibGVbaGlnaF0gPT09IHVuZGVmaW5lZClcbiAgICAgICAgdGhpcy5lbmNvZGVUYWJsZVtoaWdoXSA9IFVOQVNTSUdORURfTk9ERS5zbGljZSgwKTsgLy8gQ3JlYXRlIGJ1Y2tldCBvbiBkZW1hbmQuXG4gICAgcmV0dXJuIHRoaXMuZW5jb2RlVGFibGVbaGlnaF07XG59XG5cbkRCQ1NDb2RlYy5wcm90b3R5cGUuX3NldEVuY29kZUNoYXIgPSBmdW5jdGlvbih1Q29kZSwgZGJjc0NvZGUpIHtcbiAgICB2YXIgYnVja2V0ID0gdGhpcy5fZ2V0RW5jb2RlQnVja2V0KHVDb2RlKTtcbiAgICB2YXIgbG93ID0gdUNvZGUgJiAweEZGO1xuICAgIGlmIChidWNrZXRbbG93XSA8PSBTRVFfU1RBUlQpXG4gICAgICAgIHRoaXMuZW5jb2RlVGFibGVTZXFbU0VRX1NUQVJULWJ1Y2tldFtsb3ddXVtERUZfQ0hBUl0gPSBkYmNzQ29kZTsgLy8gVGhlcmUncyBhbHJlYWR5IGEgc2VxdWVuY2UsIHNldCBhIHNpbmdsZS1jaGFyIHN1YnNlcXVlbmNlIG9mIGl0LlxuICAgIGVsc2UgaWYgKGJ1Y2tldFtsb3ddID09IFVOQVNTSUdORUQpXG4gICAgICAgIGJ1Y2tldFtsb3ddID0gZGJjc0NvZGU7XG59XG5cbkRCQ1NDb2RlYy5wcm90b3R5cGUuX3NldEVuY29kZVNlcXVlbmNlID0gZnVuY3Rpb24oc2VxLCBkYmNzQ29kZSkge1xuICAgIFxuICAgIC8vIEdldCB0aGUgcm9vdCBvZiBjaGFyYWN0ZXIgdHJlZSBhY2NvcmRpbmcgdG8gZmlyc3QgY2hhcmFjdGVyIG9mIHRoZSBzZXF1ZW5jZS5cbiAgICB2YXIgdUNvZGUgPSBzZXFbMF07XG4gICAgdmFyIGJ1Y2tldCA9IHRoaXMuX2dldEVuY29kZUJ1Y2tldCh1Q29kZSk7XG4gICAgdmFyIGxvdyA9IHVDb2RlICYgMHhGRjtcblxuICAgIHZhciBub2RlO1xuICAgIGlmIChidWNrZXRbbG93XSA8PSBTRVFfU1RBUlQpIHtcbiAgICAgICAgLy8gVGhlcmUncyBhbHJlYWR5IGEgc2VxdWVuY2Ugd2l0aCAgLSB1c2UgaXQuXG4gICAgICAgIG5vZGUgPSB0aGlzLmVuY29kZVRhYmxlU2VxW1NFUV9TVEFSVC1idWNrZXRbbG93XV07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBUaGVyZSB3YXMgbm8gc2VxdWVuY2Ugb2JqZWN0IC0gYWxsb2NhdGUgYSBuZXcgb25lLlxuICAgICAgICBub2RlID0ge307XG4gICAgICAgIGlmIChidWNrZXRbbG93XSAhPT0gVU5BU1NJR05FRCkgbm9kZVtERUZfQ0hBUl0gPSBidWNrZXRbbG93XTsgLy8gSWYgYSBjaGFyIHdhcyBzZXQgYmVmb3JlIC0gbWFrZSBpdCBhIHNpbmdsZS1jaGFyIHN1YnNlcXVlbmNlLlxuICAgICAgICBidWNrZXRbbG93XSA9IFNFUV9TVEFSVCAtIHRoaXMuZW5jb2RlVGFibGVTZXEubGVuZ3RoO1xuICAgICAgICB0aGlzLmVuY29kZVRhYmxlU2VxLnB1c2gobm9kZSk7XG4gICAgfVxuXG4gICAgLy8gVHJhdmVyc2UgdGhlIGNoYXJhY3RlciB0cmVlLCBhbGxvY2F0aW5nIG5ldyBub2RlcyBhcyBuZWVkZWQuXG4gICAgZm9yICh2YXIgaiA9IDE7IGogPCBzZXEubGVuZ3RoLTE7IGorKykge1xuICAgICAgICB2YXIgb2xkVmFsID0gbm9kZVt1Q29kZV07XG4gICAgICAgIGlmICh0eXBlb2Ygb2xkVmFsID09PSAnb2JqZWN0JylcbiAgICAgICAgICAgIG5vZGUgPSBvbGRWYWw7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbm9kZSA9IG5vZGVbdUNvZGVdID0ge31cbiAgICAgICAgICAgIGlmIChvbGRWYWwgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBub2RlW0RFRl9DSEFSXSA9IG9sZFZhbFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0IHRoZSBsZWFmIHRvIGdpdmVuIGRiY3NDb2RlLlxuICAgIHVDb2RlID0gc2VxW3NlcS5sZW5ndGgtMV07XG4gICAgbm9kZVt1Q29kZV0gPSBkYmNzQ29kZTtcbn1cblxuREJDU0NvZGVjLnByb3RvdHlwZS5fZmlsbEVuY29kZVRhYmxlID0gZnVuY3Rpb24obm9kZUlkeCwgcHJlZml4LCBza2lwRW5jb2RlQ2hhcnMpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMuZGVjb2RlVGFibGVzW25vZGVJZHhdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMHgxMDA7IGkrKykge1xuICAgICAgICB2YXIgdUNvZGUgPSBub2RlW2ldO1xuICAgICAgICB2YXIgbWJDb2RlID0gcHJlZml4ICsgaTtcbiAgICAgICAgaWYgKHNraXBFbmNvZGVDaGFyc1ttYkNvZGVdKVxuICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgaWYgKHVDb2RlID49IDApXG4gICAgICAgICAgICB0aGlzLl9zZXRFbmNvZGVDaGFyKHVDb2RlLCBtYkNvZGUpO1xuICAgICAgICBlbHNlIGlmICh1Q29kZSA8PSBOT0RFX1NUQVJUKVxuICAgICAgICAgICAgdGhpcy5fZmlsbEVuY29kZVRhYmxlKE5PREVfU1RBUlQgLSB1Q29kZSwgbWJDb2RlIDw8IDgsIHNraXBFbmNvZGVDaGFycyk7XG4gICAgICAgIGVsc2UgaWYgKHVDb2RlIDw9IFNFUV9TVEFSVClcbiAgICAgICAgICAgIHRoaXMuX3NldEVuY29kZVNlcXVlbmNlKHRoaXMuZGVjb2RlVGFibGVTZXFbU0VRX1NUQVJUIC0gdUNvZGVdLCBtYkNvZGUpO1xuICAgIH1cbn1cblxuXG5cbi8vID09IEVuY29kZXIgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIERCQ1NFbmNvZGVyKG9wdGlvbnMsIGNvZGVjKSB7XG4gICAgLy8gRW5jb2RlciBzdGF0ZVxuICAgIHRoaXMubGVhZFN1cnJvZ2F0ZSA9IC0xO1xuICAgIHRoaXMuc2VxT2JqID0gdW5kZWZpbmVkO1xuICAgIFxuICAgIC8vIFN0YXRpYyBkYXRhXG4gICAgdGhpcy5lbmNvZGVUYWJsZSA9IGNvZGVjLmVuY29kZVRhYmxlO1xuICAgIHRoaXMuZW5jb2RlVGFibGVTZXEgPSBjb2RlYy5lbmNvZGVUYWJsZVNlcTtcbiAgICB0aGlzLmRlZmF1bHRDaGFyU2luZ2xlQnl0ZSA9IGNvZGVjLmRlZkNoYXJTQjtcbiAgICB0aGlzLmdiMTgwMzAgPSBjb2RlYy5nYjE4MDMwO1xufVxuXG5EQkNTRW5jb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihzdHIpIHtcbiAgICB2YXIgbmV3QnVmID0gQnVmZmVyLmFsbG9jKHN0ci5sZW5ndGggKiAodGhpcy5nYjE4MDMwID8gNCA6IDMpKSxcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IHRoaXMubGVhZFN1cnJvZ2F0ZSxcbiAgICAgICAgc2VxT2JqID0gdGhpcy5zZXFPYmosIG5leHRDaGFyID0gLTEsXG4gICAgICAgIGkgPSAwLCBqID0gMDtcblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIC8vIDAuIEdldCBuZXh0IGNoYXJhY3Rlci5cbiAgICAgICAgaWYgKG5leHRDaGFyID09PSAtMSkge1xuICAgICAgICAgICAgaWYgKGkgPT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgICAgICB2YXIgdUNvZGUgPSBzdHIuY2hhckNvZGVBdChpKyspO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHVDb2RlID0gbmV4dENoYXI7XG4gICAgICAgICAgICBuZXh0Q2hhciA9IC0xOyAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDEuIEhhbmRsZSBzdXJyb2dhdGVzLlxuICAgICAgICBpZiAoMHhEODAwIDw9IHVDb2RlICYmIHVDb2RlIDwgMHhFMDAwKSB7IC8vIENoYXIgaXMgb25lIG9mIHN1cnJvZ2F0ZXMuXG4gICAgICAgICAgICBpZiAodUNvZGUgPCAweERDMDApIHsgLy8gV2UndmUgZ290IGxlYWQgc3Vycm9nYXRlLlxuICAgICAgICAgICAgICAgIGlmIChsZWFkU3Vycm9nYXRlID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBsZWFkU3Vycm9nYXRlID0gdUNvZGU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxlYWRTdXJyb2dhdGUgPSB1Q29kZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG91YmxlIGxlYWQgc3Vycm9nYXRlIGZvdW5kLlxuICAgICAgICAgICAgICAgICAgICB1Q29kZSA9IFVOQVNTSUdORUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gV2UndmUgZ290IHRyYWlsIHN1cnJvZ2F0ZS5cbiAgICAgICAgICAgICAgICBpZiAobGVhZFN1cnJvZ2F0ZSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdUNvZGUgPSAweDEwMDAwICsgKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDApICogMHg0MDAgKyAodUNvZGUgLSAweERDMDApO1xuICAgICAgICAgICAgICAgICAgICBsZWFkU3Vycm9nYXRlID0gLTE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW5jb21wbGV0ZSBzdXJyb2dhdGUgcGFpciAtIG9ubHkgdHJhaWwgc3Vycm9nYXRlIGZvdW5kLlxuICAgICAgICAgICAgICAgICAgICB1Q29kZSA9IFVOQVNTSUdORUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBJbmNvbXBsZXRlIHN1cnJvZ2F0ZSBwYWlyIC0gb25seSBsZWFkIHN1cnJvZ2F0ZSBmb3VuZC5cbiAgICAgICAgICAgIG5leHRDaGFyID0gdUNvZGU7IHVDb2RlID0gVU5BU1NJR05FRDsgLy8gV3JpdGUgYW4gZXJyb3IsIHRoZW4gY3VycmVudCBjaGFyLlxuICAgICAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gMi4gQ29udmVydCB1Q29kZSBjaGFyYWN0ZXIuXG4gICAgICAgIHZhciBkYmNzQ29kZSA9IFVOQVNTSUdORUQ7XG4gICAgICAgIGlmIChzZXFPYmogIT09IHVuZGVmaW5lZCAmJiB1Q29kZSAhPSBVTkFTU0lHTkVEKSB7IC8vIFdlIGFyZSBpbiB0aGUgbWlkZGxlIG9mIHRoZSBzZXF1ZW5jZVxuICAgICAgICAgICAgdmFyIHJlc0NvZGUgPSBzZXFPYmpbdUNvZGVdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXNDb2RlID09PSAnb2JqZWN0JykgeyAvLyBTZXF1ZW5jZSBjb250aW51ZXMuXG4gICAgICAgICAgICAgICAgc2VxT2JqID0gcmVzQ29kZTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcmVzQ29kZSA9PSAnbnVtYmVyJykgeyAvLyBTZXF1ZW5jZSBmaW5pc2hlZC4gV3JpdGUgaXQuXG4gICAgICAgICAgICAgICAgZGJjc0NvZGUgPSByZXNDb2RlO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc0NvZGUgPT0gdW5kZWZpbmVkKSB7IC8vIEN1cnJlbnQgY2hhcmFjdGVyIGlzIG5vdCBwYXJ0IG9mIHRoZSBzZXF1ZW5jZS5cblxuICAgICAgICAgICAgICAgIC8vIFRyeSBkZWZhdWx0IGNoYXJhY3RlciBmb3IgdGhpcyBzZXF1ZW5jZVxuICAgICAgICAgICAgICAgIHJlc0NvZGUgPSBzZXFPYmpbREVGX0NIQVJdO1xuICAgICAgICAgICAgICAgIGlmIChyZXNDb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGJjc0NvZGUgPSByZXNDb2RlOyAvLyBGb3VuZC4gV3JpdGUgaXQuXG4gICAgICAgICAgICAgICAgICAgIG5leHRDaGFyID0gdUNvZGU7IC8vIEN1cnJlbnQgY2hhcmFjdGVyIHdpbGwgYmUgd3JpdHRlbiB0b28gaW4gdGhlIG5leHQgaXRlcmF0aW9uLlxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogV2hhdCBpZiB3ZSBoYXZlIG5vIGRlZmF1bHQ/IChyZXNDb2RlID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlbiwgd2Ugc2hvdWxkIHdyaXRlIGZpcnN0IGNoYXIgb2YgdGhlIHNlcXVlbmNlIGFzLWlzIGFuZCB0cnkgdGhlIHJlc3QgcmVjdXJzaXZlbHkuXG4gICAgICAgICAgICAgICAgICAgIC8vIERpZG4ndCBkbyBpdCBmb3Igbm93IGJlY2F1c2Ugbm8gZW5jb2RpbmcgaGFzIHRoaXMgc2l0dWF0aW9uIHlldC5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ3VycmVudGx5LCBqdXN0IHNraXAgdGhlIHNlcXVlbmNlIGFuZCB3cml0ZSBjdXJyZW50IGNoYXIuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VxT2JqID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHVDb2RlID49IDApIHsgIC8vIFJlZ3VsYXIgY2hhcmFjdGVyXG4gICAgICAgICAgICB2YXIgc3VidGFibGUgPSB0aGlzLmVuY29kZVRhYmxlW3VDb2RlID4+IDhdO1xuICAgICAgICAgICAgaWYgKHN1YnRhYmxlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgZGJjc0NvZGUgPSBzdWJ0YWJsZVt1Q29kZSAmIDB4RkZdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZGJjc0NvZGUgPD0gU0VRX1NUQVJUKSB7IC8vIFNlcXVlbmNlIHN0YXJ0XG4gICAgICAgICAgICAgICAgc2VxT2JqID0gdGhpcy5lbmNvZGVUYWJsZVNlcVtTRVFfU1RBUlQtZGJjc0NvZGVdO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGJjc0NvZGUgPT0gVU5BU1NJR05FRCAmJiB0aGlzLmdiMTgwMzApIHtcbiAgICAgICAgICAgICAgICAvLyBVc2UgR0IxODAzMCBhbGdvcml0aG0gdG8gZmluZCBjaGFyYWN0ZXIocykgdG8gd3JpdGUuXG4gICAgICAgICAgICAgICAgdmFyIGlkeCA9IGZpbmRJZHgodGhpcy5nYjE4MDMwLnVDaGFycywgdUNvZGUpO1xuICAgICAgICAgICAgICAgIGlmIChpZHggIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRiY3NDb2RlID0gdGhpcy5nYjE4MDMwLmdiQ2hhcnNbaWR4XSArICh1Q29kZSAtIHRoaXMuZ2IxODAzMC51Q2hhcnNbaWR4XSk7XG4gICAgICAgICAgICAgICAgICAgIG5ld0J1ZltqKytdID0gMHg4MSArIE1hdGguZmxvb3IoZGJjc0NvZGUgLyAxMjYwMCk7IGRiY3NDb2RlID0gZGJjc0NvZGUgJSAxMjYwMDtcbiAgICAgICAgICAgICAgICAgICAgbmV3QnVmW2orK10gPSAweDMwICsgTWF0aC5mbG9vcihkYmNzQ29kZSAvIDEyNjApOyBkYmNzQ29kZSA9IGRiY3NDb2RlICUgMTI2MDtcbiAgICAgICAgICAgICAgICAgICAgbmV3QnVmW2orK10gPSAweDgxICsgTWF0aC5mbG9vcihkYmNzQ29kZSAvIDEwKTsgZGJjc0NvZGUgPSBkYmNzQ29kZSAlIDEwO1xuICAgICAgICAgICAgICAgICAgICBuZXdCdWZbaisrXSA9IDB4MzAgKyBkYmNzQ29kZTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gMy4gV3JpdGUgZGJjc0NvZGUgY2hhcmFjdGVyLlxuICAgICAgICBpZiAoZGJjc0NvZGUgPT09IFVOQVNTSUdORUQpXG4gICAgICAgICAgICBkYmNzQ29kZSA9IHRoaXMuZGVmYXVsdENoYXJTaW5nbGVCeXRlO1xuICAgICAgICBcbiAgICAgICAgaWYgKGRiY3NDb2RlIDwgMHgxMDApIHtcbiAgICAgICAgICAgIG5ld0J1ZltqKytdID0gZGJjc0NvZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGJjc0NvZGUgPCAweDEwMDAwKSB7XG4gICAgICAgICAgICBuZXdCdWZbaisrXSA9IGRiY3NDb2RlID4+IDg7ICAgLy8gaGlnaCBieXRlXG4gICAgICAgICAgICBuZXdCdWZbaisrXSA9IGRiY3NDb2RlICYgMHhGRjsgLy8gbG93IGJ5dGVcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld0J1ZltqKytdID0gZGJjc0NvZGUgPj4gMTY7XG4gICAgICAgICAgICBuZXdCdWZbaisrXSA9IChkYmNzQ29kZSA+PiA4KSAmIDB4RkY7XG4gICAgICAgICAgICBuZXdCdWZbaisrXSA9IGRiY3NDb2RlICYgMHhGRjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2VxT2JqID0gc2VxT2JqO1xuICAgIHRoaXMubGVhZFN1cnJvZ2F0ZSA9IGxlYWRTdXJyb2dhdGU7XG4gICAgcmV0dXJuIG5ld0J1Zi5zbGljZSgwLCBqKTtcbn1cblxuREJDU0VuY29kZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmxlYWRTdXJyb2dhdGUgPT09IC0xICYmIHRoaXMuc2VxT2JqID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybjsgLy8gQWxsIGNsZWFuLiBNb3N0IG9mdGVuIGNhc2UuXG5cbiAgICB2YXIgbmV3QnVmID0gQnVmZmVyLmFsbG9jKDEwKSwgaiA9IDA7XG5cbiAgICBpZiAodGhpcy5zZXFPYmopIHsgLy8gV2UncmUgaW4gdGhlIHNlcXVlbmNlLlxuICAgICAgICB2YXIgZGJjc0NvZGUgPSB0aGlzLnNlcU9ialtERUZfQ0hBUl07XG4gICAgICAgIGlmIChkYmNzQ29kZSAhPT0gdW5kZWZpbmVkKSB7IC8vIFdyaXRlIGJlZ2lubmluZyBvZiB0aGUgc2VxdWVuY2UuXG4gICAgICAgICAgICBpZiAoZGJjc0NvZGUgPCAweDEwMCkge1xuICAgICAgICAgICAgICAgIG5ld0J1ZltqKytdID0gZGJjc0NvZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdCdWZbaisrXSA9IGRiY3NDb2RlID4+IDg7ICAgLy8gaGlnaCBieXRlXG4gICAgICAgICAgICAgICAgbmV3QnVmW2orK10gPSBkYmNzQ29kZSAmIDB4RkY7IC8vIGxvdyBieXRlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTZWUgdG9kbyBhYm92ZS5cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlcU9iaiA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZWFkU3Vycm9nYXRlICE9PSAtMSkge1xuICAgICAgICAvLyBJbmNvbXBsZXRlIHN1cnJvZ2F0ZSBwYWlyIC0gb25seSBsZWFkIHN1cnJvZ2F0ZSBmb3VuZC5cbiAgICAgICAgbmV3QnVmW2orK10gPSB0aGlzLmRlZmF1bHRDaGFyU2luZ2xlQnl0ZTtcbiAgICAgICAgdGhpcy5sZWFkU3Vycm9nYXRlID0gLTE7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBuZXdCdWYuc2xpY2UoMCwgaik7XG59XG5cbi8vIEV4cG9ydCBmb3IgdGVzdGluZ1xuREJDU0VuY29kZXIucHJvdG90eXBlLmZpbmRJZHggPSBmaW5kSWR4O1xuXG5cbi8vID09IERlY29kZXIgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIERCQ1NEZWNvZGVyKG9wdGlvbnMsIGNvZGVjKSB7XG4gICAgLy8gRGVjb2RlciBzdGF0ZVxuICAgIHRoaXMubm9kZUlkeCA9IDA7XG4gICAgdGhpcy5wcmV2QnVmID0gQnVmZmVyLmFsbG9jKDApO1xuXG4gICAgLy8gU3RhdGljIGRhdGFcbiAgICB0aGlzLmRlY29kZVRhYmxlcyA9IGNvZGVjLmRlY29kZVRhYmxlcztcbiAgICB0aGlzLmRlY29kZVRhYmxlU2VxID0gY29kZWMuZGVjb2RlVGFibGVTZXE7XG4gICAgdGhpcy5kZWZhdWx0Q2hhclVuaWNvZGUgPSBjb2RlYy5kZWZhdWx0Q2hhclVuaWNvZGU7XG4gICAgdGhpcy5nYjE4MDMwID0gY29kZWMuZ2IxODAzMDtcbn1cblxuREJDU0RlY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oYnVmKSB7XG4gICAgdmFyIG5ld0J1ZiA9IEJ1ZmZlci5hbGxvYyhidWYubGVuZ3RoKjIpLFxuICAgICAgICBub2RlSWR4ID0gdGhpcy5ub2RlSWR4LCBcbiAgICAgICAgcHJldkJ1ZiA9IHRoaXMucHJldkJ1ZiwgcHJldkJ1Zk9mZnNldCA9IHRoaXMucHJldkJ1Zi5sZW5ndGgsXG4gICAgICAgIHNlcVN0YXJ0ID0gLXRoaXMucHJldkJ1Zi5sZW5ndGgsIC8vIGlkeCBvZiB0aGUgc3RhcnQgb2YgY3VycmVudCBwYXJzZWQgc2VxdWVuY2UuXG4gICAgICAgIHVDb2RlO1xuXG4gICAgaWYgKHByZXZCdWZPZmZzZXQgPiAwKSAvLyBNYWtlIHByZXYgYnVmIG92ZXJsYXAgYSBsaXR0bGUgdG8gbWFrZSBpdCBlYXNpZXIgdG8gc2xpY2UgbGF0ZXIuXG4gICAgICAgIHByZXZCdWYgPSBCdWZmZXIuY29uY2F0KFtwcmV2QnVmLCBidWYuc2xpY2UoMCwgMTApXSk7XG4gICAgXG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjdXJCeXRlID0gKGkgPj0gMCkgPyBidWZbaV0gOiBwcmV2QnVmW2kgKyBwcmV2QnVmT2Zmc2V0XTtcblxuICAgICAgICAvLyBMb29rdXAgaW4gY3VycmVudCB0cmllIG5vZGUuXG4gICAgICAgIHZhciB1Q29kZSA9IHRoaXMuZGVjb2RlVGFibGVzW25vZGVJZHhdW2N1ckJ5dGVdO1xuXG4gICAgICAgIGlmICh1Q29kZSA+PSAwKSB7IFxuICAgICAgICAgICAgLy8gTm9ybWFsIGNoYXJhY3RlciwganVzdCB1c2UgaXQuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodUNvZGUgPT09IFVOQVNTSUdORUQpIHsgLy8gVW5rbm93biBjaGFyLlxuICAgICAgICAgICAgLy8gVE9ETzogQ2FsbGJhY2sgd2l0aCBzZXEuXG4gICAgICAgICAgICAvL3ZhciBjdXJTZXEgPSAoc2VxU3RhcnQgPj0gMCkgPyBidWYuc2xpY2Uoc2VxU3RhcnQsIGkrMSkgOiBwcmV2QnVmLnNsaWNlKHNlcVN0YXJ0ICsgcHJldkJ1Zk9mZnNldCwgaSsxICsgcHJldkJ1Zk9mZnNldCk7XG4gICAgICAgICAgICBpID0gc2VxU3RhcnQ7IC8vIFRyeSB0byBwYXJzZSBhZ2FpbiwgYWZ0ZXIgc2tpcHBpbmcgZmlyc3QgYnl0ZSBvZiB0aGUgc2VxdWVuY2UgKCdpJyB3aWxsIGJlIGluY3JlbWVudGVkIGJ5ICdmb3InIGN5Y2xlKS5cbiAgICAgICAgICAgIHVDb2RlID0gdGhpcy5kZWZhdWx0Q2hhclVuaWNvZGUuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh1Q29kZSA9PT0gR0IxODAzMF9DT0RFKSB7XG4gICAgICAgICAgICB2YXIgY3VyU2VxID0gKHNlcVN0YXJ0ID49IDApID8gYnVmLnNsaWNlKHNlcVN0YXJ0LCBpKzEpIDogcHJldkJ1Zi5zbGljZShzZXFTdGFydCArIHByZXZCdWZPZmZzZXQsIGkrMSArIHByZXZCdWZPZmZzZXQpO1xuICAgICAgICAgICAgdmFyIHB0ciA9IChjdXJTZXFbMF0tMHg4MSkqMTI2MDAgKyAoY3VyU2VxWzFdLTB4MzApKjEyNjAgKyAoY3VyU2VxWzJdLTB4ODEpKjEwICsgKGN1clNlcVszXS0weDMwKTtcbiAgICAgICAgICAgIHZhciBpZHggPSBmaW5kSWR4KHRoaXMuZ2IxODAzMC5nYkNoYXJzLCBwdHIpO1xuICAgICAgICAgICAgdUNvZGUgPSB0aGlzLmdiMTgwMzAudUNoYXJzW2lkeF0gKyBwdHIgLSB0aGlzLmdiMTgwMzAuZ2JDaGFyc1tpZHhdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHVDb2RlIDw9IE5PREVfU1RBUlQpIHsgLy8gR28gdG8gbmV4dCB0cmllIG5vZGUuXG4gICAgICAgICAgICBub2RlSWR4ID0gTk9ERV9TVEFSVCAtIHVDb2RlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodUNvZGUgPD0gU0VRX1NUQVJUKSB7IC8vIE91dHB1dCBhIHNlcXVlbmNlIG9mIGNoYXJzLlxuICAgICAgICAgICAgdmFyIHNlcSA9IHRoaXMuZGVjb2RlVGFibGVTZXFbU0VRX1NUQVJUIC0gdUNvZGVdO1xuICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBzZXEubGVuZ3RoIC0gMTsgaysrKSB7XG4gICAgICAgICAgICAgICAgdUNvZGUgPSBzZXFba107XG4gICAgICAgICAgICAgICAgbmV3QnVmW2orK10gPSB1Q29kZSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgbmV3QnVmW2orK10gPSB1Q29kZSA+PiA4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdUNvZGUgPSBzZXFbc2VxLmxlbmd0aC0xXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpY29udi1saXRlIGludGVybmFsIGVycm9yOiBpbnZhbGlkIGRlY29kaW5nIHRhYmxlIHZhbHVlIFwiICsgdUNvZGUgKyBcIiBhdCBcIiArIG5vZGVJZHggKyBcIi9cIiArIGN1ckJ5dGUpO1xuXG4gICAgICAgIC8vIFdyaXRlIHRoZSBjaGFyYWN0ZXIgdG8gYnVmZmVyLCBoYW5kbGluZyBoaWdoZXIgcGxhbmVzIHVzaW5nIHN1cnJvZ2F0ZSBwYWlyLlxuICAgICAgICBpZiAodUNvZGUgPiAweEZGRkYpIHsgXG4gICAgICAgICAgICB1Q29kZSAtPSAweDEwMDAwO1xuICAgICAgICAgICAgdmFyIHVDb2RlTGVhZCA9IDB4RDgwMCArIE1hdGguZmxvb3IodUNvZGUgLyAweDQwMCk7XG4gICAgICAgICAgICBuZXdCdWZbaisrXSA9IHVDb2RlTGVhZCAmIDB4RkY7XG4gICAgICAgICAgICBuZXdCdWZbaisrXSA9IHVDb2RlTGVhZCA+PiA4O1xuXG4gICAgICAgICAgICB1Q29kZSA9IDB4REMwMCArIHVDb2RlICUgMHg0MDA7XG4gICAgICAgIH1cbiAgICAgICAgbmV3QnVmW2orK10gPSB1Q29kZSAmIDB4RkY7XG4gICAgICAgIG5ld0J1ZltqKytdID0gdUNvZGUgPj4gODtcblxuICAgICAgICAvLyBSZXNldCB0cmllIG5vZGUuXG4gICAgICAgIG5vZGVJZHggPSAwOyBzZXFTdGFydCA9IGkrMTtcbiAgICB9XG5cbiAgICB0aGlzLm5vZGVJZHggPSBub2RlSWR4O1xuICAgIHRoaXMucHJldkJ1ZiA9IChzZXFTdGFydCA+PSAwKSA/IGJ1Zi5zbGljZShzZXFTdGFydCkgOiBwcmV2QnVmLnNsaWNlKHNlcVN0YXJ0ICsgcHJldkJ1Zk9mZnNldCk7XG4gICAgcmV0dXJuIG5ld0J1Zi5zbGljZSgwLCBqKS50b1N0cmluZygndWNzMicpO1xufVxuXG5EQkNTRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJldCA9ICcnO1xuXG4gICAgLy8gVHJ5IHRvIHBhcnNlIGFsbCByZW1haW5pbmcgY2hhcnMuXG4gICAgd2hpbGUgKHRoaXMucHJldkJ1Zi5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIFNraXAgMSBjaGFyYWN0ZXIgaW4gdGhlIGJ1ZmZlci5cbiAgICAgICAgcmV0ICs9IHRoaXMuZGVmYXVsdENoYXJVbmljb2RlO1xuICAgICAgICB2YXIgYnVmID0gdGhpcy5wcmV2QnVmLnNsaWNlKDEpO1xuXG4gICAgICAgIC8vIFBhcnNlIHJlbWFpbmluZyBhcyB1c3VhbC5cbiAgICAgICAgdGhpcy5wcmV2QnVmID0gQnVmZmVyLmFsbG9jKDApO1xuICAgICAgICB0aGlzLm5vZGVJZHggPSAwO1xuICAgICAgICBpZiAoYnVmLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXQgKz0gdGhpcy53cml0ZShidWYpO1xuICAgIH1cblxuICAgIHRoaXMubm9kZUlkeCA9IDA7XG4gICAgcmV0dXJuIHJldDtcbn1cblxuLy8gQmluYXJ5IHNlYXJjaCBmb3IgR0IxODAzMC4gUmV0dXJucyBsYXJnZXN0IGkgc3VjaCB0aGF0IHRhYmxlW2ldIDw9IHZhbC5cbmZ1bmN0aW9uIGZpbmRJZHgodGFibGUsIHZhbCkge1xuICAgIGlmICh0YWJsZVswXSA+IHZhbClcbiAgICAgICAgcmV0dXJuIC0xO1xuXG4gICAgdmFyIGwgPSAwLCByID0gdGFibGUubGVuZ3RoO1xuICAgIHdoaWxlIChsIDwgci0xKSB7IC8vIGFsd2F5cyB0YWJsZVtsXSA8PSB2YWwgPCB0YWJsZVtyXVxuICAgICAgICB2YXIgbWlkID0gbCArIE1hdGguZmxvb3IoKHItbCsxKS8yKTtcbiAgICAgICAgaWYgKHRhYmxlW21pZF0gPD0gdmFsKVxuICAgICAgICAgICAgbCA9IG1pZDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgciA9IG1pZDtcbiAgICB9XG4gICAgcmV0dXJuIGw7XG59XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBEZXNjcmlwdGlvbiBvZiBzdXBwb3J0ZWQgZG91YmxlIGJ5dGUgZW5jb2RpbmdzIGFuZCBhbGlhc2VzLlxuLy8gVGFibGVzIGFyZSBub3QgcmVxdWlyZSgpLWQgdW50aWwgdGhleSBhcmUgbmVlZGVkIHRvIHNwZWVkIHVwIGxpYnJhcnkgbG9hZC5cbi8vIHJlcXVpcmUoKS1zIGFyZSBkaXJlY3QgdG8gc3VwcG9ydCBCcm93c2VyaWZ5LlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBcbiAgICAvLyA9PSBKYXBhbmVzZS9TaGlmdEpJUyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gQWxsIGphcGFuZXNlIGVuY29kaW5ncyBhcmUgYmFzZWQgb24gSklTIFggc2V0IG9mIHN0YW5kYXJkczpcbiAgICAvLyBKSVMgWCAwMjAxIC0gU2luZ2xlLWJ5dGUgZW5jb2Rpbmcgb2YgQVNDSUkgKyDCpSArIEthbmEgY2hhcnMgYXQgMHhBMS0weERGLlxuICAgIC8vIEpJUyBYIDAyMDggLSBNYWluIHNldCBvZiA2ODc5IGNoYXJhY3RlcnMsIHBsYWNlZCBpbiA5NHg5NCBwbGFuZSwgdG8gYmUgZW5jb2RlZCBieSAyIGJ5dGVzLiBcbiAgICAvLyAgICAgICAgICAgICAgSGFzIHNldmVyYWwgdmFyaWF0aW9ucyBpbiAxOTc4LCAxOTgzLCAxOTkwIGFuZCAxOTk3LlxuICAgIC8vIEpJUyBYIDAyMTIgLSBTdXBwbGVtZW50YXJ5IHBsYW5lIG9mIDYwNjcgY2hhcnMgaW4gOTR4OTQgcGxhbmUuIDE5OTAuIEVmZmVjdGl2ZWx5IGRlYWQuXG4gICAgLy8gSklTIFggMDIxMyAtIEV4dGVuc2lvbiBhbmQgbW9kZXJuIHJlcGxhY2VtZW50IG9mIDAyMDggYW5kIDAyMTIuIFRvdGFsIGNoYXJzOiAxMTIzMy5cbiAgICAvLyAgICAgICAgICAgICAgMiBwbGFuZXMsIGZpcnN0IGlzIHN1cGVyc2V0IG9mIDAyMDgsIHNlY29uZCAtIHJldmlzZWQgMDIxMi5cbiAgICAvLyAgICAgICAgICAgICAgSW50cm9kdWNlZCBpbiAyMDAwLCByZXZpc2VkIDIwMDQuIFNvbWUgY2hhcmFjdGVycyBhcmUgaW4gVW5pY29kZSBQbGFuZSAyICgweDJ4eHh4KVxuXG4gICAgLy8gQnl0ZSBlbmNvZGluZ3MgYXJlOlxuICAgIC8vICAqIFNoaWZ0X0pJUzogQ29tcGF0aWJsZSB3aXRoIDAyMDEsIHVzZXMgbm90IGRlZmluZWQgY2hhcnMgaW4gdG9wIGhhbGYgYXMgbGVhZCBieXRlcyBmb3IgZG91YmxlLWJ5dGVcbiAgICAvLyAgICAgICAgICAgICAgIGVuY29kaW5nIG9mIDAyMDguIExlYWQgYnl0ZSByYW5nZXM6IDB4ODEtMHg5RiwgMHhFMC0weEVGOyBUcmFpbCBieXRlIHJhbmdlczogMHg0MC0weDdFLCAweDgwLTB4OUUsIDB4OUYtMHhGQy5cbiAgICAvLyAgICAgICAgICAgICAgIFdpbmRvd3MgQ1A5MzIgaXMgYSBzdXBlcnNldCBvZiBTaGlmdF9KSVMuIFNvbWUgY29tcGFuaWVzIGFkZGVkIG1vcmUgY2hhcnMsIG5vdGFibHkgS0RESS5cbiAgICAvLyAgKiBFVUMtSlA6ICAgIFVwIHRvIDMgYnl0ZXMgcGVyIGNoYXJhY3Rlci4gVXNlZCBtb3N0bHkgb24gKm5peGVzLlxuICAgIC8vICAgICAgICAgICAgICAgMHgwMC0weDdGICAgICAgIC0gbG93ZXIgcGFydCBvZiAwMjAxXG4gICAgLy8gICAgICAgICAgICAgICAweDhFLCAweEExLTB4REYgLSB1cHBlciBwYXJ0IG9mIDAyMDFcbiAgICAvLyAgICAgICAgICAgICAgICgweEExLTB4RkUpeDIgICAtIDAyMDggcGxhbmUgKDk0eDk0KS5cbiAgICAvLyAgICAgICAgICAgICAgIDB4OEYsICgweEExLTB4RkUpeDIgLSAwMjEyIHBsYW5lICg5NHg5NCkuXG4gICAgLy8gICogSklTIFggMjA4OiA3LWJpdCwgZGlyZWN0IGVuY29kaW5nIG9mIDAyMDguIEJ5dGUgcmFuZ2VzOiAweDIxLTB4N0UgKDk0IHZhbHVlcykuIFVuY29tbW9uLlxuICAgIC8vICAgICAgICAgICAgICAgVXNlZCBhcy1pcyBpbiBJU08yMDIyIGZhbWlseS5cbiAgICAvLyAgKiBJU08yMDIyLUpQOiBTdGF0ZWZ1bCBlbmNvZGluZywgd2l0aCBlc2NhcGUgc2VxdWVuY2VzIHRvIHN3aXRjaCBiZXR3ZWVuIEFTQ0lJLCBcbiAgICAvLyAgICAgICAgICAgICAgICAwMjAxLTE5NzYgUm9tYW4sIDAyMDgtMTk3OCwgMDIwOC0xOTgzLlxuICAgIC8vICAqIElTTzIwMjItSlAtMTogQWRkcyBlc2Mgc2VxIGZvciAwMjEyLTE5OTAuXG4gICAgLy8gICogSVNPMjAyMi1KUC0yOiBBZGRzIGVzYyBzZXEgZm9yIEdCMjMxMy0xOTgwLCBLU1gxMDAxLTE5OTIsIElTTzg4NTktMSwgSVNPODg1OS03LlxuICAgIC8vICAqIElTTzIwMjItSlAtMzogQWRkcyBlc2Mgc2VxIGZvciAwMjAxLTE5NzYgS2FuYSBzZXQsIDAyMTMtMjAwMCBQbGFuZXMgMSwgMi5cbiAgICAvLyAgKiBJU08yMDIyLUpQLTIwMDQ6IEFkZHMgMDIxMy0yMDA0IFBsYW5lIDEuXG4gICAgLy9cbiAgICAvLyBBZnRlciBKSVMgWCAwMjEzIGFwcGVhcmVkLCBTaGlmdF9KSVMtMjAwNCwgRVVDLUpJU1gwMjEzIGFuZCBJU08yMDIyLUpQLTIwMDQgZm9sbG93ZWQsIHdpdGgganVzdCBjaGFuZ2luZyB0aGUgcGxhbmVzLlxuICAgIC8vXG4gICAgLy8gT3ZlcmFsbCwgaXQgc2VlbXMgdGhhdCBpdCdzIGEgbWVzcyA6KCBodHRwOi8vd3d3OC5wbGFsYS5vci5qcC90a3Vib3RhMS91bmljb2RlLXN5bWJvbHMtbWFwMi5odG1sXG5cbiAgICAnc2hpZnRqaXMnOiB7XG4gICAgICAgIHR5cGU6ICdfZGJjcycsXG4gICAgICAgIHRhYmxlOiBmdW5jdGlvbigpIHsgcmV0dXJuIHJlcXVpcmUoJy4vdGFibGVzL3NoaWZ0amlzLmpzb24nKSB9LFxuICAgICAgICBlbmNvZGVBZGQ6IHsnXFx1MDBhNSc6IDB4NUMsICdcXHUyMDNFJzogMHg3RX0sXG4gICAgICAgIGVuY29kZVNraXBWYWxzOiBbe2Zyb206IDB4RUQ0MCwgdG86IDB4Rjk0MH1dLFxuICAgIH0sXG4gICAgJ2Nzc2hpZnRqaXMnOiAnc2hpZnRqaXMnLFxuICAgICdtc2thbmppJzogJ3NoaWZ0amlzJyxcbiAgICAnc2ppcyc6ICdzaGlmdGppcycsXG4gICAgJ3dpbmRvd3MzMWonOiAnc2hpZnRqaXMnLFxuICAgICdtczMxaic6ICdzaGlmdGppcycsXG4gICAgJ3hzamlzJzogJ3NoaWZ0amlzJyxcbiAgICAnd2luZG93czkzMic6ICdzaGlmdGppcycsXG4gICAgJ21zOTMyJzogJ3NoaWZ0amlzJyxcbiAgICAnOTMyJzogJ3NoaWZ0amlzJyxcbiAgICAnY3A5MzInOiAnc2hpZnRqaXMnLFxuXG4gICAgJ2V1Y2pwJzoge1xuICAgICAgICB0eXBlOiAnX2RiY3MnLFxuICAgICAgICB0YWJsZTogZnVuY3Rpb24oKSB7IHJldHVybiByZXF1aXJlKCcuL3RhYmxlcy9ldWNqcC5qc29uJykgfSxcbiAgICAgICAgZW5jb2RlQWRkOiB7J1xcdTAwYTUnOiAweDVDLCAnXFx1MjAzRSc6IDB4N0V9LFxuICAgIH0sXG5cbiAgICAvLyBUT0RPOiBLRERJIGV4dGVuc2lvbiB0byBTaGlmdF9KSVNcbiAgICAvLyBUT0RPOiBJQk0gQ0NTSUQgOTQyID0gQ1A5MzIsIGJ1dCBGMC1GOSBjdXN0b20gY2hhcnMgYW5kIG90aGVyIGNoYXIgY2hhbmdlcy5cbiAgICAvLyBUT0RPOiBJQk0gQ0NTSUQgOTQzID0gU2hpZnRfSklTID0gQ1A5MzIgd2l0aCBvcmlnaW5hbCBTaGlmdF9KSVMgbG93ZXIgMTI4IGNoYXJzLlxuXG5cbiAgICAvLyA9PSBDaGluZXNlL0dCSyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HQktcbiAgICAvLyBXZSBtb3N0bHkgaW1wbGVtZW50IFczQyByZWNvbW1lbmRhdGlvbjogaHR0cHM6Ly93d3cudzMub3JnL1RSL2VuY29kaW5nLyNnYmstZW5jb2RlclxuXG4gICAgLy8gT2xkZXN0IEdCMjMxMiAoMTk4MSwgfjc2MDAgY2hhcnMpIGlzIGEgc3Vic2V0IG9mIENQOTM2XG4gICAgJ2diMjMxMic6ICdjcDkzNicsXG4gICAgJ2diMjMxMjgwJzogJ2NwOTM2JyxcbiAgICAnZ2IyMzEyMTk4MCc6ICdjcDkzNicsXG4gICAgJ2NzZ2IyMzEyJzogJ2NwOTM2JyxcbiAgICAnY3Npc281OGdiMjMxMjgwJzogJ2NwOTM2JyxcbiAgICAnZXVjY24nOiAnY3A5MzYnLFxuXG4gICAgLy8gTWljcm9zb2Z0J3MgQ1A5MzYgaXMgYSBzdWJzZXQgYW5kIGFwcHJveGltYXRpb24gb2YgR0JLLlxuICAgICd3aW5kb3dzOTM2JzogJ2NwOTM2JyxcbiAgICAnbXM5MzYnOiAnY3A5MzYnLFxuICAgICc5MzYnOiAnY3A5MzYnLFxuICAgICdjcDkzNic6IHtcbiAgICAgICAgdHlwZTogJ19kYmNzJyxcbiAgICAgICAgdGFibGU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gcmVxdWlyZSgnLi90YWJsZXMvY3A5MzYuanNvbicpIH0sXG4gICAgfSxcblxuICAgIC8vIEdCSyAofjIyMDAwIGNoYXJzKSBpcyBhbiBleHRlbnNpb24gb2YgQ1A5MzYgdGhhdCBhZGRlZCB1c2VyLW1hcHBlZCBjaGFycyBhbmQgc29tZSBvdGhlci5cbiAgICAnZ2JrJzoge1xuICAgICAgICB0eXBlOiAnX2RiY3MnLFxuICAgICAgICB0YWJsZTogZnVuY3Rpb24oKSB7IHJldHVybiByZXF1aXJlKCcuL3RhYmxlcy9jcDkzNi5qc29uJykuY29uY2F0KHJlcXVpcmUoJy4vdGFibGVzL2diay1hZGRlZC5qc29uJykpIH0sXG4gICAgfSxcbiAgICAneGdiayc6ICdnYmsnLFxuICAgICdpc29pcjU4JzogJ2diaycsXG5cbiAgICAvLyBHQjE4MDMwIGlzIGFuIGFsZ29yaXRobWljIGV4dGVuc2lvbiBvZiBHQksuXG4gICAgLy8gTWFpbiBzb3VyY2U6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9lbmNvZGluZy8jZ2JrLWVuY29kZXJcbiAgICAvLyBodHRwOi8vaWN1LXByb2plY3Qub3JnL2RvY3MvcGFwZXJzL2diMTgwMzAuaHRtbFxuICAgIC8vIGh0dHA6Ly9zb3VyY2UuaWN1LXByb2plY3Qub3JnL3JlcG9zL2ljdS9kYXRhL3RydW5rL2NoYXJzZXQvZGF0YS94bWwvZ2ItMTgwMzAtMjAwMC54bWxcbiAgICAvLyBodHRwOi8vd3d3LmtobmdhaS5jb20vY2hpbmVzZS9jaGFybWFwL3RibGdiay5waHA/cGFnZT0wXG4gICAgJ2diMTgwMzAnOiB7XG4gICAgICAgIHR5cGU6ICdfZGJjcycsXG4gICAgICAgIHRhYmxlOiBmdW5jdGlvbigpIHsgcmV0dXJuIHJlcXVpcmUoJy4vdGFibGVzL2NwOTM2Lmpzb24nKS5jb25jYXQocmVxdWlyZSgnLi90YWJsZXMvZ2JrLWFkZGVkLmpzb24nKSkgfSxcbiAgICAgICAgZ2IxODAzMDogZnVuY3Rpb24oKSB7IHJldHVybiByZXF1aXJlKCcuL3RhYmxlcy9nYjE4MDMwLXJhbmdlcy5qc29uJykgfSxcbiAgICAgICAgZW5jb2RlU2tpcFZhbHM6IFsweDgwXSxcbiAgICAgICAgZW5jb2RlQWRkOiB7J+KCrCc6IDB4QTJFM30sXG4gICAgfSxcblxuICAgICdjaGluZXNlJzogJ2diMTgwMzAnLFxuXG5cbiAgICAvLyA9PSBLb3JlYW4gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gRVVDLUtSLCBLU19DXzU2MDEgYW5kIEtTIFggMTAwMSBhcmUgZXhhY3RseSB0aGUgc2FtZS5cbiAgICAnd2luZG93czk0OSc6ICdjcDk0OScsXG4gICAgJ21zOTQ5JzogJ2NwOTQ5JyxcbiAgICAnOTQ5JzogJ2NwOTQ5JyxcbiAgICAnY3A5NDknOiB7XG4gICAgICAgIHR5cGU6ICdfZGJjcycsXG4gICAgICAgIHRhYmxlOiBmdW5jdGlvbigpIHsgcmV0dXJuIHJlcXVpcmUoJy4vdGFibGVzL2NwOTQ5Lmpzb24nKSB9LFxuICAgIH0sXG5cbiAgICAnY3NldWNrcic6ICdjcDk0OScsXG4gICAgJ2Nza3NjNTYwMTE5ODcnOiAnY3A5NDknLFxuICAgICdldWNrcic6ICdjcDk0OScsXG4gICAgJ2lzb2lyMTQ5JzogJ2NwOTQ5JyxcbiAgICAna29yZWFuJzogJ2NwOTQ5JyxcbiAgICAna3NjNTYwMTE5ODcnOiAnY3A5NDknLFxuICAgICdrc2M1NjAxMTk4OSc6ICdjcDk0OScsXG4gICAgJ2tzYzU2MDEnOiAnY3A5NDknLFxuXG5cbiAgICAvLyA9PSBCaWc1L1RhaXdhbi9Ib25nIEtvbmcgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gVGhlcmUgYXJlIGxvdHMgb2YgdGFibGVzIGZvciBCaWc1IGFuZCBjcDk1MC4gUGxlYXNlIHNlZSB0aGUgZm9sbG93aW5nIGxpbmtzIGZvciBoaXN0b3J5OlxuICAgIC8vIGh0dHA6Ly9tb3p0dy5vcmcvZG9jcy9iaWc1LyAgaHR0cDovL3d3dy5oYWlibGUuZGUvYnJ1bm8vY2hhcnNldHMvY29udmVyc2lvbi10YWJsZXMvQmlnNS5odG1sXG4gICAgLy8gVmFyaWF0aW9ucywgaW4gcm91Z2hseSBudW1iZXIgb2YgZGVmaW5lZCBjaGFyczpcbiAgICAvLyAgKiBXaW5kb3dzIENQIDk1MDogTWljcm9zb2Z0IHZhcmlhbnQgb2YgQmlnNS4gQ2Fub25pY2FsOiBodHRwOi8vd3d3LnVuaWNvZGUub3JnL1B1YmxpYy9NQVBQSU5HUy9WRU5ET1JTL01JQ1NGVC9XSU5ET1dTL0NQOTUwLlRYVFxuICAgIC8vICAqIFdpbmRvd3MgQ1AgOTUxOiBNaWNyb3NvZnQgdmFyaWFudCBvZiBCaWc1LUhLU0NTLTIwMDEuIFNlZW1zIHRvIGJlIG5ldmVyIHB1YmxpYy4gaHR0cDovL21lLmFiZWxjaGV1bmcub3JnL2FydGljbGVzL3Jlc2VhcmNoL3doYXQtaXMtY3A5NTEvXG4gICAgLy8gICogQmlnNS0yMDAzIChUYWl3YW4gc3RhbmRhcmQpIGFsbW9zdCBzdXBlcnNldCBvZiBjcDk1MC5cbiAgICAvLyAgKiBVbmljb2RlLWF0LW9uIChVQU8pIC8gTW96aWxsYSAxLjguIEZhbGxpbmcgb3V0IG9mIHVzZSBvbiB0aGUgV2ViLiBOb3Qgc3VwcG9ydGVkIGJ5IG90aGVyIGJyb3dzZXJzLlxuICAgIC8vICAqIEJpZzUtSEtTQ1MgKC0yMDAxLCAtMjAwNCwgLTIwMDgpLiBIb25nIEtvbmcgc3RhbmRhcmQuIFxuICAgIC8vICAgIG1hbnkgdW5pY29kZSBjb2RlIHBvaW50cyBtb3ZlZCBmcm9tIFBVQSB0byBTdXBwbGVtZW50YXJ5IHBsYW5lIChVKzJYWFhYKSBvdmVyIHRoZSB5ZWFycy5cbiAgICAvLyAgICBQbHVzLCBpdCBoYXMgNCBjb21iaW5pbmcgc2VxdWVuY2VzLlxuICAgIC8vICAgIFNlZW1zIHRoYXQgTW96aWxsYSByZWZ1c2VkIHRvIHN1cHBvcnQgaXQgZm9yIDEwIHlycy4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTYyNDMxIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTMxMDI5OVxuICAgIC8vICAgIGJlY2F1c2UgYmlnNS1oa3NjcyBpcyB0aGUgb25seSBlbmNvZGluZyB0byBpbmNsdWRlIGFzdHJhbCBjaGFyYWN0ZXJzIGluIG5vbi1hbGdvcml0aG1pYyB3YXkuXG4gICAgLy8gICAgSW1wbGVtZW50YXRpb25zIGFyZSBub3QgY29uc2lzdGVudCB3aXRoaW4gYnJvd3NlcnM7IHNvbWV0aW1lcyBsYWJlbGVkIGFzIGp1c3QgYmlnNS5cbiAgICAvLyAgICBNUyBJbnRlcm5ldCBFeHBsb3JlciBzd2l0Y2hlcyBmcm9tIGJpZzUgdG8gYmlnNS1oa3NjcyB3aGVuIGEgcGF0Y2ggYXBwbGllZC5cbiAgICAvLyAgICBHcmVhdCBkaXNjdXNzaW9uICYgcmVjYXAgb2Ygd2hhdCdzIGdvaW5nIG9uIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTkxMjQ3MCNjMzFcbiAgICAvLyAgICBJbiB0aGUgZW5jb2RlciwgaXQgbWlnaHQgbWFrZSBzZW5zZSB0byBzdXBwb3J0IGVuY29kaW5nIG9sZCBQVUEgbWFwcGluZ3MgdG8gQmlnNSBieXRlcyBzZXEtcy5cbiAgICAvLyAgICBPZmZpY2lhbCBzcGVjOiBodHRwOi8vd3d3Lm9nY2lvLmdvdi5oay9lbi9idXNpbmVzcy90ZWNoX3Byb21vdGlvbi9jY2xpL3Rlcm1zL2RvYy8yMDAzY21wXzIwMDgudHh0XG4gICAgLy8gICAgICAgICAgICAgICAgICAgaHR0cDovL3d3dy5vZ2Npby5nb3YuaGsvdGMvYnVzaW5lc3MvdGVjaF9wcm9tb3Rpb24vY2NsaS90ZXJtcy9kb2MvaGtzY3MtMjAwOC1iaWc1LWlzby50eHRcbiAgICAvLyBcbiAgICAvLyBDdXJyZW50IHVuZGVyc3RhbmRpbmcgb2YgaG93IHRvIGRlYWwgd2l0aCBCaWc1KC1IS1NDUykgaXMgaW4gdGhlIEVuY29kaW5nIFN0YW5kYXJkLCBodHRwOi8vZW5jb2Rpbmcuc3BlYy53aGF0d2cub3JnLyNiaWc1LWVuY29kZXJcbiAgICAvLyBVbmljb2RlIG1hcHBpbmcgKGh0dHA6Ly93d3cudW5pY29kZS5vcmcvUHVibGljL01BUFBJTkdTL09CU09MRVRFL0VBU1RBU0lBL09USEVSL0JJRzUuVFhUKSBpcyBzYWlkIHRvIGJlIHdyb25nLlxuXG4gICAgJ3dpbmRvd3M5NTAnOiAnY3A5NTAnLFxuICAgICdtczk1MCc6ICdjcDk1MCcsXG4gICAgJzk1MCc6ICdjcDk1MCcsXG4gICAgJ2NwOTUwJzoge1xuICAgICAgICB0eXBlOiAnX2RiY3MnLFxuICAgICAgICB0YWJsZTogZnVuY3Rpb24oKSB7IHJldHVybiByZXF1aXJlKCcuL3RhYmxlcy9jcDk1MC5qc29uJykgfSxcbiAgICB9LFxuXG4gICAgLy8gQmlnNSBoYXMgbWFueSB2YXJpYXRpb25zIGFuZCBpcyBhbiBleHRlbnNpb24gb2YgY3A5NTAuIFdlIHVzZSBFbmNvZGluZyBTdGFuZGFyZCdzIGFzIGEgY29uc2Vuc3VzLlxuICAgICdiaWc1JzogJ2JpZzVoa3NjcycsXG4gICAgJ2JpZzVoa3Njcyc6IHtcbiAgICAgICAgdHlwZTogJ19kYmNzJyxcbiAgICAgICAgdGFibGU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gcmVxdWlyZSgnLi90YWJsZXMvY3A5NTAuanNvbicpLmNvbmNhdChyZXF1aXJlKCcuL3RhYmxlcy9iaWc1LWFkZGVkLmpzb24nKSkgfSxcbiAgICAgICAgZW5jb2RlU2tpcFZhbHM6IFsweGEyY2NdLFxuICAgIH0sXG5cbiAgICAnY25iaWc1JzogJ2JpZzVoa3NjcycsXG4gICAgJ2NzYmlnNSc6ICdiaWc1aGtzY3MnLFxuICAgICd4eGJpZzUnOiAnYmlnNWhrc2NzJyxcbn07XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCIvKiFcbiAqIGVlLWZpcnN0XG4gKiBDb3B5cmlnaHQoYykgMjAxNCBKb25hdGhhbiBPbmdcbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZmlyc3RcblxuLyoqXG4gKiBHZXQgdGhlIGZpcnN0IGV2ZW50IGluIGEgc2V0IG9mIGV2ZW50IGVtaXR0ZXJzIGFuZCBldmVudCBwYWlycy5cbiAqXG4gKiBAcGFyYW0ge2FycmF5fSBzdHVmZlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZG9uZVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZpcnN0KHN0dWZmLCBkb25lKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShzdHVmZikpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJnIG11c3QgYmUgYW4gYXJyYXkgb2YgW2VlLCBldmVudHMuLi5dIGFycmF5cycpXG5cbiAgdmFyIGNsZWFudXBzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0dWZmLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGFyciA9IHN0dWZmW2ldXG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyKSB8fCBhcnIubGVuZ3RoIDwgMilcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VhY2ggYXJyYXkgbWVtYmVyIG11c3QgYmUgW2VlLCBldmVudHMuLi5dJylcblxuICAgIHZhciBlZSA9IGFyclswXVxuXG4gICAgZm9yICh2YXIgaiA9IDE7IGogPCBhcnIubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBldmVudCA9IGFycltqXVxuICAgICAgdmFyIGZuID0gbGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKVxuXG4gICAgICAvLyBsaXN0ZW4gdG8gdGhlIGV2ZW50XG4gICAgICBlZS5vbihldmVudCwgZm4pXG4gICAgICAvLyBwdXNoIHRoaXMgbGlzdGVuZXIgdG8gdGhlIGxpc3Qgb2YgY2xlYW51cHNcbiAgICAgIGNsZWFudXBzLnB1c2goe1xuICAgICAgICBlZTogZWUsXG4gICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgZm46IGZuLFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjYWxsYmFjaygpIHtcbiAgICBjbGVhbnVwKClcbiAgICBkb25lLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgdmFyIHhcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsZWFudXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB4ID0gY2xlYW51cHNbaV1cbiAgICAgIHguZWUucmVtb3ZlTGlzdGVuZXIoeC5ldmVudCwgeC5mbilcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0aHVuayhmbikge1xuICAgIGRvbmUgPSBmblxuICB9XG5cbiAgdGh1bmsuY2FuY2VsID0gY2xlYW51cFxuXG4gIHJldHVybiB0aHVua1xufVxuXG4vKipcbiAqIENyZWF0ZSB0aGUgZXZlbnQgbGlzdGVuZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxpc3RlbmVyKGV2ZW50LCBkb25lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBvbmV2ZW50KGFyZzEpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKVxuICAgIHZhciBlZSA9IHRoaXNcbiAgICB2YXIgZXJyID0gZXZlbnQgPT09ICdlcnJvcidcbiAgICAgID8gYXJnMVxuICAgICAgOiBudWxsXG5cbiAgICAvLyBjb3B5IGFyZ3MgdG8gcHJldmVudCBhcmd1bWVudHMgZXNjYXBpbmcgc2NvcGVcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV1cbiAgICB9XG5cbiAgICBkb25lKGVyciwgZWUsIGV2ZW50LCBhcmdzKVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtO1xudmFyIGJpbmRpbmcgPSByZXF1aXJlKCcuL2JpbmRpbmcnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpLm9rO1xudmFyIGtNYXhMZW5ndGggPSByZXF1aXJlKCdidWZmZXInKS5rTWF4TGVuZ3RoO1xudmFyIGtSYW5nZUVycm9yTWVzc2FnZSA9ICdDYW5ub3QgY3JlYXRlIGZpbmFsIEJ1ZmZlci4gSXQgd291bGQgYmUgbGFyZ2VyICcgKyAndGhhbiAweCcgKyBrTWF4TGVuZ3RoLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnO1xuXG4vLyB6bGliIGRvZXNuJ3QgcHJvdmlkZSB0aGVzZSwgc28ga2x1ZGdlIHRoZW0gaW4gZm9sbG93aW5nIHRoZSBzYW1lXG4vLyBjb25zdCBuYW1pbmcgc2NoZW1lIHpsaWIgdXNlcy5cbmJpbmRpbmcuWl9NSU5fV0lORE9XQklUUyA9IDg7XG5iaW5kaW5nLlpfTUFYX1dJTkRPV0JJVFMgPSAxNTtcbmJpbmRpbmcuWl9ERUZBVUxUX1dJTkRPV0JJVFMgPSAxNTtcblxuLy8gZmV3ZXIgdGhhbiA2NCBieXRlcyBwZXIgY2h1bmsgaXMgc3R1cGlkLlxuLy8gdGVjaG5pY2FsbHkgaXQgY291bGQgd29yayB3aXRoIGFzIGZldyBhcyA4LCBidXQgZXZlbiA2NCBieXRlc1xuLy8gaXMgYWJzdXJkbHkgbG93LiAgVXN1YWxseSBhIE1CIG9yIG1vcmUgaXMgYmVzdC5cbmJpbmRpbmcuWl9NSU5fQ0hVTksgPSA2NDtcbmJpbmRpbmcuWl9NQVhfQ0hVTksgPSBJbmZpbml0eTtcbmJpbmRpbmcuWl9ERUZBVUxUX0NIVU5LID0gMTYgKiAxMDI0O1xuXG5iaW5kaW5nLlpfTUlOX01FTUxFVkVMID0gMTtcbmJpbmRpbmcuWl9NQVhfTUVNTEVWRUwgPSA5O1xuYmluZGluZy5aX0RFRkFVTFRfTUVNTEVWRUwgPSA4O1xuXG5iaW5kaW5nLlpfTUlOX0xFVkVMID0gLTE7XG5iaW5kaW5nLlpfTUFYX0xFVkVMID0gOTtcbmJpbmRpbmcuWl9ERUZBVUxUX0xFVkVMID0gYmluZGluZy5aX0RFRkFVTFRfQ09NUFJFU1NJT047XG5cbi8vIGV4cG9zZSBhbGwgdGhlIHpsaWIgY29uc3RhbnRzXG52YXIgYmtleXMgPSBPYmplY3Qua2V5cyhiaW5kaW5nKTtcbmZvciAodmFyIGJrID0gMDsgYmsgPCBia2V5cy5sZW5ndGg7IGJrKyspIHtcbiAgdmFyIGJrZXkgPSBia2V5c1tia107XG4gIGlmIChia2V5Lm1hdGNoKC9eWi8pKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGJrZXksIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiBiaW5kaW5nW2JrZXldLCB3cml0YWJsZTogZmFsc2VcbiAgICB9KTtcbiAgfVxufVxuXG4vLyB0cmFuc2xhdGlvbiB0YWJsZSBmb3IgcmV0dXJuIGNvZGVzLlxudmFyIGNvZGVzID0ge1xuICBaX09LOiBiaW5kaW5nLlpfT0ssXG4gIFpfU1RSRUFNX0VORDogYmluZGluZy5aX1NUUkVBTV9FTkQsXG4gIFpfTkVFRF9ESUNUOiBiaW5kaW5nLlpfTkVFRF9ESUNULFxuICBaX0VSUk5POiBiaW5kaW5nLlpfRVJSTk8sXG4gIFpfU1RSRUFNX0VSUk9SOiBiaW5kaW5nLlpfU1RSRUFNX0VSUk9SLFxuICBaX0RBVEFfRVJST1I6IGJpbmRpbmcuWl9EQVRBX0VSUk9SLFxuICBaX01FTV9FUlJPUjogYmluZGluZy5aX01FTV9FUlJPUixcbiAgWl9CVUZfRVJST1I6IGJpbmRpbmcuWl9CVUZfRVJST1IsXG4gIFpfVkVSU0lPTl9FUlJPUjogYmluZGluZy5aX1ZFUlNJT05fRVJST1Jcbn07XG5cbnZhciBja2V5cyA9IE9iamVjdC5rZXlzKGNvZGVzKTtcbmZvciAodmFyIGNrID0gMDsgY2sgPCBja2V5cy5sZW5ndGg7IGNrKyspIHtcbiAgdmFyIGNrZXkgPSBja2V5c1tja107XG4gIGNvZGVzW2NvZGVzW2NrZXldXSA9IGNrZXk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnY29kZXMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiBPYmplY3QuZnJlZXplKGNvZGVzKSwgd3JpdGFibGU6IGZhbHNlXG59KTtcblxuZXhwb3J0cy5EZWZsYXRlID0gRGVmbGF0ZTtcbmV4cG9ydHMuSW5mbGF0ZSA9IEluZmxhdGU7XG5leHBvcnRzLkd6aXAgPSBHemlwO1xuZXhwb3J0cy5HdW56aXAgPSBHdW56aXA7XG5leHBvcnRzLkRlZmxhdGVSYXcgPSBEZWZsYXRlUmF3O1xuZXhwb3J0cy5JbmZsYXRlUmF3ID0gSW5mbGF0ZVJhdztcbmV4cG9ydHMuVW56aXAgPSBVbnppcDtcblxuZXhwb3J0cy5jcmVhdGVEZWZsYXRlID0gZnVuY3Rpb24gKG8pIHtcbiAgcmV0dXJuIG5ldyBEZWZsYXRlKG8pO1xufTtcblxuZXhwb3J0cy5jcmVhdGVJbmZsYXRlID0gZnVuY3Rpb24gKG8pIHtcbiAgcmV0dXJuIG5ldyBJbmZsYXRlKG8pO1xufTtcblxuZXhwb3J0cy5jcmVhdGVEZWZsYXRlUmF3ID0gZnVuY3Rpb24gKG8pIHtcbiAgcmV0dXJuIG5ldyBEZWZsYXRlUmF3KG8pO1xufTtcblxuZXhwb3J0cy5jcmVhdGVJbmZsYXRlUmF3ID0gZnVuY3Rpb24gKG8pIHtcbiAgcmV0dXJuIG5ldyBJbmZsYXRlUmF3KG8pO1xufTtcblxuZXhwb3J0cy5jcmVhdGVHemlwID0gZnVuY3Rpb24gKG8pIHtcbiAgcmV0dXJuIG5ldyBHemlwKG8pO1xufTtcblxuZXhwb3J0cy5jcmVhdGVHdW56aXAgPSBmdW5jdGlvbiAobykge1xuICByZXR1cm4gbmV3IEd1bnppcChvKTtcbn07XG5cbmV4cG9ydHMuY3JlYXRlVW56aXAgPSBmdW5jdGlvbiAobykge1xuICByZXR1cm4gbmV3IFVuemlwKG8pO1xufTtcblxuLy8gQ29udmVuaWVuY2UgbWV0aG9kcy5cbi8vIGNvbXByZXNzL2RlY29tcHJlc3MgYSBzdHJpbmcgb3IgYnVmZmVyIGluIG9uZSBzdGVwLlxuZXhwb3J0cy5kZWZsYXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRzO1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICByZXR1cm4gemxpYkJ1ZmZlcihuZXcgRGVmbGF0ZShvcHRzKSwgYnVmZmVyLCBjYWxsYmFjayk7XG59O1xuXG5leHBvcnRzLmRlZmxhdGVTeW5jID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cykge1xuICByZXR1cm4gemxpYkJ1ZmZlclN5bmMobmV3IERlZmxhdGUob3B0cyksIGJ1ZmZlcik7XG59O1xuXG5leHBvcnRzLmd6aXAgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdHM7XG4gICAgb3B0cyA9IHt9O1xuICB9XG4gIHJldHVybiB6bGliQnVmZmVyKG5ldyBHemlwKG9wdHMpLCBidWZmZXIsIGNhbGxiYWNrKTtcbn07XG5cbmV4cG9ydHMuZ3ppcFN5bmMgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzKSB7XG4gIHJldHVybiB6bGliQnVmZmVyU3luYyhuZXcgR3ppcChvcHRzKSwgYnVmZmVyKTtcbn07XG5cbmV4cG9ydHMuZGVmbGF0ZVJhdyA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0cztcbiAgICBvcHRzID0ge307XG4gIH1cbiAgcmV0dXJuIHpsaWJCdWZmZXIobmV3IERlZmxhdGVSYXcob3B0cyksIGJ1ZmZlciwgY2FsbGJhY2spO1xufTtcblxuZXhwb3J0cy5kZWZsYXRlUmF3U3luYyA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMpIHtcbiAgcmV0dXJuIHpsaWJCdWZmZXJTeW5jKG5ldyBEZWZsYXRlUmF3KG9wdHMpLCBidWZmZXIpO1xufTtcblxuZXhwb3J0cy51bnppcCA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0cztcbiAgICBvcHRzID0ge307XG4gIH1cbiAgcmV0dXJuIHpsaWJCdWZmZXIobmV3IFVuemlwKG9wdHMpLCBidWZmZXIsIGNhbGxiYWNrKTtcbn07XG5cbmV4cG9ydHMudW56aXBTeW5jID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cykge1xuICByZXR1cm4gemxpYkJ1ZmZlclN5bmMobmV3IFVuemlwKG9wdHMpLCBidWZmZXIpO1xufTtcblxuZXhwb3J0cy5pbmZsYXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRzO1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICByZXR1cm4gemxpYkJ1ZmZlcihuZXcgSW5mbGF0ZShvcHRzKSwgYnVmZmVyLCBjYWxsYmFjayk7XG59O1xuXG5leHBvcnRzLmluZmxhdGVTeW5jID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cykge1xuICByZXR1cm4gemxpYkJ1ZmZlclN5bmMobmV3IEluZmxhdGUob3B0cyksIGJ1ZmZlcik7XG59O1xuXG5leHBvcnRzLmd1bnppcCA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0cztcbiAgICBvcHRzID0ge307XG4gIH1cbiAgcmV0dXJuIHpsaWJCdWZmZXIobmV3IEd1bnppcChvcHRzKSwgYnVmZmVyLCBjYWxsYmFjayk7XG59O1xuXG5leHBvcnRzLmd1bnppcFN5bmMgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzKSB7XG4gIHJldHVybiB6bGliQnVmZmVyU3luYyhuZXcgR3VuemlwKG9wdHMpLCBidWZmZXIpO1xufTtcblxuZXhwb3J0cy5pbmZsYXRlUmF3ID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRzO1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICByZXR1cm4gemxpYkJ1ZmZlcihuZXcgSW5mbGF0ZVJhdyhvcHRzKSwgYnVmZmVyLCBjYWxsYmFjayk7XG59O1xuXG5leHBvcnRzLmluZmxhdGVSYXdTeW5jID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cykge1xuICByZXR1cm4gemxpYkJ1ZmZlclN5bmMobmV3IEluZmxhdGVSYXcob3B0cyksIGJ1ZmZlcik7XG59O1xuXG5mdW5jdGlvbiB6bGliQnVmZmVyKGVuZ2luZSwgYnVmZmVyLCBjYWxsYmFjaykge1xuICB2YXIgYnVmZmVycyA9IFtdO1xuICB2YXIgbnJlYWQgPSAwO1xuXG4gIGVuZ2luZS5vbignZXJyb3InLCBvbkVycm9yKTtcbiAgZW5naW5lLm9uKCdlbmQnLCBvbkVuZCk7XG5cbiAgZW5naW5lLmVuZChidWZmZXIpO1xuICBmbG93KCk7XG5cbiAgZnVuY3Rpb24gZmxvdygpIHtcbiAgICB2YXIgY2h1bms7XG4gICAgd2hpbGUgKG51bGwgIT09IChjaHVuayA9IGVuZ2luZS5yZWFkKCkpKSB7XG4gICAgICBidWZmZXJzLnB1c2goY2h1bmspO1xuICAgICAgbnJlYWQgKz0gY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgICBlbmdpbmUub25jZSgncmVhZGFibGUnLCBmbG93KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRXJyb3IoZXJyKSB7XG4gICAgZW5naW5lLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbkVuZCk7XG4gICAgZW5naW5lLnJlbW92ZUxpc3RlbmVyKCdyZWFkYWJsZScsIGZsb3cpO1xuICAgIGNhbGxiYWNrKGVycik7XG4gIH1cblxuICBmdW5jdGlvbiBvbkVuZCgpIHtcbiAgICB2YXIgYnVmO1xuICAgIHZhciBlcnIgPSBudWxsO1xuXG4gICAgaWYgKG5yZWFkID49IGtNYXhMZW5ndGgpIHtcbiAgICAgIGVyciA9IG5ldyBSYW5nZUVycm9yKGtSYW5nZUVycm9yTWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1ZiA9IEJ1ZmZlci5jb25jYXQoYnVmZmVycywgbnJlYWQpO1xuICAgIH1cblxuICAgIGJ1ZmZlcnMgPSBbXTtcbiAgICBlbmdpbmUuY2xvc2UoKTtcbiAgICBjYWxsYmFjayhlcnIsIGJ1Zik7XG4gIH1cbn1cblxuZnVuY3Rpb24gemxpYkJ1ZmZlclN5bmMoZW5naW5lLCBidWZmZXIpIHtcbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdzdHJpbmcnKSBidWZmZXIgPSBCdWZmZXIuZnJvbShidWZmZXIpO1xuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vdCBhIHN0cmluZyBvciBidWZmZXInKTtcblxuICB2YXIgZmx1c2hGbGFnID0gZW5naW5lLl9maW5pc2hGbHVzaEZsYWc7XG5cbiAgcmV0dXJuIGVuZ2luZS5fcHJvY2Vzc0NodW5rKGJ1ZmZlciwgZmx1c2hGbGFnKTtcbn1cblxuLy8gZ2VuZXJpYyB6bGliXG4vLyBtaW5pbWFsIDItYnl0ZSBoZWFkZXJcbmZ1bmN0aW9uIERlZmxhdGUob3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGVmbGF0ZSkpIHJldHVybiBuZXcgRGVmbGF0ZShvcHRzKTtcbiAgWmxpYi5jYWxsKHRoaXMsIG9wdHMsIGJpbmRpbmcuREVGTEFURSk7XG59XG5cbmZ1bmN0aW9uIEluZmxhdGUob3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSW5mbGF0ZSkpIHJldHVybiBuZXcgSW5mbGF0ZShvcHRzKTtcbiAgWmxpYi5jYWxsKHRoaXMsIG9wdHMsIGJpbmRpbmcuSU5GTEFURSk7XG59XG5cbi8vIGd6aXAgLSBiaWdnZXIgaGVhZGVyLCBzYW1lIGRlZmxhdGUgY29tcHJlc3Npb25cbmZ1bmN0aW9uIEd6aXAob3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgR3ppcCkpIHJldHVybiBuZXcgR3ppcChvcHRzKTtcbiAgWmxpYi5jYWxsKHRoaXMsIG9wdHMsIGJpbmRpbmcuR1pJUCk7XG59XG5cbmZ1bmN0aW9uIEd1bnppcChvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBHdW56aXApKSByZXR1cm4gbmV3IEd1bnppcChvcHRzKTtcbiAgWmxpYi5jYWxsKHRoaXMsIG9wdHMsIGJpbmRpbmcuR1VOWklQKTtcbn1cblxuLy8gcmF3IC0gbm8gaGVhZGVyXG5mdW5jdGlvbiBEZWZsYXRlUmF3KG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIERlZmxhdGVSYXcpKSByZXR1cm4gbmV3IERlZmxhdGVSYXcob3B0cyk7XG4gIFpsaWIuY2FsbCh0aGlzLCBvcHRzLCBiaW5kaW5nLkRFRkxBVEVSQVcpO1xufVxuXG5mdW5jdGlvbiBJbmZsYXRlUmF3KG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEluZmxhdGVSYXcpKSByZXR1cm4gbmV3IEluZmxhdGVSYXcob3B0cyk7XG4gIFpsaWIuY2FsbCh0aGlzLCBvcHRzLCBiaW5kaW5nLklORkxBVEVSQVcpO1xufVxuXG4vLyBhdXRvLWRldGVjdCBoZWFkZXIuXG5mdW5jdGlvbiBVbnppcChvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBVbnppcCkpIHJldHVybiBuZXcgVW56aXAob3B0cyk7XG4gIFpsaWIuY2FsbCh0aGlzLCBvcHRzLCBiaW5kaW5nLlVOWklQKTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEZsdXNoRmxhZyhmbGFnKSB7XG4gIHJldHVybiBmbGFnID09PSBiaW5kaW5nLlpfTk9fRkxVU0ggfHwgZmxhZyA9PT0gYmluZGluZy5aX1BBUlRJQUxfRkxVU0ggfHwgZmxhZyA9PT0gYmluZGluZy5aX1NZTkNfRkxVU0ggfHwgZmxhZyA9PT0gYmluZGluZy5aX0ZVTExfRkxVU0ggfHwgZmxhZyA9PT0gYmluZGluZy5aX0ZJTklTSCB8fCBmbGFnID09PSBiaW5kaW5nLlpfQkxPQ0s7XG59XG5cbi8vIHRoZSBabGliIGNsYXNzIHRoZXkgYWxsIGluaGVyaXQgZnJvbVxuLy8gVGhpcyB0aGluZyBtYW5hZ2VzIHRoZSBxdWV1ZSBvZiByZXF1ZXN0cywgYW5kIHJldHVybnNcbi8vIHRydWUgb3IgZmFsc2UgaWYgdGhlcmUgaXMgYW55dGhpbmcgaW4gdGhlIHF1ZXVlIHdoZW5cbi8vIHlvdSBjYWxsIHRoZSAud3JpdGUoKSBtZXRob2QuXG5cbmZ1bmN0aW9uIFpsaWIob3B0cywgbW9kZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMuX29wdHMgPSBvcHRzID0gb3B0cyB8fCB7fTtcbiAgdGhpcy5fY2h1bmtTaXplID0gb3B0cy5jaHVua1NpemUgfHwgZXhwb3J0cy5aX0RFRkFVTFRfQ0hVTks7XG5cbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0cyk7XG5cbiAgaWYgKG9wdHMuZmx1c2ggJiYgIWlzVmFsaWRGbHVzaEZsYWcob3B0cy5mbHVzaCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZmx1c2ggZmxhZzogJyArIG9wdHMuZmx1c2gpO1xuICB9XG4gIGlmIChvcHRzLmZpbmlzaEZsdXNoICYmICFpc1ZhbGlkRmx1c2hGbGFnKG9wdHMuZmluaXNoRmx1c2gpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGZsdXNoIGZsYWc6ICcgKyBvcHRzLmZpbmlzaEZsdXNoKTtcbiAgfVxuXG4gIHRoaXMuX2ZsdXNoRmxhZyA9IG9wdHMuZmx1c2ggfHwgYmluZGluZy5aX05PX0ZMVVNIO1xuICB0aGlzLl9maW5pc2hGbHVzaEZsYWcgPSB0eXBlb2Ygb3B0cy5maW5pc2hGbHVzaCAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRzLmZpbmlzaEZsdXNoIDogYmluZGluZy5aX0ZJTklTSDtcblxuICBpZiAob3B0cy5jaHVua1NpemUpIHtcbiAgICBpZiAob3B0cy5jaHVua1NpemUgPCBleHBvcnRzLlpfTUlOX0NIVU5LIHx8IG9wdHMuY2h1bmtTaXplID4gZXhwb3J0cy5aX01BWF9DSFVOSykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNodW5rIHNpemU6ICcgKyBvcHRzLmNodW5rU2l6ZSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdHMud2luZG93Qml0cykge1xuICAgIGlmIChvcHRzLndpbmRvd0JpdHMgPCBleHBvcnRzLlpfTUlOX1dJTkRPV0JJVFMgfHwgb3B0cy53aW5kb3dCaXRzID4gZXhwb3J0cy5aX01BWF9XSU5ET1dCSVRTKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgd2luZG93Qml0czogJyArIG9wdHMud2luZG93Qml0cyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdHMubGV2ZWwpIHtcbiAgICBpZiAob3B0cy5sZXZlbCA8IGV4cG9ydHMuWl9NSU5fTEVWRUwgfHwgb3B0cy5sZXZlbCA+IGV4cG9ydHMuWl9NQVhfTEVWRUwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb21wcmVzc2lvbiBsZXZlbDogJyArIG9wdHMubGV2ZWwpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRzLm1lbUxldmVsKSB7XG4gICAgaWYgKG9wdHMubWVtTGV2ZWwgPCBleHBvcnRzLlpfTUlOX01FTUxFVkVMIHx8IG9wdHMubWVtTGV2ZWwgPiBleHBvcnRzLlpfTUFYX01FTUxFVkVMKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbWVtTGV2ZWw6ICcgKyBvcHRzLm1lbUxldmVsKTtcbiAgICB9XG4gIH1cblxuICBpZiAob3B0cy5zdHJhdGVneSkge1xuICAgIGlmIChvcHRzLnN0cmF0ZWd5ICE9IGV4cG9ydHMuWl9GSUxURVJFRCAmJiBvcHRzLnN0cmF0ZWd5ICE9IGV4cG9ydHMuWl9IVUZGTUFOX09OTFkgJiYgb3B0cy5zdHJhdGVneSAhPSBleHBvcnRzLlpfUkxFICYmIG9wdHMuc3RyYXRlZ3kgIT0gZXhwb3J0cy5aX0ZJWEVEICYmIG9wdHMuc3RyYXRlZ3kgIT0gZXhwb3J0cy5aX0RFRkFVTFRfU1RSQVRFR1kpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJhdGVneTogJyArIG9wdHMuc3RyYXRlZ3kpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRzLmRpY3Rpb25hcnkpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihvcHRzLmRpY3Rpb25hcnkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZGljdGlvbmFyeTogaXQgc2hvdWxkIGJlIGEgQnVmZmVyIGluc3RhbmNlJyk7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5faGFuZGxlID0gbmV3IGJpbmRpbmcuWmxpYihtb2RlKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuX2hhZEVycm9yID0gZmFsc2U7XG4gIHRoaXMuX2hhbmRsZS5vbmVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UsIGVycm5vKSB7XG4gICAgLy8gdGhlcmUgaXMgbm8gd2F5IHRvIGNsZWFubHkgcmVjb3Zlci5cbiAgICAvLyBjb250aW51aW5nIG9ubHkgb2JzY3VyZXMgcHJvYmxlbXMuXG4gICAgX2Nsb3NlKHNlbGYpO1xuICAgIHNlbGYuX2hhZEVycm9yID0gdHJ1ZTtcblxuICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICBlcnJvci5lcnJubyA9IGVycm5vO1xuICAgIGVycm9yLmNvZGUgPSBleHBvcnRzLmNvZGVzW2Vycm5vXTtcbiAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICB9O1xuXG4gIHZhciBsZXZlbCA9IGV4cG9ydHMuWl9ERUZBVUxUX0NPTVBSRVNTSU9OO1xuICBpZiAodHlwZW9mIG9wdHMubGV2ZWwgPT09ICdudW1iZXInKSBsZXZlbCA9IG9wdHMubGV2ZWw7XG5cbiAgdmFyIHN0cmF0ZWd5ID0gZXhwb3J0cy5aX0RFRkFVTFRfU1RSQVRFR1k7XG4gIGlmICh0eXBlb2Ygb3B0cy5zdHJhdGVneSA9PT0gJ251bWJlcicpIHN0cmF0ZWd5ID0gb3B0cy5zdHJhdGVneTtcblxuICB0aGlzLl9oYW5kbGUuaW5pdChvcHRzLndpbmRvd0JpdHMgfHwgZXhwb3J0cy5aX0RFRkFVTFRfV0lORE9XQklUUywgbGV2ZWwsIG9wdHMubWVtTGV2ZWwgfHwgZXhwb3J0cy5aX0RFRkFVTFRfTUVNTEVWRUwsIHN0cmF0ZWd5LCBvcHRzLmRpY3Rpb25hcnkpO1xuXG4gIHRoaXMuX2J1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSh0aGlzLl9jaHVua1NpemUpO1xuICB0aGlzLl9vZmZzZXQgPSAwO1xuICB0aGlzLl9sZXZlbCA9IGxldmVsO1xuICB0aGlzLl9zdHJhdGVneSA9IHN0cmF0ZWd5O1xuXG4gIHRoaXMub25jZSgnZW5kJywgdGhpcy5jbG9zZSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdfY2xvc2VkJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICFfdGhpcy5faGFuZGxlO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSk7XG59XG5cbnV0aWwuaW5oZXJpdHMoWmxpYiwgVHJhbnNmb3JtKTtcblxuWmxpYi5wcm90b3R5cGUucGFyYW1zID0gZnVuY3Rpb24gKGxldmVsLCBzdHJhdGVneSwgY2FsbGJhY2spIHtcbiAgaWYgKGxldmVsIDwgZXhwb3J0cy5aX01JTl9MRVZFTCB8fCBsZXZlbCA+IGV4cG9ydHMuWl9NQVhfTEVWRUwpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBjb21wcmVzc2lvbiBsZXZlbDogJyArIGxldmVsKTtcbiAgfVxuICBpZiAoc3RyYXRlZ3kgIT0gZXhwb3J0cy5aX0ZJTFRFUkVEICYmIHN0cmF0ZWd5ICE9IGV4cG9ydHMuWl9IVUZGTUFOX09OTFkgJiYgc3RyYXRlZ3kgIT0gZXhwb3J0cy5aX1JMRSAmJiBzdHJhdGVneSAhPSBleHBvcnRzLlpfRklYRUQgJiYgc3RyYXRlZ3kgIT0gZXhwb3J0cy5aX0RFRkFVTFRfU1RSQVRFR1kpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHN0cmF0ZWd5OiAnICsgc3RyYXRlZ3kpO1xuICB9XG5cbiAgaWYgKHRoaXMuX2xldmVsICE9PSBsZXZlbCB8fCB0aGlzLl9zdHJhdGVneSAhPT0gc3RyYXRlZ3kpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5mbHVzaChiaW5kaW5nLlpfU1lOQ19GTFVTSCwgZnVuY3Rpb24gKCkge1xuICAgICAgYXNzZXJ0KHNlbGYuX2hhbmRsZSwgJ3psaWIgYmluZGluZyBjbG9zZWQnKTtcbiAgICAgIHNlbGYuX2hhbmRsZS5wYXJhbXMobGV2ZWwsIHN0cmF0ZWd5KTtcbiAgICAgIGlmICghc2VsZi5faGFkRXJyb3IpIHtcbiAgICAgICAgc2VsZi5fbGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgc2VsZi5fc3RyYXRlZ3kgPSBzdHJhdGVneTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2spO1xuICB9XG59O1xuXG5abGliLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgYXNzZXJ0KHRoaXMuX2hhbmRsZSwgJ3psaWIgYmluZGluZyBjbG9zZWQnKTtcbiAgcmV0dXJuIHRoaXMuX2hhbmRsZS5yZXNldCgpO1xufTtcblxuLy8gVGhpcyBpcyB0aGUgX2ZsdXNoIGZ1bmN0aW9uIGNhbGxlZCBieSB0aGUgdHJhbnNmb3JtIGNsYXNzLFxuLy8gaW50ZXJuYWxseSwgd2hlbiB0aGUgbGFzdCBjaHVuayBoYXMgYmVlbiB3cml0dGVuLlxuWmxpYi5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHRoaXMuX3RyYW5zZm9ybShCdWZmZXIuYWxsb2MoMCksICcnLCBjYWxsYmFjayk7XG59O1xuXG5abGliLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChraW5kLCBjYWxsYmFjaykge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICB2YXIgd3MgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmICh0eXBlb2Yga2luZCA9PT0gJ2Z1bmN0aW9uJyB8fCBraW5kID09PSB1bmRlZmluZWQgJiYgIWNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sgPSBraW5kO1xuICAgIGtpbmQgPSBiaW5kaW5nLlpfRlVMTF9GTFVTSDtcbiAgfVxuXG4gIGlmICh3cy5lbmRlZCkge1xuICAgIGlmIChjYWxsYmFjaykgcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAod3MuZW5kaW5nKSB7XG4gICAgaWYgKGNhbGxiYWNrKSB0aGlzLm9uY2UoJ2VuZCcsIGNhbGxiYWNrKTtcbiAgfSBlbHNlIGlmICh3cy5uZWVkRHJhaW4pIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMub25jZSgnZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuZmx1c2goa2luZCwgY2FsbGJhY2spO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2ZsdXNoRmxhZyA9IGtpbmQ7XG4gICAgdGhpcy53cml0ZShCdWZmZXIuYWxsb2MoMCksICcnLCBjYWxsYmFjayk7XG4gIH1cbn07XG5cblpsaWIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIF9jbG9zZSh0aGlzLCBjYWxsYmFjayk7XG4gIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlTlQsIHRoaXMpO1xufTtcblxuZnVuY3Rpb24gX2Nsb3NlKGVuZ2luZSwgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrKSBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrKTtcblxuICAvLyBDYWxsZXIgbWF5IGludm9rZSAuY2xvc2UgYWZ0ZXIgYSB6bGliIGVycm9yICh3aGljaCB3aWxsIG51bGwgX2hhbmRsZSkuXG4gIGlmICghZW5naW5lLl9oYW5kbGUpIHJldHVybjtcblxuICBlbmdpbmUuX2hhbmRsZS5jbG9zZSgpO1xuICBlbmdpbmUuX2hhbmRsZSA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGVtaXRDbG9zZU5UKHNlbGYpIHtcbiAgc2VsZi5lbWl0KCdjbG9zZScpO1xufVxuXG5abGliLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIGZsdXNoRmxhZztcbiAgdmFyIHdzID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIGVuZGluZyA9IHdzLmVuZGluZyB8fCB3cy5lbmRlZDtcbiAgdmFyIGxhc3QgPSBlbmRpbmcgJiYgKCFjaHVuayB8fCB3cy5sZW5ndGggPT09IGNodW5rLmxlbmd0aCk7XG5cbiAgaWYgKGNodW5rICE9PSBudWxsICYmICFCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSByZXR1cm4gY2IobmV3IEVycm9yKCdpbnZhbGlkIGlucHV0JykpO1xuXG4gIGlmICghdGhpcy5faGFuZGxlKSByZXR1cm4gY2IobmV3IEVycm9yKCd6bGliIGJpbmRpbmcgY2xvc2VkJykpO1xuXG4gIC8vIElmIGl0J3MgdGhlIGxhc3QgY2h1bmssIG9yIGEgZmluYWwgZmx1c2gsIHdlIHVzZSB0aGUgWl9GSU5JU0ggZmx1c2ggZmxhZ1xuICAvLyAob3Igd2hhdGV2ZXIgZmxhZyB3YXMgcHJvdmlkZWQgdXNpbmcgb3B0cy5maW5pc2hGbHVzaCkuXG4gIC8vIElmIGl0J3MgZXhwbGljaXRseSBmbHVzaGluZyBhdCBzb21lIG90aGVyIHRpbWUsIHRoZW4gd2UgdXNlXG4gIC8vIFpfRlVMTF9GTFVTSC4gT3RoZXJ3aXNlLCB1c2UgWl9OT19GTFVTSCBmb3IgbWF4aW11bSBjb21wcmVzc2lvblxuICAvLyBnb29kbmVzcy5cbiAgaWYgKGxhc3QpIGZsdXNoRmxhZyA9IHRoaXMuX2ZpbmlzaEZsdXNoRmxhZztlbHNlIHtcbiAgICBmbHVzaEZsYWcgPSB0aGlzLl9mbHVzaEZsYWc7XG4gICAgLy8gb25jZSB3ZSd2ZSBmbHVzaGVkIHRoZSBsYXN0IG9mIHRoZSBxdWV1ZSwgc3RvcCBmbHVzaGluZyBhbmRcbiAgICAvLyBnbyBiYWNrIHRvIHRoZSBub3JtYWwgYmVoYXZpb3IuXG4gICAgaWYgKGNodW5rLmxlbmd0aCA+PSB3cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2ZsdXNoRmxhZyA9IHRoaXMuX29wdHMuZmx1c2ggfHwgYmluZGluZy5aX05PX0ZMVVNIO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuX3Byb2Nlc3NDaHVuayhjaHVuaywgZmx1c2hGbGFnLCBjYik7XG59O1xuXG5abGliLnByb3RvdHlwZS5fcHJvY2Vzc0NodW5rID0gZnVuY3Rpb24gKGNodW5rLCBmbHVzaEZsYWcsIGNiKSB7XG4gIHZhciBhdmFpbEluQmVmb3JlID0gY2h1bmsgJiYgY2h1bmsubGVuZ3RoO1xuICB2YXIgYXZhaWxPdXRCZWZvcmUgPSB0aGlzLl9jaHVua1NpemUgLSB0aGlzLl9vZmZzZXQ7XG4gIHZhciBpbk9mZiA9IDA7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciBhc3luYyA9IHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJztcblxuICBpZiAoIWFzeW5jKSB7XG4gICAgdmFyIGJ1ZmZlcnMgPSBbXTtcbiAgICB2YXIgbnJlYWQgPSAwO1xuXG4gICAgdmFyIGVycm9yO1xuICAgIHRoaXMub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVyKSB7XG4gICAgICBlcnJvciA9IGVyO1xuICAgIH0pO1xuXG4gICAgYXNzZXJ0KHRoaXMuX2hhbmRsZSwgJ3psaWIgYmluZGluZyBjbG9zZWQnKTtcbiAgICBkbyB7XG4gICAgICB2YXIgcmVzID0gdGhpcy5faGFuZGxlLndyaXRlU3luYyhmbHVzaEZsYWcsIGNodW5rLCAvLyBpblxuICAgICAgaW5PZmYsIC8vIGluX29mZlxuICAgICAgYXZhaWxJbkJlZm9yZSwgLy8gaW5fbGVuXG4gICAgICB0aGlzLl9idWZmZXIsIC8vIG91dFxuICAgICAgdGhpcy5fb2Zmc2V0LCAvL291dF9vZmZcbiAgICAgIGF2YWlsT3V0QmVmb3JlKTsgLy8gb3V0X2xlblxuICAgIH0gd2hpbGUgKCF0aGlzLl9oYWRFcnJvciAmJiBjYWxsYmFjayhyZXNbMF0sIHJlc1sxXSkpO1xuXG4gICAgaWYgKHRoaXMuX2hhZEVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICBpZiAobnJlYWQgPj0ga01heExlbmd0aCkge1xuICAgICAgX2Nsb3NlKHRoaXMpO1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3Ioa1JhbmdlRXJyb3JNZXNzYWdlKTtcbiAgICB9XG5cbiAgICB2YXIgYnVmID0gQnVmZmVyLmNvbmNhdChidWZmZXJzLCBucmVhZCk7XG4gICAgX2Nsb3NlKHRoaXMpO1xuXG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuXG4gIGFzc2VydCh0aGlzLl9oYW5kbGUsICd6bGliIGJpbmRpbmcgY2xvc2VkJyk7XG4gIHZhciByZXEgPSB0aGlzLl9oYW5kbGUud3JpdGUoZmx1c2hGbGFnLCBjaHVuaywgLy8gaW5cbiAgaW5PZmYsIC8vIGluX29mZlxuICBhdmFpbEluQmVmb3JlLCAvLyBpbl9sZW5cbiAgdGhpcy5fYnVmZmVyLCAvLyBvdXRcbiAgdGhpcy5fb2Zmc2V0LCAvL291dF9vZmZcbiAgYXZhaWxPdXRCZWZvcmUpOyAvLyBvdXRfbGVuXG5cbiAgcmVxLmJ1ZmZlciA9IGNodW5rO1xuICByZXEuY2FsbGJhY2sgPSBjYWxsYmFjaztcblxuICBmdW5jdGlvbiBjYWxsYmFjayhhdmFpbEluQWZ0ZXIsIGF2YWlsT3V0QWZ0ZXIpIHtcbiAgICAvLyBXaGVuIHRoZSBjYWxsYmFjayBpcyB1c2VkIGluIGFuIGFzeW5jIHdyaXRlLCB0aGUgY2FsbGJhY2snc1xuICAgIC8vIGNvbnRleHQgaXMgdGhlIGByZXFgIG9iamVjdCB0aGF0IHdhcyBjcmVhdGVkLiBUaGUgcmVxIG9iamVjdFxuICAgIC8vIGlzID09PSB0aGlzLl9oYW5kbGUsIGFuZCB0aGF0J3Mgd2h5IGl0J3MgaW1wb3J0YW50IHRvIG51bGxcbiAgICAvLyBvdXQgdGhlIHZhbHVlcyBhZnRlciB0aGV5IGFyZSBkb25lIGJlaW5nIHVzZWQuIGB0aGlzLl9oYW5kbGVgXG4gICAgLy8gY2FuIHN0YXkgaW4gbWVtb3J5IGxvbmdlciB0aGFuIHRoZSBjYWxsYmFjayBhbmQgYnVmZmVyIGFyZSBuZWVkZWQuXG4gICAgaWYgKHRoaXMpIHtcbiAgICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcbiAgICAgIHRoaXMuY2FsbGJhY2sgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChzZWxmLl9oYWRFcnJvcikgcmV0dXJuO1xuXG4gICAgdmFyIGhhdmUgPSBhdmFpbE91dEJlZm9yZSAtIGF2YWlsT3V0QWZ0ZXI7XG4gICAgYXNzZXJ0KGhhdmUgPj0gMCwgJ2hhdmUgc2hvdWxkIG5vdCBnbyBkb3duJyk7XG5cbiAgICBpZiAoaGF2ZSA+IDApIHtcbiAgICAgIHZhciBvdXQgPSBzZWxmLl9idWZmZXIuc2xpY2Uoc2VsZi5fb2Zmc2V0LCBzZWxmLl9vZmZzZXQgKyBoYXZlKTtcbiAgICAgIHNlbGYuX29mZnNldCArPSBoYXZlO1xuICAgICAgLy8gc2VydmUgc29tZSBvdXRwdXQgdG8gdGhlIGNvbnN1bWVyLlxuICAgICAgaWYgKGFzeW5jKSB7XG4gICAgICAgIHNlbGYucHVzaChvdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnVmZmVycy5wdXNoKG91dCk7XG4gICAgICAgIG5yZWFkICs9IG91dC5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZXhoYXVzdGVkIHRoZSBvdXRwdXQgYnVmZmVyLCBvciB1c2VkIGFsbCB0aGUgaW5wdXQgY3JlYXRlIGEgbmV3IG9uZS5cbiAgICBpZiAoYXZhaWxPdXRBZnRlciA9PT0gMCB8fCBzZWxmLl9vZmZzZXQgPj0gc2VsZi5fY2h1bmtTaXplKSB7XG4gICAgICBhdmFpbE91dEJlZm9yZSA9IHNlbGYuX2NodW5rU2l6ZTtcbiAgICAgIHNlbGYuX29mZnNldCA9IDA7XG4gICAgICBzZWxmLl9idWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoc2VsZi5fY2h1bmtTaXplKTtcbiAgICB9XG5cbiAgICBpZiAoYXZhaWxPdXRBZnRlciA9PT0gMCkge1xuICAgICAgLy8gTm90IGFjdHVhbGx5IGRvbmUuICBOZWVkIHRvIHJlcHJvY2Vzcy5cbiAgICAgIC8vIEFsc28sIHVwZGF0ZSB0aGUgYXZhaWxJbkJlZm9yZSB0byB0aGUgYXZhaWxJbkFmdGVyIHZhbHVlLFxuICAgICAgLy8gc28gdGhhdCBpZiB3ZSBoYXZlIHRvIGhpdCBpdCBhIHRoaXJkIChmb3VydGgsIGV0Yy4pIHRpbWUsXG4gICAgICAvLyBpdCdsbCBoYXZlIHRoZSBjb3JyZWN0IGJ5dGUgY291bnRzLlxuICAgICAgaW5PZmYgKz0gYXZhaWxJbkJlZm9yZSAtIGF2YWlsSW5BZnRlcjtcbiAgICAgIGF2YWlsSW5CZWZvcmUgPSBhdmFpbEluQWZ0ZXI7XG5cbiAgICAgIGlmICghYXN5bmMpIHJldHVybiB0cnVlO1xuXG4gICAgICB2YXIgbmV3UmVxID0gc2VsZi5faGFuZGxlLndyaXRlKGZsdXNoRmxhZywgY2h1bmssIGluT2ZmLCBhdmFpbEluQmVmb3JlLCBzZWxmLl9idWZmZXIsIHNlbGYuX29mZnNldCwgc2VsZi5fY2h1bmtTaXplKTtcbiAgICAgIG5ld1JlcS5jYWxsYmFjayA9IGNhbGxiYWNrOyAvLyB0aGlzIHNhbWUgZnVuY3Rpb25cbiAgICAgIG5ld1JlcS5idWZmZXIgPSBjaHVuaztcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWFzeW5jKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBmaW5pc2hlZCB3aXRoIHRoZSBjaHVuay5cbiAgICBjYigpO1xuICB9XG59O1xuXG51dGlsLmluaGVyaXRzKERlZmxhdGUsIFpsaWIpO1xudXRpbC5pbmhlcml0cyhJbmZsYXRlLCBabGliKTtcbnV0aWwuaW5oZXJpdHMoR3ppcCwgWmxpYik7XG51dGlsLmluaGVyaXRzKEd1bnppcCwgWmxpYik7XG51dGlsLmluaGVyaXRzKERlZmxhdGVSYXcsIFpsaWIpO1xudXRpbC5pbmhlcml0cyhJbmZsYXRlUmF3LCBabGliKTtcbnV0aWwuaW5oZXJpdHMoVW56aXAsIFpsaWIpOyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmZ1bmN0aW9uIGNvcHlCdWZmZXIoc3JjLCB0YXJnZXQsIG9mZnNldCkge1xuICBzcmMuY29weSh0YXJnZXQsIG9mZnNldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCdWZmZXJMaXN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWZmZXJMaXN0KTtcblxuICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogdGhpcy5oZWFkIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gc2hpZnQoKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIC0tdGhpcy5sZW5ndGg7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKHMpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7XG4gICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgIHJldCArPSBzICsgcC5kYXRhO1xuICAgIH1yZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdChuKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChwKSB7XG4gICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgIGkgKz0gcC5kYXRhLmxlbmd0aDtcbiAgICAgIHAgPSBwLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgcmV0dXJuIEJ1ZmZlckxpc3Q7XG59KCk7XG5cbmlmICh1dGlsICYmIHV0aWwuaW5zcGVjdCAmJiB1dGlsLmluc3BlY3QuY3VzdG9tKSB7XG4gIG1vZHVsZS5leHBvcnRzLnByb3RvdHlwZVt1dGlsLmluc3BlY3QuY3VzdG9tXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2JqID0gdXRpbC5pbnNwZWN0KHsgbGVuZ3RoOiB0aGlzLmxlbmd0aCB9KTtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJyAnICsgb2JqO1xuICB9O1xufSIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZTtcblxuLyoqXG4gKiBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICogUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLm5vRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRocm93RGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgdGhyb3cgYW4gRXJyb3Igd2hlbiBpbnZva2VkLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudHJhY2VEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCBpbnZva2UgYGNvbnNvbGUudHJhY2UoKWAgaW5zdGVhZCBvZiBgY29uc29sZS5lcnJvcigpYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIHRoZSBmdW5jdGlvbiB0byBkZXByZWNhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgLSB0aGUgc3RyaW5nIHRvIHByaW50IHRvIHRoZSBjb25zb2xlIHdoZW4gYGZuYCBpcyBpbnZva2VkXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGEgbmV3IFwiZGVwcmVjYXRlZFwiIHZlcnNpb24gb2YgYGZuYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkZXByZWNhdGUgKGZuLCBtc2cpIHtcbiAgaWYgKGNvbmZpZygnbm9EZXByZWNhdGlvbicpKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAoY29uZmlnKCd0aHJvd0RlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKGNvbmZpZygndHJhY2VEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgYGxvY2FsU3RvcmFnZWAgZm9yIGJvb2xlYW4gdmFsdWVzIGZvciB0aGUgZ2l2ZW4gYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbmZpZyAobmFtZSkge1xuICAvLyBhY2Nlc3NpbmcgZ2xvYmFsLmxvY2FsU3RvcmFnZSBjYW4gdHJpZ2dlciBhIERPTUV4Y2VwdGlvbiBpbiBzYW5kYm94ZWQgaWZyYW1lc1xuICB0cnkge1xuICAgIGlmICghZ2xvYmFsLmxvY2FsU3RvcmFnZSkgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB2YWwgPSBnbG9iYWwubG9jYWxTdG9yYWdlW25hbWVdO1xuICBpZiAobnVsbCA9PSB2YWwpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIFN0cmluZyh2YWwpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHBhc3N0aHJvdWdoIHN0cmVhbS5cbi8vIGJhc2ljYWxseSBqdXN0IHRoZSBtb3N0IG1pbmltYWwgc29ydCBvZiBUcmFuc2Zvcm0gc3RyZWFtLlxuLy8gRXZlcnkgd3JpdHRlbiBjaHVuayBnZXRzIG91dHB1dCBhcy1pcy5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhc3NUaHJvdWdoO1xuXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9fc3RyZWFtX3RyYW5zZm9ybScpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoUGFzc1Rocm91Z2gsIFRyYW5zZm9ybSk7XG5cbmZ1bmN0aW9uIFBhc3NUaHJvdWdoKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBhc3NUaHJvdWdoKSkgcmV0dXJuIG5ldyBQYXNzVGhyb3VnaChvcHRpb25zKTtcblxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxuUGFzc1Rocm91Z2gucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihudWxsLCBjaHVuayk7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWRhYmxlJykuVHJhbnNmb3JtXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVhZGFibGUnKS5QYXNzVGhyb3VnaFxuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50IGNhbWVsY2FzZTogXCJvZmZcIiAqL1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5cbnZhciBac3RyZWFtID0gcmVxdWlyZSgncGFrby9saWIvemxpYi96c3RyZWFtJyk7XG52YXIgemxpYl9kZWZsYXRlID0gcmVxdWlyZSgncGFrby9saWIvemxpYi9kZWZsYXRlLmpzJyk7XG52YXIgemxpYl9pbmZsYXRlID0gcmVxdWlyZSgncGFrby9saWIvemxpYi9pbmZsYXRlLmpzJyk7XG52YXIgY29uc3RhbnRzID0gcmVxdWlyZSgncGFrby9saWIvemxpYi9jb25zdGFudHMnKTtcblxuZm9yICh2YXIga2V5IGluIGNvbnN0YW50cykge1xuICBleHBvcnRzW2tleV0gPSBjb25zdGFudHNba2V5XTtcbn1cblxuLy8gemxpYiBtb2Rlc1xuZXhwb3J0cy5OT05FID0gMDtcbmV4cG9ydHMuREVGTEFURSA9IDE7XG5leHBvcnRzLklORkxBVEUgPSAyO1xuZXhwb3J0cy5HWklQID0gMztcbmV4cG9ydHMuR1VOWklQID0gNDtcbmV4cG9ydHMuREVGTEFURVJBVyA9IDU7XG5leHBvcnRzLklORkxBVEVSQVcgPSA2O1xuZXhwb3J0cy5VTlpJUCA9IDc7XG5cbnZhciBHWklQX0hFQURFUl9JRDEgPSAweDFmO1xudmFyIEdaSVBfSEVBREVSX0lEMiA9IDB4OGI7XG5cbi8qKlxuICogRW11bGF0ZSBOb2RlJ3MgemxpYiBDKysgbGF5ZXIgZm9yIHVzZSBieSB0aGUgSlMgbGF5ZXIgaW4gaW5kZXguanNcbiAqL1xuZnVuY3Rpb24gWmxpYihtb2RlKSB7XG4gIGlmICh0eXBlb2YgbW9kZSAhPT0gJ251bWJlcicgfHwgbW9kZSA8IGV4cG9ydHMuREVGTEFURSB8fCBtb2RlID4gZXhwb3J0cy5VTlpJUCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBhcmd1bWVudCcpO1xuICB9XG5cbiAgdGhpcy5kaWN0aW9uYXJ5ID0gbnVsbDtcbiAgdGhpcy5lcnIgPSAwO1xuICB0aGlzLmZsdXNoID0gMDtcbiAgdGhpcy5pbml0X2RvbmUgPSBmYWxzZTtcbiAgdGhpcy5sZXZlbCA9IDA7XG4gIHRoaXMubWVtTGV2ZWwgPSAwO1xuICB0aGlzLm1vZGUgPSBtb2RlO1xuICB0aGlzLnN0cmF0ZWd5ID0gMDtcbiAgdGhpcy53aW5kb3dCaXRzID0gMDtcbiAgdGhpcy53cml0ZV9pbl9wcm9ncmVzcyA9IGZhbHNlO1xuICB0aGlzLnBlbmRpbmdfY2xvc2UgPSBmYWxzZTtcbiAgdGhpcy5nemlwX2lkX2J5dGVzX3JlYWQgPSAwO1xufVxuXG5abGliLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMud3JpdGVfaW5fcHJvZ3Jlc3MpIHtcbiAgICB0aGlzLnBlbmRpbmdfY2xvc2UgPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMucGVuZGluZ19jbG9zZSA9IGZhbHNlO1xuXG4gIGFzc2VydCh0aGlzLmluaXRfZG9uZSwgJ2Nsb3NlIGJlZm9yZSBpbml0Jyk7XG4gIGFzc2VydCh0aGlzLm1vZGUgPD0gZXhwb3J0cy5VTlpJUCk7XG5cbiAgaWYgKHRoaXMubW9kZSA9PT0gZXhwb3J0cy5ERUZMQVRFIHx8IHRoaXMubW9kZSA9PT0gZXhwb3J0cy5HWklQIHx8IHRoaXMubW9kZSA9PT0gZXhwb3J0cy5ERUZMQVRFUkFXKSB7XG4gICAgemxpYl9kZWZsYXRlLmRlZmxhdGVFbmQodGhpcy5zdHJtKTtcbiAgfSBlbHNlIGlmICh0aGlzLm1vZGUgPT09IGV4cG9ydHMuSU5GTEFURSB8fCB0aGlzLm1vZGUgPT09IGV4cG9ydHMuR1VOWklQIHx8IHRoaXMubW9kZSA9PT0gZXhwb3J0cy5JTkZMQVRFUkFXIHx8IHRoaXMubW9kZSA9PT0gZXhwb3J0cy5VTlpJUCkge1xuICAgIHpsaWJfaW5mbGF0ZS5pbmZsYXRlRW5kKHRoaXMuc3RybSk7XG4gIH1cblxuICB0aGlzLm1vZGUgPSBleHBvcnRzLk5PTkU7XG5cbiAgdGhpcy5kaWN0aW9uYXJ5ID0gbnVsbDtcbn07XG5cblpsaWIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGZsdXNoLCBpbnB1dCwgaW5fb2ZmLCBpbl9sZW4sIG91dCwgb3V0X29mZiwgb3V0X2xlbikge1xuICByZXR1cm4gdGhpcy5fd3JpdGUodHJ1ZSwgZmx1c2gsIGlucHV0LCBpbl9vZmYsIGluX2xlbiwgb3V0LCBvdXRfb2ZmLCBvdXRfbGVuKTtcbn07XG5cblpsaWIucHJvdG90eXBlLndyaXRlU3luYyA9IGZ1bmN0aW9uIChmbHVzaCwgaW5wdXQsIGluX29mZiwgaW5fbGVuLCBvdXQsIG91dF9vZmYsIG91dF9sZW4pIHtcbiAgcmV0dXJuIHRoaXMuX3dyaXRlKGZhbHNlLCBmbHVzaCwgaW5wdXQsIGluX29mZiwgaW5fbGVuLCBvdXQsIG91dF9vZmYsIG91dF9sZW4pO1xufTtcblxuWmxpYi5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGFzeW5jLCBmbHVzaCwgaW5wdXQsIGluX29mZiwgaW5fbGVuLCBvdXQsIG91dF9vZmYsIG91dF9sZW4pIHtcbiAgYXNzZXJ0LmVxdWFsKGFyZ3VtZW50cy5sZW5ndGgsIDgpO1xuXG4gIGFzc2VydCh0aGlzLmluaXRfZG9uZSwgJ3dyaXRlIGJlZm9yZSBpbml0Jyk7XG4gIGFzc2VydCh0aGlzLm1vZGUgIT09IGV4cG9ydHMuTk9ORSwgJ2FscmVhZHkgZmluYWxpemVkJyk7XG4gIGFzc2VydC5lcXVhbChmYWxzZSwgdGhpcy53cml0ZV9pbl9wcm9ncmVzcywgJ3dyaXRlIGFscmVhZHkgaW4gcHJvZ3Jlc3MnKTtcbiAgYXNzZXJ0LmVxdWFsKGZhbHNlLCB0aGlzLnBlbmRpbmdfY2xvc2UsICdjbG9zZSBpcyBwZW5kaW5nJyk7XG5cbiAgdGhpcy53cml0ZV9pbl9wcm9ncmVzcyA9IHRydWU7XG5cbiAgYXNzZXJ0LmVxdWFsKGZhbHNlLCBmbHVzaCA9PT0gdW5kZWZpbmVkLCAnbXVzdCBwcm92aWRlIGZsdXNoIHZhbHVlJyk7XG5cbiAgdGhpcy53cml0ZV9pbl9wcm9ncmVzcyA9IHRydWU7XG5cbiAgaWYgKGZsdXNoICE9PSBleHBvcnRzLlpfTk9fRkxVU0ggJiYgZmx1c2ggIT09IGV4cG9ydHMuWl9QQVJUSUFMX0ZMVVNIICYmIGZsdXNoICE9PSBleHBvcnRzLlpfU1lOQ19GTFVTSCAmJiBmbHVzaCAhPT0gZXhwb3J0cy5aX0ZVTExfRkxVU0ggJiYgZmx1c2ggIT09IGV4cG9ydHMuWl9GSU5JU0ggJiYgZmx1c2ggIT09IGV4cG9ydHMuWl9CTE9DSykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBmbHVzaCB2YWx1ZScpO1xuICB9XG5cbiAgaWYgKGlucHV0ID09IG51bGwpIHtcbiAgICBpbnB1dCA9IEJ1ZmZlci5hbGxvYygwKTtcbiAgICBpbl9sZW4gPSAwO1xuICAgIGluX29mZiA9IDA7XG4gIH1cblxuICB0aGlzLnN0cm0uYXZhaWxfaW4gPSBpbl9sZW47XG4gIHRoaXMuc3RybS5pbnB1dCA9IGlucHV0O1xuICB0aGlzLnN0cm0ubmV4dF9pbiA9IGluX29mZjtcbiAgdGhpcy5zdHJtLmF2YWlsX291dCA9IG91dF9sZW47XG4gIHRoaXMuc3RybS5vdXRwdXQgPSBvdXQ7XG4gIHRoaXMuc3RybS5uZXh0X291dCA9IG91dF9vZmY7XG4gIHRoaXMuZmx1c2ggPSBmbHVzaDtcblxuICBpZiAoIWFzeW5jKSB7XG4gICAgLy8gc3luYyB2ZXJzaW9uXG4gICAgdGhpcy5fcHJvY2VzcygpO1xuXG4gICAgaWYgKHRoaXMuX2NoZWNrRXJyb3IoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2FmdGVyU3luYygpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBhc3luYyB2ZXJzaW9uXG4gIHZhciBzZWxmID0gdGhpcztcbiAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5fcHJvY2VzcygpO1xuICAgIHNlbGYuX2FmdGVyKCk7XG4gIH0pO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuWmxpYi5wcm90b3R5cGUuX2FmdGVyU3luYyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGF2YWlsX291dCA9IHRoaXMuc3RybS5hdmFpbF9vdXQ7XG4gIHZhciBhdmFpbF9pbiA9IHRoaXMuc3RybS5hdmFpbF9pbjtcblxuICB0aGlzLndyaXRlX2luX3Byb2dyZXNzID0gZmFsc2U7XG5cbiAgcmV0dXJuIFthdmFpbF9pbiwgYXZhaWxfb3V0XTtcbn07XG5cblpsaWIucHJvdG90eXBlLl9wcm9jZXNzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbmV4dF9leHBlY3RlZF9oZWFkZXJfYnl0ZSA9IG51bGw7XG5cbiAgLy8gSWYgdGhlIGF2YWlsX291dCBpcyBsZWZ0IGF0IDAsIHRoZW4gaXQgbWVhbnMgdGhhdCBpdCByYW4gb3V0XG4gIC8vIG9mIHJvb20uICBJZiB0aGVyZSB3YXMgYXZhaWxfb3V0IGxlZnQgb3ZlciwgdGhlbiBpdCBtZWFuc1xuICAvLyB0aGF0IGFsbCBvZiB0aGUgaW5wdXQgd2FzIGNvbnN1bWVkLlxuICBzd2l0Y2ggKHRoaXMubW9kZSkge1xuICAgIGNhc2UgZXhwb3J0cy5ERUZMQVRFOlxuICAgIGNhc2UgZXhwb3J0cy5HWklQOlxuICAgIGNhc2UgZXhwb3J0cy5ERUZMQVRFUkFXOlxuICAgICAgdGhpcy5lcnIgPSB6bGliX2RlZmxhdGUuZGVmbGF0ZSh0aGlzLnN0cm0sIHRoaXMuZmx1c2gpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBleHBvcnRzLlVOWklQOlxuICAgICAgaWYgKHRoaXMuc3RybS5hdmFpbF9pbiA+IDApIHtcbiAgICAgICAgbmV4dF9leHBlY3RlZF9oZWFkZXJfYnl0ZSA9IHRoaXMuc3RybS5uZXh0X2luO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHRoaXMuZ3ppcF9pZF9ieXRlc19yZWFkKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBpZiAobmV4dF9leHBlY3RlZF9oZWFkZXJfYnl0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuc3RybS5pbnB1dFtuZXh0X2V4cGVjdGVkX2hlYWRlcl9ieXRlXSA9PT0gR1pJUF9IRUFERVJfSUQxKSB7XG4gICAgICAgICAgICB0aGlzLmd6aXBfaWRfYnl0ZXNfcmVhZCA9IDE7XG4gICAgICAgICAgICBuZXh0X2V4cGVjdGVkX2hlYWRlcl9ieXRlKys7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnN0cm0uYXZhaWxfaW4gPT09IDEpIHtcbiAgICAgICAgICAgICAgLy8gVGhlIG9ubHkgYXZhaWxhYmxlIGJ5dGUgd2FzIGFscmVhZHkgcmVhZC5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubW9kZSA9IGV4cG9ydHMuSU5GTEFURTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKG5leHRfZXhwZWN0ZWRfaGVhZGVyX2J5dGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLnN0cm0uaW5wdXRbbmV4dF9leHBlY3RlZF9oZWFkZXJfYnl0ZV0gPT09IEdaSVBfSEVBREVSX0lEMikge1xuICAgICAgICAgICAgdGhpcy5nemlwX2lkX2J5dGVzX3JlYWQgPSAyO1xuICAgICAgICAgICAgdGhpcy5tb2RlID0gZXhwb3J0cy5HVU5aSVA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRoZXJlIGlzIG5vIGFjdHVhbCBkaWZmZXJlbmNlIGJldHdlZW4gSU5GTEFURSBhbmQgSU5GTEFURVJBV1xuICAgICAgICAgICAgLy8gKGFmdGVyIGluaXRpYWxpemF0aW9uKS5cbiAgICAgICAgICAgIHRoaXMubW9kZSA9IGV4cG9ydHMuSU5GTEFURTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgbnVtYmVyIG9mIGd6aXAgbWFnaWMgbnVtYmVyIGJ5dGVzIHJlYWQnKTtcbiAgICAgIH1cblxuICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgY2FzZSBleHBvcnRzLklORkxBVEU6XG4gICAgY2FzZSBleHBvcnRzLkdVTlpJUDpcbiAgICBjYXNlIGV4cG9ydHMuSU5GTEFURVJBVzpcbiAgICAgIHRoaXMuZXJyID0gemxpYl9pbmZsYXRlLmluZmxhdGUodGhpcy5zdHJtLCB0aGlzLmZsdXNoXG5cbiAgICAgIC8vIElmIGRhdGEgd2FzIGVuY29kZWQgd2l0aCBkaWN0aW9uYXJ5XG4gICAgICApO2lmICh0aGlzLmVyciA9PT0gZXhwb3J0cy5aX05FRURfRElDVCAmJiB0aGlzLmRpY3Rpb25hcnkpIHtcbiAgICAgICAgLy8gTG9hZCBpdFxuICAgICAgICB0aGlzLmVyciA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLnN0cm0sIHRoaXMuZGljdGlvbmFyeSk7XG4gICAgICAgIGlmICh0aGlzLmVyciA9PT0gZXhwb3J0cy5aX09LKSB7XG4gICAgICAgICAgLy8gQW5kIHRyeSB0byBkZWNvZGUgYWdhaW5cbiAgICAgICAgICB0aGlzLmVyciA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlKHRoaXMuc3RybSwgdGhpcy5mbHVzaCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5lcnIgPT09IGV4cG9ydHMuWl9EQVRBX0VSUk9SKSB7XG4gICAgICAgICAgLy8gQm90aCBpbmZsYXRlU2V0RGljdGlvbmFyeSgpIGFuZCBpbmZsYXRlKCkgcmV0dXJuIFpfREFUQV9FUlJPUi5cbiAgICAgICAgICAvLyBNYWtlIGl0IHBvc3NpYmxlIGZvciBBZnRlcigpIHRvIHRlbGwgYSBiYWQgZGljdGlvbmFyeSBmcm9tIGJhZFxuICAgICAgICAgIC8vIGlucHV0LlxuICAgICAgICAgIHRoaXMuZXJyID0gZXhwb3J0cy5aX05FRURfRElDVDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKHRoaXMuc3RybS5hdmFpbF9pbiA+IDAgJiYgdGhpcy5tb2RlID09PSBleHBvcnRzLkdVTlpJUCAmJiB0aGlzLmVyciA9PT0gZXhwb3J0cy5aX1NUUkVBTV9FTkQgJiYgdGhpcy5zdHJtLm5leHRfaW5bMF0gIT09IDB4MDApIHtcbiAgICAgICAgLy8gQnl0ZXMgcmVtYWluIGluIGlucHV0IGJ1ZmZlci4gUGVyaGFwcyB0aGlzIGlzIGFub3RoZXIgY29tcHJlc3NlZFxuICAgICAgICAvLyBtZW1iZXIgaW4gdGhlIHNhbWUgYXJjaGl2ZSwgb3IganVzdCB0cmFpbGluZyBnYXJiYWdlLlxuICAgICAgICAvLyBUcmFpbGluZyB6ZXJvIGJ5dGVzIGFyZSBva2F5LCB0aG91Z2gsIHNpbmNlIHRoZXkgYXJlIGZyZXF1ZW50bHlcbiAgICAgICAgLy8gdXNlZCBmb3IgcGFkZGluZy5cblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuZXJyID0gemxpYl9pbmZsYXRlLmluZmxhdGUodGhpcy5zdHJtLCB0aGlzLmZsdXNoKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbW9kZSAnICsgdGhpcy5tb2RlKTtcbiAgfVxufTtcblxuWmxpYi5wcm90b3R5cGUuX2NoZWNrRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIEFjY2VwdGFibGUgZXJyb3Igc3RhdGVzIGRlcGVuZCBvbiB0aGUgdHlwZSBvZiB6bGliIHN0cmVhbS5cbiAgc3dpdGNoICh0aGlzLmVycikge1xuICAgIGNhc2UgZXhwb3J0cy5aX09LOlxuICAgIGNhc2UgZXhwb3J0cy5aX0JVRl9FUlJPUjpcbiAgICAgIGlmICh0aGlzLnN0cm0uYXZhaWxfb3V0ICE9PSAwICYmIHRoaXMuZmx1c2ggPT09IGV4cG9ydHMuWl9GSU5JU0gpIHtcbiAgICAgICAgdGhpcy5fZXJyb3IoJ3VuZXhwZWN0ZWQgZW5kIG9mIGZpbGUnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBleHBvcnRzLlpfU1RSRUFNX0VORDpcbiAgICAgIC8vIG5vcm1hbCBzdGF0dXNlcywgbm90IGZhdGFsXG4gICAgICBicmVhaztcbiAgICBjYXNlIGV4cG9ydHMuWl9ORUVEX0RJQ1Q6XG4gICAgICBpZiAodGhpcy5kaWN0aW9uYXJ5ID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fZXJyb3IoJ01pc3NpbmcgZGljdGlvbmFyeScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZXJyb3IoJ0JhZCBkaWN0aW9uYXJ5Jyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIHNvbWV0aGluZyBlbHNlLlxuICAgICAgdGhpcy5fZXJyb3IoJ1psaWIgZXJyb3InKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuWmxpYi5wcm90b3R5cGUuX2FmdGVyID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuX2NoZWNrRXJyb3IoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBhdmFpbF9vdXQgPSB0aGlzLnN0cm0uYXZhaWxfb3V0O1xuICB2YXIgYXZhaWxfaW4gPSB0aGlzLnN0cm0uYXZhaWxfaW47XG5cbiAgdGhpcy53cml0ZV9pbl9wcm9ncmVzcyA9IGZhbHNlO1xuXG4gIC8vIGNhbGwgdGhlIHdyaXRlKCkgY2JcbiAgdGhpcy5jYWxsYmFjayhhdmFpbF9pbiwgYXZhaWxfb3V0KTtcblxuICBpZiAodGhpcy5wZW5kaW5nX2Nsb3NlKSB7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG59O1xuXG5abGliLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICBpZiAodGhpcy5zdHJtLm1zZykge1xuICAgIG1lc3NhZ2UgPSB0aGlzLnN0cm0ubXNnO1xuICB9XG4gIHRoaXMub25lcnJvcihtZXNzYWdlLCB0aGlzLmVyclxuXG4gIC8vIG5vIGhvcGUgb2YgcmVzY3VlLlxuICApO3RoaXMud3JpdGVfaW5fcHJvZ3Jlc3MgPSBmYWxzZTtcbiAgaWYgKHRoaXMucGVuZGluZ19jbG9zZSkge1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxufTtcblxuWmxpYi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICh3aW5kb3dCaXRzLCBsZXZlbCwgbWVtTGV2ZWwsIHN0cmF0ZWd5LCBkaWN0aW9uYXJ5KSB7XG4gIGFzc2VydChhcmd1bWVudHMubGVuZ3RoID09PSA0IHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDUsICdpbml0KHdpbmRvd0JpdHMsIGxldmVsLCBtZW1MZXZlbCwgc3RyYXRlZ3ksIFtkaWN0aW9uYXJ5XSknKTtcblxuICBhc3NlcnQod2luZG93Qml0cyA+PSA4ICYmIHdpbmRvd0JpdHMgPD0gMTUsICdpbnZhbGlkIHdpbmRvd0JpdHMnKTtcbiAgYXNzZXJ0KGxldmVsID49IC0xICYmIGxldmVsIDw9IDksICdpbnZhbGlkIGNvbXByZXNzaW9uIGxldmVsJyk7XG5cbiAgYXNzZXJ0KG1lbUxldmVsID49IDEgJiYgbWVtTGV2ZWwgPD0gOSwgJ2ludmFsaWQgbWVtbGV2ZWwnKTtcblxuICBhc3NlcnQoc3RyYXRlZ3kgPT09IGV4cG9ydHMuWl9GSUxURVJFRCB8fCBzdHJhdGVneSA9PT0gZXhwb3J0cy5aX0hVRkZNQU5fT05MWSB8fCBzdHJhdGVneSA9PT0gZXhwb3J0cy5aX1JMRSB8fCBzdHJhdGVneSA9PT0gZXhwb3J0cy5aX0ZJWEVEIHx8IHN0cmF0ZWd5ID09PSBleHBvcnRzLlpfREVGQVVMVF9TVFJBVEVHWSwgJ2ludmFsaWQgc3RyYXRlZ3knKTtcblxuICB0aGlzLl9pbml0KGxldmVsLCB3aW5kb3dCaXRzLCBtZW1MZXZlbCwgc3RyYXRlZ3ksIGRpY3Rpb25hcnkpO1xuICB0aGlzLl9zZXREaWN0aW9uYXJ5KCk7XG59O1xuXG5abGliLnByb3RvdHlwZS5wYXJhbXMgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignZGVmbGF0ZVBhcmFtcyBOb3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5abGliLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fcmVzZXQoKTtcbiAgdGhpcy5fc2V0RGljdGlvbmFyeSgpO1xufTtcblxuWmxpYi5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAobGV2ZWwsIHdpbmRvd0JpdHMsIG1lbUxldmVsLCBzdHJhdGVneSwgZGljdGlvbmFyeSkge1xuICB0aGlzLmxldmVsID0gbGV2ZWw7XG4gIHRoaXMud2luZG93Qml0cyA9IHdpbmRvd0JpdHM7XG4gIHRoaXMubWVtTGV2ZWwgPSBtZW1MZXZlbDtcbiAgdGhpcy5zdHJhdGVneSA9IHN0cmF0ZWd5O1xuXG4gIHRoaXMuZmx1c2ggPSBleHBvcnRzLlpfTk9fRkxVU0g7XG5cbiAgdGhpcy5lcnIgPSBleHBvcnRzLlpfT0s7XG5cbiAgaWYgKHRoaXMubW9kZSA9PT0gZXhwb3J0cy5HWklQIHx8IHRoaXMubW9kZSA9PT0gZXhwb3J0cy5HVU5aSVApIHtcbiAgICB0aGlzLndpbmRvd0JpdHMgKz0gMTY7XG4gIH1cblxuICBpZiAodGhpcy5tb2RlID09PSBleHBvcnRzLlVOWklQKSB7XG4gICAgdGhpcy53aW5kb3dCaXRzICs9IDMyO1xuICB9XG5cbiAgaWYgKHRoaXMubW9kZSA9PT0gZXhwb3J0cy5ERUZMQVRFUkFXIHx8IHRoaXMubW9kZSA9PT0gZXhwb3J0cy5JTkZMQVRFUkFXKSB7XG4gICAgdGhpcy53aW5kb3dCaXRzID0gLTEgKiB0aGlzLndpbmRvd0JpdHM7XG4gIH1cblxuICB0aGlzLnN0cm0gPSBuZXcgWnN0cmVhbSgpO1xuXG4gIHN3aXRjaCAodGhpcy5tb2RlKSB7XG4gICAgY2FzZSBleHBvcnRzLkRFRkxBVEU6XG4gICAgY2FzZSBleHBvcnRzLkdaSVA6XG4gICAgY2FzZSBleHBvcnRzLkRFRkxBVEVSQVc6XG4gICAgICB0aGlzLmVyciA9IHpsaWJfZGVmbGF0ZS5kZWZsYXRlSW5pdDIodGhpcy5zdHJtLCB0aGlzLmxldmVsLCBleHBvcnRzLlpfREVGTEFURUQsIHRoaXMud2luZG93Qml0cywgdGhpcy5tZW1MZXZlbCwgdGhpcy5zdHJhdGVneSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGV4cG9ydHMuSU5GTEFURTpcbiAgICBjYXNlIGV4cG9ydHMuR1VOWklQOlxuICAgIGNhc2UgZXhwb3J0cy5JTkZMQVRFUkFXOlxuICAgIGNhc2UgZXhwb3J0cy5VTlpJUDpcbiAgICAgIHRoaXMuZXJyID0gemxpYl9pbmZsYXRlLmluZmxhdGVJbml0Mih0aGlzLnN0cm0sIHRoaXMud2luZG93Qml0cyk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG1vZGUgJyArIHRoaXMubW9kZSk7XG4gIH1cblxuICBpZiAodGhpcy5lcnIgIT09IGV4cG9ydHMuWl9PSykge1xuICAgIHRoaXMuX2Vycm9yKCdJbml0IGVycm9yJyk7XG4gIH1cblxuICB0aGlzLmRpY3Rpb25hcnkgPSBkaWN0aW9uYXJ5O1xuXG4gIHRoaXMud3JpdGVfaW5fcHJvZ3Jlc3MgPSBmYWxzZTtcbiAgdGhpcy5pbml0X2RvbmUgPSB0cnVlO1xufTtcblxuWmxpYi5wcm90b3R5cGUuX3NldERpY3Rpb25hcnkgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmRpY3Rpb25hcnkgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuZXJyID0gZXhwb3J0cy5aX09LO1xuXG4gIHN3aXRjaCAodGhpcy5tb2RlKSB7XG4gICAgY2FzZSBleHBvcnRzLkRFRkxBVEU6XG4gICAgY2FzZSBleHBvcnRzLkRFRkxBVEVSQVc6XG4gICAgICB0aGlzLmVyciA9IHpsaWJfZGVmbGF0ZS5kZWZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLnN0cm0sIHRoaXMuZGljdGlvbmFyeSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgYnJlYWs7XG4gIH1cblxuICBpZiAodGhpcy5lcnIgIT09IGV4cG9ydHMuWl9PSykge1xuICAgIHRoaXMuX2Vycm9yKCdGYWlsZWQgdG8gc2V0IGRpY3Rpb25hcnknKTtcbiAgfVxufTtcblxuWmxpYi5wcm90b3R5cGUuX3Jlc2V0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVyciA9IGV4cG9ydHMuWl9PSztcblxuICBzd2l0Y2ggKHRoaXMubW9kZSkge1xuICAgIGNhc2UgZXhwb3J0cy5ERUZMQVRFOlxuICAgIGNhc2UgZXhwb3J0cy5ERUZMQVRFUkFXOlxuICAgIGNhc2UgZXhwb3J0cy5HWklQOlxuICAgICAgdGhpcy5lcnIgPSB6bGliX2RlZmxhdGUuZGVmbGF0ZVJlc2V0KHRoaXMuc3RybSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGV4cG9ydHMuSU5GTEFURTpcbiAgICBjYXNlIGV4cG9ydHMuSU5GTEFURVJBVzpcbiAgICBjYXNlIGV4cG9ydHMuR1VOWklQOlxuICAgICAgdGhpcy5lcnIgPSB6bGliX2luZmxhdGUuaW5mbGF0ZVJlc2V0KHRoaXMuc3RybSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgYnJlYWs7XG4gIH1cblxuICBpZiAodGhpcy5lcnIgIT09IGV4cG9ydHMuWl9PSykge1xuICAgIHRoaXMuX2Vycm9yKCdGYWlsZWQgdG8gcmVzZXQgc3RyZWFtJyk7XG4gIH1cbn07XG5cbmV4cG9ydHMuWmxpYiA9IFpsaWI7IiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7XG4gIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCdcbiAgICAmJiB0eXBlb2YgYXJnLmNvcHkgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLmZpbGwgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gJ2Z1bmN0aW9uJztcbn0iLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5mdW5jdGlvbiBaU3RyZWFtKCkge1xuICAvKiBuZXh0IGlucHV0IGJ5dGUgKi9cbiAgdGhpcy5pbnB1dCA9IG51bGw7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcbiAgdGhpcy5uZXh0X2luID0gMDtcbiAgLyogbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSBhdCBpbnB1dCAqL1xuICB0aGlzLmF2YWlsX2luID0gMDtcbiAgLyogdG90YWwgbnVtYmVyIG9mIGlucHV0IGJ5dGVzIHJlYWQgc28gZmFyICovXG4gIHRoaXMudG90YWxfaW4gPSAwO1xuICAvKiBuZXh0IG91dHB1dCBieXRlIHNob3VsZCBiZSBwdXQgdGhlcmUgKi9cbiAgdGhpcy5vdXRwdXQgPSBudWxsOyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzXG4gIHRoaXMubmV4dF9vdXQgPSAwO1xuICAvKiByZW1haW5pbmcgZnJlZSBzcGFjZSBhdCBvdXRwdXQgKi9cbiAgdGhpcy5hdmFpbF9vdXQgPSAwO1xuICAvKiB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgb3V0cHV0IHNvIGZhciAqL1xuICB0aGlzLnRvdGFsX291dCA9IDA7XG4gIC8qIGxhc3QgZXJyb3IgbWVzc2FnZSwgTlVMTCBpZiBubyBlcnJvciAqL1xuICB0aGlzLm1zZyA9ICcnLypaX05VTEwqLztcbiAgLyogbm90IHZpc2libGUgYnkgYXBwbGljYXRpb25zICovXG4gIHRoaXMuc3RhdGUgPSBudWxsO1xuICAvKiBiZXN0IGd1ZXNzIGFib3V0IHRoZSBkYXRhIHR5cGU6IGJpbmFyeSBvciB0ZXh0ICovXG4gIHRoaXMuZGF0YV90eXBlID0gMi8qWl9VTktOT1dOKi87XG4gIC8qIGFkbGVyMzIgdmFsdWUgb2YgdGhlIHVuY29tcHJlc3NlZCBkYXRhICovXG4gIHRoaXMuYWRsZXIgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFpTdHJlYW07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxudmFyIHV0aWxzICAgPSByZXF1aXJlKCcuLi91dGlscy9jb21tb24nKTtcbnZhciB0cmVlcyAgID0gcmVxdWlyZSgnLi90cmVlcycpO1xudmFyIGFkbGVyMzIgPSByZXF1aXJlKCcuL2FkbGVyMzInKTtcbnZhciBjcmMzMiAgID0gcmVxdWlyZSgnLi9jcmMzMicpO1xudmFyIG1zZyAgICAgPSByZXF1aXJlKCcuL21lc3NhZ2VzJyk7XG5cbi8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbi8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi9cbnZhciBaX05PX0ZMVVNIICAgICAgPSAwO1xudmFyIFpfUEFSVElBTF9GTFVTSCA9IDE7XG4vL3ZhciBaX1NZTkNfRkxVU0ggICAgPSAyO1xudmFyIFpfRlVMTF9GTFVTSCAgICA9IDM7XG52YXIgWl9GSU5JU0ggICAgICAgID0gNDtcbnZhciBaX0JMT0NLICAgICAgICAgPSA1O1xuLy92YXIgWl9UUkVFUyAgICAgICAgID0gNjtcblxuXG4vKiBSZXR1cm4gY29kZXMgZm9yIHRoZSBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGZ1bmN0aW9ucy4gTmVnYXRpdmUgdmFsdWVzXG4gKiBhcmUgZXJyb3JzLCBwb3NpdGl2ZSB2YWx1ZXMgYXJlIHVzZWQgZm9yIHNwZWNpYWwgYnV0IG5vcm1hbCBldmVudHMuXG4gKi9cbnZhciBaX09LICAgICAgICAgICAgPSAwO1xudmFyIFpfU1RSRUFNX0VORCAgICA9IDE7XG4vL3ZhciBaX05FRURfRElDVCAgICAgPSAyO1xuLy92YXIgWl9FUlJOTyAgICAgICAgID0gLTE7XG52YXIgWl9TVFJFQU1fRVJST1IgID0gLTI7XG52YXIgWl9EQVRBX0VSUk9SICAgID0gLTM7XG4vL3ZhciBaX01FTV9FUlJPUiAgICAgPSAtNDtcbnZhciBaX0JVRl9FUlJPUiAgICAgPSAtNTtcbi8vdmFyIFpfVkVSU0lPTl9FUlJPUiA9IC02O1xuXG5cbi8qIGNvbXByZXNzaW9uIGxldmVscyAqL1xuLy92YXIgWl9OT19DT01QUkVTU0lPTiAgICAgID0gMDtcbi8vdmFyIFpfQkVTVF9TUEVFRCAgICAgICAgICA9IDE7XG4vL3ZhciBaX0JFU1RfQ09NUFJFU1NJT04gICAgPSA5O1xudmFyIFpfREVGQVVMVF9DT01QUkVTU0lPTiA9IC0xO1xuXG5cbnZhciBaX0ZJTFRFUkVEICAgICAgICAgICAgPSAxO1xudmFyIFpfSFVGRk1BTl9PTkxZICAgICAgICA9IDI7XG52YXIgWl9STEUgICAgICAgICAgICAgICAgID0gMztcbnZhciBaX0ZJWEVEICAgICAgICAgICAgICAgPSA0O1xudmFyIFpfREVGQVVMVF9TVFJBVEVHWSAgICA9IDA7XG5cbi8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi9cbi8vdmFyIFpfQklOQVJZICAgICAgICAgICAgICA9IDA7XG4vL3ZhciBaX1RFWFQgICAgICAgICAgICAgICAgPSAxO1xuLy92YXIgWl9BU0NJSSAgICAgICAgICAgICAgID0gMTsgLy8gPSBaX1RFWFRcbnZhciBaX1VOS05PV04gICAgICAgICAgICAgPSAyO1xuXG5cbi8qIFRoZSBkZWZsYXRlIGNvbXByZXNzaW9uIG1ldGhvZCAqL1xudmFyIFpfREVGTEFURUQgID0gODtcblxuLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG52YXIgTUFYX01FTV9MRVZFTCA9IDk7XG4vKiBNYXhpbXVtIHZhbHVlIGZvciBtZW1MZXZlbCBpbiBkZWZsYXRlSW5pdDIgKi9cbnZhciBNQVhfV0JJVFMgPSAxNTtcbi8qIDMySyBMWjc3IHdpbmRvdyAqL1xudmFyIERFRl9NRU1fTEVWRUwgPSA4O1xuXG5cbnZhciBMRU5HVEhfQ09ERVMgID0gMjk7XG4vKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGVzLCBub3QgY291bnRpbmcgdGhlIHNwZWNpYWwgRU5EX0JMT0NLIGNvZGUgKi9cbnZhciBMSVRFUkFMUyAgICAgID0gMjU2O1xuLyogbnVtYmVyIG9mIGxpdGVyYWwgYnl0ZXMgMC4uMjU1ICovXG52YXIgTF9DT0RFUyAgICAgICA9IExJVEVSQUxTICsgMSArIExFTkdUSF9DT0RFUztcbi8qIG51bWJlciBvZiBMaXRlcmFsIG9yIExlbmd0aCBjb2RlcywgaW5jbHVkaW5nIHRoZSBFTkRfQkxPQ0sgY29kZSAqL1xudmFyIERfQ09ERVMgICAgICAgPSAzMDtcbi8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlcyAqL1xudmFyIEJMX0NPREVTICAgICAgPSAxOTtcbi8qIG51bWJlciBvZiBjb2RlcyB1c2VkIHRvIHRyYW5zZmVyIHRoZSBiaXQgbGVuZ3RocyAqL1xudmFyIEhFQVBfU0laRSAgICAgPSAyICogTF9DT0RFUyArIDE7XG4vKiBtYXhpbXVtIGhlYXAgc2l6ZSAqL1xudmFyIE1BWF9CSVRTICA9IDE1O1xuLyogQWxsIGNvZGVzIG11c3Qgbm90IGV4Y2VlZCBNQVhfQklUUyBiaXRzICovXG5cbnZhciBNSU5fTUFUQ0ggPSAzO1xudmFyIE1BWF9NQVRDSCA9IDI1ODtcbnZhciBNSU5fTE9PS0FIRUFEID0gKE1BWF9NQVRDSCArIE1JTl9NQVRDSCArIDEpO1xuXG52YXIgUFJFU0VUX0RJQ1QgPSAweDIwO1xuXG52YXIgSU5JVF9TVEFURSA9IDQyO1xudmFyIEVYVFJBX1NUQVRFID0gNjk7XG52YXIgTkFNRV9TVEFURSA9IDczO1xudmFyIENPTU1FTlRfU1RBVEUgPSA5MTtcbnZhciBIQ1JDX1NUQVRFID0gMTAzO1xudmFyIEJVU1lfU1RBVEUgPSAxMTM7XG52YXIgRklOSVNIX1NUQVRFID0gNjY2O1xuXG52YXIgQlNfTkVFRF9NT1JFICAgICAgPSAxOyAvKiBibG9jayBub3QgY29tcGxldGVkLCBuZWVkIG1vcmUgaW5wdXQgb3IgbW9yZSBvdXRwdXQgKi9cbnZhciBCU19CTE9DS19ET05FICAgICA9IDI7IC8qIGJsb2NrIGZsdXNoIHBlcmZvcm1lZCAqL1xudmFyIEJTX0ZJTklTSF9TVEFSVEVEID0gMzsgLyogZmluaXNoIHN0YXJ0ZWQsIG5lZWQgb25seSBtb3JlIG91dHB1dCBhdCBuZXh0IGRlZmxhdGUgKi9cbnZhciBCU19GSU5JU0hfRE9ORSAgICA9IDQ7IC8qIGZpbmlzaCBkb25lLCBhY2NlcHQgbm8gbW9yZSBpbnB1dCBvciBvdXRwdXQgKi9cblxudmFyIE9TX0NPREUgPSAweDAzOyAvLyBVbml4IDopIC4gRG9uJ3QgZGV0ZWN0LCB1c2UgdGhpcyBkZWZhdWx0LlxuXG5mdW5jdGlvbiBlcnIoc3RybSwgZXJyb3JDb2RlKSB7XG4gIHN0cm0ubXNnID0gbXNnW2Vycm9yQ29kZV07XG4gIHJldHVybiBlcnJvckNvZGU7XG59XG5cbmZ1bmN0aW9uIHJhbmsoZikge1xuICByZXR1cm4gKChmKSA8PCAxKSAtICgoZikgPiA0ID8gOSA6IDApO1xufVxuXG5mdW5jdGlvbiB6ZXJvKGJ1ZikgeyB2YXIgbGVuID0gYnVmLmxlbmd0aDsgd2hpbGUgKC0tbGVuID49IDApIHsgYnVmW2xlbl0gPSAwOyB9IH1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGbHVzaCBhcyBtdWNoIHBlbmRpbmcgb3V0cHV0IGFzIHBvc3NpYmxlLiBBbGwgZGVmbGF0ZSgpIG91dHB1dCBnb2VzXG4gKiB0aHJvdWdoIHRoaXMgZnVuY3Rpb24gc28gc29tZSBhcHBsaWNhdGlvbnMgbWF5IHdpc2ggdG8gbW9kaWZ5IGl0XG4gKiB0byBhdm9pZCBhbGxvY2F0aW5nIGEgbGFyZ2Ugc3RybS0+b3V0cHV0IGJ1ZmZlciBhbmQgY29weWluZyBpbnRvIGl0LlxuICogKFNlZSBhbHNvIHJlYWRfYnVmKCkpLlxuICovXG5mdW5jdGlvbiBmbHVzaF9wZW5kaW5nKHN0cm0pIHtcbiAgdmFyIHMgPSBzdHJtLnN0YXRlO1xuXG4gIC8vX3RyX2ZsdXNoX2JpdHMocyk7XG4gIHZhciBsZW4gPSBzLnBlbmRpbmc7XG4gIGlmIChsZW4gPiBzdHJtLmF2YWlsX291dCkge1xuICAgIGxlbiA9IHN0cm0uYXZhaWxfb3V0O1xuICB9XG4gIGlmIChsZW4gPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgdXRpbHMuYXJyYXlTZXQoc3RybS5vdXRwdXQsIHMucGVuZGluZ19idWYsIHMucGVuZGluZ19vdXQsIGxlbiwgc3RybS5uZXh0X291dCk7XG4gIHN0cm0ubmV4dF9vdXQgKz0gbGVuO1xuICBzLnBlbmRpbmdfb3V0ICs9IGxlbjtcbiAgc3RybS50b3RhbF9vdXQgKz0gbGVuO1xuICBzdHJtLmF2YWlsX291dCAtPSBsZW47XG4gIHMucGVuZGluZyAtPSBsZW47XG4gIGlmIChzLnBlbmRpbmcgPT09IDApIHtcbiAgICBzLnBlbmRpbmdfb3V0ID0gMDtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGZsdXNoX2Jsb2NrX29ubHkocywgbGFzdCkge1xuICB0cmVlcy5fdHJfZmx1c2hfYmxvY2socywgKHMuYmxvY2tfc3RhcnQgPj0gMCA/IHMuYmxvY2tfc3RhcnQgOiAtMSksIHMuc3Ryc3RhcnQgLSBzLmJsb2NrX3N0YXJ0LCBsYXN0KTtcbiAgcy5ibG9ja19zdGFydCA9IHMuc3Ryc3RhcnQ7XG4gIGZsdXNoX3BlbmRpbmcocy5zdHJtKTtcbn1cblxuXG5mdW5jdGlvbiBwdXRfYnl0ZShzLCBiKSB7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gYjtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBQdXQgYSBzaG9ydCBpbiB0aGUgcGVuZGluZyBidWZmZXIuIFRoZSAxNi1iaXQgdmFsdWUgaXMgcHV0IGluIE1TQiBvcmRlci5cbiAqIElOIGFzc2VydGlvbjogdGhlIHN0cmVhbSBzdGF0ZSBpcyBjb3JyZWN0IGFuZCB0aGVyZSBpcyBlbm91Z2ggcm9vbSBpblxuICogcGVuZGluZ19idWYuXG4gKi9cbmZ1bmN0aW9uIHB1dFNob3J0TVNCKHMsIGIpIHtcbi8vICBwdXRfYnl0ZShzLCAoQnl0ZSkoYiA+PiA4KSk7XG4vLyAgcHV0X2J5dGUocywgKEJ5dGUpKGIgJiAweGZmKSk7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gKGIgPj4+IDgpICYgMHhmZjtcbiAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBiICYgMHhmZjtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFJlYWQgYSBuZXcgYnVmZmVyIGZyb20gdGhlIGN1cnJlbnQgaW5wdXQgc3RyZWFtLCB1cGRhdGUgdGhlIGFkbGVyMzJcbiAqIGFuZCB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC4gIEFsbCBkZWZsYXRlKCkgaW5wdXQgZ29lcyB0aHJvdWdoXG4gKiB0aGlzIGZ1bmN0aW9uIHNvIHNvbWUgYXBwbGljYXRpb25zIG1heSB3aXNoIHRvIG1vZGlmeSBpdCB0byBhdm9pZFxuICogYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPmlucHV0IGJ1ZmZlciBhbmQgY29weWluZyBmcm9tIGl0LlxuICogKFNlZSBhbHNvIGZsdXNoX3BlbmRpbmcoKSkuXG4gKi9cbmZ1bmN0aW9uIHJlYWRfYnVmKHN0cm0sIGJ1Ziwgc3RhcnQsIHNpemUpIHtcbiAgdmFyIGxlbiA9IHN0cm0uYXZhaWxfaW47XG5cbiAgaWYgKGxlbiA+IHNpemUpIHsgbGVuID0gc2l6ZTsgfVxuICBpZiAobGVuID09PSAwKSB7IHJldHVybiAwOyB9XG5cbiAgc3RybS5hdmFpbF9pbiAtPSBsZW47XG5cbiAgLy8gem1lbWNweShidWYsIHN0cm0tPm5leHRfaW4sIGxlbik7XG4gIHV0aWxzLmFycmF5U2V0KGJ1Ziwgc3RybS5pbnB1dCwgc3RybS5uZXh0X2luLCBsZW4sIHN0YXJ0KTtcbiAgaWYgKHN0cm0uc3RhdGUud3JhcCA9PT0gMSkge1xuICAgIHN0cm0uYWRsZXIgPSBhZGxlcjMyKHN0cm0uYWRsZXIsIGJ1ZiwgbGVuLCBzdGFydCk7XG4gIH1cblxuICBlbHNlIGlmIChzdHJtLnN0YXRlLndyYXAgPT09IDIpIHtcbiAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgYnVmLCBsZW4sIHN0YXJ0KTtcbiAgfVxuXG4gIHN0cm0ubmV4dF9pbiArPSBsZW47XG4gIHN0cm0udG90YWxfaW4gKz0gbGVuO1xuXG4gIHJldHVybiBsZW47XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZXQgbWF0Y2hfc3RhcnQgdG8gdGhlIGxvbmdlc3QgbWF0Y2ggc3RhcnRpbmcgYXQgdGhlIGdpdmVuIHN0cmluZyBhbmRcbiAqIHJldHVybiBpdHMgbGVuZ3RoLiBNYXRjaGVzIHNob3J0ZXIgb3IgZXF1YWwgdG8gcHJldl9sZW5ndGggYXJlIGRpc2NhcmRlZCxcbiAqIGluIHdoaWNoIGNhc2UgdGhlIHJlc3VsdCBpcyBlcXVhbCB0byBwcmV2X2xlbmd0aCBhbmQgbWF0Y2hfc3RhcnQgaXNcbiAqIGdhcmJhZ2UuXG4gKiBJTiBhc3NlcnRpb25zOiBjdXJfbWF0Y2ggaXMgdGhlIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW4gZm9yIHRoZSBjdXJyZW50XG4gKiAgIHN0cmluZyAoc3Ryc3RhcnQpIGFuZCBpdHMgZGlzdGFuY2UgaXMgPD0gTUFYX0RJU1QsIGFuZCBwcmV2X2xlbmd0aCA+PSAxXG4gKiBPVVQgYXNzZXJ0aW9uOiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIG5vdCBncmVhdGVyIHRoYW4gcy0+bG9va2FoZWFkLlxuICovXG5mdW5jdGlvbiBsb25nZXN0X21hdGNoKHMsIGN1cl9tYXRjaCkge1xuICB2YXIgY2hhaW5fbGVuZ3RoID0gcy5tYXhfY2hhaW5fbGVuZ3RoOyAgICAgIC8qIG1heCBoYXNoIGNoYWluIGxlbmd0aCAqL1xuICB2YXIgc2NhbiA9IHMuc3Ryc3RhcnQ7IC8qIGN1cnJlbnQgc3RyaW5nICovXG4gIHZhciBtYXRjaDsgICAgICAgICAgICAgICAgICAgICAgIC8qIG1hdGNoZWQgc3RyaW5nICovXG4gIHZhciBsZW47ICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoIG9mIGN1cnJlbnQgbWF0Y2ggKi9cbiAgdmFyIGJlc3RfbGVuID0gcy5wcmV2X2xlbmd0aDsgICAgICAgICAgICAgIC8qIGJlc3QgbWF0Y2ggbGVuZ3RoIHNvIGZhciAqL1xuICB2YXIgbmljZV9tYXRjaCA9IHMubmljZV9tYXRjaDsgICAgICAgICAgICAgLyogc3RvcCBpZiBtYXRjaCBsb25nIGVub3VnaCAqL1xuICB2YXIgbGltaXQgPSAocy5zdHJzdGFydCA+IChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpKSA/XG4gICAgICBzLnN0cnN0YXJ0IC0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkgOiAwLypOSUwqLztcblxuICB2YXIgX3dpbiA9IHMud2luZG93OyAvLyBzaG9ydGN1dFxuXG4gIHZhciB3bWFzayA9IHMud19tYXNrO1xuICB2YXIgcHJldiAgPSBzLnByZXY7XG5cbiAgLyogU3RvcCB3aGVuIGN1cl9tYXRjaCBiZWNvbWVzIDw9IGxpbWl0LiBUbyBzaW1wbGlmeSB0aGUgY29kZSxcbiAgICogd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZyBvZiB3aW5kb3cgaW5kZXggMC5cbiAgICovXG5cbiAgdmFyIHN0cmVuZCA9IHMuc3Ryc3RhcnQgKyBNQVhfTUFUQ0g7XG4gIHZhciBzY2FuX2VuZDEgID0gX3dpbltzY2FuICsgYmVzdF9sZW4gLSAxXTtcbiAgdmFyIHNjYW5fZW5kICAgPSBfd2luW3NjYW4gKyBiZXN0X2xlbl07XG5cbiAgLyogVGhlIGNvZGUgaXMgb3B0aW1pemVkIGZvciBIQVNIX0JJVFMgPj0gOCBhbmQgTUFYX01BVENILTIgbXVsdGlwbGUgb2YgMTYuXG4gICAqIEl0IGlzIGVhc3kgdG8gZ2V0IHJpZCBvZiB0aGlzIG9wdGltaXphdGlvbiBpZiBuZWNlc3NhcnkuXG4gICAqL1xuICAvLyBBc3NlcnQocy0+aGFzaF9iaXRzID49IDggJiYgTUFYX01BVENIID09IDI1OCwgXCJDb2RlIHRvbyBjbGV2ZXJcIik7XG5cbiAgLyogRG8gbm90IHdhc3RlIHRvbyBtdWNoIHRpbWUgaWYgd2UgYWxyZWFkeSBoYXZlIGEgZ29vZCBtYXRjaDogKi9cbiAgaWYgKHMucHJldl9sZW5ndGggPj0gcy5nb29kX21hdGNoKSB7XG4gICAgY2hhaW5fbGVuZ3RoID4+PSAyO1xuICB9XG4gIC8qIERvIG5vdCBsb29rIGZvciBtYXRjaGVzIGJleW9uZCB0aGUgZW5kIG9mIHRoZSBpbnB1dC4gVGhpcyBpcyBuZWNlc3NhcnlcbiAgICogdG8gbWFrZSBkZWZsYXRlIGRldGVybWluaXN0aWMuXG4gICAqL1xuICBpZiAobmljZV9tYXRjaCA+IHMubG9va2FoZWFkKSB7IG5pY2VfbWF0Y2ggPSBzLmxvb2thaGVhZDsgfVxuXG4gIC8vIEFzc2VydCgodWxnKXMtPnN0cnN0YXJ0IDw9IHMtPndpbmRvd19zaXplLU1JTl9MT09LQUhFQUQsIFwibmVlZCBsb29rYWhlYWRcIik7XG5cbiAgZG8ge1xuICAgIC8vIEFzc2VydChjdXJfbWF0Y2ggPCBzLT5zdHJzdGFydCwgXCJubyBmdXR1cmVcIik7XG4gICAgbWF0Y2ggPSBjdXJfbWF0Y2g7XG5cbiAgICAvKiBTa2lwIHRvIG5leHQgbWF0Y2ggaWYgdGhlIG1hdGNoIGxlbmd0aCBjYW5ub3QgaW5jcmVhc2VcbiAgICAgKiBvciBpZiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIGxlc3MgdGhhbiAyLiAgTm90ZSB0aGF0IHRoZSBjaGVja3MgYmVsb3dcbiAgICAgKiBmb3IgaW5zdWZmaWNpZW50IGxvb2thaGVhZCBvbmx5IG9jY3VyIG9jY2FzaW9uYWxseSBmb3IgcGVyZm9ybWFuY2VcbiAgICAgKiByZWFzb25zLiAgVGhlcmVmb3JlIHVuaW5pdGlhbGl6ZWQgbWVtb3J5IHdpbGwgYmUgYWNjZXNzZWQsIGFuZFxuICAgICAqIGNvbmRpdGlvbmFsIGp1bXBzIHdpbGwgYmUgbWFkZSB0aGF0IGRlcGVuZCBvbiB0aG9zZSB2YWx1ZXMuXG4gICAgICogSG93ZXZlciB0aGUgbGVuZ3RoIG9mIHRoZSBtYXRjaCBpcyBsaW1pdGVkIHRvIHRoZSBsb29rYWhlYWQsIHNvXG4gICAgICogdGhlIG91dHB1dCBvZiBkZWZsYXRlIGlzIG5vdCBhZmZlY3RlZCBieSB0aGUgdW5pbml0aWFsaXplZCB2YWx1ZXMuXG4gICAgICovXG5cbiAgICBpZiAoX3dpblttYXRjaCArIGJlc3RfbGVuXSAgICAgIT09IHNjYW5fZW5kICB8fFxuICAgICAgICBfd2luW21hdGNoICsgYmVzdF9sZW4gLSAxXSAhPT0gc2Nhbl9lbmQxIHx8XG4gICAgICAgIF93aW5bbWF0Y2hdICAgICAgICAgICAgICAgICE9PSBfd2luW3NjYW5dIHx8XG4gICAgICAgIF93aW5bKyttYXRjaF0gICAgICAgICAgICAgICE9PSBfd2luW3NjYW4gKyAxXSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyogVGhlIGNoZWNrIGF0IGJlc3RfbGVuLTEgY2FuIGJlIHJlbW92ZWQgYmVjYXVzZSBpdCB3aWxsIGJlIG1hZGVcbiAgICAgKiBhZ2FpbiBsYXRlci4gKFRoaXMgaGV1cmlzdGljIGlzIG5vdCBhbHdheXMgYSB3aW4uKVxuICAgICAqIEl0IGlzIG5vdCBuZWNlc3NhcnkgdG8gY29tcGFyZSBzY2FuWzJdIGFuZCBtYXRjaFsyXSBzaW5jZSB0aGV5XG4gICAgICogYXJlIGFsd2F5cyBlcXVhbCB3aGVuIHRoZSBvdGhlciBieXRlcyBtYXRjaCwgZ2l2ZW4gdGhhdFxuICAgICAqIHRoZSBoYXNoIGtleXMgYXJlIGVxdWFsIGFuZCB0aGF0IEhBU0hfQklUUyA+PSA4LlxuICAgICAqL1xuICAgIHNjYW4gKz0gMjtcbiAgICBtYXRjaCsrO1xuICAgIC8vIEFzc2VydCgqc2NhbiA9PSAqbWF0Y2gsIFwibWF0Y2hbMl0/XCIpO1xuXG4gICAgLyogV2UgY2hlY2sgZm9yIGluc3VmZmljaWVudCBsb29rYWhlYWQgb25seSBldmVyeSA4dGggY29tcGFyaXNvbjtcbiAgICAgKiB0aGUgMjU2dGggY2hlY2sgd2lsbCBiZSBtYWRlIGF0IHN0cnN0YXJ0KzI1OC5cbiAgICAgKi9cbiAgICBkbyB7XG4gICAgICAvKmpzaGludCBub2VtcHR5OmZhbHNlKi9cbiAgICB9IHdoaWxlIChfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXG4gICAgICAgICAgICAgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgICAgICAgIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiZcbiAgICAgICAgICAgICBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXG4gICAgICAgICAgICAgc2NhbiA8IHN0cmVuZCk7XG5cbiAgICAvLyBBc3NlcnQoc2NhbiA8PSBzLT53aW5kb3crKHVuc2lnbmVkKShzLT53aW5kb3dfc2l6ZS0xKSwgXCJ3aWxkIHNjYW5cIik7XG5cbiAgICBsZW4gPSBNQVhfTUFUQ0ggLSAoc3RyZW5kIC0gc2Nhbik7XG4gICAgc2NhbiA9IHN0cmVuZCAtIE1BWF9NQVRDSDtcblxuICAgIGlmIChsZW4gPiBiZXN0X2xlbikge1xuICAgICAgcy5tYXRjaF9zdGFydCA9IGN1cl9tYXRjaDtcbiAgICAgIGJlc3RfbGVuID0gbGVuO1xuICAgICAgaWYgKGxlbiA+PSBuaWNlX21hdGNoKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgc2Nhbl9lbmQxICA9IF93aW5bc2NhbiArIGJlc3RfbGVuIC0gMV07XG4gICAgICBzY2FuX2VuZCAgID0gX3dpbltzY2FuICsgYmVzdF9sZW5dO1xuICAgIH1cbiAgfSB3aGlsZSAoKGN1cl9tYXRjaCA9IHByZXZbY3VyX21hdGNoICYgd21hc2tdKSA+IGxpbWl0ICYmIC0tY2hhaW5fbGVuZ3RoICE9PSAwKTtcblxuICBpZiAoYmVzdF9sZW4gPD0gcy5sb29rYWhlYWQpIHtcbiAgICByZXR1cm4gYmVzdF9sZW47XG4gIH1cbiAgcmV0dXJuIHMubG9va2FoZWFkO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRmlsbCB0aGUgd2luZG93IHdoZW4gdGhlIGxvb2thaGVhZCBiZWNvbWVzIGluc3VmZmljaWVudC5cbiAqIFVwZGF0ZXMgc3Ryc3RhcnQgYW5kIGxvb2thaGVhZC5cbiAqXG4gKiBJTiBhc3NlcnRpb246IGxvb2thaGVhZCA8IE1JTl9MT09LQUhFQURcbiAqIE9VVCBhc3NlcnRpb25zOiBzdHJzdGFydCA8PSB3aW5kb3dfc2l6ZS1NSU5fTE9PS0FIRUFEXG4gKiAgICBBdCBsZWFzdCBvbmUgYnl0ZSBoYXMgYmVlbiByZWFkLCBvciBhdmFpbF9pbiA9PSAwOyByZWFkcyBhcmVcbiAqICAgIHBlcmZvcm1lZCBmb3IgYXQgbGVhc3QgdHdvIGJ5dGVzIChyZXF1aXJlZCBmb3IgdGhlIHppcCB0cmFuc2xhdGVfZW9sXG4gKiAgICBvcHRpb24gLS0gbm90IHN1cHBvcnRlZCBoZXJlKS5cbiAqL1xuZnVuY3Rpb24gZmlsbF93aW5kb3cocykge1xuICB2YXIgX3dfc2l6ZSA9IHMud19zaXplO1xuICB2YXIgcCwgbiwgbSwgbW9yZSwgc3RyO1xuXG4gIC8vQXNzZXJ0KHMtPmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQsIFwiYWxyZWFkeSBlbm91Z2ggbG9va2FoZWFkXCIpO1xuXG4gIGRvIHtcbiAgICBtb3JlID0gcy53aW5kb3dfc2l6ZSAtIHMubG9va2FoZWFkIC0gcy5zdHJzdGFydDtcblxuICAgIC8vIEpTIGludHMgaGF2ZSAzMiBiaXQsIGJsb2NrIGJlbG93IG5vdCBuZWVkZWRcbiAgICAvKiBEZWFsIHdpdGggIUAjJCUgNjRLIGxpbWl0OiAqL1xuICAgIC8vaWYgKHNpemVvZihpbnQpIDw9IDIpIHtcbiAgICAvLyAgICBpZiAobW9yZSA9PSAwICYmIHMtPnN0cnN0YXJ0ID09IDAgJiYgcy0+bG9va2FoZWFkID09IDApIHtcbiAgICAvLyAgICAgICAgbW9yZSA9IHdzaXplO1xuICAgIC8vXG4gICAgLy8gIH0gZWxzZSBpZiAobW9yZSA9PSAodW5zaWduZWQpKC0xKSkge1xuICAgIC8vICAgICAgICAvKiBWZXJ5IHVubGlrZWx5LCBidXQgcG9zc2libGUgb24gMTYgYml0IG1hY2hpbmUgaWZcbiAgICAvLyAgICAgICAgICogc3Ryc3RhcnQgPT0gMCAmJiBsb29rYWhlYWQgPT0gMSAoaW5wdXQgZG9uZSBhIGJ5dGUgYXQgdGltZSlcbiAgICAvLyAgICAgICAgICovXG4gICAgLy8gICAgICAgIG1vcmUtLTtcbiAgICAvLyAgICB9XG4gICAgLy99XG5cblxuICAgIC8qIElmIHRoZSB3aW5kb3cgaXMgYWxtb3N0IGZ1bGwgYW5kIHRoZXJlIGlzIGluc3VmZmljaWVudCBsb29rYWhlYWQsXG4gICAgICogbW92ZSB0aGUgdXBwZXIgaGFsZiB0byB0aGUgbG93ZXIgb25lIHRvIG1ha2Ugcm9vbSBpbiB0aGUgdXBwZXIgaGFsZi5cbiAgICAgKi9cbiAgICBpZiAocy5zdHJzdGFydCA+PSBfd19zaXplICsgKF93X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkge1xuXG4gICAgICB1dGlscy5hcnJheVNldChzLndpbmRvdywgcy53aW5kb3csIF93X3NpemUsIF93X3NpemUsIDApO1xuICAgICAgcy5tYXRjaF9zdGFydCAtPSBfd19zaXplO1xuICAgICAgcy5zdHJzdGFydCAtPSBfd19zaXplO1xuICAgICAgLyogd2Ugbm93IGhhdmUgc3Ryc3RhcnQgPj0gTUFYX0RJU1QgKi9cbiAgICAgIHMuYmxvY2tfc3RhcnQgLT0gX3dfc2l6ZTtcblxuICAgICAgLyogU2xpZGUgdGhlIGhhc2ggdGFibGUgKGNvdWxkIGJlIGF2b2lkZWQgd2l0aCAzMiBiaXQgdmFsdWVzXG4gICAgICAgYXQgdGhlIGV4cGVuc2Ugb2YgbWVtb3J5IHVzYWdlKS4gV2Ugc2xpZGUgZXZlbiB3aGVuIGxldmVsID09IDBcbiAgICAgICB0byBrZWVwIHRoZSBoYXNoIHRhYmxlIGNvbnNpc3RlbnQgaWYgd2Ugc3dpdGNoIGJhY2sgdG8gbGV2ZWwgPiAwXG4gICAgICAgbGF0ZXIuIChVc2luZyBsZXZlbCAwIHBlcm1hbmVudGx5IGlzIG5vdCBhbiBvcHRpbWFsIHVzYWdlIG9mXG4gICAgICAgemxpYiwgc28gd2UgZG9uJ3QgY2FyZSBhYm91dCB0aGlzIHBhdGhvbG9naWNhbCBjYXNlLilcbiAgICAgICAqL1xuXG4gICAgICBuID0gcy5oYXNoX3NpemU7XG4gICAgICBwID0gbjtcbiAgICAgIGRvIHtcbiAgICAgICAgbSA9IHMuaGVhZFstLXBdO1xuICAgICAgICBzLmhlYWRbcF0gPSAobSA+PSBfd19zaXplID8gbSAtIF93X3NpemUgOiAwKTtcbiAgICAgIH0gd2hpbGUgKC0tbik7XG5cbiAgICAgIG4gPSBfd19zaXplO1xuICAgICAgcCA9IG47XG4gICAgICBkbyB7XG4gICAgICAgIG0gPSBzLnByZXZbLS1wXTtcbiAgICAgICAgcy5wcmV2W3BdID0gKG0gPj0gX3dfc2l6ZSA/IG0gLSBfd19zaXplIDogMCk7XG4gICAgICAgIC8qIElmIG4gaXMgbm90IG9uIGFueSBoYXNoIGNoYWluLCBwcmV2W25dIGlzIGdhcmJhZ2UgYnV0XG4gICAgICAgICAqIGl0cyB2YWx1ZSB3aWxsIG5ldmVyIGJlIHVzZWQuXG4gICAgICAgICAqL1xuICAgICAgfSB3aGlsZSAoLS1uKTtcblxuICAgICAgbW9yZSArPSBfd19zaXplO1xuICAgIH1cbiAgICBpZiAocy5zdHJtLmF2YWlsX2luID09PSAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvKiBJZiB0aGVyZSB3YXMgbm8gc2xpZGluZzpcbiAgICAgKiAgICBzdHJzdGFydCA8PSBXU0laRStNQVhfRElTVC0xICYmIGxvb2thaGVhZCA8PSBNSU5fTE9PS0FIRUFEIC0gMSAmJlxuICAgICAqICAgIG1vcmUgPT0gd2luZG93X3NpemUgLSBsb29rYWhlYWQgLSBzdHJzdGFydFxuICAgICAqID0+IG1vcmUgPj0gd2luZG93X3NpemUgLSAoTUlOX0xPT0tBSEVBRC0xICsgV1NJWkUgKyBNQVhfRElTVC0xKVxuICAgICAqID0+IG1vcmUgPj0gd2luZG93X3NpemUgLSAyKldTSVpFICsgMlxuICAgICAqIEluIHRoZSBCSUdfTUVNIG9yIE1NQVAgY2FzZSAobm90IHlldCBzdXBwb3J0ZWQpLFxuICAgICAqICAgd2luZG93X3NpemUgPT0gaW5wdXRfc2l6ZSArIE1JTl9MT09LQUhFQUQgICYmXG4gICAgICogICBzdHJzdGFydCArIHMtPmxvb2thaGVhZCA8PSBpbnB1dF9zaXplID0+IG1vcmUgPj0gTUlOX0xPT0tBSEVBRC5cbiAgICAgKiBPdGhlcndpc2UsIHdpbmRvd19zaXplID09IDIqV1NJWkUgc28gbW9yZSA+PSAyLlxuICAgICAqIElmIHRoZXJlIHdhcyBzbGlkaW5nLCBtb3JlID49IFdTSVpFLiBTbyBpbiBhbGwgY2FzZXMsIG1vcmUgPj0gMi5cbiAgICAgKi9cbiAgICAvL0Fzc2VydChtb3JlID49IDIsIFwibW9yZSA8IDJcIik7XG4gICAgbiA9IHJlYWRfYnVmKHMuc3RybSwgcy53aW5kb3csIHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZCwgbW9yZSk7XG4gICAgcy5sb29rYWhlYWQgKz0gbjtcblxuICAgIC8qIEluaXRpYWxpemUgdGhlIGhhc2ggdmFsdWUgbm93IHRoYXQgd2UgaGF2ZSBzb21lIGlucHV0OiAqL1xuICAgIGlmIChzLmxvb2thaGVhZCArIHMuaW5zZXJ0ID49IE1JTl9NQVRDSCkge1xuICAgICAgc3RyID0gcy5zdHJzdGFydCAtIHMuaW5zZXJ0O1xuICAgICAgcy5pbnNfaCA9IHMud2luZG93W3N0cl07XG5cbiAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMtPmluc19oLCBzLT53aW5kb3dbc3RyICsgMV0pOyAqL1xuICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbc3RyICsgMV0pICYgcy5oYXNoX21hc2s7XG4vLyNpZiBNSU5fTUFUQ0ggIT0gM1xuLy8gICAgICAgIENhbGwgdXBkYXRlX2hhc2goKSBNSU5fTUFUQ0gtMyBtb3JlIHRpbWVzXG4vLyNlbmRpZlxuICAgICAgd2hpbGUgKHMuaW5zZXJ0KSB7XG4gICAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMtPmluc19oLCBzLT53aW5kb3dbc3RyICsgTUlOX01BVENILTFdKTsgKi9cbiAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbc3RyICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG5cbiAgICAgICAgcy5wcmV2W3N0ciAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcbiAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gc3RyO1xuICAgICAgICBzdHIrKztcbiAgICAgICAgcy5pbnNlcnQtLTtcbiAgICAgICAgaWYgKHMubG9va2FoZWFkICsgcy5pbnNlcnQgPCBNSU5fTUFUQ0gpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvKiBJZiB0aGUgd2hvbGUgaW5wdXQgaGFzIGxlc3MgdGhhbiBNSU5fTUFUQ0ggYnl0ZXMsIGluc19oIGlzIGdhcmJhZ2UsXG4gICAgICogYnV0IHRoaXMgaXMgbm90IGltcG9ydGFudCBzaW5jZSBvbmx5IGxpdGVyYWwgYnl0ZXMgd2lsbCBiZSBlbWl0dGVkLlxuICAgICAqL1xuXG4gIH0gd2hpbGUgKHMubG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCAmJiBzLnN0cm0uYXZhaWxfaW4gIT09IDApO1xuXG4gIC8qIElmIHRoZSBXSU5fSU5JVCBieXRlcyBhZnRlciB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IGRhdGEgaGF2ZSBuZXZlciBiZWVuXG4gICAqIHdyaXR0ZW4sIHRoZW4gemVybyB0aG9zZSBieXRlcyBpbiBvcmRlciB0byBhdm9pZCBtZW1vcnkgY2hlY2sgcmVwb3J0cyBvZlxuICAgKiB0aGUgdXNlIG9mIHVuaW5pdGlhbGl6ZWQgKG9yIHVuaW5pdGlhbGlzZWQgYXMgSnVsaWFuIHdyaXRlcykgYnl0ZXMgYnlcbiAgICogdGhlIGxvbmdlc3QgbWF0Y2ggcm91dGluZXMuICBVcGRhdGUgdGhlIGhpZ2ggd2F0ZXIgbWFyayBmb3IgdGhlIG5leHRcbiAgICogdGltZSB0aHJvdWdoIGhlcmUuICBXSU5fSU5JVCBpcyBzZXQgdG8gTUFYX01BVENIIHNpbmNlIHRoZSBsb25nZXN0IG1hdGNoXG4gICAqIHJvdXRpbmVzIGFsbG93IHNjYW5uaW5nIHRvIHN0cnN0YXJ0ICsgTUFYX01BVENILCBpZ25vcmluZyBsb29rYWhlYWQuXG4gICAqL1xuLy8gIGlmIChzLmhpZ2hfd2F0ZXIgPCBzLndpbmRvd19zaXplKSB7XG4vLyAgICB2YXIgY3VyciA9IHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZDtcbi8vICAgIHZhciBpbml0ID0gMDtcbi8vXG4vLyAgICBpZiAocy5oaWdoX3dhdGVyIDwgY3Vycikge1xuLy8gICAgICAvKiBQcmV2aW91cyBoaWdoIHdhdGVyIG1hcmsgYmVsb3cgY3VycmVudCBkYXRhIC0tIHplcm8gV0lOX0lOSVRcbi8vICAgICAgICogYnl0ZXMgb3IgdXAgdG8gZW5kIG9mIHdpbmRvdywgd2hpY2hldmVyIGlzIGxlc3MuXG4vLyAgICAgICAqL1xuLy8gICAgICBpbml0ID0gcy53aW5kb3dfc2l6ZSAtIGN1cnI7XG4vLyAgICAgIGlmIChpbml0ID4gV0lOX0lOSVQpXG4vLyAgICAgICAgaW5pdCA9IFdJTl9JTklUO1xuLy8gICAgICB6bWVtemVybyhzLT53aW5kb3cgKyBjdXJyLCAodW5zaWduZWQpaW5pdCk7XG4vLyAgICAgIHMtPmhpZ2hfd2F0ZXIgPSBjdXJyICsgaW5pdDtcbi8vICAgIH1cbi8vICAgIGVsc2UgaWYgKHMtPmhpZ2hfd2F0ZXIgPCAodWxnKWN1cnIgKyBXSU5fSU5JVCkge1xuLy8gICAgICAvKiBIaWdoIHdhdGVyIG1hcmsgYXQgb3IgYWJvdmUgY3VycmVudCBkYXRhLCBidXQgYmVsb3cgY3VycmVudCBkYXRhXG4vLyAgICAgICAqIHBsdXMgV0lOX0lOSVQgLS0gemVybyBvdXQgdG8gY3VycmVudCBkYXRhIHBsdXMgV0lOX0lOSVQsIG9yIHVwXG4vLyAgICAgICAqIHRvIGVuZCBvZiB3aW5kb3csIHdoaWNoZXZlciBpcyBsZXNzLlxuLy8gICAgICAgKi9cbi8vICAgICAgaW5pdCA9ICh1bGcpY3VyciArIFdJTl9JTklUIC0gcy0+aGlnaF93YXRlcjtcbi8vICAgICAgaWYgKGluaXQgPiBzLT53aW5kb3dfc2l6ZSAtIHMtPmhpZ2hfd2F0ZXIpXG4vLyAgICAgICAgaW5pdCA9IHMtPndpbmRvd19zaXplIC0gcy0+aGlnaF93YXRlcjtcbi8vICAgICAgem1lbXplcm8ocy0+d2luZG93ICsgcy0+aGlnaF93YXRlciwgKHVuc2lnbmVkKWluaXQpO1xuLy8gICAgICBzLT5oaWdoX3dhdGVyICs9IGluaXQ7XG4vLyAgICB9XG4vLyAgfVxuLy9cbi8vICBBc3NlcnQoKHVsZylzLT5zdHJzdGFydCA8PSBzLT53aW5kb3dfc2l6ZSAtIE1JTl9MT09LQUhFQUQsXG4vLyAgICBcIm5vdCBlbm91Z2ggcm9vbSBmb3Igc2VhcmNoXCIpO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHkgd2l0aG91dCBjb21wcmVzc2lvbiBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gdGhlIGlucHV0IHN0cmVhbSwgcmV0dXJuXG4gKiB0aGUgY3VycmVudCBibG9jayBzdGF0ZS5cbiAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgaW5zZXJ0IG5ldyBzdHJpbmdzIGluIHRoZSBkaWN0aW9uYXJ5IHNpbmNlXG4gKiB1bmNvbXByZXNzaWJsZSBkYXRhIGlzIHByb2JhYmx5IG5vdCB1c2VmdWwuIFRoaXMgZnVuY3Rpb24gaXMgdXNlZFxuICogb25seSBmb3IgdGhlIGxldmVsPTAgY29tcHJlc3Npb24gb3B0aW9uLlxuICogTk9URTogdGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgb3B0aW1pemVkIHRvIGF2b2lkIGV4dHJhIGNvcHlpbmcgZnJvbVxuICogd2luZG93IHRvIHBlbmRpbmdfYnVmLlxuICovXG5mdW5jdGlvbiBkZWZsYXRlX3N0b3JlZChzLCBmbHVzaCkge1xuICAvKiBTdG9yZWQgYmxvY2tzIGFyZSBsaW1pdGVkIHRvIDB4ZmZmZiBieXRlcywgcGVuZGluZ19idWYgaXMgbGltaXRlZFxuICAgKiB0byBwZW5kaW5nX2J1Zl9zaXplLCBhbmQgZWFjaCBzdG9yZWQgYmxvY2sgaGFzIGEgNSBieXRlIGhlYWRlcjpcbiAgICovXG4gIHZhciBtYXhfYmxvY2tfc2l6ZSA9IDB4ZmZmZjtcblxuICBpZiAobWF4X2Jsb2NrX3NpemUgPiBzLnBlbmRpbmdfYnVmX3NpemUgLSA1KSB7XG4gICAgbWF4X2Jsb2NrX3NpemUgPSBzLnBlbmRpbmdfYnVmX3NpemUgLSA1O1xuICB9XG5cbiAgLyogQ29weSBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gaW5wdXQgdG8gb3V0cHV0OiAqL1xuICBmb3IgKDs7KSB7XG4gICAgLyogRmlsbCB0aGUgd2luZG93IGFzIG11Y2ggYXMgcG9zc2libGU6ICovXG4gICAgaWYgKHMubG9va2FoZWFkIDw9IDEpIHtcblxuICAgICAgLy9Bc3NlcnQocy0+c3Ryc3RhcnQgPCBzLT53X3NpemUrTUFYX0RJU1QocykgfHxcbiAgICAgIC8vICBzLT5ibG9ja19zdGFydCA+PSAobG9uZylzLT53X3NpemUsIFwic2xpZGUgdG9vIGxhdGVcIik7XG4vLyAgICAgIGlmICghKHMuc3Ryc3RhcnQgPCBzLndfc2l6ZSArIChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpIHx8XG4vLyAgICAgICAgcy5ibG9ja19zdGFydCA+PSBzLndfc2l6ZSkpIHtcbi8vICAgICAgICB0aHJvdyAgbmV3IEVycm9yKFwic2xpZGUgdG9vIGxhdGVcIik7XG4vLyAgICAgIH1cblxuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDAgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cblxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cbiAgICB9XG4gICAgLy9Bc3NlcnQocy0+YmxvY2tfc3RhcnQgPj0gMEwsIFwiYmxvY2sgZ29uZVwiKTtcbi8vICAgIGlmIChzLmJsb2NrX3N0YXJ0IDwgMCkgdGhyb3cgbmV3IEVycm9yKFwiYmxvY2sgZ29uZVwiKTtcblxuICAgIHMuc3Ryc3RhcnQgKz0gcy5sb29rYWhlYWQ7XG4gICAgcy5sb29rYWhlYWQgPSAwO1xuXG4gICAgLyogRW1pdCBhIHN0b3JlZCBibG9jayBpZiBwZW5kaW5nX2J1ZiB3aWxsIGJlIGZ1bGw6ICovXG4gICAgdmFyIG1heF9zdGFydCA9IHMuYmxvY2tfc3RhcnQgKyBtYXhfYmxvY2tfc2l6ZTtcblxuICAgIGlmIChzLnN0cnN0YXJ0ID09PSAwIHx8IHMuc3Ryc3RhcnQgPj0gbWF4X3N0YXJ0KSB7XG4gICAgICAvKiBzdHJzdGFydCA9PSAwIGlzIHBvc3NpYmxlIHdoZW4gd3JhcGFyb3VuZCBvbiAxNi1iaXQgbWFjaGluZSAqL1xuICAgICAgcy5sb29rYWhlYWQgPSBzLnN0cnN0YXJ0IC0gbWF4X3N0YXJ0O1xuICAgICAgcy5zdHJzdGFydCA9IG1heF9zdGFydDtcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIC8qKiovXG5cblxuICAgIH1cbiAgICAvKiBGbHVzaCBpZiB3ZSBtYXkgaGF2ZSB0byBzbGlkZSwgb3RoZXJ3aXNlIGJsb2NrX3N0YXJ0IG1heSBiZWNvbWVcbiAgICAgKiBuZWdhdGl2ZSBhbmQgdGhlIGRhdGEgd2lsbCBiZSBnb25lOlxuICAgICAqL1xuICAgIGlmIChzLnN0cnN0YXJ0IC0gcy5ibG9ja19zdGFydCA+PSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cblxuICBzLmluc2VydCA9IDA7XG5cbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG5cbiAgaWYgKHMuc3Ryc3RhcnQgPiBzLmJsb2NrX3N0YXJ0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG5cbiAgcmV0dXJuIEJTX05FRURfTU9SRTtcbn1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb21wcmVzcyBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gdGhlIGlucHV0IHN0cmVhbSwgcmV0dXJuIHRoZSBjdXJyZW50XG4gKiBibG9jayBzdGF0ZS5cbiAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgcGVyZm9ybSBsYXp5IGV2YWx1YXRpb24gb2YgbWF0Y2hlcyBhbmQgaW5zZXJ0c1xuICogbmV3IHN0cmluZ3MgaW4gdGhlIGRpY3Rpb25hcnkgb25seSBmb3IgdW5tYXRjaGVkIHN0cmluZ3Mgb3IgZm9yIHNob3J0XG4gKiBtYXRjaGVzLiBJdCBpcyB1c2VkIG9ubHkgZm9yIHRoZSBmYXN0IGNvbXByZXNzaW9uIG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIGRlZmxhdGVfZmFzdChzLCBmbHVzaCkge1xuICB2YXIgaGFzaF9oZWFkOyAgICAgICAgLyogaGVhZCBvZiB0aGUgaGFzaCBjaGFpbiAqL1xuICB2YXIgYmZsdXNoOyAgICAgICAgICAgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovXG5cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlXG4gICAgICogc3RyaW5nIGZvbGxvd2luZyB0aGUgbmV4dCBtYXRjaC5cbiAgICAgKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgICBicmVhazsgLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBJbnNlcnQgdGhlIHN0cmluZyB3aW5kb3dbc3Ryc3RhcnQgLi4gc3Ryc3RhcnQrMl0gaW4gdGhlXG4gICAgICogZGljdGlvbmFyeSwgYW5kIHNldCBoYXNoX2hlYWQgdG8gdGhlIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW46XG4gICAgICovXG4gICAgaGFzaF9oZWFkID0gMC8qTklMKi87XG4gICAgaWYgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCkge1xuICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi9cbiAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3Muc3Ryc3RhcnQgKyBNSU5fTUFUQ0ggLSAxXSkgJiBzLmhhc2hfbWFzaztcbiAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcbiAgICAgIC8qKiovXG4gICAgfVxuXG4gICAgLyogRmluZCB0aGUgbG9uZ2VzdCBtYXRjaCwgZGlzY2FyZGluZyB0aG9zZSA8PSBwcmV2X2xlbmd0aC5cbiAgICAgKiBBdCB0aGlzIHBvaW50IHdlIGhhdmUgYWx3YXlzIG1hdGNoX2xlbmd0aCA8IE1JTl9NQVRDSFxuICAgICAqL1xuICAgIGlmIChoYXNoX2hlYWQgIT09IDAvKk5JTCovICYmICgocy5zdHJzdGFydCAtIGhhc2hfaGVhZCkgPD0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkpKSB7XG4gICAgICAvKiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZ1xuICAgICAgICogb2Ygd2luZG93IGluZGV4IDAgKGluIHBhcnRpY3VsYXIgd2UgaGF2ZSB0byBhdm9pZCBhIG1hdGNoXG4gICAgICAgKiBvZiB0aGUgc3RyaW5nIHdpdGggaXRzZWxmIGF0IHRoZSBzdGFydCBvZiB0aGUgaW5wdXQgZmlsZSkuXG4gICAgICAgKi9cbiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gbG9uZ2VzdF9tYXRjaChzLCBoYXNoX2hlYWQpO1xuICAgICAgLyogbG9uZ2VzdF9tYXRjaCgpIHNldHMgbWF0Y2hfc3RhcnQgKi9cbiAgICB9XG4gICAgaWYgKHMubWF0Y2hfbGVuZ3RoID49IE1JTl9NQVRDSCkge1xuICAgICAgLy8gY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydCwgcy5tYXRjaF9zdGFydCwgcy5tYXRjaF9sZW5ndGgpOyAvLyBmb3IgZGVidWcgb25seVxuXG4gICAgICAvKioqIF90cl90YWxseV9kaXN0KHMsIHMuc3Ryc3RhcnQgLSBzLm1hdGNoX3N0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gsIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCBzLnN0cnN0YXJ0IC0gcy5tYXRjaF9zdGFydCwgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gpO1xuXG4gICAgICBzLmxvb2thaGVhZCAtPSBzLm1hdGNoX2xlbmd0aDtcblxuICAgICAgLyogSW5zZXJ0IG5ldyBzdHJpbmdzIGluIHRoZSBoYXNoIHRhYmxlIG9ubHkgaWYgdGhlIG1hdGNoIGxlbmd0aFxuICAgICAgICogaXMgbm90IHRvbyBsYXJnZS4gVGhpcyBzYXZlcyB0aW1lIGJ1dCBkZWdyYWRlcyBjb21wcmVzc2lvbi5cbiAgICAgICAqL1xuICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoIDw9IHMubWF4X2xhenlfbWF0Y2gvKm1heF9pbnNlcnRfbGVuZ3RoKi8gJiYgcy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoLS07IC8qIHN0cmluZyBhdCBzdHJzdGFydCBhbHJlYWR5IGluIHRhYmxlICovXG4gICAgICAgIGRvIHtcbiAgICAgICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi9cbiAgICAgICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG4gICAgICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcbiAgICAgICAgICAvKioqL1xuICAgICAgICAgIC8qIHN0cnN0YXJ0IG5ldmVyIGV4Y2VlZHMgV1NJWkUtTUFYX01BVENILCBzbyB0aGVyZSBhcmVcbiAgICAgICAgICAgKiBhbHdheXMgTUlOX01BVENIIGJ5dGVzIGFoZWFkLlxuICAgICAgICAgICAqL1xuICAgICAgICB9IHdoaWxlICgtLXMubWF0Y2hfbGVuZ3RoICE9PSAwKTtcbiAgICAgICAgcy5zdHJzdGFydCsrO1xuICAgICAgfSBlbHNlXG4gICAgICB7XG4gICAgICAgIHMuc3Ryc3RhcnQgKz0gcy5tYXRjaF9sZW5ndGg7XG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcbiAgICAgICAgcy5pbnNfaCA9IHMud2luZG93W3Muc3Ryc3RhcnRdO1xuICAgICAgICAvKiBVUERBVEVfSEFTSChzLCBzLmluc19oLCBzLndpbmRvd1tzLnN0cnN0YXJ0KzFdKTsgKi9cbiAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIDFdKSAmIHMuaGFzaF9tYXNrO1xuXG4vLyNpZiBNSU5fTUFUQ0ggIT0gM1xuLy8gICAgICAgICAgICAgICAgQ2FsbCBVUERBVEVfSEFTSCgpIE1JTl9NQVRDSC0zIG1vcmUgdGltZXNcbi8vI2VuZGlmXG4gICAgICAgIC8qIElmIGxvb2thaGVhZCA8IE1JTl9NQVRDSCwgaW5zX2ggaXMgZ2FyYmFnZSwgYnV0IGl0IGRvZXMgbm90XG4gICAgICAgICAqIG1hdHRlciBzaW5jZSBpdCB3aWxsIGJlIHJlY29tcHV0ZWQgYXQgbmV4dCBkZWZsYXRlIGNhbGwuXG4gICAgICAgICAqL1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvKiBObyBtYXRjaCwgb3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXG4gICAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMud2luZG93W3Muc3Ryc3RhcnRdKSk7XG4gICAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydF0sIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7XG5cbiAgICAgIHMubG9va2FoZWFkLS07XG4gICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgfVxuICAgIGlmIChiZmx1c2gpIHtcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIC8qKiovXG4gICAgfVxuICB9XG4gIHMuaW5zZXJ0ID0gKChzLnN0cnN0YXJ0IDwgKE1JTl9NQVRDSCAtIDEpKSA/IHMuc3Ryc3RhcnQgOiBNSU5fTUFUQ0ggLSAxKTtcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG4gIGlmIChzLmxhc3RfbGl0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG4gIHJldHVybiBCU19CTE9DS19ET05FO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNhbWUgYXMgYWJvdmUsIGJ1dCBhY2hpZXZlcyBiZXR0ZXIgY29tcHJlc3Npb24uIFdlIHVzZSBhIGxhenlcbiAqIGV2YWx1YXRpb24gZm9yIG1hdGNoZXM6IGEgbWF0Y2ggaXMgZmluYWxseSBhZG9wdGVkIG9ubHkgaWYgdGhlcmUgaXNcbiAqIG5vIGJldHRlciBtYXRjaCBhdCB0aGUgbmV4dCB3aW5kb3cgcG9zaXRpb24uXG4gKi9cbmZ1bmN0aW9uIGRlZmxhdGVfc2xvdyhzLCBmbHVzaCkge1xuICB2YXIgaGFzaF9oZWFkOyAgICAgICAgICAvKiBoZWFkIG9mIGhhc2ggY2hhaW4gKi9cbiAgdmFyIGJmbHVzaDsgICAgICAgICAgICAgIC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqL1xuXG4gIHZhciBtYXhfaW5zZXJ0O1xuXG4gIC8qIFByb2Nlc3MgdGhlIGlucHV0IGJsb2NrLiAqL1xuICBmb3IgKDs7KSB7XG4gICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgYWx3YXlzIGhhdmUgZW5vdWdoIGxvb2thaGVhZCwgZXhjZXB0XG4gICAgICogYXQgdGhlIGVuZCBvZiB0aGUgaW5wdXQgZmlsZS4gV2UgbmVlZCBNQVhfTUFUQ0ggYnl0ZXNcbiAgICAgKiBmb3IgdGhlIG5leHQgbWF0Y2gsIHBsdXMgTUlOX01BVENIIGJ5dGVzIHRvIGluc2VydCB0aGVcbiAgICAgKiBzdHJpbmcgZm9sbG93aW5nIHRoZSBuZXh0IG1hdGNoLlxuICAgICAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQpIHtcbiAgICAgIGZpbGxfd2luZG93KHMpO1xuICAgICAgaWYgKHMubG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCAmJiBmbHVzaCA9PT0gWl9OT19GTFVTSCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7IGJyZWFrOyB9IC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgfVxuXG4gICAgLyogSW5zZXJ0IHRoZSBzdHJpbmcgd2luZG93W3N0cnN0YXJ0IC4uIHN0cnN0YXJ0KzJdIGluIHRoZVxuICAgICAqIGRpY3Rpb25hcnksIGFuZCBzZXQgaGFzaF9oZWFkIHRvIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluOlxuICAgICAqL1xuICAgIGhhc2hfaGVhZCA9IDAvKk5JTCovO1xuICAgIGlmIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG4gICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG4gICAgICBoYXNoX2hlYWQgPSBzLnByZXZbcy5zdHJzdGFydCAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcbiAgICAgIHMuaGVhZFtzLmluc19oXSA9IHMuc3Ryc3RhcnQ7XG4gICAgICAvKioqL1xuICAgIH1cblxuICAgIC8qIEZpbmQgdGhlIGxvbmdlc3QgbWF0Y2gsIGRpc2NhcmRpbmcgdGhvc2UgPD0gcHJldl9sZW5ndGguXG4gICAgICovXG4gICAgcy5wcmV2X2xlbmd0aCA9IHMubWF0Y2hfbGVuZ3RoO1xuICAgIHMucHJldl9tYXRjaCA9IHMubWF0Y2hfc3RhcnQ7XG4gICAgcy5tYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xuXG4gICAgaWYgKGhhc2hfaGVhZCAhPT0gMC8qTklMKi8gJiYgcy5wcmV2X2xlbmd0aCA8IHMubWF4X2xhenlfbWF0Y2ggJiZcbiAgICAgICAgcy5zdHJzdGFydCAtIGhhc2hfaGVhZCA8PSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKS8qTUFYX0RJU1QocykqLykge1xuICAgICAgLyogVG8gc2ltcGxpZnkgdGhlIGNvZGUsIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmdcbiAgICAgICAqIG9mIHdpbmRvdyBpbmRleCAwIChpbiBwYXJ0aWN1bGFyIHdlIGhhdmUgdG8gYXZvaWQgYSBtYXRjaFxuICAgICAgICogb2YgdGhlIHN0cmluZyB3aXRoIGl0c2VsZiBhdCB0aGUgc3RhcnQgb2YgdGhlIGlucHV0IGZpbGUpLlxuICAgICAgICovXG4gICAgICBzLm1hdGNoX2xlbmd0aCA9IGxvbmdlc3RfbWF0Y2gocywgaGFzaF9oZWFkKTtcbiAgICAgIC8qIGxvbmdlc3RfbWF0Y2goKSBzZXRzIG1hdGNoX3N0YXJ0ICovXG5cbiAgICAgIGlmIChzLm1hdGNoX2xlbmd0aCA8PSA1ICYmXG4gICAgICAgICAocy5zdHJhdGVneSA9PT0gWl9GSUxURVJFRCB8fCAocy5tYXRjaF9sZW5ndGggPT09IE1JTl9NQVRDSCAmJiBzLnN0cnN0YXJ0IC0gcy5tYXRjaF9zdGFydCA+IDQwOTYvKlRPT19GQVIqLykpKSB7XG5cbiAgICAgICAgLyogSWYgcHJldl9tYXRjaCBpcyBhbHNvIE1JTl9NQVRDSCwgbWF0Y2hfc3RhcnQgaXMgZ2FyYmFnZVxuICAgICAgICAgKiBidXQgd2Ugd2lsbCBpZ25vcmUgdGhlIGN1cnJlbnQgbWF0Y2ggYW55d2F5LlxuICAgICAgICAgKi9cbiAgICAgICAgcy5tYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xuICAgICAgfVxuICAgIH1cbiAgICAvKiBJZiB0aGVyZSB3YXMgYSBtYXRjaCBhdCB0aGUgcHJldmlvdXMgc3RlcCBhbmQgdGhlIGN1cnJlbnRcbiAgICAgKiBtYXRjaCBpcyBub3QgYmV0dGVyLCBvdXRwdXQgdGhlIHByZXZpb3VzIG1hdGNoOlxuICAgICAqL1xuICAgIGlmIChzLnByZXZfbGVuZ3RoID49IE1JTl9NQVRDSCAmJiBzLm1hdGNoX2xlbmd0aCA8PSBzLnByZXZfbGVuZ3RoKSB7XG4gICAgICBtYXhfaW5zZXJ0ID0gcy5zdHJzdGFydCArIHMubG9va2FoZWFkIC0gTUlOX01BVENIO1xuICAgICAgLyogRG8gbm90IGluc2VydCBzdHJpbmdzIGluIGhhc2ggdGFibGUgYmV5b25kIHRoaXMuICovXG5cbiAgICAgIC8vY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydC0xLCBzLnByZXZfbWF0Y2gsIHMucHJldl9sZW5ndGgpO1xuXG4gICAgICAvKioqX3RyX3RhbGx5X2Rpc3Qocywgcy5zdHJzdGFydCAtIDEgLSBzLnByZXZfbWF0Y2gsXG4gICAgICAgICAgICAgICAgICAgICBzLnByZXZfbGVuZ3RoIC0gTUlOX01BVENILCBiZmx1c2gpOyoqKi9cbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCBzLnN0cnN0YXJ0IC0gMSAtIHMucHJldl9tYXRjaCwgcy5wcmV2X2xlbmd0aCAtIE1JTl9NQVRDSCk7XG4gICAgICAvKiBJbnNlcnQgaW4gaGFzaCB0YWJsZSBhbGwgc3RyaW5ncyB1cCB0byB0aGUgZW5kIG9mIHRoZSBtYXRjaC5cbiAgICAgICAqIHN0cnN0YXJ0LTEgYW5kIHN0cnN0YXJ0IGFyZSBhbHJlYWR5IGluc2VydGVkLiBJZiB0aGVyZSBpcyBub3RcbiAgICAgICAqIGVub3VnaCBsb29rYWhlYWQsIHRoZSBsYXN0IHR3byBzdHJpbmdzIGFyZSBub3QgaW5zZXJ0ZWQgaW5cbiAgICAgICAqIHRoZSBoYXNoIHRhYmxlLlxuICAgICAgICovXG4gICAgICBzLmxvb2thaGVhZCAtPSBzLnByZXZfbGVuZ3RoIC0gMTtcbiAgICAgIHMucHJldl9sZW5ndGggLT0gMjtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKCsrcy5zdHJzdGFydCA8PSBtYXhfaW5zZXJ0KSB7XG4gICAgICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi9cbiAgICAgICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG4gICAgICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcbiAgICAgICAgICAvKioqL1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlICgtLXMucHJldl9sZW5ndGggIT09IDApO1xuICAgICAgcy5tYXRjaF9hdmFpbGFibGUgPSAwO1xuICAgICAgcy5tYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xuICAgICAgcy5zdHJzdGFydCsrO1xuXG4gICAgICBpZiAoYmZsdXNoKSB7XG4gICAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgICAgfVxuICAgICAgICAvKioqL1xuICAgICAgfVxuXG4gICAgfSBlbHNlIGlmIChzLm1hdGNoX2F2YWlsYWJsZSkge1xuICAgICAgLyogSWYgdGhlcmUgd2FzIG5vIG1hdGNoIGF0IHRoZSBwcmV2aW91cyBwb3NpdGlvbiwgb3V0cHV0IGFcbiAgICAgICAqIHNpbmdsZSBsaXRlcmFsLiBJZiB0aGVyZSB3YXMgYSBtYXRjaCBidXQgdGhlIGN1cnJlbnQgbWF0Y2hcbiAgICAgICAqIGlzIGxvbmdlciwgdHJ1bmNhdGUgdGhlIHByZXZpb3VzIG1hdGNoIHRvIGEgc2luZ2xlIGxpdGVyYWwuXG4gICAgICAgKi9cbiAgICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0LTFdKSk7XG4gICAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydC0xXSwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gdHJlZXMuX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnQgLSAxXSk7XG5cbiAgICAgIGlmIChiZmx1c2gpIHtcbiAgICAgICAgLyoqKiBGTFVTSF9CTE9DS19PTkxZKHMsIDApICoqKi9cbiAgICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICAgIC8qKiovXG4gICAgICB9XG4gICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgICBzLmxvb2thaGVhZC0tO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLyogVGhlcmUgaXMgbm8gcHJldmlvdXMgbWF0Y2ggdG8gY29tcGFyZSB3aXRoLCB3YWl0IGZvclxuICAgICAgICogdGhlIG5leHQgc3RlcCB0byBkZWNpZGUuXG4gICAgICAgKi9cbiAgICAgIHMubWF0Y2hfYXZhaWxhYmxlID0gMTtcbiAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICAgIHMubG9va2FoZWFkLS07XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0IChmbHVzaCAhPSBaX05PX0ZMVVNILCBcIm5vIGZsdXNoP1wiKTtcbiAgaWYgKHMubWF0Y2hfYXZhaWxhYmxlKSB7XG4gICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnQtMV0pKTtcbiAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydC0xXSwgYmZsdXNoKTsgKioqL1xuICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0IC0gMV0pO1xuXG4gICAgcy5tYXRjaF9hdmFpbGFibGUgPSAwO1xuICB9XG4gIHMuaW5zZXJ0ID0gcy5zdHJzdGFydCA8IE1JTl9NQVRDSCAtIDEgPyBzLnN0cnN0YXJ0IDogTUlOX01BVENIIC0gMTtcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG4gIGlmIChzLmxhc3RfbGl0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG5cbiAgcmV0dXJuIEJTX0JMT0NLX0RPTkU7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGb3IgWl9STEUsIHNpbXBseSBsb29rIGZvciBydW5zIG9mIGJ5dGVzLCBnZW5lcmF0ZSBtYXRjaGVzIG9ubHkgb2YgZGlzdGFuY2VcbiAqIG9uZS4gIERvIG5vdCBtYWludGFpbiBhIGhhc2ggdGFibGUuICAoSXQgd2lsbCBiZSByZWdlbmVyYXRlZCBpZiB0aGlzIHJ1biBvZlxuICogZGVmbGF0ZSBzd2l0Y2hlcyBhd2F5IGZyb20gWl9STEUuKVxuICovXG5mdW5jdGlvbiBkZWZsYXRlX3JsZShzLCBmbHVzaCkge1xuICB2YXIgYmZsdXNoOyAgICAgICAgICAgIC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqL1xuICB2YXIgcHJldjsgICAgICAgICAgICAgIC8qIGJ5dGUgYXQgZGlzdGFuY2Ugb25lIHRvIG1hdGNoICovXG4gIHZhciBzY2FuLCBzdHJlbmQ7ICAgICAgLyogc2NhbiBnb2VzIHVwIHRvIHN0cmVuZCBmb3IgbGVuZ3RoIG9mIHJ1biAqL1xuXG4gIHZhciBfd2luID0gcy53aW5kb3c7XG5cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBsb25nZXN0IHJ1biwgcGx1cyBvbmUgZm9yIHRoZSB1bnJvbGxlZCBsb29wLlxuICAgICAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA8PSBNQVhfTUFUQ0gpIHtcbiAgICAgIGZpbGxfd2luZG93KHMpO1xuICAgICAgaWYgKHMubG9va2FoZWFkIDw9IE1BWF9NQVRDSCAmJiBmbHVzaCA9PT0gWl9OT19GTFVTSCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7IGJyZWFrOyB9IC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgfVxuXG4gICAgLyogU2VlIGhvdyBtYW55IHRpbWVzIHRoZSBwcmV2aW91cyBieXRlIHJlcGVhdHMgKi9cbiAgICBzLm1hdGNoX2xlbmd0aCA9IDA7XG4gICAgaWYgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCAmJiBzLnN0cnN0YXJ0ID4gMCkge1xuICAgICAgc2NhbiA9IHMuc3Ryc3RhcnQgLSAxO1xuICAgICAgcHJldiA9IF93aW5bc2Nhbl07XG4gICAgICBpZiAocHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0pIHtcbiAgICAgICAgc3RyZW5kID0gcy5zdHJzdGFydCArIE1BWF9NQVRDSDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIC8qanNoaW50IG5vZW1wdHk6ZmFsc2UqL1xuICAgICAgICB9IHdoaWxlIChwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXG4gICAgICAgICAgICAgICAgIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcbiAgICAgICAgICAgICAgICAgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJlxuICAgICAgICAgICAgICAgICBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXG4gICAgICAgICAgICAgICAgIHNjYW4gPCBzdHJlbmQpO1xuICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IE1BWF9NQVRDSCAtIChzdHJlbmQgLSBzY2FuKTtcbiAgICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoID4gcy5sb29rYWhlYWQpIHtcbiAgICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IHMubG9va2FoZWFkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvL0Fzc2VydChzY2FuIDw9IHMtPndpbmRvdysodUludCkocy0+d2luZG93X3NpemUtMSksIFwid2lsZCBzY2FuXCIpO1xuICAgIH1cblxuICAgIC8qIEVtaXQgbWF0Y2ggaWYgaGF2ZSBydW4gb2YgTUlOX01BVENIIG9yIGxvbmdlciwgZWxzZSBlbWl0IGxpdGVyYWwgKi9cbiAgICBpZiAocy5tYXRjaF9sZW5ndGggPj0gTUlOX01BVENIKSB7XG4gICAgICAvL2NoZWNrX21hdGNoKHMsIHMuc3Ryc3RhcnQsIHMuc3Ryc3RhcnQgLSAxLCBzLm1hdGNoX2xlbmd0aCk7XG5cbiAgICAgIC8qKiogX3RyX3RhbGx5X2Rpc3QocywgMSwgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gsIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAxLCBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCk7XG5cbiAgICAgIHMubG9va2FoZWFkIC09IHMubWF0Y2hfbGVuZ3RoO1xuICAgICAgcy5zdHJzdGFydCArPSBzLm1hdGNoX2xlbmd0aDtcbiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgLyogTm8gbWF0Y2gsIG91dHB1dCBhIGxpdGVyYWwgYnl0ZSAqL1xuICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnRdKSk7XG4gICAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydF0sIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7XG5cbiAgICAgIHMubG9va2FoZWFkLS07XG4gICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgfVxuICAgIGlmIChiZmx1c2gpIHtcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIC8qKiovXG4gICAgfVxuICB9XG4gIHMuaW5zZXJ0ID0gMDtcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG4gIGlmIChzLmxhc3RfbGl0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG4gIHJldHVybiBCU19CTE9DS19ET05FO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZvciBaX0hVRkZNQU5fT05MWSwgZG8gbm90IGxvb2sgZm9yIG1hdGNoZXMuICBEbyBub3QgbWFpbnRhaW4gYSBoYXNoIHRhYmxlLlxuICogKEl0IHdpbGwgYmUgcmVnZW5lcmF0ZWQgaWYgdGhpcyBydW4gb2YgZGVmbGF0ZSBzd2l0Y2hlcyBhd2F5IGZyb20gSHVmZm1hbi4pXG4gKi9cbmZ1bmN0aW9uIGRlZmxhdGVfaHVmZihzLCBmbHVzaCkge1xuICB2YXIgYmZsdXNoOyAgICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cblxuICBmb3IgKDs7KSB7XG4gICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgaGF2ZSBhIGxpdGVyYWwgdG8gd3JpdGUuICovXG4gICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgICBpZiAoZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrOyAgICAgIC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogT3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXG4gICAgcy5tYXRjaF9sZW5ndGggPSAwO1xuICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0XSkpO1xuICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xuICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7XG4gICAgcy5sb29rYWhlYWQtLTtcbiAgICBzLnN0cnN0YXJ0Kys7XG4gICAgaWYgKGJmbHVzaCkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cbiAgcy5pbnNlcnQgPSAwO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgdHJ1ZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcbiAgICB9XG4gICAgLyoqKi9cbiAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XG4gIH1cbiAgaWYgKHMubGFzdF9saXQpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgfVxuICAgIC8qKiovXG4gIH1cbiAgcmV0dXJuIEJTX0JMT0NLX0RPTkU7XG59XG5cbi8qIFZhbHVlcyBmb3IgbWF4X2xhenlfbWF0Y2gsIGdvb2RfbWF0Y2ggYW5kIG1heF9jaGFpbl9sZW5ndGgsIGRlcGVuZGluZyBvblxuICogdGhlIGRlc2lyZWQgcGFjayBsZXZlbCAoMC4uOSkuIFRoZSB2YWx1ZXMgZ2l2ZW4gYmVsb3cgaGF2ZSBiZWVuIHR1bmVkIHRvXG4gKiBleGNsdWRlIHdvcnN0IGNhc2UgcGVyZm9ybWFuY2UgZm9yIHBhdGhvbG9naWNhbCBmaWxlcy4gQmV0dGVyIHZhbHVlcyBtYXkgYmVcbiAqIGZvdW5kIGZvciBzcGVjaWZpYyBmaWxlcy5cbiAqL1xuZnVuY3Rpb24gQ29uZmlnKGdvb2RfbGVuZ3RoLCBtYXhfbGF6eSwgbmljZV9sZW5ndGgsIG1heF9jaGFpbiwgZnVuYykge1xuICB0aGlzLmdvb2RfbGVuZ3RoID0gZ29vZF9sZW5ndGg7XG4gIHRoaXMubWF4X2xhenkgPSBtYXhfbGF6eTtcbiAgdGhpcy5uaWNlX2xlbmd0aCA9IG5pY2VfbGVuZ3RoO1xuICB0aGlzLm1heF9jaGFpbiA9IG1heF9jaGFpbjtcbiAgdGhpcy5mdW5jID0gZnVuYztcbn1cblxudmFyIGNvbmZpZ3VyYXRpb25fdGFibGU7XG5cbmNvbmZpZ3VyYXRpb25fdGFibGUgPSBbXG4gIC8qICAgICAgZ29vZCBsYXp5IG5pY2UgY2hhaW4gKi9cbiAgbmV3IENvbmZpZygwLCAwLCAwLCAwLCBkZWZsYXRlX3N0b3JlZCksICAgICAgICAgIC8qIDAgc3RvcmUgb25seSAqL1xuICBuZXcgQ29uZmlnKDQsIDQsIDgsIDQsIGRlZmxhdGVfZmFzdCksICAgICAgICAgICAgLyogMSBtYXggc3BlZWQsIG5vIGxhenkgbWF0Y2hlcyAqL1xuICBuZXcgQ29uZmlnKDQsIDUsIDE2LCA4LCBkZWZsYXRlX2Zhc3QpLCAgICAgICAgICAgLyogMiAqL1xuICBuZXcgQ29uZmlnKDQsIDYsIDMyLCAzMiwgZGVmbGF0ZV9mYXN0KSwgICAgICAgICAgLyogMyAqL1xuXG4gIG5ldyBDb25maWcoNCwgNCwgMTYsIDE2LCBkZWZsYXRlX3Nsb3cpLCAgICAgICAgICAvKiA0IGxhenkgbWF0Y2hlcyAqL1xuICBuZXcgQ29uZmlnKDgsIDE2LCAzMiwgMzIsIGRlZmxhdGVfc2xvdyksICAgICAgICAgLyogNSAqL1xuICBuZXcgQ29uZmlnKDgsIDE2LCAxMjgsIDEyOCwgZGVmbGF0ZV9zbG93KSwgICAgICAgLyogNiAqL1xuICBuZXcgQ29uZmlnKDgsIDMyLCAxMjgsIDI1NiwgZGVmbGF0ZV9zbG93KSwgICAgICAgLyogNyAqL1xuICBuZXcgQ29uZmlnKDMyLCAxMjgsIDI1OCwgMTAyNCwgZGVmbGF0ZV9zbG93KSwgICAgLyogOCAqL1xuICBuZXcgQ29uZmlnKDMyLCAyNTgsIDI1OCwgNDA5NiwgZGVmbGF0ZV9zbG93KSAgICAgLyogOSBtYXggY29tcHJlc3Npb24gKi9cbl07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBJbml0aWFsaXplIHRoZSBcImxvbmdlc3QgbWF0Y2hcIiByb3V0aW5lcyBmb3IgYSBuZXcgemxpYiBzdHJlYW1cbiAqL1xuZnVuY3Rpb24gbG1faW5pdChzKSB7XG4gIHMud2luZG93X3NpemUgPSAyICogcy53X3NpemU7XG5cbiAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovXG4gIHplcm8ocy5oZWFkKTsgLy8gRmlsbCB3aXRoIE5JTCAoPSAwKTtcblxuICAvKiBTZXQgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzOlxuICAgKi9cbiAgcy5tYXhfbGF6eV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubWF4X2xhenk7XG4gIHMuZ29vZF9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0uZ29vZF9sZW5ndGg7XG4gIHMubmljZV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubmljZV9sZW5ndGg7XG4gIHMubWF4X2NoYWluX2xlbmd0aCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubWF4X2NoYWluO1xuXG4gIHMuc3Ryc3RhcnQgPSAwO1xuICBzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgcy5sb29rYWhlYWQgPSAwO1xuICBzLmluc2VydCA9IDA7XG4gIHMubWF0Y2hfbGVuZ3RoID0gcy5wcmV2X2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG4gIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcbiAgcy5pbnNfaCA9IDA7XG59XG5cblxuZnVuY3Rpb24gRGVmbGF0ZVN0YXRlKCkge1xuICB0aGlzLnN0cm0gPSBudWxsOyAgICAgICAgICAgIC8qIHBvaW50ZXIgYmFjayB0byB0aGlzIHpsaWIgc3RyZWFtICovXG4gIHRoaXMuc3RhdHVzID0gMDsgICAgICAgICAgICAvKiBhcyB0aGUgbmFtZSBpbXBsaWVzICovXG4gIHRoaXMucGVuZGluZ19idWYgPSBudWxsOyAgICAgIC8qIG91dHB1dCBzdGlsbCBwZW5kaW5nICovXG4gIHRoaXMucGVuZGluZ19idWZfc2l6ZSA9IDA7ICAvKiBzaXplIG9mIHBlbmRpbmdfYnVmICovXG4gIHRoaXMucGVuZGluZ19vdXQgPSAwOyAgICAgICAvKiBuZXh0IHBlbmRpbmcgYnl0ZSB0byBvdXRwdXQgdG8gdGhlIHN0cmVhbSAqL1xuICB0aGlzLnBlbmRpbmcgPSAwOyAgICAgICAgICAgLyogbmIgb2YgYnl0ZXMgaW4gdGhlIHBlbmRpbmcgYnVmZmVyICovXG4gIHRoaXMud3JhcCA9IDA7ICAgICAgICAgICAgICAvKiBiaXQgMCB0cnVlIGZvciB6bGliLCBiaXQgMSB0cnVlIGZvciBnemlwICovXG4gIHRoaXMuZ3poZWFkID0gbnVsbDsgICAgICAgICAvKiBnemlwIGhlYWRlciBpbmZvcm1hdGlvbiB0byB3cml0ZSAqL1xuICB0aGlzLmd6aW5kZXggPSAwOyAgICAgICAgICAgLyogd2hlcmUgaW4gZXh0cmEsIG5hbWUsIG9yIGNvbW1lbnQgKi9cbiAgdGhpcy5tZXRob2QgPSBaX0RFRkxBVEVEOyAvKiBjYW4gb25seSBiZSBERUZMQVRFRCAqL1xuICB0aGlzLmxhc3RfZmx1c2ggPSAtMTsgICAvKiB2YWx1ZSBvZiBmbHVzaCBwYXJhbSBmb3IgcHJldmlvdXMgZGVmbGF0ZSBjYWxsICovXG5cbiAgdGhpcy53X3NpemUgPSAwOyAgLyogTFo3NyB3aW5kb3cgc2l6ZSAoMzJLIGJ5IGRlZmF1bHQpICovXG4gIHRoaXMud19iaXRzID0gMDsgIC8qIGxvZzIod19zaXplKSAgKDguLjE2KSAqL1xuICB0aGlzLndfbWFzayA9IDA7ICAvKiB3X3NpemUgLSAxICovXG5cbiAgdGhpcy53aW5kb3cgPSBudWxsO1xuICAvKiBTbGlkaW5nIHdpbmRvdy4gSW5wdXQgYnl0ZXMgYXJlIHJlYWQgaW50byB0aGUgc2Vjb25kIGhhbGYgb2YgdGhlIHdpbmRvdyxcbiAgICogYW5kIG1vdmUgdG8gdGhlIGZpcnN0IGhhbGYgbGF0ZXIgdG8ga2VlcCBhIGRpY3Rpb25hcnkgb2YgYXQgbGVhc3Qgd1NpemVcbiAgICogYnl0ZXMuIFdpdGggdGhpcyBvcmdhbml6YXRpb24sIG1hdGNoZXMgYXJlIGxpbWl0ZWQgdG8gYSBkaXN0YW5jZSBvZlxuICAgKiB3U2l6ZS1NQVhfTUFUQ0ggYnl0ZXMsIGJ1dCB0aGlzIGVuc3VyZXMgdGhhdCBJTyBpcyBhbHdheXNcbiAgICogcGVyZm9ybWVkIHdpdGggYSBsZW5ndGggbXVsdGlwbGUgb2YgdGhlIGJsb2NrIHNpemUuXG4gICAqL1xuXG4gIHRoaXMud2luZG93X3NpemUgPSAwO1xuICAvKiBBY3R1YWwgc2l6ZSBvZiB3aW5kb3c6IDIqd1NpemUsIGV4Y2VwdCB3aGVuIHRoZSB1c2VyIGlucHV0IGJ1ZmZlclxuICAgKiBpcyBkaXJlY3RseSB1c2VkIGFzIHNsaWRpbmcgd2luZG93LlxuICAgKi9cblxuICB0aGlzLnByZXYgPSBudWxsO1xuICAvKiBMaW5rIHRvIG9sZGVyIHN0cmluZyB3aXRoIHNhbWUgaGFzaCBpbmRleC4gVG8gbGltaXQgdGhlIHNpemUgb2YgdGhpc1xuICAgKiBhcnJheSB0byA2NEssIHRoaXMgbGluayBpcyBtYWludGFpbmVkIG9ubHkgZm9yIHRoZSBsYXN0IDMySyBzdHJpbmdzLlxuICAgKiBBbiBpbmRleCBpbiB0aGlzIGFycmF5IGlzIHRodXMgYSB3aW5kb3cgaW5kZXggbW9kdWxvIDMySy5cbiAgICovXG5cbiAgdGhpcy5oZWFkID0gbnVsbDsgICAvKiBIZWFkcyBvZiB0aGUgaGFzaCBjaGFpbnMgb3IgTklMLiAqL1xuXG4gIHRoaXMuaW5zX2ggPSAwOyAgICAgICAvKiBoYXNoIGluZGV4IG9mIHN0cmluZyB0byBiZSBpbnNlcnRlZCAqL1xuICB0aGlzLmhhc2hfc2l6ZSA9IDA7ICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIGluIGhhc2ggdGFibGUgKi9cbiAgdGhpcy5oYXNoX2JpdHMgPSAwOyAgIC8qIGxvZzIoaGFzaF9zaXplKSAqL1xuICB0aGlzLmhhc2hfbWFzayA9IDA7ICAgLyogaGFzaF9zaXplLTEgKi9cblxuICB0aGlzLmhhc2hfc2hpZnQgPSAwO1xuICAvKiBOdW1iZXIgb2YgYml0cyBieSB3aGljaCBpbnNfaCBtdXN0IGJlIHNoaWZ0ZWQgYXQgZWFjaCBpbnB1dFxuICAgKiBzdGVwLiBJdCBtdXN0IGJlIHN1Y2ggdGhhdCBhZnRlciBNSU5fTUFUQ0ggc3RlcHMsIHRoZSBvbGRlc3RcbiAgICogYnl0ZSBubyBsb25nZXIgdGFrZXMgcGFydCBpbiB0aGUgaGFzaCBrZXksIHRoYXQgaXM6XG4gICAqICAgaGFzaF9zaGlmdCAqIE1JTl9NQVRDSCA+PSBoYXNoX2JpdHNcbiAgICovXG5cbiAgdGhpcy5ibG9ja19zdGFydCA9IDA7XG4gIC8qIFdpbmRvdyBwb3NpdGlvbiBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjdXJyZW50IG91dHB1dCBibG9jay4gR2V0c1xuICAgKiBuZWdhdGl2ZSB3aGVuIHRoZSB3aW5kb3cgaXMgbW92ZWQgYmFja3dhcmRzLlxuICAgKi9cblxuICB0aGlzLm1hdGNoX2xlbmd0aCA9IDA7ICAgICAgLyogbGVuZ3RoIG9mIGJlc3QgbWF0Y2ggKi9cbiAgdGhpcy5wcmV2X21hdGNoID0gMDsgICAgICAgIC8qIHByZXZpb3VzIG1hdGNoICovXG4gIHRoaXMubWF0Y2hfYXZhaWxhYmxlID0gMDsgICAvKiBzZXQgaWYgcHJldmlvdXMgbWF0Y2ggZXhpc3RzICovXG4gIHRoaXMuc3Ryc3RhcnQgPSAwOyAgICAgICAgICAvKiBzdGFydCBvZiBzdHJpbmcgdG8gaW5zZXJ0ICovXG4gIHRoaXMubWF0Y2hfc3RhcnQgPSAwOyAgICAgICAvKiBzdGFydCBvZiBtYXRjaGluZyBzdHJpbmcgKi9cbiAgdGhpcy5sb29rYWhlYWQgPSAwOyAgICAgICAgIC8qIG51bWJlciBvZiB2YWxpZCBieXRlcyBhaGVhZCBpbiB3aW5kb3cgKi9cblxuICB0aGlzLnByZXZfbGVuZ3RoID0gMDtcbiAgLyogTGVuZ3RoIG9mIHRoZSBiZXN0IG1hdGNoIGF0IHByZXZpb3VzIHN0ZXAuIE1hdGNoZXMgbm90IGdyZWF0ZXIgdGhhbiB0aGlzXG4gICAqIGFyZSBkaXNjYXJkZWQuIFRoaXMgaXMgdXNlZCBpbiB0aGUgbGF6eSBtYXRjaCBldmFsdWF0aW9uLlxuICAgKi9cblxuICB0aGlzLm1heF9jaGFpbl9sZW5ndGggPSAwO1xuICAvKiBUbyBzcGVlZCB1cCBkZWZsYXRpb24sIGhhc2ggY2hhaW5zIGFyZSBuZXZlciBzZWFyY2hlZCBiZXlvbmQgdGhpc1xuICAgKiBsZW5ndGguICBBIGhpZ2hlciBsaW1pdCBpbXByb3ZlcyBjb21wcmVzc2lvbiByYXRpbyBidXQgZGVncmFkZXMgdGhlXG4gICAqIHNwZWVkLlxuICAgKi9cblxuICB0aGlzLm1heF9sYXp5X21hdGNoID0gMDtcbiAgLyogQXR0ZW1wdCB0byBmaW5kIGEgYmV0dGVyIG1hdGNoIG9ubHkgd2hlbiB0aGUgY3VycmVudCBtYXRjaCBpcyBzdHJpY3RseVxuICAgKiBzbWFsbGVyIHRoYW4gdGhpcyB2YWx1ZS4gVGhpcyBtZWNoYW5pc20gaXMgdXNlZCBvbmx5IGZvciBjb21wcmVzc2lvblxuICAgKiBsZXZlbHMgPj0gNC5cbiAgICovXG4gIC8vIFRoYXQncyBhbGlhcyB0byBtYXhfbGF6eV9tYXRjaCwgZG9uJ3QgdXNlIGRpcmVjdGx5XG4gIC8vdGhpcy5tYXhfaW5zZXJ0X2xlbmd0aCA9IDA7XG4gIC8qIEluc2VydCBuZXcgc3RyaW5ncyBpbiB0aGUgaGFzaCB0YWJsZSBvbmx5IGlmIHRoZSBtYXRjaCBsZW5ndGggaXMgbm90XG4gICAqIGdyZWF0ZXIgdGhhbiB0aGlzIGxlbmd0aC4gVGhpcyBzYXZlcyB0aW1lIGJ1dCBkZWdyYWRlcyBjb21wcmVzc2lvbi5cbiAgICogbWF4X2luc2VydF9sZW5ndGggaXMgdXNlZCBvbmx5IGZvciBjb21wcmVzc2lvbiBsZXZlbHMgPD0gMy5cbiAgICovXG5cbiAgdGhpcy5sZXZlbCA9IDA7ICAgICAvKiBjb21wcmVzc2lvbiBsZXZlbCAoMS4uOSkgKi9cbiAgdGhpcy5zdHJhdGVneSA9IDA7ICAvKiBmYXZvciBvciBmb3JjZSBIdWZmbWFuIGNvZGluZyovXG5cbiAgdGhpcy5nb29kX21hdGNoID0gMDtcbiAgLyogVXNlIGEgZmFzdGVyIHNlYXJjaCB3aGVuIHRoZSBwcmV2aW91cyBtYXRjaCBpcyBsb25nZXIgdGhhbiB0aGlzICovXG5cbiAgdGhpcy5uaWNlX21hdGNoID0gMDsgLyogU3RvcCBzZWFyY2hpbmcgd2hlbiBjdXJyZW50IG1hdGNoIGV4Y2VlZHMgdGhpcyAqL1xuXG4gICAgICAgICAgICAgIC8qIHVzZWQgYnkgdHJlZXMuYzogKi9cblxuICAvKiBEaWRuJ3QgdXNlIGN0X2RhdGEgdHlwZWRlZiBiZWxvdyB0byBzdXBwcmVzcyBjb21waWxlciB3YXJuaW5nICovXG5cbiAgLy8gc3RydWN0IGN0X2RhdGFfcyBkeW5fbHRyZWVbSEVBUF9TSVpFXTsgICAvKiBsaXRlcmFsIGFuZCBsZW5ndGggdHJlZSAqL1xuICAvLyBzdHJ1Y3QgY3RfZGF0YV9zIGR5bl9kdHJlZVsyKkRfQ09ERVMrMV07IC8qIGRpc3RhbmNlIHRyZWUgKi9cbiAgLy8gc3RydWN0IGN0X2RhdGFfcyBibF90cmVlWzIqQkxfQ09ERVMrMV07ICAvKiBIdWZmbWFuIHRyZWUgZm9yIGJpdCBsZW5ndGhzICovXG5cbiAgLy8gVXNlIGZsYXQgYXJyYXkgb2YgRE9VQkxFIHNpemUsIHdpdGggaW50ZXJsZWF2ZWQgZmF0YSxcbiAgLy8gYmVjYXVzZSBKUyBkb2VzIG5vdCBzdXBwb3J0IGVmZmVjdGl2ZVxuICB0aGlzLmR5bl9sdHJlZSAgPSBuZXcgdXRpbHMuQnVmMTYoSEVBUF9TSVpFICogMik7XG4gIHRoaXMuZHluX2R0cmVlICA9IG5ldyB1dGlscy5CdWYxNigoMiAqIERfQ09ERVMgKyAxKSAqIDIpO1xuICB0aGlzLmJsX3RyZWUgICAgPSBuZXcgdXRpbHMuQnVmMTYoKDIgKiBCTF9DT0RFUyArIDEpICogMik7XG4gIHplcm8odGhpcy5keW5fbHRyZWUpO1xuICB6ZXJvKHRoaXMuZHluX2R0cmVlKTtcbiAgemVybyh0aGlzLmJsX3RyZWUpO1xuXG4gIHRoaXMubF9kZXNjICAgPSBudWxsOyAgICAgICAgIC8qIGRlc2MuIGZvciBsaXRlcmFsIHRyZWUgKi9cbiAgdGhpcy5kX2Rlc2MgICA9IG51bGw7ICAgICAgICAgLyogZGVzYy4gZm9yIGRpc3RhbmNlIHRyZWUgKi9cbiAgdGhpcy5ibF9kZXNjICA9IG51bGw7ICAgICAgICAgLyogZGVzYy4gZm9yIGJpdCBsZW5ndGggdHJlZSAqL1xuXG4gIC8vdXNoIGJsX2NvdW50W01BWF9CSVRTKzFdO1xuICB0aGlzLmJsX2NvdW50ID0gbmV3IHV0aWxzLkJ1ZjE2KE1BWF9CSVRTICsgMSk7XG4gIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggZm9yIGFuIG9wdGltYWwgdHJlZSAqL1xuXG4gIC8vaW50IGhlYXBbMipMX0NPREVTKzFdOyAgICAgIC8qIGhlYXAgdXNlZCB0byBidWlsZCB0aGUgSHVmZm1hbiB0cmVlcyAqL1xuICB0aGlzLmhlYXAgPSBuZXcgdXRpbHMuQnVmMTYoMiAqIExfQ09ERVMgKyAxKTsgIC8qIGhlYXAgdXNlZCB0byBidWlsZCB0aGUgSHVmZm1hbiB0cmVlcyAqL1xuICB6ZXJvKHRoaXMuaGVhcCk7XG5cbiAgdGhpcy5oZWFwX2xlbiA9IDA7ICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBoZWFwICovXG4gIHRoaXMuaGVhcF9tYXggPSAwOyAgICAgICAgICAgICAgIC8qIGVsZW1lbnQgb2YgbGFyZ2VzdCBmcmVxdWVuY3kgKi9cbiAgLyogVGhlIHNvbnMgb2YgaGVhcFtuXSBhcmUgaGVhcFsyKm5dIGFuZCBoZWFwWzIqbisxXS4gaGVhcFswXSBpcyBub3QgdXNlZC5cbiAgICogVGhlIHNhbWUgaGVhcCBhcnJheSBpcyB1c2VkIHRvIGJ1aWxkIGFsbCB0cmVlcy5cbiAgICovXG5cbiAgdGhpcy5kZXB0aCA9IG5ldyB1dGlscy5CdWYxNigyICogTF9DT0RFUyArIDEpOyAvL3VjaCBkZXB0aFsyKkxfQ09ERVMrMV07XG4gIHplcm8odGhpcy5kZXB0aCk7XG4gIC8qIERlcHRoIG9mIGVhY2ggc3VidHJlZSB1c2VkIGFzIHRpZSBicmVha2VyIGZvciB0cmVlcyBvZiBlcXVhbCBmcmVxdWVuY3lcbiAgICovXG5cbiAgdGhpcy5sX2J1ZiA9IDA7ICAgICAgICAgIC8qIGJ1ZmZlciBpbmRleCBmb3IgbGl0ZXJhbHMgb3IgbGVuZ3RocyAqL1xuXG4gIHRoaXMubGl0X2J1ZnNpemUgPSAwO1xuICAvKiBTaXplIG9mIG1hdGNoIGJ1ZmZlciBmb3IgbGl0ZXJhbHMvbGVuZ3Rocy4gIFRoZXJlIGFyZSA0IHJlYXNvbnMgZm9yXG4gICAqIGxpbWl0aW5nIGxpdF9idWZzaXplIHRvIDY0SzpcbiAgICogICAtIGZyZXF1ZW5jaWVzIGNhbiBiZSBrZXB0IGluIDE2IGJpdCBjb3VudGVyc1xuICAgKiAgIC0gaWYgY29tcHJlc3Npb24gaXMgbm90IHN1Y2Nlc3NmdWwgZm9yIHRoZSBmaXJzdCBibG9jaywgYWxsIGlucHV0XG4gICAqICAgICBkYXRhIGlzIHN0aWxsIGluIHRoZSB3aW5kb3cgc28gd2UgY2FuIHN0aWxsIGVtaXQgYSBzdG9yZWQgYmxvY2sgZXZlblxuICAgKiAgICAgd2hlbiBpbnB1dCBjb21lcyBmcm9tIHN0YW5kYXJkIGlucHV0LiAgKFRoaXMgY2FuIGFsc28gYmUgZG9uZSBmb3JcbiAgICogICAgIGFsbCBibG9ja3MgaWYgbGl0X2J1ZnNpemUgaXMgbm90IGdyZWF0ZXIgdGhhbiAzMksuKVxuICAgKiAgIC0gaWYgY29tcHJlc3Npb24gaXMgbm90IHN1Y2Nlc3NmdWwgZm9yIGEgZmlsZSBzbWFsbGVyIHRoYW4gNjRLLCB3ZSBjYW5cbiAgICogICAgIGV2ZW4gZW1pdCBhIHN0b3JlZCBmaWxlIGluc3RlYWQgb2YgYSBzdG9yZWQgYmxvY2sgKHNhdmluZyA1IGJ5dGVzKS5cbiAgICogICAgIFRoaXMgaXMgYXBwbGljYWJsZSBvbmx5IGZvciB6aXAgKG5vdCBnemlwIG9yIHpsaWIpLlxuICAgKiAgIC0gY3JlYXRpbmcgbmV3IEh1ZmZtYW4gdHJlZXMgbGVzcyBmcmVxdWVudGx5IG1heSBub3QgcHJvdmlkZSBmYXN0XG4gICAqICAgICBhZGFwdGF0aW9uIHRvIGNoYW5nZXMgaW4gdGhlIGlucHV0IGRhdGEgc3RhdGlzdGljcy4gKFRha2UgZm9yXG4gICAqICAgICBleGFtcGxlIGEgYmluYXJ5IGZpbGUgd2l0aCBwb29ybHkgY29tcHJlc3NpYmxlIGNvZGUgZm9sbG93ZWQgYnlcbiAgICogICAgIGEgaGlnaGx5IGNvbXByZXNzaWJsZSBzdHJpbmcgdGFibGUuKSBTbWFsbGVyIGJ1ZmZlciBzaXplcyBnaXZlXG4gICAqICAgICBmYXN0IGFkYXB0YXRpb24gYnV0IGhhdmUgb2YgY291cnNlIHRoZSBvdmVyaGVhZCBvZiB0cmFuc21pdHRpbmdcbiAgICogICAgIHRyZWVzIG1vcmUgZnJlcXVlbnRseS5cbiAgICogICAtIEkgY2FuJ3QgY291bnQgYWJvdmUgNFxuICAgKi9cblxuICB0aGlzLmxhc3RfbGl0ID0gMDsgICAgICAvKiBydW5uaW5nIGluZGV4IGluIGxfYnVmICovXG5cbiAgdGhpcy5kX2J1ZiA9IDA7XG4gIC8qIEJ1ZmZlciBpbmRleCBmb3IgZGlzdGFuY2VzLiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgZF9idWYgYW5kIGxfYnVmIGhhdmVcbiAgICogdGhlIHNhbWUgbnVtYmVyIG9mIGVsZW1lbnRzLiBUbyB1c2UgZGlmZmVyZW50IGxlbmd0aHMsIGFuIGV4dHJhIGZsYWdcbiAgICogYXJyYXkgd291bGQgYmUgbmVjZXNzYXJ5LlxuICAgKi9cblxuICB0aGlzLm9wdF9sZW4gPSAwOyAgICAgICAvKiBiaXQgbGVuZ3RoIG9mIGN1cnJlbnQgYmxvY2sgd2l0aCBvcHRpbWFsIHRyZWVzICovXG4gIHRoaXMuc3RhdGljX2xlbiA9IDA7ICAgIC8qIGJpdCBsZW5ndGggb2YgY3VycmVudCBibG9jayB3aXRoIHN0YXRpYyB0cmVlcyAqL1xuICB0aGlzLm1hdGNoZXMgPSAwOyAgICAgICAvKiBudW1iZXIgb2Ygc3RyaW5nIG1hdGNoZXMgaW4gY3VycmVudCBibG9jayAqL1xuICB0aGlzLmluc2VydCA9IDA7ICAgICAgICAvKiBieXRlcyBhdCBlbmQgb2Ygd2luZG93IGxlZnQgdG8gaW5zZXJ0ICovXG5cblxuICB0aGlzLmJpX2J1ZiA9IDA7XG4gIC8qIE91dHB1dCBidWZmZXIuIGJpdHMgYXJlIGluc2VydGVkIHN0YXJ0aW5nIGF0IHRoZSBib3R0b20gKGxlYXN0XG4gICAqIHNpZ25pZmljYW50IGJpdHMpLlxuICAgKi9cbiAgdGhpcy5iaV92YWxpZCA9IDA7XG4gIC8qIE51bWJlciBvZiB2YWxpZCBiaXRzIGluIGJpX2J1Zi4gIEFsbCBiaXRzIGFib3ZlIHRoZSBsYXN0IHZhbGlkIGJpdFxuICAgKiBhcmUgYWx3YXlzIHplcm8uXG4gICAqL1xuXG4gIC8vIFVzZWQgZm9yIHdpbmRvdyBtZW1vcnkgaW5pdC4gV2Ugc2FmZWx5IGlnbm9yZSBpdCBmb3IgSlMuIFRoYXQgbWFrZXNcbiAgLy8gc2Vuc2Ugb25seSBmb3IgcG9pbnRlcnMgYW5kIG1lbW9yeSBjaGVjayB0b29scy5cbiAgLy90aGlzLmhpZ2hfd2F0ZXIgPSAwO1xuICAvKiBIaWdoIHdhdGVyIG1hcmsgb2Zmc2V0IGluIHdpbmRvdyBmb3IgaW5pdGlhbGl6ZWQgYnl0ZXMgLS0gYnl0ZXMgYWJvdmVcbiAgICogdGhpcyBhcmUgc2V0IHRvIHplcm8gaW4gb3JkZXIgdG8gYXZvaWQgbWVtb3J5IGNoZWNrIHdhcm5pbmdzIHdoZW5cbiAgICogbG9uZ2VzdCBtYXRjaCByb3V0aW5lcyBhY2Nlc3MgYnl0ZXMgcGFzdCB0aGUgaW5wdXQuICBUaGlzIGlzIHRoZW5cbiAgICogdXBkYXRlZCB0byB0aGUgbmV3IGhpZ2ggd2F0ZXIgbWFyay5cbiAgICovXG59XG5cblxuZnVuY3Rpb24gZGVmbGF0ZVJlc2V0S2VlcChzdHJtKSB7XG4gIHZhciBzO1xuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkge1xuICAgIHJldHVybiBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IpO1xuICB9XG5cbiAgc3RybS50b3RhbF9pbiA9IHN0cm0udG90YWxfb3V0ID0gMDtcbiAgc3RybS5kYXRhX3R5cGUgPSBaX1VOS05PV047XG5cbiAgcyA9IHN0cm0uc3RhdGU7XG4gIHMucGVuZGluZyA9IDA7XG4gIHMucGVuZGluZ19vdXQgPSAwO1xuXG4gIGlmIChzLndyYXAgPCAwKSB7XG4gICAgcy53cmFwID0gLXMud3JhcDtcbiAgICAvKiB3YXMgbWFkZSBuZWdhdGl2ZSBieSBkZWZsYXRlKC4uLiwgWl9GSU5JU0gpOyAqL1xuICB9XG4gIHMuc3RhdHVzID0gKHMud3JhcCA/IElOSVRfU1RBVEUgOiBCVVNZX1NUQVRFKTtcbiAgc3RybS5hZGxlciA9IChzLndyYXAgPT09IDIpID9cbiAgICAwICAvLyBjcmMzMigwLCBaX05VTEwsIDApXG4gIDpcbiAgICAxOyAvLyBhZGxlcjMyKDAsIFpfTlVMTCwgMClcbiAgcy5sYXN0X2ZsdXNoID0gWl9OT19GTFVTSDtcbiAgdHJlZXMuX3RyX2luaXQocyk7XG4gIHJldHVybiBaX09LO1xufVxuXG5cbmZ1bmN0aW9uIGRlZmxhdGVSZXNldChzdHJtKSB7XG4gIHZhciByZXQgPSBkZWZsYXRlUmVzZXRLZWVwKHN0cm0pO1xuICBpZiAocmV0ID09PSBaX09LKSB7XG4gICAgbG1faW5pdChzdHJtLnN0YXRlKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5cbmZ1bmN0aW9uIGRlZmxhdGVTZXRIZWFkZXIoc3RybSwgaGVhZCkge1xuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIGlmIChzdHJtLnN0YXRlLndyYXAgIT09IDIpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIHN0cm0uc3RhdGUuZ3poZWFkID0gaGVhZDtcbiAgcmV0dXJuIFpfT0s7XG59XG5cblxuZnVuY3Rpb24gZGVmbGF0ZUluaXQyKHN0cm0sIGxldmVsLCBtZXRob2QsIHdpbmRvd0JpdHMsIG1lbUxldmVsLCBzdHJhdGVneSkge1xuICBpZiAoIXN0cm0pIHsgLy8gPT09IFpfTlVMTFxuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuICB2YXIgd3JhcCA9IDE7XG5cbiAgaWYgKGxldmVsID09PSBaX0RFRkFVTFRfQ09NUFJFU1NJT04pIHtcbiAgICBsZXZlbCA9IDY7XG4gIH1cblxuICBpZiAod2luZG93Qml0cyA8IDApIHsgLyogc3VwcHJlc3MgemxpYiB3cmFwcGVyICovXG4gICAgd3JhcCA9IDA7XG4gICAgd2luZG93Qml0cyA9IC13aW5kb3dCaXRzO1xuICB9XG5cbiAgZWxzZSBpZiAod2luZG93Qml0cyA+IDE1KSB7XG4gICAgd3JhcCA9IDI7ICAgICAgICAgICAvKiB3cml0ZSBnemlwIHdyYXBwZXIgaW5zdGVhZCAqL1xuICAgIHdpbmRvd0JpdHMgLT0gMTY7XG4gIH1cblxuXG4gIGlmIChtZW1MZXZlbCA8IDEgfHwgbWVtTGV2ZWwgPiBNQVhfTUVNX0xFVkVMIHx8IG1ldGhvZCAhPT0gWl9ERUZMQVRFRCB8fFxuICAgIHdpbmRvd0JpdHMgPCA4IHx8IHdpbmRvd0JpdHMgPiAxNSB8fCBsZXZlbCA8IDAgfHwgbGV2ZWwgPiA5IHx8XG4gICAgc3RyYXRlZ3kgPCAwIHx8IHN0cmF0ZWd5ID4gWl9GSVhFRCkge1xuICAgIHJldHVybiBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IpO1xuICB9XG5cblxuICBpZiAod2luZG93Qml0cyA9PT0gOCkge1xuICAgIHdpbmRvd0JpdHMgPSA5O1xuICB9XG4gIC8qIHVudGlsIDI1Ni1ieXRlIHdpbmRvdyBidWcgZml4ZWQgKi9cblxuICB2YXIgcyA9IG5ldyBEZWZsYXRlU3RhdGUoKTtcblxuICBzdHJtLnN0YXRlID0gcztcbiAgcy5zdHJtID0gc3RybTtcblxuICBzLndyYXAgPSB3cmFwO1xuICBzLmd6aGVhZCA9IG51bGw7XG4gIHMud19iaXRzID0gd2luZG93Qml0cztcbiAgcy53X3NpemUgPSAxIDw8IHMud19iaXRzO1xuICBzLndfbWFzayA9IHMud19zaXplIC0gMTtcblxuICBzLmhhc2hfYml0cyA9IG1lbUxldmVsICsgNztcbiAgcy5oYXNoX3NpemUgPSAxIDw8IHMuaGFzaF9iaXRzO1xuICBzLmhhc2hfbWFzayA9IHMuaGFzaF9zaXplIC0gMTtcbiAgcy5oYXNoX3NoaWZ0ID0gfn4oKHMuaGFzaF9iaXRzICsgTUlOX01BVENIIC0gMSkgLyBNSU5fTUFUQ0gpO1xuXG4gIHMud2luZG93ID0gbmV3IHV0aWxzLkJ1Zjgocy53X3NpemUgKiAyKTtcbiAgcy5oZWFkID0gbmV3IHV0aWxzLkJ1ZjE2KHMuaGFzaF9zaXplKTtcbiAgcy5wcmV2ID0gbmV3IHV0aWxzLkJ1ZjE2KHMud19zaXplKTtcblxuICAvLyBEb24ndCBuZWVkIG1lbSBpbml0IG1hZ2ljIGZvciBKUy5cbiAgLy9zLmhpZ2hfd2F0ZXIgPSAwOyAgLyogbm90aGluZyB3cml0dGVuIHRvIHMtPndpbmRvdyB5ZXQgKi9cblxuICBzLmxpdF9idWZzaXplID0gMSA8PCAobWVtTGV2ZWwgKyA2KTsgLyogMTZLIGVsZW1lbnRzIGJ5IGRlZmF1bHQgKi9cblxuICBzLnBlbmRpbmdfYnVmX3NpemUgPSBzLmxpdF9idWZzaXplICogNDtcblxuICAvL292ZXJsYXkgPSAodXNoZiAqKSBaQUxMT0Moc3RybSwgcy0+bGl0X2J1ZnNpemUsIHNpemVvZih1c2gpKzIpO1xuICAvL3MtPnBlbmRpbmdfYnVmID0gKHVjaGYgKikgb3ZlcmxheTtcbiAgcy5wZW5kaW5nX2J1ZiA9IG5ldyB1dGlscy5CdWY4KHMucGVuZGluZ19idWZfc2l6ZSk7XG5cbiAgLy8gSXQgaXMgb2Zmc2V0IGZyb20gYHMucGVuZGluZ19idWZgIChzaXplIGlzIGBzLmxpdF9idWZzaXplICogMmApXG4gIC8vcy0+ZF9idWYgPSBvdmVybGF5ICsgcy0+bGl0X2J1ZnNpemUvc2l6ZW9mKHVzaCk7XG4gIHMuZF9idWYgPSAxICogcy5saXRfYnVmc2l6ZTtcblxuICAvL3MtPmxfYnVmID0gcy0+cGVuZGluZ19idWYgKyAoMStzaXplb2YodXNoKSkqcy0+bGl0X2J1ZnNpemU7XG4gIHMubF9idWYgPSAoMSArIDIpICogcy5saXRfYnVmc2l6ZTtcblxuICBzLmxldmVsID0gbGV2ZWw7XG4gIHMuc3RyYXRlZ3kgPSBzdHJhdGVneTtcbiAgcy5tZXRob2QgPSBtZXRob2Q7XG5cbiAgcmV0dXJuIGRlZmxhdGVSZXNldChzdHJtKTtcbn1cblxuZnVuY3Rpb24gZGVmbGF0ZUluaXQoc3RybSwgbGV2ZWwpIHtcbiAgcmV0dXJuIGRlZmxhdGVJbml0MihzdHJtLCBsZXZlbCwgWl9ERUZMQVRFRCwgTUFYX1dCSVRTLCBERUZfTUVNX0xFVkVMLCBaX0RFRkFVTFRfU1RSQVRFR1kpO1xufVxuXG5cbmZ1bmN0aW9uIGRlZmxhdGUoc3RybSwgZmx1c2gpIHtcbiAgdmFyIG9sZF9mbHVzaCwgcztcbiAgdmFyIGJlZywgdmFsOyAvLyBmb3IgZ3ppcCBoZWFkZXIgd3JpdGUgb25seVxuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSB8fFxuICAgIGZsdXNoID4gWl9CTE9DSyB8fCBmbHVzaCA8IDApIHtcbiAgICByZXR1cm4gc3RybSA/IGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUikgOiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIHMgPSBzdHJtLnN0YXRlO1xuXG4gIGlmICghc3RybS5vdXRwdXQgfHxcbiAgICAgICghc3RybS5pbnB1dCAmJiBzdHJtLmF2YWlsX2luICE9PSAwKSB8fFxuICAgICAgKHMuc3RhdHVzID09PSBGSU5JU0hfU1RBVEUgJiYgZmx1c2ggIT09IFpfRklOSVNIKSkge1xuICAgIHJldHVybiBlcnIoc3RybSwgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSA/IFpfQlVGX0VSUk9SIDogWl9TVFJFQU1fRVJST1IpO1xuICB9XG5cbiAgcy5zdHJtID0gc3RybTsgLyoganVzdCBpbiBjYXNlICovXG4gIG9sZF9mbHVzaCA9IHMubGFzdF9mbHVzaDtcbiAgcy5sYXN0X2ZsdXNoID0gZmx1c2g7XG5cbiAgLyogV3JpdGUgdGhlIGhlYWRlciAqL1xuICBpZiAocy5zdGF0dXMgPT09IElOSVRfU1RBVEUpIHtcblxuICAgIGlmIChzLndyYXAgPT09IDIpIHsgLy8gR1pJUCBoZWFkZXJcbiAgICAgIHN0cm0uYWRsZXIgPSAwOyAgLy9jcmMzMigwTCwgWl9OVUxMLCAwKTtcbiAgICAgIHB1dF9ieXRlKHMsIDMxKTtcbiAgICAgIHB1dF9ieXRlKHMsIDEzOSk7XG4gICAgICBwdXRfYnl0ZShzLCA4KTtcbiAgICAgIGlmICghcy5nemhlYWQpIHsgLy8gcy0+Z3poZWFkID09IFpfTlVMTFxuICAgICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xuICAgICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICAgIHB1dF9ieXRlKHMsIHMubGV2ZWwgPT09IDkgPyAyIDpcbiAgICAgICAgICAgICAgICAgICAgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIgP1xuICAgICAgICAgICAgICAgICAgICAgNCA6IDApKTtcbiAgICAgICAgcHV0X2J5dGUocywgT1NfQ09ERSk7XG4gICAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGV4dCA/IDEgOiAwKSArXG4gICAgICAgICAgICAgICAgICAgIChzLmd6aGVhZC5oY3JjID8gMiA6IDApICtcbiAgICAgICAgICAgICAgICAgICAgKCFzLmd6aGVhZC5leHRyYSA/IDAgOiA0KSArXG4gICAgICAgICAgICAgICAgICAgICghcy5nemhlYWQubmFtZSA/IDAgOiA4KSArXG4gICAgICAgICAgICAgICAgICAgICghcy5nemhlYWQuY29tbWVudCA/IDAgOiAxNilcbiAgICAgICAgKTtcbiAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQudGltZSAmIDB4ZmYpO1xuICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGltZSA+PiA4KSAmIDB4ZmYpO1xuICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGltZSA+PiAxNikgJiAweGZmKTtcbiAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRpbWUgPj4gMjQpICYgMHhmZik7XG4gICAgICAgIHB1dF9ieXRlKHMsIHMubGV2ZWwgPT09IDkgPyAyIDpcbiAgICAgICAgICAgICAgICAgICAgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIgP1xuICAgICAgICAgICAgICAgICAgICAgNCA6IDApKTtcbiAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQub3MgJiAweGZmKTtcbiAgICAgICAgaWYgKHMuZ3poZWFkLmV4dHJhICYmIHMuZ3poZWFkLmV4dHJhLmxlbmd0aCkge1xuICAgICAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLmV4dHJhLmxlbmd0aCAmIDB4ZmYpO1xuICAgICAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC5leHRyYS5sZW5ndGggPj4gOCkgJiAweGZmKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocy5nemhlYWQuaGNyYykge1xuICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcsIDApO1xuICAgICAgICB9XG4gICAgICAgIHMuZ3ppbmRleCA9IDA7XG4gICAgICAgIHMuc3RhdHVzID0gRVhUUkFfU1RBVEU7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgLy8gREVGTEFURSBoZWFkZXJcbiAgICB7XG4gICAgICB2YXIgaGVhZGVyID0gKFpfREVGTEFURUQgKyAoKHMud19iaXRzIC0gOCkgPDwgNCkpIDw8IDg7XG4gICAgICB2YXIgbGV2ZWxfZmxhZ3MgPSAtMTtcblxuICAgICAgaWYgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIpIHtcbiAgICAgICAgbGV2ZWxfZmxhZ3MgPSAwO1xuICAgICAgfSBlbHNlIGlmIChzLmxldmVsIDwgNikge1xuICAgICAgICBsZXZlbF9mbGFncyA9IDE7XG4gICAgICB9IGVsc2UgaWYgKHMubGV2ZWwgPT09IDYpIHtcbiAgICAgICAgbGV2ZWxfZmxhZ3MgPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV2ZWxfZmxhZ3MgPSAzO1xuICAgICAgfVxuICAgICAgaGVhZGVyIHw9IChsZXZlbF9mbGFncyA8PCA2KTtcbiAgICAgIGlmIChzLnN0cnN0YXJ0ICE9PSAwKSB7IGhlYWRlciB8PSBQUkVTRVRfRElDVDsgfVxuICAgICAgaGVhZGVyICs9IDMxIC0gKGhlYWRlciAlIDMxKTtcblxuICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xuICAgICAgcHV0U2hvcnRNU0IocywgaGVhZGVyKTtcblxuICAgICAgLyogU2F2ZSB0aGUgYWRsZXIzMiBvZiB0aGUgcHJlc2V0IGRpY3Rpb25hcnk6ICovXG4gICAgICBpZiAocy5zdHJzdGFydCAhPT0gMCkge1xuICAgICAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyID4+PiAxNik7XG4gICAgICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgJiAweGZmZmYpO1xuICAgICAgfVxuICAgICAgc3RybS5hZGxlciA9IDE7IC8vIGFkbGVyMzIoMEwsIFpfTlVMTCwgMCk7XG4gICAgfVxuICB9XG5cbi8vI2lmZGVmIEdaSVBcbiAgaWYgKHMuc3RhdHVzID09PSBFWFRSQV9TVEFURSkge1xuICAgIGlmIChzLmd6aGVhZC5leHRyYS8qICE9IFpfTlVMTCovKSB7XG4gICAgICBiZWcgPSBzLnBlbmRpbmc7ICAvKiBzdGFydCBvZiBieXRlcyB0byB1cGRhdGUgY3JjICovXG5cbiAgICAgIHdoaWxlIChzLmd6aW5kZXggPCAocy5nemhlYWQuZXh0cmEubGVuZ3RoICYgMHhmZmZmKSkge1xuICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICAgICAgYmVnID0gcy5wZW5kaW5nO1xuICAgICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLmV4dHJhW3MuZ3ppbmRleF0gJiAweGZmKTtcbiAgICAgICAgcy5nemluZGV4Kys7XG4gICAgICB9XG4gICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgIH1cbiAgICAgIGlmIChzLmd6aW5kZXggPT09IHMuZ3poZWFkLmV4dHJhLmxlbmd0aCkge1xuICAgICAgICBzLmd6aW5kZXggPSAwO1xuICAgICAgICBzLnN0YXR1cyA9IE5BTUVfU1RBVEU7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcy5zdGF0dXMgPSBOQU1FX1NUQVRFO1xuICAgIH1cbiAgfVxuICBpZiAocy5zdGF0dXMgPT09IE5BTUVfU1RBVEUpIHtcbiAgICBpZiAocy5nemhlYWQubmFtZS8qICE9IFpfTlVMTCovKSB7XG4gICAgICBiZWcgPSBzLnBlbmRpbmc7ICAvKiBzdGFydCBvZiBieXRlcyB0byB1cGRhdGUgY3JjICovXG4gICAgICAvL2ludCB2YWw7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgICAgIGJlZyA9IHMucGVuZGluZztcbiAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICAgIHZhbCA9IDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSlMgc3BlY2lmaWM6IGxpdHRsZSBtYWdpYyB0byBhZGQgemVybyB0ZXJtaW5hdG9yIHRvIGVuZCBvZiBzdHJpbmdcbiAgICAgICAgaWYgKHMuZ3ppbmRleCA8IHMuZ3poZWFkLm5hbWUubGVuZ3RoKSB7XG4gICAgICAgICAgdmFsID0gcy5nemhlYWQubmFtZS5jaGFyQ29kZUF0KHMuZ3ppbmRleCsrKSAmIDB4ZmY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsID0gMDtcbiAgICAgICAgfVxuICAgICAgICBwdXRfYnl0ZShzLCB2YWwpO1xuICAgICAgfSB3aGlsZSAodmFsICE9PSAwKTtcblxuICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICB9XG4gICAgICBpZiAodmFsID09PSAwKSB7XG4gICAgICAgIHMuZ3ppbmRleCA9IDA7XG4gICAgICAgIHMuc3RhdHVzID0gQ09NTUVOVF9TVEFURTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzLnN0YXR1cyA9IENPTU1FTlRfU1RBVEU7XG4gICAgfVxuICB9XG4gIGlmIChzLnN0YXR1cyA9PT0gQ09NTUVOVF9TVEFURSkge1xuICAgIGlmIChzLmd6aGVhZC5jb21tZW50LyogIT0gWl9OVUxMKi8pIHtcbiAgICAgIGJlZyA9IHMucGVuZGluZzsgIC8qIHN0YXJ0IG9mIGJ5dGVzIHRvIHVwZGF0ZSBjcmMgKi9cbiAgICAgIC8vaW50IHZhbDtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICAgICAgYmVnID0gcy5wZW5kaW5nO1xuICAgICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICAgICAgdmFsID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBKUyBzcGVjaWZpYzogbGl0dGxlIG1hZ2ljIHRvIGFkZCB6ZXJvIHRlcm1pbmF0b3IgdG8gZW5kIG9mIHN0cmluZ1xuICAgICAgICBpZiAocy5nemluZGV4IDwgcy5nemhlYWQuY29tbWVudC5sZW5ndGgpIHtcbiAgICAgICAgICB2YWwgPSBzLmd6aGVhZC5jb21tZW50LmNoYXJDb2RlQXQocy5nemluZGV4KyspICYgMHhmZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWwgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHB1dF9ieXRlKHMsIHZhbCk7XG4gICAgICB9IHdoaWxlICh2YWwgIT09IDApO1xuXG4gICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWwgPT09IDApIHtcbiAgICAgICAgcy5zdGF0dXMgPSBIQ1JDX1NUQVRFO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHMuc3RhdHVzID0gSENSQ19TVEFURTtcbiAgICB9XG4gIH1cbiAgaWYgKHMuc3RhdHVzID09PSBIQ1JDX1NUQVRFKSB7XG4gICAgaWYgKHMuZ3poZWFkLmhjcmMpIHtcbiAgICAgIGlmIChzLnBlbmRpbmcgKyAyID4gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICB9XG4gICAgICBpZiAocy5wZW5kaW5nICsgMiA8PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgcHV0X2J5dGUocywgc3RybS5hZGxlciAmIDB4ZmYpO1xuICAgICAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiA4KSAmIDB4ZmYpO1xuICAgICAgICBzdHJtLmFkbGVyID0gMDsgLy9jcmMzMigwTCwgWl9OVUxMLCAwKTtcbiAgICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcbiAgICB9XG4gIH1cbi8vI2VuZGlmXG5cbiAgLyogRmx1c2ggYXMgbXVjaCBwZW5kaW5nIG91dHB1dCBhcyBwb3NzaWJsZSAqL1xuICBpZiAocy5wZW5kaW5nICE9PSAwKSB7XG4gICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIC8qIFNpbmNlIGF2YWlsX291dCBpcyAwLCBkZWZsYXRlIHdpbGwgYmUgY2FsbGVkIGFnYWluIHdpdGhcbiAgICAgICAqIG1vcmUgb3V0cHV0IHNwYWNlLCBidXQgcG9zc2libHkgd2l0aCBib3RoIHBlbmRpbmcgYW5kXG4gICAgICAgKiBhdmFpbF9pbiBlcXVhbCB0byB6ZXJvLiBUaGVyZSB3b24ndCBiZSBhbnl0aGluZyB0byBkbyxcbiAgICAgICAqIGJ1dCB0aGlzIGlzIG5vdCBhbiBlcnJvciBzaXR1YXRpb24gc28gbWFrZSBzdXJlIHdlXG4gICAgICAgKiByZXR1cm4gT0sgaW5zdGVhZCBvZiBCVUZfRVJST1IgYXQgbmV4dCBjYWxsIG9mIGRlZmxhdGU6XG4gICAgICAgKi9cbiAgICAgIHMubGFzdF9mbHVzaCA9IC0xO1xuICAgICAgcmV0dXJuIFpfT0s7XG4gICAgfVxuXG4gICAgLyogTWFrZSBzdXJlIHRoZXJlIGlzIHNvbWV0aGluZyB0byBkbyBhbmQgYXZvaWQgZHVwbGljYXRlIGNvbnNlY3V0aXZlXG4gICAgICogZmx1c2hlcy4gRm9yIHJlcGVhdGVkIGFuZCB1c2VsZXNzIGNhbGxzIHdpdGggWl9GSU5JU0gsIHdlIGtlZXBcbiAgICAgKiByZXR1cm5pbmcgWl9TVFJFQU1fRU5EIGluc3RlYWQgb2YgWl9CVUZfRVJST1IuXG4gICAgICovXG4gIH0gZWxzZSBpZiAoc3RybS5hdmFpbF9pbiA9PT0gMCAmJiByYW5rKGZsdXNoKSA8PSByYW5rKG9sZF9mbHVzaCkgJiZcbiAgICBmbHVzaCAhPT0gWl9GSU5JU0gpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfQlVGX0VSUk9SKTtcbiAgfVxuXG4gIC8qIFVzZXIgbXVzdCBub3QgcHJvdmlkZSBtb3JlIGlucHV0IGFmdGVyIHRoZSBmaXJzdCBGSU5JU0g6ICovXG4gIGlmIChzLnN0YXR1cyA9PT0gRklOSVNIX1NUQVRFICYmIHN0cm0uYXZhaWxfaW4gIT09IDApIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfQlVGX0VSUk9SKTtcbiAgfVxuXG4gIC8qIFN0YXJ0IGEgbmV3IGJsb2NrIG9yIGNvbnRpbnVlIHRoZSBjdXJyZW50IG9uZS5cbiAgICovXG4gIGlmIChzdHJtLmF2YWlsX2luICE9PSAwIHx8IHMubG9va2FoZWFkICE9PSAwIHx8XG4gICAgKGZsdXNoICE9PSBaX05PX0ZMVVNIICYmIHMuc3RhdHVzICE9PSBGSU5JU0hfU1RBVEUpKSB7XG4gICAgdmFyIGJzdGF0ZSA9IChzLnN0cmF0ZWd5ID09PSBaX0hVRkZNQU5fT05MWSkgPyBkZWZsYXRlX2h1ZmYocywgZmx1c2gpIDpcbiAgICAgIChzLnN0cmF0ZWd5ID09PSBaX1JMRSA/IGRlZmxhdGVfcmxlKHMsIGZsdXNoKSA6XG4gICAgICAgIGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0uZnVuYyhzLCBmbHVzaCkpO1xuXG4gICAgaWYgKGJzdGF0ZSA9PT0gQlNfRklOSVNIX1NUQVJURUQgfHwgYnN0YXRlID09PSBCU19GSU5JU0hfRE9ORSkge1xuICAgICAgcy5zdGF0dXMgPSBGSU5JU0hfU1RBVEU7XG4gICAgfVxuICAgIGlmIChic3RhdGUgPT09IEJTX05FRURfTU9SRSB8fCBic3RhdGUgPT09IEJTX0ZJTklTSF9TVEFSVEVEKSB7XG4gICAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7XG4gICAgICAgIC8qIGF2b2lkIEJVRl9FUlJPUiBuZXh0IGNhbGwsIHNlZSBhYm92ZSAqL1xuICAgICAgfVxuICAgICAgcmV0dXJuIFpfT0s7XG4gICAgICAvKiBJZiBmbHVzaCAhPSBaX05PX0ZMVVNIICYmIGF2YWlsX291dCA9PSAwLCB0aGUgbmV4dCBjYWxsXG4gICAgICAgKiBvZiBkZWZsYXRlIHNob3VsZCB1c2UgdGhlIHNhbWUgZmx1c2ggcGFyYW1ldGVyIHRvIG1ha2Ugc3VyZVxuICAgICAgICogdGhhdCB0aGUgZmx1c2ggaXMgY29tcGxldGUuIFNvIHdlIGRvbid0IGhhdmUgdG8gb3V0cHV0IGFuXG4gICAgICAgKiBlbXB0eSBibG9jayBoZXJlLCB0aGlzIHdpbGwgYmUgZG9uZSBhdCBuZXh0IGNhbGwuIFRoaXMgYWxzb1xuICAgICAgICogZW5zdXJlcyB0aGF0IGZvciBhIHZlcnkgc21hbGwgb3V0cHV0IGJ1ZmZlciwgd2UgZW1pdCBhdCBtb3N0XG4gICAgICAgKiBvbmUgZW1wdHkgYmxvY2suXG4gICAgICAgKi9cbiAgICB9XG4gICAgaWYgKGJzdGF0ZSA9PT0gQlNfQkxPQ0tfRE9ORSkge1xuICAgICAgaWYgKGZsdXNoID09PSBaX1BBUlRJQUxfRkxVU0gpIHtcbiAgICAgICAgdHJlZXMuX3RyX2FsaWduKHMpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZmx1c2ggIT09IFpfQkxPQ0spIHsgLyogRlVMTF9GTFVTSCBvciBTWU5DX0ZMVVNIICovXG5cbiAgICAgICAgdHJlZXMuX3RyX3N0b3JlZF9ibG9jayhzLCAwLCAwLCBmYWxzZSk7XG4gICAgICAgIC8qIEZvciBhIGZ1bGwgZmx1c2gsIHRoaXMgZW1wdHkgYmxvY2sgd2lsbCBiZSByZWNvZ25pemVkXG4gICAgICAgICAqIGFzIGEgc3BlY2lhbCBtYXJrZXIgYnkgaW5mbGF0ZV9zeW5jKCkuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoZmx1c2ggPT09IFpfRlVMTF9GTFVTSCkge1xuICAgICAgICAgIC8qKiogQ0xFQVJfSEFTSChzKTsgKioqLyAgICAgICAgICAgICAvKiBmb3JnZXQgaGlzdG9yeSAqL1xuICAgICAgICAgIHplcm8ocy5oZWFkKTsgLy8gRmlsbCB3aXRoIE5JTCAoPSAwKTtcblxuICAgICAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgICAgICAgcy5zdHJzdGFydCA9IDA7XG4gICAgICAgICAgICBzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgICAgICAgICAgIHMuaW5zZXJ0ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7IC8qIGF2b2lkIEJVRl9FUlJPUiBhdCBuZXh0IGNhbGwsIHNlZSBhYm92ZSAqL1xuICAgICAgICByZXR1cm4gWl9PSztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy9Bc3NlcnQoc3RybS0+YXZhaWxfb3V0ID4gMCwgXCJidWcyXCIpO1xuICAvL2lmIChzdHJtLmF2YWlsX291dCA8PSAwKSB7IHRocm93IG5ldyBFcnJvcihcImJ1ZzJcIik7fVxuXG4gIGlmIChmbHVzaCAhPT0gWl9GSU5JU0gpIHsgcmV0dXJuIFpfT0s7IH1cbiAgaWYgKHMud3JhcCA8PSAwKSB7IHJldHVybiBaX1NUUkVBTV9FTkQ7IH1cblxuICAvKiBXcml0ZSB0aGUgdHJhaWxlciAqL1xuICBpZiAocy53cmFwID09PSAyKSB7XG4gICAgcHV0X2J5dGUocywgc3RybS5hZGxlciAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDgpICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0uYWRsZXIgPj4gMTYpICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0uYWRsZXIgPj4gMjQpICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgc3RybS50b3RhbF9pbiAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLnRvdGFsX2luID4+IDgpICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0udG90YWxfaW4gPj4gMTYpICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0udG90YWxfaW4gPj4gMjQpICYgMHhmZik7XG4gIH1cbiAgZWxzZVxuICB7XG4gICAgcHV0U2hvcnRNU0Iocywgc3RybS5hZGxlciA+Pj4gMTYpO1xuICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgJiAweGZmZmYpO1xuICB9XG5cbiAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgLyogSWYgYXZhaWxfb3V0IGlzIHplcm8sIHRoZSBhcHBsaWNhdGlvbiB3aWxsIGNhbGwgZGVmbGF0ZSBhZ2FpblxuICAgKiB0byBmbHVzaCB0aGUgcmVzdC5cbiAgICovXG4gIGlmIChzLndyYXAgPiAwKSB7IHMud3JhcCA9IC1zLndyYXA7IH1cbiAgLyogd3JpdGUgdGhlIHRyYWlsZXIgb25seSBvbmNlISAqL1xuICByZXR1cm4gcy5wZW5kaW5nICE9PSAwID8gWl9PSyA6IFpfU1RSRUFNX0VORDtcbn1cblxuZnVuY3Rpb24gZGVmbGF0ZUVuZChzdHJtKSB7XG4gIHZhciBzdGF0dXM7XG5cbiAgaWYgKCFzdHJtLyo9PSBaX05VTEwqLyB8fCAhc3RybS5zdGF0ZS8qPT0gWl9OVUxMKi8pIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICBzdGF0dXMgPSBzdHJtLnN0YXRlLnN0YXR1cztcbiAgaWYgKHN0YXR1cyAhPT0gSU5JVF9TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gRVhUUkFfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IE5BTUVfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IENPTU1FTlRfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IEhDUkNfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IEJVU1lfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IEZJTklTSF9TVEFURVxuICApIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKTtcbiAgfVxuXG4gIHN0cm0uc3RhdGUgPSBudWxsO1xuXG4gIHJldHVybiBzdGF0dXMgPT09IEJVU1lfU1RBVEUgPyBlcnIoc3RybSwgWl9EQVRBX0VSUk9SKSA6IFpfT0s7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZXMgdGhlIGNvbXByZXNzaW9uIGRpY3Rpb25hcnkgZnJvbSB0aGUgZ2l2ZW4gYnl0ZVxuICogc2VxdWVuY2Ugd2l0aG91dCBwcm9kdWNpbmcgYW55IGNvbXByZXNzZWQgb3V0cHV0LlxuICovXG5mdW5jdGlvbiBkZWZsYXRlU2V0RGljdGlvbmFyeShzdHJtLCBkaWN0aW9uYXJ5KSB7XG4gIHZhciBkaWN0TGVuZ3RoID0gZGljdGlvbmFyeS5sZW5ndGg7XG5cbiAgdmFyIHM7XG4gIHZhciBzdHIsIG47XG4gIHZhciB3cmFwO1xuICB2YXIgYXZhaWw7XG4gIHZhciBuZXh0O1xuICB2YXIgaW5wdXQ7XG4gIHZhciB0bXBEaWN0O1xuXG4gIGlmICghc3RybS8qPT0gWl9OVUxMKi8gfHwgIXN0cm0uc3RhdGUvKj09IFpfTlVMTCovKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgcyA9IHN0cm0uc3RhdGU7XG4gIHdyYXAgPSBzLndyYXA7XG5cbiAgaWYgKHdyYXAgPT09IDIgfHwgKHdyYXAgPT09IDEgJiYgcy5zdGF0dXMgIT09IElOSVRfU1RBVEUpIHx8IHMubG9va2FoZWFkKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgLyogd2hlbiB1c2luZyB6bGliIHdyYXBwZXJzLCBjb21wdXRlIEFkbGVyLTMyIGZvciBwcm92aWRlZCBkaWN0aW9uYXJ5ICovXG4gIGlmICh3cmFwID09PSAxKSB7XG4gICAgLyogYWRsZXIzMihzdHJtLT5hZGxlciwgZGljdGlvbmFyeSwgZGljdExlbmd0aCk7ICovXG4gICAgc3RybS5hZGxlciA9IGFkbGVyMzIoc3RybS5hZGxlciwgZGljdGlvbmFyeSwgZGljdExlbmd0aCwgMCk7XG4gIH1cblxuICBzLndyYXAgPSAwOyAgIC8qIGF2b2lkIGNvbXB1dGluZyBBZGxlci0zMiBpbiByZWFkX2J1ZiAqL1xuXG4gIC8qIGlmIGRpY3Rpb25hcnkgd291bGQgZmlsbCB3aW5kb3csIGp1c3QgcmVwbGFjZSB0aGUgaGlzdG9yeSAqL1xuICBpZiAoZGljdExlbmd0aCA+PSBzLndfc2l6ZSkge1xuICAgIGlmICh3cmFwID09PSAwKSB7ICAgICAgICAgICAgLyogYWxyZWFkeSBlbXB0eSBvdGhlcndpc2UgKi9cbiAgICAgIC8qKiogQ0xFQVJfSEFTSChzKTsgKioqL1xuICAgICAgemVybyhzLmhlYWQpOyAvLyBGaWxsIHdpdGggTklMICg9IDApO1xuICAgICAgcy5zdHJzdGFydCA9IDA7XG4gICAgICBzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgICAgIHMuaW5zZXJ0ID0gMDtcbiAgICB9XG4gICAgLyogdXNlIHRoZSB0YWlsICovXG4gICAgLy8gZGljdGlvbmFyeSA9IGRpY3Rpb25hcnkuc2xpY2UoZGljdExlbmd0aCAtIHMud19zaXplKTtcbiAgICB0bXBEaWN0ID0gbmV3IHV0aWxzLkJ1Zjgocy53X3NpemUpO1xuICAgIHV0aWxzLmFycmF5U2V0KHRtcERpY3QsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGggLSBzLndfc2l6ZSwgcy53X3NpemUsIDApO1xuICAgIGRpY3Rpb25hcnkgPSB0bXBEaWN0O1xuICAgIGRpY3RMZW5ndGggPSBzLndfc2l6ZTtcbiAgfVxuICAvKiBpbnNlcnQgZGljdGlvbmFyeSBpbnRvIHdpbmRvdyBhbmQgaGFzaCAqL1xuICBhdmFpbCA9IHN0cm0uYXZhaWxfaW47XG4gIG5leHQgPSBzdHJtLm5leHRfaW47XG4gIGlucHV0ID0gc3RybS5pbnB1dDtcbiAgc3RybS5hdmFpbF9pbiA9IGRpY3RMZW5ndGg7XG4gIHN0cm0ubmV4dF9pbiA9IDA7XG4gIHN0cm0uaW5wdXQgPSBkaWN0aW9uYXJ5O1xuICBmaWxsX3dpbmRvdyhzKTtcbiAgd2hpbGUgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCkge1xuICAgIHN0ciA9IHMuc3Ryc3RhcnQ7XG4gICAgbiA9IHMubG9va2FoZWFkIC0gKE1JTl9NQVRDSCAtIDEpO1xuICAgIGRvIHtcbiAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMtPmluc19oLCBzLT53aW5kb3dbc3RyICsgTUlOX01BVENILTFdKTsgKi9cbiAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3N0ciArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xuXG4gICAgICBzLnByZXZbc3RyICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuXG4gICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzdHI7XG4gICAgICBzdHIrKztcbiAgICB9IHdoaWxlICgtLW4pO1xuICAgIHMuc3Ryc3RhcnQgPSBzdHI7XG4gICAgcy5sb29rYWhlYWQgPSBNSU5fTUFUQ0ggLSAxO1xuICAgIGZpbGxfd2luZG93KHMpO1xuICB9XG4gIHMuc3Ryc3RhcnQgKz0gcy5sb29rYWhlYWQ7XG4gIHMuYmxvY2tfc3RhcnQgPSBzLnN0cnN0YXJ0O1xuICBzLmluc2VydCA9IHMubG9va2FoZWFkO1xuICBzLmxvb2thaGVhZCA9IDA7XG4gIHMubWF0Y2hfbGVuZ3RoID0gcy5wcmV2X2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG4gIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcbiAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgc3RybS5pbnB1dCA9IGlucHV0O1xuICBzdHJtLmF2YWlsX2luID0gYXZhaWw7XG4gIHMud3JhcCA9IHdyYXA7XG4gIHJldHVybiBaX09LO1xufVxuXG5cbmV4cG9ydHMuZGVmbGF0ZUluaXQgPSBkZWZsYXRlSW5pdDtcbmV4cG9ydHMuZGVmbGF0ZUluaXQyID0gZGVmbGF0ZUluaXQyO1xuZXhwb3J0cy5kZWZsYXRlUmVzZXQgPSBkZWZsYXRlUmVzZXQ7XG5leHBvcnRzLmRlZmxhdGVSZXNldEtlZXAgPSBkZWZsYXRlUmVzZXRLZWVwO1xuZXhwb3J0cy5kZWZsYXRlU2V0SGVhZGVyID0gZGVmbGF0ZVNldEhlYWRlcjtcbmV4cG9ydHMuZGVmbGF0ZSA9IGRlZmxhdGU7XG5leHBvcnRzLmRlZmxhdGVFbmQgPSBkZWZsYXRlRW5kO1xuZXhwb3J0cy5kZWZsYXRlU2V0RGljdGlvbmFyeSA9IGRlZmxhdGVTZXREaWN0aW9uYXJ5O1xuZXhwb3J0cy5kZWZsYXRlSW5mbyA9ICdwYWtvIGRlZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpJztcblxuLyogTm90IGltcGxlbWVudGVkXG5leHBvcnRzLmRlZmxhdGVCb3VuZCA9IGRlZmxhdGVCb3VuZDtcbmV4cG9ydHMuZGVmbGF0ZUNvcHkgPSBkZWZsYXRlQ29weTtcbmV4cG9ydHMuZGVmbGF0ZVBhcmFtcyA9IGRlZmxhdGVQYXJhbXM7XG5leHBvcnRzLmRlZmxhdGVQZW5kaW5nID0gZGVmbGF0ZVBlbmRpbmc7XG5leHBvcnRzLmRlZmxhdGVQcmltZSA9IGRlZmxhdGVQcmltZTtcbmV4cG9ydHMuZGVmbGF0ZVR1bmUgPSBkZWZsYXRlVHVuZTtcbiovXG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuLyogZXNsaW50LWRpc2FibGUgc3BhY2UtdW5hcnktb3BzICovXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbW1vbicpO1xuXG4vKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG4vL3ZhciBaX0ZJTFRFUkVEICAgICAgICAgID0gMTtcbi8vdmFyIFpfSFVGRk1BTl9PTkxZICAgICAgPSAyO1xuLy92YXIgWl9STEUgICAgICAgICAgICAgICA9IDM7XG52YXIgWl9GSVhFRCAgICAgICAgICAgICAgID0gNDtcbi8vdmFyIFpfREVGQVVMVF9TVFJBVEVHWSAgPSAwO1xuXG4vKiBQb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIGRhdGFfdHlwZSBmaWVsZCAodGhvdWdoIHNlZSBpbmZsYXRlKCkpICovXG52YXIgWl9CSU5BUlkgICAgICAgICAgICAgID0gMDtcbnZhciBaX1RFWFQgICAgICAgICAgICAgICAgPSAxO1xuLy92YXIgWl9BU0NJSSAgICAgICAgICAgICA9IDE7IC8vID0gWl9URVhUXG52YXIgWl9VTktOT1dOICAgICAgICAgICAgID0gMjtcblxuLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5mdW5jdGlvbiB6ZXJvKGJ1ZikgeyB2YXIgbGVuID0gYnVmLmxlbmd0aDsgd2hpbGUgKC0tbGVuID49IDApIHsgYnVmW2xlbl0gPSAwOyB9IH1cblxuLy8gRnJvbSB6dXRpbC5oXG5cbnZhciBTVE9SRURfQkxPQ0sgPSAwO1xudmFyIFNUQVRJQ19UUkVFUyA9IDE7XG52YXIgRFlOX1RSRUVTICAgID0gMjtcbi8qIFRoZSB0aHJlZSBraW5kcyBvZiBibG9jayB0eXBlICovXG5cbnZhciBNSU5fTUFUQ0ggICAgPSAzO1xudmFyIE1BWF9NQVRDSCAgICA9IDI1ODtcbi8qIFRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIG1hdGNoIGxlbmd0aHMgKi9cblxuLy8gRnJvbSBkZWZsYXRlLmhcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW50ZXJuYWwgY29tcHJlc3Npb24gc3RhdGUuXG4gKi9cblxudmFyIExFTkdUSF9DT0RFUyAgPSAyOTtcbi8qIG51bWJlciBvZiBsZW5ndGggY29kZXMsIG5vdCBjb3VudGluZyB0aGUgc3BlY2lhbCBFTkRfQkxPQ0sgY29kZSAqL1xuXG52YXIgTElURVJBTFMgICAgICA9IDI1Njtcbi8qIG51bWJlciBvZiBsaXRlcmFsIGJ5dGVzIDAuLjI1NSAqL1xuXG52YXIgTF9DT0RFUyAgICAgICA9IExJVEVSQUxTICsgMSArIExFTkdUSF9DT0RFUztcbi8qIG51bWJlciBvZiBMaXRlcmFsIG9yIExlbmd0aCBjb2RlcywgaW5jbHVkaW5nIHRoZSBFTkRfQkxPQ0sgY29kZSAqL1xuXG52YXIgRF9DT0RFUyAgICAgICA9IDMwO1xuLyogbnVtYmVyIG9mIGRpc3RhbmNlIGNvZGVzICovXG5cbnZhciBCTF9DT0RFUyAgICAgID0gMTk7XG4vKiBudW1iZXIgb2YgY29kZXMgdXNlZCB0byB0cmFuc2ZlciB0aGUgYml0IGxlbmd0aHMgKi9cblxudmFyIEhFQVBfU0laRSAgICAgPSAyICogTF9DT0RFUyArIDE7XG4vKiBtYXhpbXVtIGhlYXAgc2l6ZSAqL1xuXG52YXIgTUFYX0JJVFMgICAgICA9IDE1O1xuLyogQWxsIGNvZGVzIG11c3Qgbm90IGV4Y2VlZCBNQVhfQklUUyBiaXRzICovXG5cbnZhciBCdWZfc2l6ZSAgICAgID0gMTY7XG4vKiBzaXplIG9mIGJpdCBidWZmZXIgaW4gYmlfYnVmICovXG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdGFudHNcbiAqL1xuXG52YXIgTUFYX0JMX0JJVFMgPSA3O1xuLyogQml0IGxlbmd0aCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JMX0JJVFMgYml0cyAqL1xuXG52YXIgRU5EX0JMT0NLICAgPSAyNTY7XG4vKiBlbmQgb2YgYmxvY2sgbGl0ZXJhbCBjb2RlICovXG5cbnZhciBSRVBfM182ICAgICA9IDE2O1xuLyogcmVwZWF0IHByZXZpb3VzIGJpdCBsZW5ndGggMy02IHRpbWVzICgyIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG52YXIgUkVQWl8zXzEwICAgPSAxNztcbi8qIHJlcGVhdCBhIHplcm8gbGVuZ3RoIDMtMTAgdGltZXMgICgzIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG52YXIgUkVQWl8xMV8xMzggPSAxODtcbi8qIHJlcGVhdCBhIHplcm8gbGVuZ3RoIDExLTEzOCB0aW1lcyAgKDcgYml0cyBvZiByZXBlYXQgY291bnQpICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGNvbW1hLXNwYWNpbmcsYXJyYXktYnJhY2tldC1zcGFjaW5nICovXG52YXIgZXh0cmFfbGJpdHMgPSAgIC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggbGVuZ3RoIGNvZGUgKi9cbiAgWzAsMCwwLDAsMCwwLDAsMCwxLDEsMSwxLDIsMiwyLDIsMywzLDMsMyw0LDQsNCw0LDUsNSw1LDUsMF07XG5cbnZhciBleHRyYV9kYml0cyA9ICAgLyogZXh0cmEgYml0cyBmb3IgZWFjaCBkaXN0YW5jZSBjb2RlICovXG4gIFswLDAsMCwwLDEsMSwyLDIsMywzLDQsNCw1LDUsNiw2LDcsNyw4LDgsOSw5LDEwLDEwLDExLDExLDEyLDEyLDEzLDEzXTtcblxudmFyIGV4dHJhX2JsYml0cyA9ICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGJpdCBsZW5ndGggY29kZSAqL1xuICBbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyLDMsN107XG5cbnZhciBibF9vcmRlciA9XG4gIFsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XTtcbi8qIGVzbGludC1lbmFibGUgY29tbWEtc3BhY2luZyxhcnJheS1icmFja2V0LXNwYWNpbmcgKi9cblxuLyogVGhlIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGggY29kZXMgYXJlIHNlbnQgaW4gb3JkZXIgb2YgZGVjcmVhc2luZ1xuICogcHJvYmFiaWxpdHksIHRvIGF2b2lkIHRyYW5zbWl0dGluZyB0aGUgbGVuZ3RocyBmb3IgdW51c2VkIGJpdCBsZW5ndGggY29kZXMuXG4gKi9cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBMb2NhbCBkYXRhLiBUaGVzZSBhcmUgaW5pdGlhbGl6ZWQgb25seSBvbmNlLlxuICovXG5cbi8vIFdlIHByZS1maWxsIGFycmF5cyB3aXRoIDAgdG8gYXZvaWQgdW5pbml0aWFsaXplZCBnYXBzXG5cbnZhciBESVNUX0NPREVfTEVOID0gNTEyOyAvKiBzZWUgZGVmaW5pdGlvbiBvZiBhcnJheSBkaXN0X2NvZGUgYmVsb3cgKi9cblxuLy8gISEhISBVc2UgZmxhdCBhcnJheSBpbnN0ZWFkIG9mIHN0cnVjdHVyZSwgRnJlcSA9IGkqMiwgTGVuID0gaSoyKzFcbnZhciBzdGF0aWNfbHRyZWUgID0gbmV3IEFycmF5KChMX0NPREVTICsgMikgKiAyKTtcbnplcm8oc3RhdGljX2x0cmVlKTtcbi8qIFRoZSBzdGF0aWMgbGl0ZXJhbCB0cmVlLiBTaW5jZSB0aGUgYml0IGxlbmd0aHMgYXJlIGltcG9zZWQsIHRoZXJlIGlzIG5vXG4gKiBuZWVkIGZvciB0aGUgTF9DT0RFUyBleHRyYSBjb2RlcyB1c2VkIGR1cmluZyBoZWFwIGNvbnN0cnVjdGlvbi4gSG93ZXZlclxuICogVGhlIGNvZGVzIDI4NiBhbmQgMjg3IGFyZSBuZWVkZWQgdG8gYnVpbGQgYSBjYW5vbmljYWwgdHJlZSAoc2VlIF90cl9pbml0XG4gKiBiZWxvdykuXG4gKi9cblxudmFyIHN0YXRpY19kdHJlZSAgPSBuZXcgQXJyYXkoRF9DT0RFUyAqIDIpO1xuemVybyhzdGF0aWNfZHRyZWUpO1xuLyogVGhlIHN0YXRpYyBkaXN0YW5jZSB0cmVlLiAoQWN0dWFsbHkgYSB0cml2aWFsIHRyZWUgc2luY2UgYWxsIGNvZGVzIHVzZVxuICogNSBiaXRzLilcbiAqL1xuXG52YXIgX2Rpc3RfY29kZSAgICA9IG5ldyBBcnJheShESVNUX0NPREVfTEVOKTtcbnplcm8oX2Rpc3RfY29kZSk7XG4vKiBEaXN0YW5jZSBjb2Rlcy4gVGhlIGZpcnN0IDI1NiB2YWx1ZXMgY29ycmVzcG9uZCB0byB0aGUgZGlzdGFuY2VzXG4gKiAzIC4uIDI1OCwgdGhlIGxhc3QgMjU2IHZhbHVlcyBjb3JyZXNwb25kIHRvIHRoZSB0b3AgOCBiaXRzIG9mXG4gKiB0aGUgMTUgYml0IGRpc3RhbmNlcy5cbiAqL1xuXG52YXIgX2xlbmd0aF9jb2RlICA9IG5ldyBBcnJheShNQVhfTUFUQ0ggLSBNSU5fTUFUQ0ggKyAxKTtcbnplcm8oX2xlbmd0aF9jb2RlKTtcbi8qIGxlbmd0aCBjb2RlIGZvciBlYWNoIG5vcm1hbGl6ZWQgbWF0Y2ggbGVuZ3RoICgwID09IE1JTl9NQVRDSCkgKi9cblxudmFyIGJhc2VfbGVuZ3RoICAgPSBuZXcgQXJyYXkoTEVOR1RIX0NPREVTKTtcbnplcm8oYmFzZV9sZW5ndGgpO1xuLyogRmlyc3Qgbm9ybWFsaXplZCBsZW5ndGggZm9yIGVhY2ggY29kZSAoMCA9IE1JTl9NQVRDSCkgKi9cblxudmFyIGJhc2VfZGlzdCAgICAgPSBuZXcgQXJyYXkoRF9DT0RFUyk7XG56ZXJvKGJhc2VfZGlzdCk7XG4vKiBGaXJzdCBub3JtYWxpemVkIGRpc3RhbmNlIGZvciBlYWNoIGNvZGUgKDAgPSBkaXN0YW5jZSBvZiAxKSAqL1xuXG5cbmZ1bmN0aW9uIFN0YXRpY1RyZWVEZXNjKHN0YXRpY190cmVlLCBleHRyYV9iaXRzLCBleHRyYV9iYXNlLCBlbGVtcywgbWF4X2xlbmd0aCkge1xuXG4gIHRoaXMuc3RhdGljX3RyZWUgID0gc3RhdGljX3RyZWU7ICAvKiBzdGF0aWMgdHJlZSBvciBOVUxMICovXG4gIHRoaXMuZXh0cmFfYml0cyAgID0gZXh0cmFfYml0czsgICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGNvZGUgb3IgTlVMTCAqL1xuICB0aGlzLmV4dHJhX2Jhc2UgICA9IGV4dHJhX2Jhc2U7ICAgLyogYmFzZSBpbmRleCBmb3IgZXh0cmFfYml0cyAqL1xuICB0aGlzLmVsZW1zICAgICAgICA9IGVsZW1zOyAgICAgICAgLyogbWF4IG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgdHJlZSAqL1xuICB0aGlzLm1heF9sZW5ndGggICA9IG1heF9sZW5ndGg7ICAgLyogbWF4IGJpdCBsZW5ndGggZm9yIHRoZSBjb2RlcyAqL1xuXG4gIC8vIHNob3cgaWYgYHN0YXRpY190cmVlYCBoYXMgZGF0YSBvciBkdW1teSAtIG5lZWRlZCBmb3IgbW9ub21vcnBoaWMgb2JqZWN0c1xuICB0aGlzLmhhc19zdHJlZSAgICA9IHN0YXRpY190cmVlICYmIHN0YXRpY190cmVlLmxlbmd0aDtcbn1cblxuXG52YXIgc3RhdGljX2xfZGVzYztcbnZhciBzdGF0aWNfZF9kZXNjO1xudmFyIHN0YXRpY19ibF9kZXNjO1xuXG5cbmZ1bmN0aW9uIFRyZWVEZXNjKGR5bl90cmVlLCBzdGF0X2Rlc2MpIHtcbiAgdGhpcy5keW5fdHJlZSA9IGR5bl90cmVlOyAgICAgLyogdGhlIGR5bmFtaWMgdHJlZSAqL1xuICB0aGlzLm1heF9jb2RlID0gMDsgICAgICAgICAgICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbiAgdGhpcy5zdGF0X2Rlc2MgPSBzdGF0X2Rlc2M7ICAgLyogdGhlIGNvcnJlc3BvbmRpbmcgc3RhdGljIHRyZWUgKi9cbn1cblxuXG5cbmZ1bmN0aW9uIGRfY29kZShkaXN0KSB7XG4gIHJldHVybiBkaXN0IDwgMjU2ID8gX2Rpc3RfY29kZVtkaXN0XSA6IF9kaXN0X2NvZGVbMjU2ICsgKGRpc3QgPj4+IDcpXTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIE91dHB1dCBhIHNob3J0IExTQiBmaXJzdCBvbiB0aGUgc3RyZWFtLlxuICogSU4gYXNzZXJ0aW9uOiB0aGVyZSBpcyBlbm91Z2ggcm9vbSBpbiBwZW5kaW5nQnVmLlxuICovXG5mdW5jdGlvbiBwdXRfc2hvcnQocywgdykge1xuLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHcpICYgMHhmZikpO1xuLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHVzaCkodykgPj4gOCkpO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9ICh3KSAmIDB4ZmY7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gKHcgPj4+IDgpICYgMHhmZjtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgYSB2YWx1ZSBvbiBhIGdpdmVuIG51bWJlciBvZiBiaXRzLlxuICogSU4gYXNzZXJ0aW9uOiBsZW5ndGggPD0gMTYgYW5kIHZhbHVlIGZpdHMgaW4gbGVuZ3RoIGJpdHMuXG4gKi9cbmZ1bmN0aW9uIHNlbmRfYml0cyhzLCB2YWx1ZSwgbGVuZ3RoKSB7XG4gIGlmIChzLmJpX3ZhbGlkID4gKEJ1Zl9zaXplIC0gbGVuZ3RoKSkge1xuICAgIHMuYmlfYnVmIHw9ICh2YWx1ZSA8PCBzLmJpX3ZhbGlkKSAmIDB4ZmZmZjtcbiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xuICAgIHMuYmlfYnVmID0gdmFsdWUgPj4gKEJ1Zl9zaXplIC0gcy5iaV92YWxpZCk7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGggLSBCdWZfc2l6ZTtcbiAgfSBlbHNlIHtcbiAgICBzLmJpX2J1ZiB8PSAodmFsdWUgPDwgcy5iaV92YWxpZCkgJiAweGZmZmY7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGg7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzZW5kX2NvZGUocywgYywgdHJlZSkge1xuICBzZW5kX2JpdHMocywgdHJlZVtjICogMl0vKi5Db2RlKi8sIHRyZWVbYyAqIDIgKyAxXS8qLkxlbiovKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFJldmVyc2UgdGhlIGZpcnN0IGxlbiBiaXRzIG9mIGEgY29kZSwgdXNpbmcgc3RyYWlnaHRmb3J3YXJkIGNvZGUgKGEgZmFzdGVyXG4gKiBtZXRob2Qgd291bGQgdXNlIGEgdGFibGUpXG4gKiBJTiBhc3NlcnRpb246IDEgPD0gbGVuIDw9IDE1XG4gKi9cbmZ1bmN0aW9uIGJpX3JldmVyc2UoY29kZSwgbGVuKSB7XG4gIHZhciByZXMgPSAwO1xuICBkbyB7XG4gICAgcmVzIHw9IGNvZGUgJiAxO1xuICAgIGNvZGUgPj4+PSAxO1xuICAgIHJlcyA8PD0gMTtcbiAgfSB3aGlsZSAoLS1sZW4gPiAwKTtcbiAgcmV0dXJuIHJlcyA+Pj4gMTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZsdXNoIHRoZSBiaXQgYnVmZmVyLCBrZWVwaW5nIGF0IG1vc3QgNyBiaXRzIGluIGl0LlxuICovXG5mdW5jdGlvbiBiaV9mbHVzaChzKSB7XG4gIGlmIChzLmJpX3ZhbGlkID09PSAxNikge1xuICAgIHB1dF9zaG9ydChzLCBzLmJpX2J1Zik7XG4gICAgcy5iaV9idWYgPSAwO1xuICAgIHMuYmlfdmFsaWQgPSAwO1xuXG4gIH0gZWxzZSBpZiAocy5iaV92YWxpZCA+PSA4KSB7XG4gICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBzLmJpX2J1ZiAmIDB4ZmY7XG4gICAgcy5iaV9idWYgPj49IDg7XG4gICAgcy5iaV92YWxpZCAtPSA4O1xuICB9XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb21wdXRlIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhzIGZvciBhIHRyZWUgYW5kIHVwZGF0ZSB0aGUgdG90YWwgYml0IGxlbmd0aFxuICogZm9yIHRoZSBjdXJyZW50IGJsb2NrLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgZmllbGRzIGZyZXEgYW5kIGRhZCBhcmUgc2V0LCBoZWFwW2hlYXBfbWF4XSBhbmRcbiAqICAgIGFib3ZlIGFyZSB0aGUgdHJlZSBub2RlcyBzb3J0ZWQgYnkgaW5jcmVhc2luZyBmcmVxdWVuY3kuXG4gKiBPVVQgYXNzZXJ0aW9uczogdGhlIGZpZWxkIGxlbiBpcyBzZXQgdG8gdGhlIG9wdGltYWwgYml0IGxlbmd0aCwgdGhlXG4gKiAgICAgYXJyYXkgYmxfY291bnQgY29udGFpbnMgdGhlIGZyZXF1ZW5jaWVzIGZvciBlYWNoIGJpdCBsZW5ndGguXG4gKiAgICAgVGhlIGxlbmd0aCBvcHRfbGVuIGlzIHVwZGF0ZWQ7IHN0YXRpY19sZW4gaXMgYWxzbyB1cGRhdGVkIGlmIHN0cmVlIGlzXG4gKiAgICAgbm90IG51bGwuXG4gKi9cbmZ1bmN0aW9uIGdlbl9iaXRsZW4ocywgZGVzYylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICB0cmVlX2Rlc2MgKmRlc2M7ICAgIC8qIHRoZSB0cmVlIGRlc2NyaXB0b3IgKi9cbntcbiAgdmFyIHRyZWUgICAgICAgICAgICA9IGRlc2MuZHluX3RyZWU7XG4gIHZhciBtYXhfY29kZSAgICAgICAgPSBkZXNjLm1heF9jb2RlO1xuICB2YXIgc3RyZWUgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2Muc3RhdGljX3RyZWU7XG4gIHZhciBoYXNfc3RyZWUgICAgICAgPSBkZXNjLnN0YXRfZGVzYy5oYXNfc3RyZWU7XG4gIHZhciBleHRyYSAgICAgICAgICAgPSBkZXNjLnN0YXRfZGVzYy5leHRyYV9iaXRzO1xuICB2YXIgYmFzZSAgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2MuZXh0cmFfYmFzZTtcbiAgdmFyIG1heF9sZW5ndGggICAgICA9IGRlc2Muc3RhdF9kZXNjLm1heF9sZW5ndGg7XG4gIHZhciBoOyAgICAgICAgICAgICAgLyogaGVhcCBpbmRleCAqL1xuICB2YXIgbiwgbTsgICAgICAgICAgIC8qIGl0ZXJhdGUgb3ZlciB0aGUgdHJlZSBlbGVtZW50cyAqL1xuICB2YXIgYml0czsgICAgICAgICAgIC8qIGJpdCBsZW5ndGggKi9cbiAgdmFyIHhiaXRzOyAgICAgICAgICAvKiBleHRyYSBiaXRzICovXG4gIHZhciBmOyAgICAgICAgICAgICAgLyogZnJlcXVlbmN5ICovXG4gIHZhciBvdmVyZmxvdyA9IDA7ICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIHdpdGggYml0IGxlbmd0aCB0b28gbGFyZ2UgKi9cblxuICBmb3IgKGJpdHMgPSAwOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHtcbiAgICBzLmJsX2NvdW50W2JpdHNdID0gMDtcbiAgfVxuXG4gIC8qIEluIGEgZmlyc3QgcGFzcywgY29tcHV0ZSB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RocyAod2hpY2ggbWF5XG4gICAqIG92ZXJmbG93IGluIHRoZSBjYXNlIG9mIHRoZSBiaXQgbGVuZ3RoIHRyZWUpLlxuICAgKi9cbiAgdHJlZVtzLmhlYXBbcy5oZWFwX21heF0gKiAyICsgMV0vKi5MZW4qLyA9IDA7IC8qIHJvb3Qgb2YgdGhlIGhlYXAgKi9cblxuICBmb3IgKGggPSBzLmhlYXBfbWF4ICsgMTsgaCA8IEhFQVBfU0laRTsgaCsrKSB7XG4gICAgbiA9IHMuaGVhcFtoXTtcbiAgICBiaXRzID0gdHJlZVt0cmVlW24gKiAyICsgMV0vKi5EYWQqLyAqIDIgKyAxXS8qLkxlbiovICsgMTtcbiAgICBpZiAoYml0cyA+IG1heF9sZW5ndGgpIHtcbiAgICAgIGJpdHMgPSBtYXhfbGVuZ3RoO1xuICAgICAgb3ZlcmZsb3crKztcbiAgICB9XG4gICAgdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSBiaXRzO1xuICAgIC8qIFdlIG92ZXJ3cml0ZSB0cmVlW25dLkRhZCB3aGljaCBpcyBubyBsb25nZXIgbmVlZGVkICovXG5cbiAgICBpZiAobiA+IG1heF9jb2RlKSB7IGNvbnRpbnVlOyB9IC8qIG5vdCBhIGxlYWYgbm9kZSAqL1xuXG4gICAgcy5ibF9jb3VudFtiaXRzXSsrO1xuICAgIHhiaXRzID0gMDtcbiAgICBpZiAobiA+PSBiYXNlKSB7XG4gICAgICB4Yml0cyA9IGV4dHJhW24gLSBiYXNlXTtcbiAgICB9XG4gICAgZiA9IHRyZWVbbiAqIDJdLyouRnJlcSovO1xuICAgIHMub3B0X2xlbiArPSBmICogKGJpdHMgKyB4Yml0cyk7XG4gICAgaWYgKGhhc19zdHJlZSkge1xuICAgICAgcy5zdGF0aWNfbGVuICs9IGYgKiAoc3RyZWVbbiAqIDIgKyAxXS8qLkxlbiovICsgeGJpdHMpO1xuICAgIH1cbiAgfVxuICBpZiAob3ZlcmZsb3cgPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgLy8gVHJhY2UoKHN0ZGVycixcIlxcbmJpdCBsZW5ndGggb3ZlcmZsb3dcXG5cIikpO1xuICAvKiBUaGlzIGhhcHBlbnMgZm9yIGV4YW1wbGUgb24gb2JqMiBhbmQgcGljIG9mIHRoZSBDYWxnYXJ5IGNvcnB1cyAqL1xuXG4gIC8qIEZpbmQgdGhlIGZpcnN0IGJpdCBsZW5ndGggd2hpY2ggY291bGQgaW5jcmVhc2U6ICovXG4gIGRvIHtcbiAgICBiaXRzID0gbWF4X2xlbmd0aCAtIDE7XG4gICAgd2hpbGUgKHMuYmxfY291bnRbYml0c10gPT09IDApIHsgYml0cy0tOyB9XG4gICAgcy5ibF9jb3VudFtiaXRzXS0tOyAgICAgIC8qIG1vdmUgb25lIGxlYWYgZG93biB0aGUgdHJlZSAqL1xuICAgIHMuYmxfY291bnRbYml0cyArIDFdICs9IDI7IC8qIG1vdmUgb25lIG92ZXJmbG93IGl0ZW0gYXMgaXRzIGJyb3RoZXIgKi9cbiAgICBzLmJsX2NvdW50W21heF9sZW5ndGhdLS07XG4gICAgLyogVGhlIGJyb3RoZXIgb2YgdGhlIG92ZXJmbG93IGl0ZW0gYWxzbyBtb3ZlcyBvbmUgc3RlcCB1cCxcbiAgICAgKiBidXQgdGhpcyBkb2VzIG5vdCBhZmZlY3QgYmxfY291bnRbbWF4X2xlbmd0aF1cbiAgICAgKi9cbiAgICBvdmVyZmxvdyAtPSAyO1xuICB9IHdoaWxlIChvdmVyZmxvdyA+IDApO1xuXG4gIC8qIE5vdyByZWNvbXB1dGUgYWxsIGJpdCBsZW5ndGhzLCBzY2FubmluZyBpbiBpbmNyZWFzaW5nIGZyZXF1ZW5jeS5cbiAgICogaCBpcyBzdGlsbCBlcXVhbCB0byBIRUFQX1NJWkUuIChJdCBpcyBzaW1wbGVyIHRvIHJlY29uc3RydWN0IGFsbFxuICAgKiBsZW5ndGhzIGluc3RlYWQgb2YgZml4aW5nIG9ubHkgdGhlIHdyb25nIG9uZXMuIFRoaXMgaWRlYSBpcyB0YWtlblxuICAgKiBmcm9tICdhcicgd3JpdHRlbiBieSBIYXJ1aGlrbyBPa3VtdXJhLilcbiAgICovXG4gIGZvciAoYml0cyA9IG1heF9sZW5ndGg7IGJpdHMgIT09IDA7IGJpdHMtLSkge1xuICAgIG4gPSBzLmJsX2NvdW50W2JpdHNdO1xuICAgIHdoaWxlIChuICE9PSAwKSB7XG4gICAgICBtID0gcy5oZWFwWy0taF07XG4gICAgICBpZiAobSA+IG1heF9jb2RlKSB7IGNvbnRpbnVlOyB9XG4gICAgICBpZiAodHJlZVttICogMiArIDFdLyouTGVuKi8gIT09IGJpdHMpIHtcbiAgICAgICAgLy8gVHJhY2UoKHN0ZGVycixcImNvZGUgJWQgYml0cyAlZC0+JWRcXG5cIiwgbSwgdHJlZVttXS5MZW4sIGJpdHMpKTtcbiAgICAgICAgcy5vcHRfbGVuICs9IChiaXRzIC0gdHJlZVttICogMiArIDFdLyouTGVuKi8pICogdHJlZVttICogMl0vKi5GcmVxKi87XG4gICAgICAgIHRyZWVbbSAqIDIgKyAxXS8qLkxlbiovID0gYml0cztcbiAgICAgIH1cbiAgICAgIG4tLTtcbiAgICB9XG4gIH1cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEdlbmVyYXRlIHRoZSBjb2RlcyBmb3IgYSBnaXZlbiB0cmVlIGFuZCBiaXQgY291bnRzICh3aGljaCBuZWVkIG5vdCBiZVxuICogb3B0aW1hbCkuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBhcnJheSBibF9jb3VudCBjb250YWlucyB0aGUgYml0IGxlbmd0aCBzdGF0aXN0aWNzIGZvclxuICogdGhlIGdpdmVuIHRyZWUgYW5kIHRoZSBmaWVsZCBsZW4gaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cy5cbiAqIE9VVCBhc3NlcnRpb246IHRoZSBmaWVsZCBjb2RlIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMgb2Ygbm9uXG4gKiAgICAgemVybyBjb2RlIGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24gZ2VuX2NvZGVzKHRyZWUsIG1heF9jb2RlLCBibF9jb3VudClcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAgICAgICAgICAgIC8qIHRoZSB0cmVlIHRvIGRlY29yYXRlICovXG4vLyAgICBpbnQgbWF4X2NvZGU7ICAgICAgICAgICAgICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbi8vICAgIHVzaGYgKmJsX2NvdW50OyAgICAgICAgICAgIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggKi9cbntcbiAgdmFyIG5leHRfY29kZSA9IG5ldyBBcnJheShNQVhfQklUUyArIDEpOyAvKiBuZXh0IGNvZGUgdmFsdWUgZm9yIGVhY2ggYml0IGxlbmd0aCAqL1xuICB2YXIgY29kZSA9IDA7ICAgICAgICAgICAgICAvKiBydW5uaW5nIGNvZGUgdmFsdWUgKi9cbiAgdmFyIGJpdHM7ICAgICAgICAgICAgICAgICAgLyogYml0IGluZGV4ICovXG4gIHZhciBuOyAgICAgICAgICAgICAgICAgICAgIC8qIGNvZGUgaW5kZXggKi9cblxuICAvKiBUaGUgZGlzdHJpYnV0aW9uIGNvdW50cyBhcmUgZmlyc3QgdXNlZCB0byBnZW5lcmF0ZSB0aGUgY29kZSB2YWx1ZXNcbiAgICogd2l0aG91dCBiaXQgcmV2ZXJzYWwuXG4gICAqL1xuICBmb3IgKGJpdHMgPSAxOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHtcbiAgICBuZXh0X2NvZGVbYml0c10gPSBjb2RlID0gKGNvZGUgKyBibF9jb3VudFtiaXRzIC0gMV0pIDw8IDE7XG4gIH1cbiAgLyogQ2hlY2sgdGhhdCB0aGUgYml0IGNvdW50cyBpbiBibF9jb3VudCBhcmUgY29uc2lzdGVudC4gVGhlIGxhc3QgY29kZVxuICAgKiBtdXN0IGJlIGFsbCBvbmVzLlxuICAgKi9cbiAgLy9Bc3NlcnQgKGNvZGUgKyBibF9jb3VudFtNQVhfQklUU10tMSA9PSAoMTw8TUFYX0JJVFMpLTEsXG4gIC8vICAgICAgICBcImluY29uc2lzdGVudCBiaXQgY291bnRzXCIpO1xuICAvL1RyYWNldigoc3RkZXJyLFwiXFxuZ2VuX2NvZGVzOiBtYXhfY29kZSAlZCBcIiwgbWF4X2NvZGUpKTtcblxuICBmb3IgKG4gPSAwOyAgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgdmFyIGxlbiA9IHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovO1xuICAgIGlmIChsZW4gPT09IDApIHsgY29udGludWU7IH1cbiAgICAvKiBOb3cgcmV2ZXJzZSB0aGUgYml0cyAqL1xuICAgIHRyZWVbbiAqIDJdLyouQ29kZSovID0gYmlfcmV2ZXJzZShuZXh0X2NvZGVbbGVuXSsrLCBsZW4pO1xuXG4gICAgLy9UcmFjZWN2KHRyZWUgIT0gc3RhdGljX2x0cmVlLCAoc3RkZXJyLFwiXFxubiAlM2QgJWMgbCAlMmQgYyAlNHggKCV4KSBcIixcbiAgICAvLyAgICAgbiwgKGlzZ3JhcGgobikgPyBuIDogJyAnKSwgbGVuLCB0cmVlW25dLkNvZGUsIG5leHRfY29kZVtsZW5dLTEpKTtcbiAgfVxufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgdmFyaW91cyAnY29uc3RhbnQnIHRhYmxlcy5cbiAqL1xuZnVuY3Rpb24gdHJfc3RhdGljX2luaXQoKSB7XG4gIHZhciBuOyAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciB0cmVlIGVsZW1lbnRzICovXG4gIHZhciBiaXRzOyAgICAgLyogYml0IGNvdW50ZXIgKi9cbiAgdmFyIGxlbmd0aDsgICAvKiBsZW5ndGggdmFsdWUgKi9cbiAgdmFyIGNvZGU7ICAgICAvKiBjb2RlIHZhbHVlICovXG4gIHZhciBkaXN0OyAgICAgLyogZGlzdGFuY2UgaW5kZXggKi9cbiAgdmFyIGJsX2NvdW50ID0gbmV3IEFycmF5KE1BWF9CSVRTICsgMSk7XG4gIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggZm9yIGFuIG9wdGltYWwgdHJlZSAqL1xuXG4gIC8vIGRvIGNoZWNrIGluIF90cl9pbml0KClcbiAgLy9pZiAoc3RhdGljX2luaXRfZG9uZSkgcmV0dXJuO1xuXG4gIC8qIEZvciBzb21lIGVtYmVkZGVkIHRhcmdldHMsIGdsb2JhbCB2YXJpYWJsZXMgYXJlIG5vdCBpbml0aWFsaXplZDogKi9cbi8qI2lmZGVmIE5PX0lOSVRfR0xPQkFMX1BPSU5URVJTXG4gIHN0YXRpY19sX2Rlc2Muc3RhdGljX3RyZWUgPSBzdGF0aWNfbHRyZWU7XG4gIHN0YXRpY19sX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2xiaXRzO1xuICBzdGF0aWNfZF9kZXNjLnN0YXRpY190cmVlID0gc3RhdGljX2R0cmVlO1xuICBzdGF0aWNfZF9kZXNjLmV4dHJhX2JpdHMgPSBleHRyYV9kYml0cztcbiAgc3RhdGljX2JsX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2JsYml0cztcbiNlbmRpZiovXG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgbWFwcGluZyBsZW5ndGggKDAuLjI1NSkgLT4gbGVuZ3RoIGNvZGUgKDAuLjI4KSAqL1xuICBsZW5ndGggPSAwO1xuICBmb3IgKGNvZGUgPSAwOyBjb2RlIDwgTEVOR1RIX0NPREVTIC0gMTsgY29kZSsrKSB7XG4gICAgYmFzZV9sZW5ndGhbY29kZV0gPSBsZW5ndGg7XG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IGV4dHJhX2xiaXRzW2NvZGVdKTsgbisrKSB7XG4gICAgICBfbGVuZ3RoX2NvZGVbbGVuZ3RoKytdID0gY29kZTtcbiAgICB9XG4gIH1cbiAgLy9Bc3NlcnQgKGxlbmd0aCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IGxlbmd0aCAhPSAyNTZcIik7XG4gIC8qIE5vdGUgdGhhdCB0aGUgbGVuZ3RoIDI1NSAobWF0Y2ggbGVuZ3RoIDI1OCkgY2FuIGJlIHJlcHJlc2VudGVkXG4gICAqIGluIHR3byBkaWZmZXJlbnQgd2F5czogY29kZSAyODQgKyA1IGJpdHMgb3IgY29kZSAyODUsIHNvIHdlXG4gICAqIG92ZXJ3cml0ZSBsZW5ndGhfY29kZVsyNTVdIHRvIHVzZSB0aGUgYmVzdCBlbmNvZGluZzpcbiAgICovXG4gIF9sZW5ndGhfY29kZVtsZW5ndGggLSAxXSA9IGNvZGU7XG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgbWFwcGluZyBkaXN0ICgwLi4zMkspIC0+IGRpc3QgY29kZSAoMC4uMjkpICovXG4gIGRpc3QgPSAwO1xuICBmb3IgKGNvZGUgPSAwOyBjb2RlIDwgMTY7IGNvZGUrKykge1xuICAgIGJhc2VfZGlzdFtjb2RlXSA9IGRpc3Q7XG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IGV4dHJhX2RiaXRzW2NvZGVdKTsgbisrKSB7XG4gICAgICBfZGlzdF9jb2RlW2Rpc3QrK10gPSBjb2RlO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAoZGlzdCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IGRpc3QgIT0gMjU2XCIpO1xuICBkaXN0ID4+PSA3OyAvKiBmcm9tIG5vdyBvbiwgYWxsIGRpc3RhbmNlcyBhcmUgZGl2aWRlZCBieSAxMjggKi9cbiAgZm9yICg7IGNvZGUgPCBEX0NPREVTOyBjb2RlKyspIHtcbiAgICBiYXNlX2Rpc3RbY29kZV0gPSBkaXN0IDw8IDc7XG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IChleHRyYV9kYml0c1tjb2RlXSAtIDcpKTsgbisrKSB7XG4gICAgICBfZGlzdF9jb2RlWzI1NiArIGRpc3QrK10gPSBjb2RlO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAoZGlzdCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IDI1NitkaXN0ICE9IDUxMlwiKTtcblxuICAvKiBDb25zdHJ1Y3QgdGhlIGNvZGVzIG9mIHRoZSBzdGF0aWMgbGl0ZXJhbCB0cmVlICovXG4gIGZvciAoYml0cyA9IDA7IGJpdHMgPD0gTUFYX0JJVFM7IGJpdHMrKykge1xuICAgIGJsX2NvdW50W2JpdHNdID0gMDtcbiAgfVxuXG4gIG4gPSAwO1xuICB3aGlsZSAobiA8PSAxNDMpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gODtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOF0rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyNTUpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gOTtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOV0rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyNzkpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gNztcbiAgICBuKys7XG4gICAgYmxfY291bnRbN10rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyODcpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gODtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOF0rKztcbiAgfVxuICAvKiBDb2RlcyAyODYgYW5kIDI4NyBkbyBub3QgZXhpc3QsIGJ1dCB3ZSBtdXN0IGluY2x1ZGUgdGhlbSBpbiB0aGVcbiAgICogdHJlZSBjb25zdHJ1Y3Rpb24gdG8gZ2V0IGEgY2Fub25pY2FsIEh1ZmZtYW4gdHJlZSAobG9uZ2VzdCBjb2RlXG4gICAqIGFsbCBvbmVzKVxuICAgKi9cbiAgZ2VuX2NvZGVzKHN0YXRpY19sdHJlZSwgTF9DT0RFUyArIDEsIGJsX2NvdW50KTtcblxuICAvKiBUaGUgc3RhdGljIGRpc3RhbmNlIHRyZWUgaXMgdHJpdmlhbDogKi9cbiAgZm9yIChuID0gMDsgbiA8IERfQ09ERVM7IG4rKykge1xuICAgIHN0YXRpY19kdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA1O1xuICAgIHN0YXRpY19kdHJlZVtuICogMl0vKi5Db2RlKi8gPSBiaV9yZXZlcnNlKG4sIDUpO1xuICB9XG5cbiAgLy8gTm93IGRhdGEgcmVhZHkgYW5kIHdlIGNhbiBpbml0IHN0YXRpYyB0cmVlc1xuICBzdGF0aWNfbF9kZXNjID0gbmV3IFN0YXRpY1RyZWVEZXNjKHN0YXRpY19sdHJlZSwgZXh0cmFfbGJpdHMsIExJVEVSQUxTICsgMSwgTF9DT0RFUywgTUFYX0JJVFMpO1xuICBzdGF0aWNfZF9kZXNjID0gbmV3IFN0YXRpY1RyZWVEZXNjKHN0YXRpY19kdHJlZSwgZXh0cmFfZGJpdHMsIDAsICAgICAgICAgIERfQ09ERVMsIE1BWF9CSVRTKTtcbiAgc3RhdGljX2JsX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2MobmV3IEFycmF5KDApLCBleHRyYV9ibGJpdHMsIDAsICAgICAgICAgQkxfQ09ERVMsIE1BWF9CTF9CSVRTKTtcblxuICAvL3N0YXRpY19pbml0X2RvbmUgPSB0cnVlO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSBhIG5ldyBibG9jay5cbiAqL1xuZnVuY3Rpb24gaW5pdF9ibG9jayhzKSB7XG4gIHZhciBuOyAvKiBpdGVyYXRlcyBvdmVyIHRyZWUgZWxlbWVudHMgKi9cblxuICAvKiBJbml0aWFsaXplIHRoZSB0cmVlcy4gKi9cbiAgZm9yIChuID0gMDsgbiA8IExfQ09ERVM7ICBuKyspIHsgcy5keW5fbHRyZWVbbiAqIDJdLyouRnJlcSovID0gMDsgfVxuICBmb3IgKG4gPSAwOyBuIDwgRF9DT0RFUzsgIG4rKykgeyBzLmR5bl9kdHJlZVtuICogMl0vKi5GcmVxKi8gPSAwOyB9XG4gIGZvciAobiA9IDA7IG4gPCBCTF9DT0RFUzsgbisrKSB7IHMuYmxfdHJlZVtuICogMl0vKi5GcmVxKi8gPSAwOyB9XG5cbiAgcy5keW5fbHRyZWVbRU5EX0JMT0NLICogMl0vKi5GcmVxKi8gPSAxO1xuICBzLm9wdF9sZW4gPSBzLnN0YXRpY19sZW4gPSAwO1xuICBzLmxhc3RfbGl0ID0gcy5tYXRjaGVzID0gMDtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZsdXNoIHRoZSBiaXQgYnVmZmVyIGFuZCBhbGlnbiB0aGUgb3V0cHV0IG9uIGEgYnl0ZSBib3VuZGFyeVxuICovXG5mdW5jdGlvbiBiaV93aW5kdXAocylcbntcbiAgaWYgKHMuYmlfdmFsaWQgPiA4KSB7XG4gICAgcHV0X3Nob3J0KHMsIHMuYmlfYnVmKTtcbiAgfSBlbHNlIGlmIChzLmJpX3ZhbGlkID4gMCkge1xuICAgIC8vcHV0X2J5dGUocywgKEJ5dGUpcy0+YmlfYnVmKTtcbiAgICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IHMuYmlfYnVmO1xuICB9XG4gIHMuYmlfYnVmID0gMDtcbiAgcy5iaV92YWxpZCA9IDA7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weSBhIHN0b3JlZCBibG9jaywgc3RvcmluZyBmaXJzdCB0aGUgbGVuZ3RoIGFuZCBpdHNcbiAqIG9uZSdzIGNvbXBsZW1lbnQgaWYgcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiBjb3B5X2Jsb2NrKHMsIGJ1ZiwgbGVuLCBoZWFkZXIpXG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgICAgKmJ1ZjsgICAgLyogdGhlIGlucHV0IGRhdGEgKi9cbi8vdW5zaWduZWQgbGVuOyAgICAgLyogaXRzIGxlbmd0aCAqL1xuLy9pbnQgICAgICBoZWFkZXI7ICAvKiB0cnVlIGlmIGJsb2NrIGhlYWRlciBtdXN0IGJlIHdyaXR0ZW4gKi9cbntcbiAgYmlfd2luZHVwKHMpOyAgICAgICAgLyogYWxpZ24gb24gYnl0ZSBib3VuZGFyeSAqL1xuXG4gIGlmIChoZWFkZXIpIHtcbiAgICBwdXRfc2hvcnQocywgbGVuKTtcbiAgICBwdXRfc2hvcnQocywgfmxlbik7XG4gIH1cbi8vICB3aGlsZSAobGVuLS0pIHtcbi8vICAgIHB1dF9ieXRlKHMsICpidWYrKyk7XG4vLyAgfVxuICB1dGlscy5hcnJheVNldChzLnBlbmRpbmdfYnVmLCBzLndpbmRvdywgYnVmLCBsZW4sIHMucGVuZGluZyk7XG4gIHMucGVuZGluZyArPSBsZW47XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29tcGFyZXMgdG8gc3VidHJlZXMsIHVzaW5nIHRoZSB0cmVlIGRlcHRoIGFzIHRpZSBicmVha2VyIHdoZW5cbiAqIHRoZSBzdWJ0cmVlcyBoYXZlIGVxdWFsIGZyZXF1ZW5jeS4gVGhpcyBtaW5pbWl6ZXMgdGhlIHdvcnN0IGNhc2UgbGVuZ3RoLlxuICovXG5mdW5jdGlvbiBzbWFsbGVyKHRyZWUsIG4sIG0sIGRlcHRoKSB7XG4gIHZhciBfbjIgPSBuICogMjtcbiAgdmFyIF9tMiA9IG0gKiAyO1xuICByZXR1cm4gKHRyZWVbX24yXS8qLkZyZXEqLyA8IHRyZWVbX20yXS8qLkZyZXEqLyB8fFxuICAgICAgICAgKHRyZWVbX24yXS8qLkZyZXEqLyA9PT0gdHJlZVtfbTJdLyouRnJlcSovICYmIGRlcHRoW25dIDw9IGRlcHRoW21dKSk7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogUmVzdG9yZSB0aGUgaGVhcCBwcm9wZXJ0eSBieSBtb3ZpbmcgZG93biB0aGUgdHJlZSBzdGFydGluZyBhdCBub2RlIGssXG4gKiBleGNoYW5naW5nIGEgbm9kZSB3aXRoIHRoZSBzbWFsbGVzdCBvZiBpdHMgdHdvIHNvbnMgaWYgbmVjZXNzYXJ5LCBzdG9wcGluZ1xuICogd2hlbiB0aGUgaGVhcCBwcm9wZXJ0eSBpcyByZS1lc3RhYmxpc2hlZCAoZWFjaCBmYXRoZXIgc21hbGxlciB0aGFuIGl0c1xuICogdHdvIHNvbnMpLlxuICovXG5mdW5jdGlvbiBwcWRvd25oZWFwKHMsIHRyZWUsIGspXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgY3RfZGF0YSAqdHJlZTsgIC8qIHRoZSB0cmVlIHRvIHJlc3RvcmUgKi9cbi8vICAgIGludCBrOyAgICAgICAgICAgICAgIC8qIG5vZGUgdG8gbW92ZSBkb3duICovXG57XG4gIHZhciB2ID0gcy5oZWFwW2tdO1xuICB2YXIgaiA9IGsgPDwgMTsgIC8qIGxlZnQgc29uIG9mIGsgKi9cbiAgd2hpbGUgKGogPD0gcy5oZWFwX2xlbikge1xuICAgIC8qIFNldCBqIHRvIHRoZSBzbWFsbGVzdCBvZiB0aGUgdHdvIHNvbnM6ICovXG4gICAgaWYgKGogPCBzLmhlYXBfbGVuICYmXG4gICAgICBzbWFsbGVyKHRyZWUsIHMuaGVhcFtqICsgMV0sIHMuaGVhcFtqXSwgcy5kZXB0aCkpIHtcbiAgICAgIGorKztcbiAgICB9XG4gICAgLyogRXhpdCBpZiB2IGlzIHNtYWxsZXIgdGhhbiBib3RoIHNvbnMgKi9cbiAgICBpZiAoc21hbGxlcih0cmVlLCB2LCBzLmhlYXBbal0sIHMuZGVwdGgpKSB7IGJyZWFrOyB9XG5cbiAgICAvKiBFeGNoYW5nZSB2IHdpdGggdGhlIHNtYWxsZXN0IHNvbiAqL1xuICAgIHMuaGVhcFtrXSA9IHMuaGVhcFtqXTtcbiAgICBrID0gajtcblxuICAgIC8qIEFuZCBjb250aW51ZSBkb3duIHRoZSB0cmVlLCBzZXR0aW5nIGogdG8gdGhlIGxlZnQgc29uIG9mIGsgKi9cbiAgICBqIDw8PSAxO1xuICB9XG4gIHMuaGVhcFtrXSA9IHY7XG59XG5cblxuLy8gaW5saW5lZCBtYW51YWxseVxuLy8gdmFyIFNNQUxMRVNUID0gMTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIHRoZSBibG9jayBkYXRhIGNvbXByZXNzZWQgdXNpbmcgdGhlIGdpdmVuIEh1ZmZtYW4gdHJlZXNcbiAqL1xuZnVuY3Rpb24gY29tcHJlc3NfYmxvY2socywgbHRyZWUsIGR0cmVlKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGNvbnN0IGN0X2RhdGEgKmx0cmVlOyAvKiBsaXRlcmFsIHRyZWUgKi9cbi8vICAgIGNvbnN0IGN0X2RhdGEgKmR0cmVlOyAvKiBkaXN0YW5jZSB0cmVlICovXG57XG4gIHZhciBkaXN0OyAgICAgICAgICAgLyogZGlzdGFuY2Ugb2YgbWF0Y2hlZCBzdHJpbmcgKi9cbiAgdmFyIGxjOyAgICAgICAgICAgICAvKiBtYXRjaCBsZW5ndGggb3IgdW5tYXRjaGVkIGNoYXIgKGlmIGRpc3QgPT0gMCkgKi9cbiAgdmFyIGx4ID0gMDsgICAgICAgICAvKiBydW5uaW5nIGluZGV4IGluIGxfYnVmICovXG4gIHZhciBjb2RlOyAgICAgICAgICAgLyogdGhlIGNvZGUgdG8gc2VuZCAqL1xuICB2YXIgZXh0cmE7ICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzIHRvIHNlbmQgKi9cblxuICBpZiAocy5sYXN0X2xpdCAhPT0gMCkge1xuICAgIGRvIHtcbiAgICAgIGRpc3QgPSAocy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgbHggKiAyXSA8PCA4KSB8IChzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBseCAqIDIgKyAxXSk7XG4gICAgICBsYyA9IHMucGVuZGluZ19idWZbcy5sX2J1ZiArIGx4XTtcbiAgICAgIGx4Kys7XG5cbiAgICAgIGlmIChkaXN0ID09PSAwKSB7XG4gICAgICAgIHNlbmRfY29kZShzLCBsYywgbHRyZWUpOyAvKiBzZW5kIGEgbGl0ZXJhbCBieXRlICovXG4gICAgICAgIC8vVHJhY2Vjdihpc2dyYXBoKGxjKSwgKHN0ZGVycixcIiAnJWMnIFwiLCBsYykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogSGVyZSwgbGMgaXMgdGhlIG1hdGNoIGxlbmd0aCAtIE1JTl9NQVRDSCAqL1xuICAgICAgICBjb2RlID0gX2xlbmd0aF9jb2RlW2xjXTtcbiAgICAgICAgc2VuZF9jb2RlKHMsIGNvZGUgKyBMSVRFUkFMUyArIDEsIGx0cmVlKTsgLyogc2VuZCB0aGUgbGVuZ3RoIGNvZGUgKi9cbiAgICAgICAgZXh0cmEgPSBleHRyYV9sYml0c1tjb2RlXTtcbiAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7XG4gICAgICAgICAgbGMgLT0gYmFzZV9sZW5ndGhbY29kZV07XG4gICAgICAgICAgc2VuZF9iaXRzKHMsIGxjLCBleHRyYSk7ICAgICAgIC8qIHNlbmQgdGhlIGV4dHJhIGxlbmd0aCBiaXRzICovXG4gICAgICAgIH1cbiAgICAgICAgZGlzdC0tOyAvKiBkaXN0IGlzIG5vdyB0aGUgbWF0Y2ggZGlzdGFuY2UgLSAxICovXG4gICAgICAgIGNvZGUgPSBkX2NvZGUoZGlzdCk7XG4gICAgICAgIC8vQXNzZXJ0IChjb2RlIDwgRF9DT0RFUywgXCJiYWQgZF9jb2RlXCIpO1xuXG4gICAgICAgIHNlbmRfY29kZShzLCBjb2RlLCBkdHJlZSk7ICAgICAgIC8qIHNlbmQgdGhlIGRpc3RhbmNlIGNvZGUgKi9cbiAgICAgICAgZXh0cmEgPSBleHRyYV9kYml0c1tjb2RlXTtcbiAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7XG4gICAgICAgICAgZGlzdCAtPSBiYXNlX2Rpc3RbY29kZV07XG4gICAgICAgICAgc2VuZF9iaXRzKHMsIGRpc3QsIGV4dHJhKTsgICAvKiBzZW5kIHRoZSBleHRyYSBkaXN0YW5jZSBiaXRzICovXG4gICAgICAgIH1cbiAgICAgIH0gLyogbGl0ZXJhbCBvciBtYXRjaCBwYWlyID8gKi9cblxuICAgICAgLyogQ2hlY2sgdGhhdCB0aGUgb3ZlcmxheSBiZXR3ZWVuIHBlbmRpbmdfYnVmIGFuZCBkX2J1ZitsX2J1ZiBpcyBvazogKi9cbiAgICAgIC8vQXNzZXJ0KCh1SW50KShzLT5wZW5kaW5nKSA8IHMtPmxpdF9idWZzaXplICsgMipseCxcbiAgICAgIC8vICAgICAgIFwicGVuZGluZ0J1ZiBvdmVyZmxvd1wiKTtcblxuICAgIH0gd2hpbGUgKGx4IDwgcy5sYXN0X2xpdCk7XG4gIH1cblxuICBzZW5kX2NvZGUocywgRU5EX0JMT0NLLCBsdHJlZSk7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdHJ1Y3Qgb25lIEh1ZmZtYW4gdHJlZSBhbmQgYXNzaWducyB0aGUgY29kZSBiaXQgc3RyaW5ncyBhbmQgbGVuZ3Rocy5cbiAqIFVwZGF0ZSB0aGUgdG90YWwgYml0IGxlbmd0aCBmb3IgdGhlIGN1cnJlbnQgYmxvY2suXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZCBmcmVxIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMuXG4gKiBPVVQgYXNzZXJ0aW9uczogdGhlIGZpZWxkcyBsZW4gYW5kIGNvZGUgYXJlIHNldCB0byB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RoXG4gKiAgICAgYW5kIGNvcnJlc3BvbmRpbmcgY29kZS4gVGhlIGxlbmd0aCBvcHRfbGVuIGlzIHVwZGF0ZWQ7IHN0YXRpY19sZW4gaXNcbiAqICAgICBhbHNvIHVwZGF0ZWQgaWYgc3RyZWUgaXMgbm90IG51bGwuIFRoZSBmaWVsZCBtYXhfY29kZSBpcyBzZXQuXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkX3RyZWUocywgZGVzYylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICB0cmVlX2Rlc2MgKmRlc2M7IC8qIHRoZSB0cmVlIGRlc2NyaXB0b3IgKi9cbntcbiAgdmFyIHRyZWUgICAgID0gZGVzYy5keW5fdHJlZTtcbiAgdmFyIHN0cmVlICAgID0gZGVzYy5zdGF0X2Rlc2Muc3RhdGljX3RyZWU7XG4gIHZhciBoYXNfc3RyZWUgPSBkZXNjLnN0YXRfZGVzYy5oYXNfc3RyZWU7XG4gIHZhciBlbGVtcyAgICA9IGRlc2Muc3RhdF9kZXNjLmVsZW1zO1xuICB2YXIgbiwgbTsgICAgICAgICAgLyogaXRlcmF0ZSBvdmVyIGhlYXAgZWxlbWVudHMgKi9cbiAgdmFyIG1heF9jb2RlID0gLTE7IC8qIGxhcmdlc3QgY29kZSB3aXRoIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xuICB2YXIgbm9kZTsgICAgICAgICAgLyogbmV3IG5vZGUgYmVpbmcgY3JlYXRlZCAqL1xuXG4gIC8qIENvbnN0cnVjdCB0aGUgaW5pdGlhbCBoZWFwLCB3aXRoIGxlYXN0IGZyZXF1ZW50IGVsZW1lbnQgaW5cbiAgICogaGVhcFtTTUFMTEVTVF0uIFRoZSBzb25zIG9mIGhlYXBbbl0gYXJlIGhlYXBbMipuXSBhbmQgaGVhcFsyKm4rMV0uXG4gICAqIGhlYXBbMF0gaXMgbm90IHVzZWQuXG4gICAqL1xuICBzLmhlYXBfbGVuID0gMDtcbiAgcy5oZWFwX21heCA9IEhFQVBfU0laRTtcblxuICBmb3IgKG4gPSAwOyBuIDwgZWxlbXM7IG4rKykge1xuICAgIGlmICh0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgICAgcy5oZWFwWysrcy5oZWFwX2xlbl0gPSBtYXhfY29kZSA9IG47XG4gICAgICBzLmRlcHRoW25dID0gMDtcblxuICAgIH0gZWxzZSB7XG4gICAgICB0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDA7XG4gICAgfVxuICB9XG5cbiAgLyogVGhlIHBremlwIGZvcm1hdCByZXF1aXJlcyB0aGF0IGF0IGxlYXN0IG9uZSBkaXN0YW5jZSBjb2RlIGV4aXN0cyxcbiAgICogYW5kIHRoYXQgYXQgbGVhc3Qgb25lIGJpdCBzaG91bGQgYmUgc2VudCBldmVuIGlmIHRoZXJlIGlzIG9ubHkgb25lXG4gICAqIHBvc3NpYmxlIGNvZGUuIFNvIHRvIGF2b2lkIHNwZWNpYWwgY2hlY2tzIGxhdGVyIG9uIHdlIGZvcmNlIGF0IGxlYXN0XG4gICAqIHR3byBjb2RlcyBvZiBub24gemVybyBmcmVxdWVuY3kuXG4gICAqL1xuICB3aGlsZSAocy5oZWFwX2xlbiA8IDIpIHtcbiAgICBub2RlID0gcy5oZWFwWysrcy5oZWFwX2xlbl0gPSAobWF4X2NvZGUgPCAyID8gKyttYXhfY29kZSA6IDApO1xuICAgIHRyZWVbbm9kZSAqIDJdLyouRnJlcSovID0gMTtcbiAgICBzLmRlcHRoW25vZGVdID0gMDtcbiAgICBzLm9wdF9sZW4tLTtcblxuICAgIGlmIChoYXNfc3RyZWUpIHtcbiAgICAgIHMuc3RhdGljX2xlbiAtPSBzdHJlZVtub2RlICogMiArIDFdLyouTGVuKi87XG4gICAgfVxuICAgIC8qIG5vZGUgaXMgMCBvciAxIHNvIGl0IGRvZXMgbm90IGhhdmUgZXh0cmEgYml0cyAqL1xuICB9XG4gIGRlc2MubWF4X2NvZGUgPSBtYXhfY29kZTtcblxuICAvKiBUaGUgZWxlbWVudHMgaGVhcFtoZWFwX2xlbi8yKzEgLi4gaGVhcF9sZW5dIGFyZSBsZWF2ZXMgb2YgdGhlIHRyZWUsXG4gICAqIGVzdGFibGlzaCBzdWItaGVhcHMgb2YgaW5jcmVhc2luZyBsZW5ndGhzOlxuICAgKi9cbiAgZm9yIChuID0gKHMuaGVhcF9sZW4gPj4gMS8qaW50IC8yKi8pOyBuID49IDE7IG4tLSkgeyBwcWRvd25oZWFwKHMsIHRyZWUsIG4pOyB9XG5cbiAgLyogQ29uc3RydWN0IHRoZSBIdWZmbWFuIHRyZWUgYnkgcmVwZWF0ZWRseSBjb21iaW5pbmcgdGhlIGxlYXN0IHR3b1xuICAgKiBmcmVxdWVudCBub2Rlcy5cbiAgICovXG4gIG5vZGUgPSBlbGVtczsgICAgICAgICAgICAgIC8qIG5leHQgaW50ZXJuYWwgbm9kZSBvZiB0aGUgdHJlZSAqL1xuICBkbyB7XG4gICAgLy9wcXJlbW92ZShzLCB0cmVlLCBuKTsgIC8qIG4gPSBub2RlIG9mIGxlYXN0IGZyZXF1ZW5jeSAqL1xuICAgIC8qKiogcHFyZW1vdmUgKioqL1xuICAgIG4gPSBzLmhlYXBbMS8qU01BTExFU1QqL107XG4gICAgcy5oZWFwWzEvKlNNQUxMRVNUKi9dID0gcy5oZWFwW3MuaGVhcF9sZW4tLV07XG4gICAgcHFkb3duaGVhcChzLCB0cmVlLCAxLypTTUFMTEVTVCovKTtcbiAgICAvKioqL1xuXG4gICAgbSA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTsgLyogbSA9IG5vZGUgb2YgbmV4dCBsZWFzdCBmcmVxdWVuY3kgKi9cblxuICAgIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gbjsgLyoga2VlcCB0aGUgbm9kZXMgc29ydGVkIGJ5IGZyZXF1ZW5jeSAqL1xuICAgIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gbTtcblxuICAgIC8qIENyZWF0ZSBhIG5ldyBub2RlIGZhdGhlciBvZiBuIGFuZCBtICovXG4gICAgdHJlZVtub2RlICogMl0vKi5GcmVxKi8gPSB0cmVlW24gKiAyXS8qLkZyZXEqLyArIHRyZWVbbSAqIDJdLyouRnJlcSovO1xuICAgIHMuZGVwdGhbbm9kZV0gPSAocy5kZXB0aFtuXSA+PSBzLmRlcHRoW21dID8gcy5kZXB0aFtuXSA6IHMuZGVwdGhbbV0pICsgMTtcbiAgICB0cmVlW24gKiAyICsgMV0vKi5EYWQqLyA9IHRyZWVbbSAqIDIgKyAxXS8qLkRhZCovID0gbm9kZTtcblxuICAgIC8qIGFuZCBpbnNlcnQgdGhlIG5ldyBub2RlIGluIHRoZSBoZWFwICovXG4gICAgcy5oZWFwWzEvKlNNQUxMRVNUKi9dID0gbm9kZSsrO1xuICAgIHBxZG93bmhlYXAocywgdHJlZSwgMS8qU01BTExFU1QqLyk7XG5cbiAgfSB3aGlsZSAocy5oZWFwX2xlbiA+PSAyKTtcblxuICBzLmhlYXBbLS1zLmhlYXBfbWF4XSA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTtcblxuICAvKiBBdCB0aGlzIHBvaW50LCB0aGUgZmllbGRzIGZyZXEgYW5kIGRhZCBhcmUgc2V0LiBXZSBjYW4gbm93XG4gICAqIGdlbmVyYXRlIHRoZSBiaXQgbGVuZ3Rocy5cbiAgICovXG4gIGdlbl9iaXRsZW4ocywgZGVzYyk7XG5cbiAgLyogVGhlIGZpZWxkIGxlbiBpcyBub3cgc2V0LCB3ZSBjYW4gZ2VuZXJhdGUgdGhlIGJpdCBjb2RlcyAqL1xuICBnZW5fY29kZXModHJlZSwgbWF4X2NvZGUsIHMuYmxfY291bnQpO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2NhbiBhIGxpdGVyYWwgb3IgZGlzdGFuY2UgdHJlZSB0byBkZXRlcm1pbmUgdGhlIGZyZXF1ZW5jaWVzIG9mIHRoZSBjb2Rlc1xuICogaW4gdGhlIGJpdCBsZW5ndGggdHJlZS5cbiAqL1xuZnVuY3Rpb24gc2Nhbl90cmVlKHMsIHRyZWUsIG1heF9jb2RlKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAgLyogdGhlIHRyZWUgdG8gYmUgc2Nhbm5lZCAqL1xuLy8gICAgaW50IG1heF9jb2RlOyAgICAvKiBhbmQgaXRzIGxhcmdlc3QgY29kZSBvZiBub24gemVybyBmcmVxdWVuY3kgKi9cbntcbiAgdmFyIG47ICAgICAgICAgICAgICAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciBhbGwgdHJlZSBlbGVtZW50cyAqL1xuICB2YXIgcHJldmxlbiA9IC0xOyAgICAgICAgICAvKiBsYXN0IGVtaXR0ZWQgbGVuZ3RoICovXG4gIHZhciBjdXJsZW47ICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBvZiBjdXJyZW50IGNvZGUgKi9cblxuICB2YXIgbmV4dGxlbiA9IHRyZWVbMCAqIDIgKyAxXS8qLkxlbiovOyAvKiBsZW5ndGggb2YgbmV4dCBjb2RlICovXG5cbiAgdmFyIGNvdW50ID0gMDsgICAgICAgICAgICAgLyogcmVwZWF0IGNvdW50IG9mIHRoZSBjdXJyZW50IGNvZGUgKi9cbiAgdmFyIG1heF9jb3VudCA9IDc7ICAgICAgICAgLyogbWF4IHJlcGVhdCBjb3VudCAqL1xuICB2YXIgbWluX2NvdW50ID0gNDsgICAgICAgICAvKiBtaW4gcmVwZWF0IGNvdW50ICovXG5cbiAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgbWluX2NvdW50ID0gMztcbiAgfVxuICB0cmVlWyhtYXhfY29kZSArIDEpICogMiArIDFdLyouTGVuKi8gPSAweGZmZmY7IC8qIGd1YXJkICovXG5cbiAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgY3VybGVuID0gbmV4dGxlbjtcbiAgICBuZXh0bGVuID0gdHJlZVsobiArIDEpICogMiArIDFdLyouTGVuKi87XG5cbiAgICBpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xuICAgICAgcy5ibF90cmVlW2N1cmxlbiAqIDJdLyouRnJlcSovICs9IGNvdW50O1xuXG4gICAgfSBlbHNlIGlmIChjdXJsZW4gIT09IDApIHtcblxuICAgICAgaWYgKGN1cmxlbiAhPT0gcHJldmxlbikgeyBzLmJsX3RyZWVbY3VybGVuICogMl0vKi5GcmVxKi8rKzsgfVxuICAgICAgcy5ibF90cmVlW1JFUF8zXzYgKiAyXS8qLkZyZXEqLysrO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xuICAgICAgcy5ibF90cmVlW1JFUFpfM18xMCAqIDJdLyouRnJlcSovKys7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgcy5ibF90cmVlW1JFUFpfMTFfMTM4ICogMl0vKi5GcmVxKi8rKztcbiAgICB9XG5cbiAgICBjb3VudCA9IDA7XG4gICAgcHJldmxlbiA9IGN1cmxlbjtcblxuICAgIGlmIChuZXh0bGVuID09PSAwKSB7XG4gICAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgICBtaW5fY291bnQgPSAzO1xuXG4gICAgfSBlbHNlIGlmIChjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIG1heF9jb3VudCA9IDY7XG4gICAgICBtaW5fY291bnQgPSAzO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIG1heF9jb3VudCA9IDc7XG4gICAgICBtaW5fY291bnQgPSA0O1xuICAgIH1cbiAgfVxufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCBhIGxpdGVyYWwgb3IgZGlzdGFuY2UgdHJlZSBpbiBjb21wcmVzc2VkIGZvcm0sIHVzaW5nIHRoZSBjb2RlcyBpblxuICogYmxfdHJlZS5cbiAqL1xuZnVuY3Rpb24gc2VuZF90cmVlKHMsIHRyZWUsIG1heF9jb2RlKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGN0X2RhdGEgKnRyZWU7IC8qIHRoZSB0cmVlIHRvIGJlIHNjYW5uZWQgKi9cbi8vICAgIGludCBtYXhfY29kZTsgICAgICAgLyogYW5kIGl0cyBsYXJnZXN0IGNvZGUgb2Ygbm9uIHplcm8gZnJlcXVlbmN5ICovXG57XG4gIHZhciBuOyAgICAgICAgICAgICAgICAgICAgIC8qIGl0ZXJhdGVzIG92ZXIgYWxsIHRyZWUgZWxlbWVudHMgKi9cbiAgdmFyIHByZXZsZW4gPSAtMTsgICAgICAgICAgLyogbGFzdCBlbWl0dGVkIGxlbmd0aCAqL1xuICB2YXIgY3VybGVuOyAgICAgICAgICAgICAgICAvKiBsZW5ndGggb2YgY3VycmVudCBjb2RlICovXG5cbiAgdmFyIG5leHRsZW4gPSB0cmVlWzAgKiAyICsgMV0vKi5MZW4qLzsgLyogbGVuZ3RoIG9mIG5leHQgY29kZSAqL1xuXG4gIHZhciBjb3VudCA9IDA7ICAgICAgICAgICAgIC8qIHJlcGVhdCBjb3VudCBvZiB0aGUgY3VycmVudCBjb2RlICovXG4gIHZhciBtYXhfY291bnQgPSA3OyAgICAgICAgIC8qIG1heCByZXBlYXQgY291bnQgKi9cbiAgdmFyIG1pbl9jb3VudCA9IDQ7ICAgICAgICAgLyogbWluIHJlcGVhdCBjb3VudCAqL1xuXG4gIC8qIHRyZWVbbWF4X2NvZGUrMV0uTGVuID0gLTE7ICovICAvKiBndWFyZCBhbHJlYWR5IHNldCAqL1xuICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgIG1heF9jb3VudCA9IDEzODtcbiAgICBtaW5fY291bnQgPSAzO1xuICB9XG5cbiAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgY3VybGVuID0gbmV4dGxlbjtcbiAgICBuZXh0bGVuID0gdHJlZVsobiArIDEpICogMiArIDFdLyouTGVuKi87XG5cbiAgICBpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xuICAgICAgZG8geyBzZW5kX2NvZGUocywgY3VybGVuLCBzLmJsX3RyZWUpOyB9IHdoaWxlICgtLWNvdW50ICE9PSAwKTtcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuICE9PSAwKSB7XG4gICAgICBpZiAoY3VybGVuICE9PSBwcmV2bGVuKSB7XG4gICAgICAgIHNlbmRfY29kZShzLCBjdXJsZW4sIHMuYmxfdHJlZSk7XG4gICAgICAgIGNvdW50LS07XG4gICAgICB9XG4gICAgICAvL0Fzc2VydChjb3VudCA+PSAzICYmIGNvdW50IDw9IDYsIFwiIDNfNj9cIik7XG4gICAgICBzZW5kX2NvZGUocywgUkVQXzNfNiwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDMsIDIpO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xuICAgICAgc2VuZF9jb2RlKHMsIFJFUFpfM18xMCwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDMsIDMpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbmRfY29kZShzLCBSRVBaXzExXzEzOCwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDExLCA3KTtcbiAgICB9XG5cbiAgICBjb3VudCA9IDA7XG4gICAgcHJldmxlbiA9IGN1cmxlbjtcbiAgICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgICAgbWF4X2NvdW50ID0gMTM4O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBtYXhfY291bnQgPSA2O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSB7XG4gICAgICBtYXhfY291bnQgPSA3O1xuICAgICAgbWluX2NvdW50ID0gNDtcbiAgICB9XG4gIH1cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbnN0cnVjdCB0aGUgSHVmZm1hbiB0cmVlIGZvciB0aGUgYml0IGxlbmd0aHMgYW5kIHJldHVybiB0aGUgaW5kZXggaW5cbiAqIGJsX29yZGVyIG9mIHRoZSBsYXN0IGJpdCBsZW5ndGggY29kZSB0byBzZW5kLlxuICovXG5mdW5jdGlvbiBidWlsZF9ibF90cmVlKHMpIHtcbiAgdmFyIG1heF9ibGluZGV4OyAgLyogaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcSAqL1xuXG4gIC8qIERldGVybWluZSB0aGUgYml0IGxlbmd0aCBmcmVxdWVuY2llcyBmb3IgbGl0ZXJhbCBhbmQgZGlzdGFuY2UgdHJlZXMgKi9cbiAgc2Nhbl90cmVlKHMsIHMuZHluX2x0cmVlLCBzLmxfZGVzYy5tYXhfY29kZSk7XG4gIHNjYW5fdHJlZShzLCBzLmR5bl9kdHJlZSwgcy5kX2Rlc2MubWF4X2NvZGUpO1xuXG4gIC8qIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWU6ICovXG4gIGJ1aWxkX3RyZWUocywgcy5ibF9kZXNjKTtcbiAgLyogb3B0X2xlbiBub3cgaW5jbHVkZXMgdGhlIGxlbmd0aCBvZiB0aGUgdHJlZSByZXByZXNlbnRhdGlvbnMsIGV4Y2VwdFxuICAgKiB0aGUgbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aHMgY29kZXMgYW5kIHRoZSA1KzUrNCBiaXRzIGZvciB0aGUgY291bnRzLlxuICAgKi9cblxuICAvKiBEZXRlcm1pbmUgdGhlIG51bWJlciBvZiBiaXQgbGVuZ3RoIGNvZGVzIHRvIHNlbmQuIFRoZSBwa3ppcCBmb3JtYXRcbiAgICogcmVxdWlyZXMgdGhhdCBhdCBsZWFzdCA0IGJpdCBsZW5ndGggY29kZXMgYmUgc2VudC4gKGFwcG5vdGUudHh0IHNheXNcbiAgICogMyBidXQgdGhlIGFjdHVhbCB2YWx1ZSB1c2VkIGlzIDQuKVxuICAgKi9cbiAgZm9yIChtYXhfYmxpbmRleCA9IEJMX0NPREVTIC0gMTsgbWF4X2JsaW5kZXggPj0gMzsgbWF4X2JsaW5kZXgtLSkge1xuICAgIGlmIChzLmJsX3RyZWVbYmxfb3JkZXJbbWF4X2JsaW5kZXhdICogMiArIDFdLyouTGVuKi8gIT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICAvKiBVcGRhdGUgb3B0X2xlbiB0byBpbmNsdWRlIHRoZSBiaXQgbGVuZ3RoIHRyZWUgYW5kIGNvdW50cyAqL1xuICBzLm9wdF9sZW4gKz0gMyAqIChtYXhfYmxpbmRleCArIDEpICsgNSArIDUgKyA0O1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmR5biB0cmVlczogZHluICVsZCwgc3RhdCAlbGRcIixcbiAgLy8gICAgICAgIHMtPm9wdF9sZW4sIHMtPnN0YXRpY19sZW4pKTtcblxuICByZXR1cm4gbWF4X2JsaW5kZXg7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIHRoZSBoZWFkZXIgZm9yIGEgYmxvY2sgdXNpbmcgZHluYW1pYyBIdWZmbWFuIHRyZWVzOiB0aGUgY291bnRzLCB0aGVcbiAqIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGggY29kZXMsIHRoZSBsaXRlcmFsIHRyZWUgYW5kIHRoZSBkaXN0YW5jZSB0cmVlLlxuICogSU4gYXNzZXJ0aW9uOiBsY29kZXMgPj0gMjU3LCBkY29kZXMgPj0gMSwgYmxjb2RlcyA+PSA0LlxuICovXG5mdW5jdGlvbiBzZW5kX2FsbF90cmVlcyhzLCBsY29kZXMsIGRjb2RlcywgYmxjb2Rlcylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBpbnQgbGNvZGVzLCBkY29kZXMsIGJsY29kZXM7IC8qIG51bWJlciBvZiBjb2RlcyBmb3IgZWFjaCB0cmVlICovXG57XG4gIHZhciByYW5rOyAgICAgICAgICAgICAgICAgICAgLyogaW5kZXggaW4gYmxfb3JkZXIgKi9cblxuICAvL0Fzc2VydCAobGNvZGVzID49IDI1NyAmJiBkY29kZXMgPj0gMSAmJiBibGNvZGVzID49IDQsIFwibm90IGVub3VnaCBjb2Rlc1wiKTtcbiAgLy9Bc3NlcnQgKGxjb2RlcyA8PSBMX0NPREVTICYmIGRjb2RlcyA8PSBEX0NPREVTICYmIGJsY29kZXMgPD0gQkxfQ09ERVMsXG4gIC8vICAgICAgICBcInRvbyBtYW55IGNvZGVzXCIpO1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmJsIGNvdW50czogXCIpKTtcbiAgc2VuZF9iaXRzKHMsIGxjb2RlcyAtIDI1NywgNSk7IC8qIG5vdCArMjU1IGFzIHN0YXRlZCBpbiBhcHBub3RlLnR4dCAqL1xuICBzZW5kX2JpdHMocywgZGNvZGVzIC0gMSwgICA1KTtcbiAgc2VuZF9iaXRzKHMsIGJsY29kZXMgLSA0LCAgNCk7IC8qIG5vdCAtMyBhcyBzdGF0ZWQgaW4gYXBwbm90ZS50eHQgKi9cbiAgZm9yIChyYW5rID0gMDsgcmFuayA8IGJsY29kZXM7IHJhbmsrKykge1xuICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgY29kZSAlMmQgXCIsIGJsX29yZGVyW3JhbmtdKSk7XG4gICAgc2VuZF9iaXRzKHMsIHMuYmxfdHJlZVtibF9vcmRlcltyYW5rXSAqIDIgKyAxXS8qLkxlbiovLCAzKTtcbiAgfVxuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmJsIHRyZWU6IHNlbnQgJWxkXCIsIHMtPmJpdHNfc2VudCkpO1xuXG4gIHNlbmRfdHJlZShzLCBzLmR5bl9sdHJlZSwgbGNvZGVzIC0gMSk7IC8qIGxpdGVyYWwgdHJlZSAqL1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmxpdCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcblxuICBzZW5kX3RyZWUocywgcy5keW5fZHRyZWUsIGRjb2RlcyAtIDEpOyAvKiBkaXN0YW5jZSB0cmVlICovXG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuZGlzdCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENoZWNrIGlmIHRoZSBkYXRhIHR5cGUgaXMgVEVYVCBvciBCSU5BUlksIHVzaW5nIHRoZSBmb2xsb3dpbmcgYWxnb3JpdGhtOlxuICogLSBURVhUIGlmIHRoZSB0d28gY29uZGl0aW9ucyBiZWxvdyBhcmUgc2F0aXNmaWVkOlxuICogICAgYSkgVGhlcmUgYXJlIG5vIG5vbi1wb3J0YWJsZSBjb250cm9sIGNoYXJhY3RlcnMgYmVsb25naW5nIHRvIHRoZVxuICogICAgICAgXCJibGFjayBsaXN0XCIgKDAuLjYsIDE0Li4yNSwgMjguLjMxKS5cbiAqICAgIGIpIFRoZXJlIGlzIGF0IGxlYXN0IG9uZSBwcmludGFibGUgY2hhcmFjdGVyIGJlbG9uZ2luZyB0byB0aGVcbiAqICAgICAgIFwid2hpdGUgbGlzdFwiICg5IHtUQUJ9LCAxMCB7TEZ9LCAxMyB7Q1J9LCAzMi4uMjU1KS5cbiAqIC0gQklOQVJZIG90aGVyd2lzZS5cbiAqIC0gVGhlIGZvbGxvd2luZyBwYXJ0aWFsbHktcG9ydGFibGUgY29udHJvbCBjaGFyYWN0ZXJzIGZvcm0gYVxuICogICBcImdyYXkgbGlzdFwiIHRoYXQgaXMgaWdub3JlZCBpbiB0aGlzIGRldGVjdGlvbiBhbGdvcml0aG06XG4gKiAgICg3IHtCRUx9LCA4IHtCU30sIDExIHtWVH0sIDEyIHtGRn0sIDI2IHtTVUJ9LCAyNyB7RVNDfSkuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZHMgRnJlcSBvZiBkeW5fbHRyZWUgYXJlIHNldC5cbiAqL1xuZnVuY3Rpb24gZGV0ZWN0X2RhdGFfdHlwZShzKSB7XG4gIC8qIGJsYWNrX21hc2sgaXMgdGhlIGJpdCBtYXNrIG9mIGJsYWNrLWxpc3RlZCBieXRlc1xuICAgKiBzZXQgYml0cyAwLi42LCAxNC4uMjUsIGFuZCAyOC4uMzFcbiAgICogMHhmM2ZmYzA3ZiA9IGJpbmFyeSAxMTExMDAxMTExMTExMTExMTEwMDAwMDAwMTExMTExMVxuICAgKi9cbiAgdmFyIGJsYWNrX21hc2sgPSAweGYzZmZjMDdmO1xuICB2YXIgbjtcblxuICAvKiBDaGVjayBmb3Igbm9uLXRleHR1YWwgKFwiYmxhY2stbGlzdGVkXCIpIGJ5dGVzLiAqL1xuICBmb3IgKG4gPSAwOyBuIDw9IDMxOyBuKyssIGJsYWNrX21hc2sgPj4+PSAxKSB7XG4gICAgaWYgKChibGFja19tYXNrICYgMSkgJiYgKHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkpIHtcbiAgICAgIHJldHVybiBaX0JJTkFSWTtcbiAgICB9XG4gIH1cblxuICAvKiBDaGVjayBmb3IgdGV4dHVhbCAoXCJ3aGl0ZS1saXN0ZWRcIikgYnl0ZXMuICovXG4gIGlmIChzLmR5bl9sdHJlZVs5ICogMl0vKi5GcmVxKi8gIT09IDAgfHwgcy5keW5fbHRyZWVbMTAgKiAyXS8qLkZyZXEqLyAhPT0gMCB8fFxuICAgICAgcy5keW5fbHRyZWVbMTMgKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgIHJldHVybiBaX1RFWFQ7XG4gIH1cbiAgZm9yIChuID0gMzI7IG4gPCBMSVRFUkFMUzsgbisrKSB7XG4gICAgaWYgKHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgICAgcmV0dXJuIFpfVEVYVDtcbiAgICB9XG4gIH1cblxuICAvKiBUaGVyZSBhcmUgbm8gXCJibGFjay1saXN0ZWRcIiBvciBcIndoaXRlLWxpc3RlZFwiIGJ5dGVzOlxuICAgKiB0aGlzIHN0cmVhbSBlaXRoZXIgaXMgZW1wdHkgb3IgaGFzIHRvbGVyYXRlZCAoXCJncmF5LWxpc3RlZFwiKSBieXRlcyBvbmx5LlxuICAgKi9cbiAgcmV0dXJuIFpfQklOQVJZO1xufVxuXG5cbnZhciBzdGF0aWNfaW5pdF9kb25lID0gZmFsc2U7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgdHJlZSBkYXRhIHN0cnVjdHVyZXMgZm9yIGEgbmV3IHpsaWIgc3RyZWFtLlxuICovXG5mdW5jdGlvbiBfdHJfaW5pdChzKVxue1xuXG4gIGlmICghc3RhdGljX2luaXRfZG9uZSkge1xuICAgIHRyX3N0YXRpY19pbml0KCk7XG4gICAgc3RhdGljX2luaXRfZG9uZSA9IHRydWU7XG4gIH1cblxuICBzLmxfZGVzYyAgPSBuZXcgVHJlZURlc2Mocy5keW5fbHRyZWUsIHN0YXRpY19sX2Rlc2MpO1xuICBzLmRfZGVzYyAgPSBuZXcgVHJlZURlc2Mocy5keW5fZHRyZWUsIHN0YXRpY19kX2Rlc2MpO1xuICBzLmJsX2Rlc2MgPSBuZXcgVHJlZURlc2Mocy5ibF90cmVlLCBzdGF0aWNfYmxfZGVzYyk7XG5cbiAgcy5iaV9idWYgPSAwO1xuICBzLmJpX3ZhbGlkID0gMDtcblxuICAvKiBJbml0aWFsaXplIHRoZSBmaXJzdCBibG9jayBvZiB0aGUgZmlyc3QgZmlsZTogKi9cbiAgaW5pdF9ibG9jayhzKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgYSBzdG9yZWQgYmxvY2tcbiAqL1xuZnVuY3Rpb24gX3RyX3N0b3JlZF9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpXG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgKmJ1ZjsgICAgICAgLyogaW5wdXQgYmxvY2sgKi9cbi8vdWxnIHN0b3JlZF9sZW47ICAgLyogbGVuZ3RoIG9mIGlucHV0IGJsb2NrICovXG4vL2ludCBsYXN0OyAgICAgICAgIC8qIG9uZSBpZiB0aGlzIGlzIHRoZSBsYXN0IGJsb2NrIGZvciBhIGZpbGUgKi9cbntcbiAgc2VuZF9iaXRzKHMsIChTVE9SRURfQkxPQ0sgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7ICAgIC8qIHNlbmQgYmxvY2sgdHlwZSAqL1xuICBjb3B5X2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgdHJ1ZSk7IC8qIHdpdGggaGVhZGVyICovXG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIG9uZSBlbXB0eSBzdGF0aWMgYmxvY2sgdG8gZ2l2ZSBlbm91Z2ggbG9va2FoZWFkIGZvciBpbmZsYXRlLlxuICogVGhpcyB0YWtlcyAxMCBiaXRzLCBvZiB3aGljaCA3IG1heSByZW1haW4gaW4gdGhlIGJpdCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIF90cl9hbGlnbihzKSB7XG4gIHNlbmRfYml0cyhzLCBTVEFUSUNfVFJFRVMgPDwgMSwgMyk7XG4gIHNlbmRfY29kZShzLCBFTkRfQkxPQ0ssIHN0YXRpY19sdHJlZSk7XG4gIGJpX2ZsdXNoKHMpO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nIGZvciB0aGUgY3VycmVudCBibG9jazogZHluYW1pYyB0cmVlcywgc3RhdGljXG4gKiB0cmVlcyBvciBzdG9yZSwgYW5kIG91dHB1dCB0aGUgZW5jb2RlZCBibG9jayB0byB0aGUgemlwIGZpbGUuXG4gKi9cbmZ1bmN0aW9uIF90cl9mbHVzaF9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpXG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgKmJ1ZjsgICAgICAgLyogaW5wdXQgYmxvY2ssIG9yIE5VTEwgaWYgdG9vIG9sZCAqL1xuLy91bGcgc3RvcmVkX2xlbjsgICAvKiBsZW5ndGggb2YgaW5wdXQgYmxvY2sgKi9cbi8vaW50IGxhc3Q7ICAgICAgICAgLyogb25lIGlmIHRoaXMgaXMgdGhlIGxhc3QgYmxvY2sgZm9yIGEgZmlsZSAqL1xue1xuICB2YXIgb3B0X2xlbmIsIHN0YXRpY19sZW5iOyAgLyogb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBpbiBieXRlcyAqL1xuICB2YXIgbWF4X2JsaW5kZXggPSAwOyAgICAgICAgLyogaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcSAqL1xuXG4gIC8qIEJ1aWxkIHRoZSBIdWZmbWFuIHRyZWVzIHVubGVzcyBhIHN0b3JlZCBibG9jayBpcyBmb3JjZWQgKi9cbiAgaWYgKHMubGV2ZWwgPiAwKSB7XG5cbiAgICAvKiBDaGVjayBpZiB0aGUgZmlsZSBpcyBiaW5hcnkgb3IgdGV4dCAqL1xuICAgIGlmIChzLnN0cm0uZGF0YV90eXBlID09PSBaX1VOS05PV04pIHtcbiAgICAgIHMuc3RybS5kYXRhX3R5cGUgPSBkZXRlY3RfZGF0YV90eXBlKHMpO1xuICAgIH1cblxuICAgIC8qIENvbnN0cnVjdCB0aGUgbGl0ZXJhbCBhbmQgZGlzdGFuY2UgdHJlZXMgKi9cbiAgICBidWlsZF90cmVlKHMsIHMubF9kZXNjKTtcbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5saXQgZGF0YTogZHluICVsZCwgc3RhdCAlbGRcIiwgcy0+b3B0X2xlbixcbiAgICAvLyAgICAgICAgcy0+c3RhdGljX2xlbikpO1xuXG4gICAgYnVpbGRfdHJlZShzLCBzLmRfZGVzYyk7XG4gICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiXFxuZGlzdCBkYXRhOiBkeW4gJWxkLCBzdGF0ICVsZFwiLCBzLT5vcHRfbGVuLFxuICAgIC8vICAgICAgICBzLT5zdGF0aWNfbGVuKSk7XG4gICAgLyogQXQgdGhpcyBwb2ludCwgb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBhcmUgdGhlIHRvdGFsIGJpdCBsZW5ndGhzIG9mXG4gICAgICogdGhlIGNvbXByZXNzZWQgYmxvY2sgZGF0YSwgZXhjbHVkaW5nIHRoZSB0cmVlIHJlcHJlc2VudGF0aW9ucy5cbiAgICAgKi9cblxuICAgIC8qIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWUgZm9yIHRoZSBhYm92ZSB0d28gdHJlZXMsIGFuZCBnZXQgdGhlIGluZGV4XG4gICAgICogaW4gYmxfb3JkZXIgb2YgdGhlIGxhc3QgYml0IGxlbmd0aCBjb2RlIHRvIHNlbmQuXG4gICAgICovXG4gICAgbWF4X2JsaW5kZXggPSBidWlsZF9ibF90cmVlKHMpO1xuXG4gICAgLyogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nLiBDb21wdXRlIHRoZSBibG9jayBsZW5ndGhzIGluIGJ5dGVzLiAqL1xuICAgIG9wdF9sZW5iID0gKHMub3B0X2xlbiArIDMgKyA3KSA+Pj4gMztcbiAgICBzdGF0aWNfbGVuYiA9IChzLnN0YXRpY19sZW4gKyAzICsgNykgPj4+IDM7XG5cbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5vcHQgJWx1KCVsdSkgc3RhdCAlbHUoJWx1KSBzdG9yZWQgJWx1IGxpdCAldSBcIixcbiAgICAvLyAgICAgICAgb3B0X2xlbmIsIHMtPm9wdF9sZW4sIHN0YXRpY19sZW5iLCBzLT5zdGF0aWNfbGVuLCBzdG9yZWRfbGVuLFxuICAgIC8vICAgICAgICBzLT5sYXN0X2xpdCkpO1xuXG4gICAgaWYgKHN0YXRpY19sZW5iIDw9IG9wdF9sZW5iKSB7IG9wdF9sZW5iID0gc3RhdGljX2xlbmI7IH1cblxuICB9IGVsc2Uge1xuICAgIC8vIEFzc2VydChidWYgIT0gKGNoYXIqKTAsIFwibG9zdCBidWZcIik7XG4gICAgb3B0X2xlbmIgPSBzdGF0aWNfbGVuYiA9IHN0b3JlZF9sZW4gKyA1OyAvKiBmb3JjZSBhIHN0b3JlZCBibG9jayAqL1xuICB9XG5cbiAgaWYgKChzdG9yZWRfbGVuICsgNCA8PSBvcHRfbGVuYikgJiYgKGJ1ZiAhPT0gLTEpKSB7XG4gICAgLyogNDogdHdvIHdvcmRzIGZvciB0aGUgbGVuZ3RocyAqL1xuXG4gICAgLyogVGhlIHRlc3QgYnVmICE9IE5VTEwgaXMgb25seSBuZWNlc3NhcnkgaWYgTElUX0JVRlNJWkUgPiBXU0laRS5cbiAgICAgKiBPdGhlcndpc2Ugd2UgY2FuJ3QgaGF2ZSBwcm9jZXNzZWQgbW9yZSB0aGFuIFdTSVpFIGlucHV0IGJ5dGVzIHNpbmNlXG4gICAgICogdGhlIGxhc3QgYmxvY2sgZmx1c2gsIGJlY2F1c2UgY29tcHJlc3Npb24gd291bGQgaGF2ZSBiZWVuXG4gICAgICogc3VjY2Vzc2Z1bC4gSWYgTElUX0JVRlNJWkUgPD0gV1NJWkUsIGl0IGlzIG5ldmVyIHRvbyBsYXRlIHRvXG4gICAgICogdHJhbnNmb3JtIGEgYmxvY2sgaW50byBhIHN0b3JlZCBibG9jay5cbiAgICAgKi9cbiAgICBfdHJfc3RvcmVkX2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdCk7XG5cbiAgfSBlbHNlIGlmIChzLnN0cmF0ZWd5ID09PSBaX0ZJWEVEIHx8IHN0YXRpY19sZW5iID09PSBvcHRfbGVuYikge1xuXG4gICAgc2VuZF9iaXRzKHMsIChTVEFUSUNfVFJFRVMgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7XG4gICAgY29tcHJlc3NfYmxvY2socywgc3RhdGljX2x0cmVlLCBzdGF0aWNfZHRyZWUpO1xuXG4gIH0gZWxzZSB7XG4gICAgc2VuZF9iaXRzKHMsIChEWU5fVFJFRVMgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7XG4gICAgc2VuZF9hbGxfdHJlZXMocywgcy5sX2Rlc2MubWF4X2NvZGUgKyAxLCBzLmRfZGVzYy5tYXhfY29kZSArIDEsIG1heF9ibGluZGV4ICsgMSk7XG4gICAgY29tcHJlc3NfYmxvY2socywgcy5keW5fbHRyZWUsIHMuZHluX2R0cmVlKTtcbiAgfVxuICAvLyBBc3NlcnQgKHMtPmNvbXByZXNzZWRfbGVuID09IHMtPmJpdHNfc2VudCwgXCJiYWQgY29tcHJlc3NlZCBzaXplXCIpO1xuICAvKiBUaGUgYWJvdmUgY2hlY2sgaXMgbWFkZSBtb2QgMl4zMiwgZm9yIGZpbGVzIGxhcmdlciB0aGFuIDUxMiBNQlxuICAgKiBhbmQgdUxvbmcgaW1wbGVtZW50ZWQgb24gMzIgYml0cy5cbiAgICovXG4gIGluaXRfYmxvY2socyk7XG5cbiAgaWYgKGxhc3QpIHtcbiAgICBiaV93aW5kdXAocyk7XG4gIH1cbiAgLy8gVHJhY2V2KChzdGRlcnIsXCJcXG5jb21wcmxlbiAlbHUoJWx1KSBcIiwgcy0+Y29tcHJlc3NlZF9sZW4+PjMsXG4gIC8vICAgICAgIHMtPmNvbXByZXNzZWRfbGVuLTcqbGFzdCkpO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNhdmUgdGhlIG1hdGNoIGluZm8gYW5kIHRhbGx5IHRoZSBmcmVxdWVuY3kgY291bnRzLiBSZXR1cm4gdHJ1ZSBpZlxuICogdGhlIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkLlxuICovXG5mdW5jdGlvbiBfdHJfdGFsbHkocywgZGlzdCwgbGMpXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgdW5zaWduZWQgZGlzdDsgIC8qIGRpc3RhbmNlIG9mIG1hdGNoZWQgc3RyaW5nICovXG4vLyAgICB1bnNpZ25lZCBsYzsgICAgLyogbWF0Y2ggbGVuZ3RoLU1JTl9NQVRDSCBvciB1bm1hdGNoZWQgY2hhciAoaWYgZGlzdD09MCkgKi9cbntcbiAgLy92YXIgb3V0X2xlbmd0aCwgaW5fbGVuZ3RoLCBkY29kZTtcblxuICBzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBzLmxhc3RfbGl0ICogMl0gICAgID0gKGRpc3QgPj4+IDgpICYgMHhmZjtcbiAgcy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgcy5sYXN0X2xpdCAqIDIgKyAxXSA9IGRpc3QgJiAweGZmO1xuXG4gIHMucGVuZGluZ19idWZbcy5sX2J1ZiArIHMubGFzdF9saXRdID0gbGMgJiAweGZmO1xuICBzLmxhc3RfbGl0Kys7XG5cbiAgaWYgKGRpc3QgPT09IDApIHtcbiAgICAvKiBsYyBpcyB0aGUgdW5tYXRjaGVkIGNoYXIgKi9cbiAgICBzLmR5bl9sdHJlZVtsYyAqIDJdLyouRnJlcSovKys7XG4gIH0gZWxzZSB7XG4gICAgcy5tYXRjaGVzKys7XG4gICAgLyogSGVyZSwgbGMgaXMgdGhlIG1hdGNoIGxlbmd0aCAtIE1JTl9NQVRDSCAqL1xuICAgIGRpc3QtLTsgICAgICAgICAgICAgLyogZGlzdCA9IG1hdGNoIGRpc3RhbmNlIC0gMSAqL1xuICAgIC8vQXNzZXJ0KCh1c2gpZGlzdCA8ICh1c2gpTUFYX0RJU1QocykgJiZcbiAgICAvLyAgICAgICAodXNoKWxjIDw9ICh1c2gpKE1BWF9NQVRDSC1NSU5fTUFUQ0gpICYmXG4gICAgLy8gICAgICAgKHVzaClkX2NvZGUoZGlzdCkgPCAodXNoKURfQ09ERVMsICBcIl90cl90YWxseTogYmFkIG1hdGNoXCIpO1xuXG4gICAgcy5keW5fbHRyZWVbKF9sZW5ndGhfY29kZVtsY10gKyBMSVRFUkFMUyArIDEpICogMl0vKi5GcmVxKi8rKztcbiAgICBzLmR5bl9kdHJlZVtkX2NvZGUoZGlzdCkgKiAyXS8qLkZyZXEqLysrO1xuICB9XG5cbi8vICghKSBUaGlzIGJsb2NrIGlzIGRpc2FibGVkIGluIHpsaWIgZGVmYXVsdHMsXG4vLyBkb24ndCBlbmFibGUgaXQgZm9yIGJpbmFyeSBjb21wYXRpYmlsaXR5XG5cbi8vI2lmZGVmIFRSVU5DQVRFX0JMT0NLXG4vLyAgLyogVHJ5IHRvIGd1ZXNzIGlmIGl0IGlzIHByb2ZpdGFibGUgdG8gc3RvcCB0aGUgY3VycmVudCBibG9jayBoZXJlICovXG4vLyAgaWYgKChzLmxhc3RfbGl0ICYgMHgxZmZmKSA9PT0gMCAmJiBzLmxldmVsID4gMikge1xuLy8gICAgLyogQ29tcHV0ZSBhbiB1cHBlciBib3VuZCBmb3IgdGhlIGNvbXByZXNzZWQgbGVuZ3RoICovXG4vLyAgICBvdXRfbGVuZ3RoID0gcy5sYXN0X2xpdCo4O1xuLy8gICAgaW5fbGVuZ3RoID0gcy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQ7XG4vL1xuLy8gICAgZm9yIChkY29kZSA9IDA7IGRjb2RlIDwgRF9DT0RFUzsgZGNvZGUrKykge1xuLy8gICAgICBvdXRfbGVuZ3RoICs9IHMuZHluX2R0cmVlW2Rjb2RlKjJdLyouRnJlcSovICogKDUgKyBleHRyYV9kYml0c1tkY29kZV0pO1xuLy8gICAgfVxuLy8gICAgb3V0X2xlbmd0aCA+Pj49IDM7XG4vLyAgICAvL1RyYWNldigoc3RkZXJyLFwiXFxubGFzdF9saXQgJXUsIGluICVsZCwgb3V0IH4lbGQoJWxkJSUpIFwiLFxuLy8gICAgLy8gICAgICAgcy0+bGFzdF9saXQsIGluX2xlbmd0aCwgb3V0X2xlbmd0aCxcbi8vICAgIC8vICAgICAgIDEwMEwgLSBvdXRfbGVuZ3RoKjEwMEwvaW5fbGVuZ3RoKSk7XG4vLyAgICBpZiAocy5tYXRjaGVzIDwgKHMubGFzdF9saXQ+PjEpLyppbnQgLzIqLyAmJiBvdXRfbGVuZ3RoIDwgKGluX2xlbmd0aD4+MSkvKmludCAvMiovKSB7XG4vLyAgICAgIHJldHVybiB0cnVlO1xuLy8gICAgfVxuLy8gIH1cbi8vI2VuZGlmXG5cbiAgcmV0dXJuIChzLmxhc3RfbGl0ID09PSBzLmxpdF9idWZzaXplIC0gMSk7XG4gIC8qIFdlIGF2b2lkIGVxdWFsaXR5IHdpdGggbGl0X2J1ZnNpemUgYmVjYXVzZSBvZiB3cmFwYXJvdW5kIGF0IDY0S1xuICAgKiBvbiAxNiBiaXQgbWFjaGluZXMgYW5kIGJlY2F1c2Ugc3RvcmVkIGJsb2NrcyBhcmUgcmVzdHJpY3RlZCB0b1xuICAgKiA2NEstMSBieXRlcy5cbiAgICovXG59XG5cbmV4cG9ydHMuX3RyX2luaXQgID0gX3RyX2luaXQ7XG5leHBvcnRzLl90cl9zdG9yZWRfYmxvY2sgPSBfdHJfc3RvcmVkX2Jsb2NrO1xuZXhwb3J0cy5fdHJfZmx1c2hfYmxvY2sgID0gX3RyX2ZsdXNoX2Jsb2NrO1xuZXhwb3J0cy5fdHJfdGFsbHkgPSBfdHJfdGFsbHk7XG5leHBvcnRzLl90cl9hbGlnbiA9IF90cl9hbGlnbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgMjogICAgICAnbmVlZCBkaWN0aW9uYXJ5JywgICAgIC8qIFpfTkVFRF9ESUNUICAgICAgIDIgICovXG4gIDE6ICAgICAgJ3N0cmVhbSBlbmQnLCAgICAgICAgICAvKiBaX1NUUkVBTV9FTkQgICAgICAxICAqL1xuICAwOiAgICAgICcnLCAgICAgICAgICAgICAgICAgICAgLyogWl9PSyAgICAgICAgICAgICAgMCAgKi9cbiAgJy0xJzogICAnZmlsZSBlcnJvcicsICAgICAgICAgIC8qIFpfRVJSTk8gICAgICAgICAoLTEpICovXG4gICctMic6ICAgJ3N0cmVhbSBlcnJvcicsICAgICAgICAvKiBaX1NUUkVBTV9FUlJPUiAgKC0yKSAqL1xuICAnLTMnOiAgICdkYXRhIGVycm9yJywgICAgICAgICAgLyogWl9EQVRBX0VSUk9SICAgICgtMykgKi9cbiAgJy00JzogICAnaW5zdWZmaWNpZW50IG1lbW9yeScsIC8qIFpfTUVNX0VSUk9SICAgICAoLTQpICovXG4gICctNSc6ICAgJ2J1ZmZlciBlcnJvcicsICAgICAgICAvKiBaX0JVRl9FUlJPUiAgICAgKC01KSAqL1xuICAnLTYnOiAgICdpbmNvbXBhdGlibGUgdmVyc2lvbicgLyogWl9WRVJTSU9OX0VSUk9SICgtNikgKi9cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxudmFyIHV0aWxzICAgICAgICAgPSByZXF1aXJlKCcuLi91dGlscy9jb21tb24nKTtcbnZhciBhZGxlcjMyICAgICAgID0gcmVxdWlyZSgnLi9hZGxlcjMyJyk7XG52YXIgY3JjMzIgICAgICAgICA9IHJlcXVpcmUoJy4vY3JjMzInKTtcbnZhciBpbmZsYXRlX2Zhc3QgID0gcmVxdWlyZSgnLi9pbmZmYXN0Jyk7XG52YXIgaW5mbGF0ZV90YWJsZSA9IHJlcXVpcmUoJy4vaW5mdHJlZXMnKTtcblxudmFyIENPREVTID0gMDtcbnZhciBMRU5TID0gMTtcbnZhciBESVNUUyA9IDI7XG5cbi8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbi8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi9cbi8vdmFyIFpfTk9fRkxVU0ggICAgICA9IDA7XG4vL3ZhciBaX1BBUlRJQUxfRkxVU0ggPSAxO1xuLy92YXIgWl9TWU5DX0ZMVVNIICAgID0gMjtcbi8vdmFyIFpfRlVMTF9GTFVTSCAgICA9IDM7XG52YXIgWl9GSU5JU0ggICAgICAgID0gNDtcbnZhciBaX0JMT0NLICAgICAgICAgPSA1O1xudmFyIFpfVFJFRVMgICAgICAgICA9IDY7XG5cblxuLyogUmV0dXJuIGNvZGVzIGZvciB0aGUgY29tcHJlc3Npb24vZGVjb21wcmVzc2lvbiBmdW5jdGlvbnMuIE5lZ2F0aXZlIHZhbHVlc1xuICogYXJlIGVycm9ycywgcG9zaXRpdmUgdmFsdWVzIGFyZSB1c2VkIGZvciBzcGVjaWFsIGJ1dCBub3JtYWwgZXZlbnRzLlxuICovXG52YXIgWl9PSyAgICAgICAgICAgID0gMDtcbnZhciBaX1NUUkVBTV9FTkQgICAgPSAxO1xudmFyIFpfTkVFRF9ESUNUICAgICA9IDI7XG4vL3ZhciBaX0VSUk5PICAgICAgICAgPSAtMTtcbnZhciBaX1NUUkVBTV9FUlJPUiAgPSAtMjtcbnZhciBaX0RBVEFfRVJST1IgICAgPSAtMztcbnZhciBaX01FTV9FUlJPUiAgICAgPSAtNDtcbnZhciBaX0JVRl9FUlJPUiAgICAgPSAtNTtcbi8vdmFyIFpfVkVSU0lPTl9FUlJPUiA9IC02O1xuXG4vKiBUaGUgZGVmbGF0ZSBjb21wcmVzc2lvbiBtZXRob2QgKi9cbnZhciBaX0RFRkxBVEVEICA9IDg7XG5cblxuLyogU1RBVEVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxudmFyICAgIEhFQUQgPSAxOyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBtYWdpYyBoZWFkZXIgKi9cbnZhciAgICBGTEFHUyA9IDI7ICAgICAgLyogaTogd2FpdGluZyBmb3IgbWV0aG9kIGFuZCBmbGFncyAoZ3ppcCkgKi9cbnZhciAgICBUSU1FID0gMzsgICAgICAgLyogaTogd2FpdGluZyBmb3IgbW9kaWZpY2F0aW9uIHRpbWUgKGd6aXApICovXG52YXIgICAgT1MgPSA0OyAgICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGV4dHJhIGZsYWdzIGFuZCBvcGVyYXRpbmcgc3lzdGVtIChnemlwKSAqL1xudmFyICAgIEVYTEVOID0gNTsgICAgICAvKiBpOiB3YWl0aW5nIGZvciBleHRyYSBsZW5ndGggKGd6aXApICovXG52YXIgICAgRVhUUkEgPSA2OyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGV4dHJhIGJ5dGVzIChnemlwKSAqL1xudmFyICAgIE5BTUUgPSA3OyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBlbmQgb2YgZmlsZSBuYW1lIChnemlwKSAqL1xudmFyICAgIENPTU1FTlQgPSA4OyAgICAvKiBpOiB3YWl0aW5nIGZvciBlbmQgb2YgY29tbWVudCAoZ3ppcCkgKi9cbnZhciAgICBIQ1JDID0gOTsgICAgICAgLyogaTogd2FpdGluZyBmb3IgaGVhZGVyIGNyYyAoZ3ppcCkgKi9cbnZhciAgICBESUNUSUQgPSAxMDsgICAgLyogaTogd2FpdGluZyBmb3IgZGljdGlvbmFyeSBjaGVjayB2YWx1ZSAqL1xudmFyICAgIERJQ1QgPSAxMTsgICAgICAvKiB3YWl0aW5nIGZvciBpbmZsYXRlU2V0RGljdGlvbmFyeSgpIGNhbGwgKi9cbnZhciAgICAgICAgVFlQRSA9IDEyOyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIHR5cGUgYml0cywgaW5jbHVkaW5nIGxhc3QtZmxhZyBiaXQgKi9cbnZhciAgICAgICAgVFlQRURPID0gMTM7ICAgIC8qIGk6IHNhbWUsIGJ1dCBza2lwIGNoZWNrIHRvIGV4aXQgaW5mbGF0ZSBvbiBuZXcgYmxvY2sgKi9cbnZhciAgICAgICAgU1RPUkVEID0gMTQ7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIHN0b3JlZCBzaXplIChsZW5ndGggYW5kIGNvbXBsZW1lbnQpICovXG52YXIgICAgICAgIENPUFlfID0gMTU7ICAgICAvKiBpL286IHNhbWUgYXMgQ09QWSBiZWxvdywgYnV0IG9ubHkgZmlyc3QgdGltZSBpbiAqL1xudmFyICAgICAgICBDT1BZID0gMTY7ICAgICAgLyogaS9vOiB3YWl0aW5nIGZvciBpbnB1dCBvciBvdXRwdXQgdG8gY29weSBzdG9yZWQgYmxvY2sgKi9cbnZhciAgICAgICAgVEFCTEUgPSAxNzsgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGR5bmFtaWMgYmxvY2sgdGFibGUgbGVuZ3RocyAqL1xudmFyICAgICAgICBMRU5MRU5TID0gMTg7ICAgLyogaTogd2FpdGluZyBmb3IgY29kZSBsZW5ndGggY29kZSBsZW5ndGhzICovXG52YXIgICAgICAgIENPREVMRU5TID0gMTk7ICAvKiBpOiB3YWl0aW5nIGZvciBsZW5ndGgvbGl0IGFuZCBkaXN0YW5jZSBjb2RlIGxlbmd0aHMgKi9cbnZhciAgICAgICAgICAgIExFTl8gPSAyMDsgICAgICAvKiBpOiBzYW1lIGFzIExFTiBiZWxvdywgYnV0IG9ubHkgZmlyc3QgdGltZSBpbiAqL1xudmFyICAgICAgICAgICAgTEVOID0gMjE7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGxlbmd0aC9saXQvZW9iIGNvZGUgKi9cbnZhciAgICAgICAgICAgIExFTkVYVCA9IDIyOyAgICAvKiBpOiB3YWl0aW5nIGZvciBsZW5ndGggZXh0cmEgYml0cyAqL1xudmFyICAgICAgICAgICAgRElTVCA9IDIzOyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGNvZGUgKi9cbnZhciAgICAgICAgICAgIERJU1RFWFQgPSAyNDsgICAvKiBpOiB3YWl0aW5nIGZvciBkaXN0YW5jZSBleHRyYSBiaXRzICovXG52YXIgICAgICAgICAgICBNQVRDSCA9IDI1OyAgICAgLyogbzogd2FpdGluZyBmb3Igb3V0cHV0IHNwYWNlIHRvIGNvcHkgc3RyaW5nICovXG52YXIgICAgICAgICAgICBMSVQgPSAyNjsgICAgICAgLyogbzogd2FpdGluZyBmb3Igb3V0cHV0IHNwYWNlIHRvIHdyaXRlIGxpdGVyYWwgKi9cbnZhciAgICBDSEVDSyA9IDI3OyAgICAgLyogaTogd2FpdGluZyBmb3IgMzItYml0IGNoZWNrIHZhbHVlICovXG52YXIgICAgTEVOR1RIID0gMjg7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIDMyLWJpdCBsZW5ndGggKGd6aXApICovXG52YXIgICAgRE9ORSA9IDI5OyAgICAgIC8qIGZpbmlzaGVkIGNoZWNrLCBkb25lIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG52YXIgICAgQkFEID0gMzA7ICAgICAgIC8qIGdvdCBhIGRhdGEgZXJyb3IgLS0gcmVtYWluIGhlcmUgdW50aWwgcmVzZXQgKi9cbnZhciAgICBNRU0gPSAzMTsgICAgICAgLyogZ290IGFuIGluZmxhdGUoKSBtZW1vcnkgZXJyb3IgLS0gcmVtYWluIGhlcmUgdW50aWwgcmVzZXQgKi9cbnZhciAgICBTWU5DID0gMzI7ICAgICAgLyogbG9va2luZyBmb3Igc3luY2hyb25pemF0aW9uIGJ5dGVzIHRvIHJlc3RhcnQgaW5mbGF0ZSgpICovXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuXG52YXIgRU5PVUdIX0xFTlMgPSA4NTI7XG52YXIgRU5PVUdIX0RJU1RTID0gNTkyO1xuLy92YXIgRU5PVUdIID0gIChFTk9VR0hfTEVOUytFTk9VR0hfRElTVFMpO1xuXG52YXIgTUFYX1dCSVRTID0gMTU7XG4vKiAzMksgTFo3NyB3aW5kb3cgKi9cbnZhciBERUZfV0JJVFMgPSBNQVhfV0JJVFM7XG5cblxuZnVuY3Rpb24genN3YXAzMihxKSB7XG4gIHJldHVybiAgKCgocSA+Pj4gMjQpICYgMHhmZikgK1xuICAgICAgICAgICgocSA+Pj4gOCkgJiAweGZmMDApICtcbiAgICAgICAgICAoKHEgJiAweGZmMDApIDw8IDgpICtcbiAgICAgICAgICAoKHEgJiAweGZmKSA8PCAyNCkpO1xufVxuXG5cbmZ1bmN0aW9uIEluZmxhdGVTdGF0ZSgpIHtcbiAgdGhpcy5tb2RlID0gMDsgICAgICAgICAgICAgLyogY3VycmVudCBpbmZsYXRlIG1vZGUgKi9cbiAgdGhpcy5sYXN0ID0gZmFsc2U7ICAgICAgICAgIC8qIHRydWUgaWYgcHJvY2Vzc2luZyBsYXN0IGJsb2NrICovXG4gIHRoaXMud3JhcCA9IDA7ICAgICAgICAgICAgICAvKiBiaXQgMCB0cnVlIGZvciB6bGliLCBiaXQgMSB0cnVlIGZvciBnemlwICovXG4gIHRoaXMuaGF2ZWRpY3QgPSBmYWxzZTsgICAgICAvKiB0cnVlIGlmIGRpY3Rpb25hcnkgcHJvdmlkZWQgKi9cbiAgdGhpcy5mbGFncyA9IDA7ICAgICAgICAgICAgIC8qIGd6aXAgaGVhZGVyIG1ldGhvZCBhbmQgZmxhZ3MgKDAgaWYgemxpYikgKi9cbiAgdGhpcy5kbWF4ID0gMDsgICAgICAgICAgICAgIC8qIHpsaWIgaGVhZGVyIG1heCBkaXN0YW5jZSAoSU5GTEFURV9TVFJJQ1QpICovXG4gIHRoaXMuY2hlY2sgPSAwOyAgICAgICAgICAgICAvKiBwcm90ZWN0ZWQgY29weSBvZiBjaGVjayB2YWx1ZSAqL1xuICB0aGlzLnRvdGFsID0gMDsgICAgICAgICAgICAgLyogcHJvdGVjdGVkIGNvcHkgb2Ygb3V0cHV0IGNvdW50ICovXG4gIC8vIFRPRE86IG1heSBiZSB7fVxuICB0aGlzLmhlYWQgPSBudWxsOyAgICAgICAgICAgLyogd2hlcmUgdG8gc2F2ZSBnemlwIGhlYWRlciBpbmZvcm1hdGlvbiAqL1xuXG4gIC8qIHNsaWRpbmcgd2luZG93ICovXG4gIHRoaXMud2JpdHMgPSAwOyAgICAgICAgICAgICAvKiBsb2cgYmFzZSAyIG9mIHJlcXVlc3RlZCB3aW5kb3cgc2l6ZSAqL1xuICB0aGlzLndzaXplID0gMDsgICAgICAgICAgICAgLyogd2luZG93IHNpemUgb3IgemVybyBpZiBub3QgdXNpbmcgd2luZG93ICovXG4gIHRoaXMud2hhdmUgPSAwOyAgICAgICAgICAgICAvKiB2YWxpZCBieXRlcyBpbiB0aGUgd2luZG93ICovXG4gIHRoaXMud25leHQgPSAwOyAgICAgICAgICAgICAvKiB3aW5kb3cgd3JpdGUgaW5kZXggKi9cbiAgdGhpcy53aW5kb3cgPSBudWxsOyAgICAgICAgIC8qIGFsbG9jYXRlZCBzbGlkaW5nIHdpbmRvdywgaWYgbmVlZGVkICovXG5cbiAgLyogYml0IGFjY3VtdWxhdG9yICovXG4gIHRoaXMuaG9sZCA9IDA7ICAgICAgICAgICAgICAvKiBpbnB1dCBiaXQgYWNjdW11bGF0b3IgKi9cbiAgdGhpcy5iaXRzID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBiaXRzIGluIFwiaW5cIiAqL1xuXG4gIC8qIGZvciBzdHJpbmcgYW5kIHN0b3JlZCBibG9jayBjb3B5aW5nICovXG4gIHRoaXMubGVuZ3RoID0gMDsgICAgICAgICAgICAvKiBsaXRlcmFsIG9yIGxlbmd0aCBvZiBkYXRhIHRvIGNvcHkgKi9cbiAgdGhpcy5vZmZzZXQgPSAwOyAgICAgICAgICAgIC8qIGRpc3RhbmNlIGJhY2sgdG8gY29weSBzdHJpbmcgZnJvbSAqL1xuXG4gIC8qIGZvciB0YWJsZSBhbmQgY29kZSBkZWNvZGluZyAqL1xuICB0aGlzLmV4dHJhID0gMDsgICAgICAgICAgICAgLyogZXh0cmEgYml0cyBuZWVkZWQgKi9cblxuICAvKiBmaXhlZCBhbmQgZHluYW1pYyBjb2RlIHRhYmxlcyAqL1xuICB0aGlzLmxlbmNvZGUgPSBudWxsOyAgICAgICAgICAvKiBzdGFydGluZyB0YWJsZSBmb3IgbGVuZ3RoL2xpdGVyYWwgY29kZXMgKi9cbiAgdGhpcy5kaXN0Y29kZSA9IG51bGw7ICAgICAgICAgLyogc3RhcnRpbmcgdGFibGUgZm9yIGRpc3RhbmNlIGNvZGVzICovXG4gIHRoaXMubGVuYml0cyA9IDA7ICAgICAgICAgICAvKiBpbmRleCBiaXRzIGZvciBsZW5jb2RlICovXG4gIHRoaXMuZGlzdGJpdHMgPSAwOyAgICAgICAgICAvKiBpbmRleCBiaXRzIGZvciBkaXN0Y29kZSAqL1xuXG4gIC8qIGR5bmFtaWMgdGFibGUgYnVpbGRpbmcgKi9cbiAgdGhpcy5uY29kZSA9IDA7ICAgICAgICAgICAgIC8qIG51bWJlciBvZiBjb2RlIGxlbmd0aCBjb2RlIGxlbmd0aHMgKi9cbiAgdGhpcy5ubGVuID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBsZW5ndGggY29kZSBsZW5ndGhzICovXG4gIHRoaXMubmRpc3QgPSAwOyAgICAgICAgICAgICAvKiBudW1iZXIgb2YgZGlzdGFuY2UgY29kZSBsZW5ndGhzICovXG4gIHRoaXMuaGF2ZSA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgY29kZSBsZW5ndGhzIGluIGxlbnNbXSAqL1xuICB0aGlzLm5leHQgPSBudWxsOyAgICAgICAgICAgICAgLyogbmV4dCBhdmFpbGFibGUgc3BhY2UgaW4gY29kZXNbXSAqL1xuXG4gIHRoaXMubGVucyA9IG5ldyB1dGlscy5CdWYxNigzMjApOyAvKiB0ZW1wb3Jhcnkgc3RvcmFnZSBmb3IgY29kZSBsZW5ndGhzICovXG4gIHRoaXMud29yayA9IG5ldyB1dGlscy5CdWYxNigyODgpOyAvKiB3b3JrIGFyZWEgZm9yIGNvZGUgdGFibGUgYnVpbGRpbmcgKi9cblxuICAvKlxuICAgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIHBvaW50ZXJzIGluIGpzLCB3ZSB1c2UgbGVuY29kZSBhbmQgZGlzdGNvZGUgZGlyZWN0bHlcbiAgIGFzIGJ1ZmZlcnMgc28gd2UgZG9uJ3QgbmVlZCBjb2Rlc1xuICAqL1xuICAvL3RoaXMuY29kZXMgPSBuZXcgdXRpbHMuQnVmMzIoRU5PVUdIKTsgICAgICAgLyogc3BhY2UgZm9yIGNvZGUgdGFibGVzICovXG4gIHRoaXMubGVuZHluID0gbnVsbDsgICAgICAgICAgICAgIC8qIGR5bmFtaWMgdGFibGUgZm9yIGxlbmd0aC9saXRlcmFsIGNvZGVzIChKUyBzcGVjaWZpYykgKi9cbiAgdGhpcy5kaXN0ZHluID0gbnVsbDsgICAgICAgICAgICAgLyogZHluYW1pYyB0YWJsZSBmb3IgZGlzdGFuY2UgY29kZXMgKEpTIHNwZWNpZmljKSAqL1xuICB0aGlzLnNhbmUgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBpZiBmYWxzZSwgYWxsb3cgaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyICovXG4gIHRoaXMuYmFjayA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIGJpdHMgYmFjayBvZiBsYXN0IHVucHJvY2Vzc2VkIGxlbmd0aC9saXQgKi9cbiAgdGhpcy53YXMgPSAwOyAgICAgICAgICAgICAgICAgICAgLyogaW5pdGlhbCBsZW5ndGggb2YgbWF0Y2ggKi9cbn1cblxuZnVuY3Rpb24gaW5mbGF0ZVJlc2V0S2VlcChzdHJtKSB7XG4gIHZhciBzdGF0ZTtcblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgc3RybS50b3RhbF9pbiA9IHN0cm0udG90YWxfb3V0ID0gc3RhdGUudG90YWwgPSAwO1xuICBzdHJtLm1zZyA9ICcnOyAvKlpfTlVMTCovXG4gIGlmIChzdGF0ZS53cmFwKSB7ICAgICAgIC8qIHRvIHN1cHBvcnQgaWxsLWNvbmNlaXZlZCBKYXZhIHRlc3Qgc3VpdGUgKi9cbiAgICBzdHJtLmFkbGVyID0gc3RhdGUud3JhcCAmIDE7XG4gIH1cbiAgc3RhdGUubW9kZSA9IEhFQUQ7XG4gIHN0YXRlLmxhc3QgPSAwO1xuICBzdGF0ZS5oYXZlZGljdCA9IDA7XG4gIHN0YXRlLmRtYXggPSAzMjc2ODtcbiAgc3RhdGUuaGVhZCA9IG51bGwvKlpfTlVMTCovO1xuICBzdGF0ZS5ob2xkID0gMDtcbiAgc3RhdGUuYml0cyA9IDA7XG4gIC8vc3RhdGUubGVuY29kZSA9IHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUubmV4dCA9IHN0YXRlLmNvZGVzO1xuICBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubGVuZHluID0gbmV3IHV0aWxzLkJ1ZjMyKEVOT1VHSF9MRU5TKTtcbiAgc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5kaXN0ZHluID0gbmV3IHV0aWxzLkJ1ZjMyKEVOT1VHSF9ESVNUUyk7XG5cbiAgc3RhdGUuc2FuZSA9IDE7XG4gIHN0YXRlLmJhY2sgPSAtMTtcbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiByZXNldFxcblwiKSk7XG4gIHJldHVybiBaX09LO1xufVxuXG5mdW5jdGlvbiBpbmZsYXRlUmVzZXQoc3RybSkge1xuICB2YXIgc3RhdGU7XG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIHN0YXRlLndzaXplID0gMDtcbiAgc3RhdGUud2hhdmUgPSAwO1xuICBzdGF0ZS53bmV4dCA9IDA7XG4gIHJldHVybiBpbmZsYXRlUmVzZXRLZWVwKHN0cm0pO1xuXG59XG5cbmZ1bmN0aW9uIGluZmxhdGVSZXNldDIoc3RybSwgd2luZG93Qml0cykge1xuICB2YXIgd3JhcDtcbiAgdmFyIHN0YXRlO1xuXG4gIC8qIGdldCB0aGUgc3RhdGUgKi9cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG5cbiAgLyogZXh0cmFjdCB3cmFwIHJlcXVlc3QgZnJvbSB3aW5kb3dCaXRzIHBhcmFtZXRlciAqL1xuICBpZiAod2luZG93Qml0cyA8IDApIHtcbiAgICB3cmFwID0gMDtcbiAgICB3aW5kb3dCaXRzID0gLXdpbmRvd0JpdHM7XG4gIH1cbiAgZWxzZSB7XG4gICAgd3JhcCA9ICh3aW5kb3dCaXRzID4+IDQpICsgMTtcbiAgICBpZiAod2luZG93Qml0cyA8IDQ4KSB7XG4gICAgICB3aW5kb3dCaXRzICY9IDE1O1xuICAgIH1cbiAgfVxuXG4gIC8qIHNldCBudW1iZXIgb2Ygd2luZG93IGJpdHMsIGZyZWUgd2luZG93IGlmIGRpZmZlcmVudCAqL1xuICBpZiAod2luZG93Qml0cyAmJiAod2luZG93Qml0cyA8IDggfHwgd2luZG93Qml0cyA+IDE1KSkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuICBpZiAoc3RhdGUud2luZG93ICE9PSBudWxsICYmIHN0YXRlLndiaXRzICE9PSB3aW5kb3dCaXRzKSB7XG4gICAgc3RhdGUud2luZG93ID0gbnVsbDtcbiAgfVxuXG4gIC8qIHVwZGF0ZSBzdGF0ZSBhbmQgcmVzZXQgdGhlIHJlc3Qgb2YgaXQgKi9cbiAgc3RhdGUud3JhcCA9IHdyYXA7XG4gIHN0YXRlLndiaXRzID0gd2luZG93Qml0cztcbiAgcmV0dXJuIGluZmxhdGVSZXNldChzdHJtKTtcbn1cblxuZnVuY3Rpb24gaW5mbGF0ZUluaXQyKHN0cm0sIHdpbmRvd0JpdHMpIHtcbiAgdmFyIHJldDtcbiAgdmFyIHN0YXRlO1xuXG4gIGlmICghc3RybSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgLy9zdHJtLm1zZyA9IFpfTlVMTDsgICAgICAgICAgICAgICAgIC8qIGluIGNhc2Ugd2UgcmV0dXJuIGFuIGVycm9yICovXG5cbiAgc3RhdGUgPSBuZXcgSW5mbGF0ZVN0YXRlKCk7XG5cbiAgLy9pZiAoc3RhdGUgPT09IFpfTlVMTCkgcmV0dXJuIFpfTUVNX0VSUk9SO1xuICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6IGFsbG9jYXRlZFxcblwiKSk7XG4gIHN0cm0uc3RhdGUgPSBzdGF0ZTtcbiAgc3RhdGUud2luZG93ID0gbnVsbC8qWl9OVUxMKi87XG4gIHJldCA9IGluZmxhdGVSZXNldDIoc3RybSwgd2luZG93Qml0cyk7XG4gIGlmIChyZXQgIT09IFpfT0spIHtcbiAgICBzdHJtLnN0YXRlID0gbnVsbC8qWl9OVUxMKi87XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gaW5mbGF0ZUluaXQoc3RybSkge1xuICByZXR1cm4gaW5mbGF0ZUluaXQyKHN0cm0sIERFRl9XQklUUyk7XG59XG5cblxuLypcbiBSZXR1cm4gc3RhdGUgd2l0aCBsZW5ndGggYW5kIGRpc3RhbmNlIGRlY29kaW5nIHRhYmxlcyBhbmQgaW5kZXggc2l6ZXMgc2V0IHRvXG4gZml4ZWQgY29kZSBkZWNvZGluZy4gIE5vcm1hbGx5IHRoaXMgcmV0dXJucyBmaXhlZCB0YWJsZXMgZnJvbSBpbmZmaXhlZC5oLlxuIElmIEJVSUxERklYRUQgaXMgZGVmaW5lZCwgdGhlbiBpbnN0ZWFkIHRoaXMgcm91dGluZSBidWlsZHMgdGhlIHRhYmxlcyB0aGVcbiBmaXJzdCB0aW1lIGl0J3MgY2FsbGVkLCBhbmQgcmV0dXJucyB0aG9zZSB0YWJsZXMgdGhlIGZpcnN0IHRpbWUgYW5kXG4gdGhlcmVhZnRlci4gIFRoaXMgcmVkdWNlcyB0aGUgc2l6ZSBvZiB0aGUgY29kZSBieSBhYm91dCAySyBieXRlcywgaW5cbiBleGNoYW5nZSBmb3IgYSBsaXR0bGUgZXhlY3V0aW9uIHRpbWUuICBIb3dldmVyLCBCVUlMREZJWEVEIHNob3VsZCBub3QgYmVcbiB1c2VkIGZvciB0aHJlYWRlZCBhcHBsaWNhdGlvbnMsIHNpbmNlIHRoZSByZXdyaXRpbmcgb2YgdGhlIHRhYmxlcyBhbmQgdmlyZ2luXG4gbWF5IG5vdCBiZSB0aHJlYWQtc2FmZS5cbiAqL1xudmFyIHZpcmdpbiA9IHRydWU7XG5cbnZhciBsZW5maXgsIGRpc3RmaXg7IC8vIFdlIGhhdmUgbm8gcG9pbnRlcnMgaW4gSlMsIHNvIGtlZXAgdGFibGVzIHNlcGFyYXRlXG5cbmZ1bmN0aW9uIGZpeGVkdGFibGVzKHN0YXRlKSB7XG4gIC8qIGJ1aWxkIGZpeGVkIGh1ZmZtYW4gdGFibGVzIGlmIGZpcnN0IGNhbGwgKG1heSBub3QgYmUgdGhyZWFkIHNhZmUpICovXG4gIGlmICh2aXJnaW4pIHtcbiAgICB2YXIgc3ltO1xuXG4gICAgbGVuZml4ID0gbmV3IHV0aWxzLkJ1ZjMyKDUxMik7XG4gICAgZGlzdGZpeCA9IG5ldyB1dGlscy5CdWYzMigzMik7XG5cbiAgICAvKiBsaXRlcmFsL2xlbmd0aCB0YWJsZSAqL1xuICAgIHN5bSA9IDA7XG4gICAgd2hpbGUgKHN5bSA8IDE0NCkgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDg7IH1cbiAgICB3aGlsZSAoc3ltIDwgMjU2KSB7IHN0YXRlLmxlbnNbc3ltKytdID0gOTsgfVxuICAgIHdoaWxlIChzeW0gPCAyODApIHsgc3RhdGUubGVuc1tzeW0rK10gPSA3OyB9XG4gICAgd2hpbGUgKHN5bSA8IDI4OCkgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDg7IH1cblxuICAgIGluZmxhdGVfdGFibGUoTEVOUywgIHN0YXRlLmxlbnMsIDAsIDI4OCwgbGVuZml4LCAgIDAsIHN0YXRlLndvcmssIHsgYml0czogOSB9KTtcblxuICAgIC8qIGRpc3RhbmNlIHRhYmxlICovXG4gICAgc3ltID0gMDtcbiAgICB3aGlsZSAoc3ltIDwgMzIpIHsgc3RhdGUubGVuc1tzeW0rK10gPSA1OyB9XG5cbiAgICBpbmZsYXRlX3RhYmxlKERJU1RTLCBzdGF0ZS5sZW5zLCAwLCAzMiwgICBkaXN0Zml4LCAwLCBzdGF0ZS53b3JrLCB7IGJpdHM6IDUgfSk7XG5cbiAgICAvKiBkbyB0aGlzIGp1c3Qgb25jZSAqL1xuICAgIHZpcmdpbiA9IGZhbHNlO1xuICB9XG5cbiAgc3RhdGUubGVuY29kZSA9IGxlbmZpeDtcbiAgc3RhdGUubGVuYml0cyA9IDk7XG4gIHN0YXRlLmRpc3Rjb2RlID0gZGlzdGZpeDtcbiAgc3RhdGUuZGlzdGJpdHMgPSA1O1xufVxuXG5cbi8qXG4gVXBkYXRlIHRoZSB3aW5kb3cgd2l0aCB0aGUgbGFzdCB3c2l6ZSAobm9ybWFsbHkgMzJLKSBieXRlcyB3cml0dGVuIGJlZm9yZVxuIHJldHVybmluZy4gIElmIHdpbmRvdyBkb2VzIG5vdCBleGlzdCB5ZXQsIGNyZWF0ZSBpdC4gIFRoaXMgaXMgb25seSBjYWxsZWRcbiB3aGVuIGEgd2luZG93IGlzIGFscmVhZHkgaW4gdXNlLCBvciB3aGVuIG91dHB1dCBoYXMgYmVlbiB3cml0dGVuIGR1cmluZyB0aGlzXG4gaW5mbGF0ZSBjYWxsLCBidXQgdGhlIGVuZCBvZiB0aGUgZGVmbGF0ZSBzdHJlYW0gaGFzIG5vdCBiZWVuIHJlYWNoZWQgeWV0LlxuIEl0IGlzIGFsc28gY2FsbGVkIHRvIGNyZWF0ZSBhIHdpbmRvdyBmb3IgZGljdGlvbmFyeSBkYXRhIHdoZW4gYSBkaWN0aW9uYXJ5XG4gaXMgbG9hZGVkLlxuXG4gUHJvdmlkaW5nIG91dHB1dCBidWZmZXJzIGxhcmdlciB0aGFuIDMySyB0byBpbmZsYXRlKCkgc2hvdWxkIHByb3ZpZGUgYSBzcGVlZFxuIGFkdmFudGFnZSwgc2luY2Ugb25seSB0aGUgbGFzdCAzMksgb2Ygb3V0cHV0IGlzIGNvcGllZCB0byB0aGUgc2xpZGluZyB3aW5kb3dcbiB1cG9uIHJldHVybiBmcm9tIGluZmxhdGUoKSwgYW5kIHNpbmNlIGFsbCBkaXN0YW5jZXMgYWZ0ZXIgdGhlIGZpcnN0IDMySyBvZlxuIG91dHB1dCB3aWxsIGZhbGwgaW4gdGhlIG91dHB1dCBkYXRhLCBtYWtpbmcgbWF0Y2ggY29waWVzIHNpbXBsZXIgYW5kIGZhc3Rlci5cbiBUaGUgYWR2YW50YWdlIG1heSBiZSBkZXBlbmRlbnQgb24gdGhlIHNpemUgb2YgdGhlIHByb2Nlc3NvcidzIGRhdGEgY2FjaGVzLlxuICovXG5mdW5jdGlvbiB1cGRhdGV3aW5kb3coc3RybSwgc3JjLCBlbmQsIGNvcHkpIHtcbiAgdmFyIGRpc3Q7XG4gIHZhciBzdGF0ZSA9IHN0cm0uc3RhdGU7XG5cbiAgLyogaWYgaXQgaGFzbid0IGJlZW4gZG9uZSBhbHJlYWR5LCBhbGxvY2F0ZSBzcGFjZSBmb3IgdGhlIHdpbmRvdyAqL1xuICBpZiAoc3RhdGUud2luZG93ID09PSBudWxsKSB7XG4gICAgc3RhdGUud3NpemUgPSAxIDw8IHN0YXRlLndiaXRzO1xuICAgIHN0YXRlLnduZXh0ID0gMDtcbiAgICBzdGF0ZS53aGF2ZSA9IDA7XG5cbiAgICBzdGF0ZS53aW5kb3cgPSBuZXcgdXRpbHMuQnVmOChzdGF0ZS53c2l6ZSk7XG4gIH1cblxuICAvKiBjb3B5IHN0YXRlLT53c2l6ZSBvciBsZXNzIG91dHB1dCBieXRlcyBpbnRvIHRoZSBjaXJjdWxhciB3aW5kb3cgKi9cbiAgaWYgKGNvcHkgPj0gc3RhdGUud3NpemUpIHtcbiAgICB1dGlscy5hcnJheVNldChzdGF0ZS53aW5kb3csIHNyYywgZW5kIC0gc3RhdGUud3NpemUsIHN0YXRlLndzaXplLCAwKTtcbiAgICBzdGF0ZS53bmV4dCA9IDA7XG4gICAgc3RhdGUud2hhdmUgPSBzdGF0ZS53c2l6ZTtcbiAgfVxuICBlbHNlIHtcbiAgICBkaXN0ID0gc3RhdGUud3NpemUgLSBzdGF0ZS53bmV4dDtcbiAgICBpZiAoZGlzdCA+IGNvcHkpIHtcbiAgICAgIGRpc3QgPSBjb3B5O1xuICAgIH1cbiAgICAvL3ptZW1jcHkoc3RhdGUtPndpbmRvdyArIHN0YXRlLT53bmV4dCwgZW5kIC0gY29weSwgZGlzdCk7XG4gICAgdXRpbHMuYXJyYXlTZXQoc3RhdGUud2luZG93LCBzcmMsIGVuZCAtIGNvcHksIGRpc3QsIHN0YXRlLnduZXh0KTtcbiAgICBjb3B5IC09IGRpc3Q7XG4gICAgaWYgKGNvcHkpIHtcbiAgICAgIC8vem1lbWNweShzdGF0ZS0+d2luZG93LCBlbmQgLSBjb3B5LCBjb3B5KTtcbiAgICAgIHV0aWxzLmFycmF5U2V0KHN0YXRlLndpbmRvdywgc3JjLCBlbmQgLSBjb3B5LCBjb3B5LCAwKTtcbiAgICAgIHN0YXRlLnduZXh0ID0gY29weTtcbiAgICAgIHN0YXRlLndoYXZlID0gc3RhdGUud3NpemU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgc3RhdGUud25leHQgKz0gZGlzdDtcbiAgICAgIGlmIChzdGF0ZS53bmV4dCA9PT0gc3RhdGUud3NpemUpIHsgc3RhdGUud25leHQgPSAwOyB9XG4gICAgICBpZiAoc3RhdGUud2hhdmUgPCBzdGF0ZS53c2l6ZSkgeyBzdGF0ZS53aGF2ZSArPSBkaXN0OyB9XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBpbmZsYXRlKHN0cm0sIGZsdXNoKSB7XG4gIHZhciBzdGF0ZTtcbiAgdmFyIGlucHV0LCBvdXRwdXQ7ICAgICAgICAgIC8vIGlucHV0L291dHB1dCBidWZmZXJzXG4gIHZhciBuZXh0OyAgICAgICAgICAgICAgICAgICAvKiBuZXh0IGlucHV0IElOREVYICovXG4gIHZhciBwdXQ7ICAgICAgICAgICAgICAgICAgICAvKiBuZXh0IG91dHB1dCBJTkRFWCAqL1xuICB2YXIgaGF2ZSwgbGVmdDsgICAgICAgICAgICAgLyogYXZhaWxhYmxlIGlucHV0IGFuZCBvdXRwdXQgKi9cbiAgdmFyIGhvbGQ7ICAgICAgICAgICAgICAgICAgIC8qIGJpdCBidWZmZXIgKi9cbiAgdmFyIGJpdHM7ICAgICAgICAgICAgICAgICAgIC8qIGJpdHMgaW4gYml0IGJ1ZmZlciAqL1xuICB2YXIgX2luLCBfb3V0OyAgICAgICAgICAgICAgLyogc2F2ZSBzdGFydGluZyBhdmFpbGFibGUgaW5wdXQgYW5kIG91dHB1dCAqL1xuICB2YXIgY29weTsgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIHN0b3JlZCBvciBtYXRjaCBieXRlcyB0byBjb3B5ICovXG4gIHZhciBmcm9tOyAgICAgICAgICAgICAgICAgICAvKiB3aGVyZSB0byBjb3B5IG1hdGNoIGJ5dGVzIGZyb20gKi9cbiAgdmFyIGZyb21fc291cmNlO1xuICB2YXIgaGVyZSA9IDA7ICAgICAgICAgICAgICAgLyogY3VycmVudCBkZWNvZGluZyB0YWJsZSBlbnRyeSAqL1xuICB2YXIgaGVyZV9iaXRzLCBoZXJlX29wLCBoZXJlX3ZhbDsgLy8gcGFrZWQgXCJoZXJlXCIgZGVub3JtYWxpemVkIChKUyBzcGVjaWZpYylcbiAgLy92YXIgbGFzdDsgICAgICAgICAgICAgICAgICAgLyogcGFyZW50IHRhYmxlIGVudHJ5ICovXG4gIHZhciBsYXN0X2JpdHMsIGxhc3Rfb3AsIGxhc3RfdmFsOyAvLyBwYWtlZCBcImxhc3RcIiBkZW5vcm1hbGl6ZWQgKEpTIHNwZWNpZmljKVxuICB2YXIgbGVuOyAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoIHRvIGNvcHkgZm9yIHJlcGVhdHMsIGJpdHMgdG8gZHJvcCAqL1xuICB2YXIgcmV0OyAgICAgICAgICAgICAgICAgICAgLyogcmV0dXJuIGNvZGUgKi9cbiAgdmFyIGhidWYgPSBuZXcgdXRpbHMuQnVmOCg0KTsgICAgLyogYnVmZmVyIGZvciBnemlwIGhlYWRlciBjcmMgY2FsY3VsYXRpb24gKi9cbiAgdmFyIG9wdHM7XG5cbiAgdmFyIG47IC8vIHRlbXBvcmFyeSB2YXIgZm9yIE5FRURfQklUU1xuXG4gIHZhciBvcmRlciA9IC8qIHBlcm11dGF0aW9uIG9mIGNvZGUgbGVuZ3RocyAqL1xuICAgIFsgMTYsIDE3LCAxOCwgMCwgOCwgNywgOSwgNiwgMTAsIDUsIDExLCA0LCAxMiwgMywgMTMsIDIsIDE0LCAxLCAxNSBdO1xuXG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlIHx8ICFzdHJtLm91dHB1dCB8fFxuICAgICAgKCFzdHJtLmlucHV0ICYmIHN0cm0uYXZhaWxfaW4gIT09IDApKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBpZiAoc3RhdGUubW9kZSA9PT0gVFlQRSkgeyBzdGF0ZS5tb2RlID0gVFlQRURPOyB9ICAgIC8qIHNraXAgY2hlY2sgKi9cblxuXG4gIC8vLS0tIExPQUQoKSAtLS1cbiAgcHV0ID0gc3RybS5uZXh0X291dDtcbiAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7XG4gIGxlZnQgPSBzdHJtLmF2YWlsX291dDtcbiAgbmV4dCA9IHN0cm0ubmV4dF9pbjtcbiAgaW5wdXQgPSBzdHJtLmlucHV0O1xuICBoYXZlID0gc3RybS5hdmFpbF9pbjtcbiAgaG9sZCA9IHN0YXRlLmhvbGQ7XG4gIGJpdHMgPSBzdGF0ZS5iaXRzO1xuICAvLy0tLVxuXG4gIF9pbiA9IGhhdmU7XG4gIF9vdXQgPSBsZWZ0O1xuICByZXQgPSBaX09LO1xuXG4gIGluZl9sZWF2ZTogLy8gZ290byBlbXVsYXRpb25cbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoc3RhdGUubW9kZSkge1xuICAgICAgY2FzZSBIRUFEOlxuICAgICAgICBpZiAoc3RhdGUud3JhcCA9PT0gMCkge1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFRE87XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpO1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIGlmICgoc3RhdGUud3JhcCAmIDIpICYmIGhvbGQgPT09IDB4OGIxZikgeyAgLyogZ3ppcCBoZWFkZXIgKi9cbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IDAvKmNyYzMyKDBMLCBaX05VTEwsIDApKi87XG4gICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XG4gICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApO1xuICAgICAgICAgIC8vPT09Ly9cblxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBGTEFHUztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5mbGFncyA9IDA7ICAgICAgICAgICAvKiBleHBlY3QgemxpYiBoZWFkZXIgKi9cbiAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShzdGF0ZS53cmFwICYgMSkgfHwgICAvKiBjaGVjayBpZiB6bGliIGhlYWRlciBhbGxvd2VkICovXG4gICAgICAgICAgKCgoaG9sZCAmIDB4ZmYpLypCSVRTKDgpKi8gPDwgOCkgKyAoaG9sZCA+PiA4KSkgJSAzMSkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBoZWFkZXIgY2hlY2snO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChob2xkICYgMHgwZikvKkJJVFMoNCkqLyAhPT0gWl9ERUZMQVRFRCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ3Vua25vd24gY29tcHJlc3Npb24gbWV0aG9kJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDQpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSA0O1xuICAgICAgICBiaXRzIC09IDQ7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgbGVuID0gKGhvbGQgJiAweDBmKS8qQklUUyg0KSovICsgODtcbiAgICAgICAgaWYgKHN0YXRlLndiaXRzID09PSAwKSB7XG4gICAgICAgICAgc3RhdGUud2JpdHMgPSBsZW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGVuID4gc3RhdGUud2JpdHMpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIHdpbmRvdyBzaXplJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmRtYXggPSAxIDw8IGxlbjtcbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIHpsaWIgaGVhZGVyIG9rXFxuXCIpKTtcbiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMS8qYWRsZXIzMigwTCwgWl9OVUxMLCAwKSovO1xuICAgICAgICBzdGF0ZS5tb2RlID0gaG9sZCAmIDB4MjAwID8gRElDVElEIDogVFlQRTtcbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBGTEFHUzpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLmZsYWdzID0gaG9sZDtcbiAgICAgICAgaWYgKChzdGF0ZS5mbGFncyAmIDB4ZmYpICE9PSBaX0RFRkxBVEVEKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBjb21wcmVzc2lvbiBtZXRob2QnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHhlMDAwKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBoZWFkZXIgZmxhZ3Mgc2V0JztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC50ZXh0ID0gKChob2xkID4+IDgpICYgMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XG4gICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgfVxuICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICBob2xkID0gMDtcbiAgICAgICAgYml0cyA9IDA7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubW9kZSA9IFRJTUU7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgVElNRTpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC50aW1lID0gaG9sZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAvLz09PSBDUkM0KHN0YXRlLmNoZWNrLCBob2xkKVxuICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzJdID0gKGhvbGQgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlszXSA9IChob2xkID4+PiAyNCkgJiAweGZmO1xuICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDQsIDApO1xuICAgICAgICAgIC8vPT09XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBPUztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBPUzpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC54ZmxhZ3MgPSAoaG9sZCAmIDB4ZmYpO1xuICAgICAgICAgIHN0YXRlLmhlYWQub3MgPSAoaG9sZCA+PiA4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcbiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICB9XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5tb2RlID0gRVhMRU47XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRVhMRU46XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDQwMCkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi9cbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUubGVuZ3RoID0gaG9sZDtcbiAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYV9sZW4gPSBob2xkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xuICAgICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuICAgICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcbiAgICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmEgPSBudWxsLypaX05VTEwqLztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5tb2RlID0gRVhUUkE7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRVhUUkE6XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDQwMCkge1xuICAgICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgICAgaWYgKGNvcHkgPiBoYXZlKSB7IGNvcHkgPSBoYXZlOyB9XG4gICAgICAgICAgaWYgKGNvcHkpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgICAgIGxlbiA9IHN0YXRlLmhlYWQuZXh0cmFfbGVuIC0gc3RhdGUubGVuZ3RoO1xuICAgICAgICAgICAgICBpZiAoIXN0YXRlLmhlYWQuZXh0cmEpIHtcbiAgICAgICAgICAgICAgICAvLyBVc2UgdW50eXBlZCBhcnJheSBmb3IgbW9yZSBjb252ZW5pZW50IHByb2Nlc3NpbmcgbGF0ZXJcbiAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhID0gbmV3IEFycmF5KHN0YXRlLmhlYWQuZXh0cmFfbGVuKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB1dGlscy5hcnJheVNldChcbiAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhLFxuICAgICAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgICAgIG5leHQsXG4gICAgICAgICAgICAgICAgLy8gZXh0cmEgZmllbGQgaXMgbGltaXRlZCB0byA2NTUzNiBieXRlc1xuICAgICAgICAgICAgICAgIC8vIC0gbm8gbmVlZCBmb3IgYWRkaXRpb25hbCBzaXplIGNoZWNrXG4gICAgICAgICAgICAgICAgY29weSxcbiAgICAgICAgICAgICAgICAvKmxlbiArIGNvcHkgPiBzdGF0ZS5oZWFkLmV4dHJhX21heCAtIGxlbiA/IHN0YXRlLmhlYWQuZXh0cmFfbWF4IDogY29weSwqL1xuICAgICAgICAgICAgICAgIGxlblxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAvL3ptZW1jcHkoc3RhdGUuaGVhZC5leHRyYSArIGxlbiwgbmV4dCxcbiAgICAgICAgICAgICAgLy8gICAgICAgIGxlbiArIGNvcHkgPiBzdGF0ZS5oZWFkLmV4dHJhX21heCA/XG4gICAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhX21heCAtIGxlbiA6IGNvcHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGlucHV0LCBjb3B5LCBuZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhdmUgLT0gY29weTtcbiAgICAgICAgICAgIG5leHQgKz0gY29weTtcbiAgICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IDA7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBOQU1FO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIE5BTUU6XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDgwMCkge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGNvcHkgPSAwO1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIC8vIFRPRE86IDIgb3IgMSBieXRlcz9cbiAgICAgICAgICAgIGxlbiA9IGlucHV0W25leHQgKyBjb3B5KytdO1xuICAgICAgICAgICAgLyogdXNlIGNvbnN0YW50IGxpbWl0IGJlY2F1c2UgaW4ganMgd2Ugc2hvdWxkIG5vdCBwcmVhbGxvY2F0ZSBtZW1vcnkgKi9cbiAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkICYmIGxlbiAmJlxuICAgICAgICAgICAgICAgIChzdGF0ZS5sZW5ndGggPCA2NTUzNiAvKnN0YXRlLmhlYWQubmFtZV9tYXgqLykpIHtcbiAgICAgICAgICAgICAgc3RhdGUuaGVhZC5uYW1lICs9IFN0cmluZy5mcm9tQ2hhckNvZGUobGVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IHdoaWxlIChsZW4gJiYgY29weSA8IGhhdmUpO1xuXG4gICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBpbnB1dCwgY29weSwgbmV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGhhdmUgLT0gY29weTtcbiAgICAgICAgICBuZXh0ICs9IGNvcHk7XG4gICAgICAgICAgaWYgKGxlbikgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC5uYW1lID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5sZW5ndGggPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQ09NTUVOVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBDT01NRU5UOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDEwMDApIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBjb3B5ID0gMDtcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBsZW4gPSBpbnB1dFtuZXh0ICsgY29weSsrXTtcbiAgICAgICAgICAgIC8qIHVzZSBjb25zdGFudCBsaW1pdCBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5ICovXG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAmJiBsZW4gJiZcbiAgICAgICAgICAgICAgICAoc3RhdGUubGVuZ3RoIDwgNjU1MzYgLypzdGF0ZS5oZWFkLmNvbW1fbWF4Ki8pKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmhlYWQuY29tbWVudCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAobGVuICYmIGNvcHkgPCBoYXZlKTtcbiAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGlucHV0LCBjb3B5LCBuZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaGF2ZSAtPSBjb3B5O1xuICAgICAgICAgIG5leHQgKz0gY29weTtcbiAgICAgICAgICBpZiAobGVuKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmNvbW1lbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLm1vZGUgPSBIQ1JDO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIEhDUkM6XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi9cbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgaWYgKGhvbGQgIT09IChzdGF0ZS5jaGVjayAmIDB4ZmZmZikpIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2hlYWRlciBjcmMgbWlzbWF0Y2gnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQuaGNyYyA9ICgoc3RhdGUuZmxhZ3MgPj4gOSkgJiAxKTtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmRvbmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IDA7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRElDVElEOlxuICAgICAgICAvLz09PSBORUVEQklUUygzMik7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0genN3YXAzMihob2xkKTtcbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBESUNUO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIERJQ1Q6XG4gICAgICAgIGlmIChzdGF0ZS5oYXZlZGljdCA9PT0gMCkge1xuICAgICAgICAgIC8vLS0tIFJFU1RPUkUoKSAtLS1cbiAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gcHV0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgICAgICAgICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfaW4gPSBoYXZlO1xuICAgICAgICAgIHN0YXRlLmhvbGQgPSBob2xkO1xuICAgICAgICAgIHN0YXRlLmJpdHMgPSBiaXRzO1xuICAgICAgICAgIC8vLS0tXG4gICAgICAgICAgcmV0dXJuIFpfTkVFRF9ESUNUO1xuICAgICAgICB9XG4gICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IDEvKmFkbGVyMzIoMEwsIFpfTlVMTCwgMCkqLztcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgVFlQRTpcbiAgICAgICAgaWYgKGZsdXNoID09PSBaX0JMT0NLIHx8IGZsdXNoID09PSBaX1RSRUVTKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRZUEVETzpcbiAgICAgICAgaWYgKHN0YXRlLmxhc3QpIHtcbiAgICAgICAgICAvLy0tLSBCWVRFQklUUygpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IGJpdHMgJiA3O1xuICAgICAgICAgIGJpdHMgLT0gYml0cyAmIDc7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBDSEVDSztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLz09PSBORUVEQklUUygzKTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAzKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLmxhc3QgPSAoaG9sZCAmIDB4MDEpLypCSVRTKDEpKi87XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDEpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSAxO1xuICAgICAgICBiaXRzIC09IDE7XG4gICAgICAgIC8vLS0tLy9cblxuICAgICAgICBzd2l0Y2ggKChob2xkICYgMHgwMykvKkJJVFMoMikqLykge1xuICAgICAgICAgIGNhc2UgMDogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHN0b3JlZCBibG9jayAqL1xuICAgICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgc3RvcmVkIGJsb2NrJXNcXG5cIixcbiAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gU1RPUkVEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZml4ZWQgYmxvY2sgKi9cbiAgICAgICAgICAgIGZpeGVkdGFibGVzKHN0YXRlKTtcbiAgICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgIGZpeGVkIGNvZGVzIGJsb2NrJXNcXG5cIixcbiAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVOXzsgICAgICAgICAgICAgLyogZGVjb2RlIGNvZGVzICovXG4gICAgICAgICAgICBpZiAoZmx1c2ggPT09IFpfVFJFRVMpIHtcbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IDI7XG4gICAgICAgICAgICAgIGJpdHMgLT0gMjtcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBkeW5hbWljIGJsb2NrICovXG4gICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICBkeW5hbWljIGNvZGVzIGJsb2NrJXNcXG5cIixcbiAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gVEFCTEU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGJsb2NrIHR5cGUnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgfVxuICAgICAgICAvLy0tLSBEUk9QQklUUygyKSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gMjtcbiAgICAgICAgYml0cyAtPSAyO1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTVE9SRUQ6XG4gICAgICAgIC8vLS0tIEJZVEVCSVRTKCkgLS0tLy8gLyogZ28gdG8gYnl0ZSBib3VuZGFyeSAqL1xuICAgICAgICBob2xkID4+Pj0gYml0cyAmIDc7XG4gICAgICAgIGJpdHMgLT0gYml0cyAmIDc7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIGlmICgoaG9sZCAmIDB4ZmZmZikgIT09ICgoaG9sZCA+Pj4gMTYpIF4gMHhmZmZmKSkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgc3RvcmVkIGJsb2NrIGxlbmd0aHMnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubGVuZ3RoID0gaG9sZCAmIDB4ZmZmZjtcbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICBzdG9yZWQgbGVuZ3RoICV1XFxuXCIsXG4gICAgICAgIC8vICAgICAgICBzdGF0ZS5sZW5ndGgpKTtcbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBDT1BZXztcbiAgICAgICAgaWYgKGZsdXNoID09PSBaX1RSRUVTKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIENPUFlfOlxuICAgICAgICBzdGF0ZS5tb2RlID0gQ09QWTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBDT1BZOlxuICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICBpZiAoY29weSkge1xuICAgICAgICAgIGlmIChjb3B5ID4gaGF2ZSkgeyBjb3B5ID0gaGF2ZTsgfVxuICAgICAgICAgIGlmIChjb3B5ID4gbGVmdCkgeyBjb3B5ID0gbGVmdDsgfVxuICAgICAgICAgIGlmIChjb3B5ID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIC8vLS0tIHptZW1jcHkocHV0LCBuZXh0LCBjb3B5KTsgLS0tXG4gICAgICAgICAgdXRpbHMuYXJyYXlTZXQob3V0cHV0LCBpbnB1dCwgbmV4dCwgY29weSwgcHV0KTtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgaGF2ZSAtPSBjb3B5O1xuICAgICAgICAgIG5leHQgKz0gY29weTtcbiAgICAgICAgICBsZWZ0IC09IGNvcHk7XG4gICAgICAgICAgcHV0ICs9IGNvcHk7XG4gICAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICBzdG9yZWQgZW5kXFxuXCIpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUQUJMRTpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTQpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE0KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm5sZW4gPSAoaG9sZCAmIDB4MWYpLypCSVRTKDUpKi8gKyAyNTc7XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDUpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSA1O1xuICAgICAgICBiaXRzIC09IDU7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgc3RhdGUubmRpc3QgPSAoaG9sZCAmIDB4MWYpLypCSVRTKDUpKi8gKyAxO1xuICAgICAgICAvLy0tLSBEUk9QQklUUyg1KSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gNTtcbiAgICAgICAgYml0cyAtPSA1O1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIHN0YXRlLm5jb2RlID0gKGhvbGQgJiAweDBmKS8qQklUUyg0KSovICsgNDtcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoNCkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDQ7XG4gICAgICAgIGJpdHMgLT0gNDtcbiAgICAgICAgLy8tLS0vL1xuLy8jaWZuZGVmIFBLWklQX0JVR19XT1JLQVJPVU5EXG4gICAgICAgIGlmIChzdGF0ZS5ubGVuID4gMjg2IHx8IHN0YXRlLm5kaXN0ID4gMzApIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICd0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2Ugc3ltYm9scyc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuLy8jZW5kaWZcbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICB0YWJsZSBzaXplcyBva1xcblwiKSk7XG4gICAgICAgIHN0YXRlLmhhdmUgPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOTEVOUztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5MRU5TOlxuICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IHN0YXRlLm5jb2RlKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMyk7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAzKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUubGVuc1tvcmRlcltzdGF0ZS5oYXZlKytdXSA9IChob2xkICYgMHgwNyk7Ly9CSVRTKDMpO1xuICAgICAgICAgIC8vLS0tIERST1BCSVRTKDMpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IDM7XG4gICAgICAgICAgYml0cyAtPSAzO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IDE5KSB7XG4gICAgICAgICAgc3RhdGUubGVuc1tvcmRlcltzdGF0ZS5oYXZlKytdXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cbiAgICAgICAgLy9zdGF0ZS5uZXh0ID0gc3RhdGUuY29kZXM7XG4gICAgICAgIC8vc3RhdGUubGVuY29kZSA9IHN0YXRlLm5leHQ7XG4gICAgICAgIC8vIFN3aXRjaCB0byB1c2UgZHluYW1pYyB0YWJsZVxuICAgICAgICBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubGVuZHluO1xuICAgICAgICBzdGF0ZS5sZW5iaXRzID0gNztcblxuICAgICAgICBvcHRzID0geyBiaXRzOiBzdGF0ZS5sZW5iaXRzIH07XG4gICAgICAgIHJldCA9IGluZmxhdGVfdGFibGUoQ09ERVMsIHN0YXRlLmxlbnMsIDAsIDE5LCBzdGF0ZS5sZW5jb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTtcbiAgICAgICAgc3RhdGUubGVuYml0cyA9IG9wdHMuYml0cztcblxuICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBjb2RlIGxlbmd0aHMgc2V0JztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgY29kZSBsZW5ndGhzIG9rXFxuXCIpKTtcbiAgICAgICAgc3RhdGUuaGF2ZSA9IDA7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBDT0RFTEVOUztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBDT0RFTEVOUzpcbiAgICAgICAgd2hpbGUgKHN0YXRlLmhhdmUgPCBzdGF0ZS5ubGVuICsgc3RhdGUubmRpc3QpIHtcbiAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtob2xkICYgKCgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMSldOy8qQklUUyhzdGF0ZS5sZW5iaXRzKSovXG4gICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgICAgaWYgKChoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoZXJlX3ZhbCA8IDE2KSB7XG4gICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICBzdGF0ZS5sZW5zW3N0YXRlLmhhdmUrK10gPSBoZXJlX3ZhbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoaGVyZV92YWwgPT09IDE2KSB7XG4gICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDIpO1xuICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgMjtcbiAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgaWYgKHN0YXRlLmhhdmUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0JztcbiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxlbiA9IHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSAtIDFdO1xuICAgICAgICAgICAgICBjb3B5ID0gMyArIChob2xkICYgMHgwMyk7Ly9CSVRTKDIpO1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUygyKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gMjtcbiAgICAgICAgICAgICAgYml0cyAtPSAyO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChoZXJlX3ZhbCA9PT0gMTcpIHtcbiAgICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoaGVyZS5iaXRzICsgMyk7XG4gICAgICAgICAgICAgIG4gPSBoZXJlX2JpdHMgKyAzO1xuICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgICBsZW4gPSAwO1xuICAgICAgICAgICAgICBjb3B5ID0gMyArIChob2xkICYgMHgwNyk7Ly9CSVRTKDMpO1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUygzKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gMztcbiAgICAgICAgICAgICAgYml0cyAtPSAzO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoaGVyZS5iaXRzICsgNyk7XG4gICAgICAgICAgICAgIG4gPSBoZXJlX2JpdHMgKyA3O1xuICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgICBsZW4gPSAwO1xuICAgICAgICAgICAgICBjb3B5ID0gMTEgKyAoaG9sZCAmIDB4N2YpOy8vQklUUyg3KTtcbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoNykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IDc7XG4gICAgICAgICAgICAgIGJpdHMgLT0gNztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlLmhhdmUgKyBjb3B5ID4gc3RhdGUubmxlbiArIHN0YXRlLm5kaXN0KSB7XG4gICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgYml0IGxlbmd0aCByZXBlYXQnO1xuICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChjb3B5LS0pIHtcbiAgICAgICAgICAgICAgc3RhdGUubGVuc1tzdGF0ZS5oYXZlKytdID0gbGVuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGhhbmRsZSBlcnJvciBicmVha3MgaW4gd2hpbGUgKi9cbiAgICAgICAgaWYgKHN0YXRlLm1vZGUgPT09IEJBRCkgeyBicmVhazsgfVxuXG4gICAgICAgIC8qIGNoZWNrIGZvciBlbmQtb2YtYmxvY2sgY29kZSAoYmV0dGVyIGhhdmUgb25lKSAqL1xuICAgICAgICBpZiAoc3RhdGUubGVuc1syNTZdID09PSAwKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBjb2RlIC0tIG1pc3NpbmcgZW5kLW9mLWJsb2NrJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogYnVpbGQgY29kZSB0YWJsZXMgLS0gbm90ZTogZG8gbm90IGNoYW5nZSB0aGUgbGVuYml0cyBvciBkaXN0Yml0c1xuICAgICAgICAgICB2YWx1ZXMgaGVyZSAoOSBhbmQgNikgd2l0aG91dCByZWFkaW5nIHRoZSBjb21tZW50cyBpbiBpbmZ0cmVlcy5oXG4gICAgICAgICAgIGNvbmNlcm5pbmcgdGhlIEVOT1VHSCBjb25zdGFudHMsIHdoaWNoIGRlcGVuZCBvbiB0aG9zZSB2YWx1ZXMgKi9cbiAgICAgICAgc3RhdGUubGVuYml0cyA9IDk7XG5cbiAgICAgICAgb3B0cyA9IHsgYml0czogc3RhdGUubGVuYml0cyB9O1xuICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKExFTlMsIHN0YXRlLmxlbnMsIDAsIHN0YXRlLm5sZW4sIHN0YXRlLmxlbmNvZGUsIDAsIHN0YXRlLndvcmssIG9wdHMpO1xuICAgICAgICAvLyBXZSBoYXZlIHNlcGFyYXRlIHRhYmxlcyAmIG5vIHBvaW50ZXJzLiAyIGNvbW1lbnRlZCBsaW5lcyBiZWxvdyBub3QgbmVlZGVkLlxuICAgICAgICAvLyBzdGF0ZS5uZXh0X2luZGV4ID0gb3B0cy50YWJsZV9pbmRleDtcbiAgICAgICAgc3RhdGUubGVuYml0cyA9IG9wdHMuYml0cztcbiAgICAgICAgLy8gc3RhdGUubGVuY29kZSA9IHN0YXRlLm5leHQ7XG5cbiAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGhzIHNldCc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlLmRpc3RiaXRzID0gNjtcbiAgICAgICAgLy9zdGF0ZS5kaXN0Y29kZS5jb3B5KHN0YXRlLmNvZGVzKTtcbiAgICAgICAgLy8gU3dpdGNoIHRvIHVzZSBkeW5hbWljIHRhYmxlXG4gICAgICAgIHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUuZGlzdGR5bjtcbiAgICAgICAgb3B0cyA9IHsgYml0czogc3RhdGUuZGlzdGJpdHMgfTtcbiAgICAgICAgcmV0ID0gaW5mbGF0ZV90YWJsZShESVNUUywgc3RhdGUubGVucywgc3RhdGUubmxlbiwgc3RhdGUubmRpc3QsIHN0YXRlLmRpc3Rjb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTtcbiAgICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cbiAgICAgICAgLy8gc3RhdGUubmV4dF9pbmRleCA9IG9wdHMudGFibGVfaW5kZXg7XG4gICAgICAgIHN0YXRlLmRpc3RiaXRzID0gb3B0cy5iaXRzO1xuICAgICAgICAvLyBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLm5leHQ7XG5cbiAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2VzIHNldCc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCAnaW5mbGF0ZTogICAgICAgY29kZXMgb2tcXG4nKSk7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU5fO1xuICAgICAgICBpZiAoZmx1c2ggPT09IFpfVFJFRVMpIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgTEVOXzpcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTjtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU46XG4gICAgICAgIGlmIChoYXZlID49IDYgJiYgbGVmdCA+PSAyNTgpIHtcbiAgICAgICAgICAvLy0tLSBSRVNUT1JFKCkgLS0tXG4gICAgICAgICAgc3RybS5uZXh0X291dCA9IHB1dDtcbiAgICAgICAgICBzdHJtLmF2YWlsX291dCA9IGxlZnQ7XG4gICAgICAgICAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgICAgICAgICBzdHJtLmF2YWlsX2luID0gaGF2ZTtcbiAgICAgICAgICBzdGF0ZS5ob2xkID0gaG9sZDtcbiAgICAgICAgICBzdGF0ZS5iaXRzID0gYml0cztcbiAgICAgICAgICAvLy0tLVxuICAgICAgICAgIGluZmxhdGVfZmFzdChzdHJtLCBfb3V0KTtcbiAgICAgICAgICAvLy0tLSBMT0FEKCkgLS0tXG4gICAgICAgICAgcHV0ID0gc3RybS5uZXh0X291dDtcbiAgICAgICAgICBvdXRwdXQgPSBzdHJtLm91dHB1dDtcbiAgICAgICAgICBsZWZ0ID0gc3RybS5hdmFpbF9vdXQ7XG4gICAgICAgICAgbmV4dCA9IHN0cm0ubmV4dF9pbjtcbiAgICAgICAgICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG4gICAgICAgICAgaGF2ZSA9IHN0cm0uYXZhaWxfaW47XG4gICAgICAgICAgaG9sZCA9IHN0YXRlLmhvbGQ7XG4gICAgICAgICAgYml0cyA9IHN0YXRlLmJpdHM7XG4gICAgICAgICAgLy8tLS1cblxuICAgICAgICAgIGlmIChzdGF0ZS5tb2RlID09PSBUWVBFKSB7XG4gICAgICAgICAgICBzdGF0ZS5iYWNrID0gLTE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmJhY2sgPSAwO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgaGVyZSA9IHN0YXRlLmxlbmNvZGVbaG9sZCAmICgoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtIDEpXTsgIC8qQklUUyhzdGF0ZS5sZW5iaXRzKSovXG4gICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgIGlmIChoZXJlX2JpdHMgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVyZV9vcCAmJiAoaGVyZV9vcCAmIDB4ZjApID09PSAwKSB7XG4gICAgICAgICAgbGFzdF9iaXRzID0gaGVyZV9iaXRzO1xuICAgICAgICAgIGxhc3Rfb3AgPSBoZXJlX29wO1xuICAgICAgICAgIGxhc3RfdmFsID0gaGVyZV92YWw7XG4gICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmxlbmNvZGVbbGFzdF92YWwgK1xuICAgICAgICAgICAgICAgICAgICAoKGhvbGQgJiAoKDEgPDwgKGxhc3RfYml0cyArIGxhc3Rfb3ApKSAtIDEpKS8qQklUUyhsYXN0LmJpdHMgKyBsYXN0Lm9wKSovID4+IGxhc3RfYml0cyldO1xuICAgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICAgIGlmICgobGFzdF9iaXRzICsgaGVyZV9iaXRzKSA8PSBiaXRzKSB7IGJyZWFrOyB9XG4gICAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhsYXN0LmJpdHMpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IGxhc3RfYml0cztcbiAgICAgICAgICBiaXRzIC09IGxhc3RfYml0cztcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUuYmFjayArPSBsYXN0X2JpdHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBzdGF0ZS5iYWNrICs9IGhlcmVfYml0cztcbiAgICAgICAgc3RhdGUubGVuZ3RoID0gaGVyZV92YWw7XG4gICAgICAgIGlmIChoZXJlX29wID09PSAwKSB7XG4gICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIGhlcmUudmFsID49IDB4MjAgJiYgaGVyZS52YWwgPCAweDdmID9cbiAgICAgICAgICAvLyAgICAgICAgXCJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgJyVjJ1xcblwiIDpcbiAgICAgICAgICAvLyAgICAgICAgXCJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgMHglMDJ4XFxuXCIsIGhlcmUudmFsKSk7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IExJVDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVyZV9vcCAmIDMyKSB7XG4gICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBlbmQgb2YgYmxvY2tcXG5cIikpO1xuICAgICAgICAgIHN0YXRlLmJhY2sgPSAtMTtcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVyZV9vcCAmIDY0KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmV4dHJhID0gaGVyZV9vcCAmIDE1O1xuICAgICAgICBzdGF0ZS5tb2RlID0gTEVORVhUO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIExFTkVYVDpcbiAgICAgICAgaWYgKHN0YXRlLmV4dHJhKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoc3RhdGUuZXh0cmEpO1xuICAgICAgICAgIG4gPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5sZW5ndGggKz0gaG9sZCAmICgoMSA8PCBzdGF0ZS5leHRyYSkgLSAxKS8qQklUUyhzdGF0ZS5leHRyYSkqLztcbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhzdGF0ZS5leHRyYSkgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgYml0cyAtPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUuYmFjayArPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgfVxuICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGxlbmd0aCAldVxcblwiLCBzdGF0ZS5sZW5ndGgpKTtcbiAgICAgICAgc3RhdGUud2FzID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICBzdGF0ZS5tb2RlID0gRElTVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBESVNUOlxuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgaGVyZSA9IHN0YXRlLmRpc3Rjb2RlW2hvbGQgJiAoKDEgPDwgc3RhdGUuZGlzdGJpdHMpIC0gMSldOy8qQklUUyhzdGF0ZS5kaXN0Yml0cykqL1xuICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICBpZiAoKGhlcmVfYml0cykgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgfVxuICAgICAgICBpZiAoKGhlcmVfb3AgJiAweGYwKSA9PT0gMCkge1xuICAgICAgICAgIGxhc3RfYml0cyA9IGhlcmVfYml0cztcbiAgICAgICAgICBsYXN0X29wID0gaGVyZV9vcDtcbiAgICAgICAgICBsYXN0X3ZhbCA9IGhlcmVfdmFsO1xuICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5kaXN0Y29kZVtsYXN0X3ZhbCArXG4gICAgICAgICAgICAgICAgICAgICgoaG9sZCAmICgoMSA8PCAobGFzdF9iaXRzICsgbGFzdF9vcCkpIC0gMSkpLypCSVRTKGxhc3QuYml0cyArIGxhc3Qub3ApKi8gPj4gbGFzdF9iaXRzKV07XG4gICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgICAgaWYgKChsYXN0X2JpdHMgKyBoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vLS0tIERST1BCSVRTKGxhc3QuYml0cykgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gbGFzdF9iaXRzO1xuICAgICAgICAgIGJpdHMgLT0gbGFzdF9iaXRzO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBzdGF0ZS5iYWNrICs9IGxhc3RfYml0cztcbiAgICAgICAgfVxuICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIHN0YXRlLmJhY2sgKz0gaGVyZV9iaXRzO1xuICAgICAgICBpZiAoaGVyZV9vcCAmIDY0KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSBjb2RlJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLm9mZnNldCA9IGhlcmVfdmFsO1xuICAgICAgICBzdGF0ZS5leHRyYSA9IChoZXJlX29wKSAmIDE1O1xuICAgICAgICBzdGF0ZS5tb2RlID0gRElTVEVYVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBESVNURVhUOlxuICAgICAgICBpZiAoc3RhdGUuZXh0cmEpIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUyhzdGF0ZS5leHRyYSk7XG4gICAgICAgICAgbiA9IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLm9mZnNldCArPSBob2xkICYgKCgxIDw8IHN0YXRlLmV4dHJhKSAtIDEpLypCSVRTKHN0YXRlLmV4dHJhKSovO1xuICAgICAgICAgIC8vLS0tIERST1BCSVRTKHN0YXRlLmV4dHJhKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICBiaXRzIC09IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBzdGF0ZS5iYWNrICs9IHN0YXRlLmV4dHJhO1xuICAgICAgICB9XG4vLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxuICAgICAgICBpZiAoc3RhdGUub2Zmc2V0ID4gc3RhdGUuZG1heCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4vLyNlbmRpZlxuICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XFxuXCIsIHN0YXRlLm9mZnNldCkpO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTUFUQ0g7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgTUFUQ0g6XG4gICAgICAgIGlmIChsZWZ0ID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICBjb3B5ID0gX291dCAtIGxlZnQ7XG4gICAgICAgIGlmIChzdGF0ZS5vZmZzZXQgPiBjb3B5KSB7ICAgICAgICAgLyogY29weSBmcm9tIHdpbmRvdyAqL1xuICAgICAgICAgIGNvcHkgPSBzdGF0ZS5vZmZzZXQgLSBjb3B5O1xuICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUud2hhdmUpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5zYW5lKSB7XG4gICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcbiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4vLyAoISkgVGhpcyBibG9jayBpcyBkaXNhYmxlZCBpbiB6bGliIGRlZmF1bHRzLFxuLy8gZG9uJ3QgZW5hYmxlIGl0IGZvciBiaW5hcnkgY29tcGF0aWJpbGl0eVxuLy8jaWZkZWYgSU5GTEFURV9BTExPV19JTlZBTElEX0RJU1RBTkNFX1RPT0ZBUl9BUlJSXG4vLyAgICAgICAgICBUcmFjZSgoc3RkZXJyLCBcImluZmxhdGUuYyB0b28gZmFyXFxuXCIpKTtcbi8vICAgICAgICAgIGNvcHkgLT0gc3RhdGUud2hhdmU7XG4vLyAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLmxlbmd0aCkgeyBjb3B5ID0gc3RhdGUubGVuZ3RoOyB9XG4vLyAgICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsgY29weSA9IGxlZnQ7IH1cbi8vICAgICAgICAgIGxlZnQgLT0gY29weTtcbi8vICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuLy8gICAgICAgICAgZG8ge1xuLy8gICAgICAgICAgICBvdXRwdXRbcHV0KytdID0gMDtcbi8vICAgICAgICAgIH0gd2hpbGUgKC0tY29weSk7XG4vLyAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7IHN0YXRlLm1vZGUgPSBMRU47IH1cbi8vICAgICAgICAgIGJyZWFrO1xuLy8jZW5kaWZcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS53bmV4dCkge1xuICAgICAgICAgICAgY29weSAtPSBzdGF0ZS53bmV4dDtcbiAgICAgICAgICAgIGZyb20gPSBzdGF0ZS53c2l6ZSAtIGNvcHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZnJvbSA9IHN0YXRlLnduZXh0IC0gY29weTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS5sZW5ndGgpIHsgY29weSA9IHN0YXRlLmxlbmd0aDsgfVxuICAgICAgICAgIGZyb21fc291cmNlID0gc3RhdGUud2luZG93O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGNvcHkgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICBmcm9tID0gcHV0IC0gc3RhdGUub2Zmc2V0O1xuICAgICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7IGNvcHkgPSBsZWZ0OyB9XG4gICAgICAgIGxlZnQgLT0gY29weTtcbiAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBvdXRwdXRbcHV0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgfSB3aGlsZSAoLS1jb3B5KTtcbiAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgeyBzdGF0ZS5tb2RlID0gTEVOOyB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMSVQ6XG4gICAgICAgIGlmIChsZWZ0ID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICBvdXRwdXRbcHV0KytdID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICBsZWZ0LS07XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU47XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDSEVDSzpcbiAgICAgICAgaWYgKHN0YXRlLndyYXApIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUygzMik7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAvLyBVc2UgJ3wnIGluc3RlYWQgb2YgJysnIHRvIG1ha2Ugc3VyZSB0aGF0IHJlc3VsdCBpcyBzaWduZWRcbiAgICAgICAgICAgIGhvbGQgfD0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgX291dCAtPSBsZWZ0O1xuICAgICAgICAgIHN0cm0udG90YWxfb3V0ICs9IF9vdXQ7XG4gICAgICAgICAgc3RhdGUudG90YWwgKz0gX291dDtcbiAgICAgICAgICBpZiAoX291dCkge1xuICAgICAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID1cbiAgICAgICAgICAgICAgICAvKlVQREFURShzdGF0ZS5jaGVjaywgcHV0IC0gX291dCwgX291dCk7Ki9cbiAgICAgICAgICAgICAgICAoc3RhdGUuZmxhZ3MgPyBjcmMzMihzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBwdXQgLSBfb3V0KSA6IGFkbGVyMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgcHV0IC0gX291dCkpO1xuXG4gICAgICAgICAgfVxuICAgICAgICAgIF9vdXQgPSBsZWZ0O1xuICAgICAgICAgIC8vIE5COiBjcmMzMiBzdG9yZWQgYXMgc2lnbmVkIDMyLWJpdCBpbnQsIHpzd2FwMzIgcmV0dXJucyBzaWduZWQgdG9vXG4gICAgICAgICAgaWYgKChzdGF0ZS5mbGFncyA/IGhvbGQgOiB6c3dhcDMyKGhvbGQpKSAhPT0gc3RhdGUuY2hlY2spIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBkYXRhIGNoZWNrJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIGNoZWNrIG1hdGNoZXMgdHJhaWxlclxcblwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubW9kZSA9IExFTkdUSDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5HVEg6XG4gICAgICAgIGlmIChzdGF0ZS53cmFwICYmIHN0YXRlLmZsYWdzKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpO1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBpZiAoaG9sZCAhPT0gKHN0YXRlLnRvdGFsICYgMHhmZmZmZmZmZikpIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBsZW5ndGggY2hlY2snO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgbGVuZ3RoIG1hdGNoZXMgdHJhaWxlclxcblwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubW9kZSA9IERPTkU7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRE9ORTpcbiAgICAgICAgcmV0ID0gWl9TVFJFQU1fRU5EO1xuICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICBjYXNlIEJBRDpcbiAgICAgICAgcmV0ID0gWl9EQVRBX0VSUk9SO1xuICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICBjYXNlIE1FTTpcbiAgICAgICAgcmV0dXJuIFpfTUVNX0VSUk9SO1xuICAgICAgY2FzZSBTWU5DOlxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gICAgfVxuICB9XG5cbiAgLy8gaW5mX2xlYXZlIDwtIGhlcmUgaXMgcmVhbCBwbGFjZSBmb3IgXCJnb3RvIGluZl9sZWF2ZVwiLCBlbXVsYXRlZCB2aWEgXCJicmVhayBpbmZfbGVhdmVcIlxuXG4gIC8qXG4gICAgIFJldHVybiBmcm9tIGluZmxhdGUoKSwgdXBkYXRpbmcgdGhlIHRvdGFsIGNvdW50cyBhbmQgdGhlIGNoZWNrIHZhbHVlLlxuICAgICBJZiB0aGVyZSB3YXMgbm8gcHJvZ3Jlc3MgZHVyaW5nIHRoZSBpbmZsYXRlKCkgY2FsbCwgcmV0dXJuIGEgYnVmZmVyXG4gICAgIGVycm9yLiAgQ2FsbCB1cGRhdGV3aW5kb3coKSB0byBjcmVhdGUgYW5kL29yIHVwZGF0ZSB0aGUgd2luZG93IHN0YXRlLlxuICAgICBOb3RlOiBhIG1lbW9yeSBlcnJvciBmcm9tIGluZmxhdGUoKSBpcyBub24tcmVjb3ZlcmFibGUuXG4gICAqL1xuXG4gIC8vLS0tIFJFU1RPUkUoKSAtLS1cbiAgc3RybS5uZXh0X291dCA9IHB1dDtcbiAgc3RybS5hdmFpbF9vdXQgPSBsZWZ0O1xuICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuICBzdHJtLmF2YWlsX2luID0gaGF2ZTtcbiAgc3RhdGUuaG9sZCA9IGhvbGQ7XG4gIHN0YXRlLmJpdHMgPSBiaXRzO1xuICAvLy0tLVxuXG4gIGlmIChzdGF0ZS53c2l6ZSB8fCAoX291dCAhPT0gc3RybS5hdmFpbF9vdXQgJiYgc3RhdGUubW9kZSA8IEJBRCAmJlxuICAgICAgICAgICAgICAgICAgICAgIChzdGF0ZS5tb2RlIDwgQ0hFQ0sgfHwgZmx1c2ggIT09IFpfRklOSVNIKSkpIHtcbiAgICBpZiAodXBkYXRld2luZG93KHN0cm0sIHN0cm0ub3V0cHV0LCBzdHJtLm5leHRfb3V0LCBfb3V0IC0gc3RybS5hdmFpbF9vdXQpKSB7XG4gICAgICBzdGF0ZS5tb2RlID0gTUVNO1xuICAgICAgcmV0dXJuIFpfTUVNX0VSUk9SO1xuICAgIH1cbiAgfVxuICBfaW4gLT0gc3RybS5hdmFpbF9pbjtcbiAgX291dCAtPSBzdHJtLmF2YWlsX291dDtcbiAgc3RybS50b3RhbF9pbiArPSBfaW47XG4gIHN0cm0udG90YWxfb3V0ICs9IF9vdXQ7XG4gIHN0YXRlLnRvdGFsICs9IF9vdXQ7XG4gIGlmIChzdGF0ZS53cmFwICYmIF9vdXQpIHtcbiAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAvKlVQREFURShzdGF0ZS5jaGVjaywgc3RybS5uZXh0X291dCAtIF9vdXQsIF9vdXQpOyovXG4gICAgICAoc3RhdGUuZmxhZ3MgPyBjcmMzMihzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBzdHJtLm5leHRfb3V0IC0gX291dCkgOiBhZGxlcjMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHN0cm0ubmV4dF9vdXQgLSBfb3V0KSk7XG4gIH1cbiAgc3RybS5kYXRhX3R5cGUgPSBzdGF0ZS5iaXRzICsgKHN0YXRlLmxhc3QgPyA2NCA6IDApICtcbiAgICAgICAgICAgICAgICAgICAgKHN0YXRlLm1vZGUgPT09IFRZUEUgPyAxMjggOiAwKSArXG4gICAgICAgICAgICAgICAgICAgIChzdGF0ZS5tb2RlID09PSBMRU5fIHx8IHN0YXRlLm1vZGUgPT09IENPUFlfID8gMjU2IDogMCk7XG4gIGlmICgoKF9pbiA9PT0gMCAmJiBfb3V0ID09PSAwKSB8fCBmbHVzaCA9PT0gWl9GSU5JU0gpICYmIHJldCA9PT0gWl9PSykge1xuICAgIHJldCA9IFpfQlVGX0VSUk9SO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGluZmxhdGVFbmQoc3RybSkge1xuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSAvKnx8IHN0cm0tPnpmcmVlID09IChmcmVlX2Z1bmMpMCovKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgdmFyIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgaWYgKHN0YXRlLndpbmRvdykge1xuICAgIHN0YXRlLndpbmRvdyA9IG51bGw7XG4gIH1cbiAgc3RybS5zdGF0ZSA9IG51bGw7XG4gIHJldHVybiBaX09LO1xufVxuXG5mdW5jdGlvbiBpbmZsYXRlR2V0SGVhZGVyKHN0cm0sIGhlYWQpIHtcbiAgdmFyIHN0YXRlO1xuXG4gIC8qIGNoZWNrIHN0YXRlICovXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBpZiAoKHN0YXRlLndyYXAgJiAyKSA9PT0gMCkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cblxuICAvKiBzYXZlIGhlYWRlciBzdHJ1Y3R1cmUgKi9cbiAgc3RhdGUuaGVhZCA9IGhlYWQ7XG4gIGhlYWQuZG9uZSA9IGZhbHNlO1xuICByZXR1cm4gWl9PSztcbn1cblxuZnVuY3Rpb24gaW5mbGF0ZVNldERpY3Rpb25hcnkoc3RybSwgZGljdGlvbmFyeSkge1xuICB2YXIgZGljdExlbmd0aCA9IGRpY3Rpb25hcnkubGVuZ3RoO1xuXG4gIHZhciBzdGF0ZTtcbiAgdmFyIGRpY3RpZDtcbiAgdmFyIHJldDtcblxuICAvKiBjaGVjayBzdGF0ZSAqL1xuICBpZiAoIXN0cm0gLyogPT0gWl9OVUxMICovIHx8ICFzdHJtLnN0YXRlIC8qID09IFpfTlVMTCAqLykgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuXG4gIGlmIChzdGF0ZS53cmFwICE9PSAwICYmIHN0YXRlLm1vZGUgIT09IERJQ1QpIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICAvKiBjaGVjayBmb3IgY29ycmVjdCBkaWN0aW9uYXJ5IGlkZW50aWZpZXIgKi9cbiAgaWYgKHN0YXRlLm1vZGUgPT09IERJQ1QpIHtcbiAgICBkaWN0aWQgPSAxOyAvKiBhZGxlcjMyKDAsIG51bGwsIDApKi9cbiAgICAvKiBkaWN0aWQgPSBhZGxlcjMyKGRpY3RpZCwgZGljdGlvbmFyeSwgZGljdExlbmd0aCk7ICovXG4gICAgZGljdGlkID0gYWRsZXIzMihkaWN0aWQsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgsIDApO1xuICAgIGlmIChkaWN0aWQgIT09IHN0YXRlLmNoZWNrKSB7XG4gICAgICByZXR1cm4gWl9EQVRBX0VSUk9SO1xuICAgIH1cbiAgfVxuICAvKiBjb3B5IGRpY3Rpb25hcnkgdG8gd2luZG93IHVzaW5nIHVwZGF0ZXdpbmRvdygpLCB3aGljaCB3aWxsIGFtZW5kIHRoZVxuICAgZXhpc3RpbmcgZGljdGlvbmFyeSBpZiBhcHByb3ByaWF0ZSAqL1xuICByZXQgPSB1cGRhdGV3aW5kb3coc3RybSwgZGljdGlvbmFyeSwgZGljdExlbmd0aCwgZGljdExlbmd0aCk7XG4gIGlmIChyZXQpIHtcbiAgICBzdGF0ZS5tb2RlID0gTUVNO1xuICAgIHJldHVybiBaX01FTV9FUlJPUjtcbiAgfVxuICBzdGF0ZS5oYXZlZGljdCA9IDE7XG4gIC8vIFRyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgZGljdGlvbmFyeSBzZXRcXG5cIikpO1xuICByZXR1cm4gWl9PSztcbn1cblxuZXhwb3J0cy5pbmZsYXRlUmVzZXQgPSBpbmZsYXRlUmVzZXQ7XG5leHBvcnRzLmluZmxhdGVSZXNldDIgPSBpbmZsYXRlUmVzZXQyO1xuZXhwb3J0cy5pbmZsYXRlUmVzZXRLZWVwID0gaW5mbGF0ZVJlc2V0S2VlcDtcbmV4cG9ydHMuaW5mbGF0ZUluaXQgPSBpbmZsYXRlSW5pdDtcbmV4cG9ydHMuaW5mbGF0ZUluaXQyID0gaW5mbGF0ZUluaXQyO1xuZXhwb3J0cy5pbmZsYXRlID0gaW5mbGF0ZTtcbmV4cG9ydHMuaW5mbGF0ZUVuZCA9IGluZmxhdGVFbmQ7XG5leHBvcnRzLmluZmxhdGVHZXRIZWFkZXIgPSBpbmZsYXRlR2V0SGVhZGVyO1xuZXhwb3J0cy5pbmZsYXRlU2V0RGljdGlvbmFyeSA9IGluZmxhdGVTZXREaWN0aW9uYXJ5O1xuZXhwb3J0cy5pbmZsYXRlSW5mbyA9ICdwYWtvIGluZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpJztcblxuLyogTm90IGltcGxlbWVudGVkXG5leHBvcnRzLmluZmxhdGVDb3B5ID0gaW5mbGF0ZUNvcHk7XG5leHBvcnRzLmluZmxhdGVHZXREaWN0aW9uYXJ5ID0gaW5mbGF0ZUdldERpY3Rpb25hcnk7XG5leHBvcnRzLmluZmxhdGVNYXJrID0gaW5mbGF0ZU1hcms7XG5leHBvcnRzLmluZmxhdGVQcmltZSA9IGluZmxhdGVQcmltZTtcbmV4cG9ydHMuaW5mbGF0ZVN5bmMgPSBpbmZsYXRlU3luYztcbmV4cG9ydHMuaW5mbGF0ZVN5bmNQb2ludCA9IGluZmxhdGVTeW5jUG9pbnQ7XG5leHBvcnRzLmluZmxhdGVVbmRlcm1pbmUgPSBpbmZsYXRlVW5kZXJtaW5lO1xuKi9cbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG4vLyBTZWUgc3RhdGUgZGVmcyBmcm9tIGluZmxhdGUuanNcbnZhciBCQUQgPSAzMDsgICAgICAgLyogZ290IGEgZGF0YSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xudmFyIFRZUEUgPSAxMjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciB0eXBlIGJpdHMsIGluY2x1ZGluZyBsYXN0LWZsYWcgYml0ICovXG5cbi8qXG4gICBEZWNvZGUgbGl0ZXJhbCwgbGVuZ3RoLCBhbmQgZGlzdGFuY2UgY29kZXMgYW5kIHdyaXRlIG91dCB0aGUgcmVzdWx0aW5nXG4gICBsaXRlcmFsIGFuZCBtYXRjaCBieXRlcyB1bnRpbCBlaXRoZXIgbm90IGVub3VnaCBpbnB1dCBvciBvdXRwdXQgaXNcbiAgIGF2YWlsYWJsZSwgYW4gZW5kLW9mLWJsb2NrIGlzIGVuY291bnRlcmVkLCBvciBhIGRhdGEgZXJyb3IgaXMgZW5jb3VudGVyZWQuXG4gICBXaGVuIGxhcmdlIGVub3VnaCBpbnB1dCBhbmQgb3V0cHV0IGJ1ZmZlcnMgYXJlIHN1cHBsaWVkIHRvIGluZmxhdGUoKSwgZm9yXG4gICBleGFtcGxlLCBhIDE2SyBpbnB1dCBidWZmZXIgYW5kIGEgNjRLIG91dHB1dCBidWZmZXIsIG1vcmUgdGhhbiA5NSUgb2YgdGhlXG4gICBpbmZsYXRlIGV4ZWN1dGlvbiB0aW1lIGlzIHNwZW50IGluIHRoaXMgcm91dGluZS5cblxuICAgRW50cnkgYXNzdW1wdGlvbnM6XG5cbiAgICAgICAgc3RhdGUubW9kZSA9PT0gTEVOXG4gICAgICAgIHN0cm0uYXZhaWxfaW4gPj0gNlxuICAgICAgICBzdHJtLmF2YWlsX291dCA+PSAyNThcbiAgICAgICAgc3RhcnQgPj0gc3RybS5hdmFpbF9vdXRcbiAgICAgICAgc3RhdGUuYml0cyA8IDhcblxuICAgT24gcmV0dXJuLCBzdGF0ZS5tb2RlIGlzIG9uZSBvZjpcblxuICAgICAgICBMRU4gLS0gcmFuIG91dCBvZiBlbm91Z2ggb3V0cHV0IHNwYWNlIG9yIGVub3VnaCBhdmFpbGFibGUgaW5wdXRcbiAgICAgICAgVFlQRSAtLSByZWFjaGVkIGVuZCBvZiBibG9jayBjb2RlLCBpbmZsYXRlKCkgdG8gaW50ZXJwcmV0IG5leHQgYmxvY2tcbiAgICAgICAgQkFEIC0tIGVycm9yIGluIGJsb2NrIGRhdGFcblxuICAgTm90ZXM6XG5cbiAgICAtIFRoZSBtYXhpbXVtIGlucHV0IGJpdHMgdXNlZCBieSBhIGxlbmd0aC9kaXN0YW5jZSBwYWlyIGlzIDE1IGJpdHMgZm9yIHRoZVxuICAgICAgbGVuZ3RoIGNvZGUsIDUgYml0cyBmb3IgdGhlIGxlbmd0aCBleHRyYSwgMTUgYml0cyBmb3IgdGhlIGRpc3RhbmNlIGNvZGUsXG4gICAgICBhbmQgMTMgYml0cyBmb3IgdGhlIGRpc3RhbmNlIGV4dHJhLiAgVGhpcyB0b3RhbHMgNDggYml0cywgb3Igc2l4IGJ5dGVzLlxuICAgICAgVGhlcmVmb3JlIGlmIHN0cm0uYXZhaWxfaW4gPj0gNiwgdGhlbiB0aGVyZSBpcyBlbm91Z2ggaW5wdXQgdG8gYXZvaWRcbiAgICAgIGNoZWNraW5nIGZvciBhdmFpbGFibGUgaW5wdXQgd2hpbGUgZGVjb2RpbmcuXG5cbiAgICAtIFRoZSBtYXhpbXVtIGJ5dGVzIHRoYXQgYSBzaW5nbGUgbGVuZ3RoL2Rpc3RhbmNlIHBhaXIgY2FuIG91dHB1dCBpcyAyNThcbiAgICAgIGJ5dGVzLCB3aGljaCBpcyB0aGUgbWF4aW11bSBsZW5ndGggdGhhdCBjYW4gYmUgY29kZWQuICBpbmZsYXRlX2Zhc3QoKVxuICAgICAgcmVxdWlyZXMgc3RybS5hdmFpbF9vdXQgPj0gMjU4IGZvciBlYWNoIGxvb3AgdG8gYXZvaWQgY2hlY2tpbmcgZm9yXG4gICAgICBvdXRwdXQgc3BhY2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5mbGF0ZV9mYXN0KHN0cm0sIHN0YXJ0KSB7XG4gIHZhciBzdGF0ZTtcbiAgdmFyIF9pbjsgICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uaW5wdXQgKi9cbiAgdmFyIGxhc3Q7ICAgICAgICAgICAgICAgICAgIC8qIGhhdmUgZW5vdWdoIGlucHV0IHdoaWxlIGluIDwgbGFzdCAqL1xuICB2YXIgX291dDsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5vdXRwdXQgKi9cbiAgdmFyIGJlZzsgICAgICAgICAgICAgICAgICAgIC8qIGluZmxhdGUoKSdzIGluaXRpYWwgc3RybS5vdXRwdXQgKi9cbiAgdmFyIGVuZDsgICAgICAgICAgICAgICAgICAgIC8qIHdoaWxlIG91dCA8IGVuZCwgZW5vdWdoIHNwYWNlIGF2YWlsYWJsZSAqL1xuLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1RcbiAgdmFyIGRtYXg7ICAgICAgICAgICAgICAgICAgIC8qIG1heGltdW0gZGlzdGFuY2UgZnJvbSB6bGliIGhlYWRlciAqL1xuLy8jZW5kaWZcbiAgdmFyIHdzaXplOyAgICAgICAgICAgICAgICAgIC8qIHdpbmRvdyBzaXplIG9yIHplcm8gaWYgbm90IHVzaW5nIHdpbmRvdyAqL1xuICB2YXIgd2hhdmU7ICAgICAgICAgICAgICAgICAgLyogdmFsaWQgYnl0ZXMgaW4gdGhlIHdpbmRvdyAqL1xuICB2YXIgd25leHQ7ICAgICAgICAgICAgICAgICAgLyogd2luZG93IHdyaXRlIGluZGV4ICovXG4gIC8vIFVzZSBgc193aW5kb3dgIGluc3RlYWQgYHdpbmRvd2AsIGF2b2lkIGNvbmZsaWN0IHdpdGggaW5zdHJ1bWVudGF0aW9uIHRvb2xzXG4gIHZhciBzX3dpbmRvdzsgICAgICAgICAgICAgICAvKiBhbGxvY2F0ZWQgc2xpZGluZyB3aW5kb3csIGlmIHdzaXplICE9IDAgKi9cbiAgdmFyIGhvbGQ7ICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uaG9sZCAqL1xuICB2YXIgYml0czsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5iaXRzICovXG4gIHZhciBsY29kZTsgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLmxlbmNvZGUgKi9cbiAgdmFyIGRjb2RlOyAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uZGlzdGNvZGUgKi9cbiAgdmFyIGxtYXNrOyAgICAgICAgICAgICAgICAgIC8qIG1hc2sgZm9yIGZpcnN0IGxldmVsIG9mIGxlbmd0aCBjb2RlcyAqL1xuICB2YXIgZG1hc2s7ICAgICAgICAgICAgICAgICAgLyogbWFzayBmb3IgZmlyc3QgbGV2ZWwgb2YgZGlzdGFuY2UgY29kZXMgKi9cbiAgdmFyIGhlcmU7ICAgICAgICAgICAgICAgICAgIC8qIHJldHJpZXZlZCB0YWJsZSBlbnRyeSAqL1xuICB2YXIgb3A7ICAgICAgICAgICAgICAgICAgICAgLyogY29kZSBiaXRzLCBvcGVyYXRpb24sIGV4dHJhIGJpdHMsIG9yICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgd2luZG93IHBvc2l0aW9uLCB3aW5kb3cgYnl0ZXMgdG8gY29weSAqL1xuICB2YXIgbGVuOyAgICAgICAgICAgICAgICAgICAgLyogbWF0Y2ggbGVuZ3RoLCB1bnVzZWQgYnl0ZXMgKi9cbiAgdmFyIGRpc3Q7ICAgICAgICAgICAgICAgICAgIC8qIG1hdGNoIGRpc3RhbmNlICovXG4gIHZhciBmcm9tOyAgICAgICAgICAgICAgICAgICAvKiB3aGVyZSB0byBjb3B5IG1hdGNoIGZyb20gKi9cbiAgdmFyIGZyb21fc291cmNlO1xuXG5cbiAgdmFyIGlucHV0LCBvdXRwdXQ7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcblxuICAvKiBjb3B5IHN0YXRlIHRvIGxvY2FsIHZhcmlhYmxlcyAqL1xuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIC8vaGVyZSA9IHN0YXRlLmhlcmU7XG4gIF9pbiA9IHN0cm0ubmV4dF9pbjtcbiAgaW5wdXQgPSBzdHJtLmlucHV0O1xuICBsYXN0ID0gX2luICsgKHN0cm0uYXZhaWxfaW4gLSA1KTtcbiAgX291dCA9IHN0cm0ubmV4dF9vdXQ7XG4gIG91dHB1dCA9IHN0cm0ub3V0cHV0O1xuICBiZWcgPSBfb3V0IC0gKHN0YXJ0IC0gc3RybS5hdmFpbF9vdXQpO1xuICBlbmQgPSBfb3V0ICsgKHN0cm0uYXZhaWxfb3V0IC0gMjU3KTtcbi8vI2lmZGVmIElORkxBVEVfU1RSSUNUXG4gIGRtYXggPSBzdGF0ZS5kbWF4O1xuLy8jZW5kaWZcbiAgd3NpemUgPSBzdGF0ZS53c2l6ZTtcbiAgd2hhdmUgPSBzdGF0ZS53aGF2ZTtcbiAgd25leHQgPSBzdGF0ZS53bmV4dDtcbiAgc193aW5kb3cgPSBzdGF0ZS53aW5kb3c7XG4gIGhvbGQgPSBzdGF0ZS5ob2xkO1xuICBiaXRzID0gc3RhdGUuYml0cztcbiAgbGNvZGUgPSBzdGF0ZS5sZW5jb2RlO1xuICBkY29kZSA9IHN0YXRlLmRpc3Rjb2RlO1xuICBsbWFzayA9ICgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMTtcbiAgZG1hc2sgPSAoMSA8PCBzdGF0ZS5kaXN0Yml0cykgLSAxO1xuXG5cbiAgLyogZGVjb2RlIGxpdGVyYWxzIGFuZCBsZW5ndGgvZGlzdGFuY2VzIHVudGlsIGVuZC1vZi1ibG9jayBvciBub3QgZW5vdWdoXG4gICAgIGlucHV0IGRhdGEgb3Igb3V0cHV0IHNwYWNlICovXG5cbiAgdG9wOlxuICBkbyB7XG4gICAgaWYgKGJpdHMgPCAxNSkge1xuICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgIGJpdHMgKz0gODtcbiAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICBiaXRzICs9IDg7XG4gICAgfVxuXG4gICAgaGVyZSA9IGxjb2RlW2hvbGQgJiBsbWFza107XG5cbiAgICBkb2xlbjpcbiAgICBmb3IgKDs7KSB7IC8vIEdvdG8gZW11bGF0aW9uXG4gICAgICBvcCA9IGhlcmUgPj4+IDI0LypoZXJlLmJpdHMqLztcbiAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgIGJpdHMgLT0gb3A7XG4gICAgICBvcCA9IChoZXJlID4+PiAxNikgJiAweGZmLypoZXJlLm9wKi87XG4gICAgICBpZiAob3AgPT09IDApIHsgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGxpdGVyYWwgKi9cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIGhlcmUudmFsID49IDB4MjAgJiYgaGVyZS52YWwgPCAweDdmID9cbiAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsICclYydcXG5cIiA6XG4gICAgICAgIC8vICAgICAgICBcImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAweCUwMnhcXG5cIiwgaGVyZS52YWwpKTtcbiAgICAgICAgb3V0cHV0W19vdXQrK10gPSBoZXJlICYgMHhmZmZmLypoZXJlLnZhbCovO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAob3AgJiAxNikgeyAgICAgICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBiYXNlICovXG4gICAgICAgIGxlbiA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICAgIG9wICY9IDE1OyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzICovXG4gICAgICAgIGlmIChvcCkge1xuICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbiArPSBob2xkICYgKCgxIDw8IG9wKSAtIDEpO1xuICAgICAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgICAgICBiaXRzIC09IG9wO1xuICAgICAgICB9XG4gICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgbGVuZ3RoICV1XFxuXCIsIGxlbikpO1xuICAgICAgICBpZiAoYml0cyA8IDE1KSB7XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgaGVyZSA9IGRjb2RlW2hvbGQgJiBkbWFza107XG5cbiAgICAgICAgZG9kaXN0OlxuICAgICAgICBmb3IgKDs7KSB7IC8vIGdvdG8gZW11bGF0aW9uXG4gICAgICAgICAgb3AgPSBoZXJlID4+PiAyNC8qaGVyZS5iaXRzKi87XG4gICAgICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgICAgb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZi8qaGVyZS5vcCovO1xuXG4gICAgICAgICAgaWYgKG9wICYgMTYpIHsgICAgICAgICAgICAgICAgICAgICAgLyogZGlzdGFuY2UgYmFzZSAqL1xuICAgICAgICAgICAgZGlzdCA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICAgICAgICBvcCAmPSAxNTsgICAgICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzICovXG4gICAgICAgICAgICBpZiAoYml0cyA8IG9wKSB7XG4gICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgaWYgKGJpdHMgPCBvcCkge1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXN0ICs9IGhvbGQgJiAoKDEgPDwgb3ApIC0gMSk7XG4vLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxuICAgICAgICAgICAgaWYgKGRpc3QgPiBkbWF4KSB7XG4gICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcbiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgICAgfVxuLy8jZW5kaWZcbiAgICAgICAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XFxuXCIsIGRpc3QpKTtcbiAgICAgICAgICAgIG9wID0gX291dCAtIGJlZzsgICAgICAgICAgICAgICAgLyogbWF4IGRpc3RhbmNlIGluIG91dHB1dCAqL1xuICAgICAgICAgICAgaWYgKGRpc3QgPiBvcCkgeyAgICAgICAgICAgICAgICAvKiBzZWUgaWYgY29weSBmcm9tIHdpbmRvdyAqL1xuICAgICAgICAgICAgICBvcCA9IGRpc3QgLSBvcDsgICAgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYWNrIGluIHdpbmRvdyAqL1xuICAgICAgICAgICAgICBpZiAob3AgPiB3aGF2ZSkge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zYW5lKSB7XG4gICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XG4gICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgICAgICAgIH1cblxuLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhdWx0cyxcbi8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcbi8vI2lmZGVmIElORkxBVEVfQUxMT1dfSU5WQUxJRF9ESVNUQU5DRV9UT09GQVJfQVJSUlxuLy8gICAgICAgICAgICAgICAgaWYgKGxlbiA8PSBvcCAtIHdoYXZlKSB7XG4vLyAgICAgICAgICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IDA7XG4vLyAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tbGVuKTtcbi8vICAgICAgICAgICAgICAgICAgY29udGludWUgdG9wO1xuLy8gICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgbGVuIC09IG9wIC0gd2hhdmU7XG4vLyAgICAgICAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gMDtcbi8vICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3AgPiB3aGF2ZSk7XG4vLyAgICAgICAgICAgICAgICBpZiAob3AgPT09IDApIHtcbi8vICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0O1xuLy8gICAgICAgICAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbi8vICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1sZW4pO1xuLy8gICAgICAgICAgICAgICAgICBjb250aW51ZSB0b3A7XG4vLyAgICAgICAgICAgICAgICB9XG4vLyNlbmRpZlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZyb20gPSAwOyAvLyB3aW5kb3cgaW5kZXhcbiAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBzX3dpbmRvdztcbiAgICAgICAgICAgICAgaWYgKHduZXh0ID09PSAwKSB7ICAgICAgICAgICAvKiB2ZXJ5IGNvbW1vbiBjYXNlICovXG4gICAgICAgICAgICAgICAgZnJvbSArPSB3c2l6ZSAtIG9wO1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDtcbiAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7XG4gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAvKiByZXN0IGZyb20gb3V0cHV0ICovXG4gICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSBpZiAod25leHQgPCBvcCkgeyAgICAgIC8qIHdyYXAgYXJvdW5kIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgIGZyb20gKz0gd3NpemUgKyB3bmV4dCAtIG9wO1xuICAgICAgICAgICAgICAgIG9wIC09IHduZXh0O1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSBlbmQgb2Ygd2luZG93ICovXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgICAgICAgICAgICBpZiAod25leHQgPCBsZW4pIHsgIC8qIHNvbWUgZnJvbSBzdGFydCBvZiB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgICAgb3AgPSB3bmV4dDtcbiAgICAgICAgICAgICAgICAgICAgbGVuIC09IG9wO1xuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgICAgIC8qIHJlc3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAvKiBjb250aWd1b3VzIGluIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgIGZyb20gKz0gd25leHQgLSBvcDtcbiAgICAgICAgICAgICAgICBpZiAob3AgPCBsZW4pIHsgICAgICAgICAvKiBzb21lIGZyb20gd2luZG93ICovXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHdoaWxlIChsZW4gPiAyKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDsgICAgICAgICAgLyogY29weSBkaXJlY3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgZG8geyAgICAgICAgICAgICAgICAgICAgICAgIC8qIG1pbmltdW0gbGVuZ3RoIGlzIHRocmVlICovXG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107XG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgIH0gd2hpbGUgKGxlbiA+IDIpO1xuICAgICAgICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoKG9wICYgNjQpID09PSAwKSB7ICAgICAgICAgIC8qIDJuZCBsZXZlbCBkaXN0YW5jZSBjb2RlICovXG4gICAgICAgICAgICBoZXJlID0gZGNvZGVbKGhlcmUgJiAweGZmZmYpLypoZXJlLnZhbCovICsgKGhvbGQgJiAoKDEgPDwgb3ApIC0gMSkpXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIGRvZGlzdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIGNvZGUnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrIHRvcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhazsgLy8gbmVlZCB0byBlbXVsYXRlIGdvdG8gdmlhIFwiY29udGludWVcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmICgob3AgJiA2NCkgPT09IDApIHsgICAgICAgICAgICAgIC8qIDJuZCBsZXZlbCBsZW5ndGggY29kZSAqL1xuICAgICAgICBoZXJlID0gbGNvZGVbKGhlcmUgJiAweGZmZmYpLypoZXJlLnZhbCovICsgKGhvbGQgJiAoKDEgPDwgb3ApIC0gMSkpXTtcbiAgICAgICAgY29udGludWUgZG9sZW47XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChvcCAmIDMyKSB7ICAgICAgICAgICAgICAgICAgICAgLyogZW5kLW9mLWJsb2NrICovXG4gICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZW5kIG9mIGJsb2NrXFxuXCIpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgIGJyZWFrIHRvcDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUnO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICBicmVhayB0b3A7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrOyAvLyBuZWVkIHRvIGVtdWxhdGUgZ290byB2aWEgXCJjb250aW51ZVwiXG4gICAgfVxuICB9IHdoaWxlIChfaW4gPCBsYXN0ICYmIF9vdXQgPCBlbmQpO1xuXG4gIC8qIHJldHVybiB1bnVzZWQgYnl0ZXMgKG9uIGVudHJ5LCBiaXRzIDwgOCwgc28gaW4gd29uJ3QgZ28gdG9vIGZhciBiYWNrKSAqL1xuICBsZW4gPSBiaXRzID4+IDM7XG4gIF9pbiAtPSBsZW47XG4gIGJpdHMgLT0gbGVuIDw8IDM7XG4gIGhvbGQgJj0gKDEgPDwgYml0cykgLSAxO1xuXG4gIC8qIHVwZGF0ZSBzdGF0ZSBhbmQgcmV0dXJuICovXG4gIHN0cm0ubmV4dF9pbiA9IF9pbjtcbiAgc3RybS5uZXh0X291dCA9IF9vdXQ7XG4gIHN0cm0uYXZhaWxfaW4gPSAoX2luIDwgbGFzdCA/IDUgKyAobGFzdCAtIF9pbikgOiA1IC0gKF9pbiAtIGxhc3QpKTtcbiAgc3RybS5hdmFpbF9vdXQgPSAoX291dCA8IGVuZCA/IDI1NyArIChlbmQgLSBfb3V0KSA6IDI1NyAtIChfb3V0IC0gZW5kKSk7XG4gIHN0YXRlLmhvbGQgPSBob2xkO1xuICBzdGF0ZS5iaXRzID0gYml0cztcbiAgcmV0dXJuO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy9jb21tb24nKTtcblxudmFyIE1BWEJJVFMgPSAxNTtcbnZhciBFTk9VR0hfTEVOUyA9IDg1MjtcbnZhciBFTk9VR0hfRElTVFMgPSA1OTI7XG4vL3ZhciBFTk9VR0ggPSAoRU5PVUdIX0xFTlMrRU5PVUdIX0RJU1RTKTtcblxudmFyIENPREVTID0gMDtcbnZhciBMRU5TID0gMTtcbnZhciBESVNUUyA9IDI7XG5cbnZhciBsYmFzZSA9IFsgLyogTGVuZ3RoIGNvZGVzIDI1Ny4uMjg1IGJhc2UgKi9cbiAgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMywgMTUsIDE3LCAxOSwgMjMsIDI3LCAzMSxcbiAgMzUsIDQzLCA1MSwgNTksIDY3LCA4MywgOTksIDExNSwgMTMxLCAxNjMsIDE5NSwgMjI3LCAyNTgsIDAsIDBcbl07XG5cbnZhciBsZXh0ID0gWyAvKiBMZW5ndGggY29kZXMgMjU3Li4yODUgZXh0cmEgKi9cbiAgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE3LCAxNywgMTgsIDE4LCAxOCwgMTgsXG4gIDE5LCAxOSwgMTksIDE5LCAyMCwgMjAsIDIwLCAyMCwgMjEsIDIxLCAyMSwgMjEsIDE2LCA3MiwgNzhcbl07XG5cbnZhciBkYmFzZSA9IFsgLyogRGlzdGFuY2UgY29kZXMgMC4uMjkgYmFzZSAqL1xuICAxLCAyLCAzLCA0LCA1LCA3LCA5LCAxMywgMTcsIDI1LCAzMywgNDksIDY1LCA5NywgMTI5LCAxOTMsXG4gIDI1NywgMzg1LCA1MTMsIDc2OSwgMTAyNSwgMTUzNywgMjA0OSwgMzA3MywgNDA5NywgNjE0NSxcbiAgODE5MywgMTIyODksIDE2Mzg1LCAyNDU3NywgMCwgMFxuXTtcblxudmFyIGRleHQgPSBbIC8qIERpc3RhbmNlIGNvZGVzIDAuLjI5IGV4dHJhICovXG4gIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE4LCAxOCwgMTksIDE5LCAyMCwgMjAsIDIxLCAyMSwgMjIsIDIyLFxuICAyMywgMjMsIDI0LCAyNCwgMjUsIDI1LCAyNiwgMjYsIDI3LCAyNyxcbiAgMjgsIDI4LCAyOSwgMjksIDY0LCA2NFxuXTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmZsYXRlX3RhYmxlKHR5cGUsIGxlbnMsIGxlbnNfaW5kZXgsIGNvZGVzLCB0YWJsZSwgdGFibGVfaW5kZXgsIHdvcmssIG9wdHMpXG57XG4gIHZhciBiaXRzID0gb3B0cy5iaXRzO1xuICAgICAgLy9oZXJlID0gb3B0cy5oZXJlOyAvKiB0YWJsZSBlbnRyeSBmb3IgZHVwbGljYXRpb24gKi9cblxuICB2YXIgbGVuID0gMDsgICAgICAgICAgICAgICAvKiBhIGNvZGUncyBsZW5ndGggaW4gYml0cyAqL1xuICB2YXIgc3ltID0gMDsgICAgICAgICAgICAgICAvKiBpbmRleCBvZiBjb2RlIHN5bWJvbHMgKi9cbiAgdmFyIG1pbiA9IDAsIG1heCA9IDA7ICAgICAgICAgIC8qIG1pbmltdW0gYW5kIG1heGltdW0gY29kZSBsZW5ndGhzICovXG4gIHZhciByb290ID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBpbmRleCBiaXRzIGZvciByb290IHRhYmxlICovXG4gIHZhciBjdXJyID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBpbmRleCBiaXRzIGZvciBjdXJyZW50IHRhYmxlICovXG4gIHZhciBkcm9wID0gMDsgICAgICAgICAgICAgIC8qIGNvZGUgYml0cyB0byBkcm9wIGZvciBzdWItdGFibGUgKi9cbiAgdmFyIGxlZnQgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgcHJlZml4IGNvZGVzIGF2YWlsYWJsZSAqL1xuICB2YXIgdXNlZCA9IDA7ICAgICAgICAgICAgICAvKiBjb2RlIGVudHJpZXMgaW4gdGFibGUgdXNlZCAqL1xuICB2YXIgaHVmZiA9IDA7ICAgICAgICAgICAgICAvKiBIdWZmbWFuIGNvZGUgKi9cbiAgdmFyIGluY3I7ICAgICAgICAgICAgICAvKiBmb3IgaW5jcmVtZW50aW5nIGNvZGUsIGluZGV4ICovXG4gIHZhciBmaWxsOyAgICAgICAgICAgICAgLyogaW5kZXggZm9yIHJlcGxpY2F0aW5nIGVudHJpZXMgKi9cbiAgdmFyIGxvdzsgICAgICAgICAgICAgICAvKiBsb3cgYml0cyBmb3IgY3VycmVudCByb290IGVudHJ5ICovXG4gIHZhciBtYXNrOyAgICAgICAgICAgICAgLyogbWFzayBmb3IgbG93IHJvb3QgYml0cyAqL1xuICB2YXIgbmV4dDsgICAgICAgICAgICAgLyogbmV4dCBhdmFpbGFibGUgc3BhY2UgaW4gdGFibGUgKi9cbiAgdmFyIGJhc2UgPSBudWxsOyAgICAgLyogYmFzZSB2YWx1ZSB0YWJsZSB0byB1c2UgKi9cbiAgdmFyIGJhc2VfaW5kZXggPSAwO1xuLy8gIHZhciBzaG9leHRyYTsgICAgLyogZXh0cmEgYml0cyB0YWJsZSB0byB1c2UgKi9cbiAgdmFyIGVuZDsgICAgICAgICAgICAgICAgICAgIC8qIHVzZSBiYXNlIGFuZCBleHRyYSBmb3Igc3ltYm9sID4gZW5kICovXG4gIHZhciBjb3VudCA9IG5ldyB1dGlscy5CdWYxNihNQVhCSVRTICsgMSk7IC8vW01BWEJJVFMrMV07ICAgIC8qIG51bWJlciBvZiBjb2RlcyBvZiBlYWNoIGxlbmd0aCAqL1xuICB2YXIgb2ZmcyA9IG5ldyB1dGlscy5CdWYxNihNQVhCSVRTICsgMSk7IC8vW01BWEJJVFMrMV07ICAgICAvKiBvZmZzZXRzIGluIHRhYmxlIGZvciBlYWNoIGxlbmd0aCAqL1xuICB2YXIgZXh0cmEgPSBudWxsO1xuICB2YXIgZXh0cmFfaW5kZXggPSAwO1xuXG4gIHZhciBoZXJlX2JpdHMsIGhlcmVfb3AsIGhlcmVfdmFsO1xuXG4gIC8qXG4gICBQcm9jZXNzIGEgc2V0IG9mIGNvZGUgbGVuZ3RocyB0byBjcmVhdGUgYSBjYW5vbmljYWwgSHVmZm1hbiBjb2RlLiAgVGhlXG4gICBjb2RlIGxlbmd0aHMgYXJlIGxlbnNbMC4uY29kZXMtMV0uICBFYWNoIGxlbmd0aCBjb3JyZXNwb25kcyB0byB0aGVcbiAgIHN5bWJvbHMgMC4uY29kZXMtMS4gIFRoZSBIdWZmbWFuIGNvZGUgaXMgZ2VuZXJhdGVkIGJ5IGZpcnN0IHNvcnRpbmcgdGhlXG4gICBzeW1ib2xzIGJ5IGxlbmd0aCBmcm9tIHNob3J0IHRvIGxvbmcsIGFuZCByZXRhaW5pbmcgdGhlIHN5bWJvbCBvcmRlclxuICAgZm9yIGNvZGVzIHdpdGggZXF1YWwgbGVuZ3Rocy4gIFRoZW4gdGhlIGNvZGUgc3RhcnRzIHdpdGggYWxsIHplcm8gYml0c1xuICAgZm9yIHRoZSBmaXJzdCBjb2RlIG9mIHRoZSBzaG9ydGVzdCBsZW5ndGgsIGFuZCB0aGUgY29kZXMgYXJlIGludGVnZXJcbiAgIGluY3JlbWVudHMgZm9yIHRoZSBzYW1lIGxlbmd0aCwgYW5kIHplcm9zIGFyZSBhcHBlbmRlZCBhcyB0aGUgbGVuZ3RoXG4gICBpbmNyZWFzZXMuICBGb3IgdGhlIGRlZmxhdGUgZm9ybWF0LCB0aGVzZSBiaXRzIGFyZSBzdG9yZWQgYmFja3dhcmRzXG4gICBmcm9tIHRoZWlyIG1vcmUgbmF0dXJhbCBpbnRlZ2VyIGluY3JlbWVudCBvcmRlcmluZywgYW5kIHNvIHdoZW4gdGhlXG4gICBkZWNvZGluZyB0YWJsZXMgYXJlIGJ1aWx0IGluIHRoZSBsYXJnZSBsb29wIGJlbG93LCB0aGUgaW50ZWdlciBjb2Rlc1xuICAgYXJlIGluY3JlbWVudGVkIGJhY2t3YXJkcy5cblxuICAgVGhpcyByb3V0aW5lIGFzc3VtZXMsIGJ1dCBkb2VzIG5vdCBjaGVjaywgdGhhdCBhbGwgb2YgdGhlIGVudHJpZXMgaW5cbiAgIGxlbnNbXSBhcmUgaW4gdGhlIHJhbmdlIDAuLk1BWEJJVFMuICBUaGUgY2FsbGVyIG11c3QgYXNzdXJlIHRoaXMuXG4gICAxLi5NQVhCSVRTIGlzIGludGVycHJldGVkIGFzIHRoYXQgY29kZSBsZW5ndGguICB6ZXJvIG1lYW5zIHRoYXQgdGhhdFxuICAgc3ltYm9sIGRvZXMgbm90IG9jY3VyIGluIHRoaXMgY29kZS5cblxuICAgVGhlIGNvZGVzIGFyZSBzb3J0ZWQgYnkgY29tcHV0aW5nIGEgY291bnQgb2YgY29kZXMgZm9yIGVhY2ggbGVuZ3RoLFxuICAgY3JlYXRpbmcgZnJvbSB0aGF0IGEgdGFibGUgb2Ygc3RhcnRpbmcgaW5kaWNlcyBmb3IgZWFjaCBsZW5ndGggaW4gdGhlXG4gICBzb3J0ZWQgdGFibGUsIGFuZCB0aGVuIGVudGVyaW5nIHRoZSBzeW1ib2xzIGluIG9yZGVyIGluIHRoZSBzb3J0ZWRcbiAgIHRhYmxlLiAgVGhlIHNvcnRlZCB0YWJsZSBpcyB3b3JrW10sIHdpdGggdGhhdCBzcGFjZSBiZWluZyBwcm92aWRlZCBieVxuICAgdGhlIGNhbGxlci5cblxuICAgVGhlIGxlbmd0aCBjb3VudHMgYXJlIHVzZWQgZm9yIG90aGVyIHB1cnBvc2VzIGFzIHdlbGwsIGkuZS4gZmluZGluZ1xuICAgdGhlIG1pbmltdW0gYW5kIG1heGltdW0gbGVuZ3RoIGNvZGVzLCBkZXRlcm1pbmluZyBpZiB0aGVyZSBhcmUgYW55XG4gICBjb2RlcyBhdCBhbGwsIGNoZWNraW5nIGZvciBhIHZhbGlkIHNldCBvZiBsZW5ndGhzLCBhbmQgbG9va2luZyBhaGVhZFxuICAgYXQgbGVuZ3RoIGNvdW50cyB0byBkZXRlcm1pbmUgc3ViLXRhYmxlIHNpemVzIHdoZW4gYnVpbGRpbmcgdGhlXG4gICBkZWNvZGluZyB0YWJsZXMuXG4gICAqL1xuXG4gIC8qIGFjY3VtdWxhdGUgbGVuZ3RocyBmb3IgY29kZXMgKGFzc3VtZXMgbGVuc1tdIGFsbCBpbiAwLi5NQVhCSVRTKSAqL1xuICBmb3IgKGxlbiA9IDA7IGxlbiA8PSBNQVhCSVRTOyBsZW4rKykge1xuICAgIGNvdW50W2xlbl0gPSAwO1xuICB9XG4gIGZvciAoc3ltID0gMDsgc3ltIDwgY29kZXM7IHN5bSsrKSB7XG4gICAgY291bnRbbGVuc1tsZW5zX2luZGV4ICsgc3ltXV0rKztcbiAgfVxuXG4gIC8qIGJvdW5kIGNvZGUgbGVuZ3RocywgZm9yY2Ugcm9vdCB0byBiZSB3aXRoaW4gY29kZSBsZW5ndGhzICovXG4gIHJvb3QgPSBiaXRzO1xuICBmb3IgKG1heCA9IE1BWEJJVFM7IG1heCA+PSAxOyBtYXgtLSkge1xuICAgIGlmIChjb3VudFttYXhdICE9PSAwKSB7IGJyZWFrOyB9XG4gIH1cbiAgaWYgKHJvb3QgPiBtYXgpIHtcbiAgICByb290ID0gbWF4O1xuICB9XG4gIGlmIChtYXggPT09IDApIHsgICAgICAgICAgICAgICAgICAgICAvKiBubyBzeW1ib2xzIHRvIGNvZGUgYXQgYWxsICovXG4gICAgLy90YWJsZS5vcFtvcHRzLnRhYmxlX2luZGV4XSA9IDY0OyAgLy9oZXJlLm9wID0gKHZhciBjaGFyKTY0OyAgICAvKiBpbnZhbGlkIGNvZGUgbWFya2VyICovXG4gICAgLy90YWJsZS5iaXRzW29wdHMudGFibGVfaW5kZXhdID0gMTsgICAvL2hlcmUuYml0cyA9ICh2YXIgY2hhcikxO1xuICAgIC8vdGFibGUudmFsW29wdHMudGFibGVfaW5kZXgrK10gPSAwOyAgIC8vaGVyZS52YWwgPSAodmFyIHNob3J0KTA7XG4gICAgdGFibGVbdGFibGVfaW5kZXgrK10gPSAoMSA8PCAyNCkgfCAoNjQgPDwgMTYpIHwgMDtcblxuXG4gICAgLy90YWJsZS5vcFtvcHRzLnRhYmxlX2luZGV4XSA9IDY0O1xuICAgIC8vdGFibGUuYml0c1tvcHRzLnRhYmxlX2luZGV4XSA9IDE7XG4gICAgLy90YWJsZS52YWxbb3B0cy50YWJsZV9pbmRleCsrXSA9IDA7XG4gICAgdGFibGVbdGFibGVfaW5kZXgrK10gPSAoMSA8PCAyNCkgfCAoNjQgPDwgMTYpIHwgMDtcblxuICAgIG9wdHMuYml0cyA9IDE7XG4gICAgcmV0dXJuIDA7ICAgICAvKiBubyBzeW1ib2xzLCBidXQgd2FpdCBmb3IgZGVjb2RpbmcgdG8gcmVwb3J0IGVycm9yICovXG4gIH1cbiAgZm9yIChtaW4gPSAxOyBtaW4gPCBtYXg7IG1pbisrKSB7XG4gICAgaWYgKGNvdW50W21pbl0gIT09IDApIHsgYnJlYWs7IH1cbiAgfVxuICBpZiAocm9vdCA8IG1pbikge1xuICAgIHJvb3QgPSBtaW47XG4gIH1cblxuICAvKiBjaGVjayBmb3IgYW4gb3Zlci1zdWJzY3JpYmVkIG9yIGluY29tcGxldGUgc2V0IG9mIGxlbmd0aHMgKi9cbiAgbGVmdCA9IDE7XG4gIGZvciAobGVuID0gMTsgbGVuIDw9IE1BWEJJVFM7IGxlbisrKSB7XG4gICAgbGVmdCA8PD0gMTtcbiAgICBsZWZ0IC09IGNvdW50W2xlbl07XG4gICAgaWYgKGxlZnQgPCAwKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfSAgICAgICAgLyogb3Zlci1zdWJzY3JpYmVkICovXG4gIH1cbiAgaWYgKGxlZnQgPiAwICYmICh0eXBlID09PSBDT0RFUyB8fCBtYXggIT09IDEpKSB7XG4gICAgcmV0dXJuIC0xOyAgICAgICAgICAgICAgICAgICAgICAvKiBpbmNvbXBsZXRlIHNldCAqL1xuICB9XG5cbiAgLyogZ2VuZXJhdGUgb2Zmc2V0cyBpbnRvIHN5bWJvbCB0YWJsZSBmb3IgZWFjaCBsZW5ndGggZm9yIHNvcnRpbmcgKi9cbiAgb2Zmc1sxXSA9IDA7XG4gIGZvciAobGVuID0gMTsgbGVuIDwgTUFYQklUUzsgbGVuKyspIHtcbiAgICBvZmZzW2xlbiArIDFdID0gb2Zmc1tsZW5dICsgY291bnRbbGVuXTtcbiAgfVxuXG4gIC8qIHNvcnQgc3ltYm9scyBieSBsZW5ndGgsIGJ5IHN5bWJvbCBvcmRlciB3aXRoaW4gZWFjaCBsZW5ndGggKi9cbiAgZm9yIChzeW0gPSAwOyBzeW0gPCBjb2Rlczsgc3ltKyspIHtcbiAgICBpZiAobGVuc1tsZW5zX2luZGV4ICsgc3ltXSAhPT0gMCkge1xuICAgICAgd29ya1tvZmZzW2xlbnNbbGVuc19pbmRleCArIHN5bV1dKytdID0gc3ltO1xuICAgIH1cbiAgfVxuXG4gIC8qXG4gICBDcmVhdGUgYW5kIGZpbGwgaW4gZGVjb2RpbmcgdGFibGVzLiAgSW4gdGhpcyBsb29wLCB0aGUgdGFibGUgYmVpbmdcbiAgIGZpbGxlZCBpcyBhdCBuZXh0IGFuZCBoYXMgY3VyciBpbmRleCBiaXRzLiAgVGhlIGNvZGUgYmVpbmcgdXNlZCBpcyBodWZmXG4gICB3aXRoIGxlbmd0aCBsZW4uICBUaGF0IGNvZGUgaXMgY29udmVydGVkIHRvIGFuIGluZGV4IGJ5IGRyb3BwaW5nIGRyb3BcbiAgIGJpdHMgb2ZmIG9mIHRoZSBib3R0b20uICBGb3IgY29kZXMgd2hlcmUgbGVuIGlzIGxlc3MgdGhhbiBkcm9wICsgY3VycixcbiAgIHRob3NlIHRvcCBkcm9wICsgY3VyciAtIGxlbiBiaXRzIGFyZSBpbmNyZW1lbnRlZCB0aHJvdWdoIGFsbCB2YWx1ZXMgdG9cbiAgIGZpbGwgdGhlIHRhYmxlIHdpdGggcmVwbGljYXRlZCBlbnRyaWVzLlxuXG4gICByb290IGlzIHRoZSBudW1iZXIgb2YgaW5kZXggYml0cyBmb3IgdGhlIHJvb3QgdGFibGUuICBXaGVuIGxlbiBleGNlZWRzXG4gICByb290LCBzdWItdGFibGVzIGFyZSBjcmVhdGVkIHBvaW50ZWQgdG8gYnkgdGhlIHJvb3QgZW50cnkgd2l0aCBhbiBpbmRleFxuICAgb2YgdGhlIGxvdyByb290IGJpdHMgb2YgaHVmZi4gIFRoaXMgaXMgc2F2ZWQgaW4gbG93IHRvIGNoZWNrIGZvciB3aGVuIGFcbiAgIG5ldyBzdWItdGFibGUgc2hvdWxkIGJlIHN0YXJ0ZWQuICBkcm9wIGlzIHplcm8gd2hlbiB0aGUgcm9vdCB0YWJsZSBpc1xuICAgYmVpbmcgZmlsbGVkLCBhbmQgZHJvcCBpcyByb290IHdoZW4gc3ViLXRhYmxlcyBhcmUgYmVpbmcgZmlsbGVkLlxuXG4gICBXaGVuIGEgbmV3IHN1Yi10YWJsZSBpcyBuZWVkZWQsIGl0IGlzIG5lY2Vzc2FyeSB0byBsb29rIGFoZWFkIGluIHRoZVxuICAgY29kZSBsZW5ndGhzIHRvIGRldGVybWluZSB3aGF0IHNpemUgc3ViLXRhYmxlIGlzIG5lZWRlZC4gIFRoZSBsZW5ndGhcbiAgIGNvdW50cyBhcmUgdXNlZCBmb3IgdGhpcywgYW5kIHNvIGNvdW50W10gaXMgZGVjcmVtZW50ZWQgYXMgY29kZXMgYXJlXG4gICBlbnRlcmVkIGluIHRoZSB0YWJsZXMuXG5cbiAgIHVzZWQga2VlcHMgdHJhY2sgb2YgaG93IG1hbnkgdGFibGUgZW50cmllcyBoYXZlIGJlZW4gYWxsb2NhdGVkIGZyb20gdGhlXG4gICBwcm92aWRlZCAqdGFibGUgc3BhY2UuICBJdCBpcyBjaGVja2VkIGZvciBMRU5TIGFuZCBESVNUIHRhYmxlcyBhZ2FpbnN0XG4gICB0aGUgY29uc3RhbnRzIEVOT1VHSF9MRU5TIGFuZCBFTk9VR0hfRElTVFMgdG8gZ3VhcmQgYWdhaW5zdCBjaGFuZ2VzIGluXG4gICB0aGUgaW5pdGlhbCByb290IHRhYmxlIHNpemUgY29uc3RhbnRzLiAgU2VlIHRoZSBjb21tZW50cyBpbiBpbmZ0cmVlcy5oXG4gICBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cblxuICAgc3ltIGluY3JlbWVudHMgdGhyb3VnaCBhbGwgc3ltYm9scywgYW5kIHRoZSBsb29wIHRlcm1pbmF0ZXMgd2hlblxuICAgYWxsIGNvZGVzIG9mIGxlbmd0aCBtYXgsIGkuZS4gYWxsIGNvZGVzLCBoYXZlIGJlZW4gcHJvY2Vzc2VkLiAgVGhpc1xuICAgcm91dGluZSBwZXJtaXRzIGluY29tcGxldGUgY29kZXMsIHNvIGFub3RoZXIgbG9vcCBhZnRlciB0aGlzIG9uZSBmaWxsc1xuICAgaW4gdGhlIHJlc3Qgb2YgdGhlIGRlY29kaW5nIHRhYmxlcyB3aXRoIGludmFsaWQgY29kZSBtYXJrZXJzLlxuICAgKi9cblxuICAvKiBzZXQgdXAgZm9yIGNvZGUgdHlwZSAqL1xuICAvLyBwb29yIG1hbiBvcHRpbWl6YXRpb24gLSB1c2UgaWYtZWxzZSBpbnN0ZWFkIG9mIHN3aXRjaCxcbiAgLy8gdG8gYXZvaWQgZGVvcHRzIGluIG9sZCB2OFxuICBpZiAodHlwZSA9PT0gQ09ERVMpIHtcbiAgICBiYXNlID0gZXh0cmEgPSB3b3JrOyAgICAvKiBkdW1teSB2YWx1ZS0tbm90IHVzZWQgKi9cbiAgICBlbmQgPSAxOTtcblxuICB9IGVsc2UgaWYgKHR5cGUgPT09IExFTlMpIHtcbiAgICBiYXNlID0gbGJhc2U7XG4gICAgYmFzZV9pbmRleCAtPSAyNTc7XG4gICAgZXh0cmEgPSBsZXh0O1xuICAgIGV4dHJhX2luZGV4IC09IDI1NztcbiAgICBlbmQgPSAyNTY7XG5cbiAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgIC8qIERJU1RTICovXG4gICAgYmFzZSA9IGRiYXNlO1xuICAgIGV4dHJhID0gZGV4dDtcbiAgICBlbmQgPSAtMTtcbiAgfVxuXG4gIC8qIGluaXRpYWxpemUgb3B0cyBmb3IgbG9vcCAqL1xuICBodWZmID0gMDsgICAgICAgICAgICAgICAgICAgLyogc3RhcnRpbmcgY29kZSAqL1xuICBzeW0gPSAwOyAgICAgICAgICAgICAgICAgICAgLyogc3RhcnRpbmcgY29kZSBzeW1ib2wgKi9cbiAgbGVuID0gbWluOyAgICAgICAgICAgICAgICAgIC8qIHN0YXJ0aW5nIGNvZGUgbGVuZ3RoICovXG4gIG5leHQgPSB0YWJsZV9pbmRleDsgICAgICAgICAgICAgIC8qIGN1cnJlbnQgdGFibGUgdG8gZmlsbCBpbiAqL1xuICBjdXJyID0gcm9vdDsgICAgICAgICAgICAgICAgLyogY3VycmVudCB0YWJsZSBpbmRleCBiaXRzICovXG4gIGRyb3AgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBjdXJyZW50IGJpdHMgdG8gZHJvcCBmcm9tIGNvZGUgZm9yIGluZGV4ICovXG4gIGxvdyA9IC0xOyAgICAgICAgICAgICAgICAgICAvKiB0cmlnZ2VyIG5ldyBzdWItdGFibGUgd2hlbiBsZW4gPiByb290ICovXG4gIHVzZWQgPSAxIDw8IHJvb3Q7ICAgICAgICAgIC8qIHVzZSByb290IHRhYmxlIGVudHJpZXMgKi9cbiAgbWFzayA9IHVzZWQgLSAxOyAgICAgICAgICAgIC8qIG1hc2sgZm9yIGNvbXBhcmluZyBsb3cgKi9cblxuICAvKiBjaGVjayBhdmFpbGFibGUgdGFibGUgc3BhY2UgKi9cbiAgaWYgKCh0eXBlID09PSBMRU5TICYmIHVzZWQgPiBFTk9VR0hfTEVOUykgfHxcbiAgICAodHlwZSA9PT0gRElTVFMgJiYgdXNlZCA+IEVOT1VHSF9ESVNUUykpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIC8qIHByb2Nlc3MgYWxsIGNvZGVzIGFuZCBtYWtlIHRhYmxlIGVudHJpZXMgKi9cbiAgZm9yICg7Oykge1xuICAgIC8qIGNyZWF0ZSB0YWJsZSBlbnRyeSAqL1xuICAgIGhlcmVfYml0cyA9IGxlbiAtIGRyb3A7XG4gICAgaWYgKHdvcmtbc3ltXSA8IGVuZCkge1xuICAgICAgaGVyZV9vcCA9IDA7XG4gICAgICBoZXJlX3ZhbCA9IHdvcmtbc3ltXTtcbiAgICB9XG4gICAgZWxzZSBpZiAod29ya1tzeW1dID4gZW5kKSB7XG4gICAgICBoZXJlX29wID0gZXh0cmFbZXh0cmFfaW5kZXggKyB3b3JrW3N5bV1dO1xuICAgICAgaGVyZV92YWwgPSBiYXNlW2Jhc2VfaW5kZXggKyB3b3JrW3N5bV1dO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGhlcmVfb3AgPSAzMiArIDY0OyAgICAgICAgIC8qIGVuZCBvZiBibG9jayAqL1xuICAgICAgaGVyZV92YWwgPSAwO1xuICAgIH1cblxuICAgIC8qIHJlcGxpY2F0ZSBmb3IgdGhvc2UgaW5kaWNlcyB3aXRoIGxvdyBsZW4gYml0cyBlcXVhbCB0byBodWZmICovXG4gICAgaW5jciA9IDEgPDwgKGxlbiAtIGRyb3ApO1xuICAgIGZpbGwgPSAxIDw8IGN1cnI7XG4gICAgbWluID0gZmlsbDsgICAgICAgICAgICAgICAgIC8qIHNhdmUgb2Zmc2V0IHRvIG5leHQgdGFibGUgKi9cbiAgICBkbyB7XG4gICAgICBmaWxsIC09IGluY3I7XG4gICAgICB0YWJsZVtuZXh0ICsgKGh1ZmYgPj4gZHJvcCkgKyBmaWxsXSA9IChoZXJlX2JpdHMgPDwgMjQpIHwgKGhlcmVfb3AgPDwgMTYpIHwgaGVyZV92YWwgfDA7XG4gICAgfSB3aGlsZSAoZmlsbCAhPT0gMCk7XG5cbiAgICAvKiBiYWNrd2FyZHMgaW5jcmVtZW50IHRoZSBsZW4tYml0IGNvZGUgaHVmZiAqL1xuICAgIGluY3IgPSAxIDw8IChsZW4gLSAxKTtcbiAgICB3aGlsZSAoaHVmZiAmIGluY3IpIHtcbiAgICAgIGluY3IgPj49IDE7XG4gICAgfVxuICAgIGlmIChpbmNyICE9PSAwKSB7XG4gICAgICBodWZmICY9IGluY3IgLSAxO1xuICAgICAgaHVmZiArPSBpbmNyO1xuICAgIH0gZWxzZSB7XG4gICAgICBodWZmID0gMDtcbiAgICB9XG5cbiAgICAvKiBnbyB0byBuZXh0IHN5bWJvbCwgdXBkYXRlIGNvdW50LCBsZW4gKi9cbiAgICBzeW0rKztcbiAgICBpZiAoLS1jb3VudFtsZW5dID09PSAwKSB7XG4gICAgICBpZiAobGVuID09PSBtYXgpIHsgYnJlYWs7IH1cbiAgICAgIGxlbiA9IGxlbnNbbGVuc19pbmRleCArIHdvcmtbc3ltXV07XG4gICAgfVxuXG4gICAgLyogY3JlYXRlIG5ldyBzdWItdGFibGUgaWYgbmVlZGVkICovXG4gICAgaWYgKGxlbiA+IHJvb3QgJiYgKGh1ZmYgJiBtYXNrKSAhPT0gbG93KSB7XG4gICAgICAvKiBpZiBmaXJzdCB0aW1lLCB0cmFuc2l0aW9uIHRvIHN1Yi10YWJsZXMgKi9cbiAgICAgIGlmIChkcm9wID09PSAwKSB7XG4gICAgICAgIGRyb3AgPSByb290O1xuICAgICAgfVxuXG4gICAgICAvKiBpbmNyZW1lbnQgcGFzdCBsYXN0IHRhYmxlICovXG4gICAgICBuZXh0ICs9IG1pbjsgICAgICAgICAgICAvKiBoZXJlIG1pbiBpcyAxIDw8IGN1cnIgKi9cblxuICAgICAgLyogZGV0ZXJtaW5lIGxlbmd0aCBvZiBuZXh0IHRhYmxlICovXG4gICAgICBjdXJyID0gbGVuIC0gZHJvcDtcbiAgICAgIGxlZnQgPSAxIDw8IGN1cnI7XG4gICAgICB3aGlsZSAoY3VyciArIGRyb3AgPCBtYXgpIHtcbiAgICAgICAgbGVmdCAtPSBjb3VudFtjdXJyICsgZHJvcF07XG4gICAgICAgIGlmIChsZWZ0IDw9IDApIHsgYnJlYWs7IH1cbiAgICAgICAgY3VycisrO1xuICAgICAgICBsZWZ0IDw8PSAxO1xuICAgICAgfVxuXG4gICAgICAvKiBjaGVjayBmb3IgZW5vdWdoIHNwYWNlICovXG4gICAgICB1c2VkICs9IDEgPDwgY3VycjtcbiAgICAgIGlmICgodHlwZSA9PT0gTEVOUyAmJiB1c2VkID4gRU5PVUdIX0xFTlMpIHx8XG4gICAgICAgICh0eXBlID09PSBESVNUUyAmJiB1c2VkID4gRU5PVUdIX0RJU1RTKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cblxuICAgICAgLyogcG9pbnQgZW50cnkgaW4gcm9vdCB0YWJsZSB0byBzdWItdGFibGUgKi9cbiAgICAgIGxvdyA9IGh1ZmYgJiBtYXNrO1xuICAgICAgLyp0YWJsZS5vcFtsb3ddID0gY3VycjtcbiAgICAgIHRhYmxlLmJpdHNbbG93XSA9IHJvb3Q7XG4gICAgICB0YWJsZS52YWxbbG93XSA9IG5leHQgLSBvcHRzLnRhYmxlX2luZGV4OyovXG4gICAgICB0YWJsZVtsb3ddID0gKHJvb3QgPDwgMjQpIHwgKGN1cnIgPDwgMTYpIHwgKG5leHQgLSB0YWJsZV9pbmRleCkgfDA7XG4gICAgfVxuICB9XG5cbiAgLyogZmlsbCBpbiByZW1haW5pbmcgdGFibGUgZW50cnkgaWYgY29kZSBpcyBpbmNvbXBsZXRlIChndWFyYW50ZWVkIHRvIGhhdmVcbiAgIGF0IG1vc3Qgb25lIHJlbWFpbmluZyBlbnRyeSwgc2luY2UgaWYgdGhlIGNvZGUgaXMgaW5jb21wbGV0ZSwgdGhlXG4gICBtYXhpbXVtIGNvZGUgbGVuZ3RoIHRoYXQgd2FzIGFsbG93ZWQgdG8gZ2V0IHRoaXMgZmFyIGlzIG9uZSBiaXQpICovXG4gIGlmIChodWZmICE9PSAwKSB7XG4gICAgLy90YWJsZS5vcFtuZXh0ICsgaHVmZl0gPSA2NDsgICAgICAgICAgICAvKiBpbnZhbGlkIGNvZGUgbWFya2VyICovXG4gICAgLy90YWJsZS5iaXRzW25leHQgKyBodWZmXSA9IGxlbiAtIGRyb3A7XG4gICAgLy90YWJsZS52YWxbbmV4dCArIGh1ZmZdID0gMDtcbiAgICB0YWJsZVtuZXh0ICsgaHVmZl0gPSAoKGxlbiAtIGRyb3ApIDw8IDI0KSB8ICg2NCA8PCAxNikgfDA7XG4gIH1cblxuICAvKiBzZXQgcmV0dXJuIHBhcmFtZXRlcnMgKi9cbiAgLy9vcHRzLnRhYmxlX2luZGV4ICs9IHVzZWQ7XG4gIG9wdHMuYml0cyA9IHJvb3Q7XG4gIHJldHVybiAwO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAvKiBBbGxvd2VkIGZsdXNoIHZhbHVlczsgc2VlIGRlZmxhdGUoKSBhbmQgaW5mbGF0ZSgpIGJlbG93IGZvciBkZXRhaWxzICovXG4gIFpfTk9fRkxVU0g6ICAgICAgICAgMCxcbiAgWl9QQVJUSUFMX0ZMVVNIOiAgICAxLFxuICBaX1NZTkNfRkxVU0g6ICAgICAgIDIsXG4gIFpfRlVMTF9GTFVTSDogICAgICAgMyxcbiAgWl9GSU5JU0g6ICAgICAgICAgICA0LFxuICBaX0JMT0NLOiAgICAgICAgICAgIDUsXG4gIFpfVFJFRVM6ICAgICAgICAgICAgNixcblxuICAvKiBSZXR1cm4gY29kZXMgZm9yIHRoZSBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGZ1bmN0aW9ucy4gTmVnYXRpdmUgdmFsdWVzXG4gICogYXJlIGVycm9ycywgcG9zaXRpdmUgdmFsdWVzIGFyZSB1c2VkIGZvciBzcGVjaWFsIGJ1dCBub3JtYWwgZXZlbnRzLlxuICAqL1xuICBaX09LOiAgICAgICAgICAgICAgIDAsXG4gIFpfU1RSRUFNX0VORDogICAgICAgMSxcbiAgWl9ORUVEX0RJQ1Q6ICAgICAgICAyLFxuICBaX0VSUk5POiAgICAgICAgICAgLTEsXG4gIFpfU1RSRUFNX0VSUk9SOiAgICAtMixcbiAgWl9EQVRBX0VSUk9SOiAgICAgIC0zLFxuICAvL1pfTUVNX0VSUk9SOiAgICAgLTQsXG4gIFpfQlVGX0VSUk9SOiAgICAgICAtNSxcbiAgLy9aX1ZFUlNJT05fRVJST1I6IC02LFxuXG4gIC8qIGNvbXByZXNzaW9uIGxldmVscyAqL1xuICBaX05PX0NPTVBSRVNTSU9OOiAgICAgICAgIDAsXG4gIFpfQkVTVF9TUEVFRDogICAgICAgICAgICAgMSxcbiAgWl9CRVNUX0NPTVBSRVNTSU9OOiAgICAgICA5LFxuICBaX0RFRkFVTFRfQ09NUFJFU1NJT046ICAgLTEsXG5cblxuICBaX0ZJTFRFUkVEOiAgICAgICAgICAgICAgIDEsXG4gIFpfSFVGRk1BTl9PTkxZOiAgICAgICAgICAgMixcbiAgWl9STEU6ICAgICAgICAgICAgICAgICAgICAzLFxuICBaX0ZJWEVEOiAgICAgICAgICAgICAgICAgIDQsXG4gIFpfREVGQVVMVF9TVFJBVEVHWTogICAgICAgMCxcblxuICAvKiBQb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIGRhdGFfdHlwZSBmaWVsZCAodGhvdWdoIHNlZSBpbmZsYXRlKCkpICovXG4gIFpfQklOQVJZOiAgICAgICAgICAgICAgICAgMCxcbiAgWl9URVhUOiAgICAgICAgICAgICAgICAgICAxLFxuICAvL1pfQVNDSUk6ICAgICAgICAgICAgICAgIDEsIC8vID0gWl9URVhUIChkZXByZWNhdGVkKVxuICBaX1VOS05PV046ICAgICAgICAgICAgICAgIDIsXG5cbiAgLyogVGhlIGRlZmxhdGUgY29tcHJlc3Npb24gbWV0aG9kICovXG4gIFpfREVGTEFURUQ6ICAgICAgICAgICAgICAgOFxuICAvL1pfTlVMTDogICAgICAgICAgICAgICAgIG51bGwgLy8gVXNlIC0xIG9yIG51bGwgaW5saW5lLCBkZXBlbmRpbmcgb24gdmFyIHR5cGVcbn07XG4iLCIvKiFcbiAqIG1lZGlhLXR5cGVyXG4gKiBDb3B5cmlnaHQoYykgMjAxNCBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiBSZWdFeHAgdG8gbWF0Y2ggKiggXCI7XCIgcGFyYW1ldGVyICkgaW4gUkZDIDI2MTYgc2VjIDMuN1xuICpcbiAqIHBhcmFtZXRlciAgICAgPSB0b2tlbiBcIj1cIiAoIHRva2VuIHwgcXVvdGVkLXN0cmluZyApXG4gKiB0b2tlbiAgICAgICAgID0gMSo8YW55IENIQVIgZXhjZXB0IENUTHMgb3Igc2VwYXJhdG9ycz5cbiAqIHNlcGFyYXRvcnMgICAgPSBcIihcIiB8IFwiKVwiIHwgXCI8XCIgfCBcIj5cIiB8IFwiQFwiXG4gKiAgICAgICAgICAgICAgIHwgXCIsXCIgfCBcIjtcIiB8IFwiOlwiIHwgXCJcXFwiIHwgPFwiPlxuICogICAgICAgICAgICAgICB8IFwiL1wiIHwgXCJbXCIgfCBcIl1cIiB8IFwiP1wiIHwgXCI9XCJcbiAqICAgICAgICAgICAgICAgfCBcIntcIiB8IFwifVwiIHwgU1AgfCBIVFxuICogcXVvdGVkLXN0cmluZyA9ICggPFwiPiAqKHFkdGV4dCB8IHF1b3RlZC1wYWlyICkgPFwiPiApXG4gKiBxZHRleHQgICAgICAgID0gPGFueSBURVhUIGV4Y2VwdCA8XCI+PlxuICogcXVvdGVkLXBhaXIgICA9IFwiXFxcIiBDSEFSXG4gKiBDSEFSICAgICAgICAgID0gPGFueSBVUy1BU0NJSSBjaGFyYWN0ZXIgKG9jdGV0cyAwIC0gMTI3KT5cbiAqIFRFWFQgICAgICAgICAgPSA8YW55IE9DVEVUIGV4Y2VwdCBDVExzLCBidXQgaW5jbHVkaW5nIExXUz5cbiAqIExXUyAgICAgICAgICAgPSBbQ1JMRl0gMSooIFNQIHwgSFQgKVxuICogQ1JMRiAgICAgICAgICA9IENSIExGXG4gKiBDUiAgICAgICAgICAgID0gPFVTLUFTQ0lJIENSLCBjYXJyaWFnZSByZXR1cm4gKDEzKT5cbiAqIExGICAgICAgICAgICAgPSA8VVMtQVNDSUkgTEYsIGxpbmVmZWVkICgxMCk+XG4gKiBTUCAgICAgICAgICAgID0gPFVTLUFTQ0lJIFNQLCBzcGFjZSAoMzIpPlxuICogU0hUICAgICAgICAgICA9IDxVUy1BU0NJSSBIVCwgaG9yaXpvbnRhbC10YWIgKDkpPlxuICogQ1RMICAgICAgICAgICA9IDxhbnkgVVMtQVNDSUkgY29udHJvbCBjaGFyYWN0ZXIgKG9jdGV0cyAwIC0gMzEpIGFuZCBERUwgKDEyNyk+XG4gKiBPQ1RFVCAgICAgICAgID0gPGFueSA4LWJpdCBzZXF1ZW5jZSBvZiBkYXRhPlxuICovXG52YXIgcGFyYW1SZWdFeHAgPSAvOyAqKFshIyQlJidcXCpcXCtcXC1cXC4wLTlBLVpcXF5fYGEtelxcfH5dKykgKj0gKihcIig/OlsgIVxcdTAwMjMtXFx1MDA1YlxcdTAwNWQtXFx1MDA3ZVxcdTAwODAtXFx1MDBmZl18XFxcXFtcXHUwMDIwLVxcdTAwN2VdKSpcInxbISMkJSYnXFwqXFwrXFwtXFwuMC05QS1aXFxeX2BhLXpcXHx+XSspICovZztcbnZhciB0ZXh0UmVnRXhwID0gL15bXFx1MDAyMC1cXHUwMDdlXFx1MDA4MC1cXHUwMGZmXSskL1xudmFyIHRva2VuUmVnRXhwID0gL15bISMkJSYnXFwqXFwrXFwtXFwuMC05QS1aXFxeX2BhLXpcXHx+XSskL1xuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCBxdW90ZWQtcGFpciBpbiBSRkMgMjYxNlxuICpcbiAqIHF1b3RlZC1wYWlyID0gXCJcXFwiIENIQVJcbiAqIENIQVIgICAgICAgID0gPGFueSBVUy1BU0NJSSBjaGFyYWN0ZXIgKG9jdGV0cyAwIC0gMTI3KT5cbiAqL1xudmFyIHFlc2NSZWdFeHAgPSAvXFxcXChbXFx1MDAwMC1cXHUwMDdmXSkvZztcblxuLyoqXG4gKiBSZWdFeHAgdG8gbWF0Y2ggY2hhcnMgdGhhdCBtdXN0IGJlIHF1b3RlZC1wYWlyIGluIFJGQyAyNjE2XG4gKi9cbnZhciBxdW90ZVJlZ0V4cCA9IC8oW1xcXFxcIl0pL2c7XG5cbi8qKlxuICogUmVnRXhwIHRvIG1hdGNoIHR5cGUgaW4gUkZDIDY4MzhcbiAqXG4gKiB0eXBlLW5hbWUgPSByZXN0cmljdGVkLW5hbWVcbiAqIHN1YnR5cGUtbmFtZSA9IHJlc3RyaWN0ZWQtbmFtZVxuICogcmVzdHJpY3RlZC1uYW1lID0gcmVzdHJpY3RlZC1uYW1lLWZpcnN0ICoxMjZyZXN0cmljdGVkLW5hbWUtY2hhcnNcbiAqIHJlc3RyaWN0ZWQtbmFtZS1maXJzdCAgPSBBTFBIQSAvIERJR0lUXG4gKiByZXN0cmljdGVkLW5hbWUtY2hhcnMgID0gQUxQSEEgLyBESUdJVCAvIFwiIVwiIC8gXCIjXCIgL1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIFwiJFwiIC8gXCImXCIgLyBcIi1cIiAvIFwiXlwiIC8gXCJfXCJcbiAqIHJlc3RyaWN0ZWQtbmFtZS1jaGFycyA9LyBcIi5cIiA7IENoYXJhY3RlcnMgYmVmb3JlIGZpcnN0IGRvdCBhbHdheXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOyBzcGVjaWZ5IGEgZmFjZXQgbmFtZVxuICogcmVzdHJpY3RlZC1uYW1lLWNoYXJzID0vIFwiK1wiIDsgQ2hhcmFjdGVycyBhZnRlciBsYXN0IHBsdXMgYWx3YXlzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsgc3BlY2lmeSBhIHN0cnVjdHVyZWQgc3ludGF4IHN1ZmZpeFxuICogQUxQSEEgPSAgJXg0MS01QSAvICV4NjEtN0EgICA7IEEtWiAvIGEtelxuICogRElHSVQgPSAgJXgzMC0zOSAgICAgICAgICAgICA7IDAtOVxuICovXG52YXIgc3VidHlwZU5hbWVSZWdFeHAgPSAvXltBLVphLXowLTldW0EtWmEtejAtOSEjJCZeXy4tXXswLDEyNn0kL1xudmFyIHR5cGVOYW1lUmVnRXhwID0gL15bQS1aYS16MC05XVtBLVphLXowLTkhIyQmXl8tXXswLDEyNn0kL1xudmFyIHR5cGVSZWdFeHAgPSAvXiAqKFtBLVphLXowLTldW0EtWmEtejAtOSEjJCZeXy1dezAsMTI2fSlcXC8oW0EtWmEtejAtOV1bQS1aYS16MC05ISMkJl5fListXXswLDEyNn0pICokLztcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdCA9IGZvcm1hdFxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5cbi8qKlxuICogRm9ybWF0IG9iamVjdCB0byBtZWRpYSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0KG9iaikge1xuICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG9iaiBpcyByZXF1aXJlZCcpXG4gIH1cblxuICB2YXIgcGFyYW1ldGVycyA9IG9iai5wYXJhbWV0ZXJzXG4gIHZhciBzdWJ0eXBlID0gb2JqLnN1YnR5cGVcbiAgdmFyIHN1ZmZpeCA9IG9iai5zdWZmaXhcbiAgdmFyIHR5cGUgPSBvYmoudHlwZVxuXG4gIGlmICghdHlwZSB8fCAhdHlwZU5hbWVSZWdFeHAudGVzdCh0eXBlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgdHlwZScpXG4gIH1cblxuICBpZiAoIXN1YnR5cGUgfHwgIXN1YnR5cGVOYW1lUmVnRXhwLnRlc3Qoc3VidHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1YnR5cGUnKVxuICB9XG5cbiAgLy8gZm9ybWF0IGFzIHR5cGUvc3VidHlwZVxuICB2YXIgc3RyaW5nID0gdHlwZSArICcvJyArIHN1YnR5cGVcblxuICAvLyBhcHBlbmQgK3N1ZmZpeFxuICBpZiAoc3VmZml4KSB7XG4gICAgaWYgKCF0eXBlTmFtZVJlZ0V4cC50ZXN0KHN1ZmZpeCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VmZml4JylcbiAgICB9XG5cbiAgICBzdHJpbmcgKz0gJysnICsgc3VmZml4XG4gIH1cblxuICAvLyBhcHBlbmQgcGFyYW1ldGVyc1xuICBpZiAocGFyYW1ldGVycyAmJiB0eXBlb2YgcGFyYW1ldGVycyA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcGFyYW1cbiAgICB2YXIgcGFyYW1zID0gT2JqZWN0LmtleXMocGFyYW1ldGVycykuc29ydCgpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgcGFyYW0gPSBwYXJhbXNbaV1cblxuICAgICAgaWYgKCF0b2tlblJlZ0V4cC50ZXN0KHBhcmFtKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHBhcmFtZXRlciBuYW1lJylcbiAgICAgIH1cblxuICAgICAgc3RyaW5nICs9ICc7ICcgKyBwYXJhbSArICc9JyArIHFzdHJpbmcocGFyYW1ldGVyc1twYXJhbV0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1xufVxuXG4vKipcbiAqIFBhcnNlIG1lZGlhIHR5cGUgdG8gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gc3RyaW5nXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cmluZykge1xuICBpZiAoIXN0cmluZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHN0cmluZyBpcyByZXF1aXJlZCcpXG4gIH1cblxuICAvLyBzdXBwb3J0IHJlcS9yZXMtbGlrZSBvYmplY3RzIGFzIGFyZ3VtZW50XG4gIGlmICh0eXBlb2Ygc3RyaW5nID09PSAnb2JqZWN0Jykge1xuICAgIHN0cmluZyA9IGdldGNvbnRlbnR0eXBlKHN0cmluZylcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHN0cmluZyBpcyByZXF1aXJlZCB0byBiZSBhIHN0cmluZycpXG4gIH1cblxuICB2YXIgaW5kZXggPSBzdHJpbmcuaW5kZXhPZignOycpXG4gIHZhciB0eXBlID0gaW5kZXggIT09IC0xXG4gICAgPyBzdHJpbmcuc3Vic3RyKDAsIGluZGV4KVxuICAgIDogc3RyaW5nXG5cbiAgdmFyIGtleVxuICB2YXIgbWF0Y2hcbiAgdmFyIG9iaiA9IHNwbGl0VHlwZSh0eXBlKVxuICB2YXIgcGFyYW1zID0ge31cbiAgdmFyIHZhbHVlXG5cbiAgcGFyYW1SZWdFeHAubGFzdEluZGV4ID0gaW5kZXhcblxuICB3aGlsZSAobWF0Y2ggPSBwYXJhbVJlZ0V4cC5leGVjKHN0cmluZykpIHtcbiAgICBpZiAobWF0Y2guaW5kZXggIT09IGluZGV4KSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHBhcmFtZXRlciBmb3JtYXQnKVxuICAgIH1cblxuICAgIGluZGV4ICs9IG1hdGNoWzBdLmxlbmd0aFxuICAgIGtleSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKClcbiAgICB2YWx1ZSA9IG1hdGNoWzJdXG5cbiAgICBpZiAodmFsdWVbMF0gPT09ICdcIicpIHtcbiAgICAgIC8vIHJlbW92ZSBxdW90ZXMgYW5kIGVzY2FwZXNcbiAgICAgIHZhbHVlID0gdmFsdWVcbiAgICAgICAgLnN1YnN0cigxLCB2YWx1ZS5sZW5ndGggLSAyKVxuICAgICAgICAucmVwbGFjZShxZXNjUmVnRXhwLCAnJDEnKVxuICAgIH1cblxuICAgIHBhcmFtc1trZXldID0gdmFsdWVcbiAgfVxuXG4gIGlmIChpbmRleCAhPT0gLTEgJiYgaW5kZXggIT09IHN0cmluZy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHBhcmFtZXRlciBmb3JtYXQnKVxuICB9XG5cbiAgb2JqLnBhcmFtZXRlcnMgPSBwYXJhbXNcblxuICByZXR1cm4gb2JqXG59XG5cbi8qKlxuICogR2V0IGNvbnRlbnQtdHlwZSBmcm9tIHJlcS9yZXMgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH1cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldGNvbnRlbnR0eXBlKG9iaikge1xuICBpZiAodHlwZW9mIG9iai5nZXRIZWFkZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyByZXMtbGlrZVxuICAgIHJldHVybiBvYmouZ2V0SGVhZGVyKCdjb250ZW50LXR5cGUnKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmouaGVhZGVycyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyByZXEtbGlrZVxuICAgIHJldHVybiBvYmouaGVhZGVycyAmJiBvYmouaGVhZGVyc1snY29udGVudC10eXBlJ11cbiAgfVxufVxuXG4vKipcbiAqIFF1b3RlIGEgc3RyaW5nIGlmIG5lY2Vzc2FyeS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBxc3RyaW5nKHZhbCkge1xuICB2YXIgc3RyID0gU3RyaW5nKHZhbClcblxuICAvLyBubyBuZWVkIHRvIHF1b3RlIHRva2Vuc1xuICBpZiAodG9rZW5SZWdFeHAudGVzdChzdHIpKSB7XG4gICAgcmV0dXJuIHN0clxuICB9XG5cbiAgaWYgKHN0ci5sZW5ndGggPiAwICYmICF0ZXh0UmVnRXhwLnRlc3Qoc3RyKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgcGFyYW1ldGVyIHZhbHVlJylcbiAgfVxuXG4gIHJldHVybiAnXCInICsgc3RyLnJlcGxhY2UocXVvdGVSZWdFeHAsICdcXFxcJDEnKSArICdcIidcbn1cblxuLyoqXG4gKiBTaW1wbHkgXCJ0eXBlL3N1YnR5cGUrc2lmZnhcIiBpbnRvIHBhcnRzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNwbGl0VHlwZShzdHJpbmcpIHtcbiAgdmFyIG1hdGNoID0gdHlwZVJlZ0V4cC5leGVjKHN0cmluZy50b0xvd2VyQ2FzZSgpKVxuXG4gIGlmICghbWF0Y2gpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIG1lZGlhIHR5cGUnKVxuICB9XG5cbiAgdmFyIHR5cGUgPSBtYXRjaFsxXVxuICB2YXIgc3VidHlwZSA9IG1hdGNoWzJdXG4gIHZhciBzdWZmaXhcblxuICAvLyBzdWZmaXggYWZ0ZXIgbGFzdCArXG4gIHZhciBpbmRleCA9IHN1YnR5cGUubGFzdEluZGV4T2YoJysnKVxuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgc3VmZml4ID0gc3VidHlwZS5zdWJzdHIoaW5kZXggKyAxKVxuICAgIHN1YnR5cGUgPSBzdWJ0eXBlLnN1YnN0cigwLCBpbmRleClcbiAgfVxuXG4gIHZhciBvYmogPSB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBzdWJ0eXBlOiBzdWJ0eXBlLFxuICAgIHN1ZmZpeDogc3VmZml4XG4gIH1cblxuICByZXR1cm4gb2JqXG59XG4iLCIvKiFcbiAqIG1pbWUtZGJcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGIuanNvbicpXG4iLCIvKiFcbiAqIGJvZHktcGFyc2VyXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBieXRlcyA9IHJlcXVpcmUoJ2J5dGVzJylcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2JvZHktcGFyc2VyOnJhdycpXG52YXIgcmVhZCA9IHJlcXVpcmUoJy4uL3JlYWQnKVxudmFyIHR5cGVpcyA9IHJlcXVpcmUoJ3R5cGUtaXMnKVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcmF3XG5cbi8qKlxuICogQ3JlYXRlIGEgbWlkZGxld2FyZSB0byBwYXJzZSByYXcgYm9kaWVzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiByYXcgKG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIGluZmxhdGUgPSBvcHRzLmluZmxhdGUgIT09IGZhbHNlXG4gIHZhciBsaW1pdCA9IHR5cGVvZiBvcHRzLmxpbWl0ICE9PSAnbnVtYmVyJ1xuICAgID8gYnl0ZXMucGFyc2Uob3B0cy5saW1pdCB8fCAnMTAwa2InKVxuICAgIDogb3B0cy5saW1pdFxuICB2YXIgdHlwZSA9IG9wdHMudHlwZSB8fCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ1xuICB2YXIgdmVyaWZ5ID0gb3B0cy52ZXJpZnkgfHwgZmFsc2VcblxuICBpZiAodmVyaWZ5ICE9PSBmYWxzZSAmJiB0eXBlb2YgdmVyaWZ5ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIHZlcmlmeSBtdXN0IGJlIGZ1bmN0aW9uJylcbiAgfVxuXG4gIC8vIGNyZWF0ZSB0aGUgYXBwcm9wcmlhdGUgdHlwZSBjaGVja2luZyBmdW5jdGlvblxuICB2YXIgc2hvdWxkUGFyc2UgPSB0eXBlb2YgdHlwZSAhPT0gJ2Z1bmN0aW9uJ1xuICAgID8gdHlwZUNoZWNrZXIodHlwZSlcbiAgICA6IHR5cGVcblxuICBmdW5jdGlvbiBwYXJzZSAoYnVmKSB7XG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHJhd1BhcnNlciAocmVxLCByZXMsIG5leHQpIHtcbiAgICBpZiAocmVxLl9ib2R5KSB7XG4gICAgICBkZWJ1ZygnYm9keSBhbHJlYWR5IHBhcnNlZCcpXG4gICAgICBuZXh0KClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHJlcS5ib2R5ID0gcmVxLmJvZHkgfHwge31cblxuICAgIC8vIHNraXAgcmVxdWVzdHMgd2l0aG91dCBib2RpZXNcbiAgICBpZiAoIXR5cGVpcy5oYXNCb2R5KHJlcSkpIHtcbiAgICAgIGRlYnVnKCdza2lwIGVtcHR5IGJvZHknKVxuICAgICAgbmV4dCgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBkZWJ1ZygnY29udGVudC10eXBlICVqJywgcmVxLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddKVxuXG4gICAgLy8gZGV0ZXJtaW5lIGlmIHJlcXVlc3Qgc2hvdWxkIGJlIHBhcnNlZFxuICAgIGlmICghc2hvdWxkUGFyc2UocmVxKSkge1xuICAgICAgZGVidWcoJ3NraXAgcGFyc2luZycpXG4gICAgICBuZXh0KClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHJlYWRcbiAgICByZWFkKHJlcSwgcmVzLCBuZXh0LCBwYXJzZSwgZGVidWcsIHtcbiAgICAgIGVuY29kaW5nOiBudWxsLFxuICAgICAgaW5mbGF0ZTogaW5mbGF0ZSxcbiAgICAgIGxpbWl0OiBsaW1pdCxcbiAgICAgIHZlcmlmeTogdmVyaWZ5XG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgc2ltcGxlIHR5cGUgY2hlY2tlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cblxuZnVuY3Rpb24gdHlwZUNoZWNrZXIgKHR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNoZWNrVHlwZSAocmVxKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odHlwZWlzKHJlcSwgdHlwZSkpXG4gIH1cbn1cbiIsIi8qIVxuICogYm9keS1wYXJzZXJcbiAqIENvcHlyaWdodChjKSAyMDE0LTIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGJ5dGVzID0gcmVxdWlyZSgnYnl0ZXMnKVxudmFyIGNvbnRlbnRUeXBlID0gcmVxdWlyZSgnY29udGVudC10eXBlJylcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2JvZHktcGFyc2VyOnRleHQnKVxudmFyIHJlYWQgPSByZXF1aXJlKCcuLi9yZWFkJylcbnZhciB0eXBlaXMgPSByZXF1aXJlKCd0eXBlLWlzJylcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRleHRcblxuLyoqXG4gKiBDcmVhdGUgYSBtaWRkbGV3YXJlIHRvIHBhcnNlIHRleHQgYm9kaWVzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiB0ZXh0IChvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBkZWZhdWx0Q2hhcnNldCA9IG9wdHMuZGVmYXVsdENoYXJzZXQgfHwgJ3V0Zi04J1xuICB2YXIgaW5mbGF0ZSA9IG9wdHMuaW5mbGF0ZSAhPT0gZmFsc2VcbiAgdmFyIGxpbWl0ID0gdHlwZW9mIG9wdHMubGltaXQgIT09ICdudW1iZXInXG4gICAgPyBieXRlcy5wYXJzZShvcHRzLmxpbWl0IHx8ICcxMDBrYicpXG4gICAgOiBvcHRzLmxpbWl0XG4gIHZhciB0eXBlID0gb3B0cy50eXBlIHx8ICd0ZXh0L3BsYWluJ1xuICB2YXIgdmVyaWZ5ID0gb3B0cy52ZXJpZnkgfHwgZmFsc2VcblxuICBpZiAodmVyaWZ5ICE9PSBmYWxzZSAmJiB0eXBlb2YgdmVyaWZ5ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIHZlcmlmeSBtdXN0IGJlIGZ1bmN0aW9uJylcbiAgfVxuXG4gIC8vIGNyZWF0ZSB0aGUgYXBwcm9wcmlhdGUgdHlwZSBjaGVja2luZyBmdW5jdGlvblxuICB2YXIgc2hvdWxkUGFyc2UgPSB0eXBlb2YgdHlwZSAhPT0gJ2Z1bmN0aW9uJ1xuICAgID8gdHlwZUNoZWNrZXIodHlwZSlcbiAgICA6IHR5cGVcblxuICBmdW5jdGlvbiBwYXJzZSAoYnVmKSB7XG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHRleHRQYXJzZXIgKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgaWYgKHJlcS5fYm9keSkge1xuICAgICAgZGVidWcoJ2JvZHkgYWxyZWFkeSBwYXJzZWQnKVxuICAgICAgbmV4dCgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICByZXEuYm9keSA9IHJlcS5ib2R5IHx8IHt9XG5cbiAgICAvLyBza2lwIHJlcXVlc3RzIHdpdGhvdXQgYm9kaWVzXG4gICAgaWYgKCF0eXBlaXMuaGFzQm9keShyZXEpKSB7XG4gICAgICBkZWJ1Zygnc2tpcCBlbXB0eSBib2R5JylcbiAgICAgIG5leHQoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZGVidWcoJ2NvbnRlbnQtdHlwZSAlaicsIHJlcS5oZWFkZXJzWydjb250ZW50LXR5cGUnXSlcblxuICAgIC8vIGRldGVybWluZSBpZiByZXF1ZXN0IHNob3VsZCBiZSBwYXJzZWRcbiAgICBpZiAoIXNob3VsZFBhcnNlKHJlcSkpIHtcbiAgICAgIGRlYnVnKCdza2lwIHBhcnNpbmcnKVxuICAgICAgbmV4dCgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBnZXQgY2hhcnNldFxuICAgIHZhciBjaGFyc2V0ID0gZ2V0Q2hhcnNldChyZXEpIHx8IGRlZmF1bHRDaGFyc2V0XG5cbiAgICAvLyByZWFkXG4gICAgcmVhZChyZXEsIHJlcywgbmV4dCwgcGFyc2UsIGRlYnVnLCB7XG4gICAgICBlbmNvZGluZzogY2hhcnNldCxcbiAgICAgIGluZmxhdGU6IGluZmxhdGUsXG4gICAgICBsaW1pdDogbGltaXQsXG4gICAgICB2ZXJpZnk6IHZlcmlmeVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIGNoYXJzZXQgb2YgYSByZXF1ZXN0LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSByZXFcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldENoYXJzZXQgKHJlcSkge1xuICB0cnkge1xuICAgIHJldHVybiAoY29udGVudFR5cGUucGFyc2UocmVxKS5wYXJhbWV0ZXJzLmNoYXJzZXQgfHwgJycpLnRvTG93ZXJDYXNlKClcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgc2ltcGxlIHR5cGUgY2hlY2tlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cblxuZnVuY3Rpb24gdHlwZUNoZWNrZXIgKHR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNoZWNrVHlwZSAocmVxKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odHlwZWlzKHJlcSwgdHlwZSkpXG4gIH1cbn1cbiIsIi8qIVxuICogYm9keS1wYXJzZXJcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGJ5dGVzID0gcmVxdWlyZSgnYnl0ZXMnKVxudmFyIGNvbnRlbnRUeXBlID0gcmVxdWlyZSgnY29udGVudC10eXBlJylcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJ2h0dHAtZXJyb3JzJylcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2JvZHktcGFyc2VyOnVybGVuY29kZWQnKVxudmFyIGRlcHJlY2F0ZSA9IHJlcXVpcmUoJ2RlcGQnKSgnYm9keS1wYXJzZXInKVxudmFyIHJlYWQgPSByZXF1aXJlKCcuLi9yZWFkJylcbnZhciB0eXBlaXMgPSByZXF1aXJlKCd0eXBlLWlzJylcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVybGVuY29kZWRcblxuLyoqXG4gKiBDYWNoZSBvZiBwYXJzZXIgbW9kdWxlcy5cbiAqL1xuXG52YXIgcGFyc2VycyA9IE9iamVjdC5jcmVhdGUobnVsbClcblxuLyoqXG4gKiBDcmVhdGUgYSBtaWRkbGV3YXJlIHRvIHBhcnNlIHVybGVuY29kZWQgYm9kaWVzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHVybGVuY29kZWQgKG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9XG5cbiAgLy8gbm90aWNlIGJlY2F1c2Ugb3B0aW9uIGRlZmF1bHQgd2lsbCBmbGlwIGluIG5leHQgbWFqb3JcbiAgaWYgKG9wdHMuZXh0ZW5kZWQgPT09IHVuZGVmaW5lZCkge1xuICAgIGRlcHJlY2F0ZSgndW5kZWZpbmVkIGV4dGVuZGVkOiBwcm92aWRlIGV4dGVuZGVkIG9wdGlvbicpXG4gIH1cblxuICB2YXIgZXh0ZW5kZWQgPSBvcHRzLmV4dGVuZGVkICE9PSBmYWxzZVxuICB2YXIgaW5mbGF0ZSA9IG9wdHMuaW5mbGF0ZSAhPT0gZmFsc2VcbiAgdmFyIGxpbWl0ID0gdHlwZW9mIG9wdHMubGltaXQgIT09ICdudW1iZXInXG4gICAgPyBieXRlcy5wYXJzZShvcHRzLmxpbWl0IHx8ICcxMDBrYicpXG4gICAgOiBvcHRzLmxpbWl0XG4gIHZhciB0eXBlID0gb3B0cy50eXBlIHx8ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gIHZhciB2ZXJpZnkgPSBvcHRzLnZlcmlmeSB8fCBmYWxzZVxuXG4gIGlmICh2ZXJpZnkgIT09IGZhbHNlICYmIHR5cGVvZiB2ZXJpZnkgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gdmVyaWZ5IG11c3QgYmUgZnVuY3Rpb24nKVxuICB9XG5cbiAgLy8gY3JlYXRlIHRoZSBhcHByb3ByaWF0ZSBxdWVyeSBwYXJzZXJcbiAgdmFyIHF1ZXJ5cGFyc2UgPSBleHRlbmRlZFxuICAgID8gZXh0ZW5kZWRwYXJzZXIob3B0cylcbiAgICA6IHNpbXBsZXBhcnNlcihvcHRzKVxuXG4gIC8vIGNyZWF0ZSB0aGUgYXBwcm9wcmlhdGUgdHlwZSBjaGVja2luZyBmdW5jdGlvblxuICB2YXIgc2hvdWxkUGFyc2UgPSB0eXBlb2YgdHlwZSAhPT0gJ2Z1bmN0aW9uJ1xuICAgID8gdHlwZUNoZWNrZXIodHlwZSlcbiAgICA6IHR5cGVcblxuICBmdW5jdGlvbiBwYXJzZSAoYm9keSkge1xuICAgIHJldHVybiBib2R5Lmxlbmd0aFxuICAgICAgPyBxdWVyeXBhcnNlKGJvZHkpXG4gICAgICA6IHt9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gdXJsZW5jb2RlZFBhcnNlciAocmVxLCByZXMsIG5leHQpIHtcbiAgICBpZiAocmVxLl9ib2R5KSB7XG4gICAgICBkZWJ1ZygnYm9keSBhbHJlYWR5IHBhcnNlZCcpXG4gICAgICBuZXh0KClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHJlcS5ib2R5ID0gcmVxLmJvZHkgfHwge31cblxuICAgIC8vIHNraXAgcmVxdWVzdHMgd2l0aG91dCBib2RpZXNcbiAgICBpZiAoIXR5cGVpcy5oYXNCb2R5KHJlcSkpIHtcbiAgICAgIGRlYnVnKCdza2lwIGVtcHR5IGJvZHknKVxuICAgICAgbmV4dCgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBkZWJ1ZygnY29udGVudC10eXBlICVqJywgcmVxLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddKVxuXG4gICAgLy8gZGV0ZXJtaW5lIGlmIHJlcXVlc3Qgc2hvdWxkIGJlIHBhcnNlZFxuICAgIGlmICghc2hvdWxkUGFyc2UocmVxKSkge1xuICAgICAgZGVidWcoJ3NraXAgcGFyc2luZycpXG4gICAgICBuZXh0KClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGFzc2VydCBjaGFyc2V0XG4gICAgdmFyIGNoYXJzZXQgPSBnZXRDaGFyc2V0KHJlcSkgfHwgJ3V0Zi04J1xuICAgIGlmIChjaGFyc2V0ICE9PSAndXRmLTgnKSB7XG4gICAgICBkZWJ1ZygnaW52YWxpZCBjaGFyc2V0JylcbiAgICAgIG5leHQoY3JlYXRlRXJyb3IoNDE1LCAndW5zdXBwb3J0ZWQgY2hhcnNldCBcIicgKyBjaGFyc2V0LnRvVXBwZXJDYXNlKCkgKyAnXCInLCB7XG4gICAgICAgIGNoYXJzZXQ6IGNoYXJzZXQsXG4gICAgICAgIHR5cGU6ICdjaGFyc2V0LnVuc3VwcG9ydGVkJ1xuICAgICAgfSkpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyByZWFkXG4gICAgcmVhZChyZXEsIHJlcywgbmV4dCwgcGFyc2UsIGRlYnVnLCB7XG4gICAgICBkZWJ1ZzogZGVidWcsXG4gICAgICBlbmNvZGluZzogY2hhcnNldCxcbiAgICAgIGluZmxhdGU6IGluZmxhdGUsXG4gICAgICBsaW1pdDogbGltaXQsXG4gICAgICB2ZXJpZnk6IHZlcmlmeVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIGV4dGVuZGVkIHF1ZXJ5IHBhcnNlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICovXG5cbmZ1bmN0aW9uIGV4dGVuZGVkcGFyc2VyIChvcHRpb25zKSB7XG4gIHZhciBwYXJhbWV0ZXJMaW1pdCA9IG9wdGlvbnMucGFyYW1ldGVyTGltaXQgIT09IHVuZGVmaW5lZFxuICAgID8gb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdFxuICAgIDogMTAwMFxuICB2YXIgcGFyc2UgPSBwYXJzZXIoJ3FzJylcblxuICBpZiAoaXNOYU4ocGFyYW1ldGVyTGltaXQpIHx8IHBhcmFtZXRlckxpbWl0IDwgMSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBwYXJhbWV0ZXJMaW1pdCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChpc0Zpbml0ZShwYXJhbWV0ZXJMaW1pdCkpIHtcbiAgICBwYXJhbWV0ZXJMaW1pdCA9IHBhcmFtZXRlckxpbWl0IHwgMFxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHF1ZXJ5cGFyc2UgKGJvZHkpIHtcbiAgICB2YXIgcGFyYW1Db3VudCA9IHBhcmFtZXRlckNvdW50KGJvZHksIHBhcmFtZXRlckxpbWl0KVxuXG4gICAgaWYgKHBhcmFtQ291bnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZGVidWcoJ3RvbyBtYW55IHBhcmFtZXRlcnMnKVxuICAgICAgdGhyb3cgY3JlYXRlRXJyb3IoNDEzLCAndG9vIG1hbnkgcGFyYW1ldGVycycsIHtcbiAgICAgICAgdHlwZTogJ3BhcmFtZXRlcnMudG9vLm1hbnknXG4gICAgICB9KVxuICAgIH1cblxuICAgIHZhciBhcnJheUxpbWl0ID0gTWF0aC5tYXgoMTAwLCBwYXJhbUNvdW50KVxuXG4gICAgZGVidWcoJ3BhcnNlIGV4dGVuZGVkIHVybGVuY29kaW5nJylcbiAgICByZXR1cm4gcGFyc2UoYm9keSwge1xuICAgICAgYWxsb3dQcm90b3R5cGVzOiB0cnVlLFxuICAgICAgYXJyYXlMaW1pdDogYXJyYXlMaW1pdCxcbiAgICAgIGRlcHRoOiBJbmZpbml0eSxcbiAgICAgIHBhcmFtZXRlckxpbWl0OiBwYXJhbWV0ZXJMaW1pdFxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIGNoYXJzZXQgb2YgYSByZXF1ZXN0LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSByZXFcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldENoYXJzZXQgKHJlcSkge1xuICB0cnkge1xuICAgIHJldHVybiAoY29udGVudFR5cGUucGFyc2UocmVxKS5wYXJhbWV0ZXJzLmNoYXJzZXQgfHwgJycpLnRvTG93ZXJDYXNlKClcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxufVxuXG4vKipcbiAqIENvdW50IHRoZSBudW1iZXIgb2YgcGFyYW1ldGVycywgc3RvcHBpbmcgb25jZSBsaW1pdCByZWFjaGVkXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJvZHlcbiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyYW1ldGVyQ291bnQgKGJvZHksIGxpbWl0KSB7XG4gIHZhciBjb3VudCA9IDBcbiAgdmFyIGluZGV4ID0gMFxuXG4gIHdoaWxlICgoaW5kZXggPSBib2R5LmluZGV4T2YoJyYnLCBpbmRleCkpICE9PSAtMSkge1xuICAgIGNvdW50KytcbiAgICBpbmRleCsrXG5cbiAgICBpZiAoY291bnQgPT09IGxpbWl0KSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvdW50XG59XG5cbi8qKlxuICogR2V0IHBhcnNlciBmb3IgbW9kdWxlIG5hbWUgZHluYW1pY2FsbHkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VyIChuYW1lKSB7XG4gIHZhciBtb2QgPSBwYXJzZXJzW25hbWVdXG5cbiAgaWYgKG1vZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG1vZC5wYXJzZVxuICB9XG5cbiAgLy8gdGhpcyB1c2VzIGEgc3dpdGNoIGZvciBzdGF0aWMgcmVxdWlyZSBhbmFseXNpc1xuICBzd2l0Y2ggKG5hbWUpIHtcbiAgICBjYXNlICdxcyc6XG4gICAgICBtb2QgPSByZXF1aXJlKCdxcycpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3F1ZXJ5c3RyaW5nJzpcbiAgICAgIG1vZCA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJylcbiAgICAgIGJyZWFrXG4gIH1cblxuICAvLyBzdG9yZSB0byBwcmV2ZW50IGludm9raW5nIHJlcXVpcmUoKVxuICBwYXJzZXJzW25hbWVdID0gbW9kXG5cbiAgcmV0dXJuIG1vZC5wYXJzZVxufVxuXG4vKipcbiAqIEdldCB0aGUgc2ltcGxlIHF1ZXJ5IHBhcnNlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICovXG5cbmZ1bmN0aW9uIHNpbXBsZXBhcnNlciAob3B0aW9ucykge1xuICB2YXIgcGFyYW1ldGVyTGltaXQgPSBvcHRpb25zLnBhcmFtZXRlckxpbWl0ICE9PSB1bmRlZmluZWRcbiAgICA/IG9wdGlvbnMucGFyYW1ldGVyTGltaXRcbiAgICA6IDEwMDBcbiAgdmFyIHBhcnNlID0gcGFyc2VyKCdxdWVyeXN0cmluZycpXG5cbiAgaWYgKGlzTmFOKHBhcmFtZXRlckxpbWl0KSB8fCBwYXJhbWV0ZXJMaW1pdCA8IDEpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gcGFyYW1ldGVyTGltaXQgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpXG4gIH1cblxuICBpZiAoaXNGaW5pdGUocGFyYW1ldGVyTGltaXQpKSB7XG4gICAgcGFyYW1ldGVyTGltaXQgPSBwYXJhbWV0ZXJMaW1pdCB8IDBcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBxdWVyeXBhcnNlIChib2R5KSB7XG4gICAgdmFyIHBhcmFtQ291bnQgPSBwYXJhbWV0ZXJDb3VudChib2R5LCBwYXJhbWV0ZXJMaW1pdClcblxuICAgIGlmIChwYXJhbUNvdW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGRlYnVnKCd0b28gbWFueSBwYXJhbWV0ZXJzJylcbiAgICAgIHRocm93IGNyZWF0ZUVycm9yKDQxMywgJ3RvbyBtYW55IHBhcmFtZXRlcnMnLCB7XG4gICAgICAgIHR5cGU6ICdwYXJhbWV0ZXJzLnRvby5tYW55J1xuICAgICAgfSlcbiAgICB9XG5cbiAgICBkZWJ1ZygncGFyc2UgdXJsZW5jb2RpbmcnKVxuICAgIHJldHVybiBwYXJzZShib2R5LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgeyBtYXhLZXlzOiBwYXJhbWV0ZXJMaW1pdCB9KVxuICB9XG59XG5cbi8qKlxuICogR2V0IHRoZSBzaW1wbGUgdHlwZSBjaGVja2VyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuXG5mdW5jdGlvbiB0eXBlQ2hlY2tlciAodHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24gY2hlY2tUeXBlIChyZXEpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0eXBlaXMocmVxLCB0eXBlKSlcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBhcnJheVByZWZpeEdlbmVyYXRvcnMgPSB7XG4gICAgYnJhY2tldHM6IGZ1bmN0aW9uIGJyYWNrZXRzKHByZWZpeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ1tdJztcbiAgICB9LFxuICAgIGNvbW1hOiAnY29tbWEnLFxuICAgIGluZGljZXM6IGZ1bmN0aW9uIGluZGljZXMocHJlZml4LCBrZXkpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jLW5hbWUtbWF0Y2hpbmdcbiAgICAgICAgcmV0dXJuIHByZWZpeCArICdbJyArIGtleSArICddJztcbiAgICB9LFxuICAgIHJlcGVhdDogZnVuY3Rpb24gcmVwZWF0KHByZWZpeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgIH1cbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBwdXNoID0gQXJyYXkucHJvdG90eXBlLnB1c2g7XG52YXIgcHVzaFRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyLCB2YWx1ZU9yQXJyYXkpIHtcbiAgICBwdXNoLmFwcGx5KGFyciwgaXNBcnJheSh2YWx1ZU9yQXJyYXkpID8gdmFsdWVPckFycmF5IDogW3ZhbHVlT3JBcnJheV0pO1xufTtcblxudmFyIHRvSVNPID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgICBhZGRRdWVyeVByZWZpeDogZmFsc2UsXG4gICAgYWxsb3dEb3RzOiBmYWxzZSxcbiAgICBjaGFyc2V0OiAndXRmLTgnLFxuICAgIGNoYXJzZXRTZW50aW5lbDogZmFsc2UsXG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgZW5jb2RlOiB0cnVlLFxuICAgIGVuY29kZXI6IHV0aWxzLmVuY29kZSxcbiAgICBlbmNvZGVWYWx1ZXNPbmx5OiBmYWxzZSxcbiAgICBmb3JtYXR0ZXI6IGZvcm1hdHMuZm9ybWF0dGVyc1tmb3JtYXRzWydkZWZhdWx0J11dLFxuICAgIC8vIGRlcHJlY2F0ZWRcbiAgICBpbmRpY2VzOiBmYWxzZSxcbiAgICBzZXJpYWxpemVEYXRlOiBmdW5jdGlvbiBzZXJpYWxpemVEYXRlKGRhdGUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jLW5hbWUtbWF0Y2hpbmdcbiAgICAgICAgcmV0dXJuIHRvSVNPLmNhbGwoZGF0ZSk7XG4gICAgfSxcbiAgICBza2lwTnVsbHM6IGZhbHNlLFxuICAgIHN0cmljdE51bGxIYW5kbGluZzogZmFsc2Vcbn07XG5cbnZhciBzdHJpbmdpZnkgPSBmdW5jdGlvbiBzdHJpbmdpZnkoIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZnVuYy1uYW1lLW1hdGNoaW5nXG4gICAgb2JqZWN0LFxuICAgIHByZWZpeCxcbiAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgIHN0cmljdE51bGxIYW5kbGluZyxcbiAgICBza2lwTnVsbHMsXG4gICAgZW5jb2RlcixcbiAgICBmaWx0ZXIsXG4gICAgc29ydCxcbiAgICBhbGxvd0RvdHMsXG4gICAgc2VyaWFsaXplRGF0ZSxcbiAgICBmb3JtYXR0ZXIsXG4gICAgZW5jb2RlVmFsdWVzT25seSxcbiAgICBjaGFyc2V0XG4pIHtcbiAgICB2YXIgb2JqID0gb2JqZWN0O1xuICAgIGlmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9iaiA9IGZpbHRlcihwcmVmaXgsIG9iaik7XG4gICAgfSBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIG9iaiA9IHNlcmlhbGl6ZURhdGUob2JqKTtcbiAgICB9IGVsc2UgaWYgKGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdjb21tYScgJiYgaXNBcnJheShvYmopKSB7XG4gICAgICAgIG9iaiA9IG9iai5qb2luKCcsJyk7XG4gICAgfVxuXG4gICAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgICAgICBpZiAoc3RyaWN0TnVsbEhhbmRsaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5jb2RlciAmJiAhZW5jb2RlVmFsdWVzT25seSA/IGVuY29kZXIocHJlZml4LCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0KSA6IHByZWZpeDtcbiAgICAgICAgfVxuXG4gICAgICAgIG9iaiA9ICcnO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb2JqID09PSAnbnVtYmVyJyB8fCB0eXBlb2Ygb2JqID09PSAnYm9vbGVhbicgfHwgdXRpbHMuaXNCdWZmZXIob2JqKSkge1xuICAgICAgICBpZiAoZW5jb2Rlcikge1xuICAgICAgICAgICAgdmFyIGtleVZhbHVlID0gZW5jb2RlVmFsdWVzT25seSA/IHByZWZpeCA6IGVuY29kZXIocHJlZml4LCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0KTtcbiAgICAgICAgICAgIHJldHVybiBbZm9ybWF0dGVyKGtleVZhbHVlKSArICc9JyArIGZvcm1hdHRlcihlbmNvZGVyKG9iaiwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCkpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2Zvcm1hdHRlcihwcmVmaXgpICsgJz0nICsgZm9ybWF0dGVyKFN0cmluZyhvYmopKV07XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgdmFyIG9iaktleXM7XG4gICAgaWYgKGlzQXJyYXkoZmlsdGVyKSkge1xuICAgICAgICBvYmpLZXlzID0gZmlsdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgb2JqS2V5cyA9IHNvcnQgPyBrZXlzLnNvcnQoc29ydCkgOiBrZXlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqS2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqS2V5c1tpXTtcblxuICAgICAgICBpZiAoc2tpcE51bGxzICYmIG9ialtrZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgIHB1c2hUb0FycmF5KHZhbHVlcywgc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgIG9ialtrZXldLFxuICAgICAgICAgICAgICAgIHR5cGVvZiBnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnZnVuY3Rpb24nID8gZ2VuZXJhdGVBcnJheVByZWZpeChwcmVmaXgsIGtleSkgOiBwcmVmaXgsXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICAgICAgICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgICAgICAgICAgICAgc2tpcE51bGxzLFxuICAgICAgICAgICAgICAgIGVuY29kZXIsXG4gICAgICAgICAgICAgICAgZmlsdGVyLFxuICAgICAgICAgICAgICAgIHNvcnQsXG4gICAgICAgICAgICAgICAgYWxsb3dEb3RzLFxuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZURhdGUsXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVyLFxuICAgICAgICAgICAgICAgIGVuY29kZVZhbHVlc09ubHksXG4gICAgICAgICAgICAgICAgY2hhcnNldFxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwdXNoVG9BcnJheSh2YWx1ZXMsIHN0cmluZ2lmeShcbiAgICAgICAgICAgICAgICBvYmpba2V5XSxcbiAgICAgICAgICAgICAgICBwcmVmaXggKyAoYWxsb3dEb3RzID8gJy4nICsga2V5IDogJ1snICsga2V5ICsgJ10nKSxcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgICAgICAgICAgICAgIHN0cmljdE51bGxIYW5kbGluZyxcbiAgICAgICAgICAgICAgICBza2lwTnVsbHMsXG4gICAgICAgICAgICAgICAgZW5jb2RlcixcbiAgICAgICAgICAgICAgICBmaWx0ZXIsXG4gICAgICAgICAgICAgICAgc29ydCxcbiAgICAgICAgICAgICAgICBhbGxvd0RvdHMsXG4gICAgICAgICAgICAgICAgc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZXIsXG4gICAgICAgICAgICAgICAgZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgICAgICAgICBjaGFyc2V0XG4gICAgICAgICAgICApKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG59O1xuXG52YXIgbm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMob3B0cykge1xuICAgIGlmICghb3B0cykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdHM7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMuZW5jb2RlciAhPT0gbnVsbCAmJiBvcHRzLmVuY29kZXIgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb3B0cy5lbmNvZGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0VuY29kZXIgaGFzIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgdmFyIGNoYXJzZXQgPSBvcHRzLmNoYXJzZXQgfHwgZGVmYXVsdHMuY2hhcnNldDtcbiAgICBpZiAodHlwZW9mIG9wdHMuY2hhcnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAndXRmLTgnICYmIG9wdHMuY2hhcnNldCAhPT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjaGFyc2V0IG9wdGlvbiBtdXN0IGJlIGVpdGhlciB1dGYtOCwgaXNvLTg4NTktMSwgb3IgdW5kZWZpbmVkJyk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdCA9IGZvcm1hdHNbJ2RlZmF1bHQnXTtcbiAgICBpZiAodHlwZW9mIG9wdHMuZm9ybWF0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAoIWhhcy5jYWxsKGZvcm1hdHMuZm9ybWF0dGVycywgb3B0cy5mb3JtYXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGZvcm1hdCBvcHRpb24gcHJvdmlkZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9ybWF0ID0gb3B0cy5mb3JtYXQ7XG4gICAgfVxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcblxuICAgIHZhciBmaWx0ZXIgPSBkZWZhdWx0cy5maWx0ZXI7XG4gICAgaWYgKHR5cGVvZiBvcHRzLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJyB8fCBpc0FycmF5KG9wdHMuZmlsdGVyKSkge1xuICAgICAgICBmaWx0ZXIgPSBvcHRzLmZpbHRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRRdWVyeVByZWZpeDogdHlwZW9mIG9wdHMuYWRkUXVlcnlQcmVmaXggPT09ICdib29sZWFuJyA/IG9wdHMuYWRkUXVlcnlQcmVmaXggOiBkZWZhdWx0cy5hZGRRdWVyeVByZWZpeCxcbiAgICAgICAgYWxsb3dEb3RzOiB0eXBlb2Ygb3B0cy5hbGxvd0RvdHMgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuYWxsb3dEb3RzIDogISFvcHRzLmFsbG93RG90cyxcbiAgICAgICAgY2hhcnNldDogY2hhcnNldCxcbiAgICAgICAgY2hhcnNldFNlbnRpbmVsOiB0eXBlb2Ygb3B0cy5jaGFyc2V0U2VudGluZWwgPT09ICdib29sZWFuJyA/IG9wdHMuY2hhcnNldFNlbnRpbmVsIDogZGVmYXVsdHMuY2hhcnNldFNlbnRpbmVsLFxuICAgICAgICBkZWxpbWl0ZXI6IHR5cGVvZiBvcHRzLmRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0cy5kZWxpbWl0ZXIgOiBvcHRzLmRlbGltaXRlcixcbiAgICAgICAgZW5jb2RlOiB0eXBlb2Ygb3B0cy5lbmNvZGUgPT09ICdib29sZWFuJyA/IG9wdHMuZW5jb2RlIDogZGVmYXVsdHMuZW5jb2RlLFxuICAgICAgICBlbmNvZGVyOiB0eXBlb2Ygb3B0cy5lbmNvZGVyID09PSAnZnVuY3Rpb24nID8gb3B0cy5lbmNvZGVyIDogZGVmYXVsdHMuZW5jb2RlcixcbiAgICAgICAgZW5jb2RlVmFsdWVzT25seTogdHlwZW9mIG9wdHMuZW5jb2RlVmFsdWVzT25seSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5lbmNvZGVWYWx1ZXNPbmx5IDogZGVmYXVsdHMuZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgZmlsdGVyOiBmaWx0ZXIsXG4gICAgICAgIGZvcm1hdHRlcjogZm9ybWF0dGVyLFxuICAgICAgICBzZXJpYWxpemVEYXRlOiB0eXBlb2Ygb3B0cy5zZXJpYWxpemVEYXRlID09PSAnZnVuY3Rpb24nID8gb3B0cy5zZXJpYWxpemVEYXRlIDogZGVmYXVsdHMuc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgc2tpcE51bGxzOiB0eXBlb2Ygb3B0cy5za2lwTnVsbHMgPT09ICdib29sZWFuJyA/IG9wdHMuc2tpcE51bGxzIDogZGVmYXVsdHMuc2tpcE51bGxzLFxuICAgICAgICBzb3J0OiB0eXBlb2Ygb3B0cy5zb3J0ID09PSAnZnVuY3Rpb24nID8gb3B0cy5zb3J0IDogbnVsbCxcbiAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nOiB0eXBlb2Ygb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgPT09ICdib29sZWFuJyA/IG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nIDogZGVmYXVsdHMuc3RyaWN0TnVsbEhhbmRsaW5nXG4gICAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgb3B0cykge1xuICAgIHZhciBvYmogPSBvYmplY3Q7XG4gICAgdmFyIG9wdGlvbnMgPSBub3JtYWxpemVTdHJpbmdpZnlPcHRpb25zKG9wdHMpO1xuXG4gICAgdmFyIG9iaktleXM7XG4gICAgdmFyIGZpbHRlcjtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5maWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgICAgIG9iaiA9IGZpbHRlcignJywgb2JqKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob3B0aW9ucy5maWx0ZXIpKSB7XG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuICAgICAgICBvYmpLZXlzID0gZmlsdGVyO1xuICAgIH1cblxuICAgIHZhciBrZXlzID0gW107XG5cbiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICB2YXIgYXJyYXlGb3JtYXQ7XG4gICAgaWYgKG9wdHMgJiYgb3B0cy5hcnJheUZvcm1hdCBpbiBhcnJheVByZWZpeEdlbmVyYXRvcnMpIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSBvcHRzLmFycmF5Rm9ybWF0O1xuICAgIH0gZWxzZSBpZiAob3B0cyAmJiAnaW5kaWNlcycgaW4gb3B0cykge1xuICAgICAgICBhcnJheUZvcm1hdCA9IG9wdHMuaW5kaWNlcyA/ICdpbmRpY2VzJyA6ICdyZXBlYXQnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gJ2luZGljZXMnO1xuICAgIH1cblxuICAgIHZhciBnZW5lcmF0ZUFycmF5UHJlZml4ID0gYXJyYXlQcmVmaXhHZW5lcmF0b3JzW2FycmF5Rm9ybWF0XTtcblxuICAgIGlmICghb2JqS2V5cykge1xuICAgICAgICBvYmpLZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zb3J0KSB7XG4gICAgICAgIG9iaktleXMuc29ydChvcHRpb25zLnNvcnQpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqS2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqS2V5c1tpXTtcblxuICAgICAgICBpZiAob3B0aW9ucy5za2lwTnVsbHMgJiYgb2JqW2tleV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHB1c2hUb0FycmF5KGtleXMsIHN0cmluZ2lmeShcbiAgICAgICAgICAgIG9ialtrZXldLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICAgICAgICAgIG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICAgICAgb3B0aW9ucy5za2lwTnVsbHMsXG4gICAgICAgICAgICBvcHRpb25zLmVuY29kZSA/IG9wdGlvbnMuZW5jb2RlciA6IG51bGwsXG4gICAgICAgICAgICBvcHRpb25zLmZpbHRlcixcbiAgICAgICAgICAgIG9wdGlvbnMuc29ydCxcbiAgICAgICAgICAgIG9wdGlvbnMuYWxsb3dEb3RzLFxuICAgICAgICAgICAgb3B0aW9ucy5zZXJpYWxpemVEYXRlLFxuICAgICAgICAgICAgb3B0aW9ucy5mb3JtYXR0ZXIsXG4gICAgICAgICAgICBvcHRpb25zLmVuY29kZVZhbHVlc09ubHksXG4gICAgICAgICAgICBvcHRpb25zLmNoYXJzZXRcbiAgICAgICAgKSk7XG4gICAgfVxuXG4gICAgdmFyIGpvaW5lZCA9IGtleXMuam9pbihvcHRpb25zLmRlbGltaXRlcik7XG4gICAgdmFyIHByZWZpeCA9IG9wdGlvbnMuYWRkUXVlcnlQcmVmaXggPT09IHRydWUgPyAnPycgOiAnJztcblxuICAgIGlmIChvcHRpb25zLmNoYXJzZXRTZW50aW5lbCkge1xuICAgICAgICBpZiAob3B0aW9ucy5jaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgICAgIC8vIGVuY29kZVVSSUNvbXBvbmVudCgnJiMxMDAwMzsnKSwgdGhlIFwibnVtZXJpYyBlbnRpdHlcIiByZXByZXNlbnRhdGlvbiBvZiBhIGNoZWNrbWFya1xuICAgICAgICAgICAgcHJlZml4ICs9ICd1dGY4PSUyNiUyMzEwMDAzJTNCJic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBlbmNvZGVVUklDb21wb25lbnQoJ+KckycpXG4gICAgICAgICAgICBwcmVmaXggKz0gJ3V0Zjg9JUUyJTlDJTkzJic7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gam9pbmVkLmxlbmd0aCA+IDAgPyBwcmVmaXggKyBqb2luZWQgOiAnJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgICBhbGxvd0RvdHM6IGZhbHNlLFxuICAgIGFsbG93UHJvdG90eXBlczogZmFsc2UsXG4gICAgYXJyYXlMaW1pdDogMjAsXG4gICAgY2hhcnNldDogJ3V0Zi04JyxcbiAgICBjaGFyc2V0U2VudGluZWw6IGZhbHNlLFxuICAgIGNvbW1hOiBmYWxzZSxcbiAgICBkZWNvZGVyOiB1dGlscy5kZWNvZGUsXG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgZGVwdGg6IDUsXG4gICAgaWdub3JlUXVlcnlQcmVmaXg6IGZhbHNlLFxuICAgIGludGVycHJldE51bWVyaWNFbnRpdGllczogZmFsc2UsXG4gICAgcGFyYW1ldGVyTGltaXQ6IDEwMDAsXG4gICAgcGFyc2VBcnJheXM6IHRydWUsXG4gICAgcGxhaW5PYmplY3RzOiBmYWxzZSxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlXG59O1xuXG52YXIgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvJiMoXFxkKyk7L2csIGZ1bmN0aW9uICgkMCwgbnVtYmVyU3RyKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KG51bWJlclN0ciwgMTApKTtcbiAgICB9KTtcbn07XG5cbi8vIFRoaXMgaXMgd2hhdCBicm93c2VycyB3aWxsIHN1Ym1pdCB3aGVuIHRoZSDinJMgY2hhcmFjdGVyIG9jY3VycyBpbiBhblxuLy8gYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIGJvZHkgYW5kIHRoZSBlbmNvZGluZyBvZiB0aGUgcGFnZSBjb250YWluaW5nXG4vLyB0aGUgZm9ybSBpcyBpc28tODg1OS0xLCBvciB3aGVuIHRoZSBzdWJtaXR0ZWQgZm9ybSBoYXMgYW4gYWNjZXB0LWNoYXJzZXRcbi8vIGF0dHJpYnV0ZSBvZiBpc28tODg1OS0xLiBQcmVzdW1hYmx5IGFsc28gd2l0aCBvdGhlciBjaGFyc2V0cyB0aGF0IGRvIG5vdCBjb250YWluXG4vLyB0aGUg4pyTIGNoYXJhY3Rlciwgc3VjaCBhcyB1cy1hc2NpaS5cbnZhciBpc29TZW50aW5lbCA9ICd1dGY4PSUyNiUyMzEwMDAzJTNCJzsgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCcmIzEwMDAzOycpXG5cbi8vIFRoZXNlIGFyZSB0aGUgcGVyY2VudC1lbmNvZGVkIHV0Zi04IG9jdGV0cyByZXByZXNlbnRpbmcgYSBjaGVja21hcmssIGluZGljYXRpbmcgdGhhdCB0aGUgcmVxdWVzdCBhY3R1YWxseSBpcyB1dGYtOCBlbmNvZGVkLlxudmFyIGNoYXJzZXRTZW50aW5lbCA9ICd1dGY4PSVFMiU5QyU5Myc7IC8vIGVuY29kZVVSSUNvbXBvbmVudCgn4pyTJylcblxudmFyIHBhcnNlVmFsdWVzID0gZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZ1ZhbHVlcyhzdHIsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0ge307XG4gICAgdmFyIGNsZWFuU3RyID0gb3B0aW9ucy5pZ25vcmVRdWVyeVByZWZpeCA/IHN0ci5yZXBsYWNlKC9eXFw/LywgJycpIDogc3RyO1xuICAgIHZhciBsaW1pdCA9IG9wdGlvbnMucGFyYW1ldGVyTGltaXQgPT09IEluZmluaXR5ID8gdW5kZWZpbmVkIDogb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdDtcbiAgICB2YXIgcGFydHMgPSBjbGVhblN0ci5zcGxpdChvcHRpb25zLmRlbGltaXRlciwgbGltaXQpO1xuICAgIHZhciBza2lwSW5kZXggPSAtMTsgLy8gS2VlcCB0cmFjayBvZiB3aGVyZSB0aGUgdXRmOCBzZW50aW5lbCB3YXMgZm91bmRcbiAgICB2YXIgaTtcblxuICAgIHZhciBjaGFyc2V0ID0gb3B0aW9ucy5jaGFyc2V0O1xuICAgIGlmIChvcHRpb25zLmNoYXJzZXRTZW50aW5lbCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0c1tpXS5pbmRleE9mKCd1dGY4PScpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnRzW2ldID09PSBjaGFyc2V0U2VudGluZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnNldCA9ICd1dGYtOCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0c1tpXSA9PT0gaXNvU2VudGluZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnNldCA9ICdpc28tODg1OS0xJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2tpcEluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBpID0gcGFydHMubGVuZ3RoOyAvLyBUaGUgZXNsaW50IHNldHRpbmdzIGRvIG5vdCBhbGxvdyBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoaSA9PT0gc2tpcEluZGV4KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2ldO1xuXG4gICAgICAgIHZhciBicmFja2V0RXF1YWxzUG9zID0gcGFydC5pbmRleE9mKCddPScpO1xuICAgICAgICB2YXIgcG9zID0gYnJhY2tldEVxdWFsc1BvcyA9PT0gLTEgPyBwYXJ0LmluZGV4T2YoJz0nKSA6IGJyYWNrZXRFcXVhbHNQb3MgKyAxO1xuXG4gICAgICAgIHZhciBrZXksIHZhbDtcbiAgICAgICAgaWYgKHBvcyA9PT0gLTEpIHtcbiAgICAgICAgICAgIGtleSA9IG9wdGlvbnMuZGVjb2RlcihwYXJ0LCBkZWZhdWx0cy5kZWNvZGVyLCBjaGFyc2V0KTtcbiAgICAgICAgICAgIHZhbCA9IG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nID8gbnVsbCA6ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAga2V5ID0gb3B0aW9ucy5kZWNvZGVyKHBhcnQuc2xpY2UoMCwgcG9zKSwgZGVmYXVsdHMuZGVjb2RlciwgY2hhcnNldCk7XG4gICAgICAgICAgICB2YWwgPSBvcHRpb25zLmRlY29kZXIocGFydC5zbGljZShwb3MgKyAxKSwgZGVmYXVsdHMuZGVjb2RlciwgY2hhcnNldCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsICYmIG9wdGlvbnMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzICYmIGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICAgICAgdmFsID0gaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzKHZhbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsICYmIG9wdGlvbnMuY29tbWEgJiYgdmFsLmluZGV4T2YoJywnKSA+IC0xKSB7XG4gICAgICAgICAgICB2YWwgPSB2YWwuc3BsaXQoJywnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXMuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdXRpbHMuY29tYmluZShvYmpba2V5XSwgdmFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBwYXJzZU9iamVjdCA9IGZ1bmN0aW9uIChjaGFpbiwgdmFsLCBvcHRpb25zKSB7XG4gICAgdmFyIGxlYWYgPSB2YWw7XG5cbiAgICBmb3IgKHZhciBpID0gY2hhaW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIG9iajtcbiAgICAgICAgdmFyIHJvb3QgPSBjaGFpbltpXTtcblxuICAgICAgICBpZiAocm9vdCA9PT0gJ1tdJyAmJiBvcHRpb25zLnBhcnNlQXJyYXlzKSB7XG4gICAgICAgICAgICBvYmogPSBbXS5jb25jYXQobGVhZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmogPSBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgICAgICAgIHZhciBjbGVhblJvb3QgPSByb290LmNoYXJBdCgwKSA9PT0gJ1snICYmIHJvb3QuY2hhckF0KHJvb3QubGVuZ3RoIC0gMSkgPT09ICddJyA/IHJvb3Quc2xpY2UoMSwgLTEpIDogcm9vdDtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KGNsZWFuUm9vdCwgMTApO1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnBhcnNlQXJyYXlzICYmIGNsZWFuUm9vdCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBvYmogPSB7IDA6IGxlYWYgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgIWlzTmFOKGluZGV4KVxuICAgICAgICAgICAgICAgICYmIHJvb3QgIT09IGNsZWFuUm9vdFxuICAgICAgICAgICAgICAgICYmIFN0cmluZyhpbmRleCkgPT09IGNsZWFuUm9vdFxuICAgICAgICAgICAgICAgICYmIGluZGV4ID49IDBcbiAgICAgICAgICAgICAgICAmJiAob3B0aW9ucy5wYXJzZUFycmF5cyAmJiBpbmRleCA8PSBvcHRpb25zLmFycmF5TGltaXQpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBvYmogPSBbXTtcbiAgICAgICAgICAgICAgICBvYmpbaW5kZXhdID0gbGVhZjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqW2NsZWFuUm9vdF0gPSBsZWFmO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGVhZiA9IG9iajtcbiAgICB9XG5cbiAgICByZXR1cm4gbGVhZjtcbn07XG5cbnZhciBwYXJzZUtleXMgPSBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nS2V5cyhnaXZlbktleSwgdmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKCFnaXZlbktleSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVHJhbnNmb3JtIGRvdCBub3RhdGlvbiB0byBicmFja2V0IG5vdGF0aW9uXG4gICAgdmFyIGtleSA9IG9wdGlvbnMuYWxsb3dEb3RzID8gZ2l2ZW5LZXkucmVwbGFjZSgvXFwuKFteLltdKykvZywgJ1skMV0nKSA6IGdpdmVuS2V5O1xuXG4gICAgLy8gVGhlIHJlZ2V4IGNodW5rc1xuXG4gICAgdmFyIGJyYWNrZXRzID0gLyhcXFtbXltcXF1dKl0pLztcbiAgICB2YXIgY2hpbGQgPSAvKFxcW1teW1xcXV0qXSkvZztcblxuICAgIC8vIEdldCB0aGUgcGFyZW50XG5cbiAgICB2YXIgc2VnbWVudCA9IGJyYWNrZXRzLmV4ZWMoa2V5KTtcbiAgICB2YXIgcGFyZW50ID0gc2VnbWVudCA/IGtleS5zbGljZSgwLCBzZWdtZW50LmluZGV4KSA6IGtleTtcblxuICAgIC8vIFN0YXNoIHRoZSBwYXJlbnQgaWYgaXQgZXhpc3RzXG5cbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlbid0IHVzaW5nIHBsYWluIG9iamVjdHMsIG9wdGlvbmFsbHkgcHJlZml4IGtleXMgdGhhdCB3b3VsZCBvdmVyd3JpdGUgb2JqZWN0IHByb3RvdHlwZSBwcm9wZXJ0aWVzXG4gICAgICAgIGlmICghb3B0aW9ucy5wbGFpbk9iamVjdHMgJiYgaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgcGFyZW50KSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGtleXMucHVzaChwYXJlbnQpO1xuICAgIH1cblxuICAgIC8vIExvb3AgdGhyb3VnaCBjaGlsZHJlbiBhcHBlbmRpbmcgdG8gdGhlIGFycmF5IHVudGlsIHdlIGhpdCBkZXB0aFxuXG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlICgoc2VnbWVudCA9IGNoaWxkLmV4ZWMoa2V5KSkgIT09IG51bGwgJiYgaSA8IG9wdGlvbnMuZGVwdGgpIHtcbiAgICAgICAgaSArPSAxO1xuICAgICAgICBpZiAoIW9wdGlvbnMucGxhaW5PYmplY3RzICYmIGhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHNlZ21lbnRbMV0uc2xpY2UoMSwgLTEpKSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrZXlzLnB1c2goc2VnbWVudFsxXSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUncyBhIHJlbWFpbmRlciwganVzdCBhZGQgd2hhdGV2ZXIgaXMgbGVmdFxuXG4gICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAga2V5cy5wdXNoKCdbJyArIGtleS5zbGljZShzZWdtZW50LmluZGV4KSArICddJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlT2JqZWN0KGtleXMsIHZhbCwgb3B0aW9ucyk7XG59O1xuXG52YXIgbm9ybWFsaXplUGFyc2VPcHRpb25zID0gZnVuY3Rpb24gbm9ybWFsaXplUGFyc2VPcHRpb25zKG9wdHMpIHtcbiAgICBpZiAoIW9wdHMpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRzO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmRlY29kZXIgIT09IG51bGwgJiYgb3B0cy5kZWNvZGVyICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9wdHMuZGVjb2RlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdEZWNvZGVyIGhhcyB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0cy5jaGFyc2V0ICE9PSAndW5kZWZpbmVkJyAmJiBvcHRzLmNoYXJzZXQgIT09ICd1dGYtOCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY2hhcnNldCBvcHRpb24gbXVzdCBiZSBlaXRoZXIgdXRmLTgsIGlzby04ODU5LTEsIG9yIHVuZGVmaW5lZCcpO1xuICAgIH1cbiAgICB2YXIgY2hhcnNldCA9IHR5cGVvZiBvcHRzLmNoYXJzZXQgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuY2hhcnNldCA6IG9wdHMuY2hhcnNldDtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGFsbG93RG90czogdHlwZW9mIG9wdHMuYWxsb3dEb3RzID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmFsbG93RG90cyA6ICEhb3B0cy5hbGxvd0RvdHMsXG4gICAgICAgIGFsbG93UHJvdG90eXBlczogdHlwZW9mIG9wdHMuYWxsb3dQcm90b3R5cGVzID09PSAnYm9vbGVhbicgPyBvcHRzLmFsbG93UHJvdG90eXBlcyA6IGRlZmF1bHRzLmFsbG93UHJvdG90eXBlcyxcbiAgICAgICAgYXJyYXlMaW1pdDogdHlwZW9mIG9wdHMuYXJyYXlMaW1pdCA9PT0gJ251bWJlcicgPyBvcHRzLmFycmF5TGltaXQgOiBkZWZhdWx0cy5hcnJheUxpbWl0LFxuICAgICAgICBjaGFyc2V0OiBjaGFyc2V0LFxuICAgICAgICBjaGFyc2V0U2VudGluZWw6IHR5cGVvZiBvcHRzLmNoYXJzZXRTZW50aW5lbCA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5jaGFyc2V0U2VudGluZWwgOiBkZWZhdWx0cy5jaGFyc2V0U2VudGluZWwsXG4gICAgICAgIGNvbW1hOiB0eXBlb2Ygb3B0cy5jb21tYSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5jb21tYSA6IGRlZmF1bHRzLmNvbW1hLFxuICAgICAgICBkZWNvZGVyOiB0eXBlb2Ygb3B0cy5kZWNvZGVyID09PSAnZnVuY3Rpb24nID8gb3B0cy5kZWNvZGVyIDogZGVmYXVsdHMuZGVjb2RlcixcbiAgICAgICAgZGVsaW1pdGVyOiB0eXBlb2Ygb3B0cy5kZWxpbWl0ZXIgPT09ICdzdHJpbmcnIHx8IHV0aWxzLmlzUmVnRXhwKG9wdHMuZGVsaW1pdGVyKSA/IG9wdHMuZGVsaW1pdGVyIDogZGVmYXVsdHMuZGVsaW1pdGVyLFxuICAgICAgICBkZXB0aDogdHlwZW9mIG9wdHMuZGVwdGggPT09ICdudW1iZXInID8gb3B0cy5kZXB0aCA6IGRlZmF1bHRzLmRlcHRoLFxuICAgICAgICBpZ25vcmVRdWVyeVByZWZpeDogb3B0cy5pZ25vcmVRdWVyeVByZWZpeCA9PT0gdHJ1ZSxcbiAgICAgICAgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzOiB0eXBlb2Ygb3B0cy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMgPT09ICdib29sZWFuJyA/IG9wdHMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzIDogZGVmYXVsdHMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzLFxuICAgICAgICBwYXJhbWV0ZXJMaW1pdDogdHlwZW9mIG9wdHMucGFyYW1ldGVyTGltaXQgPT09ICdudW1iZXInID8gb3B0cy5wYXJhbWV0ZXJMaW1pdCA6IGRlZmF1bHRzLnBhcmFtZXRlckxpbWl0LFxuICAgICAgICBwYXJzZUFycmF5czogb3B0cy5wYXJzZUFycmF5cyAhPT0gZmFsc2UsXG4gICAgICAgIHBsYWluT2JqZWN0czogdHlwZW9mIG9wdHMucGxhaW5PYmplY3RzID09PSAnYm9vbGVhbicgPyBvcHRzLnBsYWluT2JqZWN0cyA6IGRlZmF1bHRzLnBsYWluT2JqZWN0cyxcbiAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nOiB0eXBlb2Ygb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgPT09ICdib29sZWFuJyA/IG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nIDogZGVmYXVsdHMuc3RyaWN0TnVsbEhhbmRsaW5nXG4gICAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgb3B0cykge1xuICAgIHZhciBvcHRpb25zID0gbm9ybWFsaXplUGFyc2VPcHRpb25zKG9wdHMpO1xuXG4gICAgaWYgKHN0ciA9PT0gJycgfHwgc3RyID09PSBudWxsIHx8IHR5cGVvZiBzdHIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICB9XG5cbiAgICB2YXIgdGVtcE9iaiA9IHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gcGFyc2VWYWx1ZXMoc3RyLCBvcHRpb25zKSA6IHN0cjtcbiAgICB2YXIgb2JqID0gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIGtleXMgYW5kIHNldHVwIHRoZSBuZXcgb2JqZWN0XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRlbXBPYmopO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgdmFyIG5ld09iaiA9IHBhcnNlS2V5cyhrZXksIHRlbXBPYmpba2V5XSwgb3B0aW9ucyk7XG4gICAgICAgIG9iaiA9IHV0aWxzLm1lcmdlKG9iaiwgbmV3T2JqLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXRpbHMuY29tcGFjdChvYmopO1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8vIElmIG9iai5oYXNPd25Qcm9wZXJ0eSBoYXMgYmVlbiBvdmVycmlkZGVuLCB0aGVuIGNhbGxpbmdcbi8vIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSB3aWxsIGJyZWFrLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzE3MDdcbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocXMsIHNlcCwgZXEsIG9wdGlvbnMpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIHZhciBvYmogPSB7fTtcblxuICBpZiAodHlwZW9mIHFzICE9PSAnc3RyaW5nJyB8fCBxcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IC9cXCsvZztcbiAgcXMgPSBxcy5zcGxpdChzZXApO1xuXG4gIHZhciBtYXhLZXlzID0gMTAwMDtcbiAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMubWF4S2V5cyA9PT0gJ251bWJlcicpIHtcbiAgICBtYXhLZXlzID0gb3B0aW9ucy5tYXhLZXlzO1xuICB9XG5cbiAgdmFyIGxlbiA9IHFzLmxlbmd0aDtcbiAgLy8gbWF4S2V5cyA8PSAwIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIG5vdCBsaW1pdCBrZXlzIGNvdW50XG4gIGlmIChtYXhLZXlzID4gMCAmJiBsZW4gPiBtYXhLZXlzKSB7XG4gICAgbGVuID0gbWF4S2V5cztcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgeCA9IHFzW2ldLnJlcGxhY2UocmVnZXhwLCAnJTIwJyksXG4gICAgICAgIGlkeCA9IHguaW5kZXhPZihlcSksXG4gICAgICAgIGtzdHIsIHZzdHIsIGssIHY7XG5cbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgIGtzdHIgPSB4LnN1YnN0cigwLCBpZHgpO1xuICAgICAgdnN0ciA9IHguc3Vic3RyKGlkeCArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrc3RyID0geDtcbiAgICAgIHZzdHIgPSAnJztcbiAgICB9XG5cbiAgICBrID0gZGVjb2RlVVJJQ29tcG9uZW50KGtzdHIpO1xuICAgIHYgPSBkZWNvZGVVUklDb21wb25lbnQodnN0cik7XG5cbiAgICBpZiAoIWhhc093blByb3BlcnR5KG9iaiwgaykpIHtcbiAgICAgIG9ialtrXSA9IHY7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9ialtrXSkpIHtcbiAgICAgIG9ialtrXS5wdXNoKHYpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmpba10gPSBbb2JqW2tdLCB2XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uICh4cykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHhzKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyaW5naWZ5UHJpbWl0aXZlID0gZnVuY3Rpb24odikge1xuICBzd2l0Y2ggKHR5cGVvZiB2KSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiB2O1xuXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gdiA/ICd0cnVlJyA6ICdmYWxzZSc7XG5cbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgcmV0dXJuIGlzRmluaXRlKHYpID8gdiA6ICcnO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAnJztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmosIHNlcCwgZXEsIG5hbWUpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIGlmIChvYmogPT09IG51bGwpIHtcbiAgICBvYmogPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbWFwKG9iamVjdEtleXMob2JqKSwgZnVuY3Rpb24oaykge1xuICAgICAgdmFyIGtzID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShrKSkgKyBlcTtcbiAgICAgIGlmIChpc0FycmF5KG9ialtrXSkpIHtcbiAgICAgICAgcmV0dXJuIG1hcChvYmpba10sIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKHYpKTtcbiAgICAgICAgfSkuam9pbihzZXApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmpba10pKTtcbiAgICAgIH1cbiAgICB9KS5qb2luKHNlcCk7XG5cbiAgfVxuXG4gIGlmICghbmFtZSkgcmV0dXJuICcnO1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShuYW1lKSkgKyBlcSArXG4gICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9iaikpO1xufTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uICh4cykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHhzKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbmZ1bmN0aW9uIG1hcCAoeHMsIGYpIHtcbiAgaWYgKHhzLm1hcCkgcmV0dXJuIHhzLm1hcChmKTtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzLnB1c2goZih4c1tpXSwgaSkpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgcmVzLnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcbiIsIi8qIVxuICogbWVyZ2UtZGVzY3JpcHRvcnNcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogQ29weXJpZ2h0KGMpIDIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gbWVyZ2VcblxuLyoqXG4gKiBNb2R1bGUgdmFyaWFibGVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG5cbi8qKlxuICogTWVyZ2UgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3JzIG9mIGBzcmNgIGludG8gYGRlc3RgXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGRlc3QgT2JqZWN0IHRvIGFkZCBkZXNjcmlwdG9ycyB0b1xuICogQHBhcmFtIHtvYmplY3R9IHNyYyBPYmplY3QgdG8gY2xvbmUgZGVzY3JpcHRvcnMgZnJvbVxuICogQHBhcmFtIHtib29sZWFufSBbcmVkZWZpbmU9dHJ1ZV0gUmVkZWZpbmUgYGRlc3RgIHByb3BlcnRpZXMgd2l0aCBgc3JjYCBwcm9wZXJ0aWVzXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBSZWZlcmVuY2UgdG8gZGVzdFxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIG1lcmdlKGRlc3QsIHNyYywgcmVkZWZpbmUpIHtcbiAgaWYgKCFkZXN0KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgZGVzdCBpcyByZXF1aXJlZCcpXG4gIH1cblxuICBpZiAoIXNyYykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHNyYyBpcyByZXF1aXJlZCcpXG4gIH1cblxuICBpZiAocmVkZWZpbmUgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIERlZmF1bHQgdG8gdHJ1ZVxuICAgIHJlZGVmaW5lID0gdHJ1ZVxuICB9XG5cbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc3JjKS5mb3JFYWNoKGZ1bmN0aW9uIGZvckVhY2hPd25Qcm9wZXJ0eU5hbWUobmFtZSkge1xuICAgIGlmICghcmVkZWZpbmUgJiYgaGFzT3duUHJvcGVydHkuY2FsbChkZXN0LCBuYW1lKSkge1xuICAgICAgLy8gU2tpcCBkZXNyaXB0b3JcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIENvcHkgZGVzY3JpcHRvclxuICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzcmMsIG5hbWUpXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlc3QsIG5hbWUsIGRlc2NyaXB0b3IpXG4gIH0pXG5cbiAgcmV0dXJuIGRlc3Rcbn1cbiIsIi8qIVxuICogZXhwcmVzc1xuICogQ29weXJpZ2h0KGMpIDIwMDktMjAxMyBUSiBIb2xvd2F5Y2h1a1xuICogQ29weXJpZ2h0KGMpIDIwMTMgUm9tYW4gU2h0eWxtYW5cbiAqIENvcHlyaWdodChjKSAyMDE0LTIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgZmluYWxoYW5kbGVyID0gcmVxdWlyZSgnZmluYWxoYW5kbGVyJyk7XG52YXIgUm91dGVyID0gcmVxdWlyZSgnLi9yb3V0ZXInKTtcbnZhciBtZXRob2RzID0gcmVxdWlyZSgnbWV0aG9kcycpO1xudmFyIG1pZGRsZXdhcmUgPSByZXF1aXJlKCcuL21pZGRsZXdhcmUvaW5pdCcpO1xudmFyIHF1ZXJ5ID0gcmVxdWlyZSgnLi9taWRkbGV3YXJlL3F1ZXJ5Jyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdleHByZXNzOmFwcGxpY2F0aW9uJyk7XG52YXIgVmlldyA9IHJlcXVpcmUoJy4vdmlldycpO1xudmFyIGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG52YXIgY29tcGlsZUVUYWcgPSByZXF1aXJlKCcuL3V0aWxzJykuY29tcGlsZUVUYWc7XG52YXIgY29tcGlsZVF1ZXJ5UGFyc2VyID0gcmVxdWlyZSgnLi91dGlscycpLmNvbXBpbGVRdWVyeVBhcnNlcjtcbnZhciBjb21waWxlVHJ1c3QgPSByZXF1aXJlKCcuL3V0aWxzJykuY29tcGlsZVRydXN0O1xudmFyIGRlcHJlY2F0ZSA9IHJlcXVpcmUoJ2RlcGQnKSgnZXhwcmVzcycpO1xudmFyIGZsYXR0ZW4gPSByZXF1aXJlKCdhcnJheS1mbGF0dGVuJyk7XG52YXIgbWVyZ2UgPSByZXF1aXJlKCd1dGlscy1tZXJnZScpO1xudmFyIHJlc29sdmUgPSByZXF1aXJlKCdwYXRoJykucmVzb2x2ZTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ3NldHByb3RvdHlwZW9mJylcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuLyoqXG4gKiBBcHBsaWNhdGlvbiBwcm90b3R5cGUuXG4gKi9cblxudmFyIGFwcCA9IGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vKipcbiAqIFZhcmlhYmxlIGZvciB0cnVzdCBwcm94eSBpbmhlcml0YW5jZSBiYWNrLWNvbXBhdFxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgdHJ1c3RQcm94eURlZmF1bHRTeW1ib2wgPSAnQEBzeW1ib2w6dHJ1c3RfcHJveHlfZGVmYXVsdCc7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgc2VydmVyLlxuICpcbiAqICAgLSBzZXR1cCBkZWZhdWx0IGNvbmZpZ3VyYXRpb25cbiAqICAgLSBzZXR1cCBkZWZhdWx0IG1pZGRsZXdhcmVcbiAqICAgLSBzZXR1cCByb3V0ZSByZWZsZWN0aW9uIG1ldGhvZHNcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmFwcC5pbml0ID0gZnVuY3Rpb24gaW5pdCgpIHtcbiAgdGhpcy5jYWNoZSA9IHt9O1xuICB0aGlzLmVuZ2luZXMgPSB7fTtcbiAgdGhpcy5zZXR0aW5ncyA9IHt9O1xuXG4gIHRoaXMuZGVmYXVsdENvbmZpZ3VyYXRpb24oKTtcbn07XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBhcHBsaWNhdGlvbiBjb25maWd1cmF0aW9uLlxuICogQHByaXZhdGVcbiAqL1xuXG5hcHAuZGVmYXVsdENvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbiBkZWZhdWx0Q29uZmlndXJhdGlvbigpIHtcbiAgdmFyIGVudiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WIHx8ICdkZXZlbG9wbWVudCc7XG5cbiAgLy8gZGVmYXVsdCBzZXR0aW5nc1xuICB0aGlzLmVuYWJsZSgneC1wb3dlcmVkLWJ5Jyk7XG4gIHRoaXMuc2V0KCdldGFnJywgJ3dlYWsnKTtcbiAgdGhpcy5zZXQoJ2VudicsIGVudik7XG4gIHRoaXMuc2V0KCdxdWVyeSBwYXJzZXInLCAnZXh0ZW5kZWQnKTtcbiAgdGhpcy5zZXQoJ3N1YmRvbWFpbiBvZmZzZXQnLCAyKTtcbiAgdGhpcy5zZXQoJ3RydXN0IHByb3h5JywgZmFsc2UpO1xuXG4gIC8vIHRydXN0IHByb3h5IGluaGVyaXQgYmFjay1jb21wYXRcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuc2V0dGluZ3MsIHRydXN0UHJveHlEZWZhdWx0U3ltYm9sLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIGRlYnVnKCdib290aW5nIGluICVzIG1vZGUnLCBlbnYpO1xuXG4gIHRoaXMub24oJ21vdW50JywgZnVuY3Rpb24gb25tb3VudChwYXJlbnQpIHtcbiAgICAvLyBpbmhlcml0IHRydXN0IHByb3h5XG4gICAgaWYgKHRoaXMuc2V0dGluZ3NbdHJ1c3RQcm94eURlZmF1bHRTeW1ib2xdID09PSB0cnVlXG4gICAgICAmJiB0eXBlb2YgcGFyZW50LnNldHRpbmdzWyd0cnVzdCBwcm94eSBmbiddID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBkZWxldGUgdGhpcy5zZXR0aW5nc1sndHJ1c3QgcHJveHknXTtcbiAgICAgIGRlbGV0ZSB0aGlzLnNldHRpbmdzWyd0cnVzdCBwcm94eSBmbiddO1xuICAgIH1cblxuICAgIC8vIGluaGVyaXQgcHJvdG9zXG4gICAgc2V0UHJvdG90eXBlT2YodGhpcy5yZXF1ZXN0LCBwYXJlbnQucmVxdWVzdClcbiAgICBzZXRQcm90b3R5cGVPZih0aGlzLnJlc3BvbnNlLCBwYXJlbnQucmVzcG9uc2UpXG4gICAgc2V0UHJvdG90eXBlT2YodGhpcy5lbmdpbmVzLCBwYXJlbnQuZW5naW5lcylcbiAgICBzZXRQcm90b3R5cGVPZih0aGlzLnNldHRpbmdzLCBwYXJlbnQuc2V0dGluZ3MpXG4gIH0pO1xuXG4gIC8vIHNldHVwIGxvY2Fsc1xuICB0aGlzLmxvY2FscyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy8gdG9wLW1vc3QgYXBwIGlzIG1vdW50ZWQgYXQgL1xuICB0aGlzLm1vdW50cGF0aCA9ICcvJztcblxuICAvLyBkZWZhdWx0IGxvY2Fsc1xuICB0aGlzLmxvY2Fscy5zZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3M7XG5cbiAgLy8gZGVmYXVsdCBjb25maWd1cmF0aW9uXG4gIHRoaXMuc2V0KCd2aWV3JywgVmlldyk7XG4gIHRoaXMuc2V0KCd2aWV3cycsIHJlc29sdmUoJ3ZpZXdzJykpO1xuICB0aGlzLnNldCgnanNvbnAgY2FsbGJhY2sgbmFtZScsICdjYWxsYmFjaycpO1xuXG4gIGlmIChlbnYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHRoaXMuZW5hYmxlKCd2aWV3IGNhY2hlJyk7XG4gIH1cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3JvdXRlcicsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdcXCdhcHAucm91dGVyXFwnIGlzIGRlcHJlY2F0ZWQhXFxuUGxlYXNlIHNlZSB0aGUgMy54IHRvIDQueCBtaWdyYXRpb24gZ3VpZGUgZm9yIGRldGFpbHMgb24gaG93IHRvIHVwZGF0ZSB5b3VyIGFwcC4nKTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBsYXppbHkgYWRkcyB0aGUgYmFzZSByb3V0ZXIgaWYgaXQgaGFzIG5vdCB5ZXQgYmVlbiBhZGRlZC5cbiAqXG4gKiBXZSBjYW5ub3QgYWRkIHRoZSBiYXNlIHJvdXRlciBpbiB0aGUgZGVmYXVsdENvbmZpZ3VyYXRpb24gYmVjYXVzZVxuICogaXQgcmVhZHMgYXBwIHNldHRpbmdzIHdoaWNoIG1pZ2h0IGJlIHNldCBhZnRlciB0aGF0IGhhcyBydW4uXG4gKlxuICogQHByaXZhdGVcbiAqL1xuYXBwLmxhenlyb3V0ZXIgPSBmdW5jdGlvbiBsYXp5cm91dGVyKCkge1xuICBpZiAoIXRoaXMuX3JvdXRlcikge1xuICAgIHRoaXMuX3JvdXRlciA9IG5ldyBSb3V0ZXIoe1xuICAgICAgY2FzZVNlbnNpdGl2ZTogdGhpcy5lbmFibGVkKCdjYXNlIHNlbnNpdGl2ZSByb3V0aW5nJyksXG4gICAgICBzdHJpY3Q6IHRoaXMuZW5hYmxlZCgnc3RyaWN0IHJvdXRpbmcnKVxuICAgIH0pO1xuXG4gICAgdGhpcy5fcm91dGVyLnVzZShxdWVyeSh0aGlzLmdldCgncXVlcnkgcGFyc2VyIGZuJykpKTtcbiAgICB0aGlzLl9yb3V0ZXIudXNlKG1pZGRsZXdhcmUuaW5pdCh0aGlzKSk7XG4gIH1cbn07XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXEsIHJlcyBwYWlyIGludG8gdGhlIGFwcGxpY2F0aW9uLiBTdGFydHMgcGlwZWxpbmUgcHJvY2Vzc2luZy5cbiAqXG4gKiBJZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZCwgdGhlbiBkZWZhdWx0IGVycm9yIGhhbmRsZXJzIHdpbGwgcmVzcG9uZFxuICogaW4gdGhlIGV2ZW50IG9mIGFuIGVycm9yIGJ1YmJsaW5nIHRocm91Z2ggdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxuYXBwLmhhbmRsZSA9IGZ1bmN0aW9uIGhhbmRsZShyZXEsIHJlcywgY2FsbGJhY2spIHtcbiAgdmFyIHJvdXRlciA9IHRoaXMuX3JvdXRlcjtcblxuICAvLyBmaW5hbCBoYW5kbGVyXG4gIHZhciBkb25lID0gY2FsbGJhY2sgfHwgZmluYWxoYW5kbGVyKHJlcSwgcmVzLCB7XG4gICAgZW52OiB0aGlzLmdldCgnZW52JyksXG4gICAgb25lcnJvcjogbG9nZXJyb3IuYmluZCh0aGlzKVxuICB9KTtcblxuICAvLyBubyByb3V0ZXNcbiAgaWYgKCFyb3V0ZXIpIHtcbiAgICBkZWJ1Zygnbm8gcm91dGVzIGRlZmluZWQgb24gYXBwJyk7XG4gICAgZG9uZSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJvdXRlci5oYW5kbGUocmVxLCByZXMsIGRvbmUpO1xufTtcblxuLyoqXG4gKiBQcm94eSBgUm91dGVyI3VzZSgpYCB0byBhZGQgbWlkZGxld2FyZSB0byB0aGUgYXBwIHJvdXRlci5cbiAqIFNlZSBSb3V0ZXIjdXNlKCkgZG9jdW1lbnRhdGlvbiBmb3IgZGV0YWlscy5cbiAqXG4gKiBJZiB0aGUgX2ZuXyBwYXJhbWV0ZXIgaXMgYW4gZXhwcmVzcyBhcHAsIHRoZW4gaXQgd2lsbCBiZVxuICogbW91bnRlZCBhdCB0aGUgX3JvdXRlXyBzcGVjaWZpZWQuXG4gKlxuICogQHB1YmxpY1xuICovXG5cbmFwcC51c2UgPSBmdW5jdGlvbiB1c2UoZm4pIHtcbiAgdmFyIG9mZnNldCA9IDA7XG4gIHZhciBwYXRoID0gJy8nO1xuXG4gIC8vIGRlZmF1bHQgcGF0aCB0byAnLydcbiAgLy8gZGlzYW1iaWd1YXRlIGFwcC51c2UoW2ZuXSlcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBhcmcgPSBmbjtcblxuICAgIHdoaWxlIChBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnLmxlbmd0aCAhPT0gMCkge1xuICAgICAgYXJnID0gYXJnWzBdO1xuICAgIH1cblxuICAgIC8vIGZpcnN0IGFyZyBpcyB0aGUgcGF0aFxuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvZmZzZXQgPSAxO1xuICAgICAgcGF0aCA9IGZuO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmbnMgPSBmbGF0dGVuKHNsaWNlLmNhbGwoYXJndW1lbnRzLCBvZmZzZXQpKTtcblxuICBpZiAoZm5zLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FwcC51c2UoKSByZXF1aXJlcyBhIG1pZGRsZXdhcmUgZnVuY3Rpb24nKVxuICB9XG5cbiAgLy8gc2V0dXAgcm91dGVyXG4gIHRoaXMubGF6eXJvdXRlcigpO1xuICB2YXIgcm91dGVyID0gdGhpcy5fcm91dGVyO1xuXG4gIGZucy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgIC8vIG5vbi1leHByZXNzIGFwcFxuICAgIGlmICghZm4gfHwgIWZuLmhhbmRsZSB8fCAhZm4uc2V0KSB7XG4gICAgICByZXR1cm4gcm91dGVyLnVzZShwYXRoLCBmbik7XG4gICAgfVxuXG4gICAgZGVidWcoJy51c2UgYXBwIHVuZGVyICVzJywgcGF0aCk7XG4gICAgZm4ubW91bnRwYXRoID0gcGF0aDtcbiAgICBmbi5wYXJlbnQgPSB0aGlzO1xuXG4gICAgLy8gcmVzdG9yZSAuYXBwIHByb3BlcnR5IG9uIHJlcSBhbmQgcmVzXG4gICAgcm91dGVyLnVzZShwYXRoLCBmdW5jdGlvbiBtb3VudGVkX2FwcChyZXEsIHJlcywgbmV4dCkge1xuICAgICAgdmFyIG9yaWcgPSByZXEuYXBwO1xuICAgICAgZm4uaGFuZGxlKHJlcSwgcmVzLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHNldFByb3RvdHlwZU9mKHJlcSwgb3JpZy5yZXF1ZXN0KVxuICAgICAgICBzZXRQcm90b3R5cGVPZihyZXMsIG9yaWcucmVzcG9uc2UpXG4gICAgICAgIG5leHQoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gbW91bnRlZCBhbiBhcHBcbiAgICBmbi5lbWl0KCdtb3VudCcsIHRoaXMpO1xuICB9LCB0aGlzKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUHJveHkgdG8gdGhlIGFwcCBgUm91dGVyI3JvdXRlKClgXG4gKiBSZXR1cm5zIGEgbmV3IGBSb3V0ZWAgaW5zdGFuY2UgZm9yIHRoZSBfcGF0aF8uXG4gKlxuICogUm91dGVzIGFyZSBpc29sYXRlZCBtaWRkbGV3YXJlIHN0YWNrcyBmb3Igc3BlY2lmaWMgcGF0aHMuXG4gKiBTZWUgdGhlIFJvdXRlIGFwaSBkb2NzIGZvciBkZXRhaWxzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuXG5hcHAucm91dGUgPSBmdW5jdGlvbiByb3V0ZShwYXRoKSB7XG4gIHRoaXMubGF6eXJvdXRlcigpO1xuICByZXR1cm4gdGhpcy5fcm91dGVyLnJvdXRlKHBhdGgpO1xufTtcblxuLyoqXG4gKiBSZWdpc3RlciB0aGUgZ2l2ZW4gdGVtcGxhdGUgZW5naW5lIGNhbGxiYWNrIGBmbmBcbiAqIGFzIGBleHRgLlxuICpcbiAqIEJ5IGRlZmF1bHQgd2lsbCBgcmVxdWlyZSgpYCB0aGUgZW5naW5lIGJhc2VkIG9uIHRoZVxuICogZmlsZSBleHRlbnNpb24uIEZvciBleGFtcGxlIGlmIHlvdSB0cnkgdG8gcmVuZGVyXG4gKiBhIFwiZm9vLmVqc1wiIGZpbGUgRXhwcmVzcyB3aWxsIGludm9rZSB0aGUgZm9sbG93aW5nIGludGVybmFsbHk6XG4gKlxuICogICAgIGFwcC5lbmdpbmUoJ2VqcycsIHJlcXVpcmUoJ2VqcycpLl9fZXhwcmVzcyk7XG4gKlxuICogRm9yIGVuZ2luZXMgdGhhdCBkbyBub3QgcHJvdmlkZSBgLl9fZXhwcmVzc2Agb3V0IG9mIHRoZSBib3gsXG4gKiBvciBpZiB5b3Ugd2lzaCB0byBcIm1hcFwiIGEgZGlmZmVyZW50IGV4dGVuc2lvbiB0byB0aGUgdGVtcGxhdGUgZW5naW5lXG4gKiB5b3UgbWF5IHVzZSB0aGlzIG1ldGhvZC4gRm9yIGV4YW1wbGUgbWFwcGluZyB0aGUgRUpTIHRlbXBsYXRlIGVuZ2luZSB0b1xuICogXCIuaHRtbFwiIGZpbGVzOlxuICpcbiAqICAgICBhcHAuZW5naW5lKCdodG1sJywgcmVxdWlyZSgnZWpzJykucmVuZGVyRmlsZSk7XG4gKlxuICogSW4gdGhpcyBjYXNlIEVKUyBwcm92aWRlcyBhIGAucmVuZGVyRmlsZSgpYCBtZXRob2Qgd2l0aFxuICogdGhlIHNhbWUgc2lnbmF0dXJlIHRoYXQgRXhwcmVzcyBleHBlY3RzOiBgKHBhdGgsIG9wdGlvbnMsIGNhbGxiYWNrKWAsXG4gKiB0aG91Z2ggbm90ZSB0aGF0IGl0IGFsaWFzZXMgdGhpcyBtZXRob2QgYXMgYGVqcy5fX2V4cHJlc3NgIGludGVybmFsbHlcbiAqIHNvIGlmIHlvdSdyZSB1c2luZyBcIi5lanNcIiBleHRlbnNpb25zIHlvdSBkb250IG5lZWQgdG8gZG8gYW55dGhpbmcuXG4gKlxuICogU29tZSB0ZW1wbGF0ZSBlbmdpbmVzIGRvIG5vdCBmb2xsb3cgdGhpcyBjb252ZW50aW9uLCB0aGVcbiAqIFtDb25zb2xpZGF0ZS5qc10oaHR0cHM6Ly9naXRodWIuY29tL3RqL2NvbnNvbGlkYXRlLmpzKVxuICogbGlicmFyeSB3YXMgY3JlYXRlZCB0byBtYXAgYWxsIG9mIG5vZGUncyBwb3B1bGFyIHRlbXBsYXRlXG4gKiBlbmdpbmVzIHRvIGZvbGxvdyB0aGlzIGNvbnZlbnRpb24sIHRodXMgYWxsb3dpbmcgdGhlbSB0b1xuICogd29yayBzZWFtbGVzc2x5IHdpdGhpbiBFeHByZXNzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBleHRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHthcHB9IGZvciBjaGFpbmluZ1xuICogQHB1YmxpY1xuICovXG5cbmFwcC5lbmdpbmUgPSBmdW5jdGlvbiBlbmdpbmUoZXh0LCBmbikge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYWxsYmFjayBmdW5jdGlvbiByZXF1aXJlZCcpO1xuICB9XG5cbiAgLy8gZ2V0IGZpbGUgZXh0ZW5zaW9uXG4gIHZhciBleHRlbnNpb24gPSBleHRbMF0gIT09ICcuJ1xuICAgID8gJy4nICsgZXh0XG4gICAgOiBleHQ7XG5cbiAgLy8gc3RvcmUgZW5naW5lXG4gIHRoaXMuZW5naW5lc1tleHRlbnNpb25dID0gZm47XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFByb3h5IHRvIGBSb3V0ZXIjcGFyYW0oKWAgd2l0aCBvbmUgYWRkZWQgYXBpIGZlYXR1cmUuIFRoZSBfbmFtZV8gcGFyYW1ldGVyXG4gKiBjYW4gYmUgYW4gYXJyYXkgb2YgbmFtZXMuXG4gKlxuICogU2VlIHRoZSBSb3V0ZXIjcGFyYW0oKSBkb2NzIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHthcHB9IGZvciBjaGFpbmluZ1xuICogQHB1YmxpY1xuICovXG5cbmFwcC5wYXJhbSA9IGZ1bmN0aW9uIHBhcmFtKG5hbWUsIGZuKSB7XG4gIHRoaXMubGF6eXJvdXRlcigpO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG5hbWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnBhcmFtKG5hbWVbaV0sIGZuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRoaXMuX3JvdXRlci5wYXJhbShuYW1lLCBmbik7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFzc2lnbiBgc2V0dGluZ2AgdG8gYHZhbGAsIG9yIHJldHVybiBgc2V0dGluZ2AncyB2YWx1ZS5cbiAqXG4gKiAgICBhcHAuc2V0KCdmb28nLCAnYmFyJyk7XG4gKiAgICBhcHAuc2V0KCdmb28nKTtcbiAqICAgIC8vID0+IFwiYmFyXCJcbiAqXG4gKiBNb3VudGVkIHNlcnZlcnMgaW5oZXJpdCB0aGVpciBwYXJlbnQgc2VydmVyJ3Mgc2V0dGluZ3MuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHNldHRpbmdcbiAqIEBwYXJhbSB7Kn0gW3ZhbF1cbiAqIEByZXR1cm4ge1NlcnZlcn0gZm9yIGNoYWluaW5nXG4gKiBAcHVibGljXG4gKi9cblxuYXBwLnNldCA9IGZ1bmN0aW9uIHNldChzZXR0aW5nLCB2YWwpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBhcHAuZ2V0KHNldHRpbmcpXG4gICAgcmV0dXJuIHRoaXMuc2V0dGluZ3Nbc2V0dGluZ107XG4gIH1cblxuICBkZWJ1Zygnc2V0IFwiJXNcIiB0byAlbycsIHNldHRpbmcsIHZhbCk7XG5cbiAgLy8gc2V0IHZhbHVlXG4gIHRoaXMuc2V0dGluZ3Nbc2V0dGluZ10gPSB2YWw7XG5cbiAgLy8gdHJpZ2dlciBtYXRjaGVkIHNldHRpbmdzXG4gIHN3aXRjaCAoc2V0dGluZykge1xuICAgIGNhc2UgJ2V0YWcnOlxuICAgICAgdGhpcy5zZXQoJ2V0YWcgZm4nLCBjb21waWxlRVRhZyh2YWwpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3F1ZXJ5IHBhcnNlcic6XG4gICAgICB0aGlzLnNldCgncXVlcnkgcGFyc2VyIGZuJywgY29tcGlsZVF1ZXJ5UGFyc2VyKHZhbCkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndHJ1c3QgcHJveHknOlxuICAgICAgdGhpcy5zZXQoJ3RydXN0IHByb3h5IGZuJywgY29tcGlsZVRydXN0KHZhbCkpO1xuXG4gICAgICAvLyB0cnVzdCBwcm94eSBpbmhlcml0IGJhY2stY29tcGF0XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5zZXR0aW5ncywgdHJ1c3RQcm94eURlZmF1bHRTeW1ib2wsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGFwcCdzIGFic29sdXRlIHBhdGhuYW1lXG4gKiBiYXNlZCBvbiB0aGUgcGFyZW50KHMpIHRoYXQgaGF2ZVxuICogbW91bnRlZCBpdC5cbiAqXG4gKiBGb3IgZXhhbXBsZSBpZiB0aGUgYXBwbGljYXRpb24gd2FzXG4gKiBtb3VudGVkIGFzIFwiL2FkbWluXCIsIHdoaWNoIGl0c2VsZlxuICogd2FzIG1vdW50ZWQgYXMgXCIvYmxvZ1wiIHRoZW4gdGhlXG4gKiByZXR1cm4gdmFsdWUgd291bGQgYmUgXCIvYmxvZy9hZG1pblwiLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuYXBwLnBhdGggPSBmdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnRcbiAgICA/IHRoaXMucGFyZW50LnBhdGgoKSArIHRoaXMubW91bnRwYXRoXG4gICAgOiAnJztcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYHNldHRpbmdgIGlzIGVuYWJsZWQgKHRydXRoeSkuXG4gKlxuICogICAgYXBwLmVuYWJsZWQoJ2ZvbycpXG4gKiAgICAvLyA9PiBmYWxzZVxuICpcbiAqICAgIGFwcC5lbmFibGUoJ2ZvbycpXG4gKiAgICBhcHAuZW5hYmxlZCgnZm9vJylcbiAqICAgIC8vID0+IHRydWVcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc2V0dGluZ1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBwdWJsaWNcbiAqL1xuXG5hcHAuZW5hYmxlZCA9IGZ1bmN0aW9uIGVuYWJsZWQoc2V0dGluZykge1xuICByZXR1cm4gQm9vbGVhbih0aGlzLnNldChzZXR0aW5nKSk7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGBzZXR0aW5nYCBpcyBkaXNhYmxlZC5cbiAqXG4gKiAgICBhcHAuZGlzYWJsZWQoJ2ZvbycpXG4gKiAgICAvLyA9PiB0cnVlXG4gKlxuICogICAgYXBwLmVuYWJsZSgnZm9vJylcbiAqICAgIGFwcC5kaXNhYmxlZCgnZm9vJylcbiAqICAgIC8vID0+IGZhbHNlXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHNldHRpbmdcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAcHVibGljXG4gKi9cblxuYXBwLmRpc2FibGVkID0gZnVuY3Rpb24gZGlzYWJsZWQoc2V0dGluZykge1xuICByZXR1cm4gIXRoaXMuc2V0KHNldHRpbmcpO1xufTtcblxuLyoqXG4gKiBFbmFibGUgYHNldHRpbmdgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZXR0aW5nXG4gKiBAcmV0dXJuIHthcHB9IGZvciBjaGFpbmluZ1xuICogQHB1YmxpY1xuICovXG5cbmFwcC5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoc2V0dGluZykge1xuICByZXR1cm4gdGhpcy5zZXQoc2V0dGluZywgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIERpc2FibGUgYHNldHRpbmdgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZXR0aW5nXG4gKiBAcmV0dXJuIHthcHB9IGZvciBjaGFpbmluZ1xuICogQHB1YmxpY1xuICovXG5cbmFwcC5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZShzZXR0aW5nKSB7XG4gIHJldHVybiB0aGlzLnNldChzZXR0aW5nLCBmYWxzZSk7XG59O1xuXG4vKipcbiAqIERlbGVnYXRlIGAuVkVSQiguLi4pYCBjYWxscyB0byBgcm91dGVyLlZFUkIoLi4uKWAuXG4gKi9cblxubWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCl7XG4gIGFwcFttZXRob2RdID0gZnVuY3Rpb24ocGF0aCl7XG4gICAgaWYgKG1ldGhvZCA9PT0gJ2dldCcgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gYXBwLmdldChzZXR0aW5nKVxuICAgICAgcmV0dXJuIHRoaXMuc2V0KHBhdGgpO1xuICAgIH1cblxuICAgIHRoaXMubGF6eXJvdXRlcigpO1xuXG4gICAgdmFyIHJvdXRlID0gdGhpcy5fcm91dGVyLnJvdXRlKHBhdGgpO1xuICAgIHJvdXRlW21ldGhvZF0uYXBwbHkocm91dGUsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59KTtcblxuLyoqXG4gKiBTcGVjaWFsLWNhc2VkIFwiYWxsXCIgbWV0aG9kLCBhcHBseWluZyB0aGUgZ2l2ZW4gcm91dGUgYHBhdGhgLFxuICogbWlkZGxld2FyZSwgYW5kIGNhbGxiYWNrIHRvIF9ldmVyeV8gSFRUUCBtZXRob2QuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAqIEBwYXJhbSB7RnVuY3Rpb259IC4uLlxuICogQHJldHVybiB7YXBwfSBmb3IgY2hhaW5pbmdcbiAqIEBwdWJsaWNcbiAqL1xuXG5hcHAuYWxsID0gZnVuY3Rpb24gYWxsKHBhdGgpIHtcbiAgdGhpcy5sYXp5cm91dGVyKCk7XG5cbiAgdmFyIHJvdXRlID0gdGhpcy5fcm91dGVyLnJvdXRlKHBhdGgpO1xuICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG1ldGhvZHMubGVuZ3RoOyBpKyspIHtcbiAgICByb3V0ZVttZXRob2RzW2ldXS5hcHBseShyb3V0ZSwgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGRlbCAtPiBkZWxldGUgYWxpYXNcblxuYXBwLmRlbCA9IGRlcHJlY2F0ZS5mdW5jdGlvbihhcHAuZGVsZXRlLCAnYXBwLmRlbDogVXNlIGFwcC5kZWxldGUgaW5zdGVhZCcpO1xuXG4vKipcbiAqIFJlbmRlciB0aGUgZ2l2ZW4gdmlldyBgbmFtZWAgbmFtZSB3aXRoIGBvcHRpb25zYFxuICogYW5kIGEgY2FsbGJhY2sgYWNjZXB0aW5nIGFuIGVycm9yIGFuZCB0aGVcbiAqIHJlbmRlcmVkIHRlbXBsYXRlIHN0cmluZy5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgIGFwcC5yZW5kZXIoJ2VtYWlsJywgeyBuYW1lOiAnVG9iaScgfSwgZnVuY3Rpb24oZXJyLCBodG1sKXtcbiAqICAgICAgLy8gLi4uXG4gKiAgICB9KVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge09iamVjdHxGdW5jdGlvbn0gb3B0aW9ucyBvciBmblxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBwdWJsaWNcbiAqL1xuXG5hcHAucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKG5hbWUsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG4gIHZhciBkb25lID0gY2FsbGJhY2s7XG4gIHZhciBlbmdpbmVzID0gdGhpcy5lbmdpbmVzO1xuICB2YXIgb3B0cyA9IG9wdGlvbnM7XG4gIHZhciByZW5kZXJPcHRpb25zID0ge307XG4gIHZhciB2aWV3O1xuXG4gIC8vIHN1cHBvcnQgY2FsbGJhY2sgZnVuY3Rpb24gYXMgc2Vjb25kIGFyZ1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBkb25lID0gb3B0aW9ucztcbiAgICBvcHRzID0ge307XG4gIH1cblxuICAvLyBtZXJnZSBhcHAubG9jYWxzXG4gIG1lcmdlKHJlbmRlck9wdGlvbnMsIHRoaXMubG9jYWxzKTtcblxuICAvLyBtZXJnZSBvcHRpb25zLl9sb2NhbHNcbiAgaWYgKG9wdHMuX2xvY2Fscykge1xuICAgIG1lcmdlKHJlbmRlck9wdGlvbnMsIG9wdHMuX2xvY2Fscyk7XG4gIH1cblxuICAvLyBtZXJnZSBvcHRpb25zXG4gIG1lcmdlKHJlbmRlck9wdGlvbnMsIG9wdHMpO1xuXG4gIC8vIHNldCAuY2FjaGUgdW5sZXNzIGV4cGxpY2l0bHkgcHJvdmlkZWRcbiAgaWYgKHJlbmRlck9wdGlvbnMuY2FjaGUgPT0gbnVsbCkge1xuICAgIHJlbmRlck9wdGlvbnMuY2FjaGUgPSB0aGlzLmVuYWJsZWQoJ3ZpZXcgY2FjaGUnKTtcbiAgfVxuXG4gIC8vIHByaW1lZCBjYWNoZVxuICBpZiAocmVuZGVyT3B0aW9ucy5jYWNoZSkge1xuICAgIHZpZXcgPSBjYWNoZVtuYW1lXTtcbiAgfVxuXG4gIC8vIHZpZXdcbiAgaWYgKCF2aWV3KSB7XG4gICAgdmFyIFZpZXcgPSB0aGlzLmdldCgndmlldycpO1xuXG4gICAgdmlldyA9IG5ldyBWaWV3KG5hbWUsIHtcbiAgICAgIGRlZmF1bHRFbmdpbmU6IHRoaXMuZ2V0KCd2aWV3IGVuZ2luZScpLFxuICAgICAgcm9vdDogdGhpcy5nZXQoJ3ZpZXdzJyksXG4gICAgICBlbmdpbmVzOiBlbmdpbmVzXG4gICAgfSk7XG5cbiAgICBpZiAoIXZpZXcucGF0aCkge1xuICAgICAgdmFyIGRpcnMgPSBBcnJheS5pc0FycmF5KHZpZXcucm9vdCkgJiYgdmlldy5yb290Lmxlbmd0aCA+IDFcbiAgICAgICAgPyAnZGlyZWN0b3JpZXMgXCInICsgdmlldy5yb290LnNsaWNlKDAsIC0xKS5qb2luKCdcIiwgXCInKSArICdcIiBvciBcIicgKyB2aWV3LnJvb3Rbdmlldy5yb290Lmxlbmd0aCAtIDFdICsgJ1wiJ1xuICAgICAgICA6ICdkaXJlY3RvcnkgXCInICsgdmlldy5yb290ICsgJ1wiJ1xuICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignRmFpbGVkIHRvIGxvb2t1cCB2aWV3IFwiJyArIG5hbWUgKyAnXCIgaW4gdmlld3MgJyArIGRpcnMpO1xuICAgICAgZXJyLnZpZXcgPSB2aWV3O1xuICAgICAgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICB9XG5cbiAgICAvLyBwcmltZSB0aGUgY2FjaGVcbiAgICBpZiAocmVuZGVyT3B0aW9ucy5jYWNoZSkge1xuICAgICAgY2FjaGVbbmFtZV0gPSB2aWV3O1xuICAgIH1cbiAgfVxuXG4gIC8vIHJlbmRlclxuICB0cnlSZW5kZXIodmlldywgcmVuZGVyT3B0aW9ucywgZG9uZSk7XG59O1xuXG4vKipcbiAqIExpc3RlbiBmb3IgY29ubmVjdGlvbnMuXG4gKlxuICogQSBub2RlIGBodHRwLlNlcnZlcmAgaXMgcmV0dXJuZWQsIHdpdGggdGhpc1xuICogYXBwbGljYXRpb24gKHdoaWNoIGlzIGEgYEZ1bmN0aW9uYCkgYXMgaXRzXG4gKiBjYWxsYmFjay4gSWYgeW91IHdpc2ggdG8gY3JlYXRlIGJvdGggYW4gSFRUUFxuICogYW5kIEhUVFBTIHNlcnZlciB5b3UgbWF5IGRvIHNvIHdpdGggdGhlIFwiaHR0cFwiXG4gKiBhbmQgXCJodHRwc1wiIG1vZHVsZXMgYXMgc2hvd24gaGVyZTpcbiAqXG4gKiAgICB2YXIgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKVxuICogICAgICAsIGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKVxuICogICAgICAsIGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJylcbiAqICAgICAgLCBhcHAgPSBleHByZXNzKCk7XG4gKlxuICogICAgaHR0cC5jcmVhdGVTZXJ2ZXIoYXBwKS5saXN0ZW4oODApO1xuICogICAgaHR0cHMuY3JlYXRlU2VydmVyKHsgLi4uIH0sIGFwcCkubGlzdGVuKDQ0Myk7XG4gKlxuICogQHJldHVybiB7aHR0cC5TZXJ2ZXJ9XG4gKiBAcHVibGljXG4gKi9cblxuYXBwLmxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbigpIHtcbiAgdmFyIHNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKHRoaXMpO1xuICByZXR1cm4gc2VydmVyLmxpc3Rlbi5hcHBseShzZXJ2ZXIsIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcbiAqIExvZyBlcnJvciB1c2luZyBjb25zb2xlLmVycm9yLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVyclxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2dlcnJvcihlcnIpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKHRoaXMuZ2V0KCdlbnYnKSAhPT0gJ3Rlc3QnKSBjb25zb2xlLmVycm9yKGVyci5zdGFjayB8fCBlcnIudG9TdHJpbmcoKSk7XG59XG5cbi8qKlxuICogVHJ5IHJlbmRlcmluZyBhIHZpZXcuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHRyeVJlbmRlcih2aWV3LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICB0cnkge1xuICAgIHZpZXcucmVuZGVyKG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY2FsbGJhY2soZXJyKTtcbiAgfVxufVxuIiwiLyohXG4gKiBmaW5hbGhhbmRsZXJcbiAqIENvcHlyaWdodChjKSAyMDE0LTIwMTcgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2ZpbmFsaGFuZGxlcicpXG52YXIgZW5jb2RlVXJsID0gcmVxdWlyZSgnZW5jb2RldXJsJylcbnZhciBlc2NhcGVIdG1sID0gcmVxdWlyZSgnZXNjYXBlLWh0bWwnKVxudmFyIG9uRmluaXNoZWQgPSByZXF1aXJlKCdvbi1maW5pc2hlZCcpXG52YXIgcGFyc2VVcmwgPSByZXF1aXJlKCdwYXJzZXVybCcpXG52YXIgc3RhdHVzZXMgPSByZXF1aXJlKCdzdGF0dXNlcycpXG52YXIgdW5waXBlID0gcmVxdWlyZSgndW5waXBlJylcblxuLyoqXG4gKiBNb2R1bGUgdmFyaWFibGVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgRE9VQkxFX1NQQUNFX1JFR0VYUCA9IC9cXHgyMHsyfS9nXG52YXIgTkVXTElORV9SRUdFWFAgPSAvXFxuL2dcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnZhciBkZWZlciA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbidcbiAgPyBzZXRJbW1lZGlhdGVcbiAgOiBmdW5jdGlvbiAoZm4pIHsgcHJvY2Vzcy5uZXh0VGljayhmbi5iaW5kLmFwcGx5KGZuLCBhcmd1bWVudHMpKSB9XG52YXIgaXNGaW5pc2hlZCA9IG9uRmluaXNoZWQuaXNGaW5pc2hlZFxuXG4vKipcbiAqIENyZWF0ZSBhIG1pbmltYWwgSFRNTCBkb2N1bWVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVIdG1sRG9jdW1lbnQgKG1lc3NhZ2UpIHtcbiAgdmFyIGJvZHkgPSBlc2NhcGVIdG1sKG1lc3NhZ2UpXG4gICAgLnJlcGxhY2UoTkVXTElORV9SRUdFWFAsICc8YnI+JylcbiAgICAucmVwbGFjZShET1VCTEVfU1BBQ0VfUkVHRVhQLCAnICZuYnNwOycpXG5cbiAgcmV0dXJuICc8IURPQ1RZUEUgaHRtbD5cXG4nICtcbiAgICAnPGh0bWwgbGFuZz1cImVuXCI+XFxuJyArXG4gICAgJzxoZWFkPlxcbicgK1xuICAgICc8bWV0YSBjaGFyc2V0PVwidXRmLThcIj5cXG4nICtcbiAgICAnPHRpdGxlPkVycm9yPC90aXRsZT5cXG4nICtcbiAgICAnPC9oZWFkPlxcbicgK1xuICAgICc8Ym9keT5cXG4nICtcbiAgICAnPHByZT4nICsgYm9keSArICc8L3ByZT5cXG4nICtcbiAgICAnPC9ib2R5PlxcbicgK1xuICAgICc8L2h0bWw+XFxuJ1xufVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZmluYWxoYW5kbGVyXG5cbi8qKlxuICogQ3JlYXRlIGEgZnVuY3Rpb24gdG8gaGFuZGxlIHRoZSBmaW5hbCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge1JlcXVlc3R9IHJlcVxuICogQHBhcmFtIHtSZXNwb25zZX0gcmVzXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmaW5hbGhhbmRsZXIgKHJlcSwgcmVzLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gb3B0aW9ucyB8fCB7fVxuXG4gIC8vIGdldCBlbnZpcm9ubWVudFxuICB2YXIgZW52ID0gb3B0cy5lbnYgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgJ2RldmVsb3BtZW50J1xuXG4gIC8vIGdldCBlcnJvciBjYWxsYmFja1xuICB2YXIgb25lcnJvciA9IG9wdHMub25lcnJvclxuXG4gIHJldHVybiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgdmFyIGhlYWRlcnNcbiAgICB2YXIgbXNnXG4gICAgdmFyIHN0YXR1c1xuXG4gICAgLy8gaWdub3JlIDQwNCBvbiBpbi1mbGlnaHQgcmVzcG9uc2VcbiAgICBpZiAoIWVyciAmJiBoZWFkZXJzU2VudChyZXMpKSB7XG4gICAgICBkZWJ1ZygnY2Fubm90IDQwNCBhZnRlciBoZWFkZXJzIHNlbnQnKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gdW5oYW5kbGVkIGVycm9yXG4gICAgaWYgKGVycikge1xuICAgICAgLy8gcmVzcGVjdCBzdGF0dXMgY29kZSBmcm9tIGVycm9yXG4gICAgICBzdGF0dXMgPSBnZXRFcnJvclN0YXR1c0NvZGUoZXJyKVxuXG4gICAgICBpZiAoc3RhdHVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gZmFsbGJhY2sgdG8gc3RhdHVzIGNvZGUgb24gcmVzcG9uc2VcbiAgICAgICAgc3RhdHVzID0gZ2V0UmVzcG9uc2VTdGF0dXNDb2RlKHJlcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJlc3BlY3QgaGVhZGVycyBmcm9tIGVycm9yXG4gICAgICAgIGhlYWRlcnMgPSBnZXRFcnJvckhlYWRlcnMoZXJyKVxuICAgICAgfVxuXG4gICAgICAvLyBnZXQgZXJyb3IgbWVzc2FnZVxuICAgICAgbXNnID0gZ2V0RXJyb3JNZXNzYWdlKGVyciwgc3RhdHVzLCBlbnYpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG5vdCBmb3VuZFxuICAgICAgc3RhdHVzID0gNDA0XG4gICAgICBtc2cgPSAnQ2Fubm90ICcgKyByZXEubWV0aG9kICsgJyAnICsgZW5jb2RlVXJsKGdldFJlc291cmNlTmFtZShyZXEpKVxuICAgIH1cblxuICAgIGRlYnVnKCdkZWZhdWx0ICVzJywgc3RhdHVzKVxuXG4gICAgLy8gc2NoZWR1bGUgb25lcnJvciBjYWxsYmFja1xuICAgIGlmIChlcnIgJiYgb25lcnJvcikge1xuICAgICAgZGVmZXIob25lcnJvciwgZXJyLCByZXEsIHJlcylcbiAgICB9XG5cbiAgICAvLyBjYW5ub3QgYWN0dWFsbHkgcmVzcG9uZFxuICAgIGlmIChoZWFkZXJzU2VudChyZXMpKSB7XG4gICAgICBkZWJ1ZygnY2Fubm90ICVkIGFmdGVyIGhlYWRlcnMgc2VudCcsIHN0YXR1cylcbiAgICAgIHJlcS5zb2NrZXQuZGVzdHJveSgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBzZW5kIHJlc3BvbnNlXG4gICAgc2VuZChyZXEsIHJlcywgc3RhdHVzLCBoZWFkZXJzLCBtc2cpXG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgaGVhZGVycyBmcm9tIEVycm9yIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ2V0RXJyb3JIZWFkZXJzIChlcnIpIHtcbiAgaWYgKCFlcnIuaGVhZGVycyB8fCB0eXBlb2YgZXJyLmhlYWRlcnMgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgdmFyIGhlYWRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXJyLmhlYWRlcnMpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV1cbiAgICBoZWFkZXJzW2tleV0gPSBlcnIuaGVhZGVyc1trZXldXG4gIH1cblxuICByZXR1cm4gaGVhZGVyc1xufVxuXG4vKipcbiAqIEdldCBtZXNzYWdlIGZyb20gRXJyb3Igb2JqZWN0LCBmYWxsYmFjayB0byBzdGF0dXMgbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGF0dXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbnZcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ2V0RXJyb3JNZXNzYWdlIChlcnIsIHN0YXR1cywgZW52KSB7XG4gIHZhciBtc2dcblxuICBpZiAoZW52ICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyB1c2UgZXJyLnN0YWNrLCB3aGljaCB0eXBpY2FsbHkgaW5jbHVkZXMgZXJyLm1lc3NhZ2VcbiAgICBtc2cgPSBlcnIuc3RhY2tcblxuICAgIC8vIGZhbGxiYWNrIHRvIGVyci50b1N0cmluZygpIHdoZW4gcG9zc2libGVcbiAgICBpZiAoIW1zZyAmJiB0eXBlb2YgZXJyLnRvU3RyaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBtc2cgPSBlcnIudG9TdHJpbmcoKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtc2cgfHwgc3RhdHVzZXNbc3RhdHVzXVxufVxuXG4vKipcbiAqIEdldCBzdGF0dXMgY29kZSBmcm9tIEVycm9yIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ2V0RXJyb3JTdGF0dXNDb2RlIChlcnIpIHtcbiAgLy8gY2hlY2sgZXJyLnN0YXR1c1xuICBpZiAodHlwZW9mIGVyci5zdGF0dXMgPT09ICdudW1iZXInICYmIGVyci5zdGF0dXMgPj0gNDAwICYmIGVyci5zdGF0dXMgPCA2MDApIHtcbiAgICByZXR1cm4gZXJyLnN0YXR1c1xuICB9XG5cbiAgLy8gY2hlY2sgZXJyLnN0YXR1c0NvZGVcbiAgaWYgKHR5cGVvZiBlcnIuc3RhdHVzQ29kZSA9PT0gJ251bWJlcicgJiYgZXJyLnN0YXR1c0NvZGUgPj0gNDAwICYmIGVyci5zdGF0dXNDb2RlIDwgNjAwKSB7XG4gICAgcmV0dXJuIGVyci5zdGF0dXNDb2RlXG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkXG59XG5cbi8qKlxuICogR2V0IHJlc291cmNlIG5hbWUgZm9yIHRoZSByZXF1ZXN0LlxuICpcbiAqIFRoaXMgaXMgdHlwaWNhbGx5IGp1c3QgdGhlIG9yaWdpbmFsIHBhdGhuYW1lIG9mIHRoZSByZXF1ZXN0XG4gKiBidXQgd2lsbCBmYWxsYmFjayB0byBcInJlc291cmNlXCIgaXMgdGhhdCBjYW5ub3QgYmUgZGV0ZXJtaW5lZC5cbiAqXG4gKiBAcGFyYW0ge0luY29taW5nTWVzc2FnZX0gcmVxXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldFJlc291cmNlTmFtZSAocmVxKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHBhcnNlVXJsLm9yaWdpbmFsKHJlcSkucGF0aG5hbWVcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiAncmVzb3VyY2UnXG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgc3RhdHVzIGNvZGUgZnJvbSByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge091dGdvaW5nTWVzc2FnZX0gcmVzXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldFJlc3BvbnNlU3RhdHVzQ29kZSAocmVzKSB7XG4gIHZhciBzdGF0dXMgPSByZXMuc3RhdHVzQ29kZVxuXG4gIC8vIGRlZmF1bHQgc3RhdHVzIGNvZGUgdG8gNTAwIGlmIG91dHNpZGUgdmFsaWQgcmFuZ2VcbiAgaWYgKHR5cGVvZiBzdGF0dXMgIT09ICdudW1iZXInIHx8IHN0YXR1cyA8IDQwMCB8fCBzdGF0dXMgPiA1OTkpIHtcbiAgICBzdGF0dXMgPSA1MDBcbiAgfVxuXG4gIHJldHVybiBzdGF0dXNcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgdGhlIHJlc3BvbnNlIGhlYWRlcnMgaGF2ZSBiZWVuIHNlbnQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHJlc1xuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGhlYWRlcnNTZW50IChyZXMpIHtcbiAgcmV0dXJuIHR5cGVvZiByZXMuaGVhZGVyc1NlbnQgIT09ICdib29sZWFuJ1xuICAgID8gQm9vbGVhbihyZXMuX2hlYWRlcilcbiAgICA6IHJlcy5oZWFkZXJzU2VudFxufVxuXG4vKipcbiAqIFNlbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtJbmNvbWluZ01lc3NhZ2V9IHJlcVxuICogQHBhcmFtIHtPdXRnb2luZ01lc3NhZ2V9IHJlc1xuICogQHBhcmFtIHtudW1iZXJ9IHN0YXR1c1xuICogQHBhcmFtIHtvYmplY3R9IGhlYWRlcnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbmQgKHJlcSwgcmVzLCBzdGF0dXMsIGhlYWRlcnMsIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gd3JpdGUgKCkge1xuICAgIC8vIHJlc3BvbnNlIGJvZHlcbiAgICB2YXIgYm9keSA9IGNyZWF0ZUh0bWxEb2N1bWVudChtZXNzYWdlKVxuXG4gICAgLy8gcmVzcG9uc2Ugc3RhdHVzXG4gICAgcmVzLnN0YXR1c0NvZGUgPSBzdGF0dXNcbiAgICByZXMuc3RhdHVzTWVzc2FnZSA9IHN0YXR1c2VzW3N0YXR1c11cblxuICAgIC8vIHJlc3BvbnNlIGhlYWRlcnNcbiAgICBzZXRIZWFkZXJzKHJlcywgaGVhZGVycylcblxuICAgIC8vIHNlY3VyaXR5IGhlYWRlcnNcbiAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVNlY3VyaXR5LVBvbGljeScsIFwiZGVmYXVsdC1zcmMgJ25vbmUnXCIpXG4gICAgcmVzLnNldEhlYWRlcignWC1Db250ZW50LVR5cGUtT3B0aW9ucycsICdub3NuaWZmJylcblxuICAgIC8vIHN0YW5kYXJkIGhlYWRlcnNcbiAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAndGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04JylcbiAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LUxlbmd0aCcsIEJ1ZmZlci5ieXRlTGVuZ3RoKGJvZHksICd1dGY4JykpXG5cbiAgICBpZiAocmVxLm1ldGhvZCA9PT0gJ0hFQUQnKSB7XG4gICAgICByZXMuZW5kKClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHJlcy5lbmQoYm9keSwgJ3V0ZjgnKVxuICB9XG5cbiAgaWYgKGlzRmluaXNoZWQocmVxKSkge1xuICAgIHdyaXRlKClcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIHVucGlwZSBldmVyeXRoaW5nIGZyb20gdGhlIHJlcXVlc3RcbiAgdW5waXBlKHJlcSlcblxuICAvLyBmbHVzaCB0aGUgcmVxdWVzdFxuICBvbkZpbmlzaGVkKHJlcSwgd3JpdGUpXG4gIHJlcS5yZXN1bWUoKVxufVxuXG4vKipcbiAqIFNldCByZXNwb25zZSBoZWFkZXJzIGZyb20gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T3V0Z29pbmdNZXNzYWdlfSByZXNcbiAqIEBwYXJhbSB7b2JqZWN0fSBoZWFkZXJzXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNldEhlYWRlcnMgKHJlcywgaGVhZGVycykge1xuICBpZiAoIWhlYWRlcnMpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoaGVhZGVycylcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV1cbiAgICByZXMuc2V0SGVhZGVyKGtleSwgaGVhZGVyc1trZXldKVxuICB9XG59XG4iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlIHYxLjQuMSBieSBAbWF0aGlhcyAqL1xuOyhmdW5jdGlvbihyb290KSB7XG5cblx0LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlcyAqL1xuXHR2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmXG5cdFx0IWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdCFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoXG5cdFx0ZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwuc2VsZiA9PT0gZnJlZUdsb2JhbFxuXHQpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgYHB1bnljb2RlYCBvYmplY3QuXG5cdCAqIEBuYW1lIHB1bnljb2RlXG5cdCAqIEB0eXBlIE9iamVjdFxuXHQgKi9cblx0dmFyIHB1bnljb2RlLFxuXG5cdC8qKiBIaWdoZXN0IHBvc2l0aXZlIHNpZ25lZCAzMi1iaXQgZmxvYXQgdmFsdWUgKi9cblx0bWF4SW50ID0gMjE0NzQ4MzY0NywgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxuXG5cdC8qKiBCb290c3RyaW5nIHBhcmFtZXRlcnMgKi9cblx0YmFzZSA9IDM2LFxuXHR0TWluID0gMSxcblx0dE1heCA9IDI2LFxuXHRza2V3ID0gMzgsXG5cdGRhbXAgPSA3MDAsXG5cdGluaXRpYWxCaWFzID0gNzIsXG5cdGluaXRpYWxOID0gMTI4LCAvLyAweDgwXG5cdGRlbGltaXRlciA9ICctJywgLy8gJ1xceDJEJ1xuXG5cdC8qKiBSZWd1bGFyIGV4cHJlc3Npb25zICovXG5cdHJlZ2V4UHVueWNvZGUgPSAvXnhuLS0vLFxuXHRyZWdleE5vbkFTQ0lJID0gL1teXFx4MjAtXFx4N0VdLywgLy8gdW5wcmludGFibGUgQVNDSUkgY2hhcnMgKyBub24tQVNDSUkgY2hhcnNcblx0cmVnZXhTZXBhcmF0b3JzID0gL1tcXHgyRVxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZywgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xuXG5cdC8qKiBFcnJvciBtZXNzYWdlcyAqL1xuXHRlcnJvcnMgPSB7XG5cdFx0J292ZXJmbG93JzogJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJyxcblx0XHQnbm90LWJhc2ljJzogJ0lsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludCknLFxuXHRcdCdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnXG5cdH0sXG5cblx0LyoqIENvbnZlbmllbmNlIHNob3J0Y3V0cyAqL1xuXHRiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW4sXG5cdGZsb29yID0gTWF0aC5mbG9vcixcblx0c3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSxcblxuXHQvKiogVGVtcG9yYXJ5IHZhcmlhYmxlICovXG5cdGtleTtcblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGVycm9yIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBlcnJvciB0eXBlLlxuXHQgKiBAcmV0dXJucyB7RXJyb3J9IFRocm93cyBhIGBSYW5nZUVycm9yYCB3aXRoIHRoZSBhcHBsaWNhYmxlIGVycm9yIG1lc3NhZ2UuXG5cdCAqL1xuXHRmdW5jdGlvbiBlcnJvcih0eXBlKSB7XG5cdFx0dGhyb3cgbmV3IFJhbmdlRXJyb3IoZXJyb3JzW3R5cGVdKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgYEFycmF5I21hcGAgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IGFycmF5XG5cdCAqIGl0ZW0uXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgYXJyYXkgb2YgdmFsdWVzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcChhcnJheSwgZm4pIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHR3aGlsZSAobGVuZ3RoLS0pIHtcblx0XHRcdHJlc3VsdFtsZW5ndGhdID0gZm4oYXJyYXlbbGVuZ3RoXSk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHQvKipcblx0ICogQSBzaW1wbGUgYEFycmF5I21hcGAtbGlrZSB3cmFwcGVyIHRvIHdvcmsgd2l0aCBkb21haW4gbmFtZSBzdHJpbmdzIG9yIGVtYWlsXG5cdCAqIGFkZHJlc3Nlcy5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcy5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5XG5cdCAqIGNoYXJhY3Rlci5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tcblx0ICogZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXBEb21haW4oc3RyaW5nLCBmbikge1xuXHRcdHZhciBwYXJ0cyA9IHN0cmluZy5zcGxpdCgnQCcpO1xuXHRcdHZhciByZXN1bHQgPSAnJztcblx0XHRpZiAocGFydHMubGVuZ3RoID4gMSkge1xuXHRcdFx0Ly8gSW4gZW1haWwgYWRkcmVzc2VzLCBvbmx5IHRoZSBkb21haW4gbmFtZSBzaG91bGQgYmUgcHVueWNvZGVkLiBMZWF2ZVxuXHRcdFx0Ly8gdGhlIGxvY2FsIHBhcnQgKGkuZS4gZXZlcnl0aGluZyB1cCB0byBgQGApIGludGFjdC5cblx0XHRcdHJlc3VsdCA9IHBhcnRzWzBdICsgJ0AnO1xuXHRcdFx0c3RyaW5nID0gcGFydHNbMV07XG5cdFx0fVxuXHRcdC8vIEF2b2lkIGBzcGxpdChyZWdleClgIGZvciBJRTggY29tcGF0aWJpbGl0eS4gU2VlICMxNy5cblx0XHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleFNlcGFyYXRvcnMsICdcXHgyRScpO1xuXHRcdHZhciBsYWJlbHMgPSBzdHJpbmcuc3BsaXQoJy4nKTtcblx0XHR2YXIgZW5jb2RlZCA9IG1hcChsYWJlbHMsIGZuKS5qb2luKCcuJyk7XG5cdFx0cmV0dXJuIHJlc3VsdCArIGVuY29kZWQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuXHQgKiBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG5cdCAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG5cdCAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuXHQgKiBtYXRjaGluZyBVVEYtMTYuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZW5jb2RlYFxuXHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZGVjb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgVGhlIFVuaWNvZGUgaW5wdXQgc3RyaW5nIChVQ1MtMikuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gVGhlIG5ldyBhcnJheSBvZiBjb2RlIHBvaW50cy5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBjb3VudGVyID0gMCxcblx0XHQgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcblx0XHQgICAgdmFsdWUsXG5cdFx0ICAgIGV4dHJhO1xuXHRcdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgc3RyaW5nIGJhc2VkIG9uIGFuIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZGVjb2RlYFxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBlbmNvZGVcblx0ICogQHBhcmFtIHtBcnJheX0gY29kZVBvaW50cyBUaGUgYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIG5ldyBVbmljb2RlIHN0cmluZyAoVUNTLTIpLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmVuY29kZShhcnJheSkge1xuXHRcdHJldHVybiBtYXAoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdFx0dmFsdWUgLT0gMHgxMDAwMDtcblx0XHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG5cdFx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHRcdH1cblx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpO1xuXHRcdFx0cmV0dXJuIG91dHB1dDtcblx0XHR9KS5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGJhc2ljIGNvZGUgcG9pbnQgaW50byBhIGRpZ2l0L2ludGVnZXIuXG5cdCAqIEBzZWUgYGRpZ2l0VG9CYXNpYygpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gY29kZVBvaW50IFRoZSBiYXNpYyBudW1lcmljIGNvZGUgcG9pbnQgdmFsdWUuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludCAoZm9yIHVzZSBpblxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGluIHRoZSByYW5nZSBgMGAgdG8gYGJhc2UgLSAxYCwgb3IgYGJhc2VgIGlmXG5cdCAqIHRoZSBjb2RlIHBvaW50IGRvZXMgbm90IHJlcHJlc2VudCBhIHZhbHVlLlxuXHQgKi9cblx0ZnVuY3Rpb24gYmFzaWNUb0RpZ2l0KGNvZGVQb2ludCkge1xuXHRcdGlmIChjb2RlUG9pbnQgLSA0OCA8IDEwKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gMjI7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA2NSA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gNjU7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA5NyA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gOTc7XG5cdFx0fVxuXHRcdHJldHVybiBiYXNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHNlZSBgYmFzaWNUb0RpZ2l0KClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBkaWdpdCBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBiYXNpYyBjb2RlIHBvaW50IHdob3NlIHZhbHVlICh3aGVuIHVzZWQgZm9yXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaXMgYGRpZ2l0YCwgd2hpY2ggbmVlZHMgdG8gYmUgaW4gdGhlIHJhbmdlXG5cdCAqIGAwYCB0byBgYmFzZSAtIDFgLiBJZiBgZmxhZ2AgaXMgbm9uLXplcm8sIHRoZSB1cHBlcmNhc2UgZm9ybSBpc1xuXHQgKiB1c2VkOyBlbHNlLCB0aGUgbG93ZXJjYXNlIGZvcm0gaXMgdXNlZC4gVGhlIGJlaGF2aW9yIGlzIHVuZGVmaW5lZFxuXHQgKiBpZiBgZmxhZ2AgaXMgbm9uLXplcm8gYW5kIGBkaWdpdGAgaGFzIG5vIHVwcGVyY2FzZSBmb3JtLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGlnaXRUb0Jhc2ljKGRpZ2l0LCBmbGFnKSB7XG5cdFx0Ly8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLlpcblx0XHQvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcblx0XHRyZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpIC0gKChmbGFnICE9IDApIDw8IDUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuXG5cdCAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBhZGFwdChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHtcblx0XHR2YXIgayA9IDA7XG5cdFx0ZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcblx0XHRkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7XG5cdFx0Zm9yICgvKiBubyBpbml0aWFsaXphdGlvbiAqLzsgZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxOyBrICs9IGJhc2UpIHtcblx0XHRcdGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzIHRvIGEgc3RyaW5nIG9mIFVuaWNvZGVcblx0ICogc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdFx0Ly8gRG9uJ3QgdXNlIFVDUy0yXG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aCxcblx0XHQgICAgb3V0LFxuXHRcdCAgICBpID0gMCxcblx0XHQgICAgbiA9IGluaXRpYWxOLFxuXHRcdCAgICBiaWFzID0gaW5pdGlhbEJpYXMsXG5cdFx0ICAgIGJhc2ljLFxuXHRcdCAgICBqLFxuXHRcdCAgICBpbmRleCxcblx0XHQgICAgb2xkaSxcblx0XHQgICAgdyxcblx0XHQgICAgayxcblx0XHQgICAgZGlnaXQsXG5cdFx0ICAgIHQsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBiYXNlTWludXNUO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50czogbGV0IGBiYXNpY2AgYmUgdGhlIG51bWJlciBvZiBpbnB1dCBjb2RlXG5cdFx0Ly8gcG9pbnRzIGJlZm9yZSB0aGUgbGFzdCBkZWxpbWl0ZXIsIG9yIGAwYCBpZiB0aGVyZSBpcyBub25lLCB0aGVuIGNvcHlcblx0XHQvLyB0aGUgZmlyc3QgYmFzaWMgY29kZSBwb2ludHMgdG8gdGhlIG91dHB1dC5cblxuXHRcdGJhc2ljID0gaW5wdXQubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcblx0XHRpZiAoYmFzaWMgPCAwKSB7XG5cdFx0XHRiYXNpYyA9IDA7XG5cdFx0fVxuXG5cdFx0Zm9yIChqID0gMDsgaiA8IGJhc2ljOyArK2opIHtcblx0XHRcdC8vIGlmIGl0J3Mgbm90IGEgYmFzaWMgY29kZSBwb2ludFxuXHRcdFx0aWYgKGlucHV0LmNoYXJDb2RlQXQoaikgPj0gMHg4MCkge1xuXHRcdFx0XHRlcnJvcignbm90LWJhc2ljJyk7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQucHVzaChpbnB1dC5jaGFyQ29kZUF0KGopKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGRlY29kaW5nIGxvb3A6IHN0YXJ0IGp1c3QgYWZ0ZXIgdGhlIGxhc3QgZGVsaW1pdGVyIGlmIGFueSBiYXNpYyBjb2RlXG5cdFx0Ly8gcG9pbnRzIHdlcmUgY29waWVkOyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG90aGVyd2lzZS5cblxuXHRcdGZvciAoaW5kZXggPSBiYXNpYyA+IDAgPyBiYXNpYyArIDEgOiAwOyBpbmRleCA8IGlucHV0TGVuZ3RoOyAvKiBubyBmaW5hbCBleHByZXNzaW9uICovKSB7XG5cblx0XHRcdC8vIGBpbmRleGAgaXMgdGhlIGluZGV4IG9mIHRoZSBuZXh0IGNoYXJhY3RlciB0byBiZSBjb25zdW1lZC5cblx0XHRcdC8vIERlY29kZSBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyIGludG8gYGRlbHRhYCxcblx0XHRcdC8vIHdoaWNoIGdldHMgYWRkZWQgdG8gYGlgLiBUaGUgb3ZlcmZsb3cgY2hlY2tpbmcgaXMgZWFzaWVyXG5cdFx0XHQvLyBpZiB3ZSBpbmNyZWFzZSBgaWAgYXMgd2UgZ28sIHRoZW4gc3VidHJhY3Qgb2ZmIGl0cyBzdGFydGluZ1xuXHRcdFx0Ly8gdmFsdWUgYXQgdGhlIGVuZCB0byBvYnRhaW4gYGRlbHRhYC5cblx0XHRcdGZvciAob2xkaSA9IGksIHcgPSAxLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblxuXHRcdFx0XHRpZiAoaW5kZXggPj0gaW5wdXRMZW5ndGgpIHtcblx0XHRcdFx0XHRlcnJvcignaW52YWxpZC1pbnB1dCcpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGlnaXQgPSBiYXNpY1RvRGlnaXQoaW5wdXQuY2hhckNvZGVBdChpbmRleCsrKSk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0ID49IGJhc2UgfHwgZGlnaXQgPiBmbG9vcigobWF4SW50IC0gaSkgLyB3KSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aSArPSBkaWdpdCAqIHc7XG5cdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA8IHQpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0aWYgKHcgPiBmbG9vcihtYXhJbnQgLyBiYXNlTWludXNUKSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dyAqPSBiYXNlTWludXNUO1xuXG5cdFx0XHR9XG5cblx0XHRcdG91dCA9IG91dHB1dC5sZW5ndGggKyAxO1xuXHRcdFx0YmlhcyA9IGFkYXB0KGkgLSBvbGRpLCBvdXQsIG9sZGkgPT0gMCk7XG5cblx0XHRcdC8vIGBpYCB3YXMgc3VwcG9zZWQgdG8gd3JhcCBhcm91bmQgZnJvbSBgb3V0YCB0byBgMGAsXG5cdFx0XHQvLyBpbmNyZW1lbnRpbmcgYG5gIGVhY2ggdGltZSwgc28gd2UnbGwgZml4IHRoYXQgbm93OlxuXHRcdFx0aWYgKGZsb29yKGkgLyBvdXQpID4gbWF4SW50IC0gbikge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0biArPSBmbG9vcihpIC8gb3V0KTtcblx0XHRcdGkgJT0gb3V0O1xuXG5cdFx0XHQvLyBJbnNlcnQgYG5gIGF0IHBvc2l0aW9uIGBpYCBvZiB0aGUgb3V0cHV0XG5cdFx0XHRvdXRwdXQuc3BsaWNlKGkrKywgMCwgbik7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdWNzMmVuY29kZShvdXRwdXQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG5cdCAqIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuXHRcdHZhciBuLFxuXHRcdCAgICBkZWx0YSxcblx0XHQgICAgaGFuZGxlZENQQ291bnQsXG5cdFx0ICAgIGJhc2ljTGVuZ3RoLFxuXHRcdCAgICBiaWFzLFxuXHRcdCAgICBqLFxuXHRcdCAgICBtLFxuXHRcdCAgICBxLFxuXHRcdCAgICBrLFxuXHRcdCAgICB0LFxuXHRcdCAgICBjdXJyZW50VmFsdWUsXG5cdFx0ICAgIG91dHB1dCA9IFtdLFxuXHRcdCAgICAvKiogYGlucHV0TGVuZ3RoYCB3aWxsIGhvbGQgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyBpbiBgaW5wdXRgLiAqL1xuXHRcdCAgICBpbnB1dExlbmd0aCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50UGx1c09uZSxcblx0XHQgICAgYmFzZU1pbnVzVCxcblx0XHQgICAgcU1pbnVzVDtcblxuXHRcdC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIFVuaWNvZGVcblx0XHRpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG5cdFx0Ly8gQ2FjaGUgdGhlIGxlbmd0aFxuXHRcdGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG5cdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgc3RhdGVcblx0XHRuID0gaW5pdGlhbE47XG5cdFx0ZGVsdGEgPSAwO1xuXHRcdGJpYXMgPSBpbml0aWFsQmlhcztcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHNcblx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgMHg4MCkge1xuXHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aCA9IG91dHB1dC5sZW5ndGg7XG5cblx0XHQvLyBgaGFuZGxlZENQQ291bnRgIGlzIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblx0XHQvLyBgYmFzaWNMZW5ndGhgIGlzIHRoZSBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG5cblx0XHQvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyAtIGlmIGl0IGlzIG5vdCBlbXB0eSAtIHdpdGggYSBkZWxpbWl0ZXJcblx0XHRpZiAoYmFzaWNMZW5ndGgpIHtcblx0XHRcdG91dHB1dC5wdXNoKGRlbGltaXRlcik7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBlbmNvZGluZyBsb29wOlxuXHRcdHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG5cblx0XHRcdC8vIEFsbCBub24tYmFzaWMgY29kZSBwb2ludHMgPCBuIGhhdmUgYmVlbiBoYW5kbGVkIGFscmVhZHkuIEZpbmQgdGhlIG5leHRcblx0XHRcdC8vIGxhcmdlciBvbmU6XG5cdFx0XHRmb3IgKG0gPSBtYXhJbnQsIGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcblx0XHRcdFx0XHRtID0gY3VycmVudFZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEluY3JlYXNlIGBkZWx0YWAgZW5vdWdoIHRvIGFkdmFuY2UgdGhlIGRlY29kZXIncyA8bixpPiBzdGF0ZSB0byA8bSwwPixcblx0XHRcdC8vIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93XG5cdFx0XHRoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG5cdFx0XHRpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcblx0XHRcdG4gPSBtO1xuXG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID09IG4pIHtcblx0XHRcdFx0XHQvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlclxuXHRcdFx0XHRcdGZvciAocSA9IGRlbHRhLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblx0XHRcdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXHRcdFx0XHRcdFx0aWYgKHEgPCB0KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cU1pbnVzVCA9IHEgLSB0O1xuXHRcdFx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRcdFx0b3V0cHV0LnB1c2goXG5cdFx0XHRcdFx0XHRcdHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNULCAwKSlcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWMocSwgMCkpKTtcblx0XHRcdFx0XHRiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuXHRcdFx0XHRcdGRlbHRhID0gMDtcblx0XHRcdFx0XHQrK2hhbmRsZWRDUENvdW50O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdCsrZGVsdGE7XG5cdFx0XHQrK247XG5cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dC5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzXG5cdCAqIHRvIFVuaWNvZGUuIE9ubHkgdGhlIFB1bnljb2RlZCBwYXJ0cyBvZiB0aGUgaW5wdXQgd2lsbCBiZSBjb252ZXJ0ZWQsIGkuZS5cblx0ICogaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgb24gYSBzdHJpbmcgdGhhdCBoYXMgYWxyZWFkeSBiZWVuXG5cdCAqIGNvbnZlcnRlZCB0byBVbmljb2RlLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZWQgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0b1xuXHQgKiBjb252ZXJ0IHRvIFVuaWNvZGUuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBVbmljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBQdW55Y29kZVxuXHQgKiBzdHJpbmcuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b1VuaWNvZGUoaW5wdXQpIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleFB1bnljb2RlLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/IGRlY29kZShzdHJpbmcuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSlcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIFB1bnljb2RlLiBPbmx5IHRoZSBub24tQVNDSUkgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHdpbGwgYmUgY29udmVydGVkLFxuXHQgKiBpLmUuIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IHdpdGggYSBkb21haW4gdGhhdCdzIGFscmVhZHkgaW5cblx0ICogQVNDSUkuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG8gY29udmVydCwgYXMgYVxuXHQgKiBVbmljb2RlIHN0cmluZy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFB1bnljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBkb21haW4gbmFtZSBvclxuXHQgKiBlbWFpbCBhZGRyZXNzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9BU0NJSShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4Tm9uQVNDSUkudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gJ3huLS0nICsgZW5jb2RlKHN0cmluZylcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKiogRGVmaW5lIHRoZSBwdWJsaWMgQVBJICovXG5cdHB1bnljb2RlID0ge1xuXHRcdC8qKlxuXHRcdCAqIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBQdW55Y29kZS5qcyB2ZXJzaW9uIG51bWJlci5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBTdHJpbmdcblx0XHQgKi9cblx0XHQndmVyc2lvbic6ICcxLjQuMScsXG5cdFx0LyoqXG5cdFx0ICogQW4gb2JqZWN0IG9mIG1ldGhvZHMgdG8gY29udmVydCBmcm9tIEphdmFTY3JpcHQncyBpbnRlcm5hbCBjaGFyYWN0ZXJcblx0XHQgKiByZXByZXNlbnRhdGlvbiAoVUNTLTIpIHRvIFVuaWNvZGUgY29kZSBwb2ludHMsIGFuZCBiYWNrLlxuXHRcdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIE9iamVjdFxuXHRcdCAqL1xuXHRcdCd1Y3MyJzoge1xuXHRcdFx0J2RlY29kZSc6IHVjczJkZWNvZGUsXG5cdFx0XHQnZW5jb2RlJzogdWNzMmVuY29kZVxuXHRcdH0sXG5cdFx0J2RlY29kZSc6IGRlY29kZSxcblx0XHQnZW5jb2RlJzogZW5jb2RlLFxuXHRcdCd0b0FTQ0lJJzogdG9BU0NJSSxcblx0XHQndG9Vbmljb2RlJzogdG9Vbmljb2RlXG5cdH07XG5cblx0LyoqIEV4cG9zZSBgcHVueWNvZGVgICovXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKCdwdW55Y29kZScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHB1bnljb2RlO1xuXHRcdH0pO1xuXHR9IGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUpIHtcblx0XHRpZiAobW9kdWxlLmV4cG9ydHMgPT0gZnJlZUV4cG9ydHMpIHtcblx0XHRcdC8vIGluIE5vZGUuanMsIGlvLmpzLCBvciBSaW5nb0pTIHYwLjguMCtcblx0XHRcdGZyZWVNb2R1bGUuZXhwb3J0cyA9IHB1bnljb2RlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLVxuXHRcdFx0Zm9yIChrZXkgaW4gcHVueWNvZGUpIHtcblx0XHRcdFx0cHVueWNvZGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHB1bnljb2RlW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHQvLyBpbiBSaGlubyBvciBhIHdlYiBicm93c2VyXG5cdFx0cm9vdC5wdW55Y29kZSA9IHB1bnljb2RlO1xuXHR9XG5cbn0odGhpcykpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNTdHJpbmc6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0eXBlb2YoYXJnKSA9PT0gJ3N0cmluZyc7XG4gIH0sXG4gIGlzT2JqZWN0OiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnID09PSBudWxsO1xuICB9LFxuICBpc051bGxPclVuZGVmaW5lZDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PSBudWxsO1xuICB9XG59O1xuIiwiLyoqXG4gKiBFeHBvc2UgYHBhdGh0b1JlZ2V4cGAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRodG9SZWdleHA7XG5cbi8qKlxuICogTWF0Y2ggbWF0Y2hpbmcgZ3JvdXBzIGluIGEgcmVndWxhciBleHByZXNzaW9uLlxuICovXG52YXIgTUFUQ0hJTkdfR1JPVVBfUkVHRVhQID0gL1xcKCg/IVxcPykvZztcblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLFxuICogcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IHNob3VsZCBiZSBwYXNzZWQsXG4gKiB3aGljaCB3aWxsIGNvbnRhaW4gdGhlIHBsYWNlaG9sZGVyXG4gKiBrZXkgbmFtZXMuIEZvciBleGFtcGxlIFwiL3VzZXIvOmlkXCIgd2lsbFxuICogdGhlbiBjb250YWluIFtcImlkXCJdLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ3xSZWdFeHB8QXJyYXl9IHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge1JlZ0V4cH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhdGh0b1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBrZXlzID0ga2V5cyB8fCBbXTtcbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0O1xuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlO1xuICB2YXIgZmxhZ3MgPSBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knO1xuICB2YXIgZXh0cmFPZmZzZXQgPSAwO1xuICB2YXIga2V5c09mZnNldCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBuYW1lID0gMDtcbiAgdmFyIG07XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICB3aGlsZSAobSA9IE1BVENISU5HX0dST1VQX1JFR0VYUC5leGVjKHBhdGguc291cmNlKSkge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogbmFtZSsrLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIG9mZnNldDogbS5pbmRleFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShwYXRoKSkge1xuICAgIC8vIE1hcCBhcnJheSBwYXJ0cyBpbnRvIHJlZ2V4cHMgYW5kIHJldHVybiB0aGVpciBzb3VyY2UuIFdlIGFsc28gcGFzc1xuICAgIC8vIHRoZSBzYW1lIGtleXMgYW5kIG9wdGlvbnMgaW5zdGFuY2UgaW50byBldmVyeSBnZW5lcmF0aW9uIHRvIGdldFxuICAgIC8vIGNvbnNpc3RlbnQgbWF0Y2hpbmcgZ3JvdXBzIGJlZm9yZSB3ZSBqb2luIHRoZSBzb3VyY2VzIHRvZ2V0aGVyLlxuICAgIHBhdGggPSBwYXRoLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXRodG9SZWdleHAodmFsdWUsIGtleXMsIG9wdGlvbnMpLnNvdXJjZTtcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXcgUmVnRXhwKCcoPzonICsgcGF0aC5qb2luKCd8JykgKyAnKScsIGZsYWdzKTtcbiAgfVxuXG4gIHBhdGggPSAoJ14nICsgcGF0aCArIChzdHJpY3QgPyAnJyA6IHBhdGhbcGF0aC5sZW5ndGggLSAxXSA9PT0gJy8nID8gJz8nIDogJy8/JykpXG4gICAgLnJlcGxhY2UoL1xcL1xcKC9nLCAnLyg/OicpXG4gICAgLnJlcGxhY2UoLyhbXFwvXFwuXSkvZywgJ1xcXFwkMScpXG4gICAgLnJlcGxhY2UoLyhcXFxcXFwvKT8oXFxcXFxcLik/OihcXHcrKShcXCguKj9cXCkpPyhcXCopPyhcXD8pPy9nLCBmdW5jdGlvbiAobWF0Y2gsIHNsYXNoLCBmb3JtYXQsIGtleSwgY2FwdHVyZSwgc3Rhciwgb3B0aW9uYWwsIG9mZnNldCkge1xuICAgICAgc2xhc2ggPSBzbGFzaCB8fCAnJztcbiAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICAgIGNhcHR1cmUgPSBjYXB0dXJlIHx8ICcoW15cXFxcLycgKyBmb3JtYXQgKyAnXSs/KSc7XG4gICAgICBvcHRpb25hbCA9IG9wdGlvbmFsIHx8ICcnO1xuXG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgIG9wdGlvbmFsOiAhIW9wdGlvbmFsLFxuICAgICAgICBvZmZzZXQ6IG9mZnNldCArIGV4dHJhT2Zmc2V0XG4gICAgICB9KTtcblxuICAgICAgdmFyIHJlc3VsdCA9ICcnXG4gICAgICAgICsgKG9wdGlvbmFsID8gJycgOiBzbGFzaClcbiAgICAgICAgKyAnKD86J1xuICAgICAgICArIGZvcm1hdCArIChvcHRpb25hbCA/IHNsYXNoIDogJycpICsgY2FwdHVyZVxuICAgICAgICArIChzdGFyID8gJygoPzpbXFxcXC8nICsgZm9ybWF0ICsgJ10uKz8pPyknIDogJycpXG4gICAgICAgICsgJyknXG4gICAgICAgICsgb3B0aW9uYWw7XG5cbiAgICAgIGV4dHJhT2Zmc2V0ICs9IHJlc3VsdC5sZW5ndGggLSBtYXRjaC5sZW5ndGg7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSlcbiAgICAucmVwbGFjZSgvXFwqL2csIGZ1bmN0aW9uIChzdGFyLCBpbmRleCkge1xuICAgICAgdmFyIGxlbiA9IGtleXMubGVuZ3RoXG5cbiAgICAgIHdoaWxlIChsZW4tLSA+IGtleXNPZmZzZXQgJiYga2V5c1tsZW5dLm9mZnNldCA+IGluZGV4KSB7XG4gICAgICAgIGtleXNbbGVuXS5vZmZzZXQgKz0gMzsgLy8gUmVwbGFjZW1lbnQgbGVuZ3RoIG1pbnVzIGFzdGVyaXNrIGxlbmd0aC5cbiAgICAgIH1cblxuICAgICAgcmV0dXJuICcoLiopJztcbiAgICB9KTtcblxuICAvLyBUaGlzIGlzIGEgd29ya2Fyb3VuZCBmb3IgaGFuZGxpbmcgdW5uYW1lZCBtYXRjaGluZyBncm91cHMuXG4gIHdoaWxlIChtID0gTUFUQ0hJTkdfR1JPVVBfUkVHRVhQLmV4ZWMocGF0aCkpIHtcbiAgICB2YXIgZXNjYXBlQ291bnQgPSAwO1xuICAgIHZhciBpbmRleCA9IG0uaW5kZXg7XG5cbiAgICB3aGlsZSAocGF0aC5jaGFyQXQoLS1pbmRleCkgPT09ICdcXFxcJykge1xuICAgICAgZXNjYXBlQ291bnQrKztcbiAgICB9XG5cbiAgICAvLyBJdCdzIHBvc3NpYmxlIHRvIGVzY2FwZSB0aGUgYnJhY2tldC5cbiAgICBpZiAoZXNjYXBlQ291bnQgJSAyID09PSAxKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoa2V5c09mZnNldCArIGkgPT09IGtleXMubGVuZ3RoIHx8IGtleXNba2V5c09mZnNldCArIGldLm9mZnNldCA+IG0uaW5kZXgpIHtcbiAgICAgIGtleXMuc3BsaWNlKGtleXNPZmZzZXQgKyBpLCAwLCB7XG4gICAgICAgIG5hbWU6IG5hbWUrKywgLy8gVW5uYW1lZCBtYXRjaGluZyBncm91cHMgbXVzdCBiZSBjb25zaXN0ZW50bHkgbGluZWFyLlxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIG9mZnNldDogbS5pbmRleFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaSsrO1xuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggaXMgbm9uLWVuZGluZywgbWF0Y2ggdW50aWwgdGhlIGVuZCBvciBhIHNsYXNoLlxuICBwYXRoICs9IChlbmQgPyAnJCcgOiAocGF0aFtwYXRoLmxlbmd0aCAtIDFdID09PSAnLycgPyAnJyA6ICcoPz1cXFxcL3wkKScpKTtcblxuICByZXR1cm4gbmV3IFJlZ0V4cChwYXRoLCBmbGFncyk7XG59O1xuIiwiLyohXG4gKiBleHByZXNzXG4gKiBDb3B5cmlnaHQoYykgMjAwOS0yMDEzIFRKIEhvbG93YXljaHVrXG4gKiBDb3B5cmlnaHQoYykgMjAxMyBSb21hbiBTaHR5bG1hblxuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ3NldHByb3RvdHlwZW9mJylcblxuLyoqXG4gKiBJbml0aWFsaXphdGlvbiBtaWRkbGV3YXJlLCBleHBvc2luZyB0aGVcbiAqIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHRvIGVhY2ggb3RoZXIsIGFzIHdlbGxcbiAqIGFzIGRlZmF1bHRpbmcgdGhlIFgtUG93ZXJlZC1CeSBoZWFkZXIgZmllbGQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gYXBwXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuaW5pdCA9IGZ1bmN0aW9uKGFwcCl7XG4gIHJldHVybiBmdW5jdGlvbiBleHByZXNzSW5pdChyZXEsIHJlcywgbmV4dCl7XG4gICAgaWYgKGFwcC5lbmFibGVkKCd4LXBvd2VyZWQtYnknKSkgcmVzLnNldEhlYWRlcignWC1Qb3dlcmVkLUJ5JywgJ0V4cHJlc3MnKTtcbiAgICByZXEucmVzID0gcmVzO1xuICAgIHJlcy5yZXEgPSByZXE7XG4gICAgcmVxLm5leHQgPSBuZXh0O1xuXG4gICAgc2V0UHJvdG90eXBlT2YocmVxLCBhcHAucmVxdWVzdClcbiAgICBzZXRQcm90b3R5cGVPZihyZXMsIGFwcC5yZXNwb25zZSlcblxuICAgIHJlcy5sb2NhbHMgPSByZXMubG9jYWxzIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBuZXh0KCk7XG4gIH07XG59O1xuXG4iLCIvKiFcbiAqIGV4cHJlc3NcbiAqIENvcHlyaWdodChjKSAyMDA5LTIwMTMgVEogSG9sb3dheWNodWtcbiAqIENvcHlyaWdodChjKSAyMDEzIFJvbWFuIFNodHlsbWFuXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZXhwcmVzczp2aWV3Jyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGRpcm5hbWUgPSBwYXRoLmRpcm5hbWU7XG52YXIgYmFzZW5hbWUgPSBwYXRoLmJhc2VuYW1lO1xudmFyIGV4dG5hbWUgPSBwYXRoLmV4dG5hbWU7XG52YXIgam9pbiA9IHBhdGguam9pbjtcbnZhciByZXNvbHZlID0gcGF0aC5yZXNvbHZlO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVmlldztcblxuLyoqXG4gKiBJbml0aWFsaXplIGEgbmV3IGBWaWV3YCB3aXRoIHRoZSBnaXZlbiBgbmFtZWAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgIC0gYGRlZmF1bHRFbmdpbmVgIHRoZSBkZWZhdWx0IHRlbXBsYXRlIGVuZ2luZSBuYW1lXG4gKiAgIC0gYGVuZ2luZXNgIHRlbXBsYXRlIGVuZ2luZSByZXF1aXJlKCkgY2FjaGVcbiAqICAgLSBgcm9vdGAgcm9vdCBwYXRoIGZvciB2aWV3IGxvb2t1cFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFZpZXcobmFtZSwgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IG9wdGlvbnMgfHwge307XG5cbiAgdGhpcy5kZWZhdWx0RW5naW5lID0gb3B0cy5kZWZhdWx0RW5naW5lO1xuICB0aGlzLmV4dCA9IGV4dG5hbWUobmFtZSk7XG4gIHRoaXMubmFtZSA9IG5hbWU7XG4gIHRoaXMucm9vdCA9IG9wdHMucm9vdDtcblxuICBpZiAoIXRoaXMuZXh0ICYmICF0aGlzLmRlZmF1bHRFbmdpbmUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGRlZmF1bHQgZW5naW5lIHdhcyBzcGVjaWZpZWQgYW5kIG5vIGV4dGVuc2lvbiB3YXMgcHJvdmlkZWQuJyk7XG4gIH1cblxuICB2YXIgZmlsZU5hbWUgPSBuYW1lO1xuXG4gIGlmICghdGhpcy5leHQpIHtcbiAgICAvLyBnZXQgZXh0ZW5zaW9uIGZyb20gZGVmYXVsdCBlbmdpbmUgbmFtZVxuICAgIHRoaXMuZXh0ID0gdGhpcy5kZWZhdWx0RW5naW5lWzBdICE9PSAnLidcbiAgICAgID8gJy4nICsgdGhpcy5kZWZhdWx0RW5naW5lXG4gICAgICA6IHRoaXMuZGVmYXVsdEVuZ2luZTtcblxuICAgIGZpbGVOYW1lICs9IHRoaXMuZXh0O1xuICB9XG5cbiAgaWYgKCFvcHRzLmVuZ2luZXNbdGhpcy5leHRdKSB7XG4gICAgLy8gbG9hZCBlbmdpbmVcbiAgICB2YXIgbW9kID0gdGhpcy5leHQuc3Vic3RyKDEpXG4gICAgZGVidWcoJ3JlcXVpcmUgXCIlc1wiJywgbW9kKVxuXG4gICAgLy8gZGVmYXVsdCBlbmdpbmUgZXhwb3J0XG4gICAgdmFyIGZuID0gcmVxdWlyZShtb2QpLl9fZXhwcmVzc1xuXG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNb2R1bGUgXCInICsgbW9kICsgJ1wiIGRvZXMgbm90IHByb3ZpZGUgYSB2aWV3IGVuZ2luZS4nKVxuICAgIH1cblxuICAgIG9wdHMuZW5naW5lc1t0aGlzLmV4dF0gPSBmblxuICB9XG5cbiAgLy8gc3RvcmUgbG9hZGVkIGVuZ2luZVxuICB0aGlzLmVuZ2luZSA9IG9wdHMuZW5naW5lc1t0aGlzLmV4dF07XG5cbiAgLy8gbG9va3VwIHBhdGhcbiAgdGhpcy5wYXRoID0gdGhpcy5sb29rdXAoZmlsZU5hbWUpO1xufVxuXG4vKipcbiAqIExvb2t1cCB2aWV3IGJ5IHRoZSBnaXZlbiBgbmFtZWBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHByaXZhdGVcbiAqL1xuXG5WaWV3LnByb3RvdHlwZS5sb29rdXAgPSBmdW5jdGlvbiBsb29rdXAobmFtZSkge1xuICB2YXIgcGF0aDtcbiAgdmFyIHJvb3RzID0gW10uY29uY2F0KHRoaXMucm9vdCk7XG5cbiAgZGVidWcoJ2xvb2t1cCBcIiVzXCInLCBuYW1lKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJvb3RzLmxlbmd0aCAmJiAhcGF0aDsgaSsrKSB7XG4gICAgdmFyIHJvb3QgPSByb290c1tpXTtcblxuICAgIC8vIHJlc29sdmUgdGhlIHBhdGhcbiAgICB2YXIgbG9jID0gcmVzb2x2ZShyb290LCBuYW1lKTtcbiAgICB2YXIgZGlyID0gZGlybmFtZShsb2MpO1xuICAgIHZhciBmaWxlID0gYmFzZW5hbWUobG9jKTtcblxuICAgIC8vIHJlc29sdmUgdGhlIGZpbGVcbiAgICBwYXRoID0gdGhpcy5yZXNvbHZlKGRpciwgZmlsZSk7XG4gIH1cblxuICByZXR1cm4gcGF0aDtcbn07XG5cbi8qKlxuICogUmVuZGVyIHdpdGggdGhlIGdpdmVuIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcHJpdmF0ZVxuICovXG5cblZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihvcHRpb25zLCBjYWxsYmFjaykge1xuICBkZWJ1ZygncmVuZGVyIFwiJXNcIicsIHRoaXMucGF0aCk7XG4gIHRoaXMuZW5naW5lKHRoaXMucGF0aCwgb3B0aW9ucywgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlIHRoZSBmaWxlIHdpdGhpbiB0aGUgZ2l2ZW4gZGlyZWN0b3J5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlXG4gKiBAcHJpdmF0ZVxuICovXG5cblZpZXcucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKGRpciwgZmlsZSkge1xuICB2YXIgZXh0ID0gdGhpcy5leHQ7XG5cbiAgLy8gPHBhdGg+LjxleHQ+XG4gIHZhciBwYXRoID0gam9pbihkaXIsIGZpbGUpO1xuICB2YXIgc3RhdCA9IHRyeVN0YXQocGF0aCk7XG5cbiAgaWYgKHN0YXQgJiYgc3RhdC5pc0ZpbGUoKSkge1xuICAgIHJldHVybiBwYXRoO1xuICB9XG5cbiAgLy8gPHBhdGg+L2luZGV4LjxleHQ+XG4gIHBhdGggPSBqb2luKGRpciwgYmFzZW5hbWUoZmlsZSwgZXh0KSwgJ2luZGV4JyArIGV4dCk7XG4gIHN0YXQgPSB0cnlTdGF0KHBhdGgpO1xuXG4gIGlmIChzdGF0ICYmIHN0YXQuaXNGaWxlKCkpIHtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm4gYSBzdGF0LCBtYXliZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogQHJldHVybiB7ZnMuU3RhdHN9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHRyeVN0YXQocGF0aCkge1xuICBkZWJ1Zygnc3RhdCBcIiVzXCInLCBwYXRoKTtcblxuICB0cnkge1xuICAgIHJldHVybiBmcy5zdGF0U3luYyhwYXRoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cbiIsImZ1bmN0aW9uIHdlYnBhY2tFbXB0eUNvbnRleHQocmVxKSB7XG5cdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHR0aHJvdyBlO1xufVxud2VicGFja0VtcHR5Q29udGV4dC5rZXlzID0gZnVuY3Rpb24oKSB7IHJldHVybiBbXTsgfTtcbndlYnBhY2tFbXB0eUNvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7XG53ZWJwYWNrRW1wdHlDb250ZXh0LmlkID0gMjA0OyIsInZhciBjYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9jYXBhYmlsaXR5JylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciByZXNwb25zZSA9IHJlcXVpcmUoJy4vcmVzcG9uc2UnKVxudmFyIHN0cmVhbSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpXG52YXIgdG9BcnJheUJ1ZmZlciA9IHJlcXVpcmUoJ3RvLWFycmF5YnVmZmVyJylcblxudmFyIEluY29taW5nTWVzc2FnZSA9IHJlc3BvbnNlLkluY29taW5nTWVzc2FnZVxudmFyIHJTdGF0ZXMgPSByZXNwb25zZS5yZWFkeVN0YXRlc1xuXG5mdW5jdGlvbiBkZWNpZGVNb2RlIChwcmVmZXJCaW5hcnksIHVzZUZldGNoKSB7XG5cdGlmIChjYXBhYmlsaXR5LmZldGNoICYmIHVzZUZldGNoKSB7XG5cdFx0cmV0dXJuICdmZXRjaCdcblx0fSBlbHNlIGlmIChjYXBhYmlsaXR5Lm1vemNodW5rZWRhcnJheWJ1ZmZlcikge1xuXHRcdHJldHVybiAnbW96LWNodW5rZWQtYXJyYXlidWZmZXInXG5cdH0gZWxzZSBpZiAoY2FwYWJpbGl0eS5tc3N0cmVhbSkge1xuXHRcdHJldHVybiAnbXMtc3RyZWFtJ1xuXHR9IGVsc2UgaWYgKGNhcGFiaWxpdHkuYXJyYXlidWZmZXIgJiYgcHJlZmVyQmluYXJ5KSB7XG5cdFx0cmV0dXJuICdhcnJheWJ1ZmZlcidcblx0fSBlbHNlIGlmIChjYXBhYmlsaXR5LnZiQXJyYXkgJiYgcHJlZmVyQmluYXJ5KSB7XG5cdFx0cmV0dXJuICd0ZXh0OnZiYXJyYXknXG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuICd0ZXh0J1xuXHR9XG59XG5cbnZhciBDbGllbnRSZXF1ZXN0ID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0cykge1xuXHR2YXIgc2VsZiA9IHRoaXNcblx0c3RyZWFtLldyaXRhYmxlLmNhbGwoc2VsZilcblxuXHRzZWxmLl9vcHRzID0gb3B0c1xuXHRzZWxmLl9ib2R5ID0gW11cblx0c2VsZi5faGVhZGVycyA9IHt9XG5cdGlmIChvcHRzLmF1dGgpXG5cdFx0c2VsZi5zZXRIZWFkZXIoJ0F1dGhvcml6YXRpb24nLCAnQmFzaWMgJyArIG5ldyBCdWZmZXIob3B0cy5hdXRoKS50b1N0cmluZygnYmFzZTY0JykpXG5cdE9iamVjdC5rZXlzKG9wdHMuaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuXHRcdHNlbGYuc2V0SGVhZGVyKG5hbWUsIG9wdHMuaGVhZGVyc1tuYW1lXSlcblx0fSlcblxuXHR2YXIgcHJlZmVyQmluYXJ5XG5cdHZhciB1c2VGZXRjaCA9IHRydWVcblx0aWYgKG9wdHMubW9kZSA9PT0gJ2Rpc2FibGUtZmV0Y2gnIHx8ICgncmVxdWVzdFRpbWVvdXQnIGluIG9wdHMgJiYgIWNhcGFiaWxpdHkuYWJvcnRDb250cm9sbGVyKSkge1xuXHRcdC8vIElmIHRoZSB1c2Ugb2YgWEhSIHNob3VsZCBiZSBwcmVmZXJyZWQuIE5vdCB0eXBpY2FsbHkgbmVlZGVkLlxuXHRcdHVzZUZldGNoID0gZmFsc2Vcblx0XHRwcmVmZXJCaW5hcnkgPSB0cnVlXG5cdH0gZWxzZSBpZiAob3B0cy5tb2RlID09PSAncHJlZmVyLXN0cmVhbWluZycpIHtcblx0XHQvLyBJZiBzdHJlYW1pbmcgaXMgYSBoaWdoIHByaW9yaXR5IGJ1dCBiaW5hcnkgY29tcGF0aWJpbGl0eSBhbmRcblx0XHQvLyB0aGUgYWNjdXJhY3kgb2YgdGhlICdjb250ZW50LXR5cGUnIGhlYWRlciBhcmVuJ3Rcblx0XHRwcmVmZXJCaW5hcnkgPSBmYWxzZVxuXHR9IGVsc2UgaWYgKG9wdHMubW9kZSA9PT0gJ2FsbG93LXdyb25nLWNvbnRlbnQtdHlwZScpIHtcblx0XHQvLyBJZiBzdHJlYW1pbmcgaXMgbW9yZSBpbXBvcnRhbnQgdGhhbiBwcmVzZXJ2aW5nIHRoZSAnY29udGVudC10eXBlJyBoZWFkZXJcblx0XHRwcmVmZXJCaW5hcnkgPSAhY2FwYWJpbGl0eS5vdmVycmlkZU1pbWVUeXBlXG5cdH0gZWxzZSBpZiAoIW9wdHMubW9kZSB8fCBvcHRzLm1vZGUgPT09ICdkZWZhdWx0JyB8fCBvcHRzLm1vZGUgPT09ICdwcmVmZXItZmFzdCcpIHtcblx0XHQvLyBVc2UgYmluYXJ5IGlmIHRleHQgc3RyZWFtaW5nIG1heSBjb3JydXB0IGRhdGEgb3IgdGhlIGNvbnRlbnQtdHlwZSBoZWFkZXIsIG9yIGZvciBzcGVlZFxuXHRcdHByZWZlckJpbmFyeSA9IHRydWVcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIG9wdHMubW9kZScpXG5cdH1cblx0c2VsZi5fbW9kZSA9IGRlY2lkZU1vZGUocHJlZmVyQmluYXJ5LCB1c2VGZXRjaClcblx0c2VsZi5fZmV0Y2hUaW1lciA9IG51bGxcblxuXHRzZWxmLm9uKCdmaW5pc2gnLCBmdW5jdGlvbiAoKSB7XG5cdFx0c2VsZi5fb25GaW5pc2goKVxuXHR9KVxufVxuXG5pbmhlcml0cyhDbGllbnRSZXF1ZXN0LCBzdHJlYW0uV3JpdGFibGUpXG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldEhlYWRlciA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblx0dmFyIGxvd2VyTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKVxuXHQvLyBUaGlzIGNoZWNrIGlzIG5vdCBuZWNlc3NhcnksIGJ1dCBpdCBwcmV2ZW50cyB3YXJuaW5ncyBmcm9tIGJyb3dzZXJzIGFib3V0IHNldHRpbmcgdW5zYWZlXG5cdC8vIGhlYWRlcnMuIFRvIGJlIGhvbmVzdCBJJ20gbm90IGVudGlyZWx5IHN1cmUgaGlkaW5nIHRoZXNlIHdhcm5pbmdzIGlzIGEgZ29vZCB0aGluZywgYnV0XG5cdC8vIGh0dHAtYnJvd3NlcmlmeSBkaWQgaXQsIHNvIEkgd2lsbCB0b28uXG5cdGlmICh1bnNhZmVIZWFkZXJzLmluZGV4T2YobG93ZXJOYW1lKSAhPT0gLTEpXG5cdFx0cmV0dXJuXG5cblx0c2VsZi5faGVhZGVyc1tsb3dlck5hbWVdID0ge1xuXHRcdG5hbWU6IG5hbWUsXG5cdFx0dmFsdWU6IHZhbHVlXG5cdH1cbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuZ2V0SGVhZGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0dmFyIGhlYWRlciA9IHRoaXMuX2hlYWRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXVxuXHRpZiAoaGVhZGVyKVxuXHRcdHJldHVybiBoZWFkZXIudmFsdWVcblx0cmV0dXJuIG51bGxcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUucmVtb3ZlSGVhZGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cdGRlbGV0ZSBzZWxmLl9oZWFkZXJzW25hbWUudG9Mb3dlckNhc2UoKV1cbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuX29uRmluaXNoID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblxuXHRpZiAoc2VsZi5fZGVzdHJveWVkKVxuXHRcdHJldHVyblxuXHR2YXIgb3B0cyA9IHNlbGYuX29wdHNcblxuXHR2YXIgaGVhZGVyc09iaiA9IHNlbGYuX2hlYWRlcnNcblx0dmFyIGJvZHkgPSBudWxsXG5cdGlmIChvcHRzLm1ldGhvZCAhPT0gJ0dFVCcgJiYgb3B0cy5tZXRob2QgIT09ICdIRUFEJykge1xuXHRcdGlmIChjYXBhYmlsaXR5LmFycmF5YnVmZmVyKSB7XG5cdFx0XHRib2R5ID0gdG9BcnJheUJ1ZmZlcihCdWZmZXIuY29uY2F0KHNlbGYuX2JvZHkpKVxuXHRcdH0gZWxzZSBpZiAoY2FwYWJpbGl0eS5ibG9iQ29uc3RydWN0b3IpIHtcblx0XHRcdGJvZHkgPSBuZXcgZ2xvYmFsLkJsb2Ioc2VsZi5fYm9keS5tYXAoZnVuY3Rpb24gKGJ1ZmZlcikge1xuXHRcdFx0XHRyZXR1cm4gdG9BcnJheUJ1ZmZlcihidWZmZXIpXG5cdFx0XHR9KSwge1xuXHRcdFx0XHR0eXBlOiAoaGVhZGVyc09ialsnY29udGVudC10eXBlJ10gfHwge30pLnZhbHVlIHx8ICcnXG5cdFx0XHR9KVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBnZXQgdXRmOCBzdHJpbmdcblx0XHRcdGJvZHkgPSBCdWZmZXIuY29uY2F0KHNlbGYuX2JvZHkpLnRvU3RyaW5nKClcblx0XHR9XG5cdH1cblxuXHQvLyBjcmVhdGUgZmxhdHRlbmVkIGxpc3Qgb2YgaGVhZGVyc1xuXHR2YXIgaGVhZGVyc0xpc3QgPSBbXVxuXHRPYmplY3Qua2V5cyhoZWFkZXJzT2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXlOYW1lKSB7XG5cdFx0dmFyIG5hbWUgPSBoZWFkZXJzT2JqW2tleU5hbWVdLm5hbWVcblx0XHR2YXIgdmFsdWUgPSBoZWFkZXJzT2JqW2tleU5hbWVdLnZhbHVlXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHR2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG5cdFx0XHRcdGhlYWRlcnNMaXN0LnB1c2goW25hbWUsIHZdKVxuXHRcdFx0fSlcblx0XHR9IGVsc2Uge1xuXHRcdFx0aGVhZGVyc0xpc3QucHVzaChbbmFtZSwgdmFsdWVdKVxuXHRcdH1cblx0fSlcblxuXHRpZiAoc2VsZi5fbW9kZSA9PT0gJ2ZldGNoJykge1xuXHRcdHZhciBzaWduYWwgPSBudWxsXG5cdFx0dmFyIGZldGNoVGltZXIgPSBudWxsXG5cdFx0aWYgKGNhcGFiaWxpdHkuYWJvcnRDb250cm9sbGVyKSB7XG5cdFx0XHR2YXIgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKVxuXHRcdFx0c2lnbmFsID0gY29udHJvbGxlci5zaWduYWxcblx0XHRcdHNlbGYuX2ZldGNoQWJvcnRDb250cm9sbGVyID0gY29udHJvbGxlclxuXG5cdFx0XHRpZiAoJ3JlcXVlc3RUaW1lb3V0JyBpbiBvcHRzICYmIG9wdHMucmVxdWVzdFRpbWVvdXQgIT09IDApIHtcblx0XHRcdFx0c2VsZi5fZmV0Y2hUaW1lciA9IGdsb2JhbC5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRzZWxmLmVtaXQoJ3JlcXVlc3RUaW1lb3V0Jylcblx0XHRcdFx0XHRpZiAoc2VsZi5fZmV0Y2hBYm9ydENvbnRyb2xsZXIpXG5cdFx0XHRcdFx0XHRzZWxmLl9mZXRjaEFib3J0Q29udHJvbGxlci5hYm9ydCgpXG5cdFx0XHRcdH0sIG9wdHMucmVxdWVzdFRpbWVvdXQpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Z2xvYmFsLmZldGNoKHNlbGYuX29wdHMudXJsLCB7XG5cdFx0XHRtZXRob2Q6IHNlbGYuX29wdHMubWV0aG9kLFxuXHRcdFx0aGVhZGVyczogaGVhZGVyc0xpc3QsXG5cdFx0XHRib2R5OiBib2R5IHx8IHVuZGVmaW5lZCxcblx0XHRcdG1vZGU6ICdjb3JzJyxcblx0XHRcdGNyZWRlbnRpYWxzOiBvcHRzLndpdGhDcmVkZW50aWFscyA/ICdpbmNsdWRlJyA6ICdzYW1lLW9yaWdpbicsXG5cdFx0XHRzaWduYWw6IHNpZ25hbFxuXHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdFx0XHRzZWxmLl9mZXRjaFJlc3BvbnNlID0gcmVzcG9uc2Vcblx0XHRcdHNlbGYuX2Nvbm5lY3QoKVxuXHRcdH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcblx0XHRcdGdsb2JhbC5jbGVhclRpbWVvdXQoc2VsZi5fZmV0Y2hUaW1lcilcblx0XHRcdGlmICghc2VsZi5fZGVzdHJveWVkKVxuXHRcdFx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgcmVhc29uKVxuXHRcdH0pXG5cdH0gZWxzZSB7XG5cdFx0dmFyIHhociA9IHNlbGYuX3hociA9IG5ldyBnbG9iYWwuWE1MSHR0cFJlcXVlc3QoKVxuXHRcdHRyeSB7XG5cdFx0XHR4aHIub3BlbihzZWxmLl9vcHRzLm1ldGhvZCwgc2VsZi5fb3B0cy51cmwsIHRydWUpXG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0XHRcdH0pXG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cblx0XHQvLyBDYW4ndCBzZXQgcmVzcG9uc2VUeXBlIG9uIHJlYWxseSBvbGQgYnJvd3NlcnNcblx0XHRpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyKVxuXHRcdFx0eGhyLnJlc3BvbnNlVHlwZSA9IHNlbGYuX21vZGUuc3BsaXQoJzonKVswXVxuXG5cdFx0aWYgKCd3aXRoQ3JlZGVudGlhbHMnIGluIHhocilcblx0XHRcdHhoci53aXRoQ3JlZGVudGlhbHMgPSAhIW9wdHMud2l0aENyZWRlbnRpYWxzXG5cblx0XHRpZiAoc2VsZi5fbW9kZSA9PT0gJ3RleHQnICYmICdvdmVycmlkZU1pbWVUeXBlJyBpbiB4aHIpXG5cdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSgndGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZCcpXG5cblx0XHRpZiAoJ3JlcXVlc3RUaW1lb3V0JyBpbiBvcHRzKSB7XG5cdFx0XHR4aHIudGltZW91dCA9IG9wdHMucmVxdWVzdFRpbWVvdXRcblx0XHRcdHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHNlbGYuZW1pdCgncmVxdWVzdFRpbWVvdXQnKVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGhlYWRlcnNMaXN0LmZvckVhY2goZnVuY3Rpb24gKGhlYWRlcikge1xuXHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG5cdFx0fSlcblxuXHRcdHNlbGYuX3Jlc3BvbnNlID0gbnVsbFxuXHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRzd2l0Y2ggKHhoci5yZWFkeVN0YXRlKSB7XG5cdFx0XHRcdGNhc2UgclN0YXRlcy5MT0FESU5HOlxuXHRcdFx0XHRjYXNlIHJTdGF0ZXMuRE9ORTpcblx0XHRcdFx0XHRzZWxmLl9vblhIUlByb2dyZXNzKClcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBOZWNlc3NhcnkgZm9yIHN0cmVhbWluZyBpbiBGaXJlZm94LCBzaW5jZSB4aHIucmVzcG9uc2UgaXMgT05MWSBkZWZpbmVkXG5cdFx0Ly8gaW4gb25wcm9ncmVzcywgbm90IGluIG9ucmVhZHlzdGF0ZWNoYW5nZSB3aXRoIHhoci5yZWFkeVN0YXRlID0gM1xuXHRcdGlmIChzZWxmLl9tb2RlID09PSAnbW96LWNodW5rZWQtYXJyYXlidWZmZXInKSB7XG5cdFx0XHR4aHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5fb25YSFJQcm9ncmVzcygpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0eGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAoc2VsZi5fZGVzdHJveWVkKVxuXHRcdFx0XHRyZXR1cm5cblx0XHRcdHNlbGYuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ1hIUiBlcnJvcicpKVxuXHRcdH1cblxuXHRcdHRyeSB7XG5cdFx0XHR4aHIuc2VuZChib2R5KVxuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0cHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpXG5cdFx0XHR9KVxuXHRcdFx0cmV0dXJuXG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHhoci5zdGF0dXMgaXMgcmVhZGFibGUgYW5kIG5vbi16ZXJvLCBpbmRpY2F0aW5nIG5vIGVycm9yLlxuICogRXZlbiB0aG91Z2ggdGhlIHNwZWMgc2F5cyBpdCBzaG91bGQgYmUgYXZhaWxhYmxlIGluIHJlYWR5U3RhdGUgMyxcbiAqIGFjY2Vzc2luZyBpdCB0aHJvd3MgYW4gZXhjZXB0aW9uIGluIElFOFxuICovXG5mdW5jdGlvbiBzdGF0dXNWYWxpZCAoeGhyKSB7XG5cdHRyeSB7XG5cdFx0dmFyIHN0YXR1cyA9IHhoci5zdGF0dXNcblx0XHRyZXR1cm4gKHN0YXR1cyAhPT0gbnVsbCAmJiBzdGF0dXMgIT09IDApXG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2Vcblx0fVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5fb25YSFJQcm9ncmVzcyA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cblx0aWYgKCFzdGF0dXNWYWxpZChzZWxmLl94aHIpIHx8IHNlbGYuX2Rlc3Ryb3llZClcblx0XHRyZXR1cm5cblxuXHRpZiAoIXNlbGYuX3Jlc3BvbnNlKVxuXHRcdHNlbGYuX2Nvbm5lY3QoKVxuXG5cdHNlbGYuX3Jlc3BvbnNlLl9vblhIUlByb2dyZXNzKClcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuX2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdGlmIChzZWxmLl9kZXN0cm95ZWQpXG5cdFx0cmV0dXJuXG5cblx0c2VsZi5fcmVzcG9uc2UgPSBuZXcgSW5jb21pbmdNZXNzYWdlKHNlbGYuX3hociwgc2VsZi5fZmV0Y2hSZXNwb25zZSwgc2VsZi5fbW9kZSwgc2VsZi5fZmV0Y2hUaW1lcilcblx0c2VsZi5fcmVzcG9uc2Uub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7XG5cdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0fSlcblxuXHRzZWxmLmVtaXQoJ3Jlc3BvbnNlJywgc2VsZi5fcmVzcG9uc2UpXG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdHNlbGYuX2JvZHkucHVzaChjaHVuaylcblx0Y2IoKVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5hYm9ydCA9IENsaWVudFJlcXVlc3QucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXHRzZWxmLl9kZXN0cm95ZWQgPSB0cnVlXG5cdGdsb2JhbC5jbGVhclRpbWVvdXQoc2VsZi5fZmV0Y2hUaW1lcilcblx0aWYgKHNlbGYuX3Jlc3BvbnNlKVxuXHRcdHNlbGYuX3Jlc3BvbnNlLl9kZXN0cm95ZWQgPSB0cnVlXG5cdGlmIChzZWxmLl94aHIpXG5cdFx0c2VsZi5feGhyLmFib3J0KClcblx0ZWxzZSBpZiAoc2VsZi5fZmV0Y2hBYm9ydENvbnRyb2xsZXIpXG5cdFx0c2VsZi5fZmV0Y2hBYm9ydENvbnRyb2xsZXIuYWJvcnQoKVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoZGF0YSwgZW5jb2RpbmcsIGNiKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXHRpZiAodHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbicpIHtcblx0XHRjYiA9IGRhdGFcblx0XHRkYXRhID0gdW5kZWZpbmVkXG5cdH1cblxuXHRzdHJlYW0uV3JpdGFibGUucHJvdG90eXBlLmVuZC5jYWxsKHNlbGYsIGRhdGEsIGVuY29kaW5nLCBjYilcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuZmx1c2hIZWFkZXJzID0gZnVuY3Rpb24gKCkge31cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7fVxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuc2V0Tm9EZWxheSA9IGZ1bmN0aW9uICgpIHt9XG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5zZXRTb2NrZXRLZWVwQWxpdmUgPSBmdW5jdGlvbiAoKSB7fVxuXG4vLyBUYWtlbiBmcm9tIGh0dHA6Ly93d3cudzMub3JnL1RSL1hNTEh0dHBSZXF1ZXN0LyN0aGUtc2V0cmVxdWVzdGhlYWRlciUyOCUyOS1tZXRob2RcbnZhciB1bnNhZmVIZWFkZXJzID0gW1xuXHQnYWNjZXB0LWNoYXJzZXQnLFxuXHQnYWNjZXB0LWVuY29kaW5nJyxcblx0J2FjY2Vzcy1jb250cm9sLXJlcXVlc3QtaGVhZGVycycsXG5cdCdhY2Nlc3MtY29udHJvbC1yZXF1ZXN0LW1ldGhvZCcsXG5cdCdjb25uZWN0aW9uJyxcblx0J2NvbnRlbnQtbGVuZ3RoJyxcblx0J2Nvb2tpZScsXG5cdCdjb29raWUyJyxcblx0J2RhdGUnLFxuXHQnZG50Jyxcblx0J2V4cGVjdCcsXG5cdCdob3N0Jyxcblx0J2tlZXAtYWxpdmUnLFxuXHQnb3JpZ2luJyxcblx0J3JlZmVyZXInLFxuXHQndGUnLFxuXHQndHJhaWxlcicsXG5cdCd0cmFuc2Zlci1lbmNvZGluZycsXG5cdCd1cGdyYWRlJyxcblx0J3ZpYSdcbl1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYnVmKSB7XG5cdC8vIElmIHRoZSBidWZmZXIgaXMgYmFja2VkIGJ5IGEgVWludDhBcnJheSwgYSBmYXN0ZXIgdmVyc2lvbiB3aWxsIHdvcmtcblx0aWYgKGJ1ZiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcblx0XHQvLyBJZiB0aGUgYnVmZmVyIGlzbid0IGEgc3ViYXJyYXksIHJldHVybiB0aGUgdW5kZXJseWluZyBBcnJheUJ1ZmZlclxuXHRcdGlmIChidWYuYnl0ZU9mZnNldCA9PT0gMCAmJiBidWYuYnl0ZUxlbmd0aCA9PT0gYnVmLmJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gYnVmLmJ1ZmZlclxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIGJ1Zi5idWZmZXIuc2xpY2UgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIHRvIGdldCBhIHByb3BlciBjb3B5XG5cdFx0XHRyZXR1cm4gYnVmLmJ1ZmZlci5zbGljZShidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVPZmZzZXQgKyBidWYuYnl0ZUxlbmd0aClcblx0XHR9XG5cdH1cblxuXHRpZiAoQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcblx0XHQvLyBUaGlzIGlzIHRoZSBzbG93IHZlcnNpb24gdGhhdCB3aWxsIHdvcmsgd2l0aCBhbnkgQnVmZmVyXG5cdFx0Ly8gaW1wbGVtZW50YXRpb24gKGV2ZW4gaW4gb2xkIGJyb3dzZXJzKVxuXHRcdHZhciBhcnJheUNvcHkgPSBuZXcgVWludDhBcnJheShidWYubGVuZ3RoKVxuXHRcdHZhciBsZW4gPSBidWYubGVuZ3RoXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0YXJyYXlDb3B5W2ldID0gYnVmW2ldXG5cdFx0fVxuXHRcdHJldHVybiBhcnJheUNvcHkuYnVmZmVyXG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcblx0fVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBleHRlbmRcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gZXh0ZW5kKCkge1xuICAgIHZhciB0YXJnZXQgPSB7fVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXVxuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcIjEwMFwiOiBcIkNvbnRpbnVlXCIsXG4gIFwiMTAxXCI6IFwiU3dpdGNoaW5nIFByb3RvY29sc1wiLFxuICBcIjEwMlwiOiBcIlByb2Nlc3NpbmdcIixcbiAgXCIyMDBcIjogXCJPS1wiLFxuICBcIjIwMVwiOiBcIkNyZWF0ZWRcIixcbiAgXCIyMDJcIjogXCJBY2NlcHRlZFwiLFxuICBcIjIwM1wiOiBcIk5vbi1BdXRob3JpdGF0aXZlIEluZm9ybWF0aW9uXCIsXG4gIFwiMjA0XCI6IFwiTm8gQ29udGVudFwiLFxuICBcIjIwNVwiOiBcIlJlc2V0IENvbnRlbnRcIixcbiAgXCIyMDZcIjogXCJQYXJ0aWFsIENvbnRlbnRcIixcbiAgXCIyMDdcIjogXCJNdWx0aS1TdGF0dXNcIixcbiAgXCIyMDhcIjogXCJBbHJlYWR5IFJlcG9ydGVkXCIsXG4gIFwiMjI2XCI6IFwiSU0gVXNlZFwiLFxuICBcIjMwMFwiOiBcIk11bHRpcGxlIENob2ljZXNcIixcbiAgXCIzMDFcIjogXCJNb3ZlZCBQZXJtYW5lbnRseVwiLFxuICBcIjMwMlwiOiBcIkZvdW5kXCIsXG4gIFwiMzAzXCI6IFwiU2VlIE90aGVyXCIsXG4gIFwiMzA0XCI6IFwiTm90IE1vZGlmaWVkXCIsXG4gIFwiMzA1XCI6IFwiVXNlIFByb3h5XCIsXG4gIFwiMzA3XCI6IFwiVGVtcG9yYXJ5IFJlZGlyZWN0XCIsXG4gIFwiMzA4XCI6IFwiUGVybWFuZW50IFJlZGlyZWN0XCIsXG4gIFwiNDAwXCI6IFwiQmFkIFJlcXVlc3RcIixcbiAgXCI0MDFcIjogXCJVbmF1dGhvcml6ZWRcIixcbiAgXCI0MDJcIjogXCJQYXltZW50IFJlcXVpcmVkXCIsXG4gIFwiNDAzXCI6IFwiRm9yYmlkZGVuXCIsXG4gIFwiNDA0XCI6IFwiTm90IEZvdW5kXCIsXG4gIFwiNDA1XCI6IFwiTWV0aG9kIE5vdCBBbGxvd2VkXCIsXG4gIFwiNDA2XCI6IFwiTm90IEFjY2VwdGFibGVcIixcbiAgXCI0MDdcIjogXCJQcm94eSBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZFwiLFxuICBcIjQwOFwiOiBcIlJlcXVlc3QgVGltZW91dFwiLFxuICBcIjQwOVwiOiBcIkNvbmZsaWN0XCIsXG4gIFwiNDEwXCI6IFwiR29uZVwiLFxuICBcIjQxMVwiOiBcIkxlbmd0aCBSZXF1aXJlZFwiLFxuICBcIjQxMlwiOiBcIlByZWNvbmRpdGlvbiBGYWlsZWRcIixcbiAgXCI0MTNcIjogXCJQYXlsb2FkIFRvbyBMYXJnZVwiLFxuICBcIjQxNFwiOiBcIlVSSSBUb28gTG9uZ1wiLFxuICBcIjQxNVwiOiBcIlVuc3VwcG9ydGVkIE1lZGlhIFR5cGVcIixcbiAgXCI0MTZcIjogXCJSYW5nZSBOb3QgU2F0aXNmaWFibGVcIixcbiAgXCI0MTdcIjogXCJFeHBlY3RhdGlvbiBGYWlsZWRcIixcbiAgXCI0MThcIjogXCJJJ20gYSB0ZWFwb3RcIixcbiAgXCI0MjFcIjogXCJNaXNkaXJlY3RlZCBSZXF1ZXN0XCIsXG4gIFwiNDIyXCI6IFwiVW5wcm9jZXNzYWJsZSBFbnRpdHlcIixcbiAgXCI0MjNcIjogXCJMb2NrZWRcIixcbiAgXCI0MjRcIjogXCJGYWlsZWQgRGVwZW5kZW5jeVwiLFxuICBcIjQyNVwiOiBcIlVub3JkZXJlZCBDb2xsZWN0aW9uXCIsXG4gIFwiNDI2XCI6IFwiVXBncmFkZSBSZXF1aXJlZFwiLFxuICBcIjQyOFwiOiBcIlByZWNvbmRpdGlvbiBSZXF1aXJlZFwiLFxuICBcIjQyOVwiOiBcIlRvbyBNYW55IFJlcXVlc3RzXCIsXG4gIFwiNDMxXCI6IFwiUmVxdWVzdCBIZWFkZXIgRmllbGRzIFRvbyBMYXJnZVwiLFxuICBcIjQ1MVwiOiBcIlVuYXZhaWxhYmxlIEZvciBMZWdhbCBSZWFzb25zXCIsXG4gIFwiNTAwXCI6IFwiSW50ZXJuYWwgU2VydmVyIEVycm9yXCIsXG4gIFwiNTAxXCI6IFwiTm90IEltcGxlbWVudGVkXCIsXG4gIFwiNTAyXCI6IFwiQmFkIEdhdGV3YXlcIixcbiAgXCI1MDNcIjogXCJTZXJ2aWNlIFVuYXZhaWxhYmxlXCIsXG4gIFwiNTA0XCI6IFwiR2F0ZXdheSBUaW1lb3V0XCIsXG4gIFwiNTA1XCI6IFwiSFRUUCBWZXJzaW9uIE5vdCBTdXBwb3J0ZWRcIixcbiAgXCI1MDZcIjogXCJWYXJpYW50IEFsc28gTmVnb3RpYXRlc1wiLFxuICBcIjUwN1wiOiBcIkluc3VmZmljaWVudCBTdG9yYWdlXCIsXG4gIFwiNTA4XCI6IFwiTG9vcCBEZXRlY3RlZFwiLFxuICBcIjUwOVwiOiBcIkJhbmR3aWR0aCBMaW1pdCBFeGNlZWRlZFwiLFxuICBcIjUxMFwiOiBcIk5vdCBFeHRlbmRlZFwiLFxuICBcIjUxMVwiOiBcIk5ldHdvcmsgQXV0aGVudGljYXRpb24gUmVxdWlyZWRcIlxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gIH1cbn1cbmlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuYWxsb2MgJiYgQnVmZmVyLmFsbG9jVW5zYWZlICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcbn0gZWxzZSB7XG4gIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXG4gIGV4cG9ydHMuQnVmZmVyID0gU2FmZUJ1ZmZlclxufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBDb3B5IHN0YXRpYyBtZXRob2RzIGZyb20gQnVmZmVyXG5jb3B5UHJvcHMoQnVmZmVyLCBTYWZlQnVmZmVyKVxuXG5TYWZlQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cblNhZmVCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHZhciBidWYgPSBCdWZmZXIoc2l6ZSlcbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmZpbGwoZmlsbClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYnVmLmZpbGwoMClcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihzaXplKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gYnVmZmVyLlNsb3dCdWZmZXIoc2l6ZSlcbn1cbiIsIi8qIVxuICogaHR0cC1lcnJvcnNcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogQ29weXJpZ2h0KGMpIDIwMTYgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBkZXByZWNhdGUgPSByZXF1aXJlKCdkZXBkJykoJ2h0dHAtZXJyb3JzJylcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ3NldHByb3RvdHlwZW9mJylcbnZhciBzdGF0dXNlcyA9IHJlcXVpcmUoJ3N0YXR1c2VzJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciB0b0lkZW50aWZpZXIgPSByZXF1aXJlKCd0b2lkZW50aWZpZXInKVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlRXJyb3Jcbm1vZHVsZS5leHBvcnRzLkh0dHBFcnJvciA9IGNyZWF0ZUh0dHBFcnJvckNvbnN0cnVjdG9yKClcblxuLy8gUG9wdWxhdGUgZXhwb3J0cyBmb3IgYWxsIGNvbnN0cnVjdG9yc1xucG9wdWxhdGVDb25zdHJ1Y3RvckV4cG9ydHMobW9kdWxlLmV4cG9ydHMsIHN0YXR1c2VzLmNvZGVzLCBtb2R1bGUuZXhwb3J0cy5IdHRwRXJyb3IpXG5cbi8qKlxuICogR2V0IHRoZSBjb2RlIGNsYXNzIG9mIGEgc3RhdHVzIGNvZGUuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvZGVDbGFzcyAoc3RhdHVzKSB7XG4gIHJldHVybiBOdW1iZXIoU3RyaW5nKHN0YXR1cykuY2hhckF0KDApICsgJzAwJylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgSFRUUCBFcnJvci5cbiAqXG4gKiBAcmV0dXJucyB7RXJyb3J9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRXJyb3IgKCkge1xuICAvLyBzbyBtdWNoIGFyaXR5IGdvaW5nIG9uIH5fflxuICB2YXIgZXJyXG4gIHZhciBtc2dcbiAgdmFyIHN0YXR1cyA9IDUwMFxuICB2YXIgcHJvcHMgPSB7fVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBhcmcgPSBhcmd1bWVudHNbaV1cbiAgICBpZiAoYXJnIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIGVyciA9IGFyZ1xuICAgICAgc3RhdHVzID0gZXJyLnN0YXR1cyB8fCBlcnIuc3RhdHVzQ29kZSB8fCBzdGF0dXNcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIHN3aXRjaCAodHlwZW9mIGFyZykge1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgbXNnID0gYXJnXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICBzdGF0dXMgPSBhcmdcbiAgICAgICAgaWYgKGkgIT09IDApIHtcbiAgICAgICAgICBkZXByZWNhdGUoJ25vbi1maXJzdC1hcmd1bWVudCBzdGF0dXMgY29kZTsgcmVwbGFjZSB3aXRoIGNyZWF0ZUVycm9yKCcgKyBhcmcgKyAnLCAuLi4pJylcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgcHJvcHMgPSBhcmdcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIHN0YXR1cyA9PT0gJ251bWJlcicgJiYgKHN0YXR1cyA8IDQwMCB8fCBzdGF0dXMgPj0gNjAwKSkge1xuICAgIGRlcHJlY2F0ZSgnbm9uLWVycm9yIHN0YXR1cyBjb2RlOyB1c2Ugb25seSA0eHggb3IgNXh4IHN0YXR1cyBjb2RlcycpXG4gIH1cblxuICBpZiAodHlwZW9mIHN0YXR1cyAhPT0gJ251bWJlcicgfHxcbiAgICAoIXN0YXR1c2VzW3N0YXR1c10gJiYgKHN0YXR1cyA8IDQwMCB8fCBzdGF0dXMgPj0gNjAwKSkpIHtcbiAgICBzdGF0dXMgPSA1MDBcbiAgfVxuXG4gIC8vIGNvbnN0cnVjdG9yXG4gIHZhciBIdHRwRXJyb3IgPSBjcmVhdGVFcnJvcltzdGF0dXNdIHx8IGNyZWF0ZUVycm9yW2NvZGVDbGFzcyhzdGF0dXMpXVxuXG4gIGlmICghZXJyKSB7XG4gICAgLy8gY3JlYXRlIGVycm9yXG4gICAgZXJyID0gSHR0cEVycm9yXG4gICAgICA/IG5ldyBIdHRwRXJyb3IobXNnKVxuICAgICAgOiBuZXcgRXJyb3IobXNnIHx8IHN0YXR1c2VzW3N0YXR1c10pXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyLCBjcmVhdGVFcnJvcilcbiAgfVxuXG4gIGlmICghSHR0cEVycm9yIHx8ICEoZXJyIGluc3RhbmNlb2YgSHR0cEVycm9yKSB8fCBlcnIuc3RhdHVzICE9PSBzdGF0dXMpIHtcbiAgICAvLyBhZGQgcHJvcGVydGllcyB0byBnZW5lcmljIGVycm9yXG4gICAgZXJyLmV4cG9zZSA9IHN0YXR1cyA8IDUwMFxuICAgIGVyci5zdGF0dXMgPSBlcnIuc3RhdHVzQ29kZSA9IHN0YXR1c1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGtleSAhPT0gJ3N0YXR1cycgJiYga2V5ICE9PSAnc3RhdHVzQ29kZScpIHtcbiAgICAgIGVycltrZXldID0gcHJvcHNba2V5XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlcnJcbn1cblxuLyoqXG4gKiBDcmVhdGUgSFRUUCBlcnJvciBhYnN0cmFjdCBiYXNlIGNsYXNzLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVIdHRwRXJyb3JDb25zdHJ1Y3RvciAoKSB7XG4gIGZ1bmN0aW9uIEh0dHBFcnJvciAoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2Fubm90IGNvbnN0cnVjdCBhYnN0cmFjdCBjbGFzcycpXG4gIH1cblxuICBpbmhlcml0cyhIdHRwRXJyb3IsIEVycm9yKVxuXG4gIHJldHVybiBIdHRwRXJyb3Jcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjb25zdHJ1Y3RvciBmb3IgYSBjbGllbnQgZXJyb3IuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUNsaWVudEVycm9yQ29uc3RydWN0b3IgKEh0dHBFcnJvciwgbmFtZSwgY29kZSkge1xuICB2YXIgY2xhc3NOYW1lID0gbmFtZS5tYXRjaCgvRXJyb3IkLykgPyBuYW1lIDogbmFtZSArICdFcnJvcidcblxuICBmdW5jdGlvbiBDbGllbnRFcnJvciAobWVzc2FnZSkge1xuICAgIC8vIGNyZWF0ZSB0aGUgZXJyb3Igb2JqZWN0XG4gICAgdmFyIG1zZyA9IG1lc3NhZ2UgIT0gbnVsbCA/IG1lc3NhZ2UgOiBzdGF0dXNlc1tjb2RlXVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IobXNnKVxuXG4gICAgLy8gY2FwdHVyZSBhIHN0YWNrIHRyYWNlIHRvIHRoZSBjb25zdHJ1Y3Rpb24gcG9pbnRcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShlcnIsIENsaWVudEVycm9yKVxuXG4gICAgLy8gYWRqdXN0IHRoZSBbW1Byb3RvdHlwZV1dXG4gICAgc2V0UHJvdG90eXBlT2YoZXJyLCBDbGllbnRFcnJvci5wcm90b3R5cGUpXG5cbiAgICAvLyByZWRlZmluZSB0aGUgZXJyb3IgbWVzc2FnZVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnIsICdtZXNzYWdlJywge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBtc2csXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pXG5cbiAgICAvLyByZWRlZmluZSB0aGUgZXJyb3IgbmFtZVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnIsICduYW1lJywge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogY2xhc3NOYW1lLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KVxuXG4gICAgcmV0dXJuIGVyclxuICB9XG5cbiAgaW5oZXJpdHMoQ2xpZW50RXJyb3IsIEh0dHBFcnJvcilcbiAgbmFtZUZ1bmMoQ2xpZW50RXJyb3IsIGNsYXNzTmFtZSlcblxuICBDbGllbnRFcnJvci5wcm90b3R5cGUuc3RhdHVzID0gY29kZVxuICBDbGllbnRFcnJvci5wcm90b3R5cGUuc3RhdHVzQ29kZSA9IGNvZGVcbiAgQ2xpZW50RXJyb3IucHJvdG90eXBlLmV4cG9zZSA9IHRydWVcblxuICByZXR1cm4gQ2xpZW50RXJyb3Jcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjb25zdHJ1Y3RvciBmb3IgYSBzZXJ2ZXIgZXJyb3IuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVNlcnZlckVycm9yQ29uc3RydWN0b3IgKEh0dHBFcnJvciwgbmFtZSwgY29kZSkge1xuICB2YXIgY2xhc3NOYW1lID0gbmFtZS5tYXRjaCgvRXJyb3IkLykgPyBuYW1lIDogbmFtZSArICdFcnJvcidcblxuICBmdW5jdGlvbiBTZXJ2ZXJFcnJvciAobWVzc2FnZSkge1xuICAgIC8vIGNyZWF0ZSB0aGUgZXJyb3Igb2JqZWN0XG4gICAgdmFyIG1zZyA9IG1lc3NhZ2UgIT0gbnVsbCA/IG1lc3NhZ2UgOiBzdGF0dXNlc1tjb2RlXVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IobXNnKVxuXG4gICAgLy8gY2FwdHVyZSBhIHN0YWNrIHRyYWNlIHRvIHRoZSBjb25zdHJ1Y3Rpb24gcG9pbnRcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShlcnIsIFNlcnZlckVycm9yKVxuXG4gICAgLy8gYWRqdXN0IHRoZSBbW1Byb3RvdHlwZV1dXG4gICAgc2V0UHJvdG90eXBlT2YoZXJyLCBTZXJ2ZXJFcnJvci5wcm90b3R5cGUpXG5cbiAgICAvLyByZWRlZmluZSB0aGUgZXJyb3IgbWVzc2FnZVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnIsICdtZXNzYWdlJywge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBtc2csXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pXG5cbiAgICAvLyByZWRlZmluZSB0aGUgZXJyb3IgbmFtZVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnIsICduYW1lJywge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogY2xhc3NOYW1lLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KVxuXG4gICAgcmV0dXJuIGVyclxuICB9XG5cbiAgaW5oZXJpdHMoU2VydmVyRXJyb3IsIEh0dHBFcnJvcilcbiAgbmFtZUZ1bmMoU2VydmVyRXJyb3IsIGNsYXNzTmFtZSlcblxuICBTZXJ2ZXJFcnJvci5wcm90b3R5cGUuc3RhdHVzID0gY29kZVxuICBTZXJ2ZXJFcnJvci5wcm90b3R5cGUuc3RhdHVzQ29kZSA9IGNvZGVcbiAgU2VydmVyRXJyb3IucHJvdG90eXBlLmV4cG9zZSA9IGZhbHNlXG5cbiAgcmV0dXJuIFNlcnZlckVycm9yXG59XG5cbi8qKlxuICogU2V0IHRoZSBuYW1lIG9mIGEgZnVuY3Rpb24sIGlmIHBvc3NpYmxlLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBuYW1lRnVuYyAoZnVuYywgbmFtZSkge1xuICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZnVuYywgJ25hbWUnKVxuXG4gIGlmIChkZXNjICYmIGRlc2MuY29uZmlndXJhYmxlKSB7XG4gICAgZGVzYy52YWx1ZSA9IG5hbWVcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZnVuYywgJ25hbWUnLCBkZXNjKVxuICB9XG59XG5cbi8qKlxuICogUG9wdWxhdGUgdGhlIGV4cG9ydHMgb2JqZWN0IHdpdGggY29uc3RydWN0b3JzIGZvciBldmVyeSBlcnJvciBjbGFzcy5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcG9wdWxhdGVDb25zdHJ1Y3RvckV4cG9ydHMgKGV4cG9ydHMsIGNvZGVzLCBIdHRwRXJyb3IpIHtcbiAgY29kZXMuZm9yRWFjaChmdW5jdGlvbiBmb3JFYWNoQ29kZSAoY29kZSkge1xuICAgIHZhciBDb2RlRXJyb3JcbiAgICB2YXIgbmFtZSA9IHRvSWRlbnRpZmllcihzdGF0dXNlc1tjb2RlXSlcblxuICAgIHN3aXRjaCAoY29kZUNsYXNzKGNvZGUpKSB7XG4gICAgICBjYXNlIDQwMDpcbiAgICAgICAgQ29kZUVycm9yID0gY3JlYXRlQ2xpZW50RXJyb3JDb25zdHJ1Y3RvcihIdHRwRXJyb3IsIG5hbWUsIGNvZGUpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDUwMDpcbiAgICAgICAgQ29kZUVycm9yID0gY3JlYXRlU2VydmVyRXJyb3JDb25zdHJ1Y3RvcihIdHRwRXJyb3IsIG5hbWUsIGNvZGUpXG4gICAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgaWYgKENvZGVFcnJvcikge1xuICAgICAgLy8gZXhwb3J0IHRoZSBjb25zdHJ1Y3RvclxuICAgICAgZXhwb3J0c1tjb2RlXSA9IENvZGVFcnJvclxuICAgICAgZXhwb3J0c1tuYW1lXSA9IENvZGVFcnJvclxuICAgIH1cbiAgfSlcblxuICAvLyBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eVxuICBleHBvcnRzW1wiSSdtYXRlYXBvdFwiXSA9IGRlcHJlY2F0ZS5mdW5jdGlvbihleHBvcnRzLkltQVRlYXBvdCxcbiAgICAnXCJJXFwnbWF0ZWFwb3RcIjsgdXNlIFwiSW1BVGVhcG90XCIgaW5zdGVhZCcpXG59XG4iLCIvKiFcbiAqIGRlc3Ryb3lcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIFJlYWRTdHJlYW0gPSByZXF1aXJlKCdmcycpLlJlYWRTdHJlYW1cbnZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZGVzdHJveVxuXG4vKipcbiAqIERlc3Ryb3kgYSBzdHJlYW0uXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHN0cmVhbVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlc3Ryb3koc3RyZWFtKSB7XG4gIGlmIChzdHJlYW0gaW5zdGFuY2VvZiBSZWFkU3RyZWFtKSB7XG4gICAgcmV0dXJuIGRlc3Ryb3lSZWFkU3RyZWFtKHN0cmVhbSlcbiAgfVxuXG4gIGlmICghKHN0cmVhbSBpbnN0YW5jZW9mIFN0cmVhbSkpIHtcbiAgICByZXR1cm4gc3RyZWFtXG4gIH1cblxuICBpZiAodHlwZW9mIHN0cmVhbS5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc3RyZWFtLmRlc3Ryb3koKVxuICB9XG5cbiAgcmV0dXJuIHN0cmVhbVxufVxuXG4vKipcbiAqIERlc3Ryb3kgYSBSZWFkU3RyZWFtLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdHJlYW1cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZGVzdHJveVJlYWRTdHJlYW0oc3RyZWFtKSB7XG4gIHN0cmVhbS5kZXN0cm95KClcblxuICBpZiAodHlwZW9mIHN0cmVhbS5jbG9zZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIG5vZGUuanMgY29yZSBidWcgd29yay1hcm91bmRcbiAgICBzdHJlYW0ub24oJ29wZW4nLCBvbk9wZW5DbG9zZSlcbiAgfVxuXG4gIHJldHVybiBzdHJlYW1cbn1cblxuLyoqXG4gKiBPbiBvcGVuIGhhbmRsZXIgdG8gY2xvc2Ugc3RyZWFtLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBvbk9wZW5DbG9zZSgpIHtcbiAgaWYgKHR5cGVvZiB0aGlzLmZkID09PSAnbnVtYmVyJykge1xuICAgIC8vIGFjdHVhbGx5IGNsb3NlIGRvd24gdGhlIGZkXG4gICAgdGhpcy5jbG9zZSgpXG4gIH1cbn1cbiIsIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTAsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGRlcml2ZWQgZnJvbSBzaGExLmpzIG9mIHRoZSBzYW1lIHJlcG9zaXRvcnkuXG4gKiBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIFNIQS0wIGFuZCBTSEEtMSBpcyBqdXN0IGEgYml0d2lzZSByb3RhdGUgbGVmdFxuICogb3BlcmF0aW9uIHdhcyBhZGRlZC5cbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NWE4Mjc5OTksIDB4NmVkOWViYTEsIDB4OGYxYmJjZGMgfCAwLCAweGNhNjJjMWQ2IHwgMFxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg4MClcblxuZnVuY3Rpb24gU2hhICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGEsIEhhc2gpXG5cblNoYS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjBcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiByb3RsNSAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDUpIHwgKG51bSA+Pj4gMjcpXG59XG5cbmZ1bmN0aW9uIHJvdGwzMCAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDMwKSB8IChudW0gPj4+IDIpXG59XG5cbmZ1bmN0aW9uIGZ0IChzLCBiLCBjLCBkKSB7XG4gIGlmIChzID09PSAwKSByZXR1cm4gKGIgJiBjKSB8ICgofmIpICYgZClcbiAgaWYgKHMgPT09IDIpIHJldHVybiAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZClcbiAgcmV0dXJuIGIgXiBjIF4gZFxufVxuXG5TaGEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2EgfCAwXG4gIHZhciBiID0gdGhpcy5fYiB8IDBcbiAgdmFyIGMgPSB0aGlzLl9jIHwgMFxuICB2YXIgZCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlID0gdGhpcy5fZSB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICBmb3IgKDsgaSA8IDgwOyArK2kpIFdbaV0gPSBXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgKytqKSB7XG4gICAgdmFyIHMgPSB+fihqIC8gMjApXG4gICAgdmFyIHQgPSAocm90bDUoYSkgKyBmdChzLCBiLCBjLCBkKSArIGUgKyBXW2pdICsgS1tzXSkgfCAwXG5cbiAgICBlID0gZFxuICAgIGQgPSBjXG4gICAgYyA9IHJvdGwzMChiKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjApXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGFcbiIsIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTEsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBWZXJzaW9uIDIuMWEgQ29weXJpZ2h0IFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDIuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBkZXRhaWxzLlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYyB8IDAsIDB4Y2E2MmMxZDYgfCAwXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGExICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGExLCBIYXNoKVxuXG5TaGExLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxuICB0aGlzLl9lID0gMHhjM2QyZTFmMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIHJvdGwxIChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgMSkgfCAobnVtID4+PiAzMSlcbn1cblxuZnVuY3Rpb24gcm90bDUgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCA1KSB8IChudW0gPj4+IDI3KVxufVxuXG5mdW5jdGlvbiByb3RsMzAgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAzMCkgfCAobnVtID4+PiAyKVxufVxuXG5mdW5jdGlvbiBmdCAocywgYiwgYywgZCkge1xuICBpZiAocyA9PT0gMCkgcmV0dXJuIChiICYgYykgfCAoKH5iKSAmIGQpXG4gIGlmIChzID09PSAyKSByZXR1cm4gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpXG4gIHJldHVybiBiIF4gYyBeIGRcbn1cblxuU2hhMS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgODA7ICsraSkgV1tpXSA9IHJvdGwxKFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl0pXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgKytqKSB7XG4gICAgdmFyIHMgPSB+fihqIC8gMjApXG4gICAgdmFyIHQgPSAocm90bDUoYSkgKyBmdChzLCBiLCBjLCBkKSArIGUgKyBXW2pdICsgS1tzXSkgfCAwXG5cbiAgICBlID0gZFxuICAgIGQgPSBjXG4gICAgYyA9IHJvdGwzMChiKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhMS5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIwKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EgfCAwLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iIHwgMCwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYyB8IDAsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QgfCAwLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSB8IDAsIDE2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMVxuIiwiLyoqXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTI1NiwgYXMgZGVmaW5lZFxuICogaW4gRklQUyAxODAtMlxuICogVmVyc2lvbiAyLjItYmV0YSBDb3B5cmlnaHQgQW5nZWwgTWFyaW4sIFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTaGEyNTYgPSByZXF1aXJlKCcuL3NoYTI1NicpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIFcgPSBuZXcgQXJyYXkoNjQpXG5cbmZ1bmN0aW9uIFNoYTIyNCAoKSB7XG4gIHRoaXMuaW5pdCgpXG5cbiAgdGhpcy5fdyA9IFcgLy8gbmV3IEFycmF5KDY0KVxuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTIyNCwgU2hhMjU2KVxuXG5TaGEyMjQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweGMxMDU5ZWQ4XG4gIHRoaXMuX2IgPSAweDM2N2NkNTA3XG4gIHRoaXMuX2MgPSAweDMwNzBkZDE3XG4gIHRoaXMuX2QgPSAweGY3MGU1OTM5XG4gIHRoaXMuX2UgPSAweGZmYzAwYjMxXG4gIHRoaXMuX2YgPSAweDY4NTgxNTExXG4gIHRoaXMuX2cgPSAweDY0Zjk4ZmE3XG4gIHRoaXMuX2ggPSAweGJlZmE0ZmE0XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuU2hhMjI0LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjgpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEyMjRcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTSEE1MTIgPSByZXF1aXJlKCcuL3NoYTUxMicpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIFcgPSBuZXcgQXJyYXkoMTYwKVxuXG5mdW5jdGlvbiBTaGEzODQgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCAxMjgsIDExMilcbn1cblxuaW5oZXJpdHMoU2hhMzg0LCBTSEE1MTIpXG5cblNoYTM4NC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYWggPSAweGNiYmI5ZDVkXG4gIHRoaXMuX2JoID0gMHg2MjlhMjkyYVxuICB0aGlzLl9jaCA9IDB4OTE1OTAxNWFcbiAgdGhpcy5fZGggPSAweDE1MmZlY2Q4XG4gIHRoaXMuX2VoID0gMHg2NzMzMjY2N1xuICB0aGlzLl9maCA9IDB4OGViNDRhODdcbiAgdGhpcy5fZ2ggPSAweGRiMGMyZTBkXG4gIHRoaXMuX2hoID0gMHg0N2I1NDgxZFxuXG4gIHRoaXMuX2FsID0gMHhjMTA1OWVkOFxuICB0aGlzLl9ibCA9IDB4MzY3Y2Q1MDdcbiAgdGhpcy5fY2wgPSAweDMwNzBkZDE3XG4gIHRoaXMuX2RsID0gMHhmNzBlNTkzOVxuICB0aGlzLl9lbCA9IDB4ZmZjMDBiMzFcbiAgdGhpcy5fZmwgPSAweDY4NTgxNTExXG4gIHRoaXMuX2dsID0gMHg2NGY5OGZhN1xuICB0aGlzLl9obCA9IDB4YmVmYTRmYTRcblxuICByZXR1cm4gdGhpc1xufVxuXG5TaGEzODQucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0OClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2FoLCB0aGlzLl9hbCwgMClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2JoLCB0aGlzLl9ibCwgOClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2NoLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kaCwgdGhpcy5fZGwsIDI0KVxuICB3cml0ZUludDY0QkUodGhpcy5fZWgsIHRoaXMuX2VsLCAzMilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2ZoLCB0aGlzLl9mbCwgNDApXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEzODRcbiIsIid1c2Ugc3RyaWN0J1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxuXG52YXIgWkVST1MgPSBCdWZmZXIuYWxsb2MoMTI4KVxudmFyIGJsb2Nrc2l6ZSA9IDY0XG5cbmZ1bmN0aW9uIEhtYWMgKGFsZywga2V5KSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAga2V5ID0gQnVmZmVyLmZyb20oa2V5KVxuICB9XG5cbiAgdGhpcy5fYWxnID0gYWxnXG4gIHRoaXMuX2tleSA9IGtleVxuXG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAga2V5ID0gYWxnKGtleSlcbiAgfSBlbHNlIGlmIChrZXkubGVuZ3RoIDwgYmxvY2tzaXplKSB7XG4gICAga2V5ID0gQnVmZmVyLmNvbmNhdChba2V5LCBaRVJPU10sIGJsb2Nrc2l6ZSlcbiAgfVxuXG4gIHZhciBpcGFkID0gdGhpcy5faXBhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUpXG4gIHZhciBvcGFkID0gdGhpcy5fb3BhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3NpemU7IGkrKykge1xuICAgIGlwYWRbaV0gPSBrZXlbaV0gXiAweDM2XG4gICAgb3BhZFtpXSA9IGtleVtpXSBeIDB4NUNcbiAgfVxuXG4gIHRoaXMuX2hhc2ggPSBbaXBhZF1cbn1cblxuaW5oZXJpdHMoSG1hYywgQmFzZSlcblxuSG1hYy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2hhc2gucHVzaChkYXRhKVxufVxuXG5IbWFjLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoID0gdGhpcy5fYWxnKEJ1ZmZlci5jb25jYXQodGhpcy5faGFzaCkpXG4gIHJldHVybiB0aGlzLl9hbGcoQnVmZmVyLmNvbmNhdChbdGhpcy5fb3BhZCwgaF0pKVxufVxubW9kdWxlLmV4cG9ydHMgPSBIbWFjXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vYnJvd3Nlci9hbGdvcml0aG1zLmpzb24nKVxuIiwidmFyIGNoZWNrUGFyYW1ldGVycyA9IHJlcXVpcmUoJy4vcHJlY29uZGl0aW9uJylcbnZhciBkZWZhdWx0RW5jb2RpbmcgPSByZXF1aXJlKCcuL2RlZmF1bHQtZW5jb2RpbmcnKVxudmFyIHN5bmMgPSByZXF1aXJlKCcuL3N5bmMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBaRVJPX0JVRlxudmFyIHN1YnRsZSA9IGdsb2JhbC5jcnlwdG8gJiYgZ2xvYmFsLmNyeXB0by5zdWJ0bGVcbnZhciB0b0Jyb3dzZXIgPSB7XG4gICdzaGEnOiAnU0hBLTEnLFxuICAnc2hhLTEnOiAnU0hBLTEnLFxuICAnc2hhMSc6ICdTSEEtMScsXG4gICdzaGEyNTYnOiAnU0hBLTI1NicsXG4gICdzaGEtMjU2JzogJ1NIQS0yNTYnLFxuICAnc2hhMzg0JzogJ1NIQS0zODQnLFxuICAnc2hhLTM4NCc6ICdTSEEtMzg0JyxcbiAgJ3NoYS01MTInOiAnU0hBLTUxMicsXG4gICdzaGE1MTInOiAnU0hBLTUxMidcbn1cbnZhciBjaGVja3MgPSBbXVxuZnVuY3Rpb24gY2hlY2tOYXRpdmUgKGFsZ28pIHtcbiAgaWYgKGdsb2JhbC5wcm9jZXNzICYmICFnbG9iYWwucHJvY2Vzcy5icm93c2VyKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSlcbiAgfVxuICBpZiAoIXN1YnRsZSB8fCAhc3VidGxlLmltcG9ydEtleSB8fCAhc3VidGxlLmRlcml2ZUJpdHMpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKVxuICB9XG4gIGlmIChjaGVja3NbYWxnb10gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBjaGVja3NbYWxnb11cbiAgfVxuICBaRVJPX0JVRiA9IFpFUk9fQlVGIHx8IEJ1ZmZlci5hbGxvYyg4KVxuICB2YXIgcHJvbSA9IGJyb3dzZXJQYmtkZjIoWkVST19CVUYsIFpFUk9fQlVGLCAxMCwgMTI4LCBhbGdvKVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSlcbiAgY2hlY2tzW2FsZ29dID0gcHJvbVxuICByZXR1cm4gcHJvbVxufVxuXG5mdW5jdGlvbiBicm93c2VyUGJrZGYyIChwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywgbGVuZ3RoLCBhbGdvKSB7XG4gIHJldHVybiBzdWJ0bGUuaW1wb3J0S2V5KFxuICAgICdyYXcnLCBwYXNzd29yZCwge25hbWU6ICdQQktERjInfSwgZmFsc2UsIFsnZGVyaXZlQml0cyddXG4gICkudGhlbihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHN1YnRsZS5kZXJpdmVCaXRzKHtcbiAgICAgIG5hbWU6ICdQQktERjInLFxuICAgICAgc2FsdDogc2FsdCxcbiAgICAgIGl0ZXJhdGlvbnM6IGl0ZXJhdGlvbnMsXG4gICAgICBoYXNoOiB7XG4gICAgICAgIG5hbWU6IGFsZ29cbiAgICAgIH1cbiAgICB9LCBrZXksIGxlbmd0aCA8PCAzKVxuICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20ocmVzKVxuICB9KVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUHJvbWlzZSAocHJvbWlzZSwgY2FsbGJhY2spIHtcbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChvdXQpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIG91dClcbiAgICB9KVxuICB9LCBmdW5jdGlvbiAoZSkge1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2soZSlcbiAgICB9KVxuICB9KVxufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0LCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGRpZ2VzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gZGlnZXN0XG4gICAgZGlnZXN0ID0gdW5kZWZpbmVkXG4gIH1cblxuICBkaWdlc3QgPSBkaWdlc3QgfHwgJ3NoYTEnXG4gIHZhciBhbGdvID0gdG9Ccm93c2VyW2RpZ2VzdC50b0xvd2VyQ2FzZSgpXVxuXG4gIGlmICghYWxnbyB8fCB0eXBlb2YgZ2xvYmFsLlByb21pc2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb3V0XG4gICAgICB0cnkge1xuICAgICAgICBvdXQgPSBzeW5jKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpXG4gICAgICB9XG4gICAgICBjYWxsYmFjayhudWxsLCBvdXQpXG4gICAgfSlcbiAgfVxuXG4gIGNoZWNrUGFyYW1ldGVycyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuKVxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGNhbGxiYWNrIHByb3ZpZGVkIHRvIHBia2RmMicpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhc3N3b3JkKSkgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZCwgZGVmYXVsdEVuY29kaW5nKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkgc2FsdCA9IEJ1ZmZlci5mcm9tKHNhbHQsIGRlZmF1bHRFbmNvZGluZylcblxuICByZXNvbHZlUHJvbWlzZShjaGVja05hdGl2ZShhbGdvKS50aGVuKGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgaWYgKHJlc3ApIHJldHVybiBicm93c2VyUGJrZGYyKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGFsZ28pXG5cbiAgICByZXR1cm4gc3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBkaWdlc3QpXG4gIH0pLCBjYWxsYmFjaylcbn1cbiIsInZhciBERVMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWRlcycpXG52YXIgYWVzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMvYnJvd3NlcicpXG52YXIgYWVzTW9kZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWFlcy9tb2RlcycpXG52YXIgZGVzTW9kZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWRlcy9tb2RlcycpXG52YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcblxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgc3VpdGUgPSBzdWl0ZS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIGtleUxlbiwgaXZMZW5cbiAgaWYgKGFlc01vZGVzW3N1aXRlXSkge1xuICAgIGtleUxlbiA9IGFlc01vZGVzW3N1aXRlXS5rZXlcbiAgICBpdkxlbiA9IGFlc01vZGVzW3N1aXRlXS5pdlxuICB9IGVsc2UgaWYgKGRlc01vZGVzW3N1aXRlXSkge1xuICAgIGtleUxlbiA9IGRlc01vZGVzW3N1aXRlXS5rZXkgKiA4XG4gICAgaXZMZW4gPSBkZXNNb2Rlc1tzdWl0ZV0uaXZcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG5cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwga2V5TGVuLCBpdkxlbilcbiAgcmV0dXJuIGNyZWF0ZUNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXIgKHN1aXRlLCBwYXNzd29yZCkge1xuICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKClcblxuICB2YXIga2V5TGVuLCBpdkxlblxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gYWVzTW9kZXNbc3VpdGVdLmtleVxuICAgIGl2TGVuID0gYWVzTW9kZXNbc3VpdGVdLml2XG4gIH0gZWxzZSBpZiAoZGVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gZGVzTW9kZXNbc3VpdGVdLmtleSAqIDhcbiAgICBpdkxlbiA9IGRlc01vZGVzW3N1aXRlXS5pdlxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBrZXlMZW4sIGl2TGVuKVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwga2V5LCBpdikge1xuICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKClcbiAgaWYgKGFlc01vZGVzW3N1aXRlXSkgcmV0dXJuIGFlcy5jcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5LCBpdilcbiAgaWYgKGRlc01vZGVzW3N1aXRlXSkgcmV0dXJuIG5ldyBERVMoeyBrZXk6IGtleSwgaXY6IGl2LCBtb2RlOiBzdWl0ZSB9KVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyaXYgKHN1aXRlLCBrZXksIGl2KSB7XG4gIHN1aXRlID0gc3VpdGUudG9Mb3dlckNhc2UoKVxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSByZXR1cm4gYWVzLmNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGtleSwgaXYpXG4gIGlmIChkZXNNb2Rlc1tzdWl0ZV0pIHJldHVybiBuZXcgREVTKHsga2V5OiBrZXksIGl2OiBpdiwgbW9kZTogc3VpdGUsIGRlY3J5cHQ6IHRydWUgfSlcblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxufVxuXG5mdW5jdGlvbiBnZXRDaXBoZXJzICgpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGRlc01vZGVzKS5jb25jYXQoYWVzLmdldENpcGhlcnMoKSlcbn1cblxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBleHBvcnRzLkNpcGhlciA9IGNyZWF0ZUNpcGhlclxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGV4cG9ydHMuQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGV4cG9ydHMuRGVjaXBoZXIgPSBjcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gZXhwb3J0cy5EZWNpcGhlcml2ID0gY3JlYXRlRGVjaXBoZXJpdlxuZXhwb3J0cy5saXN0Q2lwaGVycyA9IGV4cG9ydHMuZ2V0Q2lwaGVycyA9IGdldENpcGhlcnNcbiIsInZhciBDaXBoZXJCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGRlcyA9IHJlcXVpcmUoJ2Rlcy5qcycpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIG1vZGVzID0ge1xuICAnZGVzLWVkZTMtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuRURFKSxcbiAgJ2Rlcy1lZGUzJzogZGVzLkVERSxcbiAgJ2Rlcy1lZGUtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuRURFKSxcbiAgJ2Rlcy1lZGUnOiBkZXMuRURFLFxuICAnZGVzLWNiYyc6IGRlcy5DQkMuaW5zdGFudGlhdGUoZGVzLkRFUyksXG4gICdkZXMtZWNiJzogZGVzLkRFU1xufVxubW9kZXMuZGVzID0gbW9kZXNbJ2Rlcy1jYmMnXVxubW9kZXMuZGVzMyA9IG1vZGVzWydkZXMtZWRlMy1jYmMnXVxubW9kdWxlLmV4cG9ydHMgPSBERVNcbmluaGVyaXRzKERFUywgQ2lwaGVyQmFzZSlcbmZ1bmN0aW9uIERFUyAob3B0cykge1xuICBDaXBoZXJCYXNlLmNhbGwodGhpcylcbiAgdmFyIG1vZGVOYW1lID0gb3B0cy5tb2RlLnRvTG93ZXJDYXNlKClcbiAgdmFyIG1vZGUgPSBtb2Rlc1ttb2RlTmFtZV1cbiAgdmFyIHR5cGVcbiAgaWYgKG9wdHMuZGVjcnlwdCkge1xuICAgIHR5cGUgPSAnZGVjcnlwdCdcbiAgfSBlbHNlIHtcbiAgICB0eXBlID0gJ2VuY3J5cHQnXG4gIH1cbiAgdmFyIGtleSA9IG9wdHMua2V5XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGtleSkpIHtcbiAgICBrZXkgPSBCdWZmZXIuZnJvbShrZXkpXG4gIH1cbiAgaWYgKG1vZGVOYW1lID09PSAnZGVzLWVkZScgfHwgbW9kZU5hbWUgPT09ICdkZXMtZWRlLWNiYycpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIGtleS5zbGljZSgwLCA4KV0pXG4gIH1cbiAgdmFyIGl2ID0gb3B0cy5pdlxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihpdikpIHtcbiAgICBpdiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB9XG4gIHRoaXMuX2RlcyA9IG1vZGUuY3JlYXRlKHtcbiAgICBrZXk6IGtleSxcbiAgICBpdjogaXYsXG4gICAgdHlwZTogdHlwZVxuICB9KVxufVxuREVTLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMuX2Rlcy51cGRhdGUoZGF0YSkpXG59XG5ERVMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMuX2Rlcy5maW5hbCgpKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLnV0aWxzID0gcmVxdWlyZSgnLi9kZXMvdXRpbHMnKTtcbmV4cG9ydHMuQ2lwaGVyID0gcmVxdWlyZSgnLi9kZXMvY2lwaGVyJyk7XG5leHBvcnRzLkRFUyA9IHJlcXVpcmUoJy4vZGVzL2RlcycpO1xuZXhwb3J0cy5DQkMgPSByZXF1aXJlKCcuL2Rlcy9jYmMnKTtcbmV4cG9ydHMuRURFID0gcmVxdWlyZSgnLi9kZXMvZWRlJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgcHJvdG8gPSB7fTtcblxuZnVuY3Rpb24gQ0JDU3RhdGUoaXYpIHtcbiAgYXNzZXJ0LmVxdWFsKGl2Lmxlbmd0aCwgOCwgJ0ludmFsaWQgSVYgbGVuZ3RoJyk7XG5cbiAgdGhpcy5pdiA9IG5ldyBBcnJheSg4KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLml2Lmxlbmd0aDsgaSsrKVxuICAgIHRoaXMuaXZbaV0gPSBpdltpXTtcbn1cblxuZnVuY3Rpb24gaW5zdGFudGlhdGUoQmFzZSkge1xuICBmdW5jdGlvbiBDQkMob3B0aW9ucykge1xuICAgIEJhc2UuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB0aGlzLl9jYmNJbml0KCk7XG4gIH1cbiAgaW5oZXJpdHMoQ0JDLCBCYXNlKTtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3RvKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgQ0JDLnByb3RvdHlwZVtrZXldID0gcHJvdG9ba2V5XTtcbiAgfVxuXG4gIENCQy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgQ0JDKG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBDQkM7XG59XG5cbmV4cG9ydHMuaW5zdGFudGlhdGUgPSBpbnN0YW50aWF0ZTtcblxucHJvdG8uX2NiY0luaXQgPSBmdW5jdGlvbiBfY2JjSW5pdCgpIHtcbiAgdmFyIHN0YXRlID0gbmV3IENCQ1N0YXRlKHRoaXMub3B0aW9ucy5pdik7XG4gIHRoaXMuX2NiY1N0YXRlID0gc3RhdGU7XG59O1xuXG5wcm90by5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9jYmNTdGF0ZTtcbiAgdmFyIHN1cGVyUHJvdG8gPSB0aGlzLmNvbnN0cnVjdG9yLnN1cGVyXy5wcm90b3R5cGU7XG5cbiAgdmFyIGl2ID0gc3RhdGUuaXY7XG4gIGlmICh0aGlzLnR5cGUgPT09ICdlbmNyeXB0Jykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICAgIGl2W2ldIF49IGlucFtpbk9mZiArIGldO1xuXG4gICAgc3VwZXJQcm90by5fdXBkYXRlLmNhbGwodGhpcywgaXYsIDAsIG91dCwgb3V0T2ZmKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICAgIGl2W2ldID0gb3V0W291dE9mZiArIGldO1xuICB9IGVsc2Uge1xuICAgIHN1cGVyUHJvdG8uX3VwZGF0ZS5jYWxsKHRoaXMsIGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICAgIG91dFtvdXRPZmYgKyBpXSBePSBpdltpXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICAgIGl2W2ldID0gaW5wW2luT2ZmICsgaV07XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgQ2lwaGVyID0gcmVxdWlyZSgnLi9jaXBoZXInKTtcbnZhciBERVMgPSByZXF1aXJlKCcuL2RlcycpO1xuXG5mdW5jdGlvbiBFREVTdGF0ZSh0eXBlLCBrZXkpIHtcbiAgYXNzZXJ0LmVxdWFsKGtleS5sZW5ndGgsIDI0LCAnSW52YWxpZCBrZXkgbGVuZ3RoJyk7XG5cbiAgdmFyIGsxID0ga2V5LnNsaWNlKDAsIDgpO1xuICB2YXIgazIgPSBrZXkuc2xpY2UoOCwgMTYpO1xuICB2YXIgazMgPSBrZXkuc2xpY2UoMTYsIDI0KTtcblxuICBpZiAodHlwZSA9PT0gJ2VuY3J5cHQnKSB7XG4gICAgdGhpcy5jaXBoZXJzID0gW1xuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdlbmNyeXB0Jywga2V5OiBrMSB9KSxcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZGVjcnlwdCcsIGtleTogazIgfSksXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2VuY3J5cHQnLCBrZXk6IGszIH0pXG4gICAgXTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmNpcGhlcnMgPSBbXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2RlY3J5cHQnLCBrZXk6IGszIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdlbmNyeXB0Jywga2V5OiBrMiB9KSxcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZGVjcnlwdCcsIGtleTogazEgfSlcbiAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIEVERShvcHRpb25zKSB7XG4gIENpcGhlci5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIHZhciBzdGF0ZSA9IG5ldyBFREVTdGF0ZSh0aGlzLnR5cGUsIHRoaXMub3B0aW9ucy5rZXkpO1xuICB0aGlzLl9lZGVTdGF0ZSA9IHN0YXRlO1xufVxuaW5oZXJpdHMoRURFLCBDaXBoZXIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVERTtcblxuRURFLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgRURFKG9wdGlvbnMpO1xufTtcblxuRURFLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9lZGVTdGF0ZTtcblxuICBzdGF0ZS5jaXBoZXJzWzBdLl91cGRhdGUoaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpO1xuICBzdGF0ZS5jaXBoZXJzWzFdLl91cGRhdGUob3V0LCBvdXRPZmYsIG91dCwgb3V0T2ZmKTtcbiAgc3RhdGUuY2lwaGVyc1syXS5fdXBkYXRlKG91dCwgb3V0T2ZmLCBvdXQsIG91dE9mZik7XG59O1xuXG5FREUucHJvdG90eXBlLl9wYWQgPSBERVMucHJvdG90eXBlLl9wYWQ7XG5FREUucHJvdG90eXBlLl91bnBhZCA9IERFUy5wcm90b3R5cGUuX3VucGFkO1xuIiwidmFyIE1PREVTID0gcmVxdWlyZSgnLi9tb2RlcycpXG52YXIgQXV0aENpcGhlciA9IHJlcXVpcmUoJy4vYXV0aENpcGhlcicpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBDaXBoZXIgKG1vZGUsIGtleSwgaXYpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcblxuICB0aGlzLl9jYWNoZSA9IG5ldyBTcGxpdHRlcigpXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cblxuaW5oZXJpdHMoQ2lwaGVyLCBUcmFuc2Zvcm0pXG5cbkNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2NhY2hlLmFkZChkYXRhKVxuICB2YXIgY2h1bmtcbiAgdmFyIHRoaW5nXG4gIHZhciBvdXQgPSBbXVxuXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQoKSkpIHtcbiAgICB0aGluZyA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICBvdXQucHVzaCh0aGluZylcbiAgfVxuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cblxudmFyIFBBRERJTkcgPSBCdWZmZXIuYWxsb2MoMTYsIDB4MTApXG5cbkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2h1bmsgPSB0aGlzLl9jYWNoZS5mbHVzaCgpXG4gIGlmICh0aGlzLl9hdXRvcGFkZGluZykge1xuICAgIGNodW5rID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICAgIHRoaXMuX2NpcGhlci5zY3J1YigpXG4gICAgcmV0dXJuIGNodW5rXG4gIH1cblxuICBpZiAoIWNodW5rLmVxdWFscyhQQURESU5HKSkge1xuICAgIHRoaXMuX2NpcGhlci5zY3J1YigpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIG5vdCBtdWx0aXBsZSBvZiBibG9jayBsZW5ndGgnKVxuICB9XG59XG5cbkNpcGhlci5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoc2V0VG8pIHtcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSAhIXNldFRvXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPiAxNSkge1xuICAgIHZhciBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgIHJldHVybiBvdXRcbiAgfVxuICByZXR1cm4gbnVsbFxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZW4gPSAxNiAtIHRoaXMuY2FjaGUubGVuZ3RoXG4gIHZhciBwYWRCdWZmID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbilcblxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBwYWRCdWZmLndyaXRlVUludDgobGVuLCBpKVxuICB9XG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIHBhZEJ1ZmZdKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDaXBoZXJpdiAoc3VpdGUsIHBhc3N3b3JkLCBpdikge1xuICB2YXIgY29uZmlnID0gTU9ERVNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG5cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHBhc3N3b3JkID0gQnVmZmVyLmZyb20ocGFzc3dvcmQpXG4gIGlmIChwYXNzd29yZC5sZW5ndGggIT09IGNvbmZpZy5rZXkgLyA4KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGtleSBsZW5ndGggJyArIHBhc3N3b3JkLmxlbmd0aClcblxuICBpZiAodHlwZW9mIGl2ID09PSAnc3RyaW5nJykgaXYgPSBCdWZmZXIuZnJvbShpdilcbiAgaWYgKGNvbmZpZy5tb2RlICE9PSAnR0NNJyAmJiBpdi5sZW5ndGggIT09IGNvbmZpZy5pdikgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcblxuICBpZiAoY29uZmlnLnR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2KVxuICB9IGVsc2UgaWYgKGNvbmZpZy50eXBlID09PSAnYXV0aCcpIHtcbiAgICByZXR1cm4gbmV3IEF1dGhDaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2KVxuICB9XG5cbiAgcmV0dXJuIG5ldyBDaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDaXBoZXIgKHN1aXRlLCBwYXNzd29yZCkge1xuICB2YXIgY29uZmlnID0gTU9ERVNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG5cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlQ2lwaGVyaXYoc3VpdGUsIGtleXMua2V5LCBrZXlzLml2KVxufVxuXG5leHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gY3JlYXRlQ2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gY3JlYXRlQ2lwaGVyXG4iLCJleHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgYmxvY2spIHtcbiAgcmV0dXJuIHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soYmxvY2spXG59XG5cbmV4cG9ydHMuZGVjcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICByZXR1cm4gc2VsZi5fY2lwaGVyLmRlY3J5cHRCbG9jayhibG9jaylcbn1cbiIsInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHZhciBkYXRhID0geG9yKGJsb2NrLCBzZWxmLl9wcmV2KVxuXG4gIHNlbGYuX3ByZXYgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGRhdGEpXG4gIHJldHVybiBzZWxmLl9wcmV2XG59XG5cbmV4cG9ydHMuZGVjcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICB2YXIgcGFkID0gc2VsZi5fcHJldlxuXG4gIHNlbGYuX3ByZXYgPSBibG9ja1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmRlY3J5cHRCbG9jayhibG9jaylcblxuICByZXR1cm4geG9yKG91dCwgcGFkKVxufVxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5cbmZ1bmN0aW9uIGVuY3J5cHRTdGFydCAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gZGF0YS5sZW5ndGhcbiAgdmFyIG91dCA9IHhvcihkYXRhLCBzZWxmLl9jYWNoZSlcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShsZW4pXG4gIHNlbGYuX3ByZXYgPSBCdWZmZXIuY29uY2F0KFtzZWxmLl9wcmV2LCBkZWNyeXB0ID8gZGF0YSA6IG91dF0pXG4gIHJldHVybiBvdXRcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB2YXIgbGVuXG5cbiAgd2hpbGUgKGRhdGEubGVuZ3RoKSB7XG4gICAgaWYgKHNlbGYuX2NhY2hlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gICAgICBzZWxmLl9wcmV2ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2NhY2hlLmxlbmd0aCA8PSBkYXRhLmxlbmd0aCkge1xuICAgICAgbGVuID0gc2VsZi5fY2FjaGUubGVuZ3RoXG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLnNsaWNlKDAsIGxlbiksIGRlY3J5cHQpXSlcbiAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKGxlbilcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YSwgZGVjcnlwdCldKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0XG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuZnVuY3Rpb24gZW5jcnlwdEJ5dGUgKHNlbGYsIGJ5dGVQYXJhbSwgZGVjcnlwdCkge1xuICB2YXIgcGFkID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICB2YXIgb3V0ID0gcGFkWzBdIF4gYnl0ZVBhcmFtXG5cbiAgc2VsZi5fcHJldiA9IEJ1ZmZlci5jb25jYXQoW1xuICAgIHNlbGYuX3ByZXYuc2xpY2UoMSksXG4gICAgQnVmZmVyLmZyb20oW2RlY3J5cHQgPyBieXRlUGFyYW0gOiBvdXRdKVxuICBdKVxuXG4gIHJldHVybiBvdXRcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBjaHVuay5sZW5ndGhcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pXG4gIHZhciBpID0gLTFcblxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gZW5jcnlwdEJ5dGUoc2VsZiwgY2h1bmtbaV0sIGRlY3J5cHQpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuZnVuY3Rpb24gZW5jcnlwdEJ5dGUgKHNlbGYsIGJ5dGVQYXJhbSwgZGVjcnlwdCkge1xuICB2YXIgcGFkXG4gIHZhciBpID0gLTFcbiAgdmFyIGxlbiA9IDhcbiAgdmFyIG91dCA9IDBcbiAgdmFyIGJpdCwgdmFsdWVcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHBhZCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgICBiaXQgPSAoYnl0ZVBhcmFtICYgKDEgPDwgKDcgLSBpKSkpID8gMHg4MCA6IDBcbiAgICB2YWx1ZSA9IHBhZFswXSBeIGJpdFxuICAgIG91dCArPSAoKHZhbHVlICYgMHg4MCkgPj4gKGkgJSA4KSlcbiAgICBzZWxmLl9wcmV2ID0gc2hpZnRJbihzZWxmLl9wcmV2LCBkZWNyeXB0ID8gYml0IDogdmFsdWUpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBzaGlmdEluIChidWZmZXIsIHZhbHVlKSB7XG4gIHZhciBsZW4gPSBidWZmZXIubGVuZ3RoXG4gIHZhciBpID0gLTFcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShidWZmZXIubGVuZ3RoKVxuICBidWZmZXIgPSBCdWZmZXIuY29uY2F0KFtidWZmZXIsIEJ1ZmZlci5mcm9tKFt2YWx1ZV0pXSlcblxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gYnVmZmVyW2ldIDw8IDEgfCBidWZmZXJbaSArIDFdID4+ICg3KVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbilcbiAgdmFyIGkgPSAtMVxuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBlbmNyeXB0Qnl0ZShzZWxmLCBjaHVua1tpXSwgZGVjcnlwdClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cbiIsInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgcmV0dXJuIHNlbGYuX3ByZXZcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHtcbiAgICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX2NhY2hlLCBnZXRCbG9jayhzZWxmKV0pXG4gIH1cblxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgWkVST0VTID0gQnVmZmVyLmFsbG9jKDE2LCAwKVxuXG5mdW5jdGlvbiB0b0FycmF5IChidWYpIHtcbiAgcmV0dXJuIFtcbiAgICBidWYucmVhZFVJbnQzMkJFKDApLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoNCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg4KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDEyKVxuICBdXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheSAob3V0KSB7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSA+Pj4gMCwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdID4+PiAwLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0gPj4+IDAsIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSA+Pj4gMCwgMTIpXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gR0hBU0ggKGtleSkge1xuICB0aGlzLmggPSBrZXlcbiAgdGhpcy5zdGF0ZSA9IEJ1ZmZlci5hbGxvYygxNiwgMClcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxufVxuXG4vLyBmcm9tIGh0dHA6Ly9iaXR3aXNlc2hpZnRsZWZ0LmdpdGh1Yi5pby9zamNsL2RvYy9zeW1ib2xzL3NyYy9jb3JlX2djbS5qcy5odG1sXG4vLyBieSBKdWhvIFbDpGjDpC1IZXJ0dHVhXG5HSEFTSC5wcm90b3R5cGUuZ2hhc2ggPSBmdW5jdGlvbiAoYmxvY2spIHtcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgYmxvY2subGVuZ3RoKSB7XG4gICAgdGhpcy5zdGF0ZVtpXSBePSBibG9ja1tpXVxuICB9XG4gIHRoaXMuX211bHRpcGx5KClcbn1cblxuR0hBU0gucHJvdG90eXBlLl9tdWx0aXBseSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIFZpID0gdG9BcnJheSh0aGlzLmgpXG4gIHZhciBaaSA9IFswLCAwLCAwLCAwXVxuICB2YXIgaiwgeGksIGxzYlZpXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IDEyOCkge1xuICAgIHhpID0gKHRoaXMuc3RhdGVbfn4oaSAvIDgpXSAmICgxIDw8ICg3IC0gKGkgJSA4KSkpKSAhPT0gMFxuICAgIGlmICh4aSkge1xuICAgICAgLy8gWl9pKzEgPSBaX2kgXiBWX2lcbiAgICAgIFppWzBdIF49IFZpWzBdXG4gICAgICBaaVsxXSBePSBWaVsxXVxuICAgICAgWmlbMl0gXj0gVmlbMl1cbiAgICAgIFppWzNdIF49IFZpWzNdXG4gICAgfVxuXG4gICAgLy8gU3RvcmUgdGhlIHZhbHVlIG9mIExTQihWX2kpXG4gICAgbHNiVmkgPSAoVmlbM10gJiAxKSAhPT0gMFxuXG4gICAgLy8gVl9pKzEgPSBWX2kgPj4gMVxuICAgIGZvciAoaiA9IDM7IGogPiAwOyBqLS0pIHtcbiAgICAgIFZpW2pdID0gKFZpW2pdID4+PiAxKSB8ICgoVmlbaiAtIDFdICYgMSkgPDwgMzEpXG4gICAgfVxuICAgIFZpWzBdID0gVmlbMF0gPj4+IDFcblxuICAgIC8vIElmIExTQihWX2kpIGlzIDEsIFZfaSsxID0gKFZfaSA+PiAxKSBeIFJcbiAgICBpZiAobHNiVmkpIHtcbiAgICAgIFZpWzBdID0gVmlbMF0gXiAoMHhlMSA8PCAyNClcbiAgICB9XG4gIH1cbiAgdGhpcy5zdGF0ZSA9IGZyb21BcnJheShaaSlcbn1cblxuR0hBU0gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGJ1Zl0pXG4gIHZhciBjaHVua1xuICB3aGlsZSAodGhpcy5jYWNoZS5sZW5ndGggPj0gMTYpIHtcbiAgICBjaHVuayA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgdGhpcy5naGFzaChjaHVuaylcbiAgfVxufVxuXG5HSEFTSC5wcm90b3R5cGUuZmluYWwgPSBmdW5jdGlvbiAoYWJsLCBibCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHtcbiAgICB0aGlzLmdoYXNoKEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIFpFUk9FU10sIDE2KSlcbiAgfVxuXG4gIHRoaXMuZ2hhc2goZnJvbUFycmF5KFswLCBhYmwsIDAsIGJsXSkpXG4gIHJldHVybiB0aGlzLnN0YXRlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gR0hBU0hcbiIsInZhciBBdXRoQ2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIE1PREVTID0gcmVxdWlyZSgnLi9tb2RlcycpXG52YXIgU3RyZWFtQ2lwaGVyID0gcmVxdWlyZSgnLi9zdHJlYW1DaXBoZXInKVxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gRGVjaXBoZXIgKG1vZGUsIGtleSwgaXYpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcblxuICB0aGlzLl9jYWNoZSA9IG5ldyBTcGxpdHRlcigpXG4gIHRoaXMuX2xhc3QgPSB2b2lkIDBcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuXG5pbmhlcml0cyhEZWNpcGhlciwgVHJhbnNmb3JtKVxuXG5EZWNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2NhY2hlLmFkZChkYXRhKVxuICB2YXIgY2h1bmtcbiAgdmFyIHRoaW5nXG4gIHZhciBvdXQgPSBbXVxuICB3aGlsZSAoKGNodW5rID0gdGhpcy5fY2FjaGUuZ2V0KHRoaXMuX2F1dG9wYWRkaW5nKSkpIHtcbiAgICB0aGluZyA9IHRoaXMuX21vZGUuZGVjcnlwdCh0aGlzLCBjaHVuaylcbiAgICBvdXQucHVzaCh0aGluZylcbiAgfVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG5cbkRlY2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgcmV0dXJuIHVucGFkKHRoaXMuX21vZGUuZGVjcnlwdCh0aGlzLCBjaHVuaykpXG4gIH0gZWxzZSBpZiAoY2h1bmspIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpXG4gIH1cbn1cblxuRGVjaXBoZXIucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKHNldFRvKSB7XG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUb1xuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBTcGxpdHRlciAoKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBkYXRhXSlcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChhdXRvUGFkZGluZykge1xuICB2YXIgb3V0XG4gIGlmIChhdXRvUGFkZGluZykge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgICAgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgICAgcmV0dXJuIG91dFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoKSByZXR1cm4gdGhpcy5jYWNoZVxufVxuXG5mdW5jdGlvbiB1bnBhZCAobGFzdCkge1xuICB2YXIgcGFkZGVkID0gbGFzdFsxNV1cbiAgaWYgKHBhZGRlZCA8IDEgfHwgcGFkZGVkID4gMTYpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBkZWNyeXB0IGRhdGEnKVxuICB9XG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IHBhZGRlZCkge1xuICAgIGlmIChsYXN0WyhpICsgKDE2IC0gcGFkZGVkKSldICE9PSBwYWRkZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGRlY3J5cHQgZGF0YScpXG4gICAgfVxuICB9XG4gIGlmIChwYWRkZWQgPT09IDE2KSByZXR1cm5cblxuICByZXR1cm4gbGFzdC5zbGljZSgwLCAxNiAtIHBhZGRlZClcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXJpdiAoc3VpdGUsIHBhc3N3b3JkLCBpdikge1xuICB2YXIgY29uZmlnID0gTU9ERVNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG5cbiAgaWYgKHR5cGVvZiBpdiA9PT0gJ3N0cmluZycpIGl2ID0gQnVmZmVyLmZyb20oaXYpXG4gIGlmIChjb25maWcubW9kZSAhPT0gJ0dDTScgJiYgaXYubGVuZ3RoICE9PSBjb25maWcuaXYpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgaXYgbGVuZ3RoICcgKyBpdi5sZW5ndGgpXG5cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHBhc3N3b3JkID0gQnVmZmVyLmZyb20ocGFzc3dvcmQpXG4gIGlmIChwYXNzd29yZC5sZW5ndGggIT09IGNvbmZpZy5rZXkgLyA4KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGtleSBsZW5ndGggJyArIHBhc3N3b3JkLmxlbmd0aClcblxuICBpZiAoY29uZmlnLnR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2LCB0cnVlKVxuICB9IGVsc2UgaWYgKGNvbmZpZy50eXBlID09PSAnYXV0aCcpIHtcbiAgICByZXR1cm4gbmV3IEF1dGhDaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2LCB0cnVlKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBEZWNpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGNvbmZpZyA9IE1PREVTW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuXG4gIHZhciBrZXlzID0gZWJ0ayhwYXNzd29yZCwgZmFsc2UsIGNvbmZpZy5rZXksIGNvbmZpZy5pdilcbiAgcmV0dXJuIGNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGtleXMua2V5LCBrZXlzLml2KVxufVxuXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGNyZWF0ZURlY2lwaGVyaXZcbiIsImV4cG9ydHNbJ2Rlcy1lY2InXSA9IHtcbiAga2V5OiA4LFxuICBpdjogMFxufVxuZXhwb3J0c1snZGVzLWNiYyddID0gZXhwb3J0cy5kZXMgPSB7XG4gIGtleTogOCxcbiAgaXY6IDhcbn1cbmV4cG9ydHNbJ2Rlcy1lZGUzLWNiYyddID0gZXhwb3J0cy5kZXMzID0ge1xuICBrZXk6IDI0LFxuICBpdjogOFxufVxuZXhwb3J0c1snZGVzLWVkZTMnXSA9IHtcbiAga2V5OiAyNCxcbiAgaXY6IDBcbn1cbmV4cG9ydHNbJ2Rlcy1lZGUtY2JjJ10gPSB7XG4gIGtleTogMTYsXG4gIGl2OiA4XG59XG5leHBvcnRzWydkZXMtZWRlJ10gPSB7XG4gIGtleTogMTYsXG4gIGl2OiAwXG59XG4iLCJ2YXIgZ2VuZXJhdGVQcmltZSA9IHJlcXVpcmUoJy4vbGliL2dlbmVyYXRlUHJpbWUnKVxudmFyIHByaW1lcyA9IHJlcXVpcmUoJy4vbGliL3ByaW1lcy5qc29uJylcblxudmFyIERIID0gcmVxdWlyZSgnLi9saWIvZGgnKVxuXG5mdW5jdGlvbiBnZXREaWZmaWVIZWxsbWFuIChtb2QpIHtcbiAgdmFyIHByaW1lID0gbmV3IEJ1ZmZlcihwcmltZXNbbW9kXS5wcmltZSwgJ2hleCcpXG4gIHZhciBnZW4gPSBuZXcgQnVmZmVyKHByaW1lc1ttb2RdLmdlbiwgJ2hleCcpXG5cbiAgcmV0dXJuIG5ldyBESChwcmltZSwgZ2VuKVxufVxuXG52YXIgRU5DT0RJTkdTID0ge1xuICAnYmluYXJ5JzogdHJ1ZSwgJ2hleCc6IHRydWUsICdiYXNlNjQnOiB0cnVlXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURpZmZpZUhlbGxtYW4gKHByaW1lLCBlbmMsIGdlbmVyYXRvciwgZ2VuYykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGVuYykgfHwgRU5DT0RJTkdTW2VuY10gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBjcmVhdGVEaWZmaWVIZWxsbWFuKHByaW1lLCAnYmluYXJ5JywgZW5jLCBnZW5lcmF0b3IpXG4gIH1cblxuICBlbmMgPSBlbmMgfHwgJ2JpbmFyeSdcbiAgZ2VuYyA9IGdlbmMgfHwgJ2JpbmFyeSdcbiAgZ2VuZXJhdG9yID0gZ2VuZXJhdG9yIHx8IG5ldyBCdWZmZXIoWzJdKVxuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGdlbmVyYXRvcikpIHtcbiAgICBnZW5lcmF0b3IgPSBuZXcgQnVmZmVyKGdlbmVyYXRvciwgZ2VuYylcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJpbWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIG5ldyBESChnZW5lcmF0ZVByaW1lKHByaW1lLCBnZW5lcmF0b3IpLCBnZW5lcmF0b3IsIHRydWUpXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwcmltZSkpIHtcbiAgICBwcmltZSA9IG5ldyBCdWZmZXIocHJpbWUsIGVuYylcbiAgfVxuXG4gIHJldHVybiBuZXcgREgocHJpbWUsIGdlbmVyYXRvciwgdHJ1ZSlcbn1cblxuZXhwb3J0cy5EaWZmaWVIZWxsbWFuR3JvdXAgPSBleHBvcnRzLmNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cCA9IGV4cG9ydHMuZ2V0RGlmZmllSGVsbG1hbiA9IGdldERpZmZpZUhlbGxtYW5cbmV4cG9ydHMuY3JlYXRlRGlmZmllSGVsbG1hbiA9IGV4cG9ydHMuRGlmZmllSGVsbG1hbiA9IGNyZWF0ZURpZmZpZUhlbGxtYW5cbiIsInZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgTWlsbGVyUmFiaW4gPSByZXF1aXJlKCdtaWxsZXItcmFiaW4nKTtcbnZhciBtaWxsZXJSYWJpbiA9IG5ldyBNaWxsZXJSYWJpbigpO1xudmFyIFRXRU5UWUZPVVIgPSBuZXcgQk4oMjQpO1xudmFyIEVMRVZFTiA9IG5ldyBCTigxMSk7XG52YXIgVEVOID0gbmV3IEJOKDEwKTtcbnZhciBUSFJFRSA9IG5ldyBCTigzKTtcbnZhciBTRVZFTiA9IG5ldyBCTig3KTtcbnZhciBwcmltZXMgPSByZXF1aXJlKCcuL2dlbmVyYXRlUHJpbWUnKTtcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IERIO1xuXG5mdW5jdGlvbiBzZXRQdWJsaWNLZXkocHViLCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4JztcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHViKSkge1xuICAgIHB1YiA9IG5ldyBCdWZmZXIocHViLCBlbmMpO1xuICB9XG4gIHRoaXMuX3B1YiA9IG5ldyBCTihwdWIpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2V0UHJpdmF0ZUtleShwcml2LCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4JztcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHJpdikpIHtcbiAgICBwcml2ID0gbmV3IEJ1ZmZlcihwcml2LCBlbmMpO1xuICB9XG4gIHRoaXMuX3ByaXYgPSBuZXcgQk4ocHJpdik7XG4gIHJldHVybiB0aGlzO1xufVxuXG52YXIgcHJpbWVDYWNoZSA9IHt9O1xuZnVuY3Rpb24gY2hlY2tQcmltZShwcmltZSwgZ2VuZXJhdG9yKSB7XG4gIHZhciBnZW4gPSBnZW5lcmF0b3IudG9TdHJpbmcoJ2hleCcpO1xuICB2YXIgaGV4ID0gW2dlbiwgcHJpbWUudG9TdHJpbmcoMTYpXS5qb2luKCdfJyk7XG4gIGlmIChoZXggaW4gcHJpbWVDYWNoZSkge1xuICAgIHJldHVybiBwcmltZUNhY2hlW2hleF07XG4gIH1cbiAgdmFyIGVycm9yID0gMDtcblxuICBpZiAocHJpbWUuaXNFdmVuKCkgfHxcbiAgICAhcHJpbWVzLnNpbXBsZVNpZXZlIHx8XG4gICAgIXByaW1lcy5mZXJtYXRUZXN0KHByaW1lKSB8fFxuICAgICFtaWxsZXJSYWJpbi50ZXN0KHByaW1lKSkge1xuICAgIC8vbm90IGEgcHJpbWUgc28gKzFcbiAgICBlcnJvciArPSAxO1xuXG4gICAgaWYgKGdlbiA9PT0gJzAyJyB8fCBnZW4gPT09ICcwNScpIHtcbiAgICAgIC8vIHdlJ2QgYmUgYWJsZSB0byBjaGVjayB0aGUgZ2VuZXJhdG9yXG4gICAgICAvLyBpdCB3b3VsZCBmYWlsIHNvICs4XG4gICAgICBlcnJvciArPSA4O1xuICAgIH0gZWxzZSB7XG4gICAgICAvL3dlIHdvdWxkbid0IGJlIGFibGUgdG8gdGVzdCB0aGUgZ2VuZXJhdG9yXG4gICAgICAvLyBzbyArNFxuICAgICAgZXJyb3IgKz0gNDtcbiAgICB9XG4gICAgcHJpbWVDYWNoZVtoZXhdID0gZXJyb3I7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG4gIGlmICghbWlsbGVyUmFiaW4udGVzdChwcmltZS5zaHJuKDEpKSkge1xuICAgIC8vbm90IGEgc2FmZSBwcmltZVxuICAgIGVycm9yICs9IDI7XG4gIH1cbiAgdmFyIHJlbTtcbiAgc3dpdGNoIChnZW4pIHtcbiAgICBjYXNlICcwMic6XG4gICAgICBpZiAocHJpbWUubW9kKFRXRU5UWUZPVVIpLmNtcChFTEVWRU4pKSB7XG4gICAgICAgIC8vIHVuc3VpZGFibGUgZ2VuZXJhdG9yXG4gICAgICAgIGVycm9yICs9IDg7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICcwNSc6XG4gICAgICByZW0gPSBwcmltZS5tb2QoVEVOKTtcbiAgICAgIGlmIChyZW0uY21wKFRIUkVFKSAmJiByZW0uY21wKFNFVkVOKSkge1xuICAgICAgICAvLyBwcmltZSBtb2QgMTAgbmVlZHMgdG8gZXF1YWwgMyBvciA3XG4gICAgICAgIGVycm9yICs9IDg7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZXJyb3IgKz0gNDtcbiAgfVxuICBwcmltZUNhY2hlW2hleF0gPSBlcnJvcjtcbiAgcmV0dXJuIGVycm9yO1xufVxuXG5mdW5jdGlvbiBESChwcmltZSwgZ2VuZXJhdG9yLCBtYWxsZWFibGUpIHtcbiAgdGhpcy5zZXRHZW5lcmF0b3IoZ2VuZXJhdG9yKTtcbiAgdGhpcy5fX3ByaW1lID0gbmV3IEJOKHByaW1lKTtcbiAgdGhpcy5fcHJpbWUgPSBCTi5tb250KHRoaXMuX19wcmltZSk7XG4gIHRoaXMuX3ByaW1lTGVuID0gcHJpbWUubGVuZ3RoO1xuICB0aGlzLl9wdWIgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX3ByaXYgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX3ByaW1lQ29kZSA9IHVuZGVmaW5lZDtcbiAgaWYgKG1hbGxlYWJsZSkge1xuICAgIHRoaXMuc2V0UHVibGljS2V5ID0gc2V0UHVibGljS2V5O1xuICAgIHRoaXMuc2V0UHJpdmF0ZUtleSA9IHNldFByaXZhdGVLZXk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fcHJpbWVDb2RlID0gODtcbiAgfVxufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KERILnByb3RvdHlwZSwgJ3ZlcmlmeUVycm9yJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3ByaW1lQ29kZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIHRoaXMuX3ByaW1lQ29kZSA9IGNoZWNrUHJpbWUodGhpcy5fX3ByaW1lLCB0aGlzLl9fZ2VuKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3ByaW1lQ29kZTtcbiAgfVxufSk7XG5ESC5wcm90b3R5cGUuZ2VuZXJhdGVLZXlzID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuX3ByaXYpIHtcbiAgICB0aGlzLl9wcml2ID0gbmV3IEJOKHJhbmRvbUJ5dGVzKHRoaXMuX3ByaW1lTGVuKSk7XG4gIH1cbiAgdGhpcy5fcHViID0gdGhpcy5fZ2VuLnRvUmVkKHRoaXMuX3ByaW1lKS5yZWRQb3codGhpcy5fcHJpdikuZnJvbVJlZCgpO1xuICByZXR1cm4gdGhpcy5nZXRQdWJsaWNLZXkoKTtcbn07XG5cbkRILnByb3RvdHlwZS5jb21wdXRlU2VjcmV0ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIG90aGVyID0gbmV3IEJOKG90aGVyKTtcbiAgb3RoZXIgPSBvdGhlci50b1JlZCh0aGlzLl9wcmltZSk7XG4gIHZhciBzZWNyZXQgPSBvdGhlci5yZWRQb3codGhpcy5fcHJpdikuZnJvbVJlZCgpO1xuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihzZWNyZXQudG9BcnJheSgpKTtcbiAgdmFyIHByaW1lID0gdGhpcy5nZXRQcmltZSgpO1xuICBpZiAob3V0Lmxlbmd0aCA8IHByaW1lLmxlbmd0aCkge1xuICAgIHZhciBmcm9udCA9IG5ldyBCdWZmZXIocHJpbWUubGVuZ3RoIC0gb3V0Lmxlbmd0aCk7XG4gICAgZnJvbnQuZmlsbCgwKTtcbiAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtmcm9udCwgb3V0XSk7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiBnZXRQdWJsaWNLZXkoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9wdWIsIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIGdldFByaXZhdGVLZXkoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9wcml2LCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLmdldFByaW1lID0gZnVuY3Rpb24gKGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fX3ByaW1lLCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLmdldEdlbmVyYXRvciA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX2dlbiwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5zZXRHZW5lcmF0b3IgPSBmdW5jdGlvbiAoZ2VuLCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4JztcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZ2VuKSkge1xuICAgIGdlbiA9IG5ldyBCdWZmZXIoZ2VuLCBlbmMpO1xuICB9XG4gIHRoaXMuX19nZW4gPSBnZW47XG4gIHRoaXMuX2dlbiA9IG5ldyBCTihnZW4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFJldHVyblZhbHVlKGJuLCBlbmMpIHtcbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoYm4udG9BcnJheSgpKTtcbiAgaWYgKCFlbmMpIHtcbiAgICByZXR1cm4gYnVmO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWYudG9TdHJpbmcoZW5jKTtcbiAgfVxufVxuIiwidmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpXG52YXIgc3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBzaWduID0gcmVxdWlyZSgnLi9zaWduJylcbnZhciB2ZXJpZnkgPSByZXF1aXJlKCcuL3ZlcmlmeScpXG5cbnZhciBhbGdvcml0aG1zID0gcmVxdWlyZSgnLi9hbGdvcml0aG1zLmpzb24nKVxuT2JqZWN0LmtleXMoYWxnb3JpdGhtcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGFsZ29yaXRobXNba2V5XS5pZCA9IG5ldyBCdWZmZXIoYWxnb3JpdGhtc1trZXldLmlkLCAnaGV4JylcbiAgYWxnb3JpdGhtc1trZXkudG9Mb3dlckNhc2UoKV0gPSBhbGdvcml0aG1zW2tleV1cbn0pXG5cbmZ1bmN0aW9uIFNpZ24gKGFsZ29yaXRobSkge1xuICBzdHJlYW0uV3JpdGFibGUuY2FsbCh0aGlzKVxuXG4gIHZhciBkYXRhID0gYWxnb3JpdGhtc1thbGdvcml0aG1dXG4gIGlmICghZGF0YSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG1lc3NhZ2UgZGlnZXN0JylcblxuICB0aGlzLl9oYXNoVHlwZSA9IGRhdGEuaGFzaFxuICB0aGlzLl9oYXNoID0gY3JlYXRlSGFzaChkYXRhLmhhc2gpXG4gIHRoaXMuX3RhZyA9IGRhdGEuaWRcbiAgdGhpcy5fc2lnblR5cGUgPSBkYXRhLnNpZ25cbn1cbmluaGVyaXRzKFNpZ24sIHN0cmVhbS5Xcml0YWJsZSlcblxuU2lnbi5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gX3dyaXRlIChkYXRhLCBfLCBkb25lKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG4gIGRvbmUoKVxufVxuXG5TaWduLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKGRhdGEsIGVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBlbmMpXG5cbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgcmV0dXJuIHRoaXNcbn1cblxuU2lnbi5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ25NZXRob2QgKGtleSwgZW5jKSB7XG4gIHRoaXMuZW5kKClcbiAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoLmRpZ2VzdCgpXG4gIHZhciBzaWcgPSBzaWduKGhhc2gsIGtleSwgdGhpcy5faGFzaFR5cGUsIHRoaXMuX3NpZ25UeXBlLCB0aGlzLl90YWcpXG5cbiAgcmV0dXJuIGVuYyA/IHNpZy50b1N0cmluZyhlbmMpIDogc2lnXG59XG5cbmZ1bmN0aW9uIFZlcmlmeSAoYWxnb3JpdGhtKSB7XG4gIHN0cmVhbS5Xcml0YWJsZS5jYWxsKHRoaXMpXG5cbiAgdmFyIGRhdGEgPSBhbGdvcml0aG1zW2FsZ29yaXRobV1cbiAgaWYgKCFkYXRhKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbWVzc2FnZSBkaWdlc3QnKVxuXG4gIHRoaXMuX2hhc2ggPSBjcmVhdGVIYXNoKGRhdGEuaGFzaClcbiAgdGhpcy5fdGFnID0gZGF0YS5pZFxuICB0aGlzLl9zaWduVHlwZSA9IGRhdGEuc2lnblxufVxuaW5oZXJpdHMoVmVyaWZ5LCBzdHJlYW0uV3JpdGFibGUpXG5cblZlcmlmeS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gX3dyaXRlIChkYXRhLCBfLCBkb25lKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG4gIGRvbmUoKVxufVxuXG5WZXJpZnkucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIGRhdGEgPSBuZXcgQnVmZmVyKGRhdGEsIGVuYylcblxuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuICByZXR1cm4gdGhpc1xufVxuXG5WZXJpZnkucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeU1ldGhvZCAoa2V5LCBzaWcsIGVuYykge1xuICBpZiAodHlwZW9mIHNpZyA9PT0gJ3N0cmluZycpIHNpZyA9IG5ldyBCdWZmZXIoc2lnLCBlbmMpXG5cbiAgdGhpcy5lbmQoKVxuICB2YXIgaGFzaCA9IHRoaXMuX2hhc2guZGlnZXN0KClcbiAgcmV0dXJuIHZlcmlmeShzaWcsIGhhc2gsIGtleSwgdGhpcy5fc2lnblR5cGUsIHRoaXMuX3RhZylcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2lnbiAoYWxnb3JpdGhtKSB7XG4gIHJldHVybiBuZXcgU2lnbihhbGdvcml0aG0pXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVZlcmlmeSAoYWxnb3JpdGhtKSB7XG4gIHJldHVybiBuZXcgVmVyaWZ5KGFsZ29yaXRobSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFNpZ246IGNyZWF0ZVNpZ24sXG4gIFZlcmlmeTogY3JlYXRlVmVyaWZ5LFxuICBjcmVhdGVTaWduOiBjcmVhdGVTaWduLFxuICBjcmVhdGVWZXJpZnk6IGNyZWF0ZVZlcmlmeVxufVxuIiwiLy8gbXVjaCBvZiB0aGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL3JzYS5qc1xudmFyIGNyZWF0ZUhtYWMgPSByZXF1aXJlKCdjcmVhdGUtaG1hYycpXG52YXIgY3J0ID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1yc2EnKVxudmFyIEVDID0gcmVxdWlyZSgnZWxsaXB0aWMnKS5lY1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKVxudmFyIGN1cnZlcyA9IHJlcXVpcmUoJy4vY3VydmVzLmpzb24nKVxuXG5mdW5jdGlvbiBzaWduIChoYXNoLCBrZXksIGhhc2hUeXBlLCBzaWduVHlwZSwgdGFnKSB7XG4gIHZhciBwcml2ID0gcGFyc2VLZXlzKGtleSlcbiAgaWYgKHByaXYuY3VydmUpIHtcbiAgICAvLyByc2Ega2V5cyBjYW4gYmUgaW50ZXJwcmV0ZWQgYXMgZWNkc2Egb25lcyBpbiBvcGVuc3NsXG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZWNkc2EnICYmIHNpZ25UeXBlICE9PSAnZWNkc2EvcnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcbiAgICByZXR1cm4gZWNTaWduKGhhc2gsIHByaXYpXG4gIH0gZWxzZSBpZiAocHJpdi50eXBlID09PSAnZHNhJykge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ2RzYScpIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHJpdmF0ZSBrZXkgdHlwZScpXG4gICAgcmV0dXJuIGRzYVNpZ24oaGFzaCwgcHJpdiwgaGFzaFR5cGUpXG4gIH0gZWxzZSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAncnNhJyAmJiBzaWduVHlwZSAhPT0gJ2VjZHNhL3JzYScpIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHJpdmF0ZSBrZXkgdHlwZScpXG4gIH1cbiAgaGFzaCA9IEJ1ZmZlci5jb25jYXQoW3RhZywgaGFzaF0pXG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIHZhciBwYWQgPSBbIDAsIDEgXVxuICB3aGlsZSAoaGFzaC5sZW5ndGggKyBwYWQubGVuZ3RoICsgMSA8IGxlbikgcGFkLnB1c2goMHhmZilcbiAgcGFkLnB1c2goMHgwMClcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgaGFzaC5sZW5ndGgpIHBhZC5wdXNoKGhhc2hbaV0pXG5cbiAgdmFyIG91dCA9IGNydChwYWQsIHByaXYpXG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gZWNTaWduIChoYXNoLCBwcml2KSB7XG4gIHZhciBjdXJ2ZUlkID0gY3VydmVzW3ByaXYuY3VydmUuam9pbignLicpXVxuICBpZiAoIWN1cnZlSWQpIHRocm93IG5ldyBFcnJvcigndW5rbm93biBjdXJ2ZSAnICsgcHJpdi5jdXJ2ZS5qb2luKCcuJykpXG5cbiAgdmFyIGN1cnZlID0gbmV3IEVDKGN1cnZlSWQpXG4gIHZhciBrZXkgPSBjdXJ2ZS5rZXlGcm9tUHJpdmF0ZShwcml2LnByaXZhdGVLZXkpXG4gIHZhciBvdXQgPSBrZXkuc2lnbihoYXNoKVxuXG4gIHJldHVybiBuZXcgQnVmZmVyKG91dC50b0RFUigpKVxufVxuXG5mdW5jdGlvbiBkc2FTaWduIChoYXNoLCBwcml2LCBhbGdvKSB7XG4gIHZhciB4ID0gcHJpdi5wYXJhbXMucHJpdl9rZXlcbiAgdmFyIHAgPSBwcml2LnBhcmFtcy5wXG4gIHZhciBxID0gcHJpdi5wYXJhbXMucVxuICB2YXIgZyA9IHByaXYucGFyYW1zLmdcbiAgdmFyIHIgPSBuZXcgQk4oMClcbiAgdmFyIGtcbiAgdmFyIEggPSBiaXRzMmludChoYXNoLCBxKS5tb2QocSlcbiAgdmFyIHMgPSBmYWxzZVxuICB2YXIga3YgPSBnZXRLZXkoeCwgcSwgaGFzaCwgYWxnbylcbiAgd2hpbGUgKHMgPT09IGZhbHNlKSB7XG4gICAgayA9IG1ha2VLZXkocSwga3YsIGFsZ28pXG4gICAgciA9IG1ha2VSKGcsIGssIHAsIHEpXG4gICAgcyA9IGsuaW52bShxKS5pbXVsKEguYWRkKHgubXVsKHIpKSkubW9kKHEpXG4gICAgaWYgKHMuY21wbigwKSA9PT0gMCkge1xuICAgICAgcyA9IGZhbHNlXG4gICAgICByID0gbmV3IEJOKDApXG4gICAgfVxuICB9XG4gIHJldHVybiB0b0RFUihyLCBzKVxufVxuXG5mdW5jdGlvbiB0b0RFUiAociwgcykge1xuICByID0gci50b0FycmF5KClcbiAgcyA9IHMudG9BcnJheSgpXG5cbiAgLy8gUGFkIHZhbHVlc1xuICBpZiAoclswXSAmIDB4ODApIHIgPSBbIDAgXS5jb25jYXQocilcbiAgaWYgKHNbMF0gJiAweDgwKSBzID0gWyAwIF0uY29uY2F0KHMpXG5cbiAgdmFyIHRvdGFsID0gci5sZW5ndGggKyBzLmxlbmd0aCArIDRcbiAgdmFyIHJlcyA9IFsgMHgzMCwgdG90YWwsIDB4MDIsIHIubGVuZ3RoIF1cbiAgcmVzID0gcmVzLmNvbmNhdChyLCBbIDB4MDIsIHMubGVuZ3RoIF0sIHMpXG4gIHJldHVybiBuZXcgQnVmZmVyKHJlcylcbn1cblxuZnVuY3Rpb24gZ2V0S2V5ICh4LCBxLCBoYXNoLCBhbGdvKSB7XG4gIHggPSBuZXcgQnVmZmVyKHgudG9BcnJheSgpKVxuICBpZiAoeC5sZW5ndGggPCBxLmJ5dGVMZW5ndGgoKSkge1xuICAgIHZhciB6ZXJvcyA9IG5ldyBCdWZmZXIocS5ieXRlTGVuZ3RoKCkgLSB4Lmxlbmd0aClcbiAgICB6ZXJvcy5maWxsKDApXG4gICAgeCA9IEJ1ZmZlci5jb25jYXQoWyB6ZXJvcywgeCBdKVxuICB9XG4gIHZhciBobGVuID0gaGFzaC5sZW5ndGhcbiAgdmFyIGhiaXRzID0gYml0czJvY3RldHMoaGFzaCwgcSlcbiAgdmFyIHYgPSBuZXcgQnVmZmVyKGhsZW4pXG4gIHYuZmlsbCgxKVxuICB2YXIgayA9IG5ldyBCdWZmZXIoaGxlbilcbiAgay5maWxsKDApXG4gIGsgPSBjcmVhdGVIbWFjKGFsZ28sIGspLnVwZGF0ZSh2KS51cGRhdGUobmV3IEJ1ZmZlcihbIDAgXSkpLnVwZGF0ZSh4KS51cGRhdGUoaGJpdHMpLmRpZ2VzdCgpXG4gIHYgPSBjcmVhdGVIbWFjKGFsZ28sIGspLnVwZGF0ZSh2KS5kaWdlc3QoKVxuICBrID0gY3JlYXRlSG1hYyhhbGdvLCBrKS51cGRhdGUodikudXBkYXRlKG5ldyBCdWZmZXIoWyAxIF0pKS51cGRhdGUoeCkudXBkYXRlKGhiaXRzKS5kaWdlc3QoKVxuICB2ID0gY3JlYXRlSG1hYyhhbGdvLCBrKS51cGRhdGUodikuZGlnZXN0KClcbiAgcmV0dXJuIHsgazogaywgdjogdiB9XG59XG5cbmZ1bmN0aW9uIGJpdHMyaW50IChvYml0cywgcSkge1xuICB2YXIgYml0cyA9IG5ldyBCTihvYml0cylcbiAgdmFyIHNoaWZ0ID0gKG9iaXRzLmxlbmd0aCA8PCAzKSAtIHEuYml0TGVuZ3RoKClcbiAgaWYgKHNoaWZ0ID4gMCkgYml0cy5pc2hybihzaGlmdClcbiAgcmV0dXJuIGJpdHNcbn1cblxuZnVuY3Rpb24gYml0czJvY3RldHMgKGJpdHMsIHEpIHtcbiAgYml0cyA9IGJpdHMyaW50KGJpdHMsIHEpXG4gIGJpdHMgPSBiaXRzLm1vZChxKVxuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihiaXRzLnRvQXJyYXkoKSlcbiAgaWYgKG91dC5sZW5ndGggPCBxLmJ5dGVMZW5ndGgoKSkge1xuICAgIHZhciB6ZXJvcyA9IG5ldyBCdWZmZXIocS5ieXRlTGVuZ3RoKCkgLSBvdXQubGVuZ3RoKVxuICAgIHplcm9zLmZpbGwoMClcbiAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFsgemVyb3MsIG91dCBdKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gbWFrZUtleSAocSwga3YsIGFsZ28pIHtcbiAgdmFyIHRcbiAgdmFyIGtcblxuICBkbyB7XG4gICAgdCA9IG5ldyBCdWZmZXIoMClcblxuICAgIHdoaWxlICh0Lmxlbmd0aCAqIDggPCBxLmJpdExlbmd0aCgpKSB7XG4gICAgICBrdi52ID0gY3JlYXRlSG1hYyhhbGdvLCBrdi5rKS51cGRhdGUoa3YudikuZGlnZXN0KClcbiAgICAgIHQgPSBCdWZmZXIuY29uY2F0KFsgdCwga3YudiBdKVxuICAgIH1cblxuICAgIGsgPSBiaXRzMmludCh0LCBxKVxuICAgIGt2LmsgPSBjcmVhdGVIbWFjKGFsZ28sIGt2LmspLnVwZGF0ZShrdi52KS51cGRhdGUobmV3IEJ1ZmZlcihbIDAgXSkpLmRpZ2VzdCgpXG4gICAga3YudiA9IGNyZWF0ZUhtYWMoYWxnbywga3YuaykudXBkYXRlKGt2LnYpLmRpZ2VzdCgpXG4gIH0gd2hpbGUgKGsuY21wKHEpICE9PSAtMSlcblxuICByZXR1cm4ga1xufVxuXG5mdW5jdGlvbiBtYWtlUiAoZywgaywgcCwgcSkge1xuICByZXR1cm4gZy50b1JlZChCTi5tb250KHApKS5yZWRQb3coaykuZnJvbVJlZCgpLm1vZChxKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNpZ25cbm1vZHVsZS5leHBvcnRzLmdldEtleSA9IGdldEtleVxubW9kdWxlLmV4cG9ydHMubWFrZUtleSA9IG1ha2VLZXlcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcblxudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gU2hvcnRDdXJ2ZShjb25mKSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnc2hvcnQnLCBjb25mKTtcblxuICB0aGlzLmEgPSBuZXcgQk4oY29uZi5hLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmIgPSBuZXcgQk4oY29uZi5iLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLnRpbnYgPSB0aGlzLnR3by5yZWRJbnZtKCk7XG5cbiAgdGhpcy56ZXJvQSA9IHRoaXMuYS5mcm9tUmVkKCkuY21wbigwKSA9PT0gMDtcbiAgdGhpcy50aHJlZUEgPSB0aGlzLmEuZnJvbVJlZCgpLnN1Yih0aGlzLnApLmNtcG4oLTMpID09PSAwO1xuXG4gIC8vIElmIHRoZSBjdXJ2ZSBpcyBlbmRvbW9ycGhpYywgcHJlY2FsY3VsYXRlIGJldGEgYW5kIGxhbWJkYVxuICB0aGlzLmVuZG8gPSB0aGlzLl9nZXRFbmRvbW9ycGhpc20oY29uZik7XG4gIHRoaXMuX2VuZG9XbmFmVDEgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX2VuZG9XbmFmVDIgPSBuZXcgQXJyYXkoNCk7XG59XG5pbmhlcml0cyhTaG9ydEN1cnZlLCBCYXNlKTtcbm1vZHVsZS5leHBvcnRzID0gU2hvcnRDdXJ2ZTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9tb3JwaGlzbSA9IGZ1bmN0aW9uIF9nZXRFbmRvbW9ycGhpc20oY29uZikge1xuICAvLyBObyBlZmZpY2llbnQgZW5kb21vcnBoaXNtXG4gIGlmICghdGhpcy56ZXJvQSB8fCAhdGhpcy5nIHx8ICF0aGlzLm4gfHwgdGhpcy5wLm1vZG4oMykgIT09IDEpXG4gICAgcmV0dXJuO1xuXG4gIC8vIENvbXB1dGUgYmV0YSBhbmQgbGFtYmRhLCB0aGF0IGxhbWJkYSAqIFAgPSAoYmV0YSAqIFB4OyBQeSlcbiAgdmFyIGJldGE7XG4gIHZhciBsYW1iZGE7XG4gIGlmIChjb25mLmJldGEpIHtcbiAgICBiZXRhID0gbmV3IEJOKGNvbmYuYmV0YSwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgYmV0YXMgPSB0aGlzLl9nZXRFbmRvUm9vdHModGhpcy5wKTtcbiAgICAvLyBDaG9vc2UgdGhlIHNtYWxsZXN0IGJldGFcbiAgICBiZXRhID0gYmV0YXNbMF0uY21wKGJldGFzWzFdKSA8IDAgPyBiZXRhc1swXSA6IGJldGFzWzFdO1xuICAgIGJldGEgPSBiZXRhLnRvUmVkKHRoaXMucmVkKTtcbiAgfVxuICBpZiAoY29uZi5sYW1iZGEpIHtcbiAgICBsYW1iZGEgPSBuZXcgQk4oY29uZi5sYW1iZGEsIDE2KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBDaG9vc2UgdGhlIGxhbWJkYSB0aGF0IGlzIG1hdGNoaW5nIHNlbGVjdGVkIGJldGFcbiAgICB2YXIgbGFtYmRhcyA9IHRoaXMuX2dldEVuZG9Sb290cyh0aGlzLm4pO1xuICAgIGlmICh0aGlzLmcubXVsKGxhbWJkYXNbMF0pLnguY21wKHRoaXMuZy54LnJlZE11bChiZXRhKSkgPT09IDApIHtcbiAgICAgIGxhbWJkYSA9IGxhbWJkYXNbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhbWJkYSA9IGxhbWJkYXNbMV07XG4gICAgICBhc3NlcnQodGhpcy5nLm11bChsYW1iZGEpLnguY21wKHRoaXMuZy54LnJlZE11bChiZXRhKSkgPT09IDApO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdldCBiYXNpcyB2ZWN0b3JzLCB1c2VkIGZvciBiYWxhbmNlZCBsZW5ndGgtdHdvIHJlcHJlc2VudGF0aW9uXG4gIHZhciBiYXNpcztcbiAgaWYgKGNvbmYuYmFzaXMpIHtcbiAgICBiYXNpcyA9IGNvbmYuYmFzaXMubWFwKGZ1bmN0aW9uKHZlYykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYTogbmV3IEJOKHZlYy5hLCAxNiksXG4gICAgICAgIGI6IG5ldyBCTih2ZWMuYiwgMTYpXG4gICAgICB9O1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGJhc2lzID0gdGhpcy5fZ2V0RW5kb0Jhc2lzKGxhbWJkYSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJldGE6IGJldGEsXG4gICAgbGFtYmRhOiBsYW1iZGEsXG4gICAgYmFzaXM6IGJhc2lzXG4gIH07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZ2V0RW5kb1Jvb3RzID0gZnVuY3Rpb24gX2dldEVuZG9Sb290cyhudW0pIHtcbiAgLy8gRmluZCByb290cyBvZiBmb3IgeF4yICsgeCArIDEgaW4gRlxuICAvLyBSb290ID0gKC0xICstIFNxcnQoLTMpKSAvIDJcbiAgLy9cbiAgdmFyIHJlZCA9IG51bSA9PT0gdGhpcy5wID8gdGhpcy5yZWQgOiBCTi5tb250KG51bSk7XG4gIHZhciB0aW52ID0gbmV3IEJOKDIpLnRvUmVkKHJlZCkucmVkSW52bSgpO1xuICB2YXIgbnRpbnYgPSB0aW52LnJlZE5lZygpO1xuXG4gIHZhciBzID0gbmV3IEJOKDMpLnRvUmVkKHJlZCkucmVkTmVnKCkucmVkU3FydCgpLnJlZE11bCh0aW52KTtcblxuICB2YXIgbDEgPSBudGludi5yZWRBZGQocykuZnJvbVJlZCgpO1xuICB2YXIgbDIgPSBudGludi5yZWRTdWIocykuZnJvbVJlZCgpO1xuICByZXR1cm4gWyBsMSwgbDIgXTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9nZXRFbmRvQmFzaXMgPSBmdW5jdGlvbiBfZ2V0RW5kb0Jhc2lzKGxhbWJkYSkge1xuICAvLyBhcHJ4U3FydCA+PSBzcXJ0KHRoaXMubilcbiAgdmFyIGFwcnhTcXJ0ID0gdGhpcy5uLnVzaHJuKE1hdGguZmxvb3IodGhpcy5uLmJpdExlbmd0aCgpIC8gMikpO1xuXG4gIC8vIDMuNzRcbiAgLy8gUnVuIEVHQ0QsIHVudGlsIHIoTCArIDEpIDwgYXByeFNxcnRcbiAgdmFyIHUgPSBsYW1iZGE7XG4gIHZhciB2ID0gdGhpcy5uLmNsb25lKCk7XG4gIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgdmFyIHkxID0gbmV3IEJOKDApO1xuICB2YXIgeDIgPSBuZXcgQk4oMCk7XG4gIHZhciB5MiA9IG5ldyBCTigxKTtcblxuICAvLyBOT1RFOiBhbGwgdmVjdG9ycyBhcmUgcm9vdHMgb2Y6IGEgKyBiICogbGFtYmRhID0gMCAobW9kIG4pXG4gIHZhciBhMDtcbiAgdmFyIGIwO1xuICAvLyBGaXJzdCB2ZWN0b3JcbiAgdmFyIGExO1xuICB2YXIgYjE7XG4gIC8vIFNlY29uZCB2ZWN0b3JcbiAgdmFyIGEyO1xuICB2YXIgYjI7XG5cbiAgdmFyIHByZXZSO1xuICB2YXIgaSA9IDA7XG4gIHZhciByO1xuICB2YXIgeDtcbiAgd2hpbGUgKHUuY21wbigwKSAhPT0gMCkge1xuICAgIHZhciBxID0gdi5kaXYodSk7XG4gICAgciA9IHYuc3ViKHEubXVsKHUpKTtcbiAgICB4ID0geDIuc3ViKHEubXVsKHgxKSk7XG4gICAgdmFyIHkgPSB5Mi5zdWIocS5tdWwoeTEpKTtcblxuICAgIGlmICghYTEgJiYgci5jbXAoYXByeFNxcnQpIDwgMCkge1xuICAgICAgYTAgPSBwcmV2Ui5uZWcoKTtcbiAgICAgIGIwID0geDE7XG4gICAgICBhMSA9IHIubmVnKCk7XG4gICAgICBiMSA9IHg7XG4gICAgfSBlbHNlIGlmIChhMSAmJiArK2kgPT09IDIpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBwcmV2UiA9IHI7XG5cbiAgICB2ID0gdTtcbiAgICB1ID0gcjtcbiAgICB4MiA9IHgxO1xuICAgIHgxID0geDtcbiAgICB5MiA9IHkxO1xuICAgIHkxID0geTtcbiAgfVxuICBhMiA9IHIubmVnKCk7XG4gIGIyID0geDtcblxuICB2YXIgbGVuMSA9IGExLnNxcigpLmFkZChiMS5zcXIoKSk7XG4gIHZhciBsZW4yID0gYTIuc3FyKCkuYWRkKGIyLnNxcigpKTtcbiAgaWYgKGxlbjIuY21wKGxlbjEpID49IDApIHtcbiAgICBhMiA9IGEwO1xuICAgIGIyID0gYjA7XG4gIH1cblxuICAvLyBOb3JtYWxpemUgc2lnbnNcbiAgaWYgKGExLm5lZ2F0aXZlKSB7XG4gICAgYTEgPSBhMS5uZWcoKTtcbiAgICBiMSA9IGIxLm5lZygpO1xuICB9XG4gIGlmIChhMi5uZWdhdGl2ZSkge1xuICAgIGEyID0gYTIubmVnKCk7XG4gICAgYjIgPSBiMi5uZWcoKTtcbiAgfVxuXG4gIHJldHVybiBbXG4gICAgeyBhOiBhMSwgYjogYjEgfSxcbiAgICB7IGE6IGEyLCBiOiBiMiB9XG4gIF07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZW5kb1NwbGl0ID0gZnVuY3Rpb24gX2VuZG9TcGxpdChrKSB7XG4gIHZhciBiYXNpcyA9IHRoaXMuZW5kby5iYXNpcztcbiAgdmFyIHYxID0gYmFzaXNbMF07XG4gIHZhciB2MiA9IGJhc2lzWzFdO1xuXG4gIHZhciBjMSA9IHYyLmIubXVsKGspLmRpdlJvdW5kKHRoaXMubik7XG4gIHZhciBjMiA9IHYxLmIubmVnKCkubXVsKGspLmRpdlJvdW5kKHRoaXMubik7XG5cbiAgdmFyIHAxID0gYzEubXVsKHYxLmEpO1xuICB2YXIgcDIgPSBjMi5tdWwodjIuYSk7XG4gIHZhciBxMSA9IGMxLm11bCh2MS5iKTtcbiAgdmFyIHEyID0gYzIubXVsKHYyLmIpO1xuXG4gIC8vIENhbGN1bGF0ZSBhbnN3ZXJcbiAgdmFyIGsxID0gay5zdWIocDEpLnN1YihwMik7XG4gIHZhciBrMiA9IHExLmFkZChxMikubmVnKCk7XG4gIHJldHVybiB7IGsxOiBrMSwgazI6IGsyIH07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21YID0gZnVuY3Rpb24gcG9pbnRGcm9tWCh4LCBvZGQpIHtcbiAgeCA9IG5ldyBCTih4LCAxNik7XG4gIGlmICgheC5yZWQpXG4gICAgeCA9IHgudG9SZWQodGhpcy5yZWQpO1xuXG4gIHZhciB5MiA9IHgucmVkU3FyKCkucmVkTXVsKHgpLnJlZElBZGQoeC5yZWRNdWwodGhpcy5hKSkucmVkSUFkZCh0aGlzLmIpO1xuICB2YXIgeSA9IHkyLnJlZFNxcnQoKTtcbiAgaWYgKHkucmVkU3FyKCkucmVkU3ViKHkyKS5jbXAodGhpcy56ZXJvKSAhPT0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQnKTtcblxuICAvLyBYWFggSXMgdGhlcmUgYW55IHdheSB0byB0ZWxsIGlmIHRoZSBudW1iZXIgaXMgb2RkIHdpdGhvdXQgY29udmVydGluZyBpdFxuICAvLyB0byBub24tcmVkIGZvcm0/XG4gIHZhciBpc09kZCA9IHkuZnJvbVJlZCgpLmlzT2RkKCk7XG4gIGlmIChvZGQgJiYgIWlzT2RkIHx8ICFvZGQgJiYgaXNPZGQpXG4gICAgeSA9IHkucmVkTmVnKCk7XG5cbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSk7XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKHBvaW50KSB7XG4gIGlmIChwb2ludC5pbmYpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgdmFyIHggPSBwb2ludC54O1xuICB2YXIgeSA9IHBvaW50Lnk7XG5cbiAgdmFyIGF4ID0gdGhpcy5hLnJlZE11bCh4KTtcbiAgdmFyIHJocyA9IHgucmVkU3FyKCkucmVkTXVsKHgpLnJlZElBZGQoYXgpLnJlZElBZGQodGhpcy5iKTtcbiAgcmV0dXJuIHkucmVkU3FyKCkucmVkSVN1YihyaHMpLmNtcG4oMCkgPT09IDA7XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZW5kb1duYWZNdWxBZGQgPVxuICAgIGZ1bmN0aW9uIF9lbmRvV25hZk11bEFkZChwb2ludHMsIGNvZWZmcywgamFjb2JpYW5SZXN1bHQpIHtcbiAgdmFyIG5wb2ludHMgPSB0aGlzLl9lbmRvV25hZlQxO1xuICB2YXIgbmNvZWZmcyA9IHRoaXMuX2VuZG9XbmFmVDI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNwbGl0ID0gdGhpcy5fZW5kb1NwbGl0KGNvZWZmc1tpXSk7XG4gICAgdmFyIHAgPSBwb2ludHNbaV07XG4gICAgdmFyIGJldGEgPSBwLl9nZXRCZXRhKCk7XG5cbiAgICBpZiAoc3BsaXQuazEubmVnYXRpdmUpIHtcbiAgICAgIHNwbGl0LmsxLmluZWcoKTtcbiAgICAgIHAgPSBwLm5lZyh0cnVlKTtcbiAgICB9XG4gICAgaWYgKHNwbGl0LmsyLm5lZ2F0aXZlKSB7XG4gICAgICBzcGxpdC5rMi5pbmVnKCk7XG4gICAgICBiZXRhID0gYmV0YS5uZWcodHJ1ZSk7XG4gICAgfVxuXG4gICAgbnBvaW50c1tpICogMl0gPSBwO1xuICAgIG5wb2ludHNbaSAqIDIgKyAxXSA9IGJldGE7XG4gICAgbmNvZWZmc1tpICogMl0gPSBzcGxpdC5rMTtcbiAgICBuY29lZmZzW2kgKiAyICsgMV0gPSBzcGxpdC5rMjtcbiAgfVxuICB2YXIgcmVzID0gdGhpcy5fd25hZk11bEFkZCgxLCBucG9pbnRzLCBuY29lZmZzLCBpICogMiwgamFjb2JpYW5SZXN1bHQpO1xuXG4gIC8vIENsZWFuLXVwIHJlZmVyZW5jZXMgdG8gcG9pbnRzIGFuZCBjb2VmZmljaWVudHNcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBpICogMjsgaisrKSB7XG4gICAgbnBvaW50c1tqXSA9IG51bGw7XG4gICAgbmNvZWZmc1tqXSA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cbmZ1bmN0aW9uIFBvaW50KGN1cnZlLCB4LCB5LCBpc1JlZCkge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAnYWZmaW5lJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHkgPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSBudWxsO1xuICAgIHRoaXMueSA9IG51bGw7XG4gICAgdGhpcy5pbmYgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy55ID0gbmV3IEJOKHksIDE2KTtcbiAgICAvLyBGb3JjZSByZWRnb21lcnkgcmVwcmVzZW50YXRpb24gd2hlbiBsb2FkaW5nIGZyb20gSlNPTlxuICAgIGlmIChpc1JlZCkge1xuICAgICAgdGhpcy54LmZvcmNlUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICAgIHRoaXMueS5mb3JjZVJlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgfVxuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnkucmVkKVxuICAgICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICB0aGlzLmluZiA9IGZhbHNlO1xuICB9XG59XG5pbmhlcml0cyhQb2ludCwgQmFzZS5CYXNlUG9pbnQpO1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHksIGlzUmVkKSB7XG4gIHJldHVybiBuZXcgUG9pbnQodGhpcywgeCwgeSwgaXNSZWQpO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqLCByZWQpIHtcbiAgcmV0dXJuIFBvaW50LmZyb21KU09OKHRoaXMsIG9iaiwgcmVkKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZ2V0QmV0YSA9IGZ1bmN0aW9uIF9nZXRCZXRhKCkge1xuICBpZiAoIXRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm47XG5cbiAgdmFyIHByZSA9IHRoaXMucHJlY29tcHV0ZWQ7XG4gIGlmIChwcmUgJiYgcHJlLmJldGEpXG4gICAgcmV0dXJuIHByZS5iZXRhO1xuXG4gIHZhciBiZXRhID0gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngucmVkTXVsKHRoaXMuY3VydmUuZW5kby5iZXRhKSwgdGhpcy55KTtcbiAgaWYgKHByZSkge1xuICAgIHZhciBjdXJ2ZSA9IHRoaXMuY3VydmU7XG4gICAgdmFyIGVuZG9NdWwgPSBmdW5jdGlvbihwKSB7XG4gICAgICByZXR1cm4gY3VydmUucG9pbnQocC54LnJlZE11bChjdXJ2ZS5lbmRvLmJldGEpLCBwLnkpO1xuICAgIH07XG4gICAgcHJlLmJldGEgPSBiZXRhO1xuICAgIGJldGEucHJlY29tcHV0ZWQgPSB7XG4gICAgICBiZXRhOiBudWxsLFxuICAgICAgbmFmOiBwcmUubmFmICYmIHtcbiAgICAgICAgd25kOiBwcmUubmFmLnduZCxcbiAgICAgICAgcG9pbnRzOiBwcmUubmFmLnBvaW50cy5tYXAoZW5kb011bClcbiAgICAgIH0sXG4gICAgICBkb3VibGVzOiBwcmUuZG91YmxlcyAmJiB7XG4gICAgICAgIHN0ZXA6IHByZS5kb3VibGVzLnN0ZXAsXG4gICAgICAgIHBvaW50czogcHJlLmRvdWJsZXMucG9pbnRzLm1hcChlbmRvTXVsKVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIGJldGE7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICBpZiAoIXRoaXMucHJlY29tcHV0ZWQpXG4gICAgcmV0dXJuIFsgdGhpcy54LCB0aGlzLnkgXTtcblxuICByZXR1cm4gWyB0aGlzLngsIHRoaXMueSwgdGhpcy5wcmVjb21wdXRlZCAmJiB7XG4gICAgZG91YmxlczogdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzICYmIHtcbiAgICAgIHN0ZXA6IHRoaXMucHJlY29tcHV0ZWQuZG91Ymxlcy5zdGVwLFxuICAgICAgcG9pbnRzOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMucG9pbnRzLnNsaWNlKDEpXG4gICAgfSxcbiAgICBuYWY6IHRoaXMucHJlY29tcHV0ZWQubmFmICYmIHtcbiAgICAgIHduZDogdGhpcy5wcmVjb21wdXRlZC5uYWYud25kLFxuICAgICAgcG9pbnRzOiB0aGlzLnByZWNvbXB1dGVkLm5hZi5wb2ludHMuc2xpY2UoMSlcbiAgICB9XG4gIH0gXTtcbn07XG5cblBvaW50LmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04oY3VydmUsIG9iaiwgcmVkKSB7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJylcbiAgICBvYmogPSBKU09OLnBhcnNlKG9iaik7XG4gIHZhciByZXMgPSBjdXJ2ZS5wb2ludChvYmpbMF0sIG9ialsxXSwgcmVkKTtcbiAgaWYgKCFvYmpbMl0pXG4gICAgcmV0dXJuIHJlcztcblxuICBmdW5jdGlvbiBvYmoycG9pbnQob2JqKSB7XG4gICAgcmV0dXJuIGN1cnZlLnBvaW50KG9ialswXSwgb2JqWzFdLCByZWQpO1xuICB9XG5cbiAgdmFyIHByZSA9IG9ialsyXTtcbiAgcmVzLnByZWNvbXB1dGVkID0ge1xuICAgIGJldGE6IG51bGwsXG4gICAgZG91YmxlczogcHJlLmRvdWJsZXMgJiYge1xuICAgICAgc3RlcDogcHJlLmRvdWJsZXMuc3RlcCxcbiAgICAgIHBvaW50czogWyByZXMgXS5jb25jYXQocHJlLmRvdWJsZXMucG9pbnRzLm1hcChvYmoycG9pbnQpKVxuICAgIH0sXG4gICAgbmFmOiBwcmUubmFmICYmIHtcbiAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICBwb2ludHM6IFsgcmVzIF0uY29uY2F0KHByZS5uYWYucG9pbnRzLm1hcChvYmoycG9pbnQpKVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHJlcztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIFBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIFBvaW50IHg6ICcgKyB0aGlzLnguZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHk6ICcgKyB0aGlzLnkuZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgcmV0dXJuIHRoaXMuaW5mO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChwKSB7XG4gIC8vIE8gKyBQID0gUFxuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHA7XG5cbiAgLy8gUCArIE8gPSBQXG4gIGlmIChwLmluZilcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBQICsgUCA9IDJQXG4gIGlmICh0aGlzLmVxKHApKVxuICAgIHJldHVybiB0aGlzLmRibCgpO1xuXG4gIC8vIFAgKyAoLVApID0gT1xuICBpZiAodGhpcy5uZWcoKS5lcShwKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICAvLyBQICsgUSA9IE9cbiAgaWYgKHRoaXMueC5jbXAocC54KSA9PT0gMClcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICB2YXIgYyA9IHRoaXMueS5yZWRTdWIocC55KTtcbiAgaWYgKGMuY21wbigwKSAhPT0gMClcbiAgICBjID0gYy5yZWRNdWwodGhpcy54LnJlZFN1YihwLngpLnJlZEludm0oKSk7XG4gIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0aGlzLngpLnJlZElTdWIocC54KTtcbiAgdmFyIG55ID0gYy5yZWRNdWwodGhpcy54LnJlZFN1YihueCkpLnJlZElTdWIodGhpcy55KTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyAyUCA9IE9cbiAgdmFyIHlzMSA9IHRoaXMueS5yZWRBZGQodGhpcy55KTtcbiAgaWYgKHlzMS5jbXBuKDApID09PSAwKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpO1xuXG4gIHZhciBhID0gdGhpcy5jdXJ2ZS5hO1xuXG4gIHZhciB4MiA9IHRoaXMueC5yZWRTcXIoKTtcbiAgdmFyIGR5aW52ID0geXMxLnJlZEludm0oKTtcbiAgdmFyIGMgPSB4Mi5yZWRBZGQoeDIpLnJlZElBZGQoeDIpLnJlZElBZGQoYSkucmVkTXVsKGR5aW52KTtcblxuICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodGhpcy54LnJlZEFkZCh0aGlzLngpKTtcbiAgdmFyIG55ID0gYy5yZWRNdWwodGhpcy54LnJlZFN1YihueCkpLnJlZElTdWIodGhpcy55KTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gZ2V0WCgpIHtcbiAgcmV0dXJuIHRoaXMueC5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WSA9IGZ1bmN0aW9uIGdldFkoKSB7XG4gIHJldHVybiB0aGlzLnkuZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrKSB7XG4gIGsgPSBuZXcgQk4oaywgMTYpO1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG4gIGVsc2UgaWYgKHRoaXMuX2hhc0RvdWJsZXMoaykpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX2ZpeGVkTmFmTXVsKHRoaXMsIGspO1xuICBlbHNlIGlmICh0aGlzLmN1cnZlLmVuZG8pXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX2VuZG9XbmFmTXVsQWRkKFsgdGhpcyBdLCBbIGsgXSk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bCh0aGlzLCBrKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWxBZGQgPSBmdW5jdGlvbiBtdWxBZGQoazEsIHAyLCBrMikge1xuICB2YXIgcG9pbnRzID0gWyB0aGlzLCBwMiBdO1xuICB2YXIgY29lZmZzID0gWyBrMSwgazIgXTtcbiAgaWYgKHRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQocG9pbnRzLCBjb2VmZnMpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgcG9pbnRzLCBjb2VmZnMsIDIpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmptdWxBZGQgPSBmdW5jdGlvbiBqbXVsQWRkKGsxLCBwMiwgazIpIHtcbiAgdmFyIHBvaW50cyA9IFsgdGhpcywgcDIgXTtcbiAgdmFyIGNvZWZmcyA9IFsgazEsIGsyIF07XG4gIGlmICh0aGlzLmN1cnZlLmVuZG8pXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX2VuZG9XbmFmTXVsQWRkKHBvaW50cywgY29lZmZzLCB0cnVlKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEsIHBvaW50cywgY29lZmZzLCAyLCB0cnVlKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKHApIHtcbiAgcmV0dXJuIHRoaXMgPT09IHAgfHxcbiAgICAgICAgIHRoaXMuaW5mID09PSBwLmluZiAmJlxuICAgICAgICAgICAgICh0aGlzLmluZiB8fCB0aGlzLnguY21wKHAueCkgPT09IDAgJiYgdGhpcy55LmNtcChwLnkpID09PSAwKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcoX3ByZWNvbXB1dGUpIHtcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIHZhciByZXMgPSB0aGlzLmN1cnZlLnBvaW50KHRoaXMueCwgdGhpcy55LnJlZE5lZygpKTtcbiAgaWYgKF9wcmVjb21wdXRlICYmIHRoaXMucHJlY29tcHV0ZWQpIHtcbiAgICB2YXIgcHJlID0gdGhpcy5wcmVjb21wdXRlZDtcbiAgICB2YXIgbmVnYXRlID0gZnVuY3Rpb24ocCkge1xuICAgICAgcmV0dXJuIHAubmVnKCk7XG4gICAgfTtcbiAgICByZXMucHJlY29tcHV0ZWQgPSB7XG4gICAgICBuYWY6IHByZS5uYWYgJiYge1xuICAgICAgICB3bmQ6IHByZS5uYWYud25kLFxuICAgICAgICBwb2ludHM6IHByZS5uYWYucG9pbnRzLm1hcChuZWdhdGUpXG4gICAgICB9LFxuICAgICAgZG91YmxlczogcHJlLmRvdWJsZXMgJiYge1xuICAgICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLFxuICAgICAgICBwb2ludHM6IHByZS5kb3VibGVzLnBvaW50cy5tYXAobmVnYXRlKVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cblBvaW50LnByb3RvdHlwZS50b0ogPSBmdW5jdGlvbiB0b0ooKSB7XG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG5cbiAgdmFyIHJlcyA9IHRoaXMuY3VydmUuanBvaW50KHRoaXMueCwgdGhpcy55LCB0aGlzLmN1cnZlLm9uZSk7XG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiBKUG9pbnQoY3VydmUsIHgsIHksIHopIHtcbiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ2phY29iaWFuJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHkgPT09IG51bGwgJiYgeiA9PT0gbnVsbCkge1xuICAgIHRoaXMueCA9IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMueSA9IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMueiA9IG5ldyBCTigwKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSBuZXcgQk4oeCwgMTYpO1xuICAgIHRoaXMueSA9IG5ldyBCTih5LCAxNik7XG4gICAgdGhpcy56ID0gbmV3IEJOKHosIDE2KTtcbiAgfVxuICBpZiAoIXRoaXMueC5yZWQpXG4gICAgdGhpcy54ID0gdGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgaWYgKCF0aGlzLnkucmVkKVxuICAgIHRoaXMueSA9IHRoaXMueS50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gIGlmICghdGhpcy56LnJlZClcbiAgICB0aGlzLnogPSB0aGlzLnoudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuXG4gIHRoaXMuek9uZSA9IHRoaXMueiA9PT0gdGhpcy5jdXJ2ZS5vbmU7XG59XG5pbmhlcml0cyhKUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuanBvaW50ID0gZnVuY3Rpb24ganBvaW50KHgsIHksIHopIHtcbiAgcmV0dXJuIG5ldyBKUG9pbnQodGhpcywgeCwgeSwgeik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLnRvUCA9IGZ1bmN0aW9uIHRvUCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpO1xuXG4gIHZhciB6aW52ID0gdGhpcy56LnJlZEludm0oKTtcbiAgdmFyIHppbnYyID0gemludi5yZWRTcXIoKTtcbiAgdmFyIGF4ID0gdGhpcy54LnJlZE11bCh6aW52Mik7XG4gIHZhciBheSA9IHRoaXMueS5yZWRNdWwoemludjIpLnJlZE11bCh6aW52KTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChheCwgYXkpO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcoKSB7XG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludCh0aGlzLngsIHRoaXMueS5yZWROZWcoKSwgdGhpcy56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHApIHtcbiAgLy8gTyArIFAgPSBQXG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gcDtcblxuICAvLyBQICsgTyA9IFBcbiAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIDEyTSArIDRTICsgN0FcbiAgdmFyIHB6MiA9IHAuei5yZWRTcXIoKTtcbiAgdmFyIHoyID0gdGhpcy56LnJlZFNxcigpO1xuICB2YXIgdTEgPSB0aGlzLngucmVkTXVsKHB6Mik7XG4gIHZhciB1MiA9IHAueC5yZWRNdWwoejIpO1xuICB2YXIgczEgPSB0aGlzLnkucmVkTXVsKHB6Mi5yZWRNdWwocC56KSk7XG4gIHZhciBzMiA9IHAueS5yZWRNdWwoejIucmVkTXVsKHRoaXMueikpO1xuXG4gIHZhciBoID0gdTEucmVkU3ViKHUyKTtcbiAgdmFyIHIgPSBzMS5yZWRTdWIoczIpO1xuICBpZiAoaC5jbXBuKDApID09PSAwKSB7XG4gICAgaWYgKHIuY21wbigwKSAhPT0gMClcbiAgICAgIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gdGhpcy5kYmwoKTtcbiAgfVxuXG4gIHZhciBoMiA9IGgucmVkU3FyKCk7XG4gIHZhciBoMyA9IGgyLnJlZE11bChoKTtcbiAgdmFyIHYgPSB1MS5yZWRNdWwoaDIpO1xuXG4gIHZhciBueCA9IHIucmVkU3FyKCkucmVkSUFkZChoMykucmVkSVN1Yih2KS5yZWRJU3ViKHYpO1xuICB2YXIgbnkgPSByLnJlZE11bCh2LnJlZElTdWIobngpKS5yZWRJU3ViKHMxLnJlZE11bChoMykpO1xuICB2YXIgbnogPSB0aGlzLnoucmVkTXVsKHAueikucmVkTXVsKGgpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUubWl4ZWRBZGQgPSBmdW5jdGlvbiBtaXhlZEFkZChwKSB7XG4gIC8vIE8gKyBQID0gUFxuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHAudG9KKCk7XG5cbiAgLy8gUCArIE8gPSBQXG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyA4TSArIDNTICsgN0FcbiAgdmFyIHoyID0gdGhpcy56LnJlZFNxcigpO1xuICB2YXIgdTEgPSB0aGlzLng7XG4gIHZhciB1MiA9IHAueC5yZWRNdWwoejIpO1xuICB2YXIgczEgPSB0aGlzLnk7XG4gIHZhciBzMiA9IHAueS5yZWRNdWwoejIpLnJlZE11bCh0aGlzLnopO1xuXG4gIHZhciBoID0gdTEucmVkU3ViKHUyKTtcbiAgdmFyIHIgPSBzMS5yZWRTdWIoczIpO1xuICBpZiAoaC5jbXBuKDApID09PSAwKSB7XG4gICAgaWYgKHIuY21wbigwKSAhPT0gMClcbiAgICAgIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gdGhpcy5kYmwoKTtcbiAgfVxuXG4gIHZhciBoMiA9IGgucmVkU3FyKCk7XG4gIHZhciBoMyA9IGgyLnJlZE11bChoKTtcbiAgdmFyIHYgPSB1MS5yZWRNdWwoaDIpO1xuXG4gIHZhciBueCA9IHIucmVkU3FyKCkucmVkSUFkZChoMykucmVkSVN1Yih2KS5yZWRJU3ViKHYpO1xuICB2YXIgbnkgPSByLnJlZE11bCh2LnJlZElTdWIobngpKS5yZWRJU3ViKHMxLnJlZE11bChoMykpO1xuICB2YXIgbnogPSB0aGlzLnoucmVkTXVsKGgpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZGJscCA9IGZ1bmN0aW9uIGRibHAocG93KSB7XG4gIGlmIChwb3cgPT09IDApXG4gICAgcmV0dXJuIHRoaXM7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcbiAgaWYgKCFwb3cpXG4gICAgcmV0dXJuIHRoaXMuZGJsKCk7XG5cbiAgaWYgKHRoaXMuY3VydmUuemVyb0EgfHwgdGhpcy5jdXJ2ZS50aHJlZUEpIHtcbiAgICB2YXIgciA9IHRoaXM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3c7IGkrKylcbiAgICAgIHIgPSByLmRibCgpO1xuICAgIHJldHVybiByO1xuICB9XG5cbiAgLy8gMU0gKyAyUyArIDFBICsgTiAqICg0UyArIDVNICsgOEEpXG4gIC8vIE4gPSAxID0+IDZNICsgNlMgKyA5QVxuICB2YXIgYSA9IHRoaXMuY3VydmUuYTtcbiAgdmFyIHRpbnYgPSB0aGlzLmN1cnZlLnRpbnY7XG5cbiAgdmFyIGp4ID0gdGhpcy54O1xuICB2YXIgankgPSB0aGlzLnk7XG4gIHZhciBqeiA9IHRoaXMuejtcbiAgdmFyIGp6NCA9IGp6LnJlZFNxcigpLnJlZFNxcigpO1xuXG4gIC8vIFJldXNlIHJlc3VsdHNcbiAgdmFyIGp5ZCA9IGp5LnJlZEFkZChqeSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG93OyBpKyspIHtcbiAgICB2YXIgangyID0gangucmVkU3FyKCk7XG4gICAgdmFyIGp5ZDIgPSBqeWQucmVkU3FyKCk7XG4gICAgdmFyIGp5ZDQgPSBqeWQyLnJlZFNxcigpO1xuICAgIHZhciBjID0gangyLnJlZEFkZChqeDIpLnJlZElBZGQoangyKS5yZWRJQWRkKGEucmVkTXVsKGp6NCkpO1xuXG4gICAgdmFyIHQxID0gangucmVkTXVsKGp5ZDIpO1xuICAgIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0MS5yZWRBZGQodDEpKTtcbiAgICB2YXIgdDIgPSB0MS5yZWRJU3ViKG54KTtcbiAgICB2YXIgZG55ID0gYy5yZWRNdWwodDIpO1xuICAgIGRueSA9IGRueS5yZWRJQWRkKGRueSkucmVkSVN1YihqeWQ0KTtcbiAgICB2YXIgbnogPSBqeWQucmVkTXVsKGp6KTtcbiAgICBpZiAoaSArIDEgPCBwb3cpXG4gICAgICBqejQgPSBqejQucmVkTXVsKGp5ZDQpO1xuXG4gICAganggPSBueDtcbiAgICBqeiA9IG56O1xuICAgIGp5ZCA9IGRueTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChqeCwganlkLnJlZE11bCh0aW52KSwganopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICBpZiAodGhpcy5jdXJ2ZS56ZXJvQSlcbiAgICByZXR1cm4gdGhpcy5femVyb0RibCgpO1xuICBlbHNlIGlmICh0aGlzLmN1cnZlLnRocmVlQSlcbiAgICByZXR1cm4gdGhpcy5fdGhyZWVEYmwoKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl9kYmwoKTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuX3plcm9EYmwgPSBmdW5jdGlvbiBfemVyb0RibCgpIHtcbiAgdmFyIG54O1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgLy8gWiA9IDFcbiAgaWYgKHRoaXMuek9uZSkge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMC5odG1sXG4gICAgLy8gICAgICNkb3VibGluZy1tZGJsLTIwMDctYmxcbiAgICAvLyAxTSArIDVTICsgMTRBXG5cbiAgICAvLyBYWCA9IFgxXjJcbiAgICB2YXIgeHggPSB0aGlzLngucmVkU3FyKCk7XG4gICAgLy8gWVkgPSBZMV4yXG4gICAgdmFyIHl5ID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIFlZWVkgPSBZWV4yXG4gICAgdmFyIHl5eXkgPSB5eS5yZWRTcXIoKTtcbiAgICAvLyBTID0gMiAqICgoWDEgKyBZWSleMiAtIFhYIC0gWVlZWSlcbiAgICB2YXIgcyA9IHRoaXMueC5yZWRBZGQoeXkpLnJlZFNxcigpLnJlZElTdWIoeHgpLnJlZElTdWIoeXl5eSk7XG4gICAgcyA9IHMucmVkSUFkZChzKTtcbiAgICAvLyBNID0gMyAqIFhYICsgYTsgYSA9IDBcbiAgICB2YXIgbSA9IHh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCk7XG4gICAgLy8gVCA9IE0gXiAyIC0gMipTXG4gICAgdmFyIHQgPSBtLnJlZFNxcigpLnJlZElTdWIocykucmVkSVN1YihzKTtcblxuICAgIC8vIDggKiBZWVlZXG4gICAgdmFyIHl5eXk4ID0geXl5eS5yZWRJQWRkKHl5eXkpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcblxuICAgIC8vIFgzID0gVFxuICAgIG54ID0gdDtcbiAgICAvLyBZMyA9IE0gKiAoUyAtIFQpIC0gOCAqIFlZWVlcbiAgICBueSA9IG0ucmVkTXVsKHMucmVkSVN1Yih0KSkucmVkSVN1Yih5eXl5OCk7XG4gICAgLy8gWjMgPSAyKlkxXG4gICAgbnogPSB0aGlzLnkucmVkQWRkKHRoaXMueSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0wLmh0bWxcbiAgICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA5LWxcbiAgICAvLyAyTSArIDVTICsgMTNBXG5cbiAgICAvLyBBID0gWDFeMlxuICAgIHZhciBhID0gdGhpcy54LnJlZFNxcigpO1xuICAgIC8vIEIgPSBZMV4yXG4gICAgdmFyIGIgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gQyA9IEJeMlxuICAgIHZhciBjID0gYi5yZWRTcXIoKTtcbiAgICAvLyBEID0gMiAqICgoWDEgKyBCKV4yIC0gQSAtIEMpXG4gICAgdmFyIGQgPSB0aGlzLngucmVkQWRkKGIpLnJlZFNxcigpLnJlZElTdWIoYSkucmVkSVN1YihjKTtcbiAgICBkID0gZC5yZWRJQWRkKGQpO1xuICAgIC8vIEUgPSAzICogQVxuICAgIHZhciBlID0gYS5yZWRBZGQoYSkucmVkSUFkZChhKTtcbiAgICAvLyBGID0gRV4yXG4gICAgdmFyIGYgPSBlLnJlZFNxcigpO1xuXG4gICAgLy8gOCAqIENcbiAgICB2YXIgYzggPSBjLnJlZElBZGQoYyk7XG4gICAgYzggPSBjOC5yZWRJQWRkKGM4KTtcbiAgICBjOCA9IGM4LnJlZElBZGQoYzgpO1xuXG4gICAgLy8gWDMgPSBGIC0gMiAqIERcbiAgICBueCA9IGYucmVkSVN1YihkKS5yZWRJU3ViKGQpO1xuICAgIC8vIFkzID0gRSAqIChEIC0gWDMpIC0gOCAqIENcbiAgICBueSA9IGUucmVkTXVsKGQucmVkSVN1YihueCkpLnJlZElTdWIoYzgpO1xuICAgIC8vIFozID0gMiAqIFkxICogWjFcbiAgICBueiA9IHRoaXMueS5yZWRNdWwodGhpcy56KTtcbiAgICBueiA9IG56LnJlZElBZGQobnopO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5fdGhyZWVEYmwgPSBmdW5jdGlvbiBfdGhyZWVEYmwoKSB7XG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIC8vIFogPSAxXG4gIGlmICh0aGlzLnpPbmUpIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTMuaHRtbFxuICAgIC8vICAgICAjZG91YmxpbmctbWRibC0yMDA3LWJsXG4gICAgLy8gMU0gKyA1UyArIDE1QVxuXG4gICAgLy8gWFggPSBYMV4yXG4gICAgdmFyIHh4ID0gdGhpcy54LnJlZFNxcigpO1xuICAgIC8vIFlZID0gWTFeMlxuICAgIHZhciB5eSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBZWVlZID0gWVleMlxuICAgIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gICAgLy8gUyA9IDIgKiAoKFgxICsgWVkpXjIgLSBYWCAtIFlZWVkpXG4gICAgdmFyIHMgPSB0aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO1xuICAgIHMgPSBzLnJlZElBZGQocyk7XG4gICAgLy8gTSA9IDMgKiBYWCArIGFcbiAgICB2YXIgbSA9IHh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCkucmVkSUFkZCh0aGlzLmN1cnZlLmEpO1xuICAgIC8vIFQgPSBNXjIgLSAyICogU1xuICAgIHZhciB0ID0gbS5yZWRTcXIoKS5yZWRJU3ViKHMpLnJlZElTdWIocyk7XG4gICAgLy8gWDMgPSBUXG4gICAgbnggPSB0O1xuICAgIC8vIFkzID0gTSAqIChTIC0gVCkgLSA4ICogWVlZWVxuICAgIHZhciB5eXl5OCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG4gICAgbnkgPSBtLnJlZE11bChzLnJlZElTdWIodCkpLnJlZElTdWIoeXl5eTgpO1xuICAgIC8vIFozID0gMiAqIFkxXG4gICAgbnogPSB0aGlzLnkucmVkQWRkKHRoaXMueSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0zLmh0bWwjZG91YmxpbmctZGJsLTIwMDEtYlxuICAgIC8vIDNNICsgNVNcblxuICAgIC8vIGRlbHRhID0gWjFeMlxuICAgIHZhciBkZWx0YSA9IHRoaXMuei5yZWRTcXIoKTtcbiAgICAvLyBnYW1tYSA9IFkxXjJcbiAgICB2YXIgZ2FtbWEgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gYmV0YSA9IFgxICogZ2FtbWFcbiAgICB2YXIgYmV0YSA9IHRoaXMueC5yZWRNdWwoZ2FtbWEpO1xuICAgIC8vIGFscGhhID0gMyAqIChYMSAtIGRlbHRhKSAqIChYMSArIGRlbHRhKVxuICAgIHZhciBhbHBoYSA9IHRoaXMueC5yZWRTdWIoZGVsdGEpLnJlZE11bCh0aGlzLngucmVkQWRkKGRlbHRhKSk7XG4gICAgYWxwaGEgPSBhbHBoYS5yZWRBZGQoYWxwaGEpLnJlZElBZGQoYWxwaGEpO1xuICAgIC8vIFgzID0gYWxwaGFeMiAtIDggKiBiZXRhXG4gICAgdmFyIGJldGE0ID0gYmV0YS5yZWRJQWRkKGJldGEpO1xuICAgIGJldGE0ID0gYmV0YTQucmVkSUFkZChiZXRhNCk7XG4gICAgdmFyIGJldGE4ID0gYmV0YTQucmVkQWRkKGJldGE0KTtcbiAgICBueCA9IGFscGhhLnJlZFNxcigpLnJlZElTdWIoYmV0YTgpO1xuICAgIC8vIFozID0gKFkxICsgWjEpXjIgLSBnYW1tYSAtIGRlbHRhXG4gICAgbnogPSB0aGlzLnkucmVkQWRkKHRoaXMueikucmVkU3FyKCkucmVkSVN1YihnYW1tYSkucmVkSVN1YihkZWx0YSk7XG4gICAgLy8gWTMgPSBhbHBoYSAqICg0ICogYmV0YSAtIFgzKSAtIDggKiBnYW1tYV4yXG4gICAgdmFyIGdnYW1tYTggPSBnYW1tYS5yZWRTcXIoKTtcbiAgICBnZ2FtbWE4ID0gZ2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO1xuICAgIGdnYW1tYTggPSBnZ2FtbWE4LnJlZElBZGQoZ2dhbW1hOCk7XG4gICAgZ2dhbW1hOCA9IGdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtcbiAgICBueSA9IGFscGhhLnJlZE11bChiZXRhNC5yZWRJU3ViKG54KSkucmVkSVN1YihnZ2FtbWE4KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuX2RibCA9IGZ1bmN0aW9uIF9kYmwoKSB7XG4gIHZhciBhID0gdGhpcy5jdXJ2ZS5hO1xuXG4gIC8vIDRNICsgNlMgKyAxMEFcbiAgdmFyIGp4ID0gdGhpcy54O1xuICB2YXIgankgPSB0aGlzLnk7XG4gIHZhciBqeiA9IHRoaXMuejtcbiAgdmFyIGp6NCA9IGp6LnJlZFNxcigpLnJlZFNxcigpO1xuXG4gIHZhciBqeDIgPSBqeC5yZWRTcXIoKTtcbiAgdmFyIGp5MiA9IGp5LnJlZFNxcigpO1xuXG4gIHZhciBjID0gangyLnJlZEFkZChqeDIpLnJlZElBZGQoangyKS5yZWRJQWRkKGEucmVkTXVsKGp6NCkpO1xuXG4gIHZhciBqeGQ0ID0gangucmVkQWRkKGp4KTtcbiAganhkNCA9IGp4ZDQucmVkSUFkZChqeGQ0KTtcbiAgdmFyIHQxID0ganhkNC5yZWRNdWwoankyKTtcbiAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHQxLnJlZEFkZCh0MSkpO1xuICB2YXIgdDIgPSB0MS5yZWRJU3ViKG54KTtcblxuICB2YXIganlkOCA9IGp5Mi5yZWRTcXIoKTtcbiAganlkOCA9IGp5ZDgucmVkSUFkZChqeWQ4KTtcbiAganlkOCA9IGp5ZDgucmVkSUFkZChqeWQ4KTtcbiAganlkOCA9IGp5ZDgucmVkSUFkZChqeWQ4KTtcbiAgdmFyIG55ID0gYy5yZWRNdWwodDIpLnJlZElTdWIoanlkOCk7XG4gIHZhciBueiA9IGp5LnJlZEFkZChqeSkucmVkTXVsKGp6KTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLnRycGwgPSBmdW5jdGlvbiB0cnBsKCkge1xuICBpZiAoIXRoaXMuY3VydmUuemVyb0EpXG4gICAgcmV0dXJuIHRoaXMuZGJsKCkuYWRkKHRoaXMpO1xuXG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMC5odG1sI3RyaXBsaW5nLXRwbC0yMDA3LWJsXG4gIC8vIDVNICsgMTBTICsgLi4uXG5cbiAgLy8gWFggPSBYMV4yXG4gIHZhciB4eCA9IHRoaXMueC5yZWRTcXIoKTtcbiAgLy8gWVkgPSBZMV4yXG4gIHZhciB5eSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgLy8gWlogPSBaMV4yXG4gIHZhciB6eiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgLy8gWVlZWSA9IFlZXjJcbiAgdmFyIHl5eXkgPSB5eS5yZWRTcXIoKTtcbiAgLy8gTSA9IDMgKiBYWCArIGEgKiBaWjI7IGEgPSAwXG4gIHZhciBtID0geHgucmVkQWRkKHh4KS5yZWRJQWRkKHh4KTtcbiAgLy8gTU0gPSBNXjJcbiAgdmFyIG1tID0gbS5yZWRTcXIoKTtcbiAgLy8gRSA9IDYgKiAoKFgxICsgWVkpXjIgLSBYWCAtIFlZWVkpIC0gTU1cbiAgdmFyIGUgPSB0aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO1xuICBlID0gZS5yZWRJQWRkKGUpO1xuICBlID0gZS5yZWRBZGQoZSkucmVkSUFkZChlKTtcbiAgZSA9IGUucmVkSVN1YihtbSk7XG4gIC8vIEVFID0gRV4yXG4gIHZhciBlZSA9IGUucmVkU3FyKCk7XG4gIC8vIFQgPSAxNipZWVlZXG4gIHZhciB0ID0geXl5eS5yZWRJQWRkKHl5eXkpO1xuICB0ID0gdC5yZWRJQWRkKHQpO1xuICB0ID0gdC5yZWRJQWRkKHQpO1xuICB0ID0gdC5yZWRJQWRkKHQpO1xuICAvLyBVID0gKE0gKyBFKV4yIC0gTU0gLSBFRSAtIFRcbiAgdmFyIHUgPSBtLnJlZElBZGQoZSkucmVkU3FyKCkucmVkSVN1YihtbSkucmVkSVN1YihlZSkucmVkSVN1Yih0KTtcbiAgLy8gWDMgPSA0ICogKFgxICogRUUgLSA0ICogWVkgKiBVKVxuICB2YXIgeXl1NCA9IHl5LnJlZE11bCh1KTtcbiAgeXl1NCA9IHl5dTQucmVkSUFkZCh5eXU0KTtcbiAgeXl1NCA9IHl5dTQucmVkSUFkZCh5eXU0KTtcbiAgdmFyIG54ID0gdGhpcy54LnJlZE11bChlZSkucmVkSVN1Yih5eXU0KTtcbiAgbnggPSBueC5yZWRJQWRkKG54KTtcbiAgbnggPSBueC5yZWRJQWRkKG54KTtcbiAgLy8gWTMgPSA4ICogWTEgKiAoVSAqIChUIC0gVSkgLSBFICogRUUpXG4gIHZhciBueSA9IHRoaXMueS5yZWRNdWwodS5yZWRNdWwodC5yZWRJU3ViKHUpKS5yZWRJU3ViKGUucmVkTXVsKGVlKSkpO1xuICBueSA9IG55LnJlZElBZGQobnkpO1xuICBueSA9IG55LnJlZElBZGQobnkpO1xuICBueSA9IG55LnJlZElBZGQobnkpO1xuICAvLyBaMyA9IChaMSArIEUpXjIgLSBaWiAtIEVFXG4gIHZhciBueiA9IHRoaXMuei5yZWRBZGQoZSkucmVkU3FyKCkucmVkSVN1Yih6eikucmVkSVN1YihlZSk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoaywga2Jhc2UpIHtcbiAgayA9IG5ldyBCTihrLCBrYmFzZSk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWwodGhpcywgayk7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEocCkge1xuICBpZiAocC50eXBlID09PSAnYWZmaW5lJylcbiAgICByZXR1cm4gdGhpcy5lcShwLnRvSigpKTtcblxuICBpZiAodGhpcyA9PT0gcClcbiAgICByZXR1cm4gdHJ1ZTtcblxuICAvLyB4MSAqIHoyXjIgPT0geDIgKiB6MV4yXG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHB6MiA9IHAuei5yZWRTcXIoKTtcbiAgaWYgKHRoaXMueC5yZWRNdWwocHoyKS5yZWRJU3ViKHAueC5yZWRNdWwoejIpKS5jbXBuKDApICE9PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyB5MSAqIHoyXjMgPT0geTIgKiB6MV4zXG4gIHZhciB6MyA9IHoyLnJlZE11bCh0aGlzLnopO1xuICB2YXIgcHozID0gcHoyLnJlZE11bChwLnopO1xuICByZXR1cm4gdGhpcy55LnJlZE11bChwejMpLnJlZElTdWIocC55LnJlZE11bCh6MykpLmNtcG4oMCkgPT09IDA7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmVxWFRvUCA9IGZ1bmN0aW9uIGVxWFRvUCh4KSB7XG4gIHZhciB6cyA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHJ4ID0geC50b1JlZCh0aGlzLmN1cnZlLnJlZCkucmVkTXVsKHpzKTtcbiAgaWYgKHRoaXMueC5jbXAocngpID09PSAwKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHZhciB4YyA9IHguY2xvbmUoKTtcbiAgdmFyIHQgPSB0aGlzLmN1cnZlLnJlZE4ucmVkTXVsKHpzKTtcbiAgZm9yICg7Oykge1xuICAgIHhjLmlhZGQodGhpcy5jdXJ2ZS5uKTtcbiAgICBpZiAoeGMuY21wKHRoaXMuY3VydmUucCkgPj0gMClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIHJ4LnJlZElBZGQodCk7XG4gICAgaWYgKHRoaXMueC5jbXAocngpID09PSAwKVxuICAgICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbkpQb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBKUG9pbnQgSW5maW5pdHk+JztcbiAgcmV0dXJuICc8RUMgSlBvaW50IHg6ICcgKyB0aGlzLngudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgeTogJyArIHRoaXMueS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB6OiAnICsgdGhpcy56LnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIC8vIFhYWCBUaGlzIGNvZGUgYXNzdW1lcyB0aGF0IHplcm8gaXMgYWx3YXlzIHplcm8gaW4gcmVkXG4gIHJldHVybiB0aGlzLnouY21wbigwKSA9PT0gMDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gTW9udEN1cnZlKGNvbmYpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdtb250JywgY29uZik7XG5cbiAgdGhpcy5hID0gbmV3IEJOKGNvbmYuYSwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5iID0gbmV3IEJOKGNvbmYuYiwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5pNCA9IG5ldyBCTig0KS50b1JlZCh0aGlzLnJlZCkucmVkSW52bSgpO1xuICB0aGlzLnR3byA9IG5ldyBCTigyKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYTI0ID0gdGhpcy5pNC5yZWRNdWwodGhpcy5hLnJlZEFkZCh0aGlzLnR3bykpO1xufVxuaW5oZXJpdHMoTW9udEN1cnZlLCBCYXNlKTtcbm1vZHVsZS5leHBvcnRzID0gTW9udEN1cnZlO1xuXG5Nb250Q3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHtcbiAgdmFyIHggPSBwb2ludC5ub3JtYWxpemUoKS54O1xuICB2YXIgeDIgPSB4LnJlZFNxcigpO1xuICB2YXIgcmhzID0geDIucmVkTXVsKHgpLnJlZEFkZCh4Mi5yZWRNdWwodGhpcy5hKSkucmVkQWRkKHgpO1xuICB2YXIgeSA9IHJocy5yZWRTcXJ0KCk7XG5cbiAgcmV0dXJuIHkucmVkU3FyKCkuY21wKHJocykgPT09IDA7XG59O1xuXG5mdW5jdGlvbiBQb2ludChjdXJ2ZSwgeCwgeikge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAncHJvamVjdGl2ZScpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB6ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy56ID0gdGhpcy5jdXJ2ZS56ZXJvO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy56ID0gbmV3IEJOKHosIDE2KTtcbiAgICBpZiAoIXRoaXMueC5yZWQpXG4gICAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICghdGhpcy56LnJlZClcbiAgICAgIHRoaXMueiA9IHRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gIH1cbn1cbmluaGVyaXRzKFBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUuZGVjb2RlUG9pbnQgPSBmdW5jdGlvbiBkZWNvZGVQb2ludChieXRlcywgZW5jKSB7XG4gIHJldHVybiB0aGlzLnBvaW50KHV0aWxzLnRvQXJyYXkoYnl0ZXMsIGVuYyksIDEpO1xufTtcblxuTW9udEN1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHopIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB6KTtcbn07XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKCkge1xuICAvLyBOby1vcFxufTtcblxuUG9pbnQucHJvdG90eXBlLl9lbmNvZGUgPSBmdW5jdGlvbiBfZW5jb2RlKCkge1xuICByZXR1cm4gdGhpcy5nZXRYKCkudG9BcnJheSgnYmUnLCB0aGlzLmN1cnZlLnAuYnl0ZUxlbmd0aCgpKTtcbn07XG5cblBvaW50LmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04oY3VydmUsIG9iaikge1xuICByZXR1cm4gbmV3IFBvaW50KGN1cnZlLCBvYmpbMF0sIG9ialsxXSB8fCBjdXJ2ZS5vbmUpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgUG9pbnQgSW5maW5pdHk+JztcbiAgcmV0dXJuICc8RUMgUG9pbnQgeDogJyArIHRoaXMueC5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgejogJyArIHRoaXMuei5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICAvLyBYWFggVGhpcyBjb2RlIGFzc3VtZXMgdGhhdCB6ZXJvIGlzIGFsd2F5cyB6ZXJvIGluIHJlZFxuICByZXR1cm4gdGhpcy56LmNtcG4oMCkgPT09IDA7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICAvLyBodHRwOi8vaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLW1vbnRnb20teHouaHRtbCNkb3VibGluZy1kYmwtMTk4Ny1tLTNcbiAgLy8gMk0gKyAyUyArIDRBXG5cbiAgLy8gQSA9IFgxICsgWjFcbiAgdmFyIGEgPSB0aGlzLngucmVkQWRkKHRoaXMueik7XG4gIC8vIEFBID0gQV4yXG4gIHZhciBhYSA9IGEucmVkU3FyKCk7XG4gIC8vIEIgPSBYMSAtIFoxXG4gIHZhciBiID0gdGhpcy54LnJlZFN1Yih0aGlzLnopO1xuICAvLyBCQiA9IEJeMlxuICB2YXIgYmIgPSBiLnJlZFNxcigpO1xuICAvLyBDID0gQUEgLSBCQlxuICB2YXIgYyA9IGFhLnJlZFN1YihiYik7XG4gIC8vIFgzID0gQUEgKiBCQlxuICB2YXIgbnggPSBhYS5yZWRNdWwoYmIpO1xuICAvLyBaMyA9IEMgKiAoQkIgKyBBMjQgKiBDKVxuICB2YXIgbnogPSBjLnJlZE11bChiYi5yZWRBZGQodGhpcy5jdXJ2ZS5hMjQucmVkTXVsKGMpKSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQgb24gTW9udGdvbWVyeSBjdXJ2ZScpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmRpZmZBZGQgPSBmdW5jdGlvbiBkaWZmQWRkKHAsIGRpZmYpIHtcbiAgLy8gaHR0cDovL2h5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1tb250Z29tLXh6Lmh0bWwjZGlmZmFkZC1kYWRkLTE5ODctbS0zXG4gIC8vIDRNICsgMlMgKyA2QVxuXG4gIC8vIEEgPSBYMiArIFoyXG4gIHZhciBhID0gdGhpcy54LnJlZEFkZCh0aGlzLnopO1xuICAvLyBCID0gWDIgLSBaMlxuICB2YXIgYiA9IHRoaXMueC5yZWRTdWIodGhpcy56KTtcbiAgLy8gQyA9IFgzICsgWjNcbiAgdmFyIGMgPSBwLngucmVkQWRkKHAueik7XG4gIC8vIEQgPSBYMyAtIFozXG4gIHZhciBkID0gcC54LnJlZFN1YihwLnopO1xuICAvLyBEQSA9IEQgKiBBXG4gIHZhciBkYSA9IGQucmVkTXVsKGEpO1xuICAvLyBDQiA9IEMgKiBCXG4gIHZhciBjYiA9IGMucmVkTXVsKGIpO1xuICAvLyBYNSA9IFoxICogKERBICsgQ0IpXjJcbiAgdmFyIG54ID0gZGlmZi56LnJlZE11bChkYS5yZWRBZGQoY2IpLnJlZFNxcigpKTtcbiAgLy8gWjUgPSBYMSAqIChEQSAtIENCKV4yXG4gIHZhciBueiA9IGRpZmYueC5yZWRNdWwoZGEucmVkSVN1YihjYikucmVkU3FyKCkpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrKSB7XG4gIHZhciB0ID0gay5jbG9uZSgpO1xuICB2YXIgYSA9IHRoaXM7IC8vIChOIC8gMikgKiBRICsgUVxuICB2YXIgYiA9IHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7IC8vIChOIC8gMikgKiBRXG4gIHZhciBjID0gdGhpczsgLy8gUVxuXG4gIGZvciAodmFyIGJpdHMgPSBbXTsgdC5jbXBuKDApICE9PSAwOyB0Lml1c2hybigxKSlcbiAgICBiaXRzLnB1c2godC5hbmRsbigxKSk7XG5cbiAgZm9yICh2YXIgaSA9IGJpdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoYml0c1tpXSA9PT0gMCkge1xuICAgICAgLy8gTiAqIFEgKyBRID0gKChOIC8gMikgKiBRICsgUSkpICsgKE4gLyAyKSAqIFFcbiAgICAgIGEgPSBhLmRpZmZBZGQoYiwgYyk7XG4gICAgICAvLyBOICogUSA9IDIgKiAoKE4gLyAyKSAqIFEgKyBRKSlcbiAgICAgIGIgPSBiLmRibCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOICogUSA9ICgoTiAvIDIpICogUSArIFEpICsgKChOIC8gMikgKiBRKVxuICAgICAgYiA9IGEuZGlmZkFkZChiLCBjKTtcbiAgICAgIC8vIE4gKiBRICsgUSA9IDIgKiAoKE4gLyAyKSAqIFEgKyBRKVxuICAgICAgYSA9IGEuZGJsKCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3Qgc3VwcG9ydGVkIG9uIE1vbnRnb21lcnkgY3VydmUnKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5qdW1sQWRkID0gZnVuY3Rpb24ganVtbEFkZCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3Qgc3VwcG9ydGVkIG9uIE1vbnRnb21lcnkgY3VydmUnKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKG90aGVyKSB7XG4gIHJldHVybiB0aGlzLmdldFgoKS5jbXAob3RoZXIuZ2V0WCgpKSA9PT0gMDtcbn07XG5cblBvaW50LnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUoKSB7XG4gIHRoaXMueCA9IHRoaXMueC5yZWRNdWwodGhpcy56LnJlZEludm0oKSk7XG4gIHRoaXMueiA9IHRoaXMuY3VydmUub25lO1xuICByZXR1cm4gdGhpcztcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gZ2V0WCgpIHtcbiAgLy8gTm9ybWFsaXplIGNvb3JkaW5hdGVzXG4gIHRoaXMubm9ybWFsaXplKCk7XG5cbiAgcmV0dXJuIHRoaXMueC5mcm9tUmVkKCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xuXG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBFZHdhcmRzQ3VydmUoY29uZikge1xuICAvLyBOT1RFOiBJbXBvcnRhbnQgYXMgd2UgYXJlIGNyZWF0aW5nIHBvaW50IGluIEJhc2UuY2FsbCgpXG4gIHRoaXMudHdpc3RlZCA9IChjb25mLmEgfCAwKSAhPT0gMTtcbiAgdGhpcy5tT25lQSA9IHRoaXMudHdpc3RlZCAmJiAoY29uZi5hIHwgMCkgPT09IC0xO1xuICB0aGlzLmV4dGVuZGVkID0gdGhpcy5tT25lQTtcblxuICBCYXNlLmNhbGwodGhpcywgJ2Vkd2FyZHMnLCBjb25mKTtcblxuICB0aGlzLmEgPSBuZXcgQk4oY29uZi5hLCAxNikudW1vZCh0aGlzLnJlZC5tKTtcbiAgdGhpcy5hID0gdGhpcy5hLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5jID0gbmV3IEJOKGNvbmYuYywgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5jMiA9IHRoaXMuYy5yZWRTcXIoKTtcbiAgdGhpcy5kID0gbmV3IEJOKGNvbmYuZCwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5kZCA9IHRoaXMuZC5yZWRBZGQodGhpcy5kKTtcblxuICBhc3NlcnQoIXRoaXMudHdpc3RlZCB8fCB0aGlzLmMuZnJvbVJlZCgpLmNtcG4oMSkgPT09IDApO1xuICB0aGlzLm9uZUMgPSAoY29uZi5jIHwgMCkgPT09IDE7XG59XG5pbmhlcml0cyhFZHdhcmRzQ3VydmUsIEJhc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBFZHdhcmRzQ3VydmU7XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUuX211bEEgPSBmdW5jdGlvbiBfbXVsQShudW0pIHtcbiAgaWYgKHRoaXMubU9uZUEpXG4gICAgcmV0dXJuIG51bS5yZWROZWcoKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmEucmVkTXVsKG51bSk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLl9tdWxDID0gZnVuY3Rpb24gX211bEMobnVtKSB7XG4gIGlmICh0aGlzLm9uZUMpXG4gICAgcmV0dXJuIG51bTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmMucmVkTXVsKG51bSk7XG59O1xuXG4vLyBKdXN0IGZvciBjb21wYXRpYmlsaXR5IHdpdGggU2hvcnQgY3VydmVcbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUuanBvaW50ID0gZnVuY3Rpb24ganBvaW50KHgsIHksIHosIHQpIHtcbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSwgeiwgdCk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50RnJvbVggPSBmdW5jdGlvbiBwb2ludEZyb21YKHgsIG9kZCkge1xuICB4ID0gbmV3IEJOKHgsIDE2KTtcbiAgaWYgKCF4LnJlZClcbiAgICB4ID0geC50b1JlZCh0aGlzLnJlZCk7XG5cbiAgdmFyIHgyID0geC5yZWRTcXIoKTtcbiAgdmFyIHJocyA9IHRoaXMuYzIucmVkU3ViKHRoaXMuYS5yZWRNdWwoeDIpKTtcbiAgdmFyIGxocyA9IHRoaXMub25lLnJlZFN1Yih0aGlzLmMyLnJlZE11bCh0aGlzLmQpLnJlZE11bCh4MikpO1xuXG4gIHZhciB5MiA9IHJocy5yZWRNdWwobGhzLnJlZEludm0oKSk7XG4gIHZhciB5ID0geTIucmVkU3FydCgpO1xuICBpZiAoeS5yZWRTcXIoKS5yZWRTdWIoeTIpLmNtcCh0aGlzLnplcm8pICE9PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuXG4gIHZhciBpc09kZCA9IHkuZnJvbVJlZCgpLmlzT2RkKCk7XG4gIGlmIChvZGQgJiYgIWlzT2RkIHx8ICFvZGQgJiYgaXNPZGQpXG4gICAgeSA9IHkucmVkTmVnKCk7XG5cbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50RnJvbVkgPSBmdW5jdGlvbiBwb2ludEZyb21ZKHksIG9kZCkge1xuICB5ID0gbmV3IEJOKHksIDE2KTtcbiAgaWYgKCF5LnJlZClcbiAgICB5ID0geS50b1JlZCh0aGlzLnJlZCk7XG5cbiAgLy8geF4yID0gKHleMiAtIGNeMikgLyAoY14yIGQgeV4yIC0gYSlcbiAgdmFyIHkyID0geS5yZWRTcXIoKTtcbiAgdmFyIGxocyA9IHkyLnJlZFN1Yih0aGlzLmMyKTtcbiAgdmFyIHJocyA9IHkyLnJlZE11bCh0aGlzLmQpLnJlZE11bCh0aGlzLmMyKS5yZWRTdWIodGhpcy5hKTtcbiAgdmFyIHgyID0gbGhzLnJlZE11bChyaHMucmVkSW52bSgpKTtcblxuICBpZiAoeDIuY21wKHRoaXMuemVybykgPT09IDApIHtcbiAgICBpZiAob2RkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMucG9pbnQodGhpcy56ZXJvLCB5KTtcbiAgfVxuXG4gIHZhciB4ID0geDIucmVkU3FydCgpO1xuICBpZiAoeC5yZWRTcXIoKS5yZWRTdWIoeDIpLmNtcCh0aGlzLnplcm8pICE9PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuXG4gIGlmICh4LmZyb21SZWQoKS5pc09kZCgpICE9PSBvZGQpXG4gICAgeCA9IHgucmVkTmVnKCk7XG5cbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHtcbiAgaWYgKHBvaW50LmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdHJ1ZTtcblxuICAvLyBDdXJ2ZTogQSAqIFheMiArIFleMiA9IENeMiAqICgxICsgRCAqIFheMiAqIFleMilcbiAgcG9pbnQubm9ybWFsaXplKCk7XG5cbiAgdmFyIHgyID0gcG9pbnQueC5yZWRTcXIoKTtcbiAgdmFyIHkyID0gcG9pbnQueS5yZWRTcXIoKTtcbiAgdmFyIGxocyA9IHgyLnJlZE11bCh0aGlzLmEpLnJlZEFkZCh5Mik7XG4gIHZhciByaHMgPSB0aGlzLmMyLnJlZE11bCh0aGlzLm9uZS5yZWRBZGQodGhpcy5kLnJlZE11bCh4MikucmVkTXVsKHkyKSkpO1xuXG4gIHJldHVybiBsaHMuY21wKHJocykgPT09IDA7XG59O1xuXG5mdW5jdGlvbiBQb2ludChjdXJ2ZSwgeCwgeSwgeiwgdCkge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAncHJvamVjdGl2ZScpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLnplcm87XG4gICAgdGhpcy55ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy56ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy50ID0gdGhpcy5jdXJ2ZS56ZXJvO1xuICAgIHRoaXMuek9uZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTtcbiAgICB0aGlzLnkgPSBuZXcgQk4oeSwgMTYpO1xuICAgIHRoaXMueiA9IHogPyBuZXcgQk4oeiwgMTYpIDogdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy50ID0gdCAmJiBuZXcgQk4odCwgMTYpO1xuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnkucmVkKVxuICAgICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMuei5yZWQpXG4gICAgICB0aGlzLnogPSB0aGlzLnoudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICh0aGlzLnQgJiYgIXRoaXMudC5yZWQpXG4gICAgICB0aGlzLnQgPSB0aGlzLnQudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIHRoaXMuek9uZSA9IHRoaXMueiA9PT0gdGhpcy5jdXJ2ZS5vbmU7XG5cbiAgICAvLyBVc2UgZXh0ZW5kZWQgY29vcmRpbmF0ZXNcbiAgICBpZiAodGhpcy5jdXJ2ZS5leHRlbmRlZCAmJiAhdGhpcy50KSB7XG4gICAgICB0aGlzLnQgPSB0aGlzLngucmVkTXVsKHRoaXMueSk7XG4gICAgICBpZiAoIXRoaXMuek9uZSlcbiAgICAgICAgdGhpcy50ID0gdGhpcy50LnJlZE11bCh0aGlzLnoucmVkSW52bSgpKTtcbiAgICB9XG4gIH1cbn1cbmluaGVyaXRzKFBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmopO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHksIHosIHQpIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB5LCB6LCB0KTtcbn07XG5cblBvaW50LmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04oY3VydmUsIG9iaikge1xuICByZXR1cm4gbmV3IFBvaW50KGN1cnZlLCBvYmpbMF0sIG9ialsxXSwgb2JqWzJdKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIFBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIFBvaW50IHg6ICcgKyB0aGlzLnguZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHk6ICcgKyB0aGlzLnkuZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHo6ICcgKyB0aGlzLnouZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgLy8gWFhYIFRoaXMgY29kZSBhc3N1bWVzIHRoYXQgemVybyBpcyBhbHdheXMgemVybyBpbiByZWRcbiAgcmV0dXJuIHRoaXMueC5jbXBuKDApID09PSAwICYmXG4gICAgKHRoaXMueS5jbXAodGhpcy56KSA9PT0gMCB8fFxuICAgICh0aGlzLnpPbmUgJiYgdGhpcy55LmNtcCh0aGlzLmN1cnZlLmMpID09PSAwKSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2V4dERibCA9IGZ1bmN0aW9uIF9leHREYmwoKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLWV4dGVuZGVkLTEuaHRtbFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA4LWh3Y2RcbiAgLy8gNE0gKyA0U1xuXG4gIC8vIEEgPSBYMV4yXG4gIHZhciBhID0gdGhpcy54LnJlZFNxcigpO1xuICAvLyBCID0gWTFeMlxuICB2YXIgYiA9IHRoaXMueS5yZWRTcXIoKTtcbiAgLy8gQyA9IDIgKiBaMV4yXG4gIHZhciBjID0gdGhpcy56LnJlZFNxcigpO1xuICBjID0gYy5yZWRJQWRkKGMpO1xuICAvLyBEID0gYSAqIEFcbiAgdmFyIGQgPSB0aGlzLmN1cnZlLl9tdWxBKGEpO1xuICAvLyBFID0gKFgxICsgWTEpXjIgLSBBIC0gQlxuICB2YXIgZSA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRTcXIoKS5yZWRJU3ViKGEpLnJlZElTdWIoYik7XG4gIC8vIEcgPSBEICsgQlxuICB2YXIgZyA9IGQucmVkQWRkKGIpO1xuICAvLyBGID0gRyAtIENcbiAgdmFyIGYgPSBnLnJlZFN1YihjKTtcbiAgLy8gSCA9IEQgLSBCXG4gIHZhciBoID0gZC5yZWRTdWIoYik7XG4gIC8vIFgzID0gRSAqIEZcbiAgdmFyIG54ID0gZS5yZWRNdWwoZik7XG4gIC8vIFkzID0gRyAqIEhcbiAgdmFyIG55ID0gZy5yZWRNdWwoaCk7XG4gIC8vIFQzID0gRSAqIEhcbiAgdmFyIG50ID0gZS5yZWRNdWwoaCk7XG4gIC8vIFozID0gRiAqIEdcbiAgdmFyIG56ID0gZi5yZWRNdWwoZyk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnosIG50KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fcHJvakRibCA9IGZ1bmN0aW9uIF9wcm9qRGJsKCkge1xuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1wcm9qZWN0aXZlLmh0bWxcbiAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOC1iYmpscFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA3LWJsXG4gIC8vIGFuZCBvdGhlcnNcbiAgLy8gR2VuZXJhbGx5IDNNICsgNFMgb3IgMk0gKyA0U1xuXG4gIC8vIEIgPSAoWDEgKyBZMSleMlxuICB2YXIgYiA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRTcXIoKTtcbiAgLy8gQyA9IFgxXjJcbiAgdmFyIGMgPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIEQgPSBZMV4yXG4gIHZhciBkID0gdGhpcy55LnJlZFNxcigpO1xuXG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIGlmICh0aGlzLmN1cnZlLnR3aXN0ZWQpIHtcbiAgICAvLyBFID0gYSAqIENcbiAgICB2YXIgZSA9IHRoaXMuY3VydmUuX211bEEoYyk7XG4gICAgLy8gRiA9IEUgKyBEXG4gICAgdmFyIGYgPSBlLnJlZEFkZChkKTtcbiAgICBpZiAodGhpcy56T25lKSB7XG4gICAgICAvLyBYMyA9IChCIC0gQyAtIEQpICogKEYgLSAyKVxuICAgICAgbnggPSBiLnJlZFN1YihjKS5yZWRTdWIoZCkucmVkTXVsKGYucmVkU3ViKHRoaXMuY3VydmUudHdvKSk7XG4gICAgICAvLyBZMyA9IEYgKiAoRSAtIEQpXG4gICAgICBueSA9IGYucmVkTXVsKGUucmVkU3ViKGQpKTtcbiAgICAgIC8vIFozID0gRl4yIC0gMiAqIEZcbiAgICAgIG56ID0gZi5yZWRTcXIoKS5yZWRTdWIoZikucmVkU3ViKGYpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBIID0gWjFeMlxuICAgICAgdmFyIGggPSB0aGlzLnoucmVkU3FyKCk7XG4gICAgICAvLyBKID0gRiAtIDIgKiBIXG4gICAgICB2YXIgaiA9IGYucmVkU3ViKGgpLnJlZElTdWIoaCk7XG4gICAgICAvLyBYMyA9IChCLUMtRCkqSlxuICAgICAgbnggPSBiLnJlZFN1YihjKS5yZWRJU3ViKGQpLnJlZE11bChqKTtcbiAgICAgIC8vIFkzID0gRiAqIChFIC0gRClcbiAgICAgIG55ID0gZi5yZWRNdWwoZS5yZWRTdWIoZCkpO1xuICAgICAgLy8gWjMgPSBGICogSlxuICAgICAgbnogPSBmLnJlZE11bChqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRSA9IEMgKyBEXG4gICAgdmFyIGUgPSBjLnJlZEFkZChkKTtcbiAgICAvLyBIID0gKGMgKiBaMSleMlxuICAgIHZhciBoID0gdGhpcy5jdXJ2ZS5fbXVsQyh0aGlzLnopLnJlZFNxcigpO1xuICAgIC8vIEogPSBFIC0gMiAqIEhcbiAgICB2YXIgaiA9IGUucmVkU3ViKGgpLnJlZFN1YihoKTtcbiAgICAvLyBYMyA9IGMgKiAoQiAtIEUpICogSlxuICAgIG54ID0gdGhpcy5jdXJ2ZS5fbXVsQyhiLnJlZElTdWIoZSkpLnJlZE11bChqKTtcbiAgICAvLyBZMyA9IGMgKiBFICogKEMgLSBEKVxuICAgIG55ID0gdGhpcy5jdXJ2ZS5fbXVsQyhlKS5yZWRNdWwoYy5yZWRJU3ViKGQpKTtcbiAgICAvLyBaMyA9IEUgKiBKXG4gICAgbnogPSBlLnJlZE11bChqKTtcbiAgfVxuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBEb3VibGUgaW4gZXh0ZW5kZWQgY29vcmRpbmF0ZXNcbiAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQpXG4gICAgcmV0dXJuIHRoaXMuX2V4dERibCgpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuX3Byb2pEYmwoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZXh0QWRkID0gZnVuY3Rpb24gX2V4dEFkZChwKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLWV4dGVuZGVkLTEuaHRtbFxuICAvLyAgICAgI2FkZGl0aW9uLWFkZC0yMDA4LWh3Y2QtM1xuICAvLyA4TVxuXG4gIC8vIEEgPSAoWTEgLSBYMSkgKiAoWTIgLSBYMilcbiAgdmFyIGEgPSB0aGlzLnkucmVkU3ViKHRoaXMueCkucmVkTXVsKHAueS5yZWRTdWIocC54KSk7XG4gIC8vIEIgPSAoWTEgKyBYMSkgKiAoWTIgKyBYMilcbiAgdmFyIGIgPSB0aGlzLnkucmVkQWRkKHRoaXMueCkucmVkTXVsKHAueS5yZWRBZGQocC54KSk7XG4gIC8vIEMgPSBUMSAqIGsgKiBUMlxuICB2YXIgYyA9IHRoaXMudC5yZWRNdWwodGhpcy5jdXJ2ZS5kZCkucmVkTXVsKHAudCk7XG4gIC8vIEQgPSBaMSAqIDIgKiBaMlxuICB2YXIgZCA9IHRoaXMuei5yZWRNdWwocC56LnJlZEFkZChwLnopKTtcbiAgLy8gRSA9IEIgLSBBXG4gIHZhciBlID0gYi5yZWRTdWIoYSk7XG4gIC8vIEYgPSBEIC0gQ1xuICB2YXIgZiA9IGQucmVkU3ViKGMpO1xuICAvLyBHID0gRCArIENcbiAgdmFyIGcgPSBkLnJlZEFkZChjKTtcbiAgLy8gSCA9IEIgKyBBXG4gIHZhciBoID0gYi5yZWRBZGQoYSk7XG4gIC8vIFgzID0gRSAqIEZcbiAgdmFyIG54ID0gZS5yZWRNdWwoZik7XG4gIC8vIFkzID0gRyAqIEhcbiAgdmFyIG55ID0gZy5yZWRNdWwoaCk7XG4gIC8vIFQzID0gRSAqIEhcbiAgdmFyIG50ID0gZS5yZWRNdWwoaCk7XG4gIC8vIFozID0gRiAqIEdcbiAgdmFyIG56ID0gZi5yZWRNdWwoZyk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnosIG50KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fcHJvakFkZCA9IGZ1bmN0aW9uIF9wcm9qQWRkKHApIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtcHJvamVjdGl2ZS5odG1sXG4gIC8vICAgICAjYWRkaXRpb24tYWRkLTIwMDgtYmJqbHBcbiAgLy8gICAgICNhZGRpdGlvbi1hZGQtMjAwNy1ibFxuICAvLyAxME0gKyAxU1xuXG4gIC8vIEEgPSBaMSAqIFoyXG4gIHZhciBhID0gdGhpcy56LnJlZE11bChwLnopO1xuICAvLyBCID0gQV4yXG4gIHZhciBiID0gYS5yZWRTcXIoKTtcbiAgLy8gQyA9IFgxICogWDJcbiAgdmFyIGMgPSB0aGlzLngucmVkTXVsKHAueCk7XG4gIC8vIEQgPSBZMSAqIFkyXG4gIHZhciBkID0gdGhpcy55LnJlZE11bChwLnkpO1xuICAvLyBFID0gZCAqIEMgKiBEXG4gIHZhciBlID0gdGhpcy5jdXJ2ZS5kLnJlZE11bChjKS5yZWRNdWwoZCk7XG4gIC8vIEYgPSBCIC0gRVxuICB2YXIgZiA9IGIucmVkU3ViKGUpO1xuICAvLyBHID0gQiArIEVcbiAgdmFyIGcgPSBiLnJlZEFkZChlKTtcbiAgLy8gWDMgPSBBICogRiAqICgoWDEgKyBZMSkgKiAoWDIgKyBZMikgLSBDIC0gRClcbiAgdmFyIHRtcCA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRNdWwocC54LnJlZEFkZChwLnkpKS5yZWRJU3ViKGMpLnJlZElTdWIoZCk7XG4gIHZhciBueCA9IGEucmVkTXVsKGYpLnJlZE11bCh0bXApO1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgaWYgKHRoaXMuY3VydmUudHdpc3RlZCkge1xuICAgIC8vIFkzID0gQSAqIEcgKiAoRCAtIGEgKiBDKVxuICAgIG55ID0gYS5yZWRNdWwoZykucmVkTXVsKGQucmVkU3ViKHRoaXMuY3VydmUuX211bEEoYykpKTtcbiAgICAvLyBaMyA9IEYgKiBHXG4gICAgbnogPSBmLnJlZE11bChnKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBZMyA9IEEgKiBHICogKEQgLSBDKVxuICAgIG55ID0gYS5yZWRNdWwoZykucmVkTXVsKGQucmVkU3ViKGMpKTtcbiAgICAvLyBaMyA9IGMgKiBGICogR1xuICAgIG56ID0gdGhpcy5jdXJ2ZS5fbXVsQyhmKS5yZWRNdWwoZyk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHApIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwO1xuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQpXG4gICAgcmV0dXJuIHRoaXMuX2V4dEFkZChwKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl9wcm9qQWRkKHApO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrKSB7XG4gIGlmICh0aGlzLl9oYXNEb3VibGVzKGspKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9maXhlZE5hZk11bCh0aGlzLCBrKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZChrMSwgcCwgazIpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgWyB0aGlzLCBwIF0sIFsgazEsIGsyIF0sIDIsIGZhbHNlKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5qbXVsQWRkID0gZnVuY3Rpb24gam11bEFkZChrMSwgcCwgazIpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgWyB0aGlzLCBwIF0sIFsgazEsIGsyIF0sIDIsIHRydWUpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZSgpIHtcbiAgaWYgKHRoaXMuek9uZSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBOb3JtYWxpemUgY29vcmRpbmF0ZXNcbiAgdmFyIHppID0gdGhpcy56LnJlZEludm0oKTtcbiAgdGhpcy54ID0gdGhpcy54LnJlZE11bCh6aSk7XG4gIHRoaXMueSA9IHRoaXMueS5yZWRNdWwoemkpO1xuICBpZiAodGhpcy50KVxuICAgIHRoaXMudCA9IHRoaXMudC5yZWRNdWwoemkpO1xuICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTtcbiAgdGhpcy56T25lID0gdHJ1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKCkge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngucmVkTmVnKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy56LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnQgJiYgdGhpcy50LnJlZE5lZygpKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gZ2V0WCgpIHtcbiAgdGhpcy5ub3JtYWxpemUoKTtcbiAgcmV0dXJuIHRoaXMueC5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WSA9IGZ1bmN0aW9uIGdldFkoKSB7XG4gIHRoaXMubm9ybWFsaXplKCk7XG4gIHJldHVybiB0aGlzLnkuZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMgPT09IG90aGVyIHx8XG4gICAgICAgICB0aGlzLmdldFgoKS5jbXAob3RoZXIuZ2V0WCgpKSA9PT0gMCAmJlxuICAgICAgICAgdGhpcy5nZXRZKCkuY21wKG90aGVyLmdldFkoKSkgPT09IDA7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXFYVG9QID0gZnVuY3Rpb24gZXFYVG9QKHgpIHtcbiAgdmFyIHJ4ID0geC50b1JlZCh0aGlzLmN1cnZlLnJlZCkucmVkTXVsKHRoaXMueik7XG4gIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB2YXIgeGMgPSB4LmNsb25lKCk7XG4gIHZhciB0ID0gdGhpcy5jdXJ2ZS5yZWROLnJlZE11bCh0aGlzLnopO1xuICBmb3IgKDs7KSB7XG4gICAgeGMuaWFkZCh0aGlzLmN1cnZlLm4pO1xuICAgIGlmICh4Yy5jbXAodGhpcy5jdXJ2ZS5wKSA+PSAwKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcngucmVkSUFkZCh0KTtcbiAgICBpZiAodGhpcy54LmNtcChyeCkgPT09IDApXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuLy8gQ29tcGF0aWJpbGl0eSB3aXRoIEJhc2VDdXJ2ZVxuUG9pbnQucHJvdG90eXBlLnRvUCA9IFBvaW50LnByb3RvdHlwZS5ub3JtYWxpemU7XG5Qb2ludC5wcm90b3R5cGUubWl4ZWRBZGQgPSBQb2ludC5wcm90b3R5cGUuYWRkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLnNoYTEgPSByZXF1aXJlKCcuL3NoYS8xJyk7XG5leHBvcnRzLnNoYTIyNCA9IHJlcXVpcmUoJy4vc2hhLzIyNCcpO1xuZXhwb3J0cy5zaGEyNTYgPSByZXF1aXJlKCcuL3NoYS8yNTYnKTtcbmV4cG9ydHMuc2hhMzg0ID0gcmVxdWlyZSgnLi9zaGEvMzg0Jyk7XG5leHBvcnRzLnNoYTUxMiA9IHJlcXVpcmUoJy4vc2hhLzUxMicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xudmFyIHNoYUNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5cbnZhciByb3RsMzIgPSB1dGlscy5yb3RsMzI7XG52YXIgc3VtMzIgPSB1dGlscy5zdW0zMjtcbnZhciBzdW0zMl81ID0gdXRpbHMuc3VtMzJfNTtcbnZhciBmdF8xID0gc2hhQ29tbW9uLmZ0XzE7XG52YXIgQmxvY2tIYXNoID0gY29tbW9uLkJsb2NrSGFzaDtcblxudmFyIHNoYTFfSyA9IFtcbiAgMHg1QTgyNzk5OSwgMHg2RUQ5RUJBMSxcbiAgMHg4RjFCQkNEQywgMHhDQTYyQzFENlxuXTtcblxuZnVuY3Rpb24gU0hBMSgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTEpKVxuICAgIHJldHVybiBuZXcgU0hBMSgpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSwgMHg5OGJhZGNmZSxcbiAgICAweDEwMzI1NDc2LCAweGMzZDJlMWYwIF07XG4gIHRoaXMuVyA9IG5ldyBBcnJheSg4MCk7XG59XG5cbnV0aWxzLmluaGVyaXRzKFNIQTEsIEJsb2NrSGFzaCk7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTE7XG5cblNIQTEuYmxvY2tTaXplID0gNTEyO1xuU0hBMS5vdXRTaXplID0gMTYwO1xuU0hBMS5obWFjU3RyZW5ndGggPSA4MDtcblNIQTEucGFkTGVuZ3RoID0gNjQ7XG5cblNIQTEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKVxuICAgIFdbaV0gPSBtc2dbc3RhcnQgKyBpXTtcblxuICBmb3IoOyBpIDwgVy5sZW5ndGg7IGkrKylcbiAgICBXW2ldID0gcm90bDMyKFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl0sIDEpO1xuXG4gIHZhciBhID0gdGhpcy5oWzBdO1xuICB2YXIgYiA9IHRoaXMuaFsxXTtcbiAgdmFyIGMgPSB0aGlzLmhbMl07XG4gIHZhciBkID0gdGhpcy5oWzNdO1xuICB2YXIgZSA9IHRoaXMuaFs0XTtcblxuICBmb3IgKGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzID0gfn4oaSAvIDIwKTtcbiAgICB2YXIgdCA9IHN1bTMyXzUocm90bDMyKGEsIDUpLCBmdF8xKHMsIGIsIGMsIGQpLCBlLCBXW2ldLCBzaGExX0tbc10pO1xuICAgIGUgPSBkO1xuICAgIGQgPSBjO1xuICAgIGMgPSByb3RsMzIoYiwgMzApO1xuICAgIGIgPSBhO1xuICAgIGEgPSB0O1xuICB9XG5cbiAgdGhpcy5oWzBdID0gc3VtMzIodGhpcy5oWzBdLCBhKTtcbiAgdGhpcy5oWzFdID0gc3VtMzIodGhpcy5oWzFdLCBiKTtcbiAgdGhpcy5oWzJdID0gc3VtMzIodGhpcy5oWzJdLCBjKTtcbiAgdGhpcy5oWzNdID0gc3VtMzIodGhpcy5oWzNdLCBkKTtcbiAgdGhpcy5oWzRdID0gc3VtMzIodGhpcy5oWzRdLCBlKTtcbn07XG5cblNIQTEucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnYmlnJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIFNIQTI1NiA9IHJlcXVpcmUoJy4vMjU2Jyk7XG5cbmZ1bmN0aW9uIFNIQTIyNCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTIyNCkpXG4gICAgcmV0dXJuIG5ldyBTSEEyMjQoKTtcblxuICBTSEEyNTYuY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4YzEwNTllZDgsIDB4MzY3Y2Q1MDcsIDB4MzA3MGRkMTcsIDB4ZjcwZTU5MzksXG4gICAgMHhmZmMwMGIzMSwgMHg2ODU4MTUxMSwgMHg2NGY5OGZhNywgMHhiZWZhNGZhNCBdO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBMjI0LCBTSEEyNTYpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEEyMjQ7XG5cblNIQTIyNC5ibG9ja1NpemUgPSA1MTI7XG5TSEEyMjQub3V0U2l6ZSA9IDIyNDtcblNIQTIyNC5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEyMjQucGFkTGVuZ3RoID0gNjQ7XG5cblNIQTIyNC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgLy8gSnVzdCB0cnVuY2F0ZSBvdXRwdXRcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLnNsaWNlKDAsIDcpLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmguc2xpY2UoMCwgNyksICdiaWcnKTtcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIFNIQTUxMiA9IHJlcXVpcmUoJy4vNTEyJyk7XG5cbmZ1bmN0aW9uIFNIQTM4NCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTM4NCkpXG4gICAgcmV0dXJuIG5ldyBTSEEzODQoKTtcblxuICBTSEE1MTIuY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4Y2JiYjlkNWQsIDB4YzEwNTllZDgsXG4gICAgMHg2MjlhMjkyYSwgMHgzNjdjZDUwNyxcbiAgICAweDkxNTkwMTVhLCAweDMwNzBkZDE3LFxuICAgIDB4MTUyZmVjZDgsIDB4ZjcwZTU5MzksXG4gICAgMHg2NzMzMjY2NywgMHhmZmMwMGIzMSxcbiAgICAweDhlYjQ0YTg3LCAweDY4NTgxNTExLFxuICAgIDB4ZGIwYzJlMGQsIDB4NjRmOThmYTcsXG4gICAgMHg0N2I1NDgxZCwgMHhiZWZhNGZhNCBdO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBMzg0LCBTSEE1MTIpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEEzODQ7XG5cblNIQTM4NC5ibG9ja1NpemUgPSAxMDI0O1xuU0hBMzg0Lm91dFNpemUgPSAzODQ7XG5TSEEzODQuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMzg0LnBhZExlbmd0aCA9IDEyODtcblxuU0hBMzg0LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmguc2xpY2UoMCwgMTIpLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmguc2xpY2UoMCwgMTIpLCAnYmlnJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcblxudmFyIHJvdGwzMiA9IHV0aWxzLnJvdGwzMjtcbnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyO1xudmFyIHN1bTMyXzMgPSB1dGlscy5zdW0zMl8zO1xudmFyIHN1bTMyXzQgPSB1dGlscy5zdW0zMl80O1xudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbmZ1bmN0aW9uIFJJUEVNRDE2MCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJJUEVNRDE2MCkpXG4gICAgcmV0dXJuIG5ldyBSSVBFTUQxNjAoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcblxuICB0aGlzLmggPSBbIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjAgXTtcbiAgdGhpcy5lbmRpYW4gPSAnbGl0dGxlJztcbn1cbnV0aWxzLmluaGVyaXRzKFJJUEVNRDE2MCwgQmxvY2tIYXNoKTtcbmV4cG9ydHMucmlwZW1kMTYwID0gUklQRU1EMTYwO1xuXG5SSVBFTUQxNjAuYmxvY2tTaXplID0gNTEyO1xuUklQRU1EMTYwLm91dFNpemUgPSAxNjA7XG5SSVBFTUQxNjAuaG1hY1N0cmVuZ3RoID0gMTkyO1xuUklQRU1EMTYwLnBhZExlbmd0aCA9IDY0O1xuXG5SSVBFTUQxNjAucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgQSA9IHRoaXMuaFswXTtcbiAgdmFyIEIgPSB0aGlzLmhbMV07XG4gIHZhciBDID0gdGhpcy5oWzJdO1xuICB2YXIgRCA9IHRoaXMuaFszXTtcbiAgdmFyIEUgPSB0aGlzLmhbNF07XG4gIHZhciBBaCA9IEE7XG4gIHZhciBCaCA9IEI7XG4gIHZhciBDaCA9IEM7XG4gIHZhciBEaCA9IEQ7XG4gIHZhciBFaCA9IEU7XG4gIGZvciAodmFyIGogPSAwOyBqIDwgODA7IGorKykge1xuICAgIHZhciBUID0gc3VtMzIoXG4gICAgICByb3RsMzIoXG4gICAgICAgIHN1bTMyXzQoQSwgZihqLCBCLCBDLCBEKSwgbXNnW3Jbal0gKyBzdGFydF0sIEsoaikpLFxuICAgICAgICBzW2pdKSxcbiAgICAgIEUpO1xuICAgIEEgPSBFO1xuICAgIEUgPSBEO1xuICAgIEQgPSByb3RsMzIoQywgMTApO1xuICAgIEMgPSBCO1xuICAgIEIgPSBUO1xuICAgIFQgPSBzdW0zMihcbiAgICAgIHJvdGwzMihcbiAgICAgICAgc3VtMzJfNChBaCwgZig3OSAtIGosIEJoLCBDaCwgRGgpLCBtc2dbcmhbal0gKyBzdGFydF0sIEtoKGopKSxcbiAgICAgICAgc2hbal0pLFxuICAgICAgRWgpO1xuICAgIEFoID0gRWg7XG4gICAgRWggPSBEaDtcbiAgICBEaCA9IHJvdGwzMihDaCwgMTApO1xuICAgIENoID0gQmg7XG4gICAgQmggPSBUO1xuICB9XG4gIFQgPSBzdW0zMl8zKHRoaXMuaFsxXSwgQywgRGgpO1xuICB0aGlzLmhbMV0gPSBzdW0zMl8zKHRoaXMuaFsyXSwgRCwgRWgpO1xuICB0aGlzLmhbMl0gPSBzdW0zMl8zKHRoaXMuaFszXSwgRSwgQWgpO1xuICB0aGlzLmhbM10gPSBzdW0zMl8zKHRoaXMuaFs0XSwgQSwgQmgpO1xuICB0aGlzLmhbNF0gPSBzdW0zMl8zKHRoaXMuaFswXSwgQiwgQ2gpO1xuICB0aGlzLmhbMF0gPSBUO1xufTtcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdsaXR0bGUnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2xpdHRsZScpO1xufTtcblxuZnVuY3Rpb24gZihqLCB4LCB5LCB6KSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiB4IF4geSBeIHo7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuICh4ICYgeSkgfCAoKH54KSAmIHopO1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAoeCB8ICh+eSkpIF4gejtcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gKHggJiB6KSB8ICh5ICYgKH56KSk7XG4gIGVsc2VcbiAgICByZXR1cm4geCBeICh5IHwgKH56KSk7XG59XG5cbmZ1bmN0aW9uIEsoaikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4gMHgwMDAwMDAwMDtcbiAgZWxzZSBpZiAoaiA8PSAzMSlcbiAgICByZXR1cm4gMHg1YTgyNzk5OTtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gMHg2ZWQ5ZWJhMTtcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gMHg4ZjFiYmNkYztcbiAgZWxzZVxuICAgIHJldHVybiAweGE5NTNmZDRlO1xufVxuXG5mdW5jdGlvbiBLaChqKSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiAweDUwYTI4YmU2O1xuICBlbHNlIGlmIChqIDw9IDMxKVxuICAgIHJldHVybiAweDVjNGRkMTI0O1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAweDZkNzAzZWYzO1xuICBlbHNlIGlmIChqIDw9IDYzKVxuICAgIHJldHVybiAweDdhNmQ3NmU5O1xuICBlbHNlXG4gICAgcmV0dXJuIDB4MDAwMDAwMDA7XG59XG5cbnZhciByID0gW1xuICAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LFxuICA3LCA0LCAxMywgMSwgMTAsIDYsIDE1LCAzLCAxMiwgMCwgOSwgNSwgMiwgMTQsIDExLCA4LFxuICAzLCAxMCwgMTQsIDQsIDksIDE1LCA4LCAxLCAyLCA3LCAwLCA2LCAxMywgMTEsIDUsIDEyLFxuICAxLCA5LCAxMSwgMTAsIDAsIDgsIDEyLCA0LCAxMywgMywgNywgMTUsIDE0LCA1LCA2LCAyLFxuICA0LCAwLCA1LCA5LCA3LCAxMiwgMiwgMTAsIDE0LCAxLCAzLCA4LCAxMSwgNiwgMTUsIDEzXG5dO1xuXG52YXIgcmggPSBbXG4gIDUsIDE0LCA3LCAwLCA5LCAyLCAxMSwgNCwgMTMsIDYsIDE1LCA4LCAxLCAxMCwgMywgMTIsXG4gIDYsIDExLCAzLCA3LCAwLCAxMywgNSwgMTAsIDE0LCAxNSwgOCwgMTIsIDQsIDksIDEsIDIsXG4gIDE1LCA1LCAxLCAzLCA3LCAxNCwgNiwgOSwgMTEsIDgsIDEyLCAyLCAxMCwgMCwgNCwgMTMsXG4gIDgsIDYsIDQsIDEsIDMsIDExLCAxNSwgMCwgNSwgMTIsIDIsIDEzLCA5LCA3LCAxMCwgMTQsXG4gIDEyLCAxNSwgMTAsIDQsIDEsIDUsIDgsIDcsIDYsIDIsIDEzLCAxNCwgMCwgMywgOSwgMTFcbl07XG5cbnZhciBzID0gW1xuICAxMSwgMTQsIDE1LCAxMiwgNSwgOCwgNywgOSwgMTEsIDEzLCAxNCwgMTUsIDYsIDcsIDksIDgsXG4gIDcsIDYsIDgsIDEzLCAxMSwgOSwgNywgMTUsIDcsIDEyLCAxNSwgOSwgMTEsIDcsIDEzLCAxMixcbiAgMTEsIDEzLCA2LCA3LCAxNCwgOSwgMTMsIDE1LCAxNCwgOCwgMTMsIDYsIDUsIDEyLCA3LCA1LFxuICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCA5LCA4LCA5LCAxNCwgNSwgNiwgOCwgNiwgNSwgMTIsXG4gIDksIDE1LCA1LCAxMSwgNiwgOCwgMTMsIDEyLCA1LCAxMiwgMTMsIDE0LCAxMSwgOCwgNSwgNlxuXTtcblxudmFyIHNoID0gW1xuICA4LCA5LCA5LCAxMSwgMTMsIDE1LCAxNSwgNSwgNywgNywgOCwgMTEsIDE0LCAxNCwgMTIsIDYsXG4gIDksIDEzLCAxNSwgNywgMTIsIDgsIDksIDExLCA3LCA3LCAxMiwgNywgNiwgMTUsIDEzLCAxMSxcbiAgOSwgNywgMTUsIDExLCA4LCA2LCA2LCAxNCwgMTIsIDEzLCA1LCAxNCwgMTMsIDEzLCA3LCA1LFxuICAxNSwgNSwgOCwgMTEsIDE0LCAxNCwgNiwgMTQsIDYsIDksIDEyLCA5LCAxMiwgNSwgMTUsIDgsXG4gIDgsIDUsIDEyLCA5LCAxMiwgNSwgMTQsIDYsIDgsIDEzLCA2LCA1LCAxNSwgMTMsIDExLCAxMVxuXTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gSG1hYyhoYXNoLCBrZXksIGVuYykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSG1hYykpXG4gICAgcmV0dXJuIG5ldyBIbWFjKGhhc2gsIGtleSwgZW5jKTtcbiAgdGhpcy5IYXNoID0gaGFzaDtcbiAgdGhpcy5ibG9ja1NpemUgPSBoYXNoLmJsb2NrU2l6ZSAvIDg7XG4gIHRoaXMub3V0U2l6ZSA9IGhhc2gub3V0U2l6ZSAvIDg7XG4gIHRoaXMuaW5uZXIgPSBudWxsO1xuICB0aGlzLm91dGVyID0gbnVsbDtcblxuICB0aGlzLl9pbml0KHV0aWxzLnRvQXJyYXkoa2V5LCBlbmMpKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gSG1hYztcblxuSG1hYy5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KGtleSkge1xuICAvLyBTaG9ydGVuIGtleSwgaWYgbmVlZGVkXG4gIGlmIChrZXkubGVuZ3RoID4gdGhpcy5ibG9ja1NpemUpXG4gICAga2V5ID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpLmRpZ2VzdCgpO1xuICBhc3NlcnQoa2V5Lmxlbmd0aCA8PSB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgLy8gQWRkIHBhZGRpbmcgdG8ga2V5XG4gIGZvciAodmFyIGkgPSBrZXkubGVuZ3RoOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICBrZXkucHVzaCgwKTtcblxuICBmb3IgKGkgPSAwOyBpIDwga2V5Lmxlbmd0aDsgaSsrKVxuICAgIGtleVtpXSBePSAweDM2O1xuICB0aGlzLmlubmVyID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpO1xuXG4gIC8vIDB4MzYgXiAweDVjID0gMHg2YVxuICBmb3IgKGkgPSAwOyBpIDwga2V5Lmxlbmd0aDsgaSsrKVxuICAgIGtleVtpXSBePSAweDZhO1xuICB0aGlzLm91dGVyID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpO1xufTtcblxuSG1hYy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKG1zZywgZW5jKSB7XG4gIHRoaXMuaW5uZXIudXBkYXRlKG1zZywgZW5jKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5IbWFjLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIHRoaXMub3V0ZXIudXBkYXRlKHRoaXMuaW5uZXIuZGlnZXN0KCkpO1xuICByZXR1cm4gdGhpcy5vdXRlci5kaWdlc3QoZW5jKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZG91Ymxlczoge1xuICAgIHN0ZXA6IDQsXG4gICAgcG9pbnRzOiBbXG4gICAgICBbXG4gICAgICAgICdlNjBmY2U5M2I1OWU5ZWM1MzAxMWFhYmMyMWMyM2U5N2IyYTMxMzY5Yjg3YTVhZTljNDRlZTg5ZTJhNmRlYzBhJyxcbiAgICAgICAgJ2Y3ZTM1MDczOTllNTk1OTI5ZGI5OWYzNGY1NzkzNzEwMTI5Njg5MWU0NGQyM2YwYmUxZjMyY2NlNjk2MTY4MjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODI4MjI2MzIxMmM2MDlkOWVhMmE2ZTNlMTcyZGUyMzhkOGMzOWNhYmQ1YWMxY2ExMDY0NmUyM2ZkNWY1MTUwOCcsXG4gICAgICAgICcxMWY4YTgwOTg1NTdkZmU0NWU4MjU2ZTgzMGI2MGFjZTYyZDYxM2FjMmY3YjE3YmVkMzFiNmVhZmY2ZTI2Y2FmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE3NWUxNTlmNzI4Yjg2NWE3MmY5OWNjNmM2ZmM4NDZkZTBiOTM4MzNmZDIyMjJlZDczZmNlNWI1NTFlNWI3MzknLFxuICAgICAgICAnZDM1MDZlMGQ5ZTNjNzllYmE0ZWY5N2E1MWZmNzFmNWVhY2I1OTU1YWRkMjQzNDVjNmVmYTZmZmVlOWZlZDY5NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNjNkOTBkNDQ3YjAwYzljOTljZWFjMDViNjI2MmVlMDUzNDQxYzdlNTU1NTJmZmU1MjZiYWQ4ZjgzZmY0NjQwJyxcbiAgICAgICAgJzRlMjczYWRmYzczMjIyMTk1M2I0NDUzOTdmMzM2MzE0NWI5YTg5MDA4MTk5ZWNiNjIwMDNjN2YzYmVlOWRlOSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4YjRiNWYxNjVkZjNjMmJlOGM2MjQ0YjViNzQ1NjM4ODQzZTRhNzgxYTE1YmNkMWI2OWY3OWE1NWRmZmRmODBjJyxcbiAgICAgICAgJzRhYWQwYTZmNjhkMzA4YjRiM2ZiZDc4MTNhYjBkYTA0ZjllMzM2NTQ2MTYyZWU1NmIzZWZmMGM2NWZkNGZkMzYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzIzY2JhYTZlNWRiOTk2ZDZiZjc3MWMwMGJkNTQ4YzdiNzAwZGJmZmE2YzBlNzdiY2I2MTE1OTI1MjMyZmNkYScsXG4gICAgICAgICc5NmU4NjdiNTU5NWNjNDk4YTkyMTEzNzQ4ODgyNGQ2ZTI2NjBhMDY1Mzc3OTQ5NDgwMWRjMDY5ZDllYjM5ZjVmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VlYmZhNGQ0OTNiZWJmOThiYTVmZWVjODEyYzJkM2I1MDk0Nzk2MTIzN2E5MTk4MzlhNTMzZWNhMGU3ZGQ3ZmEnLFxuICAgICAgICAnNWQ5YThjYTM5NzBlZjBmMjY5ZWU3ZWRhZjE3ODA4OWQ5YWU0Y2RjM2E3MTFmNzEyZGRmZDRmZGFlMWRlODk5OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxMDBmNDRkYTY5NmU3MTY3Mjc5MWQwYTA5YjdiZGU0NTlmMTIxNWEyOWIzYzAzYmZlZmQ3ODM1YjM5YTQ4ZGIwJyxcbiAgICAgICAgJ2NkZDllMTMxOTJhMDBiNzcyZWM4ZjMzMDBjMDkwNjY2YjdmZjRhMThmZjUxOTVhYzBmYmQ1Y2Q2MmJjNjVhMDknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTEwMzFiZTI2MmM3ZWQxYjFkYzkyMjdhNGEwNGMwMTdhNzdmOGQ0NDY0ZjNiMzg1MmM4YWNkZTZlNTM0ZmQyZCcsXG4gICAgICAgICc5ZDcwNjE5Mjg5NDA0MDVlNmJiNmE0MTc2NTk3NTM1YWYyOTJkZDQxOWUxY2VkNzlhNDRmMThmMjk0NTZhMDBkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ZlZWE2Y2FlNDZkNTViNTMwYWMyODM5ZjE0M2JkN2VjNWNmOGIyNjZhNDFkNmFmNTJkNWU2ODhkOTA5NDY5NmQnLFxuICAgICAgICAnZTU3YzZiNmM5N2RjZTFiYWIwNmU0ZTEyYmYzZWNkNWM5ODFjODk1N2NjNDE0NDJkMzE1NWRlYmYxODA5MDA4OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYTY3YTkxZDkxMDQ5Y2RjYjM2N2JlNGJlNmZmY2EzY2ZlZWQ2NTdkODA4NTgzZGUzM2ZhOTc4YmMxZWM2Y2IxJyxcbiAgICAgICAgJzliYWNhYTM1NDgxNjQyYmM0MWY0NjNmN2VjOTc4MGU1ZGVjN2FkYzUwOGY3NDBhMTdlOWVhOGUyN2E2OGJlMWQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTM5MDRmYWEwYjMzNGNkZGE2ZTAwMDkzNWVmMjIxNTFlYzA4ZDBmN2JiMTEwNjlmNTc1NDVjY2MxYTM3YjdjMCcsXG4gICAgICAgICc1YmMwODdkMGJjODAxMDZkODhjOWVjY2FjMjBkM2MxYzEzOTk5OTgxZTE0NDM0Njk5ZGNiMDk2YjAyMjc3MWM4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhlN2JjZDBiZDM1OTgzYTc3MTljY2E3NzY0Y2E5MDY3NzliNTNhMDQzYTliOGJjYWVmZjk1OWY0M2FkODYwNDcnLFxuICAgICAgICAnMTBiNzc3MGIyYTNkYTRiMzk0MDMxMDQyMGNhOTUxNDU3OWU4OGUyZTQ3ZmQ2OGIzZWExMDA0N2U4NDYwMzcyYSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczODVlZWQzNGMxY2RmZjIxZTZkMDgxODY4OWI4MWJkZTcxYTdmNGYxODM5N2U2NjkwYTg0MWUxNTk5YzQzODYyJyxcbiAgICAgICAgJzI4M2JlYmMzZThlYTIzZjU2NzAxZGUxOWU5ZWJmNDU3NmIzMDRlZWMyMDg2ZGM4Y2MwNDU4ZmU1NTQyZTU0NTMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNmY5ZDliODAzZWNmMTkxNjM3YzczYTQ0MTNkZmExODBmZGRmODRhNTk0N2ZiYzljNjA2ZWQ4NmMzZmFjM2E3JyxcbiAgICAgICAgJzdjODBjNjhlNjAzMDU5YmE2OWI4ZTJhMzBlNDVjNGQ0N2VhNGRkMmY1YzI4MTAwMmQ4Njg5MDYwM2E4NDIxNjAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzMyMmQ0MDEyNDNjNGUyNTgyYTIxNDdjMTA0ZDZlY2JmNzc0ZDE2M2RiMGY1ZTUzMTNiN2UwZTc0MmQwZTZiZCcsXG4gICAgICAgICc1NmU3MDc5N2U5NjY0ZWY1YmZiMDE5YmM0ZGRhZjliNzI4MDVmNjNlYTI4NzNhZjYyNGYzYTJlOTZjMjhiMmEwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg1NjcyYzdkMmRlMGI3ZGEyYmQxNzcwZDg5NjY1ODY4NzQxYjNmOWFmNzY0MzM5NzcyMWQ3NGQyODEzNGFiODMnLFxuICAgICAgICAnN2M0ODFiOWI1YjQzYjJlYjYzNzQwNDliZmE2MmMyZTVlNzdmMTdmY2M1Mjk4ZjQ0YzhlMzA5NGY3OTAzMTNhNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5NDhiZjgwOWIxOTg4YTQ2YjA2YzlmMTkxOTQxM2IxMGY5MjI2YzYwZjY2ODgzMmZmZDk1OWFmNjBjODJhMGEnLFxuICAgICAgICAnNTNhNTYyODU2ZGNiNjY0NmRjNmI3NGM1ZDFjMzQxOGM2ZDRkZmYwOGM5N2NkMmJlZDRjYjdmODhkOGM4ZTU4OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2MjYwY2U3ZjQ2MTgwMWMzNGYwNjdjZTBmMDI4NzNhOGYxYjBlNDRkZmM2OTc1MmFjY2VjZDgxOWYzOGZkOGU4JyxcbiAgICAgICAgJ2JjMmRhODJiNmZhNWI1NzFhN2YwOTA0OTc3NmExZWY3ZWNkMjkyMjM4MDUxYzE5OGMxYTg0ZTk1YjJiNGFlMTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTUwMzdkZTBhZmMxZDhkNDNkODM0ODQxNGJiZjQxMDMwNDNlYzhmNTc1YmZkYzQzMjk1M2NjOGQyMDM3ZmEyZCcsXG4gICAgICAgICc0NTcxNTM0YmFhOTRkM2I1ZjlmOThkMDlmYjk5MGJkZGJkNWY1YjAzZWM0ODFmMTBlMGU1ZGM4NDFkNzU1YmRhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UwNjM3MmIwZjRhMjA3YWRmNWVhOTA1ZThmMTc3MWI0ZTdlOGRiZDFjNmE2YzViNzI1ODY2YTBhZTRmY2U3MjUnLFxuICAgICAgICAnN2E5MDg5NzRiY2UxOGNmZTEyYTI3YmIyYWQ1YTQ4OGNkNzQ4NGE3Nzg3MTA0ODcwYjI3MDM0Zjk0ZWVlMzFkZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyMTNjN2E3MTVjZDVkNDUzNThkMGJiZjlkYzBjZTAyMjA0YjEwYmRkZTJhM2Y1ODU0MGFkNjkwOGQwNTU5NzU0JyxcbiAgICAgICAgJzRiNmRhZDBiNWFlNDYyNTA3MDEzYWQwNjI0NWJhMTkwYmI0ODUwZjVmMzZhN2VlZGRmZjJjMjc1MzRiNDU4ZjInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNGU3YzI3MmE3YWY0YjM0ZThkYmI5MzUyYTU0MTlhODdlMjgzOGM3MGFkYzYyY2RkZjBjYzNhM2IwOGZiZDUzYycsXG4gICAgICAgICcxNzc0OWM3NjZjOWQwYjE4ZTE2ZmQwOWY2ZGVmNjgxYjUzMGI5NjE0YmZmN2RkMzNlMGIzOTQxODE3ZGNhYWU2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ZlYTc0ZTNkYmU3NzhiMWIxMGYyMzhhZDYxNjg2YWE1Yzc2ZTNkYjJiZTQzMDU3NjMyNDI3ZTI4NDBmYjI3YjYnLFxuICAgICAgICAnNmUwNTY4ZGI5YjBiMTMyOTdjZjY3NGRlY2NiNmFmOTMxMjZiNTk2Yjk3M2Y3Yjc3NzAxZDNkYjdmMjNjYjk2ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NmU2NDExM2Y2NzdjZjBlMTBhMjU3MGQ1OTk5NjhkMzE1NDRlMTc5Yjc2MDQzMjk1MmMwMmE0NDE3YmRkZTM5JyxcbiAgICAgICAgJ2M5MGRkZjhkZWU0ZTk1Y2Y1NzcwNjZkNzA2ODFmMGQzNWUyYTMzZDJiNTZkMjAzMmI0YjE3NTJkMTkwMWFjMDEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzczOGM1NmIwM2IyYWJlMWU4MjgxYmFhNzQzZjhmOWE4ZjdjYzY0M2RmMjZjYmVlM2FiMTUwMjQyYmNiYjg5MScsXG4gICAgICAgICc4OTNmYjU3ODk1MWFkMjUzN2Y3MThmMmVhY2JmYmJiYjgyMzE0ZWVmNzg4MGNmZTkxN2U3MzVkOTY5OWE4NGMzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q4OTU2MjY1NDhiNjViODFlMjY0Yzc2MzdjOTcyODc3ZDFkNzJlNWYzYTkyNTAxNDM3MmU5ZjY1ODhmNmMxNGInLFxuICAgICAgICAnZmViZmFhMzhmMmJjN2VhZTcyOGVjNjA4MThjMzQwZWIwMzQyOGQ2MzJiYjA2N2UxNzkzNjNlZDc1ZDdkOTkxZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiOGRhOTQwMzJhOTU3NTE4ZWIwZjY0MzM1NzFlODc2MWNlZmZjNzM2OTNlODRlZGQ0OTE1MGE1NjRmNjc2ZTAzJyxcbiAgICAgICAgJzI4MDRkZmE0NDgwNWExZTRkN2M5OWNjOTc2MjgwOGIwOTJjYzU4NGQ5NWZmM2I1MTE0ODhlNGU3NGVmZGY2ZTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTgwZmVhMTQ0NDFmYjMzYTdkOGFkYWI5NDc1ZDdmYWIyMDE5ZWZmYjUxNTZhNzkyZjFhMTE3NzhlM2MwZGY1ZCcsXG4gICAgICAgICdlZWQxZGU3ZjYzOGUwMDc3MWU4OTc2OGNhM2NhOTQ0NzJkMTU1ZTgwYWYzMjJlYTlmY2I0MjkxYjZhYzllYzc4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2EzMDE2OTdiZGZjZDcwNDMxM2JhNDhlNTFkNTY3NTQzZjJhMTgyMDMxZWZkNjkxNWRkYzA3YmJjYzRlMTYwNzAnLFxuICAgICAgICAnNzM3MGY5MWNmYjY3ZTRmNTA4MTgwOWZhMjVkNDBmOWIxNzM1ZGJmN2MwYTExYTEzMGMwZDFhMDQxZTE3N2VhMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5MGFkODViMzg5ZDZiOTM2NDYzZjlkMDUxMjY3OGRlMjA4Y2MzMzBiMTEzMDdmZmZhYjdhYzYzZTNmYjA0ZWQ0JyxcbiAgICAgICAgJ2U1MDdhMzYyMGEzODI2MWFmZmRjYmQ5NDI3MjIyYjgzOWFlZmFiZTE1ODI4OTRkOTkxZDRkNDhjYjZlZjE1MCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4ZjY4YjlkMmY2M2I1ZjMzOTIzOWMxYWQ5ODFmMTYyZWU4OGM1Njc4NzIzZWEzMzUxYjdiNDQ0YzllYzRjMGRhJyxcbiAgICAgICAgJzY2MmE5ZjJkYmEwNjM5ODZkZTFkOTBjMmI2YmUyMTVkYmJlYTJjZmU5NTUxMGJmZGYyM2NiZjc5NTAxZmZmODInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTRmM2ZiMDE3NmFmODVkNjVmZjk5ZmY5MTk4YzM2MDkxZjQ4ZTg2NTAzNjgxZTNlNjY4NmZkNTA1MzIzMWUxMScsXG4gICAgICAgICcxZTYzNjMzYWQwZWY0ZjFjMTY2MWE2ZDBlYTAyYjcyODZjYzdlNzRlYzk1MWQxYzk4MjJjMzg1NzZmZWI3M2JjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhjMDBmYTliMThlYmYzMzFlYjk2MTUzN2E0NWE0MjY2YzcwMzRmMmYwZDRlMWQwNzE2ZmI2ZWFlMjBlYWUyOWUnLFxuICAgICAgICAnZWZhNDcyNjdmZWE1MjFhMWE5ZGMzNDNhMzczNmM5NzRjMmZhZGFmYTgxZTM2YzU0ZTdkMmE0YzY2NzAyNDE0YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlN2EyNmNlNjlkZDQ4MjlmM2UxMGNlYzBhOWU5OGVkMzE0M2QwODRmMzA4YjkyYzA5OTdmZGRmYzYwY2IzZTQxJyxcbiAgICAgICAgJzJhNzU4ZTMwMGZhNzk4NGI0NzFiMDA2YTFhYWZiYjE4ZDBhNmIyYzA0MjBlODNlMjBlOGE5NDIxY2YyY2ZkNTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjY0NTllMGVlMzY2MmVjOGQyMzU0MGMyMjNiY2JkYzU3MWNiY2I5NjdkNzk0MjRmM2NmMjllYjNkZTZiODBlZicsXG4gICAgICAgICc2N2M4NzZkMDZmM2UwNmRlMWRhZGYxNmU1NjYxZGIzYzRiM2FlNmQ0OGUzNWIyZmYzMGJmMGI2MWE3MWJhNDUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDY4YTgwYzgyODBiYjg0MDc5MzIzNGFhMTE4ZjA2MjMxZDZmMWZjNjdlNzNjNWE1ZGVkYTBmNWI0OTY5NDNlOCcsXG4gICAgICAgICdkYjhiYTlmZmY0YjU4NmQwMGM0YjFmOTE3N2IwZTI4YjViMGU3YjhmNzg0NTI5NWEyOTRjODQyNjZiMTMzMTIwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMyNGFlZDdkZjY1YzgwNDI1MmRjMDI3MDkwN2EzMGIwOTYxMmFlYjk3MzQ0OWNlYTQwOTU5ODBmYzI4ZDNkNWQnLFxuICAgICAgICAnNjQ4YTM2NTc3NGI2MWYyZmYxMzBjMGMzNWFlYzFmNGYxOTIxM2IwYzdlMzMyODQzOTY3MjI0YWY5NmFiN2M4NCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ZGY5YzE0OTE5Y2RlNjFmNmQ1MWRmZGJlNWZlZTVkY2VlYzQxNDNiYThkMWNhODg4ZThiZDM3M2ZkMDU0Yzk2JyxcbiAgICAgICAgJzM1ZWM1MTA5MmQ4NzI4MDUwOTc0YzIzYTFkODVkNGI1ZDUwNmNkYzI4ODQ5MDE5MmViYWMwNmNhZDEwZDVkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzljMzkxOWE4NGE0NzQ4NzBmYWVkOGE5YzFjYzY2MDIxNTIzNDg5MDU0ZDdmMDMwOGNiZmM5OWM4YWMxZjk4Y2QnLFxuICAgICAgICAnZGRiODRmMGY0YTRkZGQ1NzU4NGYwNDRiZjI2MGU2NDE5MDUzMjZmNzZjNjRjOGU2YmU3ZTVlMDNkNGZjNTk5ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2MDU3MTcwYjFkZDEyZmRmOGRlMDVmMjgxZDhlMDZiYjkxZTE0OTNhOGI5MWQ0Y2M1YTIxMzgyMTIwYTk1OWU1JyxcbiAgICAgICAgJzlhMWFmMGIyNmE2YTQ4MDdhZGQ5YTJkYWY3MWRmMjYyNDY1MTUyYmMzZWUyNGM2NWU4OTliZTkzMjM4NWEyYTgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTU3NmRmOGUyM2EwODQxMTQyMTQzOWE0NTE4ZGEzMTg4MGNlZjBmYmE3ZDRkZjEyYjFhNjk3M2VlY2I5NDI2NicsXG4gICAgICAgICc0MGE2YmYyMGU3NjY0MGIyYzkyYjk3YWZlNThjZDgyYzQzMmUxMGE3ZjUxNGQ5ZjNlZThiZTExYWUxYjI4ZWM4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc3NzhhNzhjMjhkZWMzZTMwYTA1ZmU5NjI5ZGU4YzM4YmIzMGQxZjVjZjlhM2EyMDhmNzYzODg5YmU1OGFkNzEnLFxuICAgICAgICAnMzQ2MjZkOWFiNWE1YjIyZmY3MDk4ZTEyZjJmZjU4MDA4N2IzODQxMWZmMjRhYzU2M2I1MTNmYzFmZDlmNDNhYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5Mjg5NTVlZTYzN2E4NDQ2MzcyOWZkMzBlN2FmZDJlZDVmOTYyNzRlNWFkN2U1Y2IwOWVkYTljMDZkOTAzYWMnLFxuICAgICAgICAnYzI1NjIxMDAzZDNmNDJhODI3Yjc4YTEzMDkzYTk1ZWVhYzNkMjZlZmE4YThkODNmYzUxODBlOTM1YmNkMDkxZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NWQwZmVmM2VjNmRiMTA5Mzk5MDY0ZjNhMGUzYjI4NTU2NDViNGE5MDdhZDM1NDUyN2FhZTc1MTYzZDgyNzUxJyxcbiAgICAgICAgJzFmMDM2NDg0MTNhMzhjMGJlMjlkNDk2ZTU4MmNmNTY2M2U4NzUxZTk2ODc3MzMxNTgyYzIzN2EyNGViMWY5NjInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmYyYjBkY2U5N2VlY2U5N2MxYzliNjA0MTc5OGI4NWRmZGZiNmQ4ODgyZGEyMDMwOGY1NDA0ODI0NTI2MDg3ZScsXG4gICAgICAgICc0OTNkMTNmZWY1MjRiYTE4OGFmNGM0ZGM1NGQwNzkzNmM3YjdlZDZmYjkwZTJjZWIyYzk1MWUwMWYwYzI5OTA3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzgyN2ZiYmU0YjFlODgwZWE5ZWQyYjJlNjMwMWIyMTJiNTdmMWVlMTQ4Y2Q2ZGQyODc4MGU1ZTJjZjg1NmUyNDEnLFxuICAgICAgICAnYzYwZjljOTIzYzcyN2IwYjcxYmVmMmM2N2QxZDEyNjg3ZmY3YTYzMTg2OTAzMTY2ZDYwNWI2OGJhZWMyOTNlYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlYWE2NDlmMjFmNTFiZGJhZTdiZTRhZTM0Y2U2ZTUyMTdhNThmZGNlN2Y0N2Y5YWE3ZjNiNThmYTIxMjBlMmIzJyxcbiAgICAgICAgJ2JlMzI3OWVkNWJiYmIwM2FjNjlhODBmODk4NzlhYTVhMDFhNmI5NjVmMTNmN2U1OWQ0N2E1MzA1YmE1YWQ5M2QnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTRhNDJkNDNjNWNmMTY5ZDkzOTFkZjZkZWNmNDJlZTU0MWI2ZDhmMGM5YTEzNzQwMWUyMzYzMmRkYTM0ZDI0ZicsXG4gICAgICAgICc0ZDlmOTJlNzE2ZDFjNzM1MjZmYzk5Y2NmYjhhZDM0Y2U4ODZlZWRmYThkOGU0ZjEzYTdmNzEzMWRlYmE5NDE0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzFlYzgwZmVmMzYwY2JkZDk1NDE2MGZhZGFiMzUyYjZiOTJiNTM1NzZhODhmZWE0OTQ3MTczYjlkNDMwMGJmMTknLFxuICAgICAgICAnYWVlZmU5Mzc1NmI1MzQwZDJmM2E0OTU4YTdhYmJmNWUwMTQ2ZTc3ZjYyOTVhMDdiNjcxY2RjMWNjMTA3Y2VmZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNDZhNzc4YzA0NjcwYzJmOTFiMDBhZjQ2ODBkZmE4YmNlMzQ5MDcxN2Q1OGJhODg5ZGRiNTkyODM2NjY0MmJlJyxcbiAgICAgICAgJ2IzMThlMGVjMzM1NDAyOGFkZDY2OTgyN2Y5ZDRiMjg3MGFhYTk3MWQyZjdlNWVkMWQwYjI5NzQ4M2Q4M2VmZDAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmE1MGMwZjYxZDIyZTVmMDdlM2FjZWJiMWFhMDdiMTI4ZDAwMTIyMDlhMjhiOTc3NmQ3NmE4NzkzMTgwZWVmOScsXG4gICAgICAgICc2Yjg0YzY5MjIzOTdlYmE5YjcyY2QyODcyMjgxYTY4YTVlNjgzMjkzYTU3YTIxM2IzOGNkOGQ3ZDNmNGYyODExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RhMWQ2MWQwY2E3MjFhMTFiMWE1YmY2YjdkODhlODQyMWEyODhhYjVkNWJiYTUyMjBlNTNkMzJiNWYwNjdlYzInLFxuICAgICAgICAnODE1N2Y1NWE3Yzk5MzA2Yzc5YzA3NjYxNjFjOTFlMjk2NmE3Mzg5OWQyNzliNDhhNjU1ZmJhMGYxYWQ4MzZmMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhOGUyODJmZjBjOTcwNjkwNzIxNWZmOThlOGZkNDE2NjE1MzExZGUwNDQ2ZjFlMDYyYTczYjA2MTBkMDY0ZTEzJyxcbiAgICAgICAgJzdmOTczNTViOGRiODFjMDlhYmZiN2YzYzViMjUxNTg4OGI2NzlhM2U1MGRkNmJkNmNlZjdjNzMxMTFmNGNjMGMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTc0YTUzYjljOWEyODU4NzJkMzllNTZlNjkxM2NhYjE1ZDU5YjFmYTUxMjUwOGMwMjJmMzgyZGU4MzE5NDk3YycsXG4gICAgICAgICdjY2M5ZGMzN2FiZmM5YzE2NTdiNDE1NWYyYzQ3ZjllNjY0NmIzYTFkOGNiOTg1NDM4M2RhMTNhYzA3OWFmYTczJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzk1OTM5Njk4MTk0Mzc4NWMzZDNlNTdlZGY1MDE4Y2RiZTAzOWU3MzBlNDkxOGIzZDg4NGZkZmYwOTQ3NWI3YmEnLFxuICAgICAgICAnMmU3ZTU1Mjg4OGMzMzFkZDhiYTAzODZhNGI5Y2Q2ODQ5YzY1M2Y2NGM4NzA5Mzg1ZTliOGFiZjg3NTI0ZjJmZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkMmE2M2E1MGFlNDAxZTU2ZDY0NWExMTUzYjEwOWE4ZmNjYTBhNDNkNTYxZmJhMmRiYjUxMzQwYzlkODJiMTUxJyxcbiAgICAgICAgJ2U4MmQ4NmZiNjQ0M2ZjYjc1NjVhZWU1OGIyOTQ4MjIwYTcwZjc1MGFmNDg0Y2E1MmQ0MTQyMTc0ZGNmODk0MDUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjQ1ODdlMjMzNTQ3MWViODkwZWU3ODk2ZDdjZmRjODY2YmFjYmRiZDM4MzkzMTdiMzQzNmY5YjQ1NjE3ZTA3MycsXG4gICAgICAgICdkOTlmY2RkNWJmNjkwMmUyYWU5NmRkNjQ0N2MyOTlhMTg1YjkwYTM5MTMzYWVhYjM1ODI5OWU1ZTlmYWY2NTg5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg0ODFiZGUwZTRlNGQ4ODViM2E1NDZkM2U1NDlkZTA0MmYwYWE2Y2VhMjUwZTdmZDM1OGQ2Yzg2ZGQ0NWU0NTgnLFxuICAgICAgICAnMzhlZTdiOGNiYTU0MDRkZDg0YTI1YmYzOWNlY2IyY2E5MDBhNzljNDJiMjYyZTU1NmQ2NGIxYjU5Nzc5MDU3ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxMzQ2NGE1N2E3ODEwMmFhNjJiNjk3OWFlODE3ZjQ2MzdmZmNmZWQzYzRiMWNlMzBiY2Q2MzAzZjZjYWY2NjZiJyxcbiAgICAgICAgJzY5YmUxNTkwMDQ2MTQ1ODBlZjdlNDMzNDUzY2NiMGNhNDhmMzAwYTgxZDA5NDJlMTNmNDk1YTkwN2Y2ZWNjMjcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYmM0YTlkZjViNzEzZmUyZTlhZWY0MzBiY2MxZGM5N2EwY2Q5Y2NlZGUyZjI4NTg4Y2FkYTNhMGQyZDgzZjM2NicsXG4gICAgICAgICdkM2E4MWNhNmU3ODVjMDYzODM5MzdhZGY0Yjc5OGNhYTZlOGE5ZmJmYTU0N2IxNmQ3NThkNjY2NTgxZjMzYzEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGMyOGE5N2JmODI5OGJjMGQyM2Q4Yzc0OTQ1MmEzMmU2OTRiNjVlMzBhOTQ3MmEzOTU0YWIzMGZlNTMyNGNhYScsXG4gICAgICAgICc0MGEzMDQ2M2EzMzA1MTkzMzc4ZmVkZjMxZjdjYzBlYjdhZTc4NGYwNDUxY2I5NDU5ZTcxZGM3M2NiZWY5NDgyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhlYTk2NjYxMzk1MjdhOGMxZGQ5NGNlNGYwNzFmZDIzYzhiMzUwYzVhNGJiMzM3NDhjNGJhMTExZmFjY2FlMCcsXG4gICAgICAgICc2MjBlZmFiYmM4ZWUyNzgyZTI0ZTdjMGNmYjk1YzVkNzM1Yjc4M2JlOWNmMGY4ZTk1NWFmMzRhMzBlNjJiOTQ1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RkMzYyNWZhZWY1YmEwNjA3NDY2OTcxNmJiZDM3ODhkODliZGRlODE1OTU5OTY4MDkyZjc2Y2M0ZWI5YTk3ODcnLFxuICAgICAgICAnN2ExODhmYTM1MjBlMzBkNDYxZGEyNTAxMDQ1NzMxY2E5NDE0NjE5ODI4ODMzOTU5MzdmNjhkMDBjNjQ0YTU3MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmNzEwZDc5ZDllYjk2MjI5N2U0ZjYyMzJiNDBlOGY3ZmViMmJjNjM4MTQ2MTRkNjkyYzEyZGU3NTI0MDgyMjFlJyxcbiAgICAgICAgJ2VhOThlNjcyMzJkM2IzMjk1ZDNiNTM1NTMyMTE1Y2NhYzg2MTJjNzIxODUxNjE3NTI2YWU0N2E5Yzc3YmZjODInXG4gICAgICBdXG4gICAgXVxuICB9LFxuICBuYWY6IHtcbiAgICB3bmQ6IDcsXG4gICAgcG9pbnRzOiBbXG4gICAgICBbXG4gICAgICAgICdmOTMwOGEwMTkyNThjMzEwNDkzNDRmODVmODlkNTIyOWI1MzFjODQ1ODM2Zjk5YjA4NjAxZjExM2JjZTAzNmY5JyxcbiAgICAgICAgJzM4OGY3YjBmNjMyZGU4MTQwZmUzMzdlNjJhMzdmMzU2NjUwMGE5OTkzNGMyMjMxYjZjYjlmZDc1ODRiOGU2NzInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMmY4YmRlNGQxYTA3MjA5MzU1YjRhNzI1MGE1YzUxMjhlODhiODRiZGRjNjE5YWI3Y2JhOGQ1NjliMjQwZWZlNCcsXG4gICAgICAgICdkOGFjMjIyNjM2ZTVlM2Q2ZDRkYmE5ZGRhNmM5YzQyNmY3ODgyNzFiYWIwZDY4NDBkY2E4N2QzYWE2YWM2MmQ2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzVjYmRmMDY0NmU1ZGI0ZWFhMzk4ZjM2NWYyZWE3YTBlM2Q0MTliN2UwMzMwZTM5Y2U5MmJkZGVkY2FjNGY5YmMnLFxuICAgICAgICAnNmFlYmNhNDBiYTI1NTk2MGEzMTc4ZDZkODYxYTU0ZGJhODEzZDBiODEzZmRlN2I1YTUwODI2MjgwODcyNjRkYSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhY2Q0ODRlMmYwYzdmNjUzMDlhZDE3OGE5ZjU1OWFiZGUwOTc5Njk3NGM1N2U3MTRjMzVmMTEwZGZjMjdjY2JlJyxcbiAgICAgICAgJ2NjMzM4OTIxYjBhN2Q5ZmQ2NDM4MDk3MTc2M2I2MWU5YWRkODg4YTQzNzVmOGUwZjA1Y2MyNjJhYzY0ZjljMzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzc0YWU3Zjg1OGE5NDExZTVlZjQyNDZiNzBjNjVhYWM1NjQ5OTgwYmU1YzE3ODkxYmJlYzE3ODk1ZGEwMDhjYicsXG4gICAgICAgICdkOTg0YTAzMmViNmI1ZTE5MDI0M2RkNTZkN2I3YjM2NTM3MmRiMWUyZGZmOWQ2YTgzMDFkNzRjOWM5NTNjNjFiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YyODc3M2MyZDk3NTI4OGJjN2QxZDIwNWMzNzQ4NjUxYjA3NWZiYzY2MTBlNThjZGRlZWRkZjhmMTk0MDVhYTgnLFxuICAgICAgICAnYWIwOTAyZThkODgwYTg5NzU4MjEyZWI2NWNkYWY0NzNhMWEwNmRhNTIxZmE5MWYyOWI1Y2I1MmRiMDNlZDgxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q3OTI0ZDRmN2Q0M2VhOTY1YTQ2NWFlMzA5NWZmNDExMzFlNTk0NmYzYzg1Zjc5ZTQ0YWRiY2Y4ZTI3ZTA4MGUnLFxuICAgICAgICAnNTgxZTI4NzJhODZjNzJhNjgzODQyZWMyMjhjYzZkZWZlYTQwYWYyYmQ4OTZkM2E1YzUwNGRjOWZmNmEyNmI1OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkZWZkZWE0Y2RiNjc3NzUwYTQyMGZlZTgwN2VhY2YyMWViOTg5OGFlNzliOTc2ODc2NmU0ZmFhMDRhMmQ0YTM0JyxcbiAgICAgICAgJzQyMTFhYjA2OTQ2MzUxNjhlOTk3YjBlYWQyYTkzZGFlY2VkMWY0YTA0YTk1YzBmNmNmYjE5OWY2OWU1NmViNzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMmI0ZWEwYTc5N2E0NDNkMjkzZWY1Y2ZmNDQ0ZjQ5NzlmMDZhY2ZlYmQ3ZTg2ZDI3NzQ3NTY1NjEzODM4NWI2YycsXG4gICAgICAgICc4NWU4OWJjMDM3OTQ1ZDkzYjM0MzA4M2I1YTFjODYxMzFhMDFmNjBjNTAyNjk3NjNiNTcwYzg1NGU1YzA5YjdhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM1MmJiZjRhNGNkZDEyNTY0ZjkzZmEzMzJjZTMzMzMwMWQ5YWQ0MDI3MWY4MTA3MTgxMzQwYWVmMjViZTU5ZDUnLFxuICAgICAgICAnMzIxZWI0MDc1MzQ4ZjUzNGQ1OWMxODI1OWRkYTNlMWY0YTFiM2IyZTcxYjEwMzljNjdiZDNkOGJjZjgxOTk4YydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyZmEyMTA0ZDZiMzhkMTFiMDIzMDAxMDU1OTg3OTEyNGU0MmFiOGRmZWZmNWZmMjlkYzljZGFkZDRlY2FjYzNmJyxcbiAgICAgICAgJzJkZTEwNjgyOTVkZDg2NWI2NDU2OTMzNWJkNWRkODAxODFkNzBlY2ZjODgyNjQ4NDIzYmE3NmI1MzJiN2Q2NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5MjQ4Mjc5YjA5YjRkNjhkYWIyMWE5YjA2NmVkZGE4MzI2M2MzZDg0ZTA5NTcyZTI2OWNhMGNkN2Y1NDUzNzE0JyxcbiAgICAgICAgJzczMDE2ZjdiZjIzNGFhZGU1ZDFhYTcxYmRlYTJiMWZmM2ZjMGRlMmE4ODc5MTJmZmU1NGEzMmNlOTdjYjM0MDInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGFlZDRmMmJlM2E4YmYyNzhlNzAxMzJmYjBiZWI3NTIyZjU3MGUxNDRiZjYxNWMwN2U5OTZkNDQzZGVlODcyOScsXG4gICAgICAgICdhNjlkY2U0YTdkNmM5OGU4ZDRhMWFjYTg3ZWY4ZDcwMDNmODNjMjMwZjNhZmE3MjZhYjQwZTUyMjkwYmUxYzU1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M0NGQxMmM3MDY1ZDgxMmU4YWNmMjhkN2NiYjE5ZjkwMTFlY2Q5ZTlmZGYyODFiMGU2YTNiNWU4N2QyMmU3ZGInLFxuICAgICAgICAnMjExOWE0NjBjZTMyNmNkYzc2YzQ1OTI2Yzk4MmZkYWMwZTEwNmU4NjFlZGY2MWM1YTAzOTA2M2YwZTBlNjQ4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2YTI0NWJmNmRjNjk4NTA0Yzg5YTIwY2ZkZWQ2MDg1MzE1MmI2OTUzMzZjMjgwNjNiNjFjNjVjYmQyNjllNmI0JyxcbiAgICAgICAgJ2UwMjJjZjQyYzJiZDRhNzA4YjNmNTEyNmYxNmEyNGFkOGIzM2JhNDhkMDQyM2I2ZWZkNWU2MzQ4MTAwZDhhODInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTY5N2ZmYTZmZDlkZTYyN2MwNzdlM2QyZmU1NDEwODRjZTEzMzAwYjBiZWMxMTQ2Zjk1YWU1N2YwZDBiZDZhNScsXG4gICAgICAgICdiOWMzOThmMTg2ODA2ZjVkMjc1NjE1MDZlNDU1NzQzM2EyY2YxNTAwOWU0OThhZTdhZGVlOWQ2M2QwMWIyMzk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYwNWJkYjAxOTk4MTcxOGI5ODZkMGYwN2U4MzRjYjBkOWRlYjgzNjBmZmI3ZjYxZGY5ODIzNDVlZjI3YTc0NzknLFxuICAgICAgICAnMjk3MmQyZGU0ZjhkMjA2ODFhNzhkOTNlYzk2ZmUyM2MyNmJmYWU4NGZiMTRkYjQzYjAxZTFlOTA1NmI4YzQ5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYyZDE0ZGFiNDE1MGJmNDk3NDAyZmRjNDVhMjE1ZTEwZGNiMDFjMzU0OTU5YjEwY2ZlMzFjN2U5ZDg3ZmYzM2QnLFxuICAgICAgICAnODBmYzA2YmQ4Y2M1YjAxMDk4MDg4YTE5NTBlZWQwZGIwMWFhMTMyOTY3YWI0NzIyMzVmNTY0MjQ4M2IyNWVhZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4MGM2MGFkMDA0MGYyN2RhZGU1YjRiMDZjNDA4ZTU2YjJjNTBlOWY1NmI5YjhiNDI1ZTU1NWMyZjg2MzA4YjZmJyxcbiAgICAgICAgJzFjMzgzMDNmMWNjNWMzMGYyNmU2NmJhZDdmZTcyZjcwYTY1ZWVkNGNiZTcwMjRlYjFhYTAxZjU2NDMwYmQ1N2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnN2E5Mzc1YWQ2MTY3YWQ1NGFhNzRjNjM0OGNjNTRkMzQ0Y2M1ZGM5NDg3ZDg0NzA0OWQ1ZWFiYjBmYTAzYzhmYicsXG4gICAgICAgICdkMGUzZmE5ZWNhODcyNjkwOTU1OWUwZDc5MjY5MDQ2YmRjNTllYTEwYzcwY2UyYjAyZDQ5OWVjMjI0ZGM3ZjcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDUyOGVjZDliNjk2YjU0YzkwN2E5ZWQwNDU0NDdhNzliYjQwOGVjMzliNjhkZjUwNGJiNTFmNDU5YmMzZmZjOScsXG4gICAgICAgICdlZWNmNDEyNTMxMzZlNWY5OTk2NmYyMTg4MWZkNjU2ZWJjNDM0NTQwNWM1MjBkYmMwNjM0NjViNTIxNDA5OTMzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ5MzcwYTRiNWY0MzQxMmVhMjVmNTE0ZThlY2RhZDA1MjY2MTE1ZTRhN2VjYjEzODcyMzE4MDhmOGI0NTk2MycsXG4gICAgICAgICc3NThmM2Y0MWFmZDZlZDQyOGIzMDgxYjA1MTJmZDYyYTU0YzNmM2FmYmI1YjY3NjRiNjUzMDUyYTEyOTQ5YzlhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc3ZjIzMDkzNmVlODhjYmJkNzNkZjkzMGQ2NDcwMmVmODgxZDgxMWUwZTE0OThlMmYxYzEzZWIxZmMzNDVkNzQnLFxuICAgICAgICAnOTU4ZWY0MmE3ODg2YjY0MDBhMDgyNjZlOWJhMWIzNzg5NmM5NTMzMGQ5NzA3N2NiYmU4ZWIzYzc2NzFjNjBkNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMmRhYzk5MWNjNGNlNGI5ZWE0NDg4N2U1YzdjMGJjZTU4YzgwMDc0YWI5ZDRkYmFlYjI4NTMxYjc3MzlmNTMwJyxcbiAgICAgICAgJ2UwZGVkYzliM2IyZjhkYWQ0ZGExZjMyZGVjMjUzMWRmOWViNWZiZWIwNTk4ZTRmZDFhMTE3ZGJhNzAzYTNjMzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDYzYjNkOWY2NjI2MjFmYjFiNGJlOGZiYmUyNTIwMTI1YTIxNmNkZmM5ZGFlM2RlYmNiYTQ4NTBjNjkwZDQ1YicsXG4gICAgICAgICc1ZWQ0MzBkNzhjMjk2YzM1NDMxMTQzMDZkZDg2MjJkN2M2MjJlMjdjOTcwYTFkZTMxY2IzNzdiMDFhZjczMDdlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YxNmY4MDQyNDRlNDZlMmEwOTIzMmQ0YWZmM2I1OTk3NmI5OGZhYzE0MzI4YTJkMWEzMjQ5NmI0OTk5OGYyNDcnLFxuICAgICAgICAnY2VkYWJkOWI4MjIwM2Y3ZTEzZDIwNmZjZGY0ZTMzZDkyYTZjNTNjMjZlNWNjZTI2ZDY1Nzk5NjJjNGUzMWRmNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjYWY3NTQyNzJkYzg0NTYzYjAzNTJiN2ExNDMxMWFmNTVkMjQ1MzE1YWNlMjdjNjUzNjllMTVmNzE1MWQ0MWQxJyxcbiAgICAgICAgJ2NiNDc0NjYwZWYzNWY1ZjJhNDFiNjQzZmE1ZTQ2MDU3NWY0ZmE5Yjc5NjIyMzJhNWMzMmY5MDgzMThhMDQ0NzYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMjYwMGNhNGIyODJjYjk4NmY4NWQwZjE3MDk5NzlkOGI0NGEwOWMwN2NiODZkN2MxMjQ0OTdiYzg2ZjA4MjEyMCcsXG4gICAgICAgICc0MTE5Yjg4NzUzYzE1YmQ2YTY5M2IwM2ZjZGRiYjQ1ZDVhYzZiZTc0YWI1ZjBlZjQ0YjBiZTk0NzVhN2U0YjQwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc2MzVjYTcyZDdlODQzMmMzMzhlYzUzY2QxMjIyMGJjMDFjNDg2ODVlMjRmN2RjOGM2MDJhNzc0Njk5OGU0MzUnLFxuICAgICAgICAnOTFiNjQ5NjA5NDg5ZDYxM2QxZDVlNTkwZjc4ZTZkNzRlY2ZjMDYxZDU3MDQ4YmFkOWU3NmYzMDJjNWI5YzYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc1NGUzMjM5ZjMyNTU3MGNkYmJmNGE4N2RlZWU4YTY2YjdmMmIzMzQ3OWQ0NjhmYmMxYTUwNzQzYmY1NmNjMTgnLFxuICAgICAgICAnNjczZmI4NmU1YmRhMzBmYjNjZDBlZDMwNGVhNDlhMDIzZWUzM2QwMTk3YTY5NWQwYzVkOTgwOTNjNTM2NjgzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UzZTZiZDEwNzFhMWU5NmFmZjU3ODU5YzgyZDU3MGYwMzMwODAwNjYxZDFjOTUyZjlmZTI2OTQ2OTFkOWI5ZTgnLFxuICAgICAgICAnNTljOWUwYmJhMzk0ZTc2ZjQwYzBhYTU4Mzc5YTNjYjZhNWEyMjgzOTkzZTkwYzQxNjcwMDJhZjQ5MjBlMzdmNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxODZiNDgzZDA1NmEwMzM4MjZhZTczZDg4ZjczMjk4NWM0Y2NiMWYzMmJhMzVmNGI0Y2M0N2ZkY2YwNGFhNmViJyxcbiAgICAgICAgJzNiOTUyZDMyYzY3Y2Y3N2UyZTE3NDQ2ZTIwNDE4MGFiMjFmYjgwOTA4OTUxMzhiNGE0YTc5N2Y4NmU4MDg4OGInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGY5ZDcwYTZiOTg3NmNlNTQ0Yzk4NTYxZjRiZTRmNzI1NDQyZTZkMmI3MzdkOWM5MWE4MzIxNzI0Y2UwOTYzZicsXG4gICAgICAgICc1NWViMmRhZmQ4NGQ2Y2NkNWY4NjJiNzg1ZGMzOWQ0YWIxNTcyMjI3MjBlZjlkYTIxN2I4YzQ1Y2YyYmEyNDE3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzVlZGQ1Y2MyM2M1MWU4N2E0OTdjYTgxNWQ1ZGNlMGY4YWI1MjU1NGY4NDllZDg5OTVkZTY0YzVmMzRjZTcxNDMnLFxuICAgICAgICAnZWZhZTljOGRiYzE0MTMwNjYxZThjZWMwMzBjODlhZDBjMTNjNjZjMGQxN2EyOTA1Y2RjNzA2YWI3Mzk5YTg2OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyOTA3OThjMmI2NDc2ODMwZGExMmZlMDIyODdlOWU3NzdhYTNmYmExYzM1NWIxN2E3MjJkMzYyZjg0NjE0ZmJhJyxcbiAgICAgICAgJ2UzOGRhNzZkY2Q0NDA2MjE5ODhkMDBiY2Y3OWFmMjVkNWIyOWMwOTRkYjJhMjMxNDZkMDAzYWZkNDE5NDNlN2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYWYzYzQyM2E5NWQ5ZjViMzA1NDc1NGVmYTE1MGFjMzljZDI5NTUyZmUzNjAyNTczNjJkZmRlY2VmNDA1M2I0NScsXG4gICAgICAgICdmOThhM2ZkODMxZWIyYjc0OWE5M2IwZTZmMzVjZmI0MGM4Y2Q1YWE2NjdhMTU1ODFiYzJmZWRlZDQ5OGZkOWM2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc2NmRiYjI0ZDEzNGU3NDVjY2NhYTI4Yzk5YmYyNzQ5MDZiYjY2YjI2ZGNmOThkZjhkMmZlZDUwZDg4NDI0OWEnLFxuICAgICAgICAnNzQ0YjExNTJlYWNiZTVlMzhkY2M4ODc5ODBkYTM4Yjg5NzU4NGE2NWZhMDZjZWRkMmM5MjRmOTdjYmFjNTk5NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1OWRiZjQ2ZjhjOTQ3NTliYTIxMjc3YzMzNzg0ZjQxNjQ1ZjdiNDRmNmM1OTZhNThjZTkyZTY2NjE5MWFiZTNlJyxcbiAgICAgICAgJ2M1MzRhZDQ0MTc1ZmJjMzAwZjRlYTZjZTY0ODMwOWEwNDJjZTczOWE3OTE5Nzk4Y2Q4NWUyMTZjNGEzMDdmNmUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjEzYWRhOTUxMDNjNDUzNzMwNWU2OTFlNzRlOWE0YThkZDY0N2U3MTFhOTVlNzNjYjYyZGM2MDE4Y2ZkODdiOCcsXG4gICAgICAgICdlMTM4MTdiNDRlZTE0ZGU2NjNiZjRiYzgwODM0MWYzMjY5NDllMjFhNmE3NWMyNTcwNzc4NDE5YmRhZjU3MzNkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc3NTRiNGZhMGU4YWNlZDA2ZDQxNjdhMmM1OWNjYTRjZGExODY5YzA2ZWJhZGZiNjQ4ODU1MDAxNWE4ODUyMmMnLFxuICAgICAgICAnMzBlOTNlODY0ZTY2OWQ4MjIyNGI5NjdjMzAyMGI4ZmE4ZDFlNGUzNTBiNmNiY2M1MzdhNDhiNTc4NDExNjNhMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5NDhkY2FkZjU5OTBlMDQ4YWEzODc0ZDQ2YWJlZjlkNzAxODU4Zjk1ZGU4MDQxZDJhNjgyOGM5OWUyMjYyNTE5JyxcbiAgICAgICAgJ2U0OTFhNDI1MzdmNmU1OTdkNWQyOGEzMjI0YjFiYzI1ZGY5MTU0ZWZiZDJlZjFkMmNiYmEyY2FlNTM0N2Q1N2UnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzk2MjQxNDQ1MGM3NmMxNjg5YzdiNDhmODIwMmVjMzdmYjIyNGNmNWFjMGJmYTE1NzAzMjhhOGEzZDdjNzdhYicsXG4gICAgICAgICcxMDBiNjEwZWM0ZmZiNDc2MGQ1YzFmYzEzM2VmNmY2YjEyNTA3YTA1MWYwNGFjNTc2MGFmYTViMjlkYjgzNDM3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM1MTQwODc4MzQ5NjRiNTRiMTViMTYwNjQ0ZDkxNTQ4NWExNjk3NzIyNWI4ODQ3YmIwZGQwODUxMzdlYzQ3Y2EnLFxuICAgICAgICAnZWYwYWZiYjIwNTYyMDU0NDhlMTY1MmM0OGU4MTI3ZmM2MDM5ZTc3YzE1YzIzNzhiN2U3ZDE1YTBkZTI5MzMxMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkM2NjMzBhZDZiNDgzZTRiYzc5Y2UyYzlkZDhiYzU0OTkzZTk0N2ViOGRmNzg3YjQ0Mjk0M2QzZjdiNTI3ZWFmJyxcbiAgICAgICAgJzhiMzc4YTIyZDgyNzI3OGQ4OWM1ZTliZThmOTUwOGFlM2MyYWQ0NjI5MDM1ODYzMGFmYjM0ZGIwNGVlZGUwYTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTYyNGQ4NDc4MDczMjg2MGNlMWM3OGZjYmZlZmUwOGIyYjI5ODIzZGI5MTNmNjQ5Mzk3NWJhMGZmNDg0NzYxMCcsXG4gICAgICAgICc2ODY1MWNmOWI2ZGE5MDNlMDkxNDQ0OGM2Y2Q5ZDRjYTg5Njg3OGY1MjgyYmU0YzhjYzA2ZTJhNDA0MDc4NTc1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzczM2NlODBkYTk1NWE4YTI2OTAyYzk1NjMzZTYyYTk4NTE5MjQ3NGI1YWYyMDdkYTZkZjdiNGZkNWZjNjFjZDQnLFxuICAgICAgICAnZjU0MzVhMmJkMmJhZGY3ZDQ4NWE0ZDhiOGRiOWZjY2UzZTFlZjhlMDIwMWU0NTc4YzU0NjczYmMxZGM1ZWExZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNWQ5NDQxMjU0OTQ1MDY0Y2YxYTFjMzNiYmQzYjQ5Zjg5NjZjNTA5MjE3MWU2OTllZjI1OGRmYWI4MWMwNDVjJyxcbiAgICAgICAgJ2Q1NmViMzBiNjk0NjNlNzIzNGY1MTM3YjczYjg0MTc3NDM0ODAwYmFjZWJmYzY4NWZjMzdiYmU5ZWZlNDA3MGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTFkMGZjZjJlYzlkZTY3NWI2MTIxMzZlNWNlNzBkMjcxYzIxNDE3YzlkMmI4YWFhYWMxMzg1OTlkMDcxNzk0MCcsXG4gICAgICAgICdlZGQ3N2Y1MGJjYjVhM2NhYjJlOTA3MzczMDk2NjdmMjY0MTQ2MmE1NDA3MGYzZDUxOTIxMmQzOWMxOTdhNjI5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UyMmZiZTE1YzBhZjhjY2M1NzgwYzA3MzVmODRkYmU5YTc5MGJhZGVlODI0NWMwNmM3Y2EzNzMzMWNiMzY5ODAnLFxuICAgICAgICAnYTg1NWJhYmFkNWNkNjBjODhiNDMwYTY5ZjUzYTFhN2EzODI4OTE1NDk2NDc5OWJlNDNkMDZkNzdkMzFkYTA2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMxMTA5MWRkOTg2MGU4ZTIwZWUxMzQ3M2MxMTU1ZjVmNjk2MzVlMzk0NzA0ZWFhNzQwMDk0NTIyNDZjZmE5YjMnLFxuICAgICAgICAnNjZkYjY1NmY4N2QxZjA0ZmZmZDFmMDQ3ODhjMDY4MzA4NzFlYzVhNjRmZWVlNjg1YmQ4MGYwYjEyODZkODM3NCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNGMxZmQwNGQzMDFiZTg5YjMxYzA0NDJkM2U2YWMyNDg4MzkyOGI0NWE5MzQwNzgxODY3ZDQyMzJlYzJkYmRmJyxcbiAgICAgICAgJzk0MTQ2ODVlOTdiMWI1OTU0YmQ0NmY3MzAxNzQxMzZkNTdmMWNlZWI0ODc0NDNkYzUzMjE4NTdiYTczYWJlZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMjE5ZWE1ZDZiNTQ3MDFjMWMxNGRlNWI1NTdlYjQyYThkMTNmM2FiYmNkMDhhZmZjYzJhNWU2YjA0OWI4ZDYzJyxcbiAgICAgICAgJzRjYjk1OTU3ZTgzZDQwYjBmNzNhZjQ1NDRjY2NmNmIxZjRiMDhkM2MwN2IyN2ZiOGQ4YzI5NjJhNDAwNzY2ZDEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDdiODc0MGY3NGE4ZmJhYWIxZjY4M2RiOGY0NWRlMjY1NDNhNTQ5MGJjYTYyNzA4NzIzNjkxMjQ2OWEwYjQ0OCcsXG4gICAgICAgICdmYTc3OTY4MTI4ZDljOTJlZTEwMTBmMzM3YWQ0NzE3ZWZmMTVkYjVlZDNjMDQ5YjM0MTFlMDMxNWVhYTQ1OTNiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMyZDMxYzIyMmY4ZjZmMGVmODZmN2M5OGQzYTMzMzVlYWQ1YmNkMzJhYmRkOTQyODlmZTRkMzA5MWFhODI0YmYnLFxuICAgICAgICAnNWYzMDMyZjU4OTIxNTZlMzljY2QzZDc5MTViOWUxZGEyZTZkYWM5ZTZmMjZlOTYxMTE4ZDE0Yjg0NjJlMTY2MSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NDYxZjM3MTkxNGFiMzI2NzEwNDVhMTU1ZDk4MzFlYTg3OTNkNzdjZDU5NTkyYzQzNDBmODZjYmMxODM0N2I1JyxcbiAgICAgICAgJzhlYzBiYTIzOGI5NmJlYzBjYmRkZGNhZTBhYTQ0MjU0MmVlZTFmZjUwYzk4NmVhNmIzOTg0N2IzY2MwOTJmZjYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWUwNzlhZGIxZGYxODYwMDc0MzU2YTI1YWEzODIwNmE2ZDcxNmIyYzNlNjc0NTNkMjg3Njk4YmFkN2IyYjJkNicsXG4gICAgICAgICc4ZGMyNDEyYWFmZTNiZTVjNGM1ZjM3ZTBlY2M1ZjlmNmE0NDY5ODlhZjA0YzRlMjVlYmFhYzQ3OWVjMWM4YzFlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE2ZWM5M2U0NDdlYzgzZjA0NjdiMTgzMDJlZTYyMGY3ZTY1ZGUzMzE4NzRjOWRjNzJiZmQ4NjE2YmE5ZGE2YjUnLFxuICAgICAgICAnNWU0NjMxMTUwZTYyZmI0MGQwZThjMmE3Y2E1ODA0YTM5ZDU4MTg2YTUwZTQ5NzEzOTYyNjc3OGUyNWIwNjc0ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlYWE1Zjk4MGMyNDVmNmYwMzg5NzgyOTBhZmE3MGI2YmQ4ODU1ODk3Zjk4YjZhYTQ4NWI5NjA2NWQ1MzdiZDk5JyxcbiAgICAgICAgJ2Y2NWY1ZDNlMjkyYzJlMDgxOWE1MjgzOTFjOTk0NjI0ZDc4NDg2OWQ3ZTZlYTY3ZmIxODA0MTAyNGVkYzA3ZGMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzhjOTQwNzU0NGFjMTMyNjkyZWUxOTEwYTAyNDM5OTU4YWUwNDg3NzE1MTM0MmVhOTZjNGI2YjM1YTQ5ZjUxJyxcbiAgICAgICAgJ2YzZTAzMTkxNjllYjliODVkNTQwNDc5NTUzOWE1ZTY4ZmExZmJkNTgzYzA2NGQyNDYyYjY3NWYxOTRhM2RkYjQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDk0ZjRiZTIxOWExYTc3MDE2ZGNkODM4NDMxYWVhMDAwMWNkYzhhZTdhNmZjNjg4NzI2NTc4ZDk3MDI4NTdhNScsXG4gICAgICAgICc0MjI0MmE5NjkyODNhNWYzMzliYTdmMDc1ZTM2YmEyYWY5MjVjZTMwZDc2N2VkNmU1NWY0YjAzMTg4MGQ1NjJjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E1OThhODAzMGRhNmQ4NmM2YmM3ZjJmNTE0NGVhNTQ5ZDI4MjExZWE1OGZhYTcwZWJmNGMxZTY2NWMxZmU5YjUnLFxuICAgICAgICAnMjA0YjVkNmY4NDgyMmMzMDdlNGI0YTcxNDA3MzdhZWMyM2ZjNjNiNjViMzVmODZhMTAwMjZkYmQyZDg2NGU2YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNDE5MTYzNjVhYmIyYjVkMDkxOTJmNWYyZGJlYWZlYzIwOGYwMjBmMTI1NzBhMTg0ZGJhZGMzZTU4NTk1OTk3JyxcbiAgICAgICAgJzRmMTQzNTFkMDA4N2VmYTQ5ZDI0NWIzMjg5ODQ5ODlkNWNhZjk0NTBmMzRiZmMwZWQxNmU5NmI1OGZhOTkxMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NDFkNjA2M2E1ODZmYTQ3NWE3MjQ2MDRkYTAzYmM1YjkyYTJlMGQyZTBhMzZhY2ZlNGM3M2E1NTE0NzQyODgxJyxcbiAgICAgICAgJzczODY3ZjU5YzA2NTllODE5MDRmOWExYzc1NDM2OThlNjI1NjJkNjc0NGMxNjljZTdhMzZkZTAxYThkNjE1NCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1ZTk1YmIzOTlhNjk3MWQzNzYwMjY5NDdmODliZGUyZjI4MmIzMzgxMDkyOGJlNGRlZDExMmFjNGQ3MGUyMGQ1JyxcbiAgICAgICAgJzM5ZjIzZjM2NjgwOTA4NWJlZWJmYzcxMTgxMzEzNzc1YTk5YzlhZWQ3ZDhiYTM4YjE2MTM4NGM3NDYwMTI4NjUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzZlNDY0MWE1Mzk0OGZkNDc2YzM5ZjhhOTlmZDk3NGU1ZWMwNzU2NGI1MzE1ZDhiZjk5NDcxYmNhMGVmMmY2NicsXG4gICAgICAgICdkMjQyNGIxYjFhYmU0ZWI4MTY0MjI3YjA4NWM5YWE5NDU2ZWExMzQ5M2ZkNTYzZTA2ZmQ1MWNmNTY5NGM3OGZjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMzNjU4MWVhN2JmYmJiMjkwYzE5MWEyZjUwN2E0MWNmNTY0Mzg0MjE3MGU5MTRmYWVhYjI3YzJjNTc5ZjcyNicsXG4gICAgICAgICdlYWQxMjE2ODU5NWZlMWJlOTkyNTIxMjliNmU1NmIzMzkxZjdhYjE0MTBjZDFlMGVmM2RjZGNhYmQyZmRhMjI0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhhYjg5ODE2ZGFkZmQ2YjZhMWYyNjM0ZmNmMDBlYzg0MDM3ODEwMjVlZDY4OTBjNDg0OTc0MjcwNmJkNDNlZGUnLFxuICAgICAgICAnNmZkY2VmMDlmMmY2ZDBhMDQ0ZTY1NGFlZjYyNDEzNmY1MDNkNDU5YzNlODk4NDU4NThhNDdhOTEyOWNkZDI0ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxZTMzZjFhNzQ2YzljNTc3ODEzMzM0NGQ5Mjk5ZmNhYTIwYjA5MzhlOGFjZmYyNTQ0YmI0MDI4NGI4YzVmYjk0JyxcbiAgICAgICAgJzYwNjYwMjU3ZGQxMWIzYWE5YzhlZDYxOGQyNGVkZmYyMzA2ZDMyMGYxZDAzMDEwZTMzYTdkMjA1N2YzYjNiNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NWI3YzFkY2IzY2VjMWI3ZWU3ZjMwZGVkNzlkZDIwYTBlZDFmNGNjMThjYmNmY2ZhNDEwMzYxZmQ4ZjA4ZjMxJyxcbiAgICAgICAgJzNkOThhOWNkZDAyNmRkNDNmMzkwNDhmMjVhODg0N2Y0ZmNhZmFkMTg5NWQ3YTYzM2M2ZmVkM2MzNWU5OTk1MTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMjlkZjlmYmQ4ZDllNDY1MDkyNzVmNGIxMjVkNmQ0NWQ3ZmJlOWEzYjg3OGE3YWY4NzJhMjgwMDY2MWFjNWY1MScsXG4gICAgICAgICdiNGM0ZmU5OWM3NzVhNjA2ZTJkODg2MjE3OTEzOWZmZGE2MWRjODYxYzAxOWU1NWNkMjg3NmViMmEyN2Q4NGInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTBiMWNhZTA2YjBhODQ3YTNmZWE2ZTY3MWFhZjhhZGZkZmU1OGNhMmY3NjgxMDVjODA4MmIyZTQ0OWZjZTI1MicsXG4gICAgICAgICdhZTQzNDEwMmVkZGUwOTU4ZWM0YjE5ZDkxN2E2YTI4ZTZiNzJkYTE4MzRhZmYwZTY1MGYwNDk1MDNhMjk2Y2YyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRlOGNlYWZiOWIzZTlhMTM2ZGM3ZmY2N2U4NDAyOTViNDk5ZGZiM2IyMTMzZTRiYTExM2YyZTRjMGUxMjFlNScsXG4gICAgICAgICdjZjIxNzQxMThjOGI2ZDdhNGI0OGY2ZDUzNGNlNWM3OTQyMmMwODZhNjM0NjA1MDJiODI3Y2U2MmEzMjY2ODNjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QyNGE0NGUwNDdlMTliNmY1YWZiODFjN2NhMmY2OTA4MGE1MDc2Njg5YTAxMDkxOWY0MjcyNWMyYjc4OWEzM2InLFxuICAgICAgICAnNmZiOGQ1NTkxYjQ2NmY4ZmM2M2RiNTBmMWMwZjFjNjkwMTNmOTk2ODg3YjgyNDRkMmNkZWM0MTdhZmVhOGZhMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlYTAxNjA2YTdhNmM5Y2RkMjQ5ZmRmY2ZhY2I5OTU4NDAwMWVkZDI4YWJiYWI3N2I1MTA0ZTk4ZThlM2IzNWQ0JyxcbiAgICAgICAgJzMyMmFmNDkwOGM3MzEyYjBjZmJmZTM2OWY3YTdiM2NkYjdkNDQ5NGJjMjgyMzcwMGNmZDY1MjE4OGEzZWE5OGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYWY4YWRkYmYyYjY2MWM4YTZjNjMyODY1NWViOTY2NTEyNTIwMDdkOGM1ZWEzMWJlNGFkMTk2ZGU4Y2UyMTMxZicsXG4gICAgICAgICc2NzQ5ZTY3YzAyOWI4NWY1MmEwMzRlYWZkMDk2ODM2YjI1MjA4MTg2ODBlMjZhYzhmM2RmYmNkYjcxNzQ5NzAwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UzYWUxOTc0NTY2Y2EwNmNjNTE2ZDQ3ZTBmYjE2NWE2NzRhM2RhYmNmY2ExNWU3MjJmMGUzNDUwZjQ1ODg5JyxcbiAgICAgICAgJzJhZWFiZTdlNDUzMTUxMDExNjIxN2YwN2JmNGQwNzMwMGRlOTdlNDg3NGY4MWY1MzM0MjBhNzJlZWIwYmQ2YTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTkxZWUzNTUzMTNkOTk3MjFjZjY5OTNmZmVkMWUzZTMwMTk5M2ZmM2VkMjU4ODAyMDc1ZWE4Y2VkMzk3ZTI0NicsXG4gICAgICAgICdiMGVhNTU4YTExM2MzMGJlYTYwZmM0Nzc1NDYwYzc5MDFmZjBiMDUzZDI1Y2EyYmRlZWU5OGYxYTRiZTVkMTk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzExMzk2ZDU1ZmRhNTRjNDlmMTlhYTk3MzE4ZDhkYTYxZmE4NTg0ZTQ3YjA4NDk0NTA3N2NmMDMyNTViNTI5ODQnLFxuICAgICAgICAnOTk4Yzc0YThjZDQ1YWMwMTI4OWQ1ODMzYTdiZWI0NzQ0ZmY1MzZiMDFiMjU3YmU0YzU3NjdiZWE5M2VhNTdhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczYzVkMmExYmEzOWM1YTE3OTAwMDA3MzhjOWUwYzQwYjhkY2RmZDU0Njg3NTRiNjQwNTU0MDE1N2UwMTdhYTdhJyxcbiAgICAgICAgJ2IyMjg0Mjc5OTk1YTM0ZTJmOWQ0ZGU3Mzk2ZmMxOGI4MGY5YjhiOWZkZDI3MGY2NjYxZjc5Y2E0YzgxYmQyNTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnY2M4NzA0YjhhNjBhMGRlZmEzYTk5YTcyOTlmMmU5YzNmYmMzOTVhZmIwNGFjMDc4NDI1ZWY4YTE3OTNjYzAzMCcsXG4gICAgICAgICdiZGQ0NjAzOWZlZWQxNzg4MWQxZTA4NjJkYjM0N2Y4Y2YzOTViNzRmYzRiY2RjNGU5NDBiNzRlM2FjMWYxYjEzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M1MzNlNGY3ZWE4NTU1YWFjZDk3NzdhYzVjYWQyOWI5N2RkNGRlZmNjYzUzZWU3ZWEyMDQxMTliMjg4OWIxOTcnLFxuICAgICAgICAnNmYwYTI1NmJjNWVmZGY0MjlhMmZiNjI0MmYxYTQzYTJkOWI5MjViYjRhNGIzYTI2YmI4ZTBmNDVlYjU5NjA5NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjMTRmOGYyY2NiMjdkNmYxMDlmNmQwOGQwM2NjOTZhNjliYThjMzRlZWMwN2JiY2Y1NjZkNDhlMzNkYTY1OTMnLFxuICAgICAgICAnYzM1OWQ2OTIzYmIzOThmN2ZkNDQ3M2UxNmZlMWMyODQ3NWI3NDBkZDA5ODA3NWU2YzBlODY0OTExM2RjM2EzOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhNmNiYzMwNDZiYzZhNDUwYmFjMjQ3ODlmYTE3MTE1YTRjOTczOWVkNzVmOGYyMWNlNDQxZjcyZTBiOTBlNmVmJyxcbiAgICAgICAgJzIxYWU3ZjQ2ODBlODg5YmIxMzA2MTllMmMwZjk1YTM2MGNlYjU3M2M3MDYwMzEzOTg2MmFmZDYxN2ZhOWI5ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNDdkNmQ5YTAyYzQ4OTI3ZWJmYjg2YzEzNTliMWNhZjEzMGEzYzAyNjdkMTFjZTYzNDRiMzlmOTlkNDNjYzM4JyxcbiAgICAgICAgJzYwZWE3ZjYxYTM1MzUyNGQxYzk4N2Y2ZWNlYzkyZjA4NmQ1NjVhYjY4Nzg3MGNiMTI2ODlmZjFlMzFjNzQ0NDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGE2NTQ1ZDIxODFkYjhkOTgzZjdkY2IzNzVlZjU4NjZkNDdjNjdiMWJmMzFjOGNmODU1ZWY3NDM3YjcyNjU2YScsXG4gICAgICAgICc0OWI5NjcxNWFiNjg3OGE3OWU3OGYwN2NlNTY4MGM1ZDY2NzMwNTFiNDkzNWJkODk3ZmVhODI0Yjc3ZGMyMDhhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M0MDc0N2NjOWQwMTJjYjFhMTNiODE0ODMwOWM2ZGU3ZWMyNWQ2OTQ1ZDY1NzE0NmI5ZDU5OTRiOGZlYjExMTEnLFxuICAgICAgICAnNWNhNTYwNzUzYmUyYTEyZmM2ZGU2Y2FmMmNiNDg5NTY1ZGI5MzYxNTZiOTUxNGUxYmI1ZTgzMDM3ZTBmYTJkNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ZTQyYzhlYzgyYzk5Nzk4Y2NmM2E2MTBiZTg3MGU3ODMzOGM3ZjcxMzM0OGJkMzRjODIwM2VmNDAzN2YzNTAyJyxcbiAgICAgICAgJzc1NzFkNzRlZTVlMGZiOTJhN2E4YjMzYTA3NzgzMzQxYTU0OTIxNDRjYzU0YmNjNDBhOTQ0NzM2OTM2MDY0MzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzc3NWFiNzA4OWJjNmFmODIzYWJhMmUxYWY3MGIyMzZkMjUxY2FkYjBjODY3NDMyODc1MjJhMWIzYjBkZWRlYScsXG4gICAgICAgICdiZTUyZDEwN2JjZmEwOWQ4YmNiOTczNmE4MjhjZmE3ZmFjOGRiMTdiZjdhNzZhMmM0MmFkOTYxNDA5MDE4Y2Y3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2NlZTMxY2JmN2UzNGVjMzc5ZDk0ZmI4MTRkM2Q3NzVhZDk1NDU5NWQxMzE0YmE4ODQ2OTU5ZTNlODJmNzRlMjYnLFxuICAgICAgICAnOGZkNjRhMTRjMDZiNTg5YzI2Yjk0N2FlMmJjZjZiZmEwMTQ5ZWYwYmUxNGVkNGQ4MGY0NDhhMDFjNDNiMWM2ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiNGY5ZWFlYTA5YjY5MTc2MTlmNmVhNmE0ZWI1NDY0ZWZkZGI1OGZkNDViMWViZWZjZGMxYTAxZDA4YjQ3OTg2JyxcbiAgICAgICAgJzM5ZTVjOTkyNWI1YTU0YjA3NDMzYTRmMThjNjE3MjZmOGJiMTMxYzAxMmNhNTQyZWIyNGE4YWMwNzIwMDY4MmEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDQyNjNkZmMzZDJkZjkyM2EwMTc5YTQ4OTY2ZDMwY2U4NGUyNTE1YWZjM2RjY2MxYjc3OTA3NzkyZWJjYzYwZScsXG4gICAgICAgICc2MmRmYWYwN2EwZjc4ZmViMzBlMzBkNjI5NTg1M2NlMTg5ZTEyNzc2MGFkNmNmN2ZhZTE2NGUxMjJhMjA4ZDU0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ4NDU3NTI0ODIwZmE2NWE0ZjhkMzVlYjY5MzA4NTdjMDAzMmFjYzBhNGEyZGU0MjIyMzNlZWRhODk3NjEyYzQnLFxuICAgICAgICAnMjVhNzQ4YWIzNjc5NzlkOTg3MzNjMzhhMWZhMWMyZTdkYzZjYzA3ZGIyZDYwYTlhZTdhNzZhYWE0OWJkMGY3NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkZmVlZWYxODgxMTAxZjJjYjExNjQ0ZjNhMmFmZGZjMjA0NWUxOTkxOTE1MjkyM2YzNjdhMTc2N2MxMWNjZWRhJyxcbiAgICAgICAgJ2VjZmI3MDU2Y2YxZGUwNDJmOTQyMGJhYjM5Njc5M2MwYzM5MGJkZTc0YjRiYmRmZjE2YTgzYWUwOWE5YTc1MTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNmQ3ZWY2YjE3NTQzZjgzNzNjNTczZjQ0ZTFmMzg5ODM1ZDg5YmNiYzYwNjJjZWQzNmM4MmRmODNiOGZhZTg1OScsXG4gICAgICAgICdjZDQ1MGVjMzM1NDM4OTg2ZGZlZmExMGM1N2ZlYTliY2M1MjFhMDk1OWIyZDgwYmJmNzRiMTkwZGNhNzEyZDEwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U3NTYwNWQ1OTEwMmE1YTI2ODQ1MDBkM2I5OTFmMmUzZjNjODhiOTMyMjU1NDcwMzVhZjI1YWY2NmUwNDU0MWYnLFxuICAgICAgICAnZjVjNTQ3NTRhOGY3MWVlNTQwYjliNDg3Mjg0NzNlMzE0ZjcyOWFjNTMwOGIwNjkzODM2MDk5MGUyYmZhZDEyNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlYjk4NjYwZjRjNGRmYWEwNmEyYmU0NTNkNTAyMGJjOTlhMGMyZTYwYWJlMzg4NDU3ZGQ0M2ZlZmIxZWQ2MjBjJyxcbiAgICAgICAgJzZjYjlhODg3NmQ5Y2I4NTIwNjA5YWYzYWRkMjZjZDIwYTBhN2NkOGE5NDExMTMxY2U4NWY0NDEwMDA5OTIyM2UnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTNlODdiMDI3ZDg1MTRkMzU5MzlmMmU2ODkyYjE5OTIyMTU0NTk2OTQxODg4MzM2ZGMzNTYzZTNiOGRiYTk0MicsXG4gICAgICAgICdmZWY1YTNjNjgwNTlhNmRlYzVkNjI0MTE0YmYxZTkxYWFjMmI5ZGE1NjhkNmFiZWIyNTcwZDU1NjQ2YjhhZGYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VlMTYzMDI2ZTlmZDZmZTAxN2MzOGYwNmE1YmU2ZmMxMjU0MjRiMzcxY2UyNzA4ZTdiZjQ0OTE2OTFlNTc2NGEnLFxuICAgICAgICAnMWFjYjI1MGYyNTVkZDYxYzQzZDk0Y2NjNjcwZDBmNThmNDlhZTNmYTE1Yjk2NjIzZTU0MzBkYTBhZDZjNjJiMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiMjY4ZjVlZjlhZDUxZTRkNzhkZTNhNzUwYzJkYzg5YjFlNjI2ZDQzNTA1ODY3OTk5OTMyZTVkYjMzYWYzZDgwJyxcbiAgICAgICAgJzVmMzEwZDRiM2M5OWI5ZWJiMTlmNzdkNDFjMWRlZTAxOGNmMGQzNGZkNDE5MTYxNDAwM2U5NDVhMTIxNmU0MjMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmYwN2YzMTE4YTlkZjAzNWU5ZmFkODVlYjZjN2JmZTQyYjAyZjAxY2E5OWNlZWEzYmY3ZmZkYmE5M2M0NzUwZCcsXG4gICAgICAgICc0MzgxMzZkNjAzZTg1OGEzYTVjNDQwYzM4ZWNjYmFkZGMxZDI5NDIxMTRlMmVkZGQ0NzQwZDA5OGNlZDFmMGQ4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhkOGI5ODU1YzdjMDUyYTM0MTQ2ZmQyMGZmYjY1OGJlYTRiOWY2OWUwZDgyNWViZWMxNmU4YzNjZTJiNTI2YTEnLFxuICAgICAgICAnY2RiNTU5ZWVkYzJkNzlmOTI2YmFmNDRmYjg0ZWE0ZDQ0YmNmNTBmZWU1MWQ3Y2ViMzBlMmU3ZjQ2MzAzNjc1OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1MmRiMGI1Mzg0ZGZiZjA1YmZhOWQ0NzJkN2FlMjZkZmU0Yjg1MWNlY2E5MWIxZWJhNTQyNjMxODBkYTMyYjYzJyxcbiAgICAgICAgJ2MzYjk5N2QwNTBlZTVkNDIzZWJhZjY2YTZkYjlmNTdiMzE4MGM5MDI4NzU2NzlkZTkyNGI2OWQ4NGE3YjM3NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNjJmOTQ5MGQzZDUxZGE2Mzk1ZWZkMjRlODA5MTljYzdkMGYyOWMzZjNmYTQ4YzZmZmY1NDNiZWNiZDQzMzUyJyxcbiAgICAgICAgJzZkODlhZDdiYTQ4NzZiMGIyMmMyY2EyODBjNjgyODYyZjM0MmM4NTkxZjFkYWY1MTcwZTA3YmZkOWNjYWZhN2QnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnN2YzMGVhMjQ3NmIzOTliNDk1NzUwOWM4OGY3N2QwMTkxYWZhMmZmNWNiN2IxNGZkNmQ4ZTdkNjVhYWFiMTE5MycsXG4gICAgICAgICdjYTVlZjdkNGIyMzFjOTRjM2IxNTM4OWE1ZjYzMTFlOWRhZmY3YmI2N2IxMDNlOTg4MGVmNGJmZjYzN2FjYWVjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzUwOThmZjFlMWQ5ZjE0ZmI0NmEyMTBmYWRhNmM5MDNmZWYwZmI3YjRhMWRkMWQ5YWM2MGEwMzYxODAwYjdhMDAnLFxuICAgICAgICAnOTczMTE0MWQ4MWZjOGY4MDg0ZDM3YzZlNzU0MjAwNmIzZWUxYjQwZDYwZGZlNTM2MmE1YjEzMmZkMTdkZGMwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMyYjc4YzdkZTllZTUxMmE3Mjg5NWJlNmI5Y2JlZmE2ZTJmM2M0Y2NjZTQ0NWM5NmI5ZjJjODFlMjc3OGFkNTgnLFxuICAgICAgICAnZWUxODQ5ZjUxM2RmNzFlMzJlZmMzODk2ZWUyODI2MGM3M2JiODA1NDdhZTIyNzViYTQ5NzIzNzc5NGM4NzUzYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlMmNiNzRmZGRjOGU5ZmJjZDA3NmVlZjJhN2M3MmIwY2UzN2Q1MGYwODI2OWRmYzA3NGI1ODE1NTA1NDdhNGY3JyxcbiAgICAgICAgJ2QzYWEyZWQ3MWM5ZGQyMjQ3YTYyZGYwNjI3MzZlYjBiYWRkZWE5ZTM2MTIyZDJiZTg2NDFhYmNiMDA1Y2M0YTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODQzODQ0NzU2NmQ0ZDdiZWRhZGMyOTk0OTZhYjM1NzQyNjAwOWEzNWYyMzVjYjE0MWJlMGQ5OWNkMTBhZTNhOCcsXG4gICAgICAgICdjNGUxMDIwOTE2OTgwYTRkYTVkMDFhYzVlNmFkMzMwNzM0ZWYwZDc5MDY2MzFjNGYyMzkwNDI2YjJlZGQ3OTFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQxNjJkNDg4Yjg5NDAyMDM5YjU4NGM2ZmM2YzMwODg3MDU4N2Q5YzQ2ZjY2MGI4NzhhYjY1YzgyYzcxMWQ2N2UnLFxuICAgICAgICAnNjcxNjNlOTAzMjM2Mjg5Zjc3NmYyMmMyNWZiOGEzYWZjMTczMmYyYjg0YjRlOTVkYmRhNDdhZTVhMDg1MjY0OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczZmFkM2ZhODRjYWYwZjM0ZjBmODliZmQyZGNmNTRmYzE3NWQ3NjdhZWMzZTUwNjg0ZjNiYTRhNGJmNWY2ODNkJyxcbiAgICAgICAgJ2NkMWJjN2NiNmNjNDA3YmIyZjBjYTY0N2M3MThhNzMwY2Y3MTg3MmU3ZDBkMmE1M2ZhMjBlZmNkZmU2MTgyNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2NzRmMjYwMGEzMDA3YTAwNTY4YzFhN2NlMDVkMDgxNmMxZmI4NGJmMTM3MDc5OGYxYzY5NTMyZmFlYjFhODZiJyxcbiAgICAgICAgJzI5OWQyMWY5NDEzZjMzYjNlZGY0M2IyNTcwMDQ1ODBiNzBkYjU3ZGEwYjE4MjI1OWUwOWVlY2M2OWUwZDM4YTUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDMyZjRkYTU0YWRlNzRhYmI4MWI4MTVhZDFmYjNiMjYzZDgyZDZjNjkyNzE0YmNmZjg3ZDI5YmQ1ZWU5ZjA4ZicsXG4gICAgICAgICdmOTQyOWU3MzhiOGU1M2I5NjhlOTkwMTZjMDU5NzA3NzgyZTE0ZjQ1MzUzNTlkNTgyZmM0MTY5MTBiM2VlYTg3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMwZTRlNjcwNDM1Mzg1NTU2ZTU5MzY1NzEzNTg0NWQzNmZiYjY5MzFmNzJiMDhjYjFlZDk1NGYxZTNjZTNmZjYnLFxuICAgICAgICAnNDYyZjliY2U2MTk4OTg2Mzg0OTkzNTAxMTNiYmM5YjEwYTg3OGQzNWRhNzA3NDBkYzY5NWE1NTllYjg4ZGI3YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiZTIwNjIwMDNjNTFjYzMwMDQ2ODI5MDQzMzBlNGRlZTdmM2RjZDEwYjAxZTU4MGJmMTk3MWIwNGQ0Y2FkMjk3JyxcbiAgICAgICAgJzYyMTg4YmM0OWQ2MWU1NDI4NTczZDQ4YTc0ZTFjNjU1YjFjNjEwOTA5MDU2ODJhMGQ1NTU4ZWQ3MmRjY2I5YmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTMxNDQ0MjNhY2UzNDUxZWQyOWUwZmI5YWMyYWYyMTFjYjZlODRhNjAxZGY1OTkzYzQxOTg1OWZmZjVkZjA0YScsXG4gICAgICAgICc3YzEwZGZiMTY0YzM0MjVmNWM3MWEzZjlkNzk5MjAzOGYxMDY1MjI0ZjcyYmI5ZDFkOTAyYTZkMTMwMzdiNDdjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2IwMTVmODA0NGY1ZmNiZGNmMjFjYTI2ZDZjMzRmYjgxOTc4MjkyMDVjN2I3ZDJhN2NiNjY0MThjMTU3YjExMmMnLFxuICAgICAgICAnYWI4YzFlMDg2ZDA0ZTgxMzc0NGE2NTViMmRmOGQ1ZjgzYjNjZGM2ZmFhMzA4OGMxZDNhZWExNDU0ZTNhMWQ1ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNWU5ZTFkYTY0OWQ5N2Q4OWU0ODY4MTE3YTQ2NWEzYTRmOGExOGRlNTdhMTQwZDM2YjNmMmFmMzQxYTIxYjUyJyxcbiAgICAgICAgJzRjYjA0NDM3ZjM5MWVkNzMxMTFhMTNjYzFkNGRkMGRiMTY5MzQ2NWMyMjQwNDgwZDg5NTVlODU5MmYyNzQ0N2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDNhZTQxMDQ3ZGQ3Y2EwNjVkYmY4ZWQ3N2I5OTI0Mzk5ODMwMDVjZDcyZTE2ZDZmOTk2YTUzMTZkMzY5NjZiYicsXG4gICAgICAgICdiZDFhZWIyMWFkMjJlYmIyMmExMGYwMzAzNDE3YzZkOTY0ZjhjZGQ3ZGYwYWNhNjE0YjEwZGMxNGQxMjVhYzQ2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ2M2UyNzYzZDg4NWY5NThmYzY2Y2RkMjI4MDBmMGE0ODcxOTdkMGE4MmUzNzdiNDlmODBhZjg3Yzg5N2IwNjUnLFxuICAgICAgICAnYmZlZmFjZGIwZTVkMGZkN2RmM2EzMTFhOTRkZTA2MmIyNmI4MGM2MWZiYzk3NTA4Yjc5OTkyNjcxZWY3Y2E3ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3OTg1ZmRmZDEyN2MwNTY3YzZmNTNlYzFiYjYzZWMzMTU4ZTU5N2M0MGJmZTc0N2M4M2NkZGZjOTEwNjQxOTE3JyxcbiAgICAgICAgJzYwM2MxMmRhZjNkOTg2MmVmMmIyNWZlMWRlMjg5YWVkMjRlZDI5MWUwZWM2NzA4NzAzYTViZDU2N2YzMmVkMDMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzRhMWFkNmI1Zjc2ZTM5ZGIyZGQyNDk0MTBlYWM3Zjk5ZTc0YzU5Y2I4M2QyZDBlZDVmZjE1NDNkYTc3MDNlOScsXG4gICAgICAgICdjYzYxNTdlZjE4YzljNjNjZDYxOTNkODM2MzFiYmVhMDA5M2UwOTY4OTQyZThjMzNkNTczN2ZkNzkwZTBkYjA4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMwNjgyYTUwNzAzMzc1ZjYwMmQ0MTY2NjRiYTE5YjdmYzliYWI0MmM3Mjc0NzQ2M2E3MWQwODk2YjIyZjZkYTMnLFxuICAgICAgICAnNTUzZTA0ZjZiMDE4YjRmYTZjOGYzOWU3ZjMxMWQzMTc2MjkwZDBlMGYxOWNhNzNmMTc3MTRkOTk3N2EyMmZmOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5ZTIxNThmMGQ3YzBkNWYyNmMzNzkxZWZlZmE3OTU5NzY1NGU3YTJiMjQ2NGY1MmIxZWU2YzEzNDc3NjllZjU3JyxcbiAgICAgICAgJzcxMmZjZGQxYjkwNTNmMDkwMDNhMzQ4MWZhNzc2MmU5ZmZkN2M4ZWYzNWEzODUwOWUyZmJmMjYyOTAwODM3MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNzZlMjY5ODlhNDNjOWNmZWJhNDAyOWMyMDI1MzhjMjgxNzJlNTY2ZTNjNGZjZTczMjI4NTdmM2JlMzI3ZDY2JyxcbiAgICAgICAgJ2VkOGNjOWQwNGIyOWViODc3ZDI3MGI0ODc4ZGM0M2MxOWFlZmQzMWY0ZWVlMDllZTdiNDc4MzRjMWZhNGIxYzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzVkNDZlZmVhMzc3MWU2ZTY4YWJiODlhMTNhZDc0N2VjZjE4OTIzOTNkZmM0ZjFiNzAwNDc4OGM1MDM3NGRhOCcsXG4gICAgICAgICc5ODUyMzkwYTk5NTA3Njc5ZmQwYjg2ZmQyYjM5YTg2OGQ3ZWZjMjIxNTEzNDZlMWEzY2E0NzI2NTg2YTZiZWQ4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzgwOWEyMGM2N2Q2NDkwMGZmYjY5OGM0YzgyNWY2ZDVmMjMxMGZiMDQ1MWM4NjkzNDViNzMxOWY2NDU2MDU3MjEnLFxuICAgICAgICAnOWU5OTQ5ODBkOTkxN2UyMmI3NmIwNjE5MjdmYTA0MTQzZDA5NmNjYzU0OTYzZTZhNWViZmE1ZjNmOGUyODZjMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxYjM4OTAzYTQzZjdmMTE0ZWQ0NTAwYjRlYWM3MDgzZmRlZmVjZTFjZjI5YzYzNTI4ZDU2MzQ0NmY5NzJjMTgwJyxcbiAgICAgICAgJzQwMzZlZGM5MzFhNjBhZTg4OTM1M2Y3N2ZkNTNkZTRhMjcwOGIyNmI2ZjVkYTcyYWQzMzk0MTE5ZGFmNDA4ZjknXG4gICAgICBdXG4gICAgXVxuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIEhtYWNEUkJHID0gcmVxdWlyZSgnaG1hYy1kcmJnJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGN1cnZlcyA9IHJlcXVpcmUoJy4uL2N1cnZlcycpO1xudmFyIHJhbmQgPSByZXF1aXJlKCdicm9yYW5kJyk7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG52YXIgS2V5UGFpciA9IHJlcXVpcmUoJy4va2V5Jyk7XG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZSgnLi9zaWduYXR1cmUnKTtcblxuZnVuY3Rpb24gRUMob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRUMpKVxuICAgIHJldHVybiBuZXcgRUMob3B0aW9ucyk7XG5cbiAgLy8gU2hvcnRjdXQgYGVsbGlwdGljLmVjKGN1cnZlLW5hbWUpYFxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgYXNzZXJ0KGN1cnZlcy5oYXNPd25Qcm9wZXJ0eShvcHRpb25zKSwgJ1Vua25vd24gY3VydmUgJyArIG9wdGlvbnMpO1xuXG4gICAgb3B0aW9ucyA9IGN1cnZlc1tvcHRpb25zXTtcbiAgfVxuXG4gIC8vIFNob3J0Y3V0IGZvciBgZWxsaXB0aWMuZWMoZWxsaXB0aWMuY3VydmVzLmN1cnZlTmFtZSlgXG4gIGlmIChvcHRpb25zIGluc3RhbmNlb2YgY3VydmVzLlByZXNldEN1cnZlKVxuICAgIG9wdGlvbnMgPSB7IGN1cnZlOiBvcHRpb25zIH07XG5cbiAgdGhpcy5jdXJ2ZSA9IG9wdGlvbnMuY3VydmUuY3VydmU7XG4gIHRoaXMubiA9IHRoaXMuY3VydmUubjtcbiAgdGhpcy5uaCA9IHRoaXMubi51c2hybigxKTtcbiAgdGhpcy5nID0gdGhpcy5jdXJ2ZS5nO1xuXG4gIC8vIFBvaW50IG9uIGN1cnZlXG4gIHRoaXMuZyA9IG9wdGlvbnMuY3VydmUuZztcbiAgdGhpcy5nLnByZWNvbXB1dGUob3B0aW9ucy5jdXJ2ZS5uLmJpdExlbmd0aCgpICsgMSk7XG5cbiAgLy8gSGFzaCBmb3IgZnVuY3Rpb24gZm9yIERSQkdcbiAgdGhpcy5oYXNoID0gb3B0aW9ucy5oYXNoIHx8IG9wdGlvbnMuY3VydmUuaGFzaDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRUM7XG5cbkVDLnByb3RvdHlwZS5rZXlQYWlyID0gZnVuY3Rpb24ga2V5UGFpcihvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgS2V5UGFpcih0aGlzLCBvcHRpb25zKTtcbn07XG5cbkVDLnByb3RvdHlwZS5rZXlGcm9tUHJpdmF0ZSA9IGZ1bmN0aW9uIGtleUZyb21Qcml2YXRlKHByaXYsIGVuYykge1xuICByZXR1cm4gS2V5UGFpci5mcm9tUHJpdmF0ZSh0aGlzLCBwcml2LCBlbmMpO1xufTtcblxuRUMucHJvdG90eXBlLmtleUZyb21QdWJsaWMgPSBmdW5jdGlvbiBrZXlGcm9tUHVibGljKHB1YiwgZW5jKSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21QdWJsaWModGhpcywgcHViLCBlbmMpO1xufTtcblxuRUMucHJvdG90eXBlLmdlbktleVBhaXIgPSBmdW5jdGlvbiBnZW5LZXlQYWlyKG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKVxuICAgIG9wdGlvbnMgPSB7fTtcblxuICAvLyBJbnN0YW50aWF0ZSBIbWFjX0RSQkdcbiAgdmFyIGRyYmcgPSBuZXcgSG1hY0RSQkcoe1xuICAgIGhhc2g6IHRoaXMuaGFzaCxcbiAgICBwZXJzOiBvcHRpb25zLnBlcnMsXG4gICAgcGVyc0VuYzogb3B0aW9ucy5wZXJzRW5jIHx8ICd1dGY4JyxcbiAgICBlbnRyb3B5OiBvcHRpb25zLmVudHJvcHkgfHwgcmFuZCh0aGlzLmhhc2guaG1hY1N0cmVuZ3RoKSxcbiAgICBlbnRyb3B5RW5jOiBvcHRpb25zLmVudHJvcHkgJiYgb3B0aW9ucy5lbnRyb3B5RW5jIHx8ICd1dGY4JyxcbiAgICBub25jZTogdGhpcy5uLnRvQXJyYXkoKVxuICB9KTtcblxuICB2YXIgYnl0ZXMgPSB0aGlzLm4uYnl0ZUxlbmd0aCgpO1xuICB2YXIgbnMyID0gdGhpcy5uLnN1YihuZXcgQk4oMikpO1xuICBkbyB7XG4gICAgdmFyIHByaXYgPSBuZXcgQk4oZHJiZy5nZW5lcmF0ZShieXRlcykpO1xuICAgIGlmIChwcml2LmNtcChuczIpID4gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgcHJpdi5pYWRkbigxKTtcbiAgICByZXR1cm4gdGhpcy5rZXlGcm9tUHJpdmF0ZShwcml2KTtcbiAgfSB3aGlsZSAodHJ1ZSk7XG59O1xuXG5FQy5wcm90b3R5cGUuX3RydW5jYXRlVG9OID0gZnVuY3Rpb24gdHJ1bmNhdGVUb04obXNnLCB0cnVuY09ubHkpIHtcbiAgdmFyIGRlbHRhID0gbXNnLmJ5dGVMZW5ndGgoKSAqIDggLSB0aGlzLm4uYml0TGVuZ3RoKCk7XG4gIGlmIChkZWx0YSA+IDApXG4gICAgbXNnID0gbXNnLnVzaHJuKGRlbHRhKTtcbiAgaWYgKCF0cnVuY09ubHkgJiYgbXNnLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIG1zZy5zdWIodGhpcy5uKTtcbiAgZWxzZVxuICAgIHJldHVybiBtc2c7XG59O1xuXG5FQy5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obXNnLCBrZXksIGVuYywgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIGVuYyA9PT0gJ29iamVjdCcpIHtcbiAgICBvcHRpb25zID0gZW5jO1xuICAgIGVuYyA9IG51bGw7XG4gIH1cbiAgaWYgKCFvcHRpb25zKVxuICAgIG9wdGlvbnMgPSB7fTtcblxuICBrZXkgPSB0aGlzLmtleUZyb21Qcml2YXRlKGtleSwgZW5jKTtcbiAgbXNnID0gdGhpcy5fdHJ1bmNhdGVUb04obmV3IEJOKG1zZywgMTYpKTtcblxuICAvLyBaZXJvLWV4dGVuZCBrZXkgdG8gcHJvdmlkZSBlbm91Z2ggZW50cm9weVxuICB2YXIgYnl0ZXMgPSB0aGlzLm4uYnl0ZUxlbmd0aCgpO1xuICB2YXIgYmtleSA9IGtleS5nZXRQcml2YXRlKCkudG9BcnJheSgnYmUnLCBieXRlcyk7XG5cbiAgLy8gWmVyby1leHRlbmQgbm9uY2UgdG8gaGF2ZSB0aGUgc2FtZSBieXRlIHNpemUgYXMgTlxuICB2YXIgbm9uY2UgPSBtc2cudG9BcnJheSgnYmUnLCBieXRlcyk7XG5cbiAgLy8gSW5zdGFudGlhdGUgSG1hY19EUkJHXG4gIHZhciBkcmJnID0gbmV3IEhtYWNEUkJHKHtcbiAgICBoYXNoOiB0aGlzLmhhc2gsXG4gICAgZW50cm9weTogYmtleSxcbiAgICBub25jZTogbm9uY2UsXG4gICAgcGVyczogb3B0aW9ucy5wZXJzLFxuICAgIHBlcnNFbmM6IG9wdGlvbnMucGVyc0VuYyB8fCAndXRmOCdcbiAgfSk7XG5cbiAgLy8gTnVtYmVyIG9mIGJ5dGVzIHRvIGdlbmVyYXRlXG4gIHZhciBuczEgPSB0aGlzLm4uc3ViKG5ldyBCTigxKSk7XG5cbiAgZm9yICh2YXIgaXRlciA9IDA7IHRydWU7IGl0ZXIrKykge1xuICAgIHZhciBrID0gb3B0aW9ucy5rID9cbiAgICAgICAgb3B0aW9ucy5rKGl0ZXIpIDpcbiAgICAgICAgbmV3IEJOKGRyYmcuZ2VuZXJhdGUodGhpcy5uLmJ5dGVMZW5ndGgoKSkpO1xuICAgIGsgPSB0aGlzLl90cnVuY2F0ZVRvTihrLCB0cnVlKTtcbiAgICBpZiAoay5jbXBuKDEpIDw9IDAgfHwgay5jbXAobnMxKSA+PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIga3AgPSB0aGlzLmcubXVsKGspO1xuICAgIGlmIChrcC5pc0luZmluaXR5KCkpXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBrcFggPSBrcC5nZXRYKCk7XG4gICAgdmFyIHIgPSBrcFgudW1vZCh0aGlzLm4pO1xuICAgIGlmIChyLmNtcG4oMCkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBzID0gay5pbnZtKHRoaXMubikubXVsKHIubXVsKGtleS5nZXRQcml2YXRlKCkpLmlhZGQobXNnKSk7XG4gICAgcyA9IHMudW1vZCh0aGlzLm4pO1xuICAgIGlmIChzLmNtcG4oMCkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciByZWNvdmVyeVBhcmFtID0gKGtwLmdldFkoKS5pc09kZCgpID8gMSA6IDApIHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChrcFguY21wKHIpICE9PSAwID8gMiA6IDApO1xuXG4gICAgLy8gVXNlIGNvbXBsZW1lbnQgb2YgYHNgLCBpZiBpdCBpcyA+IGBuIC8gMmBcbiAgICBpZiAob3B0aW9ucy5jYW5vbmljYWwgJiYgcy5jbXAodGhpcy5uaCkgPiAwKSB7XG4gICAgICBzID0gdGhpcy5uLnN1YihzKTtcbiAgICAgIHJlY292ZXJ5UGFyYW0gXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNpZ25hdHVyZSh7IHI6IHIsIHM6IHMsIHJlY292ZXJ5UGFyYW06IHJlY292ZXJ5UGFyYW0gfSk7XG4gIH1cbn07XG5cbkVDLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobXNnLCBzaWduYXR1cmUsIGtleSwgZW5jKSB7XG4gIG1zZyA9IHRoaXMuX3RydW5jYXRlVG9OKG5ldyBCTihtc2csIDE2KSk7XG4gIGtleSA9IHRoaXMua2V5RnJvbVB1YmxpYyhrZXksIGVuYyk7XG4gIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCAnaGV4Jyk7XG5cbiAgLy8gUGVyZm9ybSBwcmltaXRpdmUgdmFsdWVzIHZhbGlkYXRpb25cbiAgdmFyIHIgPSBzaWduYXR1cmUucjtcbiAgdmFyIHMgPSBzaWduYXR1cmUucztcbiAgaWYgKHIuY21wbigxKSA8IDAgfHwgci5jbXAodGhpcy5uKSA+PSAwKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKHMuY21wbigxKSA8IDAgfHwgcy5jbXAodGhpcy5uKSA+PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBWYWxpZGF0ZSBzaWduYXR1cmVcbiAgdmFyIHNpbnYgPSBzLmludm0odGhpcy5uKTtcbiAgdmFyIHUxID0gc2ludi5tdWwobXNnKS51bW9kKHRoaXMubik7XG4gIHZhciB1MiA9IHNpbnYubXVsKHIpLnVtb2QodGhpcy5uKTtcblxuICBpZiAoIXRoaXMuY3VydmUuX21heHdlbGxUcmljaykge1xuICAgIHZhciBwID0gdGhpcy5nLm11bEFkZCh1MSwga2V5LmdldFB1YmxpYygpLCB1Mik7XG4gICAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIHAuZ2V0WCgpLnVtb2QodGhpcy5uKS5jbXAocikgPT09IDA7XG4gIH1cblxuICAvLyBOT1RFOiBHcmVnIE1heHdlbGwncyB0cmljaywgaW5zcGlyZWQgYnk6XG4gIC8vIGh0dHBzOi8vZ2l0LmlvL3ZhZDNLXG5cbiAgdmFyIHAgPSB0aGlzLmcuam11bEFkZCh1MSwga2V5LmdldFB1YmxpYygpLCB1Mik7XG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gQ29tcGFyZSBgcC54YCBvZiBKYWNvYmlhbiBwb2ludCB3aXRoIGByYCxcbiAgLy8gdGhpcyB3aWxsIGRvIGBwLnggPT0gciAqIHAuel4yYCBpbnN0ZWFkIG9mIG11bHRpcGx5aW5nIGBwLnhgIGJ5IHRoZVxuICAvLyBpbnZlcnNlIG9mIGBwLnpeMmBcbiAgcmV0dXJuIHAuZXFYVG9QKHIpO1xufTtcblxuRUMucHJvdG90eXBlLnJlY292ZXJQdWJLZXkgPSBmdW5jdGlvbihtc2csIHNpZ25hdHVyZSwgaiwgZW5jKSB7XG4gIGFzc2VydCgoMyAmIGopID09PSBqLCAnVGhlIHJlY292ZXJ5IHBhcmFtIGlzIG1vcmUgdGhhbiB0d28gYml0cycpO1xuICBzaWduYXR1cmUgPSBuZXcgU2lnbmF0dXJlKHNpZ25hdHVyZSwgZW5jKTtcblxuICB2YXIgbiA9IHRoaXMubjtcbiAgdmFyIGUgPSBuZXcgQk4obXNnKTtcbiAgdmFyIHIgPSBzaWduYXR1cmUucjtcbiAgdmFyIHMgPSBzaWduYXR1cmUucztcblxuICAvLyBBIHNldCBMU0Igc2lnbmlmaWVzIHRoYXQgdGhlIHktY29vcmRpbmF0ZSBpcyBvZGRcbiAgdmFyIGlzWU9kZCA9IGogJiAxO1xuICB2YXIgaXNTZWNvbmRLZXkgPSBqID4+IDE7XG4gIGlmIChyLmNtcCh0aGlzLmN1cnZlLnAudW1vZCh0aGlzLmN1cnZlLm4pKSA+PSAwICYmIGlzU2Vjb25kS2V5KVxuICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgc2VuY29uZCBrZXkgY2FuZGluYXRlJyk7XG5cbiAgLy8gMS4xLiBMZXQgeCA9IHIgKyBqbi5cbiAgaWYgKGlzU2Vjb25kS2V5KVxuICAgIHIgPSB0aGlzLmN1cnZlLnBvaW50RnJvbVgoci5hZGQodGhpcy5jdXJ2ZS5uKSwgaXNZT2RkKTtcbiAgZWxzZVxuICAgIHIgPSB0aGlzLmN1cnZlLnBvaW50RnJvbVgociwgaXNZT2RkKTtcblxuICB2YXIgckludiA9IHNpZ25hdHVyZS5yLmludm0obik7XG4gIHZhciBzMSA9IG4uc3ViKGUpLm11bChySW52KS51bW9kKG4pO1xuICB2YXIgczIgPSBzLm11bChySW52KS51bW9kKG4pO1xuXG4gIC8vIDEuNi4xIENvbXB1dGUgUSA9IHJeLTEgKHNSIC0gIGVHKVxuICAvLyAgICAgICAgICAgICAgIFEgPSByXi0xIChzUiArIC1lRylcbiAgcmV0dXJuIHRoaXMuZy5tdWxBZGQoczEsIHIsIHMyKTtcbn07XG5cbkVDLnByb3RvdHlwZS5nZXRLZXlSZWNvdmVyeVBhcmFtID0gZnVuY3Rpb24oZSwgc2lnbmF0dXJlLCBRLCBlbmMpIHtcbiAgc2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZShzaWduYXR1cmUsIGVuYyk7XG4gIGlmIChzaWduYXR1cmUucmVjb3ZlcnlQYXJhbSAhPT0gbnVsbClcbiAgICByZXR1cm4gc2lnbmF0dXJlLnJlY292ZXJ5UGFyYW07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICB2YXIgUXByaW1lO1xuICAgIHRyeSB7XG4gICAgICBRcHJpbWUgPSB0aGlzLnJlY292ZXJQdWJLZXkoZSwgc2lnbmF0dXJlLCBpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoUXByaW1lLmVxKFEpKVxuICAgICAgcmV0dXJuIGk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCB2YWxpZCByZWNvdmVyeSBmYWN0b3InKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWNyeXB0by11dGlscycpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gSG1hY0RSQkcob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSG1hY0RSQkcpKVxuICAgIHJldHVybiBuZXcgSG1hY0RSQkcob3B0aW9ucyk7XG4gIHRoaXMuaGFzaCA9IG9wdGlvbnMuaGFzaDtcbiAgdGhpcy5wcmVkUmVzaXN0ID0gISFvcHRpb25zLnByZWRSZXNpc3Q7XG5cbiAgdGhpcy5vdXRMZW4gPSB0aGlzLmhhc2gub3V0U2l6ZTtcbiAgdGhpcy5taW5FbnRyb3B5ID0gb3B0aW9ucy5taW5FbnRyb3B5IHx8IHRoaXMuaGFzaC5obWFjU3RyZW5ndGg7XG5cbiAgdGhpcy5fcmVzZWVkID0gbnVsbDtcbiAgdGhpcy5yZXNlZWRJbnRlcnZhbCA9IG51bGw7XG4gIHRoaXMuSyA9IG51bGw7XG4gIHRoaXMuViA9IG51bGw7XG5cbiAgdmFyIGVudHJvcHkgPSB1dGlscy50b0FycmF5KG9wdGlvbnMuZW50cm9weSwgb3B0aW9ucy5lbnRyb3B5RW5jIHx8ICdoZXgnKTtcbiAgdmFyIG5vbmNlID0gdXRpbHMudG9BcnJheShvcHRpb25zLm5vbmNlLCBvcHRpb25zLm5vbmNlRW5jIHx8ICdoZXgnKTtcbiAgdmFyIHBlcnMgPSB1dGlscy50b0FycmF5KG9wdGlvbnMucGVycywgb3B0aW9ucy5wZXJzRW5jIHx8ICdoZXgnKTtcbiAgYXNzZXJ0KGVudHJvcHkubGVuZ3RoID49ICh0aGlzLm1pbkVudHJvcHkgLyA4KSxcbiAgICAgICAgICdOb3QgZW5vdWdoIGVudHJvcHkuIE1pbmltdW0gaXM6ICcgKyB0aGlzLm1pbkVudHJvcHkgKyAnIGJpdHMnKTtcbiAgdGhpcy5faW5pdChlbnRyb3B5LCBub25jZSwgcGVycyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEhtYWNEUkJHO1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KGVudHJvcHksIG5vbmNlLCBwZXJzKSB7XG4gIHZhciBzZWVkID0gZW50cm9weS5jb25jYXQobm9uY2UpLmNvbmNhdChwZXJzKTtcblxuICB0aGlzLksgPSBuZXcgQXJyYXkodGhpcy5vdXRMZW4gLyA4KTtcbiAgdGhpcy5WID0gbmV3IEFycmF5KHRoaXMub3V0TGVuIC8gOCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5WLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5LW2ldID0gMHgwMDtcbiAgICB0aGlzLlZbaV0gPSAweDAxO1xuICB9XG5cbiAgdGhpcy5fdXBkYXRlKHNlZWQpO1xuICB0aGlzLl9yZXNlZWQgPSAxO1xuICB0aGlzLnJlc2VlZEludGVydmFsID0gMHgxMDAwMDAwMDAwMDAwOyAgLy8gMl40OFxufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLl9obWFjID0gZnVuY3Rpb24gaG1hYygpIHtcbiAgcmV0dXJuIG5ldyBoYXNoLmhtYWModGhpcy5oYXNoLCB0aGlzLkspO1xufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoc2VlZCkge1xuICB2YXIga21hYyA9IHRoaXMuX2htYWMoKVxuICAgICAgICAgICAgICAgICAudXBkYXRlKHRoaXMuVilcbiAgICAgICAgICAgICAgICAgLnVwZGF0ZShbIDB4MDAgXSk7XG4gIGlmIChzZWVkKVxuICAgIGttYWMgPSBrbWFjLnVwZGF0ZShzZWVkKTtcbiAgdGhpcy5LID0ga21hYy5kaWdlc3QoKTtcbiAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO1xuICBpZiAoIXNlZWQpXG4gICAgcmV0dXJuO1xuXG4gIHRoaXMuSyA9IHRoaXMuX2htYWMoKVxuICAgICAgICAgICAgICAgLnVwZGF0ZSh0aGlzLlYpXG4gICAgICAgICAgICAgICAudXBkYXRlKFsgMHgwMSBdKVxuICAgICAgICAgICAgICAgLnVwZGF0ZShzZWVkKVxuICAgICAgICAgICAgICAgLmRpZ2VzdCgpO1xuICB0aGlzLlYgPSB0aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCk7XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUucmVzZWVkID0gZnVuY3Rpb24gcmVzZWVkKGVudHJvcHksIGVudHJvcHlFbmMsIGFkZCwgYWRkRW5jKSB7XG4gIC8vIE9wdGlvbmFsIGVudHJvcHkgZW5jXG4gIGlmICh0eXBlb2YgZW50cm9weUVuYyAhPT0gJ3N0cmluZycpIHtcbiAgICBhZGRFbmMgPSBhZGQ7XG4gICAgYWRkID0gZW50cm9weUVuYztcbiAgICBlbnRyb3B5RW5jID0gbnVsbDtcbiAgfVxuXG4gIGVudHJvcHkgPSB1dGlscy50b0FycmF5KGVudHJvcHksIGVudHJvcHlFbmMpO1xuICBhZGQgPSB1dGlscy50b0FycmF5KGFkZCwgYWRkRW5jKTtcblxuICBhc3NlcnQoZW50cm9weS5sZW5ndGggPj0gKHRoaXMubWluRW50cm9weSAvIDgpLFxuICAgICAgICAgJ05vdCBlbm91Z2ggZW50cm9weS4gTWluaW11bSBpczogJyArIHRoaXMubWluRW50cm9weSArICcgYml0cycpO1xuXG4gIHRoaXMuX3VwZGF0ZShlbnRyb3B5LmNvbmNhdChhZGQgfHwgW10pKTtcbiAgdGhpcy5fcmVzZWVkID0gMTtcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5nZW5lcmF0ZSA9IGZ1bmN0aW9uIGdlbmVyYXRlKGxlbiwgZW5jLCBhZGQsIGFkZEVuYykge1xuICBpZiAodGhpcy5fcmVzZWVkID4gdGhpcy5yZXNlZWRJbnRlcnZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Jlc2VlZCBpcyByZXF1aXJlZCcpO1xuXG4gIC8vIE9wdGlvbmFsIGVuY29kaW5nXG4gIGlmICh0eXBlb2YgZW5jICE9PSAnc3RyaW5nJykge1xuICAgIGFkZEVuYyA9IGFkZDtcbiAgICBhZGQgPSBlbmM7XG4gICAgZW5jID0gbnVsbDtcbiAgfVxuXG4gIC8vIE9wdGlvbmFsIGFkZGl0aW9uYWwgZGF0YVxuICBpZiAoYWRkKSB7XG4gICAgYWRkID0gdXRpbHMudG9BcnJheShhZGQsIGFkZEVuYyB8fCAnaGV4Jyk7XG4gICAgdGhpcy5fdXBkYXRlKGFkZCk7XG4gIH1cblxuICB2YXIgdGVtcCA9IFtdO1xuICB3aGlsZSAodGVtcC5sZW5ndGggPCBsZW4pIHtcbiAgICB0aGlzLlYgPSB0aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCk7XG4gICAgdGVtcCA9IHRlbXAuY29uY2F0KHRoaXMuVik7XG4gIH1cblxuICB2YXIgcmVzID0gdGVtcC5zbGljZSgwLCBsZW4pO1xuICB0aGlzLl91cGRhdGUoYWRkKTtcbiAgdGhpcy5fcmVzZWVkKys7XG4gIHJldHVybiB1dGlscy5lbmNvZGUocmVzLCBlbmMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBLZXlQYWlyKGVjLCBvcHRpb25zKSB7XG4gIHRoaXMuZWMgPSBlYztcbiAgdGhpcy5wcml2ID0gbnVsbDtcbiAgdGhpcy5wdWIgPSBudWxsO1xuXG4gIC8vIEtleVBhaXIoZWMsIHsgcHJpdjogLi4uLCBwdWI6IC4uLiB9KVxuICBpZiAob3B0aW9ucy5wcml2KVxuICAgIHRoaXMuX2ltcG9ydFByaXZhdGUob3B0aW9ucy5wcml2LCBvcHRpb25zLnByaXZFbmMpO1xuICBpZiAob3B0aW9ucy5wdWIpXG4gICAgdGhpcy5faW1wb3J0UHVibGljKG9wdGlvbnMucHViLCBvcHRpb25zLnB1YkVuYyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEtleVBhaXI7XG5cbktleVBhaXIuZnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGZyb21QdWJsaWMoZWMsIHB1YiwgZW5jKSB7XG4gIGlmIChwdWIgaW5zdGFuY2VvZiBLZXlQYWlyKVxuICAgIHJldHVybiBwdWI7XG5cbiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVjLCB7XG4gICAgcHViOiBwdWIsXG4gICAgcHViRW5jOiBlbmNcbiAgfSk7XG59O1xuXG5LZXlQYWlyLmZyb21Qcml2YXRlID0gZnVuY3Rpb24gZnJvbVByaXZhdGUoZWMsIHByaXYsIGVuYykge1xuICBpZiAocHJpdiBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHByaXY7XG5cbiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVjLCB7XG4gICAgcHJpdjogcHJpdixcbiAgICBwcml2RW5jOiBlbmNcbiAgfSk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKCkge1xuICB2YXIgcHViID0gdGhpcy5nZXRQdWJsaWMoKTtcblxuICBpZiAocHViLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlLCByZWFzb246ICdJbnZhbGlkIHB1YmxpYyBrZXknIH07XG4gIGlmICghcHViLnZhbGlkYXRlKCkpXG4gICAgcmV0dXJuIHsgcmVzdWx0OiBmYWxzZSwgcmVhc29uOiAnUHVibGljIGtleSBpcyBub3QgYSBwb2ludCcgfTtcbiAgaWYgKCFwdWIubXVsKHRoaXMuZWMuY3VydmUubikuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB7IHJlc3VsdDogZmFsc2UsIHJlYXNvbjogJ1B1YmxpYyBrZXkgKiBOICE9IE8nIH07XG5cbiAgcmV0dXJuIHsgcmVzdWx0OiB0cnVlLCByZWFzb246IG51bGwgfTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFB1YmxpYyA9IGZ1bmN0aW9uIGdldFB1YmxpYyhjb21wYWN0LCBlbmMpIHtcbiAgLy8gY29tcGFjdCBpcyBvcHRpb25hbCBhcmd1bWVudFxuICBpZiAodHlwZW9mIGNvbXBhY3QgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jID0gY29tcGFjdDtcbiAgICBjb21wYWN0ID0gbnVsbDtcbiAgfVxuXG4gIGlmICghdGhpcy5wdWIpXG4gICAgdGhpcy5wdWIgPSB0aGlzLmVjLmcubXVsKHRoaXMucHJpdik7XG5cbiAgaWYgKCFlbmMpXG4gICAgcmV0dXJuIHRoaXMucHViO1xuXG4gIHJldHVybiB0aGlzLnB1Yi5lbmNvZGUoZW5jLCBjb21wYWN0KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFByaXZhdGUgPSBmdW5jdGlvbiBnZXRQcml2YXRlKGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdGhpcy5wcml2LnRvU3RyaW5nKDE2LCAyKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLnByaXY7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5faW1wb3J0UHJpdmF0ZSA9IGZ1bmN0aW9uIF9pbXBvcnRQcml2YXRlKGtleSwgZW5jKSB7XG4gIHRoaXMucHJpdiA9IG5ldyBCTihrZXksIGVuYyB8fCAxNik7XG5cbiAgLy8gRW5zdXJlIHRoYXQgdGhlIHByaXYgd29uJ3QgYmUgYmlnZ2VyIHRoYW4gbiwgb3RoZXJ3aXNlIHdlIG1heSBmYWlsXG4gIC8vIGluIGZpeGVkIG11bHRpcGxpY2F0aW9uIG1ldGhvZFxuICB0aGlzLnByaXYgPSB0aGlzLnByaXYudW1vZCh0aGlzLmVjLmN1cnZlLm4pO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuX2ltcG9ydFB1YmxpYyA9IGZ1bmN0aW9uIF9pbXBvcnRQdWJsaWMoa2V5LCBlbmMpIHtcbiAgaWYgKGtleS54IHx8IGtleS55KSB7XG4gICAgLy8gTW9udGdvbWVyeSBwb2ludHMgb25seSBoYXZlIGFuIGB4YCBjb29yZGluYXRlLlxuICAgIC8vIFdlaWVyc3RyYXNzL0Vkd2FyZHMgcG9pbnRzIG9uIHRoZSBvdGhlciBoYW5kIGhhdmUgYm90aCBgeGAgYW5kXG4gICAgLy8gYHlgIGNvb3JkaW5hdGVzLlxuICAgIGlmICh0aGlzLmVjLmN1cnZlLnR5cGUgPT09ICdtb250Jykge1xuICAgICAgYXNzZXJ0KGtleS54LCAnTmVlZCB4IGNvb3JkaW5hdGUnKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZWMuY3VydmUudHlwZSA9PT0gJ3Nob3J0JyB8fFxuICAgICAgICAgICAgICAgdGhpcy5lYy5jdXJ2ZS50eXBlID09PSAnZWR3YXJkcycpIHtcbiAgICAgIGFzc2VydChrZXkueCAmJiBrZXkueSwgJ05lZWQgYm90aCB4IGFuZCB5IGNvb3JkaW5hdGUnKTtcbiAgICB9XG4gICAgdGhpcy5wdWIgPSB0aGlzLmVjLmN1cnZlLnBvaW50KGtleS54LCBrZXkueSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucHViID0gdGhpcy5lYy5jdXJ2ZS5kZWNvZGVQb2ludChrZXksIGVuYyk7XG59O1xuXG4vLyBFQ0RIXG5LZXlQYWlyLnByb3RvdHlwZS5kZXJpdmUgPSBmdW5jdGlvbiBkZXJpdmUocHViKSB7XG4gIHJldHVybiBwdWIubXVsKHRoaXMucHJpdikuZ2V0WCgpO1xufTtcblxuLy8gRUNEU0FcbktleVBhaXIucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKG1zZywgZW5jLCBvcHRpb25zKSB7XG4gIHJldHVybiB0aGlzLmVjLnNpZ24obXNnLCB0aGlzLCBlbmMsIG9wdGlvbnMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1zZywgc2lnbmF0dXJlKSB7XG4gIHJldHVybiB0aGlzLmVjLnZlcmlmeShtc2csIHNpZ25hdHVyZSwgdGhpcyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgcmV0dXJuICc8S2V5IHByaXY6ICcgKyAodGhpcy5wcml2ICYmIHRoaXMucHJpdi50b1N0cmluZygxNiwgMikpICtcbiAgICAgICAgICcgcHViOiAnICsgKHRoaXMucHViICYmIHRoaXMucHViLmluc3BlY3QoKSkgKyAnID4nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIFNpZ25hdHVyZShvcHRpb25zLCBlbmMpIHtcbiAgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBTaWduYXR1cmUpXG4gICAgcmV0dXJuIG9wdGlvbnM7XG5cbiAgaWYgKHRoaXMuX2ltcG9ydERFUihvcHRpb25zLCBlbmMpKVxuICAgIHJldHVybjtcblxuICBhc3NlcnQob3B0aW9ucy5yICYmIG9wdGlvbnMucywgJ1NpZ25hdHVyZSB3aXRob3V0IHIgb3IgcycpO1xuICB0aGlzLnIgPSBuZXcgQk4ob3B0aW9ucy5yLCAxNik7XG4gIHRoaXMucyA9IG5ldyBCTihvcHRpb25zLnMsIDE2KTtcbiAgaWYgKG9wdGlvbnMucmVjb3ZlcnlQYXJhbSA9PT0gdW5kZWZpbmVkKVxuICAgIHRoaXMucmVjb3ZlcnlQYXJhbSA9IG51bGw7XG4gIGVsc2VcbiAgICB0aGlzLnJlY292ZXJ5UGFyYW0gPSBvcHRpb25zLnJlY292ZXJ5UGFyYW07XG59XG5tb2R1bGUuZXhwb3J0cyA9IFNpZ25hdHVyZTtcblxuZnVuY3Rpb24gUG9zaXRpb24oKSB7XG4gIHRoaXMucGxhY2UgPSAwO1xufVxuXG5mdW5jdGlvbiBnZXRMZW5ndGgoYnVmLCBwKSB7XG4gIHZhciBpbml0aWFsID0gYnVmW3AucGxhY2UrK107XG4gIGlmICghKGluaXRpYWwgJiAweDgwKSkge1xuICAgIHJldHVybiBpbml0aWFsO1xuICB9XG4gIHZhciBvY3RldExlbiA9IGluaXRpYWwgJiAweGY7XG4gIHZhciB2YWwgPSAwO1xuICBmb3IgKHZhciBpID0gMCwgb2ZmID0gcC5wbGFjZTsgaSA8IG9jdGV0TGVuOyBpKyssIG9mZisrKSB7XG4gICAgdmFsIDw8PSA4O1xuICAgIHZhbCB8PSBidWZbb2ZmXTtcbiAgfVxuICBwLnBsYWNlID0gb2ZmO1xuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBybVBhZGRpbmcoYnVmKSB7XG4gIHZhciBpID0gMDtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGggLSAxO1xuICB3aGlsZSAoIWJ1ZltpXSAmJiAhKGJ1ZltpICsgMV0gJiAweDgwKSAmJiBpIDwgbGVuKSB7XG4gICAgaSsrO1xuICB9XG4gIGlmIChpID09PSAwKSB7XG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuICByZXR1cm4gYnVmLnNsaWNlKGkpO1xufVxuXG5TaWduYXR1cmUucHJvdG90eXBlLl9pbXBvcnRERVIgPSBmdW5jdGlvbiBfaW1wb3J0REVSKGRhdGEsIGVuYykge1xuICBkYXRhID0gdXRpbHMudG9BcnJheShkYXRhLCBlbmMpO1xuICB2YXIgcCA9IG5ldyBQb3NpdGlvbigpO1xuICBpZiAoZGF0YVtwLnBsYWNlKytdICE9PSAweDMwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsZW4gPSBnZXRMZW5ndGgoZGF0YSwgcCk7XG4gIGlmICgobGVuICsgcC5wbGFjZSkgIT09IGRhdGEubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChkYXRhW3AucGxhY2UrK10gIT09IDB4MDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHJsZW4gPSBnZXRMZW5ndGgoZGF0YSwgcCk7XG4gIHZhciByID0gZGF0YS5zbGljZShwLnBsYWNlLCBybGVuICsgcC5wbGFjZSk7XG4gIHAucGxhY2UgKz0gcmxlbjtcbiAgaWYgKGRhdGFbcC5wbGFjZSsrXSAhPT0gMHgwMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgc2xlbiA9IGdldExlbmd0aChkYXRhLCBwKTtcbiAgaWYgKGRhdGEubGVuZ3RoICE9PSBzbGVuICsgcC5wbGFjZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcyA9IGRhdGEuc2xpY2UocC5wbGFjZSwgc2xlbiArIHAucGxhY2UpO1xuICBpZiAoclswXSA9PT0gMCAmJiAoclsxXSAmIDB4ODApKSB7XG4gICAgciA9IHIuc2xpY2UoMSk7XG4gIH1cbiAgaWYgKHNbMF0gPT09IDAgJiYgKHNbMV0gJiAweDgwKSkge1xuICAgIHMgPSBzLnNsaWNlKDEpO1xuICB9XG5cbiAgdGhpcy5yID0gbmV3IEJOKHIpO1xuICB0aGlzLnMgPSBuZXcgQk4ocyk7XG4gIHRoaXMucmVjb3ZlcnlQYXJhbSA9IG51bGw7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBjb25zdHJ1Y3RMZW5ndGgoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA8IDB4ODApIHtcbiAgICBhcnIucHVzaChsZW4pO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgb2N0ZXRzID0gMSArIChNYXRoLmxvZyhsZW4pIC8gTWF0aC5MTjIgPj4+IDMpO1xuICBhcnIucHVzaChvY3RldHMgfCAweDgwKTtcbiAgd2hpbGUgKC0tb2N0ZXRzKSB7XG4gICAgYXJyLnB1c2goKGxlbiA+Pj4gKG9jdGV0cyA8PCAzKSkgJiAweGZmKTtcbiAgfVxuICBhcnIucHVzaChsZW4pO1xufVxuXG5TaWduYXR1cmUucHJvdG90eXBlLnRvREVSID0gZnVuY3Rpb24gdG9ERVIoZW5jKSB7XG4gIHZhciByID0gdGhpcy5yLnRvQXJyYXkoKTtcbiAgdmFyIHMgPSB0aGlzLnMudG9BcnJheSgpO1xuXG4gIC8vIFBhZCB2YWx1ZXNcbiAgaWYgKHJbMF0gJiAweDgwKVxuICAgIHIgPSBbIDAgXS5jb25jYXQocik7XG4gIC8vIFBhZCB2YWx1ZXNcbiAgaWYgKHNbMF0gJiAweDgwKVxuICAgIHMgPSBbIDAgXS5jb25jYXQocyk7XG5cbiAgciA9IHJtUGFkZGluZyhyKTtcbiAgcyA9IHJtUGFkZGluZyhzKTtcblxuICB3aGlsZSAoIXNbMF0gJiYgIShzWzFdICYgMHg4MCkpIHtcbiAgICBzID0gcy5zbGljZSgxKTtcbiAgfVxuICB2YXIgYXJyID0gWyAweDAyIF07XG4gIGNvbnN0cnVjdExlbmd0aChhcnIsIHIubGVuZ3RoKTtcbiAgYXJyID0gYXJyLmNvbmNhdChyKTtcbiAgYXJyLnB1c2goMHgwMik7XG4gIGNvbnN0cnVjdExlbmd0aChhcnIsIHMubGVuZ3RoKTtcbiAgdmFyIGJhY2tIYWxmID0gYXJyLmNvbmNhdChzKTtcbiAgdmFyIHJlcyA9IFsgMHgzMCBdO1xuICBjb25zdHJ1Y3RMZW5ndGgocmVzLCBiYWNrSGFsZi5sZW5ndGgpO1xuICByZXMgPSByZXMuY29uY2F0KGJhY2tIYWxmKTtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZShyZXMsIGVuYyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzaCA9IHJlcXVpcmUoJ2hhc2guanMnKTtcbnZhciBjdXJ2ZXMgPSByZXF1aXJlKCcuLi9jdXJ2ZXMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xudmFyIHBhcnNlQnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzO1xudmFyIEtleVBhaXIgPSByZXF1aXJlKCcuL2tleScpO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4vc2lnbmF0dXJlJyk7XG5cbmZ1bmN0aW9uIEVERFNBKGN1cnZlKSB7XG4gIGFzc2VydChjdXJ2ZSA9PT0gJ2VkMjU1MTknLCAnb25seSB0ZXN0ZWQgd2l0aCBlZDI1NTE5IHNvIGZhcicpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFRERTQSkpXG4gICAgcmV0dXJuIG5ldyBFRERTQShjdXJ2ZSk7XG5cbiAgdmFyIGN1cnZlID0gY3VydmVzW2N1cnZlXS5jdXJ2ZTtcbiAgdGhpcy5jdXJ2ZSA9IGN1cnZlO1xuICB0aGlzLmcgPSBjdXJ2ZS5nO1xuICB0aGlzLmcucHJlY29tcHV0ZShjdXJ2ZS5uLmJpdExlbmd0aCgpICsgMSk7XG5cbiAgdGhpcy5wb2ludENsYXNzID0gY3VydmUucG9pbnQoKS5jb25zdHJ1Y3RvcjtcbiAgdGhpcy5lbmNvZGluZ0xlbmd0aCA9IE1hdGguY2VpbChjdXJ2ZS5uLmJpdExlbmd0aCgpIC8gOCk7XG4gIHRoaXMuaGFzaCA9IGhhc2guc2hhNTEyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVERFNBO1xuXG4vKipcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd9IG1lc3NhZ2UgLSBtZXNzYWdlIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXl8U3RyaW5nfEtleVBhaXJ9IHNlY3JldCAtIHNlY3JldCBieXRlcyBvciBhIGtleXBhaXJcbiogQHJldHVybnMge1NpZ25hdHVyZX0gLSBzaWduYXR1cmVcbiovXG5FRERTQS5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obWVzc2FnZSwgc2VjcmV0KSB7XG4gIG1lc3NhZ2UgPSBwYXJzZUJ5dGVzKG1lc3NhZ2UpO1xuICB2YXIga2V5ID0gdGhpcy5rZXlGcm9tU2VjcmV0KHNlY3JldCk7XG4gIHZhciByID0gdGhpcy5oYXNoSW50KGtleS5tZXNzYWdlUHJlZml4KCksIG1lc3NhZ2UpO1xuICB2YXIgUiA9IHRoaXMuZy5tdWwocik7XG4gIHZhciBSZW5jb2RlZCA9IHRoaXMuZW5jb2RlUG9pbnQoUik7XG4gIHZhciBzXyA9IHRoaXMuaGFzaEludChSZW5jb2RlZCwga2V5LnB1YkJ5dGVzKCksIG1lc3NhZ2UpXG4gICAgICAgICAgICAgICAubXVsKGtleS5wcml2KCkpO1xuICB2YXIgUyA9IHIuYWRkKHNfKS51bW9kKHRoaXMuY3VydmUubik7XG4gIHJldHVybiB0aGlzLm1ha2VTaWduYXR1cmUoeyBSOiBSLCBTOiBTLCBSZW5jb2RlZDogUmVuY29kZWQgfSk7XG59O1xuXG4vKipcbiogQHBhcmFtIHtBcnJheX0gbWVzc2FnZSAtIG1lc3NhZ2UgYnl0ZXNcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd8U2lnbmF0dXJlfSBzaWcgLSBzaWcgYnl0ZXNcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd8UG9pbnR8S2V5UGFpcn0gcHViIC0gcHVibGljIGtleVxuKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSB0cnVlIGlmIHB1YmxpYyBrZXkgbWF0Y2hlcyBzaWcgb2YgbWVzc2FnZVxuKi9cbkVERFNBLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSwgc2lnLCBwdWIpIHtcbiAgbWVzc2FnZSA9IHBhcnNlQnl0ZXMobWVzc2FnZSk7XG4gIHNpZyA9IHRoaXMubWFrZVNpZ25hdHVyZShzaWcpO1xuICB2YXIga2V5ID0gdGhpcy5rZXlGcm9tUHVibGljKHB1Yik7XG4gIHZhciBoID0gdGhpcy5oYXNoSW50KHNpZy5SZW5jb2RlZCgpLCBrZXkucHViQnl0ZXMoKSwgbWVzc2FnZSk7XG4gIHZhciBTRyA9IHRoaXMuZy5tdWwoc2lnLlMoKSk7XG4gIHZhciBScGx1c0FoID0gc2lnLlIoKS5hZGQoa2V5LnB1YigpLm11bChoKSk7XG4gIHJldHVybiBScGx1c0FoLmVxKFNHKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5oYXNoSW50ID0gZnVuY3Rpb24gaGFzaEludCgpIHtcbiAgdmFyIGhhc2ggPSB0aGlzLmhhc2goKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgaGFzaC51cGRhdGUoYXJndW1lbnRzW2ldKTtcbiAgcmV0dXJuIHV0aWxzLmludEZyb21MRShoYXNoLmRpZ2VzdCgpKS51bW9kKHRoaXMuY3VydmUubik7XG59O1xuXG5FRERTQS5wcm90b3R5cGUua2V5RnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGtleUZyb21QdWJsaWMocHViKSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21QdWJsaWModGhpcywgcHViKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5rZXlGcm9tU2VjcmV0ID0gZnVuY3Rpb24ga2V5RnJvbVNlY3JldChzZWNyZXQpIHtcbiAgcmV0dXJuIEtleVBhaXIuZnJvbVNlY3JldCh0aGlzLCBzZWNyZXQpO1xufTtcblxuRUREU0EucHJvdG90eXBlLm1ha2VTaWduYXR1cmUgPSBmdW5jdGlvbiBtYWtlU2lnbmF0dXJlKHNpZykge1xuICBpZiAoc2lnIGluc3RhbmNlb2YgU2lnbmF0dXJlKVxuICAgIHJldHVybiBzaWc7XG4gIHJldHVybiBuZXcgU2lnbmF0dXJlKHRoaXMsIHNpZyk7XG59O1xuXG4vKipcbiogKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtam9zZWZzc29uLWVkZHNhLWVkMjU1MTktMDMjc2VjdGlvbi01LjJcbipcbiogRUREU0EgZGVmaW5lcyBtZXRob2RzIGZvciBlbmNvZGluZyBhbmQgZGVjb2RpbmcgcG9pbnRzIGFuZCBpbnRlZ2Vycy4gVGhlc2UgYXJlXG4qIGhlbHBlciBjb252ZW5pZW5jZSBtZXRob2RzLCB0aGF0IHBhc3MgYWxvbmcgdG8gdXRpbGl0eSBmdW5jdGlvbnMgaW1wbGllZFxuKiBwYXJhbWV0ZXJzLlxuKlxuKi9cbkVERFNBLnByb3RvdHlwZS5lbmNvZGVQb2ludCA9IGZ1bmN0aW9uIGVuY29kZVBvaW50KHBvaW50KSB7XG4gIHZhciBlbmMgPSBwb2ludC5nZXRZKCkudG9BcnJheSgnbGUnLCB0aGlzLmVuY29kaW5nTGVuZ3RoKTtcbiAgZW5jW3RoaXMuZW5jb2RpbmdMZW5ndGggLSAxXSB8PSBwb2ludC5nZXRYKCkuaXNPZGQoKSA/IDB4ODAgOiAwO1xuICByZXR1cm4gZW5jO1xufTtcblxuRUREU0EucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMpIHtcbiAgYnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzKGJ5dGVzKTtcblxuICB2YXIgbGFzdEl4ID0gYnl0ZXMubGVuZ3RoIC0gMTtcbiAgdmFyIG5vcm1lZCA9IGJ5dGVzLnNsaWNlKDAsIGxhc3RJeCkuY29uY2F0KGJ5dGVzW2xhc3RJeF0gJiB+MHg4MCk7XG4gIHZhciB4SXNPZGQgPSAoYnl0ZXNbbGFzdEl4XSAmIDB4ODApICE9PSAwO1xuXG4gIHZhciB5ID0gdXRpbHMuaW50RnJvbUxFKG5vcm1lZCk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50RnJvbVkoeSwgeElzT2RkKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5lbmNvZGVJbnQgPSBmdW5jdGlvbiBlbmNvZGVJbnQobnVtKSB7XG4gIHJldHVybiBudW0udG9BcnJheSgnbGUnLCB0aGlzLmVuY29kaW5nTGVuZ3RoKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5kZWNvZGVJbnQgPSBmdW5jdGlvbiBkZWNvZGVJbnQoYnl0ZXMpIHtcbiAgcmV0dXJuIHV0aWxzLmludEZyb21MRShieXRlcyk7XG59O1xuXG5FRERTQS5wcm90b3R5cGUuaXNQb2ludCA9IGZ1bmN0aW9uIGlzUG9pbnQodmFsKSB7XG4gIHJldHVybiB2YWwgaW5zdGFuY2VvZiB0aGlzLnBvaW50Q2xhc3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcbnZhciBwYXJzZUJ5dGVzID0gdXRpbHMucGFyc2VCeXRlcztcbnZhciBjYWNoZWRQcm9wZXJ0eSA9IHV0aWxzLmNhY2hlZFByb3BlcnR5O1xuXG4vKipcbiogQHBhcmFtIHtFRERTQX0gZWRkc2EgLSBpbnN0YW5jZVxuKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gcHVibGljL3ByaXZhdGUga2V5IHBhcmFtZXRlcnNcbipcbiogQHBhcmFtIHtBcnJheTxCeXRlPn0gW3BhcmFtcy5zZWNyZXRdIC0gc2VjcmV0IHNlZWQgYnl0ZXNcbiogQHBhcmFtIHtQb2ludH0gW3BhcmFtcy5wdWJdIC0gcHVibGljIGtleSBwb2ludCAoYWthIGBBYCBpbiBlZGRzYSB0ZXJtcylcbiogQHBhcmFtIHtBcnJheTxCeXRlPn0gW3BhcmFtcy5wdWJdIC0gcHVibGljIGtleSBwb2ludCBlbmNvZGVkIGFzIGJ5dGVzXG4qXG4qL1xuZnVuY3Rpb24gS2V5UGFpcihlZGRzYSwgcGFyYW1zKSB7XG4gIHRoaXMuZWRkc2EgPSBlZGRzYTtcbiAgdGhpcy5fc2VjcmV0ID0gcGFyc2VCeXRlcyhwYXJhbXMuc2VjcmV0KTtcbiAgaWYgKGVkZHNhLmlzUG9pbnQocGFyYW1zLnB1YikpXG4gICAgdGhpcy5fcHViID0gcGFyYW1zLnB1YjtcbiAgZWxzZVxuICAgIHRoaXMuX3B1YkJ5dGVzID0gcGFyc2VCeXRlcyhwYXJhbXMucHViKTtcbn1cblxuS2V5UGFpci5mcm9tUHVibGljID0gZnVuY3Rpb24gZnJvbVB1YmxpYyhlZGRzYSwgcHViKSB7XG4gIGlmIChwdWIgaW5zdGFuY2VvZiBLZXlQYWlyKVxuICAgIHJldHVybiBwdWI7XG4gIHJldHVybiBuZXcgS2V5UGFpcihlZGRzYSwgeyBwdWI6IHB1YiB9KTtcbn07XG5cbktleVBhaXIuZnJvbVNlY3JldCA9IGZ1bmN0aW9uIGZyb21TZWNyZXQoZWRkc2EsIHNlY3JldCkge1xuICBpZiAoc2VjcmV0IGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gc2VjcmV0O1xuICByZXR1cm4gbmV3IEtleVBhaXIoZWRkc2EsIHsgc2VjcmV0OiBzZWNyZXQgfSk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5zZWNyZXQgPSBmdW5jdGlvbiBzZWNyZXQoKSB7XG4gIHJldHVybiB0aGlzLl9zZWNyZXQ7XG59O1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHViQnl0ZXMnLCBmdW5jdGlvbiBwdWJCeXRlcygpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZW5jb2RlUG9pbnQodGhpcy5wdWIoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ3B1YicsIGZ1bmN0aW9uIHB1YigpIHtcbiAgaWYgKHRoaXMuX3B1YkJ5dGVzKVxuICAgIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZVBvaW50KHRoaXMuX3B1YkJ5dGVzKTtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZy5tdWwodGhpcy5wcml2KCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwcml2Qnl0ZXMnLCBmdW5jdGlvbiBwcml2Qnl0ZXMoKSB7XG4gIHZhciBlZGRzYSA9IHRoaXMuZWRkc2E7XG4gIHZhciBoYXNoID0gdGhpcy5oYXNoKCk7XG4gIHZhciBsYXN0SXggPSBlZGRzYS5lbmNvZGluZ0xlbmd0aCAtIDE7XG5cbiAgdmFyIGEgPSBoYXNoLnNsaWNlKDAsIGVkZHNhLmVuY29kaW5nTGVuZ3RoKTtcbiAgYVswXSAmPSAyNDg7XG4gIGFbbGFzdEl4XSAmPSAxMjc7XG4gIGFbbGFzdEl4XSB8PSA2NDtcblxuICByZXR1cm4gYTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHJpdicsIGZ1bmN0aW9uIHByaXYoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZUludCh0aGlzLnByaXZCeXRlcygpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAnaGFzaCcsIGZ1bmN0aW9uIGhhc2goKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmhhc2goKS51cGRhdGUodGhpcy5zZWNyZXQoKSkuZGlnZXN0KCk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ21lc3NhZ2VQcmVmaXgnLCBmdW5jdGlvbiBtZXNzYWdlUHJlZml4KCkge1xuICByZXR1cm4gdGhpcy5oYXNoKCkuc2xpY2UodGhpcy5lZGRzYS5lbmNvZGluZ0xlbmd0aCk7XG59KTtcblxuS2V5UGFpci5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obWVzc2FnZSkge1xuICBhc3NlcnQodGhpcy5fc2VjcmV0LCAnS2V5UGFpciBjYW4gb25seSB2ZXJpZnknKTtcbiAgcmV0dXJuIHRoaXMuZWRkc2Euc2lnbihtZXNzYWdlLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlLCBzaWcpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EudmVyaWZ5KG1lc3NhZ2UsIHNpZywgdGhpcyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5nZXRTZWNyZXQgPSBmdW5jdGlvbiBnZXRTZWNyZXQoZW5jKSB7XG4gIGFzc2VydCh0aGlzLl9zZWNyZXQsICdLZXlQYWlyIGlzIHB1YmxpYyBvbmx5Jyk7XG4gIHJldHVybiB1dGlscy5lbmNvZGUodGhpcy5zZWNyZXQoKSwgZW5jKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFB1YmxpYyA9IGZ1bmN0aW9uIGdldFB1YmxpYyhlbmMpIHtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLnB1YkJ5dGVzKCksIGVuYyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEtleVBhaXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcbnZhciBjYWNoZWRQcm9wZXJ0eSA9IHV0aWxzLmNhY2hlZFByb3BlcnR5O1xudmFyIHBhcnNlQnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzO1xuXG4vKipcbiogQHBhcmFtIHtFRERTQX0gZWRkc2EgLSBlZGRzYSBpbnN0YW5jZVxuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPnxPYmplY3R9IHNpZyAtXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fFBvaW50fSBbc2lnLlJdIC0gUiBwb2ludCBhcyBQb2ludCBvciBieXRlc1xuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPnxibn0gW3NpZy5TXSAtIFMgc2NhbGFyIGFzIGJuIG9yIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fSBbc2lnLlJlbmNvZGVkXSAtIFIgcG9pbnQgZW5jb2RlZFxuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPn0gW3NpZy5TZW5jb2RlZF0gLSBTIHNjYWxhciBlbmNvZGVkXG4qL1xuZnVuY3Rpb24gU2lnbmF0dXJlKGVkZHNhLCBzaWcpIHtcbiAgdGhpcy5lZGRzYSA9IGVkZHNhO1xuXG4gIGlmICh0eXBlb2Ygc2lnICE9PSAnb2JqZWN0JylcbiAgICBzaWcgPSBwYXJzZUJ5dGVzKHNpZyk7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoc2lnKSkge1xuICAgIHNpZyA9IHtcbiAgICAgIFI6IHNpZy5zbGljZSgwLCBlZGRzYS5lbmNvZGluZ0xlbmd0aCksXG4gICAgICBTOiBzaWcuc2xpY2UoZWRkc2EuZW5jb2RpbmdMZW5ndGgpXG4gICAgfTtcbiAgfVxuXG4gIGFzc2VydChzaWcuUiAmJiBzaWcuUywgJ1NpZ25hdHVyZSB3aXRob3V0IFIgb3IgUycpO1xuXG4gIGlmIChlZGRzYS5pc1BvaW50KHNpZy5SKSlcbiAgICB0aGlzLl9SID0gc2lnLlI7XG4gIGlmIChzaWcuUyBpbnN0YW5jZW9mIEJOKVxuICAgIHRoaXMuX1MgPSBzaWcuUztcblxuICB0aGlzLl9SZW5jb2RlZCA9IEFycmF5LmlzQXJyYXkoc2lnLlIpID8gc2lnLlIgOiBzaWcuUmVuY29kZWQ7XG4gIHRoaXMuX1NlbmNvZGVkID0gQXJyYXkuaXNBcnJheShzaWcuUykgPyBzaWcuUyA6IHNpZy5TZW5jb2RlZDtcbn1cblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnUycsIGZ1bmN0aW9uIFMoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZUludCh0aGlzLlNlbmNvZGVkKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KFNpZ25hdHVyZSwgJ1InLCBmdW5jdGlvbiBSKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5kZWNvZGVQb2ludCh0aGlzLlJlbmNvZGVkKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KFNpZ25hdHVyZSwgJ1JlbmNvZGVkJywgZnVuY3Rpb24gUmVuY29kZWQoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmVuY29kZVBvaW50KHRoaXMuUigpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdTZW5jb2RlZCcsIGZ1bmN0aW9uIFNlbmNvZGVkKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5lbmNvZGVJbnQodGhpcy5TKCkpO1xufSk7XG5cblNpZ25hdHVyZS5wcm90b3R5cGUudG9CeXRlcyA9IGZ1bmN0aW9uIHRvQnl0ZXMoKSB7XG4gIHJldHVybiB0aGlzLlJlbmNvZGVkKCkuY29uY2F0KHRoaXMuU2VuY29kZWQoKSk7XG59O1xuXG5TaWduYXR1cmUucHJvdG90eXBlLnRvSGV4ID0gZnVuY3Rpb24gdG9IZXgoKSB7XG4gIHJldHVybiB1dGlscy5lbmNvZGUodGhpcy50b0J5dGVzKCksICdoZXgnKS50b1VwcGVyQ2FzZSgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaWduYXR1cmU7XG4iLCIvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL2FzbjEuanNcbi8vIEZlZG9yLCB5b3UgYXJlIGFtYXppbmcuXG4ndXNlIHN0cmljdCdcblxudmFyIGFzbjEgPSByZXF1aXJlKCdhc24xLmpzJylcblxuZXhwb3J0cy5jZXJ0aWZpY2F0ZSA9IHJlcXVpcmUoJy4vY2VydGlmaWNhdGUnKVxuXG52YXIgUlNBUHJpdmF0ZUtleSA9IGFzbjEuZGVmaW5lKCdSU0FQcml2YXRlS2V5JywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmludCgpLFxuICAgIHRoaXMua2V5KCdtb2R1bHVzJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3B1YmxpY0V4cG9uZW50JykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaXZhdGVFeHBvbmVudCcpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcmltZTEnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpbWUyJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2V4cG9uZW50MScpLmludCgpLFxuICAgIHRoaXMua2V5KCdleHBvbmVudDInKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnY29lZmZpY2llbnQnKS5pbnQoKVxuICApXG59KVxuZXhwb3J0cy5SU0FQcml2YXRlS2V5ID0gUlNBUHJpdmF0ZUtleVxuXG52YXIgUlNBUHVibGljS2V5ID0gYXNuMS5kZWZpbmUoJ1JTQVB1YmxpY0tleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ21vZHVsdXMnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHVibGljRXhwb25lbnQnKS5pbnQoKVxuICApXG59KVxuZXhwb3J0cy5SU0FQdWJsaWNLZXkgPSBSU0FQdWJsaWNLZXlcblxudmFyIFB1YmxpY0tleSA9IGFzbjEuZGVmaW5lKCdTdWJqZWN0UHVibGljS2V5SW5mbycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFB1YmxpY0tleScpLmJpdHN0cigpXG4gIClcbn0pXG5leHBvcnRzLlB1YmxpY0tleSA9IFB1YmxpY0tleVxuXG52YXIgQWxnb3JpdGhtSWRlbnRpZmllciA9IGFzbjEuZGVmaW5lKCdBbGdvcml0aG1JZGVudGlmaWVyJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykub2JqaWQoKSxcbiAgICB0aGlzLmtleSgnbm9uZScpLm51bGxfKCkub3B0aW9uYWwoKSxcbiAgICB0aGlzLmtleSgnY3VydmUnKS5vYmppZCgpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ3BhcmFtcycpLnNlcSgpLm9iaihcbiAgICAgIHRoaXMua2V5KCdwJykuaW50KCksXG4gICAgICB0aGlzLmtleSgncScpLmludCgpLFxuICAgICAgdGhpcy5rZXkoJ2cnKS5pbnQoKVxuICAgICkub3B0aW9uYWwoKVxuICApXG59KVxuXG52YXIgUHJpdmF0ZUtleUluZm8gPSBhc24xLmRlZmluZSgnUHJpdmF0ZUtleUluZm8nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFByaXZhdGVLZXknKS5vY3RzdHIoKVxuICApXG59KVxuZXhwb3J0cy5Qcml2YXRlS2V5ID0gUHJpdmF0ZUtleUluZm9cbnZhciBFbmNyeXB0ZWRQcml2YXRlS2V5SW5mbyA9IGFzbjEuZGVmaW5lKCdFbmNyeXB0ZWRQcml2YXRlS2V5SW5mbycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnNlcSgpLm9iaihcbiAgICAgIHRoaXMua2V5KCdpZCcpLm9iamlkKCksXG4gICAgICB0aGlzLmtleSgnZGVjcnlwdCcpLnNlcSgpLm9iaihcbiAgICAgICAgdGhpcy5rZXkoJ2tkZScpLnNlcSgpLm9iaihcbiAgICAgICAgICB0aGlzLmtleSgnaWQnKS5vYmppZCgpLFxuICAgICAgICAgIHRoaXMua2V5KCdrZGVwYXJhbXMnKS5zZXEoKS5vYmooXG4gICAgICAgICAgICB0aGlzLmtleSgnc2FsdCcpLm9jdHN0cigpLFxuICAgICAgICAgICAgdGhpcy5rZXkoJ2l0ZXJzJykuaW50KClcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIHRoaXMua2V5KCdjaXBoZXInKS5zZXEoKS5vYmooXG4gICAgICAgICAgdGhpcy5rZXkoJ2FsZ28nKS5vYmppZCgpLFxuICAgICAgICAgIHRoaXMua2V5KCdpdicpLm9jdHN0cigpXG4gICAgICAgIClcbiAgICAgIClcbiAgICApLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHJpdmF0ZUtleScpLm9jdHN0cigpXG4gIClcbn0pXG5cbmV4cG9ydHMuRW5jcnlwdGVkUHJpdmF0ZUtleSA9IEVuY3J5cHRlZFByaXZhdGVLZXlJbmZvXG5cbnZhciBEU0FQcml2YXRlS2V5ID0gYXNuMS5kZWZpbmUoJ0RTQVByaXZhdGVLZXknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3AnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncScpLmludCgpLFxuICAgIHRoaXMua2V5KCdnJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3B1Yl9rZXknKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpdl9rZXknKS5pbnQoKVxuICApXG59KVxuZXhwb3J0cy5EU0FQcml2YXRlS2V5ID0gRFNBUHJpdmF0ZUtleVxuXG5leHBvcnRzLkRTQXBhcmFtID0gYXNuMS5kZWZpbmUoJ0RTQXBhcmFtJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLmludCgpXG59KVxuXG52YXIgRUNQcml2YXRlS2V5ID0gYXNuMS5kZWZpbmUoJ0VDUHJpdmF0ZUtleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpdmF0ZUtleScpLm9jdHN0cigpLFxuICAgIHRoaXMua2V5KCdwYXJhbWV0ZXJzJykub3B0aW9uYWwoKS5leHBsaWNpdCgwKS51c2UoRUNQYXJhbWV0ZXJzKSxcbiAgICB0aGlzLmtleSgncHVibGljS2V5Jykub3B0aW9uYWwoKS5leHBsaWNpdCgxKS5iaXRzdHIoKVxuICApXG59KVxuZXhwb3J0cy5FQ1ByaXZhdGVLZXkgPSBFQ1ByaXZhdGVLZXlcblxudmFyIEVDUGFyYW1ldGVycyA9IGFzbjEuZGVmaW5lKCdFQ1BhcmFtZXRlcnMnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2hvaWNlKHtcbiAgICBuYW1lZEN1cnZlOiB0aGlzLm9iamlkKClcbiAgfSlcbn0pXG5cbmV4cG9ydHMuc2lnbmF0dXJlID0gYXNuMS5kZWZpbmUoJ3NpZ25hdHVyZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3InKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncycpLmludCgpXG4gIClcbn0pXG4iLCJ2YXIgYXNuMSA9IHJlcXVpcmUoJy4uL2FzbjEnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBhcGkgPSBleHBvcnRzO1xuXG5hcGkuZGVmaW5lID0gZnVuY3Rpb24gZGVmaW5lKG5hbWUsIGJvZHkpIHtcbiAgcmV0dXJuIG5ldyBFbnRpdHkobmFtZSwgYm9keSk7XG59O1xuXG5mdW5jdGlvbiBFbnRpdHkobmFtZSwgYm9keSkge1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICB0aGlzLmJvZHkgPSBib2R5O1xuXG4gIHRoaXMuZGVjb2RlcnMgPSB7fTtcbiAgdGhpcy5lbmNvZGVycyA9IHt9O1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5fY3JlYXRlTmFtZWQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZChiYXNlKSB7XG4gIHZhciBuYW1lZDtcbiAgdHJ5IHtcbiAgICBuYW1lZCA9IHJlcXVpcmUoJ3ZtJykucnVuSW5UaGlzQ29udGV4dChcbiAgICAgICcoZnVuY3Rpb24gJyArIHRoaXMubmFtZSArICcoZW50aXR5KSB7XFxuJyArXG4gICAgICAnICB0aGlzLl9pbml0TmFtZWQoZW50aXR5KTtcXG4nICtcbiAgICAgICd9KSdcbiAgICApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbmFtZWQgPSBmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgICB0aGlzLl9pbml0TmFtZWQoZW50aXR5KTtcbiAgICB9O1xuICB9XG4gIGluaGVyaXRzKG5hbWVkLCBiYXNlKTtcbiAgbmFtZWQucHJvdG90eXBlLl9pbml0TmFtZWQgPSBmdW5jdGlvbiBpbml0bmFtZWQoZW50aXR5KSB7XG4gICAgYmFzZS5jYWxsKHRoaXMsIGVudGl0eSk7XG4gIH07XG5cbiAgcmV0dXJuIG5ldyBuYW1lZCh0aGlzKTtcbn07XG5cbkVudGl0eS5wcm90b3R5cGUuX2dldERlY29kZXIgPSBmdW5jdGlvbiBfZ2V0RGVjb2RlcihlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICdkZXInO1xuICAvLyBMYXppbHkgY3JlYXRlIGRlY29kZXJcbiAgaWYgKCF0aGlzLmRlY29kZXJzLmhhc093blByb3BlcnR5KGVuYykpXG4gICAgdGhpcy5kZWNvZGVyc1tlbmNdID0gdGhpcy5fY3JlYXRlTmFtZWQoYXNuMS5kZWNvZGVyc1tlbmNdKTtcbiAgcmV0dXJuIHRoaXMuZGVjb2RlcnNbZW5jXTtcbn07XG5cbkVudGl0eS5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGRhdGEsIGVuYywgb3B0aW9ucykge1xuICByZXR1cm4gdGhpcy5fZ2V0RGVjb2RlcihlbmMpLmRlY29kZShkYXRhLCBvcHRpb25zKTtcbn07XG5cbkVudGl0eS5wcm90b3R5cGUuX2dldEVuY29kZXIgPSBmdW5jdGlvbiBfZ2V0RW5jb2RlcihlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICdkZXInO1xuICAvLyBMYXppbHkgY3JlYXRlIGVuY29kZXJcbiAgaWYgKCF0aGlzLmVuY29kZXJzLmhhc093blByb3BlcnR5KGVuYykpXG4gICAgdGhpcy5lbmNvZGVyc1tlbmNdID0gdGhpcy5fY3JlYXRlTmFtZWQoYXNuMS5lbmNvZGVyc1tlbmNdKTtcbiAgcmV0dXJuIHRoaXMuZW5jb2RlcnNbZW5jXTtcbn07XG5cbkVudGl0eS5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIGVuYywgLyogaW50ZXJuYWwgKi8gcmVwb3J0ZXIpIHtcbiAgcmV0dXJuIHRoaXMuX2dldEVuY29kZXIoZW5jKS5lbmNvZGUoZGF0YSwgcmVwb3J0ZXIpO1xufTtcbiIsInZhciBpbmRleE9mID0gZnVuY3Rpb24gKHhzLCBpdGVtKSB7XG4gICAgaWYgKHhzLmluZGV4T2YpIHJldHVybiB4cy5pbmRleE9mKGl0ZW0pO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoeHNbaV0gPT09IGl0ZW0pIHJldHVybiBpO1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG59O1xudmFyIE9iamVjdF9rZXlzID0gZnVuY3Rpb24gKG9iaikge1xuICAgIGlmIChPYmplY3Qua2V5cykgcmV0dXJuIE9iamVjdC5rZXlzKG9iailcbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHJlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSByZXMucHVzaChrZXkpXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufTtcblxudmFyIGZvckVhY2ggPSBmdW5jdGlvbiAoeHMsIGZuKSB7XG4gICAgaWYgKHhzLmZvckVhY2gpIHJldHVybiB4cy5mb3JFYWNoKGZuKVxuICAgIGVsc2UgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmbih4c1tpXSwgaSwgeHMpO1xuICAgIH1cbn07XG5cbnZhciBkZWZpbmVQcm9wID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ18nLCB7fSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihvYmosIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBuYW1lLCB7XG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIG9ialtuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9O1xuICAgIH1cbn0oKSk7XG5cbnZhciBnbG9iYWxzID0gWydBcnJheScsICdCb29sZWFuJywgJ0RhdGUnLCAnRXJyb3InLCAnRXZhbEVycm9yJywgJ0Z1bmN0aW9uJyxcbidJbmZpbml0eScsICdKU09OJywgJ01hdGgnLCAnTmFOJywgJ051bWJlcicsICdPYmplY3QnLCAnUmFuZ2VFcnJvcicsXG4nUmVmZXJlbmNlRXJyb3InLCAnUmVnRXhwJywgJ1N0cmluZycsICdTeW50YXhFcnJvcicsICdUeXBlRXJyb3InLCAnVVJJRXJyb3InLFxuJ2RlY29kZVVSSScsICdkZWNvZGVVUklDb21wb25lbnQnLCAnZW5jb2RlVVJJJywgJ2VuY29kZVVSSUNvbXBvbmVudCcsICdlc2NhcGUnLFxuJ2V2YWwnLCAnaXNGaW5pdGUnLCAnaXNOYU4nLCAncGFyc2VGbG9hdCcsICdwYXJzZUludCcsICd1bmRlZmluZWQnLCAndW5lc2NhcGUnXTtcblxuZnVuY3Rpb24gQ29udGV4dCgpIHt9XG5Db250ZXh0LnByb3RvdHlwZSA9IHt9O1xuXG52YXIgU2NyaXB0ID0gZXhwb3J0cy5TY3JpcHQgPSBmdW5jdGlvbiBOb2RlU2NyaXB0IChjb2RlKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNjcmlwdCkpIHJldHVybiBuZXcgU2NyaXB0KGNvZGUpO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG59O1xuXG5TY3JpcHQucHJvdG90eXBlLnJ1bkluQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgaWYgKCEoY29udGV4dCBpbnN0YW5jZW9mIENvbnRleHQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJuZWVkcyBhICdjb250ZXh0JyBhcmd1bWVudC5cIik7XG4gICAgfVxuICAgIFxuICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICBpZiAoIWlmcmFtZS5zdHlsZSkgaWZyYW1lLnN0eWxlID0ge307XG4gICAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgIFxuICAgIHZhciB3aW4gPSBpZnJhbWUuY29udGVudFdpbmRvdztcbiAgICB2YXIgd0V2YWwgPSB3aW4uZXZhbCwgd0V4ZWNTY3JpcHQgPSB3aW4uZXhlY1NjcmlwdDtcblxuICAgIGlmICghd0V2YWwgJiYgd0V4ZWNTY3JpcHQpIHtcbiAgICAgICAgLy8gd2luLmV2YWwoKSBtYWdpY2FsbHkgYXBwZWFycyB3aGVuIHRoaXMgaXMgY2FsbGVkIGluIElFOlxuICAgICAgICB3RXhlY1NjcmlwdC5jYWxsKHdpbiwgJ251bGwnKTtcbiAgICAgICAgd0V2YWwgPSB3aW4uZXZhbDtcbiAgICB9XG4gICAgXG4gICAgZm9yRWFjaChPYmplY3Rfa2V5cyhjb250ZXh0KSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB3aW5ba2V5XSA9IGNvbnRleHRba2V5XTtcbiAgICB9KTtcbiAgICBmb3JFYWNoKGdsb2JhbHMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKGNvbnRleHRba2V5XSkge1xuICAgICAgICAgICAgd2luW2tleV0gPSBjb250ZXh0W2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICB2YXIgd2luS2V5cyA9IE9iamVjdF9rZXlzKHdpbik7XG5cbiAgICB2YXIgcmVzID0gd0V2YWwuY2FsbCh3aW4sIHRoaXMuY29kZSk7XG4gICAgXG4gICAgZm9yRWFjaChPYmplY3Rfa2V5cyh3aW4pLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8vIEF2b2lkIGNvcHlpbmcgY2lyY3VsYXIgb2JqZWN0cyBsaWtlIGB0b3BgIGFuZCBgd2luZG93YCBieSBvbmx5XG4gICAgICAgIC8vIHVwZGF0aW5nIGV4aXN0aW5nIGNvbnRleHQgcHJvcGVydGllcyBvciBuZXcgcHJvcGVydGllcyBpbiB0aGUgYHdpbmBcbiAgICAgICAgLy8gdGhhdCB3YXMgb25seSBpbnRyb2R1Y2VkIGFmdGVyIHRoZSBldmFsLlxuICAgICAgICBpZiAoa2V5IGluIGNvbnRleHQgfHwgaW5kZXhPZih3aW5LZXlzLCBrZXkpID09PSAtMSkge1xuICAgICAgICAgICAgY29udGV4dFtrZXldID0gd2luW2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGZvckVhY2goZ2xvYmFscywgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gY29udGV4dCkpIHtcbiAgICAgICAgICAgIGRlZmluZVByb3AoY29udGV4dCwga2V5LCB3aW5ba2V5XSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgXG4gICAgcmV0dXJuIHJlcztcbn07XG5cblNjcmlwdC5wcm90b3R5cGUucnVuSW5UaGlzQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZXZhbCh0aGlzLmNvZGUpOyAvLyBtYXliZS4uLlxufTtcblxuU2NyaXB0LnByb3RvdHlwZS5ydW5Jbk5ld0NvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHZhciBjdHggPSBTY3JpcHQuY3JlYXRlQ29udGV4dChjb250ZXh0KTtcbiAgICB2YXIgcmVzID0gdGhpcy5ydW5JbkNvbnRleHQoY3R4KTtcblxuICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgIGZvckVhY2goT2JqZWN0X2tleXMoY3R4KSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgY29udGV4dFtrZXldID0gY3R4W2tleV07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG59O1xuXG5mb3JFYWNoKE9iamVjdF9rZXlzKFNjcmlwdC5wcm90b3R5cGUpLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIGV4cG9ydHNbbmFtZV0gPSBTY3JpcHRbbmFtZV0gPSBmdW5jdGlvbiAoY29kZSkge1xuICAgICAgICB2YXIgcyA9IFNjcmlwdChjb2RlKTtcbiAgICAgICAgcmV0dXJuIHNbbmFtZV0uYXBwbHkocywgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICB9O1xufSk7XG5cbmV4cG9ydHMuaXNDb250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICByZXR1cm4gY29udGV4dCBpbnN0YW5jZW9mIENvbnRleHQ7XG59O1xuXG5leHBvcnRzLmNyZWF0ZVNjcmlwdCA9IGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuU2NyaXB0KGNvZGUpO1xufTtcblxuZXhwb3J0cy5jcmVhdGVDb250ZXh0ID0gU2NyaXB0LmNyZWF0ZUNvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHZhciBjb3B5ID0gbmV3IENvbnRleHQoKTtcbiAgICBpZih0eXBlb2YgY29udGV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yRWFjaChPYmplY3Rfa2V5cyhjb250ZXh0KSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgY29weVtrZXldID0gY29udGV4dFtrZXldO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvcHk7XG59O1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZnVuY3Rpb24gUmVwb3J0ZXIob3B0aW9ucykge1xuICB0aGlzLl9yZXBvcnRlclN0YXRlID0ge1xuICAgIG9iajogbnVsbCxcbiAgICBwYXRoOiBbXSxcbiAgICBvcHRpb25zOiBvcHRpb25zIHx8IHt9LFxuICAgIGVycm9yczogW11cbiAgfTtcbn1cbmV4cG9ydHMuUmVwb3J0ZXIgPSBSZXBvcnRlcjtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmlzRXJyb3IgPSBmdW5jdGlvbiBpc0Vycm9yKG9iaikge1xuICByZXR1cm4gb2JqIGluc3RhbmNlb2YgUmVwb3J0ZXJFcnJvcjtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gc2F2ZSgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICByZXR1cm4geyBvYmo6IHN0YXRlLm9iaiwgcGF0aExlbjogc3RhdGUucGF0aC5sZW5ndGggfTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24gcmVzdG9yZShkYXRhKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgc3RhdGUub2JqID0gZGF0YS5vYmo7XG4gIHN0YXRlLnBhdGggPSBzdGF0ZS5wYXRoLnNsaWNlKDAsIGRhdGEucGF0aExlbik7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuZW50ZXJLZXkgPSBmdW5jdGlvbiBlbnRlcktleShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX3JlcG9ydGVyU3RhdGUucGF0aC5wdXNoKGtleSk7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuZXhpdEtleSA9IGZ1bmN0aW9uIGV4aXRLZXkoaW5kZXgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICBzdGF0ZS5wYXRoID0gc3RhdGUucGF0aC5zbGljZSgwLCBpbmRleCAtIDEpO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmxlYXZlS2V5ID0gZnVuY3Rpb24gbGVhdmVLZXkoaW5kZXgsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICB0aGlzLmV4aXRLZXkoaW5kZXgpO1xuICBpZiAoc3RhdGUub2JqICE9PSBudWxsKVxuICAgIHN0YXRlLm9ialtrZXldID0gdmFsdWU7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUucGF0aCA9IGZ1bmN0aW9uIHBhdGgoKSB7XG4gIHJldHVybiB0aGlzLl9yZXBvcnRlclN0YXRlLnBhdGguam9pbignLycpO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmVudGVyT2JqZWN0ID0gZnVuY3Rpb24gZW50ZXJPYmplY3QoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgdmFyIHByZXYgPSBzdGF0ZS5vYmo7XG4gIHN0YXRlLm9iaiA9IHt9O1xuICByZXR1cm4gcHJldjtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5sZWF2ZU9iamVjdCA9IGZ1bmN0aW9uIGxlYXZlT2JqZWN0KHByZXYpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICB2YXIgbm93ID0gc3RhdGUub2JqO1xuICBzdGF0ZS5vYmogPSBwcmV2O1xuICByZXR1cm4gbm93O1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gZXJyb3IobXNnKSB7XG4gIHZhciBlcnI7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgdmFyIGluaGVyaXRlZCA9IG1zZyBpbnN0YW5jZW9mIFJlcG9ydGVyRXJyb3I7XG4gIGlmIChpbmhlcml0ZWQpIHtcbiAgICBlcnIgPSBtc2c7XG4gIH0gZWxzZSB7XG4gICAgZXJyID0gbmV3IFJlcG9ydGVyRXJyb3Ioc3RhdGUucGF0aC5tYXAoZnVuY3Rpb24oZWxlbSkge1xuICAgICAgcmV0dXJuICdbJyArIEpTT04uc3RyaW5naWZ5KGVsZW0pICsgJ10nO1xuICAgIH0pLmpvaW4oJycpLCBtc2cubWVzc2FnZSB8fCBtc2csIG1zZy5zdGFjayk7XG4gIH1cblxuICBpZiAoIXN0YXRlLm9wdGlvbnMucGFydGlhbClcbiAgICB0aHJvdyBlcnI7XG5cbiAgaWYgKCFpbmhlcml0ZWQpXG4gICAgc3RhdGUuZXJyb3JzLnB1c2goZXJyKTtcblxuICByZXR1cm4gZXJyO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLndyYXBSZXN1bHQgPSBmdW5jdGlvbiB3cmFwUmVzdWx0KHJlc3VsdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuICBpZiAoIXN0YXRlLm9wdGlvbnMucGFydGlhbClcbiAgICByZXR1cm4gcmVzdWx0O1xuXG4gIHJldHVybiB7XG4gICAgcmVzdWx0OiB0aGlzLmlzRXJyb3IocmVzdWx0KSA/IG51bGwgOiByZXN1bHQsXG4gICAgZXJyb3JzOiBzdGF0ZS5lcnJvcnNcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIFJlcG9ydGVyRXJyb3IocGF0aCwgbXNnKSB7XG4gIHRoaXMucGF0aCA9IHBhdGg7XG4gIHRoaXMucmV0aHJvdyhtc2cpO1xufTtcbmluaGVyaXRzKFJlcG9ydGVyRXJyb3IsIEVycm9yKTtcblxuUmVwb3J0ZXJFcnJvci5wcm90b3R5cGUucmV0aHJvdyA9IGZ1bmN0aW9uIHJldGhyb3cobXNnKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1zZyArICcgYXQ6ICcgKyAodGhpcy5wYXRoIHx8ICcoc2hhbGxvdyknKTtcbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKVxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIFJlcG9ydGVyRXJyb3IpO1xuXG4gIGlmICghdGhpcy5zdGFjaykge1xuICAgIHRyeSB7XG4gICAgICAvLyBJRSBvbmx5IGFkZHMgc3RhY2sgd2hlbiB0aHJvd25cbiAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLm1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMuc3RhY2sgPSBlLnN0YWNrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG4iLCJ2YXIgUmVwb3J0ZXIgPSByZXF1aXJlKCcuLi9iYXNlJykuUmVwb3J0ZXI7XG52YXIgRW5jb2RlckJ1ZmZlciA9IHJlcXVpcmUoJy4uL2Jhc2UnKS5FbmNvZGVyQnVmZmVyO1xudmFyIERlY29kZXJCdWZmZXIgPSByZXF1aXJlKCcuLi9iYXNlJykuRGVjb2RlckJ1ZmZlcjtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbi8vIFN1cHBvcnRlZCB0YWdzXG52YXIgdGFncyA9IFtcbiAgJ3NlcScsICdzZXFvZicsICdzZXQnLCAnc2V0b2YnLCAnb2JqaWQnLCAnYm9vbCcsXG4gICdnZW50aW1lJywgJ3V0Y3RpbWUnLCAnbnVsbF8nLCAnZW51bScsICdpbnQnLCAnb2JqRGVzYycsXG4gICdiaXRzdHInLCAnYm1wc3RyJywgJ2NoYXJzdHInLCAnZ2Vuc3RyJywgJ2dyYXBoc3RyJywgJ2lhNXN0cicsICdpc282NDZzdHInLFxuICAnbnVtc3RyJywgJ29jdHN0cicsICdwcmludHN0cicsICd0NjFzdHInLCAndW5pc3RyJywgJ3V0ZjhzdHInLCAndmlkZW9zdHInXG5dO1xuXG4vLyBQdWJsaWMgbWV0aG9kcyBsaXN0XG52YXIgbWV0aG9kcyA9IFtcbiAgJ2tleScsICdvYmonLCAndXNlJywgJ29wdGlvbmFsJywgJ2V4cGxpY2l0JywgJ2ltcGxpY2l0JywgJ2RlZicsICdjaG9pY2UnLFxuICAnYW55JywgJ2NvbnRhaW5zJ1xuXS5jb25jYXQodGFncyk7XG5cbi8vIE92ZXJyaWRlZCBtZXRob2RzIGxpc3RcbnZhciBvdmVycmlkZWQgPSBbXG4gICdfcGVla1RhZycsICdfZGVjb2RlVGFnJywgJ191c2UnLFxuICAnX2RlY29kZVN0cicsICdfZGVjb2RlT2JqaWQnLCAnX2RlY29kZVRpbWUnLFxuICAnX2RlY29kZU51bGwnLCAnX2RlY29kZUludCcsICdfZGVjb2RlQm9vbCcsICdfZGVjb2RlTGlzdCcsXG5cbiAgJ19lbmNvZGVDb21wb3NpdGUnLCAnX2VuY29kZVN0cicsICdfZW5jb2RlT2JqaWQnLCAnX2VuY29kZVRpbWUnLFxuICAnX2VuY29kZU51bGwnLCAnX2VuY29kZUludCcsICdfZW5jb2RlQm9vbCdcbl07XG5cbmZ1bmN0aW9uIE5vZGUoZW5jLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0ge307XG4gIHRoaXMuX2Jhc2VTdGF0ZSA9IHN0YXRlO1xuXG4gIHN0YXRlLmVuYyA9IGVuYztcblxuICBzdGF0ZS5wYXJlbnQgPSBwYXJlbnQgfHwgbnVsbDtcbiAgc3RhdGUuY2hpbGRyZW4gPSBudWxsO1xuXG4gIC8vIFN0YXRlXG4gIHN0YXRlLnRhZyA9IG51bGw7XG4gIHN0YXRlLmFyZ3MgPSBudWxsO1xuICBzdGF0ZS5yZXZlcnNlQXJncyA9IG51bGw7XG4gIHN0YXRlLmNob2ljZSA9IG51bGw7XG4gIHN0YXRlLm9wdGlvbmFsID0gZmFsc2U7XG4gIHN0YXRlLmFueSA9IGZhbHNlO1xuICBzdGF0ZS5vYmogPSBmYWxzZTtcbiAgc3RhdGUudXNlID0gbnVsbDtcbiAgc3RhdGUudXNlRGVjb2RlciA9IG51bGw7XG4gIHN0YXRlLmtleSA9IG51bGw7XG4gIHN0YXRlWydkZWZhdWx0J10gPSBudWxsO1xuICBzdGF0ZS5leHBsaWNpdCA9IG51bGw7XG4gIHN0YXRlLmltcGxpY2l0ID0gbnVsbDtcbiAgc3RhdGUuY29udGFpbnMgPSBudWxsO1xuXG4gIC8vIFNob3VsZCBjcmVhdGUgbmV3IGluc3RhbmNlIG9uIGVhY2ggbWV0aG9kXG4gIGlmICghc3RhdGUucGFyZW50KSB7XG4gICAgc3RhdGUuY2hpbGRyZW4gPSBbXTtcbiAgICB0aGlzLl93cmFwKCk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gTm9kZTtcblxudmFyIHN0YXRlUHJvcHMgPSBbXG4gICdlbmMnLCAncGFyZW50JywgJ2NoaWxkcmVuJywgJ3RhZycsICdhcmdzJywgJ3JldmVyc2VBcmdzJywgJ2Nob2ljZScsXG4gICdvcHRpb25hbCcsICdhbnknLCAnb2JqJywgJ3VzZScsICdhbHRlcmVkVXNlJywgJ2tleScsICdkZWZhdWx0JywgJ2V4cGxpY2l0JyxcbiAgJ2ltcGxpY2l0JywgJ2NvbnRhaW5zJ1xuXTtcblxuTm9kZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICB2YXIgY3N0YXRlID0ge307XG4gIHN0YXRlUHJvcHMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgY3N0YXRlW3Byb3BdID0gc3RhdGVbcHJvcF07XG4gIH0pO1xuICB2YXIgcmVzID0gbmV3IHRoaXMuY29uc3RydWN0b3IoY3N0YXRlLnBhcmVudCk7XG4gIHJlcy5fYmFzZVN0YXRlID0gY3N0YXRlO1xuICByZXR1cm4gcmVzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX3dyYXAgPSBmdW5jdGlvbiB3cmFwKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICB0aGlzW21ldGhvZF0gPSBmdW5jdGlvbiBfd3JhcHBlZE1ldGhvZCgpIHtcbiAgICAgIHZhciBjbG9uZSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpO1xuICAgICAgc3RhdGUuY2hpbGRyZW4ucHVzaChjbG9uZSk7XG4gICAgICByZXR1cm4gY2xvbmVbbWV0aG9kXS5hcHBseShjbG9uZSwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9LCB0aGlzKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdChib2R5KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUucGFyZW50ID09PSBudWxsKTtcbiAgYm9keS5jYWxsKHRoaXMpO1xuXG4gIC8vIEZpbHRlciBjaGlsZHJlblxuICBzdGF0ZS5jaGlsZHJlbiA9IHN0YXRlLmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbihjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZC5fYmFzZVN0YXRlLnBhcmVudCA9PT0gdGhpcztcbiAgfSwgdGhpcyk7XG4gIGFzc2VydC5lcXVhbChzdGF0ZS5jaGlsZHJlbi5sZW5ndGgsIDEsICdSb290IG5vZGUgY2FuIGhhdmUgb25seSBvbmUgY2hpbGQnKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl91c2VBcmdzID0gZnVuY3Rpb24gdXNlQXJncyhhcmdzKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAvLyBGaWx0ZXIgY2hpbGRyZW4gYW5kIGFyZ3NcbiAgdmFyIGNoaWxkcmVuID0gYXJncy5maWx0ZXIoZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3I7XG4gIH0sIHRoaXMpO1xuICBhcmdzID0gYXJncy5maWx0ZXIoZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuICEoYXJnIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0sIHRoaXMpO1xuXG4gIGlmIChjaGlsZHJlbi5sZW5ndGggIT09IDApIHtcbiAgICBhc3NlcnQoc3RhdGUuY2hpbGRyZW4gPT09IG51bGwpO1xuICAgIHN0YXRlLmNoaWxkcmVuID0gY2hpbGRyZW47XG5cbiAgICAvLyBSZXBsYWNlIHBhcmVudCB0byBtYWludGFpbiBiYWNrd2FyZCBsaW5rXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgY2hpbGQuX2Jhc2VTdGF0ZS5wYXJlbnQgPSB0aGlzO1xuICAgIH0sIHRoaXMpO1xuICB9XG4gIGlmIChhcmdzLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzc2VydChzdGF0ZS5hcmdzID09PSBudWxsKTtcbiAgICBzdGF0ZS5hcmdzID0gYXJncztcbiAgICBzdGF0ZS5yZXZlcnNlQXJncyA9IGFyZ3MubWFwKGZ1bmN0aW9uKGFyZykge1xuICAgICAgaWYgKHR5cGVvZiBhcmcgIT09ICdvYmplY3QnIHx8IGFyZy5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0KVxuICAgICAgICByZXR1cm4gYXJnO1xuXG4gICAgICB2YXIgcmVzID0ge307XG4gICAgICBPYmplY3Qua2V5cyhhcmcpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChrZXkgPT0gKGtleSB8IDApKVxuICAgICAgICAgIGtleSB8PSAwO1xuICAgICAgICB2YXIgdmFsdWUgPSBhcmdba2V5XTtcbiAgICAgICAgcmVzW3ZhbHVlXSA9IGtleTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9KTtcbiAgfVxufTtcblxuLy9cbi8vIE92ZXJyaWRlZCBtZXRob2RzXG4vL1xuXG5vdmVycmlkZWQuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgTm9kZS5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uIF9vdmVycmlkZWQoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAgIHRocm93IG5ldyBFcnJvcihtZXRob2QgKyAnIG5vdCBpbXBsZW1lbnRlZCBmb3IgZW5jb2Rpbmc6ICcgKyBzdGF0ZS5lbmMpO1xuICB9O1xufSk7XG5cbi8vXG4vLyBQdWJsaWMgbWV0aG9kc1xuLy9cblxudGFncy5mb3JFYWNoKGZ1bmN0aW9uKHRhZykge1xuICBOb2RlLnByb3RvdHlwZVt0YWddID0gZnVuY3Rpb24gX3RhZ01ldGhvZCgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgYXNzZXJ0KHN0YXRlLnRhZyA9PT0gbnVsbCk7XG4gICAgc3RhdGUudGFnID0gdGFnO1xuXG4gICAgdGhpcy5fdXNlQXJncyhhcmdzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xufSk7XG5cbk5vZGUucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShpdGVtKSB7XG4gIGFzc2VydChpdGVtKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS51c2UgPT09IG51bGwpO1xuICBzdGF0ZS51c2UgPSBpdGVtO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUub3B0aW9uYWwgPSBmdW5jdGlvbiBvcHRpb25hbCgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIHN0YXRlLm9wdGlvbmFsID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmRlZiA9IGZ1bmN0aW9uIGRlZih2YWwpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZVsnZGVmYXVsdCddID09PSBudWxsKTtcbiAgc3RhdGVbJ2RlZmF1bHQnXSA9IHZhbDtcbiAgc3RhdGUub3B0aW9uYWwgPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuZXhwbGljaXQgPSBmdW5jdGlvbiBleHBsaWNpdChudW0pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5leHBsaWNpdCA9PT0gbnVsbCAmJiBzdGF0ZS5pbXBsaWNpdCA9PT0gbnVsbCk7XG4gIHN0YXRlLmV4cGxpY2l0ID0gbnVtO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuaW1wbGljaXQgPSBmdW5jdGlvbiBpbXBsaWNpdChudW0pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5leHBsaWNpdCA9PT0gbnVsbCAmJiBzdGF0ZS5pbXBsaWNpdCA9PT0gbnVsbCk7XG4gIHN0YXRlLmltcGxpY2l0ID0gbnVtO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUub2JqID0gZnVuY3Rpb24gb2JqKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblxuICBzdGF0ZS5vYmogPSB0cnVlO1xuXG4gIGlmIChhcmdzLmxlbmd0aCAhPT0gMClcbiAgICB0aGlzLl91c2VBcmdzKGFyZ3MpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUua2V5ID0gZnVuY3Rpb24ga2V5KG5ld0tleSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLmtleSA9PT0gbnVsbCk7XG4gIHN0YXRlLmtleSA9IG5ld0tleTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmFueSA9IGZ1bmN0aW9uIGFueSgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIHN0YXRlLmFueSA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5jaG9pY2UgPSBmdW5jdGlvbiBjaG9pY2Uob2JqKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUuY2hvaWNlID09PSBudWxsKTtcbiAgc3RhdGUuY2hvaWNlID0gb2JqO1xuICB0aGlzLl91c2VBcmdzKE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfSkpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiBjb250YWlucyhpdGVtKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUudXNlID09PSBudWxsKTtcbiAgc3RhdGUuY29udGFpbnMgPSBpdGVtO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIERlY29kaW5nXG4vL1xuXG5Ob2RlLnByb3RvdHlwZS5fZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAvLyBEZWNvZGUgcm9vdCBub2RlXG4gIGlmIChzdGF0ZS5wYXJlbnQgPT09IG51bGwpXG4gICAgcmV0dXJuIGlucHV0LndyYXBSZXN1bHQoc3RhdGUuY2hpbGRyZW5bMF0uX2RlY29kZShpbnB1dCwgb3B0aW9ucykpO1xuXG4gIHZhciByZXN1bHQgPSBzdGF0ZVsnZGVmYXVsdCddO1xuICB2YXIgcHJlc2VudCA9IHRydWU7XG5cbiAgdmFyIHByZXZLZXkgPSBudWxsO1xuICBpZiAoc3RhdGUua2V5ICE9PSBudWxsKVxuICAgIHByZXZLZXkgPSBpbnB1dC5lbnRlcktleShzdGF0ZS5rZXkpO1xuXG4gIC8vIENoZWNrIGlmIHRhZyBpcyB0aGVyZVxuICBpZiAoc3RhdGUub3B0aW9uYWwpIHtcbiAgICB2YXIgdGFnID0gbnVsbDtcbiAgICBpZiAoc3RhdGUuZXhwbGljaXQgIT09IG51bGwpXG4gICAgICB0YWcgPSBzdGF0ZS5leHBsaWNpdDtcbiAgICBlbHNlIGlmIChzdGF0ZS5pbXBsaWNpdCAhPT0gbnVsbClcbiAgICAgIHRhZyA9IHN0YXRlLmltcGxpY2l0O1xuICAgIGVsc2UgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbClcbiAgICAgIHRhZyA9IHN0YXRlLnRhZztcblxuICAgIGlmICh0YWcgPT09IG51bGwgJiYgIXN0YXRlLmFueSkge1xuICAgICAgLy8gVHJpYWwgYW5kIEVycm9yXG4gICAgICB2YXIgc2F2ZSA9IGlucHV0LnNhdmUoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChzdGF0ZS5jaG9pY2UgPT09IG51bGwpXG4gICAgICAgICAgdGhpcy5fZGVjb2RlR2VuZXJpYyhzdGF0ZS50YWcsIGlucHV0LCBvcHRpb25zKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHRoaXMuX2RlY29kZUNob2ljZShpbnB1dCwgb3B0aW9ucyk7XG4gICAgICAgIHByZXNlbnQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBwcmVzZW50ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpbnB1dC5yZXN0b3JlKHNhdmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmVzZW50ID0gdGhpcy5fcGVla1RhZyhpbnB1dCwgdGFnLCBzdGF0ZS5hbnkpO1xuXG4gICAgICBpZiAoaW5wdXQuaXNFcnJvcihwcmVzZW50KSlcbiAgICAgICAgcmV0dXJuIHByZXNlbnQ7XG4gICAgfVxuICB9XG5cbiAgLy8gUHVzaCBvYmplY3Qgb24gc3RhY2tcbiAgdmFyIHByZXZPYmo7XG4gIGlmIChzdGF0ZS5vYmogJiYgcHJlc2VudClcbiAgICBwcmV2T2JqID0gaW5wdXQuZW50ZXJPYmplY3QoKTtcblxuICBpZiAocHJlc2VudCkge1xuICAgIC8vIFVud3JhcCBleHBsaWNpdCB2YWx1ZXNcbiAgICBpZiAoc3RhdGUuZXhwbGljaXQgIT09IG51bGwpIHtcbiAgICAgIHZhciBleHBsaWNpdCA9IHRoaXMuX2RlY29kZVRhZyhpbnB1dCwgc3RhdGUuZXhwbGljaXQpO1xuICAgICAgaWYgKGlucHV0LmlzRXJyb3IoZXhwbGljaXQpKVxuICAgICAgICByZXR1cm4gZXhwbGljaXQ7XG4gICAgICBpbnB1dCA9IGV4cGxpY2l0O1xuICAgIH1cblxuICAgIHZhciBzdGFydCA9IGlucHV0Lm9mZnNldDtcblxuICAgIC8vIFVud3JhcCBpbXBsaWNpdCBhbmQgbm9ybWFsIHZhbHVlc1xuICAgIGlmIChzdGF0ZS51c2UgPT09IG51bGwgJiYgc3RhdGUuY2hvaWNlID09PSBudWxsKSB7XG4gICAgICBpZiAoc3RhdGUuYW55KVxuICAgICAgICB2YXIgc2F2ZSA9IGlucHV0LnNhdmUoKTtcbiAgICAgIHZhciBib2R5ID0gdGhpcy5fZGVjb2RlVGFnKFxuICAgICAgICBpbnB1dCxcbiAgICAgICAgc3RhdGUuaW1wbGljaXQgIT09IG51bGwgPyBzdGF0ZS5pbXBsaWNpdCA6IHN0YXRlLnRhZyxcbiAgICAgICAgc3RhdGUuYW55XG4gICAgICApO1xuICAgICAgaWYgKGlucHV0LmlzRXJyb3IoYm9keSkpXG4gICAgICAgIHJldHVybiBib2R5O1xuXG4gICAgICBpZiAoc3RhdGUuYW55KVxuICAgICAgICByZXN1bHQgPSBpbnB1dC5yYXcoc2F2ZSk7XG4gICAgICBlbHNlXG4gICAgICAgIGlucHV0ID0gYm9keTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRyYWNrICYmIHN0YXRlLnRhZyAhPT0gbnVsbClcbiAgICAgIG9wdGlvbnMudHJhY2soaW5wdXQucGF0aCgpLCBzdGFydCwgaW5wdXQubGVuZ3RoLCAndGFnZ2VkJyk7XG5cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRyYWNrICYmIHN0YXRlLnRhZyAhPT0gbnVsbClcbiAgICAgIG9wdGlvbnMudHJhY2soaW5wdXQucGF0aCgpLCBpbnB1dC5vZmZzZXQsIGlucHV0Lmxlbmd0aCwgJ2NvbnRlbnQnKTtcblxuICAgIC8vIFNlbGVjdCBwcm9wZXIgbWV0aG9kIGZvciB0YWdcbiAgICBpZiAoc3RhdGUuYW55KVxuICAgICAgcmVzdWx0ID0gcmVzdWx0O1xuICAgIGVsc2UgaWYgKHN0YXRlLmNob2ljZSA9PT0gbnVsbClcbiAgICAgIHJlc3VsdCA9IHRoaXMuX2RlY29kZUdlbmVyaWMoc3RhdGUudGFnLCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgZWxzZVxuICAgICAgcmVzdWx0ID0gdGhpcy5fZGVjb2RlQ2hvaWNlKGlucHV0LCBvcHRpb25zKTtcblxuICAgIGlmIChpbnB1dC5pc0Vycm9yKHJlc3VsdCkpXG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgLy8gRGVjb2RlIGNoaWxkcmVuXG4gICAgaWYgKCFzdGF0ZS5hbnkgJiYgc3RhdGUuY2hvaWNlID09PSBudWxsICYmIHN0YXRlLmNoaWxkcmVuICE9PSBudWxsKSB7XG4gICAgICBzdGF0ZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIGRlY29kZUNoaWxkcmVuKGNoaWxkKSB7XG4gICAgICAgIC8vIE5PVEU6IFdlIGFyZSBpZ25vcmluZyBlcnJvcnMgaGVyZSwgdG8gbGV0IHBhcnNlciBjb250aW51ZSB3aXRoIG90aGVyXG4gICAgICAgIC8vIHBhcnRzIG9mIGVuY29kZWQgZGF0YVxuICAgICAgICBjaGlsZC5fZGVjb2RlKGlucHV0LCBvcHRpb25zKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIERlY29kZSBjb250YWluZWQvZW5jb2RlZCBieSBzY2hlbWEsIG9ubHkgaW4gYml0IG9yIG9jdGV0IHN0cmluZ3NcbiAgICBpZiAoc3RhdGUuY29udGFpbnMgJiYgKHN0YXRlLnRhZyA9PT0gJ29jdHN0cicgfHwgc3RhdGUudGFnID09PSAnYml0c3RyJykpIHtcbiAgICAgIHZhciBkYXRhID0gbmV3IERlY29kZXJCdWZmZXIocmVzdWx0KTtcbiAgICAgIHJlc3VsdCA9IHRoaXMuX2dldFVzZShzdGF0ZS5jb250YWlucywgaW5wdXQuX3JlcG9ydGVyU3RhdGUub2JqKVxuICAgICAgICAgIC5fZGVjb2RlKGRhdGEsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFBvcCBvYmplY3RcbiAgaWYgKHN0YXRlLm9iaiAmJiBwcmVzZW50KVxuICAgIHJlc3VsdCA9IGlucHV0LmxlYXZlT2JqZWN0KHByZXZPYmopO1xuXG4gIC8vIFNldCBrZXlcbiAgaWYgKHN0YXRlLmtleSAhPT0gbnVsbCAmJiAocmVzdWx0ICE9PSBudWxsIHx8IHByZXNlbnQgPT09IHRydWUpKVxuICAgIGlucHV0LmxlYXZlS2V5KHByZXZLZXksIHN0YXRlLmtleSwgcmVzdWx0KTtcbiAgZWxzZSBpZiAocHJldktleSAhPT0gbnVsbClcbiAgICBpbnB1dC5leGl0S2V5KHByZXZLZXkpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZGVjb2RlR2VuZXJpYyA9IGZ1bmN0aW9uIGRlY29kZUdlbmVyaWModGFnLCBpbnB1dCwgb3B0aW9ucykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgaWYgKHRhZyA9PT0gJ3NlcScgfHwgdGFnID09PSAnc2V0JylcbiAgICByZXR1cm4gbnVsbDtcbiAgaWYgKHRhZyA9PT0gJ3NlcW9mJyB8fCB0YWcgPT09ICdzZXRvZicpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZUxpc3QoaW5wdXQsIHRhZywgc3RhdGUuYXJnc1swXSwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKC9zdHIkLy50ZXN0KHRhZykpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZVN0cihpbnB1dCwgdGFnLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqaWQnICYmIHN0YXRlLmFyZ3MpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZU9iamlkKGlucHV0LCBzdGF0ZS5hcmdzWzBdLCBzdGF0ZS5hcmdzWzFdLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqaWQnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVPYmppZChpbnB1dCwgbnVsbCwgbnVsbCwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2dlbnRpbWUnIHx8IHRhZyA9PT0gJ3V0Y3RpbWUnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVUaW1lKGlucHV0LCB0YWcsIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdudWxsXycpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZU51bGwoaW5wdXQsIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdib29sJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlQm9vbChpbnB1dCwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVTdHIoaW5wdXQsIHRhZywgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2ludCcgfHwgdGFnID09PSAnZW51bScpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZUludChpbnB1dCwgc3RhdGUuYXJncyAmJiBzdGF0ZS5hcmdzWzBdLCBvcHRpb25zKTtcblxuICBpZiAoc3RhdGUudXNlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldFVzZShzdGF0ZS51c2UsIGlucHV0Ll9yZXBvcnRlclN0YXRlLm9iailcbiAgICAgICAgLl9kZWNvZGUoaW5wdXQsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbnB1dC5lcnJvcigndW5rbm93biB0YWc6ICcgKyB0YWcpO1xuICB9XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZ2V0VXNlID0gZnVuY3Rpb24gX2dldFVzZShlbnRpdHksIG9iaikge1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgLy8gQ3JlYXRlIGFsdGVyZWQgdXNlIGRlY29kZXIgaWYgaW1wbGljaXQgaXMgc2V0XG4gIHN0YXRlLnVzZURlY29kZXIgPSB0aGlzLl91c2UoZW50aXR5LCBvYmopO1xuICBhc3NlcnQoc3RhdGUudXNlRGVjb2Rlci5fYmFzZVN0YXRlLnBhcmVudCA9PT0gbnVsbCk7XG4gIHN0YXRlLnVzZURlY29kZXIgPSBzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUuY2hpbGRyZW5bMF07XG4gIGlmIChzdGF0ZS5pbXBsaWNpdCAhPT0gc3RhdGUudXNlRGVjb2Rlci5fYmFzZVN0YXRlLmltcGxpY2l0KSB7XG4gICAgc3RhdGUudXNlRGVjb2RlciA9IHN0YXRlLnVzZURlY29kZXIuY2xvbmUoKTtcbiAgICBzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUuaW1wbGljaXQgPSBzdGF0ZS5pbXBsaWNpdDtcbiAgfVxuICByZXR1cm4gc3RhdGUudXNlRGVjb2Rlcjtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9kZWNvZGVDaG9pY2UgPSBmdW5jdGlvbiBkZWNvZGVDaG9pY2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgdmFyIG1hdGNoID0gZmFsc2U7XG5cbiAgT2JqZWN0LmtleXMoc3RhdGUuY2hvaWNlKS5zb21lKGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBzYXZlID0gaW5wdXQuc2F2ZSgpO1xuICAgIHZhciBub2RlID0gc3RhdGUuY2hvaWNlW2tleV07XG4gICAgdHJ5IHtcbiAgICAgIHZhciB2YWx1ZSA9IG5vZGUuX2RlY29kZShpbnB1dCwgb3B0aW9ucyk7XG4gICAgICBpZiAoaW5wdXQuaXNFcnJvcih2YWx1ZSkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgcmVzdWx0ID0geyB0eXBlOiBrZXksIHZhbHVlOiB2YWx1ZSB9O1xuICAgICAgbWF0Y2ggPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlucHV0LnJlc3RvcmUoc2F2ZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LCB0aGlzKTtcblxuICBpZiAoIW1hdGNoKVxuICAgIHJldHVybiBpbnB1dC5lcnJvcignQ2hvaWNlIG5vdCBtYXRjaGVkJyk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vXG4vLyBFbmNvZGluZ1xuLy9cblxuTm9kZS5wcm90b3R5cGUuX2NyZWF0ZUVuY29kZXJCdWZmZXIgPSBmdW5jdGlvbiBjcmVhdGVFbmNvZGVyQnVmZmVyKGRhdGEpIHtcbiAgcmV0dXJuIG5ldyBFbmNvZGVyQnVmZmVyKGRhdGEsIHRoaXMucmVwb3J0ZXIpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCByZXBvcnRlciwgcGFyZW50KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgaWYgKHN0YXRlWydkZWZhdWx0J10gIT09IG51bGwgJiYgc3RhdGVbJ2RlZmF1bHQnXSA9PT0gZGF0YSlcbiAgICByZXR1cm47XG5cbiAgdmFyIHJlc3VsdCA9IHRoaXMuX2VuY29kZVZhbHVlKGRhdGEsIHJlcG9ydGVyLCBwYXJlbnQpO1xuICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuO1xuXG4gIGlmICh0aGlzLl9za2lwRGVmYXVsdChyZXN1bHQsIHJlcG9ydGVyLCBwYXJlbnQpKVxuICAgIHJldHVybjtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZVZhbHVlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIHJlcG9ydGVyLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIC8vIERlY29kZSByb290IG5vZGVcbiAgaWYgKHN0YXRlLnBhcmVudCA9PT0gbnVsbClcbiAgICByZXR1cm4gc3RhdGUuY2hpbGRyZW5bMF0uX2VuY29kZShkYXRhLCByZXBvcnRlciB8fCBuZXcgUmVwb3J0ZXIoKSk7XG5cbiAgdmFyIHJlc3VsdCA9IG51bGw7XG5cbiAgLy8gU2V0IHJlcG9ydGVyIHRvIHNoYXJlIGl0IHdpdGggYSBjaGlsZCBjbGFzc1xuICB0aGlzLnJlcG9ydGVyID0gcmVwb3J0ZXI7XG5cbiAgLy8gQ2hlY2sgaWYgZGF0YSBpcyB0aGVyZVxuICBpZiAoc3RhdGUub3B0aW9uYWwgJiYgZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHN0YXRlWydkZWZhdWx0J10gIT09IG51bGwpXG4gICAgICBkYXRhID0gc3RhdGVbJ2RlZmF1bHQnXVxuICAgIGVsc2VcbiAgICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEVuY29kZSBjaGlsZHJlbiBmaXJzdFxuICB2YXIgY29udGVudCA9IG51bGw7XG4gIHZhciBwcmltaXRpdmUgPSBmYWxzZTtcbiAgaWYgKHN0YXRlLmFueSkge1xuICAgIC8vIEFueXRoaW5nIHRoYXQgd2FzIGdpdmVuIGlzIHRyYW5zbGF0ZWQgdG8gYnVmZmVyXG4gICAgcmVzdWx0ID0gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihkYXRhKTtcbiAgfSBlbHNlIGlmIChzdGF0ZS5jaG9pY2UpIHtcbiAgICByZXN1bHQgPSB0aGlzLl9lbmNvZGVDaG9pY2UoZGF0YSwgcmVwb3J0ZXIpO1xuICB9IGVsc2UgaWYgKHN0YXRlLmNvbnRhaW5zKSB7XG4gICAgY29udGVudCA9IHRoaXMuX2dldFVzZShzdGF0ZS5jb250YWlucywgcGFyZW50KS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyKTtcbiAgICBwcmltaXRpdmUgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHN0YXRlLmNoaWxkcmVuKSB7XG4gICAgY29udGVudCA9IHN0YXRlLmNoaWxkcmVuLm1hcChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9iYXNlU3RhdGUudGFnID09PSAnbnVsbF8nKVxuICAgICAgICByZXR1cm4gY2hpbGQuX2VuY29kZShudWxsLCByZXBvcnRlciwgZGF0YSk7XG5cbiAgICAgIGlmIChjaGlsZC5fYmFzZVN0YXRlLmtleSA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdDaGlsZCBzaG91bGQgaGF2ZSBhIGtleScpO1xuICAgICAgdmFyIHByZXZLZXkgPSByZXBvcnRlci5lbnRlcktleShjaGlsZC5fYmFzZVN0YXRlLmtleSk7XG5cbiAgICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcpXG4gICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignQ2hpbGQgZXhwZWN0ZWQsIGJ1dCBpbnB1dCBpcyBub3Qgb2JqZWN0Jyk7XG5cbiAgICAgIHZhciByZXMgPSBjaGlsZC5fZW5jb2RlKGRhdGFbY2hpbGQuX2Jhc2VTdGF0ZS5rZXldLCByZXBvcnRlciwgZGF0YSk7XG4gICAgICByZXBvcnRlci5sZWF2ZUtleShwcmV2S2V5KTtcblxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9LCB0aGlzKS5maWx0ZXIoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9KTtcbiAgICBjb250ZW50ID0gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihjb250ZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3RhdGUudGFnID09PSAnc2Vxb2YnIHx8IHN0YXRlLnRhZyA9PT0gJ3NldG9mJykge1xuICAgICAgLy8gVE9ETyhpbmR1dG55KTogdGhpcyBzaG91bGQgYmUgdGhyb3duIG9uIERTTCBsZXZlbFxuICAgICAgaWYgKCEoc3RhdGUuYXJncyAmJiBzdGF0ZS5hcmdzLmxlbmd0aCA9PT0gMSkpXG4gICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignVG9vIG1hbnkgYXJncyBmb3IgOiAnICsgc3RhdGUudGFnKTtcblxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKVxuICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ3NlcW9mL3NldG9mLCBidXQgZGF0YSBpcyBub3QgQXJyYXknKTtcblxuICAgICAgdmFyIGNoaWxkID0gdGhpcy5jbG9uZSgpO1xuICAgICAgY2hpbGQuX2Jhc2VTdGF0ZS5pbXBsaWNpdCA9IG51bGw7XG4gICAgICBjb250ZW50ID0gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihkYXRhLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0VXNlKHN0YXRlLmFyZ3NbMF0sIGRhdGEpLl9lbmNvZGUoaXRlbSwgcmVwb3J0ZXIpO1xuICAgICAgfSwgY2hpbGQpKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLnVzZSAhPT0gbnVsbCkge1xuICAgICAgcmVzdWx0ID0gdGhpcy5fZ2V0VXNlKHN0YXRlLnVzZSwgcGFyZW50KS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGVudCA9IHRoaXMuX2VuY29kZVByaW1pdGl2ZShzdGF0ZS50YWcsIGRhdGEpO1xuICAgICAgcHJpbWl0aXZlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBFbmNvZGUgZGF0YSBpdHNlbGZcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCFzdGF0ZS5hbnkgJiYgc3RhdGUuY2hvaWNlID09PSBudWxsKSB7XG4gICAgdmFyIHRhZyA9IHN0YXRlLmltcGxpY2l0ICE9PSBudWxsID8gc3RhdGUuaW1wbGljaXQgOiBzdGF0ZS50YWc7XG4gICAgdmFyIGNscyA9IHN0YXRlLmltcGxpY2l0ID09PSBudWxsID8gJ3VuaXZlcnNhbCcgOiAnY29udGV4dCc7XG5cbiAgICBpZiAodGFnID09PSBudWxsKSB7XG4gICAgICBpZiAoc3RhdGUudXNlID09PSBudWxsKVxuICAgICAgICByZXBvcnRlci5lcnJvcignVGFnIGNvdWxkIGJlIG9taXR0ZWQgb25seSBmb3IgLnVzZSgpJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzdGF0ZS51c2UgPT09IG51bGwpXG4gICAgICAgIHJlc3VsdCA9IHRoaXMuX2VuY29kZUNvbXBvc2l0ZSh0YWcsIHByaW1pdGl2ZSwgY2xzLCBjb250ZW50KTtcbiAgICB9XG4gIH1cblxuICAvLyBXcmFwIGluIGV4cGxpY2l0XG4gIGlmIChzdGF0ZS5leHBsaWNpdCAhPT0gbnVsbClcbiAgICByZXN1bHQgPSB0aGlzLl9lbmNvZGVDb21wb3NpdGUoc3RhdGUuZXhwbGljaXQsIGZhbHNlLCAnY29udGV4dCcsIHJlc3VsdCk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9lbmNvZGVDaG9pY2UgPSBmdW5jdGlvbiBlbmNvZGVDaG9pY2UoZGF0YSwgcmVwb3J0ZXIpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIHZhciBub2RlID0gc3RhdGUuY2hvaWNlW2RhdGEudHlwZV07XG4gIGlmICghbm9kZSkge1xuICAgIGFzc2VydChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGRhdGEudHlwZSArICcgbm90IGZvdW5kIGluICcgK1xuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoT2JqZWN0LmtleXMoc3RhdGUuY2hvaWNlKSkpO1xuICB9XG4gIHJldHVybiBub2RlLl9lbmNvZGUoZGF0YS52YWx1ZSwgcmVwb3J0ZXIpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZVByaW1pdGl2ZSA9IGZ1bmN0aW9uIGVuY29kZVByaW1pdGl2ZSh0YWcsIGRhdGEpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGlmICgvc3RyJC8udGVzdCh0YWcpKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVTdHIoZGF0YSwgdGFnKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqaWQnICYmIHN0YXRlLmFyZ3MpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZU9iamlkKGRhdGEsIHN0YXRlLnJldmVyc2VBcmdzWzBdLCBzdGF0ZS5hcmdzWzFdKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqaWQnKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVPYmppZChkYXRhLCBudWxsLCBudWxsKTtcbiAgZWxzZSBpZiAodGFnID09PSAnZ2VudGltZScgfHwgdGFnID09PSAndXRjdGltZScpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZVRpbWUoZGF0YSwgdGFnKTtcbiAgZWxzZSBpZiAodGFnID09PSAnbnVsbF8nKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVOdWxsKCk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2ludCcgfHwgdGFnID09PSAnZW51bScpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZUludChkYXRhLCBzdGF0ZS5hcmdzICYmIHN0YXRlLnJldmVyc2VBcmdzWzBdKTtcbiAgZWxzZSBpZiAodGFnID09PSAnYm9vbCcpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZUJvb2woZGF0YSk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVTdHIoZGF0YSwgdGFnKTtcbiAgZWxzZVxuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdGFnOiAnICsgdGFnKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9pc051bXN0ciA9IGZ1bmN0aW9uIGlzTnVtc3RyKHN0cikge1xuICByZXR1cm4gL15bMC05IF0qJC8udGVzdChzdHIpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2lzUHJpbnRzdHIgPSBmdW5jdGlvbiBpc1ByaW50c3RyKHN0cikge1xuICByZXR1cm4gL15bQS1aYS16MC05ICdcXChcXClcXCssXFwtXFwuXFwvOj1cXD9dKiQvLnRlc3Qoc3RyKTtcbn07XG4iLCJ2YXIgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vY29uc3RhbnRzJyk7XG5cbmV4cG9ydHMudGFnQ2xhc3MgPSB7XG4gIDA6ICd1bml2ZXJzYWwnLFxuICAxOiAnYXBwbGljYXRpb24nLFxuICAyOiAnY29udGV4dCcsXG4gIDM6ICdwcml2YXRlJ1xufTtcbmV4cG9ydHMudGFnQ2xhc3NCeU5hbWUgPSBjb25zdGFudHMuX3JldmVyc2UoZXhwb3J0cy50YWdDbGFzcyk7XG5cbmV4cG9ydHMudGFnID0ge1xuICAweDAwOiAnZW5kJyxcbiAgMHgwMTogJ2Jvb2wnLFxuICAweDAyOiAnaW50JyxcbiAgMHgwMzogJ2JpdHN0cicsXG4gIDB4MDQ6ICdvY3RzdHInLFxuICAweDA1OiAnbnVsbF8nLFxuICAweDA2OiAnb2JqaWQnLFxuICAweDA3OiAnb2JqRGVzYycsXG4gIDB4MDg6ICdleHRlcm5hbCcsXG4gIDB4MDk6ICdyZWFsJyxcbiAgMHgwYTogJ2VudW0nLFxuICAweDBiOiAnZW1iZWQnLFxuICAweDBjOiAndXRmOHN0cicsXG4gIDB4MGQ6ICdyZWxhdGl2ZU9pZCcsXG4gIDB4MTA6ICdzZXEnLFxuICAweDExOiAnc2V0JyxcbiAgMHgxMjogJ251bXN0cicsXG4gIDB4MTM6ICdwcmludHN0cicsXG4gIDB4MTQ6ICd0NjFzdHInLFxuICAweDE1OiAndmlkZW9zdHInLFxuICAweDE2OiAnaWE1c3RyJyxcbiAgMHgxNzogJ3V0Y3RpbWUnLFxuICAweDE4OiAnZ2VudGltZScsXG4gIDB4MTk6ICdncmFwaHN0cicsXG4gIDB4MWE6ICdpc282NDZzdHInLFxuICAweDFiOiAnZ2Vuc3RyJyxcbiAgMHgxYzogJ3VuaXN0cicsXG4gIDB4MWQ6ICdjaGFyc3RyJyxcbiAgMHgxZTogJ2JtcHN0cidcbn07XG5leHBvcnRzLnRhZ0J5TmFtZSA9IGNvbnN0YW50cy5fcmV2ZXJzZShleHBvcnRzLnRhZyk7XG4iLCJ2YXIgZGVjb2RlcnMgPSBleHBvcnRzO1xuXG5kZWNvZGVycy5kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuZGVjb2RlcnMucGVtID0gcmVxdWlyZSgnLi9wZW0nKTtcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuXG52YXIgREVSRGVjb2RlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5cbmZ1bmN0aW9uIFBFTURlY29kZXIoZW50aXR5KSB7XG4gIERFUkRlY29kZXIuY2FsbCh0aGlzLCBlbnRpdHkpO1xuICB0aGlzLmVuYyA9ICdwZW0nO1xufTtcbmluaGVyaXRzKFBFTURlY29kZXIsIERFUkRlY29kZXIpO1xubW9kdWxlLmV4cG9ydHMgPSBQRU1EZWNvZGVyO1xuXG5QRU1EZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgbGluZXMgPSBkYXRhLnRvU3RyaW5nKCkuc3BsaXQoL1tcXHJcXG5dKy9nKTtcblxuICB2YXIgbGFiZWwgPSBvcHRpb25zLmxhYmVsLnRvVXBwZXJDYXNlKCk7XG5cbiAgdmFyIHJlID0gL14tLS0tLShCRUdJTnxFTkQpIChbXi1dKyktLS0tLSQvO1xuICB2YXIgc3RhcnQgPSAtMTtcbiAgdmFyIGVuZCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1hdGNoID0gbGluZXNbaV0ubWF0Y2gocmUpO1xuICAgIGlmIChtYXRjaCA9PT0gbnVsbClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgaWYgKG1hdGNoWzJdICE9PSBsYWJlbClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgaWYgKHN0YXJ0ID09PSAtMSkge1xuICAgICAgaWYgKG1hdGNoWzFdICE9PSAnQkVHSU4nKVxuICAgICAgICBicmVhaztcbiAgICAgIHN0YXJ0ID0gaTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1hdGNoWzFdICE9PSAnRU5EJylcbiAgICAgICAgYnJlYWs7XG4gICAgICBlbmQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChzdGFydCA9PT0gLTEgfHwgZW5kID09PSAtMSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BFTSBzZWN0aW9uIG5vdCBmb3VuZCBmb3I6ICcgKyBsYWJlbCk7XG5cbiAgdmFyIGJhc2U2NCA9IGxpbmVzLnNsaWNlKHN0YXJ0ICsgMSwgZW5kKS5qb2luKCcnKTtcbiAgLy8gUmVtb3ZlIGV4Y2Vzc2l2ZSBzeW1ib2xzXG4gIGJhc2U2NC5yZXBsYWNlKC9bXmEtejAtOVxcK1xcLz1dKy9naSwgJycpO1xuXG4gIHZhciBpbnB1dCA9IG5ldyBCdWZmZXIoYmFzZTY0LCAnYmFzZTY0Jyk7XG4gIHJldHVybiBERVJEZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUuY2FsbCh0aGlzLCBpbnB1dCwgb3B0aW9ucyk7XG59O1xuIiwidmFyIGVuY29kZXJzID0gZXhwb3J0cztcblxuZW5jb2RlcnMuZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcbmVuY29kZXJzLnBlbSA9IHJlcXVpcmUoJy4vcGVtJyk7XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgREVSRW5jb2RlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5cbmZ1bmN0aW9uIFBFTUVuY29kZXIoZW50aXR5KSB7XG4gIERFUkVuY29kZXIuY2FsbCh0aGlzLCBlbnRpdHkpO1xuICB0aGlzLmVuYyA9ICdwZW0nO1xufTtcbmluaGVyaXRzKFBFTUVuY29kZXIsIERFUkVuY29kZXIpO1xubW9kdWxlLmV4cG9ydHMgPSBQRU1FbmNvZGVyO1xuXG5QRU1FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgYnVmID0gREVSRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlLmNhbGwodGhpcywgZGF0YSk7XG5cbiAgdmFyIHAgPSBidWYudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICB2YXIgb3V0ID0gWyAnLS0tLS1CRUdJTiAnICsgb3B0aW9ucy5sYWJlbCArICctLS0tLScgXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSArPSA2NClcbiAgICBvdXQucHVzaChwLnNsaWNlKGksIGkgKyA2NCkpO1xuICBvdXQucHVzaCgnLS0tLS1FTkQgJyArIG9wdGlvbnMubGFiZWwgKyAnLS0tLS0nKTtcbiAgcmV0dXJuIG91dC5qb2luKCdcXG4nKTtcbn07XG4iLCIvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9SYW50YW5lbi9ub2RlLWR0bHMvYmxvYi8yNWE3ZGM4NjFiZGEzOGNmZWFjOTNhNzIzNTAwZWVhNGYwYWMyZTg2L0NlcnRpZmljYXRlLmpzXG4vLyB0aGFua3MgdG8gQFJhbnRhbmVuXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYXNuID0gcmVxdWlyZSgnYXNuMS5qcycpXG5cbnZhciBUaW1lID0gYXNuLmRlZmluZSgnVGltZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jaG9pY2Uoe1xuICAgIHV0Y1RpbWU6IHRoaXMudXRjdGltZSgpLFxuICAgIGdlbmVyYWxUaW1lOiB0aGlzLmdlbnRpbWUoKVxuICB9KVxufSlcblxudmFyIEF0dHJpYnV0ZVR5cGVWYWx1ZSA9IGFzbi5kZWZpbmUoJ0F0dHJpYnV0ZVR5cGVWYWx1ZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3R5cGUnKS5vYmppZCgpLFxuICAgIHRoaXMua2V5KCd2YWx1ZScpLmFueSgpXG4gIClcbn0pXG5cbnZhciBBbGdvcml0aG1JZGVudGlmaWVyID0gYXNuLmRlZmluZSgnQWxnb3JpdGhtSWRlbnRpZmllcicsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLm9iamlkKCksXG4gICAgdGhpcy5rZXkoJ3BhcmFtZXRlcnMnKS5vcHRpb25hbCgpLFxuICAgIHRoaXMua2V5KCdjdXJ2ZScpLm9iamlkKCkub3B0aW9uYWwoKVxuICApXG59KVxuXG52YXIgU3ViamVjdFB1YmxpY0tleUluZm8gPSBhc24uZGVmaW5lKCdTdWJqZWN0UHVibGljS2V5SW5mbycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFB1YmxpY0tleScpLmJpdHN0cigpXG4gIClcbn0pXG5cbnZhciBSZWxhdGl2ZURpc3Rpbmd1aXNoZWROYW1lID0gYXNuLmRlZmluZSgnUmVsYXRpdmVEaXN0aW5ndWlzaGVkTmFtZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXRvZihBdHRyaWJ1dGVUeXBlVmFsdWUpXG59KVxuXG52YXIgUkROU2VxdWVuY2UgPSBhc24uZGVmaW5lKCdSRE5TZXF1ZW5jZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXFvZihSZWxhdGl2ZURpc3Rpbmd1aXNoZWROYW1lKVxufSlcblxudmFyIE5hbWUgPSBhc24uZGVmaW5lKCdOYW1lJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLmNob2ljZSh7XG4gICAgcmRuU2VxdWVuY2U6IHRoaXMudXNlKFJETlNlcXVlbmNlKVxuICB9KVxufSlcblxudmFyIFZhbGlkaXR5ID0gYXNuLmRlZmluZSgnVmFsaWRpdHknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdub3RCZWZvcmUnKS51c2UoVGltZSksXG4gICAgdGhpcy5rZXkoJ25vdEFmdGVyJykudXNlKFRpbWUpXG4gIClcbn0pXG5cbnZhciBFeHRlbnNpb24gPSBhc24uZGVmaW5lKCdFeHRlbnNpb24nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdleHRuSUQnKS5vYmppZCgpLFxuICAgIHRoaXMua2V5KCdjcml0aWNhbCcpLmJvb2woKS5kZWYoZmFsc2UpLFxuICAgIHRoaXMua2V5KCdleHRuVmFsdWUnKS5vY3RzdHIoKVxuICApXG59KVxuXG52YXIgVEJTQ2VydGlmaWNhdGUgPSBhc24uZGVmaW5lKCdUQlNDZXJ0aWZpY2F0ZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5leHBsaWNpdCgwKS5pbnQoKS5vcHRpb25hbCgpLFxuICAgIHRoaXMua2V5KCdzZXJpYWxOdW1iZXInKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnc2lnbmF0dXJlJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdpc3N1ZXInKS51c2UoTmFtZSksXG4gICAgdGhpcy5rZXkoJ3ZhbGlkaXR5JykudXNlKFZhbGlkaXR5KSxcbiAgICB0aGlzLmtleSgnc3ViamVjdCcpLnVzZShOYW1lKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFB1YmxpY0tleUluZm8nKS51c2UoU3ViamVjdFB1YmxpY0tleUluZm8pLFxuICAgIHRoaXMua2V5KCdpc3N1ZXJVbmlxdWVJRCcpLmltcGxpY2l0KDEpLmJpdHN0cigpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RVbmlxdWVJRCcpLmltcGxpY2l0KDIpLmJpdHN0cigpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ2V4dGVuc2lvbnMnKS5leHBsaWNpdCgzKS5zZXFvZihFeHRlbnNpb24pLm9wdGlvbmFsKClcbiAgKVxufSlcblxudmFyIFg1MDlDZXJ0aWZpY2F0ZSA9IGFzbi5kZWZpbmUoJ1g1MDlDZXJ0aWZpY2F0ZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3Ric0NlcnRpZmljYXRlJykudXNlKFRCU0NlcnRpZmljYXRlKSxcbiAgICB0aGlzLmtleSgnc2lnbmF0dXJlQWxnb3JpdGhtJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdzaWduYXR1cmVWYWx1ZScpLmJpdHN0cigpXG4gIClcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gWDUwOUNlcnRpZmljYXRlXG4iLCIvLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FwYXRpbC9wZW1zdHJpcFxudmFyIGZpbmRQcm9jID0gL1Byb2MtVHlwZTogNCxFTkNSWVBURURbXFxuXFxyXStERUstSW5mbzogQUVTLSgoPzoxMjgpfCg/OjE5Mil8KD86MjU2KSktQ0JDLChbMC05QS1IXSspW1xcblxccl0rKFswLTlBLXpcXG5cXHJcXCtcXC9cXD1dKylbXFxuXFxyXSsvbVxudmFyIHN0YXJ0UmVnZXggPSAvXi0tLS0tQkVHSU4gKCg/Oi4qPyBLRVkpfENFUlRJRklDQVRFKS0tLS0tL21cbnZhciBmdWxsUmVnZXggPSAvXi0tLS0tQkVHSU4gKCg/Oi4qPyBLRVkpfENFUlRJRklDQVRFKS0tLS0tKFswLTlBLXpcXG5cXHJcXCtcXC9cXD1dKyktLS0tLUVORCBcXDEtLS0tLSQvbVxudmFyIGV2cCA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcbnZhciBjaXBoZXJzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChva2V5LCBwYXNzd29yZCkge1xuICB2YXIga2V5ID0gb2tleS50b1N0cmluZygpXG4gIHZhciBtYXRjaCA9IGtleS5tYXRjaChmaW5kUHJvYylcbiAgdmFyIGRlY3J5cHRlZFxuICBpZiAoIW1hdGNoKSB7XG4gICAgdmFyIG1hdGNoMiA9IGtleS5tYXRjaChmdWxsUmVnZXgpXG4gICAgZGVjcnlwdGVkID0gbmV3IEJ1ZmZlcihtYXRjaDJbMl0ucmVwbGFjZSgvW1xcclxcbl0vZywgJycpLCAnYmFzZTY0JylcbiAgfSBlbHNlIHtcbiAgICB2YXIgc3VpdGUgPSAnYWVzJyArIG1hdGNoWzFdXG4gICAgdmFyIGl2ID0gQnVmZmVyLmZyb20obWF0Y2hbMl0sICdoZXgnKVxuICAgIHZhciBjaXBoZXJUZXh0ID0gQnVmZmVyLmZyb20obWF0Y2hbM10ucmVwbGFjZSgvW1xcclxcbl0vZywgJycpLCAnYmFzZTY0JylcbiAgICB2YXIgY2lwaGVyS2V5ID0gZXZwKHBhc3N3b3JkLCBpdi5zbGljZSgwLCA4KSwgcGFyc2VJbnQobWF0Y2hbMV0sIDEwKSkua2V5XG4gICAgdmFyIG91dCA9IFtdXG4gICAgdmFyIGNpcGhlciA9IGNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwgY2lwaGVyS2V5LCBpdilcbiAgICBvdXQucHVzaChjaXBoZXIudXBkYXRlKGNpcGhlclRleHQpKVxuICAgIG91dC5wdXNoKGNpcGhlci5maW5hbCgpKVxuICAgIGRlY3J5cHRlZCA9IEJ1ZmZlci5jb25jYXQob3V0KVxuICB9XG4gIHZhciB0YWcgPSBrZXkubWF0Y2goc3RhcnRSZWdleClbMV1cbiAgcmV0dXJuIHtcbiAgICB0YWc6IHRhZyxcbiAgICBkYXRhOiBkZWNyeXB0ZWRcbiAgfVxufVxuIiwiLy8gbXVjaCBvZiB0aGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL3JzYS5qc1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIEVDID0gcmVxdWlyZSgnZWxsaXB0aWMnKS5lY1xudmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKVxudmFyIGN1cnZlcyA9IHJlcXVpcmUoJy4vY3VydmVzLmpzb24nKVxuXG5mdW5jdGlvbiB2ZXJpZnkgKHNpZywgaGFzaCwga2V5LCBzaWduVHlwZSwgdGFnKSB7XG4gIHZhciBwdWIgPSBwYXJzZUtleXMoa2V5KVxuICBpZiAocHViLnR5cGUgPT09ICdlYycpIHtcbiAgICAvLyByc2Ega2V5cyBjYW4gYmUgaW50ZXJwcmV0ZWQgYXMgZWNkc2Egb25lcyBpbiBvcGVuc3NsXG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZWNkc2EnICYmIHNpZ25UeXBlICE9PSAnZWNkc2EvcnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKVxuICAgIHJldHVybiBlY1ZlcmlmeShzaWcsIGhhc2gsIHB1YilcbiAgfSBlbHNlIGlmIChwdWIudHlwZSA9PT0gJ2RzYScpIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdkc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHB1YmxpYyBrZXkgdHlwZScpXG4gICAgcmV0dXJuIGRzYVZlcmlmeShzaWcsIGhhc2gsIHB1YilcbiAgfSBlbHNlIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdyc2EnICYmIHNpZ25UeXBlICE9PSAnZWNkc2EvcnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKVxuICB9XG4gIGhhc2ggPSBCdWZmZXIuY29uY2F0KFt0YWcsIGhhc2hdKVxuICB2YXIgbGVuID0gcHViLm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIHZhciBwYWQgPSBbIDEgXVxuICB2YXIgcGFkTnVtID0gMFxuICB3aGlsZSAoaGFzaC5sZW5ndGggKyBwYWQubGVuZ3RoICsgMiA8IGxlbikge1xuICAgIHBhZC5wdXNoKDB4ZmYpXG4gICAgcGFkTnVtKytcbiAgfVxuICBwYWQucHVzaCgweDAwKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBoYXNoLmxlbmd0aCkge1xuICAgIHBhZC5wdXNoKGhhc2hbaV0pXG4gIH1cbiAgcGFkID0gbmV3IEJ1ZmZlcihwYWQpXG4gIHZhciByZWQgPSBCTi5tb250KHB1Yi5tb2R1bHVzKVxuICBzaWcgPSBuZXcgQk4oc2lnKS50b1JlZChyZWQpXG5cbiAgc2lnID0gc2lnLnJlZFBvdyhuZXcgQk4ocHViLnB1YmxpY0V4cG9uZW50KSlcbiAgc2lnID0gbmV3IEJ1ZmZlcihzaWcuZnJvbVJlZCgpLnRvQXJyYXkoKSlcbiAgdmFyIG91dCA9IHBhZE51bSA8IDggPyAxIDogMFxuICBsZW4gPSBNYXRoLm1pbihzaWcubGVuZ3RoLCBwYWQubGVuZ3RoKVxuICBpZiAoc2lnLmxlbmd0aCAhPT0gcGFkLmxlbmd0aCkgb3V0ID0gMVxuXG4gIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSBvdXQgfD0gc2lnW2ldIF4gcGFkW2ldXG4gIHJldHVybiBvdXQgPT09IDBcbn1cblxuZnVuY3Rpb24gZWNWZXJpZnkgKHNpZywgaGFzaCwgcHViKSB7XG4gIHZhciBjdXJ2ZUlkID0gY3VydmVzW3B1Yi5kYXRhLmFsZ29yaXRobS5jdXJ2ZS5qb2luKCcuJyldXG4gIGlmICghY3VydmVJZCkgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGN1cnZlICcgKyBwdWIuZGF0YS5hbGdvcml0aG0uY3VydmUuam9pbignLicpKVxuXG4gIHZhciBjdXJ2ZSA9IG5ldyBFQyhjdXJ2ZUlkKVxuICB2YXIgcHVia2V5ID0gcHViLmRhdGEuc3ViamVjdFByaXZhdGVLZXkuZGF0YVxuXG4gIHJldHVybiBjdXJ2ZS52ZXJpZnkoaGFzaCwgc2lnLCBwdWJrZXkpXG59XG5cbmZ1bmN0aW9uIGRzYVZlcmlmeSAoc2lnLCBoYXNoLCBwdWIpIHtcbiAgdmFyIHAgPSBwdWIuZGF0YS5wXG4gIHZhciBxID0gcHViLmRhdGEucVxuICB2YXIgZyA9IHB1Yi5kYXRhLmdcbiAgdmFyIHkgPSBwdWIuZGF0YS5wdWJfa2V5XG4gIHZhciB1bnBhY2tlZCA9IHBhcnNlS2V5cy5zaWduYXR1cmUuZGVjb2RlKHNpZywgJ2RlcicpXG4gIHZhciBzID0gdW5wYWNrZWQuc1xuICB2YXIgciA9IHVucGFja2VkLnJcbiAgY2hlY2tWYWx1ZShzLCBxKVxuICBjaGVja1ZhbHVlKHIsIHEpXG4gIHZhciBtb250cCA9IEJOLm1vbnQocClcbiAgdmFyIHcgPSBzLmludm0ocSlcbiAgdmFyIHYgPSBnLnRvUmVkKG1vbnRwKVxuICAgIC5yZWRQb3cobmV3IEJOKGhhc2gpLm11bCh3KS5tb2QocSkpXG4gICAgLmZyb21SZWQoKVxuICAgIC5tdWwoeS50b1JlZChtb250cCkucmVkUG93KHIubXVsKHcpLm1vZChxKSkuZnJvbVJlZCgpKVxuICAgIC5tb2QocClcbiAgICAubW9kKHEpXG4gIHJldHVybiB2LmNtcChyKSA9PT0gMFxufVxuXG5mdW5jdGlvbiBjaGVja1ZhbHVlIChiLCBxKSB7XG4gIGlmIChiLmNtcG4oMCkgPD0gMCkgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHNpZycpXG4gIGlmIChiLmNtcChxKSA+PSBxKSB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgc2lnJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2ZXJpZnlcbiIsInZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJ2VsbGlwdGljJylcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFQ0RIIChjdXJ2ZSkge1xuICByZXR1cm4gbmV3IEVDREgoY3VydmUpXG59XG5cbnZhciBhbGlhc2VzID0ge1xuICBzZWNwMjU2azE6IHtcbiAgICBuYW1lOiAnc2VjcDI1NmsxJyxcbiAgICBieXRlTGVuZ3RoOiAzMlxuICB9LFxuICBzZWNwMjI0cjE6IHtcbiAgICBuYW1lOiAncDIyNCcsXG4gICAgYnl0ZUxlbmd0aDogMjhcbiAgfSxcbiAgcHJpbWUyNTZ2MToge1xuICAgIG5hbWU6ICdwMjU2JyxcbiAgICBieXRlTGVuZ3RoOiAzMlxuICB9LFxuICBwcmltZTE5MnYxOiB7XG4gICAgbmFtZTogJ3AxOTInLFxuICAgIGJ5dGVMZW5ndGg6IDI0XG4gIH0sXG4gIGVkMjU1MTk6IHtcbiAgICBuYW1lOiAnZWQyNTUxOScsXG4gICAgYnl0ZUxlbmd0aDogMzJcbiAgfSxcbiAgc2VjcDM4NHIxOiB7XG4gICAgbmFtZTogJ3AzODQnLFxuICAgIGJ5dGVMZW5ndGg6IDQ4XG4gIH0sXG4gIHNlY3A1MjFyMToge1xuICAgIG5hbWU6ICdwNTIxJyxcbiAgICBieXRlTGVuZ3RoOiA2NlxuICB9XG59XG5cbmFsaWFzZXMucDIyNCA9IGFsaWFzZXMuc2VjcDIyNHIxXG5hbGlhc2VzLnAyNTYgPSBhbGlhc2VzLnNlY3AyNTZyMSA9IGFsaWFzZXMucHJpbWUyNTZ2MVxuYWxpYXNlcy5wMTkyID0gYWxpYXNlcy5zZWNwMTkycjEgPSBhbGlhc2VzLnByaW1lMTkydjFcbmFsaWFzZXMucDM4NCA9IGFsaWFzZXMuc2VjcDM4NHIxXG5hbGlhc2VzLnA1MjEgPSBhbGlhc2VzLnNlY3A1MjFyMVxuXG5mdW5jdGlvbiBFQ0RIIChjdXJ2ZSkge1xuICB0aGlzLmN1cnZlVHlwZSA9IGFsaWFzZXNbY3VydmVdXG4gIGlmICghdGhpcy5jdXJ2ZVR5cGUpIHtcbiAgICB0aGlzLmN1cnZlVHlwZSA9IHtcbiAgICAgIG5hbWU6IGN1cnZlXG4gICAgfVxuICB9XG4gIHRoaXMuY3VydmUgPSBuZXcgZWxsaXB0aWMuZWModGhpcy5jdXJ2ZVR5cGUubmFtZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG4gIHRoaXMua2V5cyA9IHZvaWQgMFxufVxuXG5FQ0RILnByb3RvdHlwZS5nZW5lcmF0ZUtleXMgPSBmdW5jdGlvbiAoZW5jLCBmb3JtYXQpIHtcbiAgdGhpcy5rZXlzID0gdGhpcy5jdXJ2ZS5nZW5LZXlQYWlyKClcbiAgcmV0dXJuIHRoaXMuZ2V0UHVibGljS2V5KGVuYywgZm9ybWF0KVxufVxuXG5FQ0RILnByb3RvdHlwZS5jb21wdXRlU2VjcmV0ID0gZnVuY3Rpb24gKG90aGVyLCBpbmVuYywgZW5jKSB7XG4gIGluZW5jID0gaW5lbmMgfHwgJ3V0ZjgnXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKG90aGVyKSkge1xuICAgIG90aGVyID0gbmV3IEJ1ZmZlcihvdGhlciwgaW5lbmMpXG4gIH1cbiAgdmFyIG90aGVyUHViID0gdGhpcy5jdXJ2ZS5rZXlGcm9tUHVibGljKG90aGVyKS5nZXRQdWJsaWMoKVxuICB2YXIgb3V0ID0gb3RoZXJQdWIubXVsKHRoaXMua2V5cy5nZXRQcml2YXRlKCkpLmdldFgoKVxuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUob3V0LCBlbmMsIHRoaXMuY3VydmVUeXBlLmJ5dGVMZW5ndGgpXG59XG5cbkVDREgucHJvdG90eXBlLmdldFB1YmxpY0tleSA9IGZ1bmN0aW9uIChlbmMsIGZvcm1hdCkge1xuICB2YXIga2V5ID0gdGhpcy5rZXlzLmdldFB1YmxpYyhmb3JtYXQgPT09ICdjb21wcmVzc2VkJywgdHJ1ZSlcbiAgaWYgKGZvcm1hdCA9PT0gJ2h5YnJpZCcpIHtcbiAgICBpZiAoa2V5W2tleS5sZW5ndGggLSAxXSAlIDIpIHtcbiAgICAgIGtleVswXSA9IDdcbiAgICB9IGVsc2Uge1xuICAgICAga2V5WzBdID0gNlxuICAgIH1cbiAgfVxuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUoa2V5LCBlbmMpXG59XG5cbkVDREgucHJvdG90eXBlLmdldFByaXZhdGVLZXkgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLmtleXMuZ2V0UHJpdmF0ZSgpLCBlbmMpXG59XG5cbkVDREgucHJvdG90eXBlLnNldFB1YmxpY0tleSA9IGZ1bmN0aW9uIChwdWIsIGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ3V0ZjgnXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHB1YikpIHtcbiAgICBwdWIgPSBuZXcgQnVmZmVyKHB1YiwgZW5jKVxuICB9XG4gIHRoaXMua2V5cy5faW1wb3J0UHVibGljKHB1YilcbiAgcmV0dXJuIHRoaXNcbn1cblxuRUNESC5wcm90b3R5cGUuc2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIChwcml2LCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4J1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwcml2KSkge1xuICAgIHByaXYgPSBuZXcgQnVmZmVyKHByaXYsIGVuYylcbiAgfVxuXG4gIHZhciBfcHJpdiA9IG5ldyBCTihwcml2KVxuICBfcHJpdiA9IF9wcml2LnRvU3RyaW5nKDE2KVxuICB0aGlzLmtleXMgPSB0aGlzLmN1cnZlLmdlbktleVBhaXIoKVxuICB0aGlzLmtleXMuX2ltcG9ydFByaXZhdGUoX3ByaXYpXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJldHVyblZhbHVlIChibiwgZW5jLCBsZW4pIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGJuKSkge1xuICAgIGJuID0gYm4udG9BcnJheSgpXG4gIH1cbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoYm4pXG4gIGlmIChsZW4gJiYgYnVmLmxlbmd0aCA8IGxlbikge1xuICAgIHZhciB6ZXJvcyA9IG5ldyBCdWZmZXIobGVuIC0gYnVmLmxlbmd0aClcbiAgICB6ZXJvcy5maWxsKDApXG4gICAgYnVmID0gQnVmZmVyLmNvbmNhdChbemVyb3MsIGJ1Zl0pXG4gIH1cbiAgaWYgKCFlbmMpIHtcbiAgICByZXR1cm4gYnVmXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJ1Zi50b1N0cmluZyhlbmMpXG4gIH1cbn1cbiIsImV4cG9ydHMucHVibGljRW5jcnlwdCA9IHJlcXVpcmUoJy4vcHVibGljRW5jcnlwdCcpXG5leHBvcnRzLnByaXZhdGVEZWNyeXB0ID0gcmVxdWlyZSgnLi9wcml2YXRlRGVjcnlwdCcpXG5cbmV4cG9ydHMucHJpdmF0ZUVuY3J5cHQgPSBmdW5jdGlvbiBwcml2YXRlRW5jcnlwdCAoa2V5LCBidWYpIHtcbiAgcmV0dXJuIGV4cG9ydHMucHVibGljRW5jcnlwdChrZXksIGJ1ZiwgdHJ1ZSlcbn1cblxuZXhwb3J0cy5wdWJsaWNEZWNyeXB0ID0gZnVuY3Rpb24gcHVibGljRGVjcnlwdCAoa2V5LCBidWYpIHtcbiAgcmV0dXJuIGV4cG9ydHMucHJpdmF0ZURlY3J5cHQoa2V5LCBidWYsIHRydWUpXG59XG4iLCJ2YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpXG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpXG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbnZhciBtZ2YgPSByZXF1aXJlKCcuL21nZicpXG52YXIgeG9yID0gcmVxdWlyZSgnLi94b3InKVxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIHdpdGhQdWJsaWMgPSByZXF1aXJlKCcuL3dpdGhQdWJsaWMnKVxudmFyIGNydCA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktcnNhJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHB1YmxpY0VuY3J5cHQgKHB1YmxpY0tleSwgbXNnLCByZXZlcnNlKSB7XG4gIHZhciBwYWRkaW5nXG4gIGlmIChwdWJsaWNLZXkucGFkZGluZykge1xuICAgIHBhZGRpbmcgPSBwdWJsaWNLZXkucGFkZGluZ1xuICB9IGVsc2UgaWYgKHJldmVyc2UpIHtcbiAgICBwYWRkaW5nID0gMVxuICB9IGVsc2Uge1xuICAgIHBhZGRpbmcgPSA0XG4gIH1cbiAgdmFyIGtleSA9IHBhcnNlS2V5cyhwdWJsaWNLZXkpXG4gIHZhciBwYWRkZWRNc2dcbiAgaWYgKHBhZGRpbmcgPT09IDQpIHtcbiAgICBwYWRkZWRNc2cgPSBvYWVwKGtleSwgbXNnKVxuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDEpIHtcbiAgICBwYWRkZWRNc2cgPSBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSlcbiAgfSBlbHNlIGlmIChwYWRkaW5nID09PSAzKSB7XG4gICAgcGFkZGVkTXNnID0gbmV3IEJOKG1zZylcbiAgICBpZiAocGFkZGVkTXNnLmNtcChrZXkubW9kdWx1cykgPj0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIHRvbyBsb25nIGZvciBtb2R1bHVzJylcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIHBhZGRpbmcnKVxuICB9XG4gIGlmIChyZXZlcnNlKSB7XG4gICAgcmV0dXJuIGNydChwYWRkZWRNc2csIGtleSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gd2l0aFB1YmxpYyhwYWRkZWRNc2csIGtleSlcbiAgfVxufVxuXG5mdW5jdGlvbiBvYWVwIChrZXksIG1zZykge1xuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKVxuICB2YXIgbUxlbiA9IG1zZy5sZW5ndGhcbiAgdmFyIGlIYXNoID0gY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShCdWZmZXIuYWxsb2MoMCkpLmRpZ2VzdCgpXG4gIHZhciBoTGVuID0gaUhhc2gubGVuZ3RoXG4gIHZhciBoTGVuMiA9IDIgKiBoTGVuXG4gIGlmIChtTGVuID4gayAtIGhMZW4yIC0gMikge1xuICAgIHRocm93IG5ldyBFcnJvcignbWVzc2FnZSB0b28gbG9uZycpXG4gIH1cbiAgdmFyIHBzID0gQnVmZmVyLmFsbG9jKGsgLSBtTGVuIC0gaExlbjIgLSAyKVxuICB2YXIgZGJsZW4gPSBrIC0gaExlbiAtIDFcbiAgdmFyIHNlZWQgPSByYW5kb21CeXRlcyhoTGVuKVxuICB2YXIgbWFza2VkRGIgPSB4b3IoQnVmZmVyLmNvbmNhdChbaUhhc2gsIHBzLCBCdWZmZXIuYWxsb2MoMSwgMSksIG1zZ10sIGRibGVuKSwgbWdmKHNlZWQsIGRibGVuKSlcbiAgdmFyIG1hc2tlZFNlZWQgPSB4b3Ioc2VlZCwgbWdmKG1hc2tlZERiLCBoTGVuKSlcbiAgcmV0dXJuIG5ldyBCTihCdWZmZXIuY29uY2F0KFtCdWZmZXIuYWxsb2MoMSksIG1hc2tlZFNlZWQsIG1hc2tlZERiXSwgaykpXG59XG5mdW5jdGlvbiBwa2NzMSAoa2V5LCBtc2csIHJldmVyc2UpIHtcbiAgdmFyIG1MZW4gPSBtc2cubGVuZ3RoXG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIGlmIChtTGVuID4gayAtIDExKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlIHRvbyBsb25nJylcbiAgfVxuICB2YXIgcHNcbiAgaWYgKHJldmVyc2UpIHtcbiAgICBwcyA9IEJ1ZmZlci5hbGxvYyhrIC0gbUxlbiAtIDMsIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgcHMgPSBub25aZXJvKGsgLSBtTGVuIC0gMylcbiAgfVxuICByZXR1cm4gbmV3IEJOKEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5mcm9tKFswLCByZXZlcnNlID8gMSA6IDJdKSwgcHMsIEJ1ZmZlci5hbGxvYygxKSwgbXNnXSwgaykpXG59XG5mdW5jdGlvbiBub25aZXJvIChsZW4pIHtcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pXG4gIHZhciBpID0gMFxuICB2YXIgY2FjaGUgPSByYW5kb21CeXRlcyhsZW4gKiAyKVxuICB2YXIgY3VyID0gMFxuICB2YXIgbnVtXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgaWYgKGN1ciA9PT0gY2FjaGUubGVuZ3RoKSB7XG4gICAgICBjYWNoZSA9IHJhbmRvbUJ5dGVzKGxlbiAqIDIpXG4gICAgICBjdXIgPSAwXG4gICAgfVxuICAgIG51bSA9IGNhY2hlW2N1cisrXVxuICAgIGlmIChudW0pIHtcbiAgICAgIG91dFtpKytdID0gbnVtXG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRcbn1cbiIsInZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJylcbnZhciBtZ2YgPSByZXF1aXJlKCcuL21nZicpXG52YXIgeG9yID0gcmVxdWlyZSgnLi94b3InKVxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIGNydCA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktcnNhJylcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxudmFyIHdpdGhQdWJsaWMgPSByZXF1aXJlKCcuL3dpdGhQdWJsaWMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHJpdmF0ZURlY3J5cHQgKHByaXZhdGVLZXksIGVuYywgcmV2ZXJzZSkge1xuICB2YXIgcGFkZGluZ1xuICBpZiAocHJpdmF0ZUtleS5wYWRkaW5nKSB7XG4gICAgcGFkZGluZyA9IHByaXZhdGVLZXkucGFkZGluZ1xuICB9IGVsc2UgaWYgKHJldmVyc2UpIHtcbiAgICBwYWRkaW5nID0gMVxuICB9IGVsc2Uge1xuICAgIHBhZGRpbmcgPSA0XG4gIH1cblxuICB2YXIga2V5ID0gcGFyc2VLZXlzKHByaXZhdGVLZXkpXG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIGlmIChlbmMubGVuZ3RoID4gayB8fCBuZXcgQk4oZW5jKS5jbXAoa2V5Lm1vZHVsdXMpID49IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKVxuICB9XG4gIHZhciBtc2dcbiAgaWYgKHJldmVyc2UpIHtcbiAgICBtc2cgPSB3aXRoUHVibGljKG5ldyBCTihlbmMpLCBrZXkpXG4gIH0gZWxzZSB7XG4gICAgbXNnID0gY3J0KGVuYywga2V5KVxuICB9XG4gIHZhciB6QnVmZmVyID0gQnVmZmVyLmFsbG9jKGsgLSBtc2cubGVuZ3RoKVxuICBtc2cgPSBCdWZmZXIuY29uY2F0KFt6QnVmZmVyLCBtc2ddLCBrKVxuICBpZiAocGFkZGluZyA9PT0gNCkge1xuICAgIHJldHVybiBvYWVwKGtleSwgbXNnKVxuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDEpIHtcbiAgICByZXR1cm4gcGtjczEoa2V5LCBtc2csIHJldmVyc2UpXG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMykge1xuICAgIHJldHVybiBtc2dcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gcGFkZGluZycpXG4gIH1cbn1cblxuZnVuY3Rpb24gb2FlcCAoa2V5LCBtc2cpIHtcbiAgdmFyIGsgPSBrZXkubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgdmFyIGlIYXNoID0gY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShCdWZmZXIuYWxsb2MoMCkpLmRpZ2VzdCgpXG4gIHZhciBoTGVuID0gaUhhc2gubGVuZ3RoXG4gIGlmIChtc2dbMF0gIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKVxuICB9XG4gIHZhciBtYXNrZWRTZWVkID0gbXNnLnNsaWNlKDEsIGhMZW4gKyAxKVxuICB2YXIgbWFza2VkRGIgPSBtc2cuc2xpY2UoaExlbiArIDEpXG4gIHZhciBzZWVkID0geG9yKG1hc2tlZFNlZWQsIG1nZihtYXNrZWREYiwgaExlbikpXG4gIHZhciBkYiA9IHhvcihtYXNrZWREYiwgbWdmKHNlZWQsIGsgLSBoTGVuIC0gMSkpXG4gIGlmIChjb21wYXJlKGlIYXNoLCBkYi5zbGljZSgwLCBoTGVuKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKVxuICB9XG4gIHZhciBpID0gaExlblxuICB3aGlsZSAoZGJbaV0gPT09IDApIHtcbiAgICBpKytcbiAgfVxuICBpZiAoZGJbaSsrXSAhPT0gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpXG4gIH1cbiAgcmV0dXJuIGRiLnNsaWNlKGkpXG59XG5cbmZ1bmN0aW9uIHBrY3MxIChrZXksIG1zZywgcmV2ZXJzZSkge1xuICB2YXIgcDEgPSBtc2cuc2xpY2UoMCwgMilcbiAgdmFyIGkgPSAyXG4gIHZhciBzdGF0dXMgPSAwXG4gIHdoaWxlIChtc2dbaSsrXSAhPT0gMCkge1xuICAgIGlmIChpID49IG1zZy5sZW5ndGgpIHtcbiAgICAgIHN0YXR1cysrXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICB2YXIgcHMgPSBtc2cuc2xpY2UoMiwgaSAtIDEpXG5cbiAgaWYgKChwMS50b1N0cmluZygnaGV4JykgIT09ICcwMDAyJyAmJiAhcmV2ZXJzZSkgfHwgKHAxLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzAwMDEnICYmIHJldmVyc2UpKSB7XG4gICAgc3RhdHVzKytcbiAgfVxuICBpZiAocHMubGVuZ3RoIDwgOCkge1xuICAgIHN0YXR1cysrXG4gIH1cbiAgaWYgKHN0YXR1cykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpXG4gIH1cbiAgcmV0dXJuIG1zZy5zbGljZShpKVxufVxuZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBhID0gQnVmZmVyLmZyb20oYSlcbiAgYiA9IEJ1ZmZlci5mcm9tKGIpXG4gIHZhciBkaWYgPSAwXG4gIHZhciBsZW4gPSBhLmxlbmd0aFxuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgZGlmKytcbiAgICBsZW4gPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIH1cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgZGlmICs9IChhW2ldIF4gYltpXSlcbiAgfVxuICByZXR1cm4gZGlmXG59XG4iLCIndXNlIHN0cmljdCdcblxuZnVuY3Rpb24gb2xkQnJvd3NlciAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignc2VjdXJlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdGlvbiBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3NlclxcbnVzZSBjaHJvbWUsIEZpcmVGb3ggb3IgSW50ZXJuZXQgRXhwbG9yZXIgMTEnKVxufVxudmFyIHNhZmVCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpXG52YXIgcmFuZG9tYnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpXG52YXIgQnVmZmVyID0gc2FmZUJ1ZmZlci5CdWZmZXJcbnZhciBrQnVmZmVyTWF4TGVuZ3RoID0gc2FmZUJ1ZmZlci5rTWF4TGVuZ3RoXG52YXIgY3J5cHRvID0gZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG9cbnZhciBrTWF4VWludDMyID0gTWF0aC5wb3coMiwgMzIpIC0gMVxuZnVuY3Rpb24gYXNzZXJ0T2Zmc2V0IChvZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICE9PSBvZmZzZXQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvZmZzZXQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAob2Zmc2V0ID4ga01heFVpbnQzMiB8fCBvZmZzZXQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb2Zmc2V0IG11c3QgYmUgYSB1aW50MzInKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+IGtCdWZmZXJNYXhMZW5ndGggfHwgb2Zmc2V0ID4gbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBvdXQgb2YgcmFuZ2UnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicgfHwgc2l6ZSAhPT0gc2l6ZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NpemUgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoc2l6ZSA+IGtNYXhVaW50MzIgfHwgc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzaXplIG11c3QgYmUgYSB1aW50MzInKVxuICB9XG5cbiAgaWYgKHNpemUgKyBvZmZzZXQgPiBsZW5ndGggfHwgc2l6ZSA+IGtCdWZmZXJNYXhMZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYnVmZmVyIHRvbyBzbWFsbCcpXG4gIH1cbn1cbmlmICgoY3J5cHRvICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHx8ICFwcm9jZXNzLmJyb3dzZXIpIHtcbiAgZXhwb3J0cy5yYW5kb21GaWxsID0gcmFuZG9tRmlsbFxuICBleHBvcnRzLnJhbmRvbUZpbGxTeW5jID0gcmFuZG9tRmlsbFN5bmNcbn0gZWxzZSB7XG4gIGV4cG9ydHMucmFuZG9tRmlsbCA9IG9sZEJyb3dzZXJcbiAgZXhwb3J0cy5yYW5kb21GaWxsU3luYyA9IG9sZEJyb3dzZXJcbn1cbmZ1bmN0aW9uIHJhbmRvbUZpbGwgKGJ1Ziwgb2Zmc2V0LCBzaXplLCBjYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpICYmICEoYnVmIGluc3RhbmNlb2YgZ2xvYmFsLlVpbnQ4QXJyYXkpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIG9yIFVpbnQ4QXJyYXknKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IG9mZnNldFxuICAgIG9mZnNldCA9IDBcbiAgICBzaXplID0gYnVmLmxlbmd0aFxuICB9IGVsc2UgaWYgKHR5cGVvZiBzaXplID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBzaXplXG4gICAgc2l6ZSA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImNiXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJylcbiAgfVxuICBhc3NlcnRPZmZzZXQob2Zmc2V0LCBidWYubGVuZ3RoKVxuICBhc3NlcnRTaXplKHNpemUsIG9mZnNldCwgYnVmLmxlbmd0aClcbiAgcmV0dXJuIGFjdHVhbEZpbGwoYnVmLCBvZmZzZXQsIHNpemUsIGNiKVxufVxuXG5mdW5jdGlvbiBhY3R1YWxGaWxsIChidWYsIG9mZnNldCwgc2l6ZSwgY2IpIHtcbiAgaWYgKHByb2Nlc3MuYnJvd3Nlcikge1xuICAgIHZhciBvdXJCdWYgPSBidWYuYnVmZmVyXG4gICAgdmFyIHVpbnQgPSBuZXcgVWludDhBcnJheShvdXJCdWYsIG9mZnNldCwgc2l6ZSlcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHVpbnQpXG4gICAgaWYgKGNiKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2IobnVsbCwgYnVmKVxuICAgICAgfSlcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICByZXR1cm4gYnVmXG4gIH1cbiAgaWYgKGNiKSB7XG4gICAgcmFuZG9tYnl0ZXMoc2l6ZSwgZnVuY3Rpb24gKGVyciwgYnl0ZXMpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNiKGVycilcbiAgICAgIH1cbiAgICAgIGJ5dGVzLmNvcHkoYnVmLCBvZmZzZXQpXG4gICAgICBjYihudWxsLCBidWYpXG4gICAgfSlcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYnl0ZXMgPSByYW5kb21ieXRlcyhzaXplKVxuICBieXRlcy5jb3B5KGJ1Ziwgb2Zmc2V0KVxuICByZXR1cm4gYnVmXG59XG5mdW5jdGlvbiByYW5kb21GaWxsU3luYyAoYnVmLCBvZmZzZXQsIHNpemUpIHtcbiAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgb2Zmc2V0ID0gMFxuICB9XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikgJiYgIShidWYgaW5zdGFuY2VvZiBnbG9iYWwuVWludDhBcnJheSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZlwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgb3IgVWludDhBcnJheScpXG4gIH1cblxuICBhc3NlcnRPZmZzZXQob2Zmc2V0LCBidWYubGVuZ3RoKVxuXG4gIGlmIChzaXplID09PSB1bmRlZmluZWQpIHNpemUgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG5cbiAgYXNzZXJ0U2l6ZShzaXplLCBvZmZzZXQsIGJ1Zi5sZW5ndGgpXG5cbiAgcmV0dXJuIGFjdHVhbEZpbGwoYnVmLCBvZmZzZXQsIHNpemUpXG59XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbmZ1bmN0aW9uIE1pbWUoKSB7XG4gIC8vIE1hcCBvZiBleHRlbnNpb24gLT4gbWltZSB0eXBlXG4gIHRoaXMudHlwZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIC8vIE1hcCBvZiBtaW1lIHR5cGUgLT4gZXh0ZW5zaW9uXG4gIHRoaXMuZXh0ZW5zaW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5cbi8qKlxuICogRGVmaW5lIG1pbWV0eXBlIC0+IGV4dGVuc2lvbiBtYXBwaW5ncy4gIEVhY2gga2V5IGlzIGEgbWltZS10eXBlIHRoYXQgbWFwc1xuICogdG8gYW4gYXJyYXkgb2YgZXh0ZW5zaW9ucyBhc3NvY2lhdGVkIHdpdGggdGhlIHR5cGUuICBUaGUgZmlyc3QgZXh0ZW5zaW9uIGlzXG4gKiB1c2VkIGFzIHRoZSBkZWZhdWx0IGV4dGVuc2lvbiBmb3IgdGhlIHR5cGUuXG4gKlxuICogZS5nLiBtaW1lLmRlZmluZSh7J2F1ZGlvL29nZycsIFsnb2dhJywgJ29nZycsICdzcHgnXX0pO1xuICpcbiAqIEBwYXJhbSBtYXAgKE9iamVjdCkgdHlwZSBkZWZpbml0aW9uc1xuICovXG5NaW1lLnByb3RvdHlwZS5kZWZpbmUgPSBmdW5jdGlvbiAobWFwKSB7XG4gIGZvciAodmFyIHR5cGUgaW4gbWFwKSB7XG4gICAgdmFyIGV4dHMgPSBtYXBbdHlwZV07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuREVCVUdfTUlNRSAmJiB0aGlzLnR5cGVzW2V4dHNbaV1dKSB7XG4gICAgICAgIGNvbnNvbGUud2FybigodGhpcy5fbG9hZGluZyB8fCBcImRlZmluZSgpXCIpLnJlcGxhY2UoLy4qXFwvLywgJycpLCAnY2hhbmdlcyBcIicgKyBleHRzW2ldICsgJ1wiIGV4dGVuc2lvbiB0eXBlIGZyb20gJyArXG4gICAgICAgICAgdGhpcy50eXBlc1tleHRzW2ldXSArICcgdG8gJyArIHR5cGUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnR5cGVzW2V4dHNbaV1dID0gdHlwZTtcbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IGV4dGVuc2lvbiBpcyB0aGUgZmlyc3Qgb25lIHdlIGVuY291bnRlclxuICAgIGlmICghdGhpcy5leHRlbnNpb25zW3R5cGVdKSB7XG4gICAgICB0aGlzLmV4dGVuc2lvbnNbdHlwZV0gPSBleHRzWzBdO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBMb2FkIGFuIEFwYWNoZTItc3R5bGUgXCIudHlwZXNcIiBmaWxlXG4gKlxuICogVGhpcyBtYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIChpdCdzIGV4cGVjdGVkKS4gIFdoZXJlIGZpbGVzIGRlY2xhcmVcbiAqIG92ZXJsYXBwaW5nIHR5cGVzL2V4dGVuc2lvbnMsIHRoZSBsYXN0IGZpbGUgd2lucy5cbiAqXG4gKiBAcGFyYW0gZmlsZSAoU3RyaW5nKSBwYXRoIG9mIGZpbGUgdG8gbG9hZC5cbiAqL1xuTWltZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKGZpbGUpIHtcbiAgdGhpcy5fbG9hZGluZyA9IGZpbGU7XG4gIC8vIFJlYWQgZmlsZSBhbmQgc3BsaXQgaW50byBsaW5lc1xuICB2YXIgbWFwID0ge30sXG4gICAgICBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGZpbGUsICdhc2NpaScpLFxuICAgICAgbGluZXMgPSBjb250ZW50LnNwbGl0KC9bXFxyXFxuXSsvKTtcblxuICBsaW5lcy5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAvLyBDbGVhbiB1cCB3aGl0ZXNwYWNlL2NvbW1lbnRzLCBhbmQgc3BsaXQgaW50byBmaWVsZHNcbiAgICB2YXIgZmllbGRzID0gbGluZS5yZXBsYWNlKC9cXHMqIy4qfF5cXHMqfFxccyokL2csICcnKS5zcGxpdCgvXFxzKy8pO1xuICAgIG1hcFtmaWVsZHMuc2hpZnQoKV0gPSBmaWVsZHM7XG4gIH0pO1xuXG4gIHRoaXMuZGVmaW5lKG1hcCk7XG5cbiAgdGhpcy5fbG9hZGluZyA9IG51bGw7XG59O1xuXG4vKipcbiAqIExvb2t1cCBhIG1pbWUgdHlwZSBiYXNlZCBvbiBleHRlbnNpb25cbiAqL1xuTWltZS5wcm90b3R5cGUubG9va3VwID0gZnVuY3Rpb24ocGF0aCwgZmFsbGJhY2spIHtcbiAgdmFyIGV4dCA9IHBhdGgucmVwbGFjZSgvXi4qW1xcLlxcL1xcXFxdLywgJycpLnRvTG93ZXJDYXNlKCk7XG5cbiAgcmV0dXJuIHRoaXMudHlwZXNbZXh0XSB8fCBmYWxsYmFjayB8fCB0aGlzLmRlZmF1bHRfdHlwZTtcbn07XG5cbi8qKlxuICogUmV0dXJuIGZpbGUgZXh0ZW5zaW9uIGFzc29jaWF0ZWQgd2l0aCBhIG1pbWUgdHlwZVxuICovXG5NaW1lLnByb3RvdHlwZS5leHRlbnNpb24gPSBmdW5jdGlvbihtaW1lVHlwZSkge1xuICB2YXIgdHlwZSA9IG1pbWVUeXBlLm1hdGNoKC9eXFxzKihbXjtcXHNdKikoPzo7fFxcc3wkKS8pWzFdLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiB0aGlzLmV4dGVuc2lvbnNbdHlwZV07XG59O1xuXG4vLyBEZWZhdWx0IGluc3RhbmNlXG52YXIgbWltZSA9IG5ldyBNaW1lKCk7XG5cbi8vIERlZmluZSBidWlsdC1pbiB0eXBlc1xubWltZS5kZWZpbmUocmVxdWlyZSgnLi90eXBlcy5qc29uJykpO1xuXG4vLyBEZWZhdWx0IHR5cGVcbm1pbWUuZGVmYXVsdF90eXBlID0gbWltZS5sb29rdXAoJ2JpbicpO1xuXG4vL1xuLy8gQWRkaXRpb25hbCBBUEkgc3BlY2lmaWMgdG8gdGhlIGRlZmF1bHQgaW5zdGFuY2Vcbi8vXG5cbm1pbWUuTWltZSA9IE1pbWU7XG5cbi8qKlxuICogTG9va3VwIGEgY2hhcnNldCBiYXNlZCBvbiBtaW1lIHR5cGUuXG4gKi9cbm1pbWUuY2hhcnNldHMgPSB7XG4gIGxvb2t1cDogZnVuY3Rpb24obWltZVR5cGUsIGZhbGxiYWNrKSB7XG4gICAgLy8gQXNzdW1lIHRleHQgdHlwZXMgYXJlIHV0ZjhcbiAgICByZXR1cm4gKC9edGV4dFxcL3xeYXBwbGljYXRpb25cXC8oamF2YXNjcmlwdHxqc29uKS8pLnRlc3QobWltZVR5cGUpID8gJ1VURi04JyA6IGZhbGxiYWNrO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1pbWU7XG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKCg/OlxcZCspP1xcLT9cXGQ/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnd2Vla3MnOlxuICAgIGNhc2UgJ3dlZWsnOlxuICAgIGNhc2UgJ3cnOlxuICAgICAgcmV0dXJuIG4gKiB3O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuICB9XG4gIHJldHVybiBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbXNBYnMsIG4sIG5hbWUpIHtcbiAgdmFyIGlzUGx1cmFsID0gbXNBYnMgPj0gbiAqIDEuNTtcbiAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG59XG4iLCIvKiFcbiAqIGZvcndhcmRlZFxuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNyBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmb3J3YXJkZWRcblxuLyoqXG4gKiBHZXQgYWxsIGFkZHJlc3NlcyBpbiB0aGUgcmVxdWVzdCwgdXNpbmcgdGhlIGBYLUZvcndhcmRlZC1Gb3JgIGhlYWRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcmVxXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3J3YXJkZWQgKHJlcSkge1xuICBpZiAoIXJlcSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHJlcSBpcyByZXF1aXJlZCcpXG4gIH1cblxuICAvLyBzaW1wbGUgaGVhZGVyIHBhcnNpbmdcbiAgdmFyIHByb3h5QWRkcnMgPSBwYXJzZShyZXEuaGVhZGVyc1sneC1mb3J3YXJkZWQtZm9yJ10gfHwgJycpXG4gIHZhciBzb2NrZXRBZGRyID0gcmVxLmNvbm5lY3Rpb24ucmVtb3RlQWRkcmVzc1xuICB2YXIgYWRkcnMgPSBbc29ja2V0QWRkcl0uY29uY2F0KHByb3h5QWRkcnMpXG5cbiAgLy8gcmV0dXJuIGFsbCBhZGRyZXNzZXNcbiAgcmV0dXJuIGFkZHJzXG59XG5cbi8qKlxuICogUGFyc2UgdGhlIFgtRm9yd2FyZGVkLUZvciBoZWFkZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGhlYWRlclxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZSAoaGVhZGVyKSB7XG4gIHZhciBlbmQgPSBoZWFkZXIubGVuZ3RoXG4gIHZhciBsaXN0ID0gW11cbiAgdmFyIHN0YXJ0ID0gaGVhZGVyLmxlbmd0aFxuXG4gIC8vIGdhdGhlciBhZGRyZXNzZXMsIGJhY2t3YXJkc1xuICBmb3IgKHZhciBpID0gaGVhZGVyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgc3dpdGNoIChoZWFkZXIuY2hhckNvZGVBdChpKSkge1xuICAgICAgY2FzZSAweDIwOiAvKiAgICovXG4gICAgICAgIGlmIChzdGFydCA9PT0gZW5kKSB7XG4gICAgICAgICAgc3RhcnQgPSBlbmQgPSBpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgMHgyYzogLyogLCAqL1xuICAgICAgICBpZiAoc3RhcnQgIT09IGVuZCkge1xuICAgICAgICAgIGxpc3QucHVzaChoZWFkZXIuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpKVxuICAgICAgICB9XG4gICAgICAgIHN0YXJ0ID0gZW5kID0gaVxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgc3RhcnQgPSBpXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgLy8gZmluYWwgYWRkcmVzc1xuICBpZiAoc3RhcnQgIT09IGVuZCkge1xuICAgIGxpc3QucHVzaChoZWFkZXIuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpKVxuICB9XG5cbiAgcmV0dXJuIGxpc3Rcbn1cbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIGV4cGFuZElQdjYsIGlwYWRkciwgaXB2NFBhcnQsIGlwdjRSZWdleGVzLCBpcHY2UGFydCwgaXB2NlJlZ2V4ZXMsIG1hdGNoQ0lEUiwgcm9vdCwgem9uZUluZGV4O1xuXG4gIGlwYWRkciA9IHt9O1xuXG4gIHJvb3QgPSB0aGlzO1xuXG4gIGlmICgodHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUgIT09IG51bGwpICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBpcGFkZHI7XG4gIH0gZWxzZSB7XG4gICAgcm9vdFsnaXBhZGRyJ10gPSBpcGFkZHI7XG4gIH1cblxuICBtYXRjaENJRFIgPSBmdW5jdGlvbihmaXJzdCwgc2Vjb25kLCBwYXJ0U2l6ZSwgY2lkckJpdHMpIHtcbiAgICB2YXIgcGFydCwgc2hpZnQ7XG4gICAgaWYgKGZpcnN0Lmxlbmd0aCAhPT0gc2Vjb25kLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaXBhZGRyOiBjYW5ub3QgbWF0Y2ggQ0lEUiBmb3Igb2JqZWN0cyB3aXRoIGRpZmZlcmVudCBsZW5ndGhzXCIpO1xuICAgIH1cbiAgICBwYXJ0ID0gMDtcbiAgICB3aGlsZSAoY2lkckJpdHMgPiAwKSB7XG4gICAgICBzaGlmdCA9IHBhcnRTaXplIC0gY2lkckJpdHM7XG4gICAgICBpZiAoc2hpZnQgPCAwKSB7XG4gICAgICAgIHNoaWZ0ID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChmaXJzdFtwYXJ0XSA+PiBzaGlmdCAhPT0gc2Vjb25kW3BhcnRdID4+IHNoaWZ0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNpZHJCaXRzIC09IHBhcnRTaXplO1xuICAgICAgcGFydCArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBpcGFkZHIuc3VibmV0TWF0Y2ggPSBmdW5jdGlvbihhZGRyZXNzLCByYW5nZUxpc3QsIGRlZmF1bHROYW1lKSB7XG4gICAgdmFyIGssIGxlbiwgcmFuZ2VOYW1lLCByYW5nZVN1Ym5ldHMsIHN1Ym5ldDtcbiAgICBpZiAoZGVmYXVsdE5hbWUgPT0gbnVsbCkge1xuICAgICAgZGVmYXVsdE5hbWUgPSAndW5pY2FzdCc7XG4gICAgfVxuICAgIGZvciAocmFuZ2VOYW1lIGluIHJhbmdlTGlzdCkge1xuICAgICAgcmFuZ2VTdWJuZXRzID0gcmFuZ2VMaXN0W3JhbmdlTmFtZV07XG4gICAgICBpZiAocmFuZ2VTdWJuZXRzWzBdICYmICEocmFuZ2VTdWJuZXRzWzBdIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgIHJhbmdlU3VibmV0cyA9IFtyYW5nZVN1Ym5ldHNdO1xuICAgICAgfVxuICAgICAgZm9yIChrID0gMCwgbGVuID0gcmFuZ2VTdWJuZXRzLmxlbmd0aDsgayA8IGxlbjsgaysrKSB7XG4gICAgICAgIHN1Ym5ldCA9IHJhbmdlU3VibmV0c1trXTtcbiAgICAgICAgaWYgKGFkZHJlc3Mua2luZCgpID09PSBzdWJuZXRbMF0ua2luZCgpKSB7XG4gICAgICAgICAgaWYgKGFkZHJlc3MubWF0Y2guYXBwbHkoYWRkcmVzcywgc3VibmV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHJhbmdlTmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHROYW1lO1xuICB9O1xuXG4gIGlwYWRkci5JUHY0ID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIElQdjQob2N0ZXRzKSB7XG4gICAgICB2YXIgaywgbGVuLCBvY3RldDtcbiAgICAgIGlmIChvY3RldHMubGVuZ3RoICE9PSA0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImlwYWRkcjogaXB2NCBvY3RldCBjb3VudCBzaG91bGQgYmUgNFwiKTtcbiAgICAgIH1cbiAgICAgIGZvciAoayA9IDAsIGxlbiA9IG9jdGV0cy5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgICAgICBvY3RldCA9IG9jdGV0c1trXTtcbiAgICAgICAgaWYgKCEoKDAgPD0gb2N0ZXQgJiYgb2N0ZXQgPD0gMjU1KSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpcGFkZHI6IGlwdjQgb2N0ZXQgc2hvdWxkIGZpdCBpbiA4IGJpdHNcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMub2N0ZXRzID0gb2N0ZXRzO1xuICAgIH1cblxuICAgIElQdjQucHJvdG90eXBlLmtpbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAnaXB2NCc7XG4gICAgfTtcblxuICAgIElQdjQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5vY3RldHMuam9pbihcIi5cIik7XG4gICAgfTtcblxuICAgIElQdjQucHJvdG90eXBlLnRvTm9ybWFsaXplZFN0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbiAgICB9O1xuXG4gICAgSVB2NC5wcm90b3R5cGUudG9CeXRlQXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLm9jdGV0cy5zbGljZSgwKTtcbiAgICB9O1xuXG4gICAgSVB2NC5wcm90b3R5cGUubWF0Y2ggPSBmdW5jdGlvbihvdGhlciwgY2lkclJhbmdlKSB7XG4gICAgICB2YXIgcmVmO1xuICAgICAgaWYgKGNpZHJSYW5nZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJlZiA9IG90aGVyLCBvdGhlciA9IHJlZlswXSwgY2lkclJhbmdlID0gcmVmWzFdO1xuICAgICAgfVxuICAgICAgaWYgKG90aGVyLmtpbmQoKSAhPT0gJ2lwdjQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImlwYWRkcjogY2Fubm90IG1hdGNoIGlwdjQgYWRkcmVzcyB3aXRoIG5vbi1pcHY0IG9uZVwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaENJRFIodGhpcy5vY3RldHMsIG90aGVyLm9jdGV0cywgOCwgY2lkclJhbmdlKTtcbiAgICB9O1xuXG4gICAgSVB2NC5wcm90b3R5cGUuU3BlY2lhbFJhbmdlcyA9IHtcbiAgICAgIHVuc3BlY2lmaWVkOiBbW25ldyBJUHY0KFswLCAwLCAwLCAwXSksIDhdXSxcbiAgICAgIGJyb2FkY2FzdDogW1tuZXcgSVB2NChbMjU1LCAyNTUsIDI1NSwgMjU1XSksIDMyXV0sXG4gICAgICBtdWx0aWNhc3Q6IFtbbmV3IElQdjQoWzIyNCwgMCwgMCwgMF0pLCA0XV0sXG4gICAgICBsaW5rTG9jYWw6IFtbbmV3IElQdjQoWzE2OSwgMjU0LCAwLCAwXSksIDE2XV0sXG4gICAgICBsb29wYmFjazogW1tuZXcgSVB2NChbMTI3LCAwLCAwLCAwXSksIDhdXSxcbiAgICAgIGNhcnJpZXJHcmFkZU5hdDogW1tuZXcgSVB2NChbMTAwLCA2NCwgMCwgMF0pLCAxMF1dLFxuICAgICAgXCJwcml2YXRlXCI6IFtbbmV3IElQdjQoWzEwLCAwLCAwLCAwXSksIDhdLCBbbmV3IElQdjQoWzE3MiwgMTYsIDAsIDBdKSwgMTJdLCBbbmV3IElQdjQoWzE5MiwgMTY4LCAwLCAwXSksIDE2XV0sXG4gICAgICByZXNlcnZlZDogW1tuZXcgSVB2NChbMTkyLCAwLCAwLCAwXSksIDI0XSwgW25ldyBJUHY0KFsxOTIsIDAsIDIsIDBdKSwgMjRdLCBbbmV3IElQdjQoWzE5MiwgODgsIDk5LCAwXSksIDI0XSwgW25ldyBJUHY0KFsxOTgsIDUxLCAxMDAsIDBdKSwgMjRdLCBbbmV3IElQdjQoWzIwMywgMCwgMTEzLCAwXSksIDI0XSwgW25ldyBJUHY0KFsyNDAsIDAsIDAsIDBdKSwgNF1dXG4gICAgfTtcblxuICAgIElQdjQucHJvdG90eXBlLnJhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXBhZGRyLnN1Ym5ldE1hdGNoKHRoaXMsIHRoaXMuU3BlY2lhbFJhbmdlcyk7XG4gICAgfTtcblxuICAgIElQdjQucHJvdG90eXBlLnRvSVB2NE1hcHBlZEFkZHJlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpcGFkZHIuSVB2Ni5wYXJzZShcIjo6ZmZmZjpcIiArICh0aGlzLnRvU3RyaW5nKCkpKTtcbiAgICB9O1xuXG4gICAgSVB2NC5wcm90b3R5cGUucHJlZml4TGVuZ3RoRnJvbVN1Ym5ldE1hc2sgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjaWRyLCBpLCBrLCBvY3RldCwgc3RvcCwgemVyb3MsIHplcm90YWJsZTtcbiAgICAgIHplcm90YWJsZSA9IHtcbiAgICAgICAgMDogOCxcbiAgICAgICAgMTI4OiA3LFxuICAgICAgICAxOTI6IDYsXG4gICAgICAgIDIyNDogNSxcbiAgICAgICAgMjQwOiA0LFxuICAgICAgICAyNDg6IDMsXG4gICAgICAgIDI1MjogMixcbiAgICAgICAgMjU0OiAxLFxuICAgICAgICAyNTU6IDBcbiAgICAgIH07XG4gICAgICBjaWRyID0gMDtcbiAgICAgIHN0b3AgPSBmYWxzZTtcbiAgICAgIGZvciAoaSA9IGsgPSAzOyBrID49IDA7IGkgPSBrICs9IC0xKSB7XG4gICAgICAgIG9jdGV0ID0gdGhpcy5vY3RldHNbaV07XG4gICAgICAgIGlmIChvY3RldCBpbiB6ZXJvdGFibGUpIHtcbiAgICAgICAgICB6ZXJvcyA9IHplcm90YWJsZVtvY3RldF07XG4gICAgICAgICAgaWYgKHN0b3AgJiYgemVyb3MgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoemVyb3MgIT09IDgpIHtcbiAgICAgICAgICAgIHN0b3AgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaWRyICs9IHplcm9zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMzIgLSBjaWRyO1xuICAgIH07XG5cbiAgICByZXR1cm4gSVB2NDtcblxuICB9KSgpO1xuXG4gIGlwdjRQYXJ0ID0gXCIoMD9cXFxcZCt8MHhbYS1mMC05XSspXCI7XG5cbiAgaXB2NFJlZ2V4ZXMgPSB7XG4gICAgZm91ck9jdGV0OiBuZXcgUmVnRXhwKFwiXlwiICsgaXB2NFBhcnQgKyBcIlxcXFwuXCIgKyBpcHY0UGFydCArIFwiXFxcXC5cIiArIGlwdjRQYXJ0ICsgXCJcXFxcLlwiICsgaXB2NFBhcnQgKyBcIiRcIiwgJ2knKSxcbiAgICBsb25nVmFsdWU6IG5ldyBSZWdFeHAoXCJeXCIgKyBpcHY0UGFydCArIFwiJFwiLCAnaScpXG4gIH07XG5cbiAgaXBhZGRyLklQdjQucGFyc2VyID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdmFyIG1hdGNoLCBwYXJzZUludEF1dG8sIHBhcnQsIHNoaWZ0LCB2YWx1ZTtcbiAgICBwYXJzZUludEF1dG8gPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIGlmIChzdHJpbmdbMF0gPT09IFwiMFwiICYmIHN0cmluZ1sxXSAhPT0gXCJ4XCIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHN0cmluZywgOCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChpcHY0UmVnZXhlcy5mb3VyT2N0ZXQpKSB7XG4gICAgICByZXR1cm4gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaywgbGVuLCByZWYsIHJlc3VsdHM7XG4gICAgICAgIHJlZiA9IG1hdGNoLnNsaWNlKDEsIDYpO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoayA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgICAgICAgIHBhcnQgPSByZWZba107XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKHBhcnNlSW50QXV0byhwYXJ0KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9KSgpO1xuICAgIH0gZWxzZSBpZiAobWF0Y2ggPSBzdHJpbmcubWF0Y2goaXB2NFJlZ2V4ZXMubG9uZ1ZhbHVlKSkge1xuICAgICAgdmFsdWUgPSBwYXJzZUludEF1dG8obWF0Y2hbMV0pO1xuICAgICAgaWYgKHZhbHVlID4gMHhmZmZmZmZmZiB8fCB2YWx1ZSA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaXBhZGRyOiBhZGRyZXNzIG91dHNpZGUgZGVmaW5lZCByYW5nZVwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaywgcmVzdWx0cztcbiAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKHNoaWZ0ID0gayA9IDA7IGsgPD0gMjQ7IHNoaWZ0ID0gayArPSA4KSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKCh2YWx1ZSA+PiBzaGlmdCkgJiAweGZmKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH0pKCkpLnJldmVyc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuXG4gIGlwYWRkci5JUHY2ID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIElQdjYocGFydHMsIHpvbmVJZCkge1xuICAgICAgdmFyIGksIGssIGwsIGxlbiwgcGFydCwgcmVmO1xuICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMTYpIHtcbiAgICAgICAgdGhpcy5wYXJ0cyA9IFtdO1xuICAgICAgICBmb3IgKGkgPSBrID0gMDsgayA8PSAxNDsgaSA9IGsgKz0gMikge1xuICAgICAgICAgIHRoaXMucGFydHMucHVzaCgocGFydHNbaV0gPDwgOCkgfCBwYXJ0c1tpICsgMV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcnRzLmxlbmd0aCA9PT0gOCkge1xuICAgICAgICB0aGlzLnBhcnRzID0gcGFydHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpcGFkZHI6IGlwdjYgcGFydCBjb3VudCBzaG91bGQgYmUgOCBvciAxNlwiKTtcbiAgICAgIH1cbiAgICAgIHJlZiA9IHRoaXMucGFydHM7XG4gICAgICBmb3IgKGwgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBsIDwgbGVuOyBsKyspIHtcbiAgICAgICAgcGFydCA9IHJlZltsXTtcbiAgICAgICAgaWYgKCEoKDAgPD0gcGFydCAmJiBwYXJ0IDw9IDB4ZmZmZikpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaXBhZGRyOiBpcHY2IHBhcnQgc2hvdWxkIGZpdCBpbiAxNiBiaXRzXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoem9uZUlkKSB7XG4gICAgICAgIHRoaXMuem9uZUlkID0gem9uZUlkO1xuICAgICAgfVxuICAgIH1cblxuICAgIElQdjYucHJvdG90eXBlLmtpbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAnaXB2Nic7XG4gICAgfTtcblxuICAgIElQdjYucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50b05vcm1hbGl6ZWRTdHJpbmcoKS5yZXBsYWNlKC8oKF58OikoMCg6fCQpKSspLywgJzo6Jyk7XG4gICAgfTtcblxuICAgIElQdjYucHJvdG90eXBlLnRvUkZDNTk1MlN0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGJlc3RNYXRjaEluZGV4LCBiZXN0TWF0Y2hMZW5ndGgsIG1hdGNoLCByZWdleCwgc3RyaW5nO1xuICAgICAgcmVnZXggPSAvKChefDopKDAoOnwkKSl7Mix9KS9nO1xuICAgICAgc3RyaW5nID0gdGhpcy50b05vcm1hbGl6ZWRTdHJpbmcoKTtcbiAgICAgIGJlc3RNYXRjaEluZGV4ID0gMDtcbiAgICAgIGJlc3RNYXRjaExlbmd0aCA9IC0xO1xuICAgICAgd2hpbGUgKChtYXRjaCA9IHJlZ2V4LmV4ZWMoc3RyaW5nKSkpIHtcbiAgICAgICAgaWYgKG1hdGNoWzBdLmxlbmd0aCA+IGJlc3RNYXRjaExlbmd0aCkge1xuICAgICAgICAgIGJlc3RNYXRjaEluZGV4ID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgYmVzdE1hdGNoTGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYmVzdE1hdGNoTGVuZ3RoIDwgMCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5zdWJzdHJpbmcoMCwgYmVzdE1hdGNoSW5kZXgpICsgJzo6JyArIHN0cmluZy5zdWJzdHJpbmcoYmVzdE1hdGNoSW5kZXggKyBiZXN0TWF0Y2hMZW5ndGgpO1xuICAgIH07XG5cbiAgICBJUHY2LnByb3RvdHlwZS50b0J5dGVBcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGJ5dGVzLCBrLCBsZW4sIHBhcnQsIHJlZjtcbiAgICAgIGJ5dGVzID0gW107XG4gICAgICByZWYgPSB0aGlzLnBhcnRzO1xuICAgICAgZm9yIChrID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgayA8IGxlbjsgaysrKSB7XG4gICAgICAgIHBhcnQgPSByZWZba107XG4gICAgICAgIGJ5dGVzLnB1c2gocGFydCA+PiA4KTtcbiAgICAgICAgYnl0ZXMucHVzaChwYXJ0ICYgMHhmZik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfTtcblxuICAgIElQdjYucHJvdG90eXBlLnRvTm9ybWFsaXplZFN0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFkZHIsIHBhcnQsIHN1ZmZpeDtcbiAgICAgIGFkZHIgPSAoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaywgbGVuLCByZWYsIHJlc3VsdHM7XG4gICAgICAgIHJlZiA9IHRoaXMucGFydHM7XG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChrID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgayA8IGxlbjsgaysrKSB7XG4gICAgICAgICAgcGFydCA9IHJlZltrXTtcbiAgICAgICAgICByZXN1bHRzLnB1c2gocGFydC50b1N0cmluZygxNikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSkuY2FsbCh0aGlzKSkuam9pbihcIjpcIik7XG4gICAgICBzdWZmaXggPSAnJztcbiAgICAgIGlmICh0aGlzLnpvbmVJZCkge1xuICAgICAgICBzdWZmaXggPSAnJScgKyB0aGlzLnpvbmVJZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhZGRyICsgc3VmZml4O1xuICAgIH07XG5cbiAgICBJUHY2LnByb3RvdHlwZS50b0ZpeGVkTGVuZ3RoU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYWRkciwgcGFydCwgc3VmZml4O1xuICAgICAgYWRkciA9ICgoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBrLCBsZW4sIHJlZiwgcmVzdWx0cztcbiAgICAgICAgcmVmID0gdGhpcy5wYXJ0cztcbiAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKGsgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgICBwYXJ0ID0gcmVmW2tdO1xuICAgICAgICAgIHJlc3VsdHMucHVzaChwYXJ0LnRvU3RyaW5nKDE2KS5wYWRTdGFydCg0LCAnMCcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH0pLmNhbGwodGhpcykpLmpvaW4oXCI6XCIpO1xuICAgICAgc3VmZml4ID0gJyc7XG4gICAgICBpZiAodGhpcy56b25lSWQpIHtcbiAgICAgICAgc3VmZml4ID0gJyUnICsgdGhpcy56b25lSWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWRkciArIHN1ZmZpeDtcbiAgICB9O1xuXG4gICAgSVB2Ni5wcm90b3R5cGUubWF0Y2ggPSBmdW5jdGlvbihvdGhlciwgY2lkclJhbmdlKSB7XG4gICAgICB2YXIgcmVmO1xuICAgICAgaWYgKGNpZHJSYW5nZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJlZiA9IG90aGVyLCBvdGhlciA9IHJlZlswXSwgY2lkclJhbmdlID0gcmVmWzFdO1xuICAgICAgfVxuICAgICAgaWYgKG90aGVyLmtpbmQoKSAhPT0gJ2lwdjYnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImlwYWRkcjogY2Fubm90IG1hdGNoIGlwdjYgYWRkcmVzcyB3aXRoIG5vbi1pcHY2IG9uZVwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaENJRFIodGhpcy5wYXJ0cywgb3RoZXIucGFydHMsIDE2LCBjaWRyUmFuZ2UpO1xuICAgIH07XG5cbiAgICBJUHY2LnByb3RvdHlwZS5TcGVjaWFsUmFuZ2VzID0ge1xuICAgICAgdW5zcGVjaWZpZWQ6IFtuZXcgSVB2NihbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0pLCAxMjhdLFxuICAgICAgbGlua0xvY2FsOiBbbmV3IElQdjYoWzB4ZmU4MCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0pLCAxMF0sXG4gICAgICBtdWx0aWNhc3Q6IFtuZXcgSVB2NihbMHhmZjAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSksIDhdLFxuICAgICAgbG9vcGJhY2s6IFtuZXcgSVB2NihbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMV0pLCAxMjhdLFxuICAgICAgdW5pcXVlTG9jYWw6IFtuZXcgSVB2NihbMHhmYzAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSksIDddLFxuICAgICAgaXB2NE1hcHBlZDogW25ldyBJUHY2KFswLCAwLCAwLCAwLCAwLCAweGZmZmYsIDAsIDBdKSwgOTZdLFxuICAgICAgcmZjNjE0NTogW25ldyBJUHY2KFswLCAwLCAwLCAwLCAweGZmZmYsIDAsIDAsIDBdKSwgOTZdLFxuICAgICAgcmZjNjA1MjogW25ldyBJUHY2KFsweDY0LCAweGZmOWIsIDAsIDAsIDAsIDAsIDAsIDBdKSwgOTZdLFxuICAgICAgJzZ0bzQnOiBbbmV3IElQdjYoWzB4MjAwMiwgMCwgMCwgMCwgMCwgMCwgMCwgMF0pLCAxNl0sXG4gICAgICB0ZXJlZG86IFtuZXcgSVB2NihbMHgyMDAxLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSksIDMyXSxcbiAgICAgIHJlc2VydmVkOiBbW25ldyBJUHY2KFsweDIwMDEsIDB4ZGI4LCAwLCAwLCAwLCAwLCAwLCAwXSksIDMyXV1cbiAgICB9O1xuXG4gICAgSVB2Ni5wcm90b3R5cGUucmFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpcGFkZHIuc3VibmV0TWF0Y2godGhpcywgdGhpcy5TcGVjaWFsUmFuZ2VzKTtcbiAgICB9O1xuXG4gICAgSVB2Ni5wcm90b3R5cGUuaXNJUHY0TWFwcGVkQWRkcmVzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucmFuZ2UoKSA9PT0gJ2lwdjRNYXBwZWQnO1xuICAgIH07XG5cbiAgICBJUHY2LnByb3RvdHlwZS50b0lQdjRBZGRyZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaGlnaCwgbG93LCByZWY7XG4gICAgICBpZiAoIXRoaXMuaXNJUHY0TWFwcGVkQWRkcmVzcygpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImlwYWRkcjogdHJ5aW5nIHRvIGNvbnZlcnQgYSBnZW5lcmljIGlwdjYgYWRkcmVzcyB0byBpcHY0XCIpO1xuICAgICAgfVxuICAgICAgcmVmID0gdGhpcy5wYXJ0cy5zbGljZSgtMiksIGhpZ2ggPSByZWZbMF0sIGxvdyA9IHJlZlsxXTtcbiAgICAgIHJldHVybiBuZXcgaXBhZGRyLklQdjQoW2hpZ2ggPj4gOCwgaGlnaCAmIDB4ZmYsIGxvdyA+PiA4LCBsb3cgJiAweGZmXSk7XG4gICAgfTtcblxuICAgIElQdjYucHJvdG90eXBlLnByZWZpeExlbmd0aEZyb21TdWJuZXRNYXNrID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY2lkciwgaSwgaywgcGFydCwgc3RvcCwgemVyb3MsIHplcm90YWJsZTtcbiAgICAgIHplcm90YWJsZSA9IHtcbiAgICAgICAgMDogMTYsXG4gICAgICAgIDMyNzY4OiAxNSxcbiAgICAgICAgNDkxNTI6IDE0LFxuICAgICAgICA1NzM0NDogMTMsXG4gICAgICAgIDYxNDQwOiAxMixcbiAgICAgICAgNjM0ODg6IDExLFxuICAgICAgICA2NDUxMjogMTAsXG4gICAgICAgIDY1MDI0OiA5LFxuICAgICAgICA2NTI4MDogOCxcbiAgICAgICAgNjU0MDg6IDcsXG4gICAgICAgIDY1NDcyOiA2LFxuICAgICAgICA2NTUwNDogNSxcbiAgICAgICAgNjU1MjA6IDQsXG4gICAgICAgIDY1NTI4OiAzLFxuICAgICAgICA2NTUzMjogMixcbiAgICAgICAgNjU1MzQ6IDEsXG4gICAgICAgIDY1NTM1OiAwXG4gICAgICB9O1xuICAgICAgY2lkciA9IDA7XG4gICAgICBzdG9wID0gZmFsc2U7XG4gICAgICBmb3IgKGkgPSBrID0gNzsgayA+PSAwOyBpID0gayArPSAtMSkge1xuICAgICAgICBwYXJ0ID0gdGhpcy5wYXJ0c1tpXTtcbiAgICAgICAgaWYgKHBhcnQgaW4gemVyb3RhYmxlKSB7XG4gICAgICAgICAgemVyb3MgPSB6ZXJvdGFibGVbcGFydF07XG4gICAgICAgICAgaWYgKHN0b3AgJiYgemVyb3MgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoemVyb3MgIT09IDE2KSB7XG4gICAgICAgICAgICBzdG9wID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2lkciArPSB6ZXJvcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIDEyOCAtIGNpZHI7XG4gICAgfTtcblxuICAgIHJldHVybiBJUHY2O1xuXG4gIH0pKCk7XG5cbiAgaXB2NlBhcnQgPSBcIig/OlswLTlhLWZdKzo6PykrXCI7XG5cbiAgem9uZUluZGV4ID0gXCIlWzAtOWEtel17MSx9XCI7XG5cbiAgaXB2NlJlZ2V4ZXMgPSB7XG4gICAgem9uZUluZGV4OiBuZXcgUmVnRXhwKHpvbmVJbmRleCwgJ2knKSxcbiAgICBcIm5hdGl2ZVwiOiBuZXcgUmVnRXhwKFwiXig6Oik/KFwiICsgaXB2NlBhcnQgKyBcIik/KFswLTlhLWZdKyk/KDo6KT8oXCIgKyB6b25lSW5kZXggKyBcIik/JFwiLCAnaScpLFxuICAgIHRyYW5zaXRpb25hbDogbmV3IFJlZ0V4cCgoXCJeKCg/OlwiICsgaXB2NlBhcnQgKyBcIil8KD86OjopKD86XCIgKyBpcHY2UGFydCArIFwiKT8pXCIpICsgKGlwdjRQYXJ0ICsgXCJcXFxcLlwiICsgaXB2NFBhcnQgKyBcIlxcXFwuXCIgKyBpcHY0UGFydCArIFwiXFxcXC5cIiArIGlwdjRQYXJ0KSArIChcIihcIiArIHpvbmVJbmRleCArIFwiKT8kXCIpLCAnaScpXG4gIH07XG5cbiAgZXhwYW5kSVB2NiA9IGZ1bmN0aW9uKHN0cmluZywgcGFydHMpIHtcbiAgICB2YXIgY29sb25Db3VudCwgbGFzdENvbG9uLCBwYXJ0LCByZXBsYWNlbWVudCwgcmVwbGFjZW1lbnRDb3VudCwgem9uZUlkO1xuICAgIGlmIChzdHJpbmcuaW5kZXhPZignOjonKSAhPT0gc3RyaW5nLmxhc3RJbmRleE9mKCc6OicpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgem9uZUlkID0gKHN0cmluZy5tYXRjaChpcHY2UmVnZXhlc1snem9uZUluZGV4J10pIHx8IFtdKVswXTtcbiAgICBpZiAoem9uZUlkKSB7XG4gICAgICB6b25lSWQgPSB6b25lSWQuc3Vic3RyaW5nKDEpO1xuICAgICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoLyUuKyQvLCAnJyk7XG4gICAgfVxuICAgIGNvbG9uQ291bnQgPSAwO1xuICAgIGxhc3RDb2xvbiA9IC0xO1xuICAgIHdoaWxlICgobGFzdENvbG9uID0gc3RyaW5nLmluZGV4T2YoJzonLCBsYXN0Q29sb24gKyAxKSkgPj0gMCkge1xuICAgICAgY29sb25Db3VudCsrO1xuICAgIH1cbiAgICBpZiAoc3RyaW5nLnN1YnN0cigwLCAyKSA9PT0gJzo6Jykge1xuICAgICAgY29sb25Db3VudC0tO1xuICAgIH1cbiAgICBpZiAoc3RyaW5nLnN1YnN0cigtMiwgMikgPT09ICc6OicpIHtcbiAgICAgIGNvbG9uQ291bnQtLTtcbiAgICB9XG4gICAgaWYgKGNvbG9uQ291bnQgPiBwYXJ0cykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJlcGxhY2VtZW50Q291bnQgPSBwYXJ0cyAtIGNvbG9uQ291bnQ7XG4gICAgcmVwbGFjZW1lbnQgPSAnOic7XG4gICAgd2hpbGUgKHJlcGxhY2VtZW50Q291bnQtLSkge1xuICAgICAgcmVwbGFjZW1lbnQgKz0gJzA6JztcbiAgICB9XG4gICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoJzo6JywgcmVwbGFjZW1lbnQpO1xuICAgIGlmIChzdHJpbmdbMF0gPT09ICc6Jykge1xuICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKDEpO1xuICAgIH1cbiAgICBpZiAoc3RyaW5nW3N0cmluZy5sZW5ndGggLSAxXSA9PT0gJzonKSB7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2UoMCwgLTEpO1xuICAgIH1cbiAgICBwYXJ0cyA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBrLCBsZW4sIHJlZiwgcmVzdWx0cztcbiAgICAgIHJlZiA9IHN0cmluZy5zcGxpdChcIjpcIik7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGsgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgcGFydCA9IHJlZltrXTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHBhcnNlSW50KHBhcnQsIDE2KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9KSgpO1xuICAgIHJldHVybiB7XG4gICAgICBwYXJ0czogcGFydHMsXG4gICAgICB6b25lSWQ6IHpvbmVJZFxuICAgIH07XG4gIH07XG5cbiAgaXBhZGRyLklQdjYucGFyc2VyID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdmFyIGFkZHIsIGssIGxlbiwgbWF0Y2gsIG9jdGV0LCBvY3RldHMsIHpvbmVJZDtcbiAgICBpZiAoaXB2NlJlZ2V4ZXNbJ25hdGl2ZSddLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgcmV0dXJuIGV4cGFuZElQdjYoc3RyaW5nLCA4KTtcbiAgICB9IGVsc2UgaWYgKG1hdGNoID0gc3RyaW5nLm1hdGNoKGlwdjZSZWdleGVzWyd0cmFuc2l0aW9uYWwnXSkpIHtcbiAgICAgIHpvbmVJZCA9IG1hdGNoWzZdIHx8ICcnO1xuICAgICAgYWRkciA9IGV4cGFuZElQdjYobWF0Y2hbMV0uc2xpY2UoMCwgLTEpICsgem9uZUlkLCA2KTtcbiAgICAgIGlmIChhZGRyLnBhcnRzKSB7XG4gICAgICAgIG9jdGV0cyA9IFtwYXJzZUludChtYXRjaFsyXSksIHBhcnNlSW50KG1hdGNoWzNdKSwgcGFyc2VJbnQobWF0Y2hbNF0pLCBwYXJzZUludChtYXRjaFs1XSldO1xuICAgICAgICBmb3IgKGsgPSAwLCBsZW4gPSBvY3RldHMubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgICBvY3RldCA9IG9jdGV0c1trXTtcbiAgICAgICAgICBpZiAoISgoMCA8PSBvY3RldCAmJiBvY3RldCA8PSAyNTUpKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFkZHIucGFydHMucHVzaChvY3RldHNbMF0gPDwgOCB8IG9jdGV0c1sxXSk7XG4gICAgICAgIGFkZHIucGFydHMucHVzaChvY3RldHNbMl0gPDwgOCB8IG9jdGV0c1szXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGFydHM6IGFkZHIucGFydHMsXG4gICAgICAgICAgem9uZUlkOiBhZGRyLnpvbmVJZFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBpcGFkZHIuSVB2NC5pc0lQdjQgPSBpcGFkZHIuSVB2Ni5pc0lQdjYgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZXIoc3RyaW5nKSAhPT0gbnVsbDtcbiAgfTtcblxuICBpcGFkZHIuSVB2NC5pc1ZhbGlkID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdmFyIGU7XG4gICAgdHJ5IHtcbiAgICAgIG5ldyB0aGlzKHRoaXMucGFyc2VyKHN0cmluZykpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgICBlID0gZXJyb3IxO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICBpcGFkZHIuSVB2NC5pc1ZhbGlkRm91clBhcnREZWNpbWFsID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgaWYgKGlwYWRkci5JUHY0LmlzVmFsaWQoc3RyaW5nKSAmJiBzdHJpbmcubWF0Y2goL14oMHxbMS05XVxcZCopKFxcLigwfFsxLTldXFxkKikpezN9JC8pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICBpcGFkZHIuSVB2Ni5pc1ZhbGlkID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdmFyIGFkZHIsIGU7XG4gICAgaWYgKHR5cGVvZiBzdHJpbmcgPT09IFwic3RyaW5nXCIgJiYgc3RyaW5nLmluZGV4T2YoXCI6XCIpID09PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgYWRkciA9IHRoaXMucGFyc2VyKHN0cmluZyk7XG4gICAgICBuZXcgdGhpcyhhZGRyLnBhcnRzLCBhZGRyLnpvbmVJZCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgIGUgPSBlcnJvcjE7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGlwYWRkci5JUHY0LnBhcnNlID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdmFyIHBhcnRzO1xuICAgIHBhcnRzID0gdGhpcy5wYXJzZXIoc3RyaW5nKTtcbiAgICBpZiAocGFydHMgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlwYWRkcjogc3RyaW5nIGlzIG5vdCBmb3JtYXR0ZWQgbGlrZSBpcCBhZGRyZXNzXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMocGFydHMpO1xuICB9O1xuXG4gIGlwYWRkci5JUHY2LnBhcnNlID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdmFyIGFkZHI7XG4gICAgYWRkciA9IHRoaXMucGFyc2VyKHN0cmluZyk7XG4gICAgaWYgKGFkZHIucGFydHMgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlwYWRkcjogc3RyaW5nIGlzIG5vdCBmb3JtYXR0ZWQgbGlrZSBpcCBhZGRyZXNzXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMoYWRkci5wYXJ0cywgYWRkci56b25lSWQpO1xuICB9O1xuXG4gIGlwYWRkci5JUHY0LnBhcnNlQ0lEUiA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHZhciBtYXNrTGVuZ3RoLCBtYXRjaCwgcGFyc2VkO1xuICAgIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaCgvXiguKylcXC8oXFxkKykkLykpIHtcbiAgICAgIG1hc2tMZW5ndGggPSBwYXJzZUludChtYXRjaFsyXSk7XG4gICAgICBpZiAobWFza0xlbmd0aCA+PSAwICYmIG1hc2tMZW5ndGggPD0gMzIpIHtcbiAgICAgICAgcGFyc2VkID0gW3RoaXMucGFyc2UobWF0Y2hbMV0pLCBtYXNrTGVuZ3RoXTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHBhcnNlZCwgJ3RvU3RyaW5nJywge1xuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmpvaW4oJy8nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJpcGFkZHI6IHN0cmluZyBpcyBub3QgZm9ybWF0dGVkIGxpa2UgYW4gSVB2NCBDSURSIHJhbmdlXCIpO1xuICB9O1xuXG4gIGlwYWRkci5JUHY0LnN1Ym5ldE1hc2tGcm9tUHJlZml4TGVuZ3RoID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgdmFyIGZpbGxlZE9jdGV0Q291bnQsIGosIG9jdGV0cztcbiAgICBwcmVmaXggPSBwYXJzZUludChwcmVmaXgpO1xuICAgIGlmIChwcmVmaXggPCAwIHx8IHByZWZpeCA+IDMyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2lwYWRkcjogaW52YWxpZCBJUHY0IHByZWZpeCBsZW5ndGgnKTtcbiAgICB9XG4gICAgb2N0ZXRzID0gWzAsIDAsIDAsIDBdO1xuICAgIGogPSAwO1xuICAgIGZpbGxlZE9jdGV0Q291bnQgPSBNYXRoLmZsb29yKHByZWZpeCAvIDgpO1xuICAgIHdoaWxlIChqIDwgZmlsbGVkT2N0ZXRDb3VudCkge1xuICAgICAgb2N0ZXRzW2pdID0gMjU1O1xuICAgICAgaisrO1xuICAgIH1cbiAgICBpZiAoZmlsbGVkT2N0ZXRDb3VudCA8IDQpIHtcbiAgICAgIG9jdGV0c1tmaWxsZWRPY3RldENvdW50XSA9IE1hdGgucG93KDIsIHByZWZpeCAlIDgpIC0gMSA8PCA4IC0gKHByZWZpeCAlIDgpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMob2N0ZXRzKTtcbiAgfTtcblxuICBpcGFkZHIuSVB2NC5icm9hZGNhc3RBZGRyZXNzRnJvbUNJRFIgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB2YXIgY2lkciwgZXJyb3IsIGksIGlwSW50ZXJmYWNlT2N0ZXRzLCBvY3RldHMsIHN1Ym5ldE1hc2tPY3RldHM7XG4gICAgdHJ5IHtcbiAgICAgIGNpZHIgPSB0aGlzLnBhcnNlQ0lEUihzdHJpbmcpO1xuICAgICAgaXBJbnRlcmZhY2VPY3RldHMgPSBjaWRyWzBdLnRvQnl0ZUFycmF5KCk7XG4gICAgICBzdWJuZXRNYXNrT2N0ZXRzID0gdGhpcy5zdWJuZXRNYXNrRnJvbVByZWZpeExlbmd0aChjaWRyWzFdKS50b0J5dGVBcnJheSgpO1xuICAgICAgb2N0ZXRzID0gW107XG4gICAgICBpID0gMDtcbiAgICAgIHdoaWxlIChpIDwgNCkge1xuICAgICAgICBvY3RldHMucHVzaChwYXJzZUludChpcEludGVyZmFjZU9jdGV0c1tpXSwgMTApIHwgcGFyc2VJbnQoc3VibmV0TWFza09jdGV0c1tpXSwgMTApIF4gMjU1KTtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyB0aGlzKG9jdGV0cyk7XG4gICAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgICBlcnJvciA9IGVycm9yMTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaXBhZGRyOiB0aGUgYWRkcmVzcyBkb2VzIG5vdCBoYXZlIElQdjQgQ0lEUiBmb3JtYXQnKTtcbiAgICB9XG4gIH07XG5cbiAgaXBhZGRyLklQdjQubmV0d29ya0FkZHJlc3NGcm9tQ0lEUiA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHZhciBjaWRyLCBlcnJvciwgaSwgaXBJbnRlcmZhY2VPY3RldHMsIG9jdGV0cywgc3VibmV0TWFza09jdGV0cztcbiAgICB0cnkge1xuICAgICAgY2lkciA9IHRoaXMucGFyc2VDSURSKHN0cmluZyk7XG4gICAgICBpcEludGVyZmFjZU9jdGV0cyA9IGNpZHJbMF0udG9CeXRlQXJyYXkoKTtcbiAgICAgIHN1Ym5ldE1hc2tPY3RldHMgPSB0aGlzLnN1Ym5ldE1hc2tGcm9tUHJlZml4TGVuZ3RoKGNpZHJbMV0pLnRvQnl0ZUFycmF5KCk7XG4gICAgICBvY3RldHMgPSBbXTtcbiAgICAgIGkgPSAwO1xuICAgICAgd2hpbGUgKGkgPCA0KSB7XG4gICAgICAgIG9jdGV0cy5wdXNoKHBhcnNlSW50KGlwSW50ZXJmYWNlT2N0ZXRzW2ldLCAxMCkgJiBwYXJzZUludChzdWJuZXRNYXNrT2N0ZXRzW2ldLCAxMCkpO1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IHRoaXMob2N0ZXRzKTtcbiAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgIGVycm9yID0gZXJyb3IxO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpcGFkZHI6IHRoZSBhZGRyZXNzIGRvZXMgbm90IGhhdmUgSVB2NCBDSURSIGZvcm1hdCcpO1xuICAgIH1cbiAgfTtcblxuICBpcGFkZHIuSVB2Ni5wYXJzZUNJRFIgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB2YXIgbWFza0xlbmd0aCwgbWF0Y2gsIHBhcnNlZDtcbiAgICBpZiAobWF0Y2ggPSBzdHJpbmcubWF0Y2goL14oLispXFwvKFxcZCspJC8pKSB7XG4gICAgICBtYXNrTGVuZ3RoID0gcGFyc2VJbnQobWF0Y2hbMl0pO1xuICAgICAgaWYgKG1hc2tMZW5ndGggPj0gMCAmJiBtYXNrTGVuZ3RoIDw9IDEyOCkge1xuICAgICAgICBwYXJzZWQgPSBbdGhpcy5wYXJzZShtYXRjaFsxXSksIG1hc2tMZW5ndGhdO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocGFyc2VkLCAndG9TdHJpbmcnLCB7XG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuam9pbignLycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcImlwYWRkcjogc3RyaW5nIGlzIG5vdCBmb3JtYXR0ZWQgbGlrZSBhbiBJUHY2IENJRFIgcmFuZ2VcIik7XG4gIH07XG5cbiAgaXBhZGRyLmlzVmFsaWQgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICByZXR1cm4gaXBhZGRyLklQdjYuaXNWYWxpZChzdHJpbmcpIHx8IGlwYWRkci5JUHY0LmlzVmFsaWQoc3RyaW5nKTtcbiAgfTtcblxuICBpcGFkZHIucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICBpZiAoaXBhZGRyLklQdjYuaXNWYWxpZChzdHJpbmcpKSB7XG4gICAgICByZXR1cm4gaXBhZGRyLklQdjYucGFyc2Uoc3RyaW5nKTtcbiAgICB9IGVsc2UgaWYgKGlwYWRkci5JUHY0LmlzVmFsaWQoc3RyaW5nKSkge1xuICAgICAgcmV0dXJuIGlwYWRkci5JUHY0LnBhcnNlKHN0cmluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlwYWRkcjogdGhlIGFkZHJlc3MgaGFzIG5laXRoZXIgSVB2NiBub3IgSVB2NCBmb3JtYXRcIik7XG4gICAgfVxuICB9O1xuXG4gIGlwYWRkci5wYXJzZUNJRFIgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB2YXIgZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGlwYWRkci5JUHY2LnBhcnNlQ0lEUihzdHJpbmcpO1xuICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgZSA9IGVycm9yMTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBpcGFkZHIuSVB2NC5wYXJzZUNJRFIoc3RyaW5nKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgICBlID0gZXJyb3IxO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpcGFkZHI6IHRoZSBhZGRyZXNzIGhhcyBuZWl0aGVyIElQdjYgbm9yIElQdjQgQ0lEUiBmb3JtYXRcIik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGlwYWRkci5mcm9tQnl0ZUFycmF5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICB2YXIgbGVuZ3RoO1xuICAgIGxlbmd0aCA9IGJ5dGVzLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoID09PSA0KSB7XG4gICAgICByZXR1cm4gbmV3IGlwYWRkci5JUHY0KGJ5dGVzKTtcbiAgICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gMTYpIHtcbiAgICAgIHJldHVybiBuZXcgaXBhZGRyLklQdjYoYnl0ZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpcGFkZHI6IHRoZSBiaW5hcnkgaW5wdXQgaXMgbmVpdGhlciBhbiBJUHY2IG5vciBJUHY0IGFkZHJlc3NcIik7XG4gICAgfVxuICB9O1xuXG4gIGlwYWRkci5wcm9jZXNzID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdmFyIGFkZHI7XG4gICAgYWRkciA9IHRoaXMucGFyc2Uoc3RyaW5nKTtcbiAgICBpZiAoYWRkci5raW5kKCkgPT09ICdpcHY2JyAmJiBhZGRyLmlzSVB2NE1hcHBlZEFkZHJlc3MoKSkge1xuICAgICAgcmV0dXJuIGFkZHIudG9JUHY0QWRkcmVzcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYWRkcjtcbiAgICB9XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIvKiFcbiAqIGV4cHJlc3NcbiAqIENvcHlyaWdodChjKSAyMDA5LTIwMTMgVEogSG9sb3dheWNodWtcbiAqIENvcHlyaWdodChjKSAyMDEzIFJvbWFuIFNodHlsbWFuXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGFjY2VwdHMgPSByZXF1aXJlKCdhY2NlcHRzJyk7XG52YXIgZGVwcmVjYXRlID0gcmVxdWlyZSgnZGVwZCcpKCdleHByZXNzJyk7XG52YXIgaXNJUCA9IHJlcXVpcmUoJ25ldCcpLmlzSVA7XG52YXIgdHlwZWlzID0gcmVxdWlyZSgndHlwZS1pcycpO1xudmFyIGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG52YXIgZnJlc2ggPSByZXF1aXJlKCdmcmVzaCcpO1xudmFyIHBhcnNlUmFuZ2UgPSByZXF1aXJlKCdyYW5nZS1wYXJzZXInKTtcbnZhciBwYXJzZSA9IHJlcXVpcmUoJ3BhcnNldXJsJyk7XG52YXIgcHJveHlhZGRyID0gcmVxdWlyZSgncHJveHktYWRkcicpO1xuXG4vKipcbiAqIFJlcXVlc3QgcHJvdG90eXBlLlxuICogQHB1YmxpY1xuICovXG5cbnZhciByZXEgPSBPYmplY3QuY3JlYXRlKGh0dHAuSW5jb21pbmdNZXNzYWdlLnByb3RvdHlwZSlcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcVxuXG4vKipcbiAqIFJldHVybiByZXF1ZXN0IGhlYWRlci5cbiAqXG4gKiBUaGUgYFJlZmVycmVyYCBoZWFkZXIgZmllbGQgaXMgc3BlY2lhbC1jYXNlZCxcbiAqIGJvdGggYFJlZmVycmVyYCBhbmQgYFJlZmVyZXJgIGFyZSBpbnRlcmNoYW5nZWFibGUuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgIHJlcS5nZXQoJ0NvbnRlbnQtVHlwZScpO1xuICogICAgIC8vID0+IFwidGV4dC9wbGFpblwiXG4gKlxuICogICAgIHJlcS5nZXQoJ2NvbnRlbnQtdHlwZScpO1xuICogICAgIC8vID0+IFwidGV4dC9wbGFpblwiXG4gKlxuICogICAgIHJlcS5nZXQoJ1NvbWV0aGluZycpO1xuICogICAgIC8vID0+IHVuZGVmaW5lZFxuICpcbiAqIEFsaWFzZWQgYXMgYHJlcS5oZWFkZXIoKWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5yZXEuZ2V0ID1cbnJlcS5oZWFkZXIgPSBmdW5jdGlvbiBoZWFkZXIobmFtZSkge1xuICBpZiAoIW5hbWUpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCduYW1lIGFyZ3VtZW50IGlzIHJlcXVpcmVkIHRvIHJlcS5nZXQnKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCduYW1lIG11c3QgYmUgYSBzdHJpbmcgdG8gcmVxLmdldCcpO1xuICB9XG5cbiAgdmFyIGxjID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gIHN3aXRjaCAobGMpIHtcbiAgICBjYXNlICdyZWZlcmVyJzpcbiAgICBjYXNlICdyZWZlcnJlcic6XG4gICAgICByZXR1cm4gdGhpcy5oZWFkZXJzLnJlZmVycmVyXG4gICAgICAgIHx8IHRoaXMuaGVhZGVycy5yZWZlcmVyO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdGhpcy5oZWFkZXJzW2xjXTtcbiAgfVxufTtcblxuLyoqXG4gKiBUbyBkbzogdXBkYXRlIGRvY3MuXG4gKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGB0eXBlKHMpYCBpcyBhY2NlcHRhYmxlLCByZXR1cm5pbmdcbiAqIHRoZSBiZXN0IG1hdGNoIHdoZW4gdHJ1ZSwgb3RoZXJ3aXNlIGB1bmRlZmluZWRgLCBpbiB3aGljaFxuICogY2FzZSB5b3Ugc2hvdWxkIHJlc3BvbmQgd2l0aCA0MDYgXCJOb3QgQWNjZXB0YWJsZVwiLlxuICpcbiAqIFRoZSBgdHlwZWAgdmFsdWUgbWF5IGJlIGEgc2luZ2xlIE1JTUUgdHlwZSBzdHJpbmdcbiAqIHN1Y2ggYXMgXCJhcHBsaWNhdGlvbi9qc29uXCIsIGFuIGV4dGVuc2lvbiBuYW1lXG4gKiBzdWNoIGFzIFwianNvblwiLCBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IHN1Y2ggYXMgXCJqc29uLCBodG1sLCB0ZXh0L3BsYWluXCIsXG4gKiBhbiBhcmd1bWVudCBsaXN0IHN1Y2ggYXMgYFwianNvblwiLCBcImh0bWxcIiwgXCJ0ZXh0L3BsYWluXCJgLFxuICogb3IgYW4gYXJyYXkgYFtcImpzb25cIiwgXCJodG1sXCIsIFwidGV4dC9wbGFpblwiXWAuIFdoZW4gYSBsaXN0XG4gKiBvciBhcnJheSBpcyBnaXZlbiwgdGhlIF9iZXN0XyBtYXRjaCwgaWYgYW55IGlzIHJldHVybmVkLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAvLyBBY2NlcHQ6IHRleHQvaHRtbFxuICogICAgIHJlcS5hY2NlcHRzKCdodG1sJyk7XG4gKiAgICAgLy8gPT4gXCJodG1sXCJcbiAqXG4gKiAgICAgLy8gQWNjZXB0OiB0ZXh0LyosIGFwcGxpY2F0aW9uL2pzb25cbiAqICAgICByZXEuYWNjZXB0cygnaHRtbCcpO1xuICogICAgIC8vID0+IFwiaHRtbFwiXG4gKiAgICAgcmVxLmFjY2VwdHMoJ3RleHQvaHRtbCcpO1xuICogICAgIC8vID0+IFwidGV4dC9odG1sXCJcbiAqICAgICByZXEuYWNjZXB0cygnanNvbiwgdGV4dCcpO1xuICogICAgIC8vID0+IFwianNvblwiXG4gKiAgICAgcmVxLmFjY2VwdHMoJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAqICAgICAvLyA9PiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICpcbiAqICAgICAvLyBBY2NlcHQ6IHRleHQvKiwgYXBwbGljYXRpb24vanNvblxuICogICAgIHJlcS5hY2NlcHRzKCdpbWFnZS9wbmcnKTtcbiAqICAgICByZXEuYWNjZXB0cygncG5nJyk7XG4gKiAgICAgLy8gPT4gdW5kZWZpbmVkXG4gKlxuICogICAgIC8vIEFjY2VwdDogdGV4dC8qO3E9LjUsIGFwcGxpY2F0aW9uL2pzb25cbiAqICAgICByZXEuYWNjZXB0cyhbJ2h0bWwnLCAnanNvbiddKTtcbiAqICAgICByZXEuYWNjZXB0cygnaHRtbCcsICdqc29uJyk7XG4gKiAgICAgcmVxLmFjY2VwdHMoJ2h0bWwsIGpzb24nKTtcbiAqICAgICAvLyA9PiBcImpzb25cIlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSB0eXBlKHMpXG4gKiBAcmV0dXJuIHtTdHJpbmd8QXJyYXl8Qm9vbGVhbn1cbiAqIEBwdWJsaWNcbiAqL1xuXG5yZXEuYWNjZXB0cyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBhY2NlcHQgPSBhY2NlcHRzKHRoaXMpO1xuICByZXR1cm4gYWNjZXB0LnR5cGVzLmFwcGx5KGFjY2VwdCwgYXJndW1lbnRzKTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGBlbmNvZGluZ2BzIGFyZSBhY2NlcHRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gLi4uZW5jb2RpbmdcbiAqIEByZXR1cm4ge1N0cmluZ3xBcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xuXG5yZXEuYWNjZXB0c0VuY29kaW5ncyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBhY2NlcHQgPSBhY2NlcHRzKHRoaXMpO1xuICByZXR1cm4gYWNjZXB0LmVuY29kaW5ncy5hcHBseShhY2NlcHQsIGFyZ3VtZW50cyk7XG59O1xuXG5yZXEuYWNjZXB0c0VuY29kaW5nID0gZGVwcmVjYXRlLmZ1bmN0aW9uKHJlcS5hY2NlcHRzRW5jb2RpbmdzLFxuICAncmVxLmFjY2VwdHNFbmNvZGluZzogVXNlIGFjY2VwdHNFbmNvZGluZ3MgaW5zdGVhZCcpO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBgY2hhcnNldGBzIGFyZSBhY2NlcHRhYmxlLFxuICogb3RoZXJ3aXNlIHlvdSBzaG91bGQgcmVzcG9uZCB3aXRoIDQwNiBcIk5vdCBBY2NlcHRhYmxlXCIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IC4uLmNoYXJzZXRcbiAqIEByZXR1cm4ge1N0cmluZ3xBcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xuXG5yZXEuYWNjZXB0c0NoYXJzZXRzID0gZnVuY3Rpb24oKXtcbiAgdmFyIGFjY2VwdCA9IGFjY2VwdHModGhpcyk7XG4gIHJldHVybiBhY2NlcHQuY2hhcnNldHMuYXBwbHkoYWNjZXB0LCBhcmd1bWVudHMpO1xufTtcblxucmVxLmFjY2VwdHNDaGFyc2V0ID0gZGVwcmVjYXRlLmZ1bmN0aW9uKHJlcS5hY2NlcHRzQ2hhcnNldHMsXG4gICdyZXEuYWNjZXB0c0NoYXJzZXQ6IFVzZSBhY2NlcHRzQ2hhcnNldHMgaW5zdGVhZCcpO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBgbGFuZ2BzIGFyZSBhY2NlcHRhYmxlLFxuICogb3RoZXJ3aXNlIHlvdSBzaG91bGQgcmVzcG9uZCB3aXRoIDQwNiBcIk5vdCBBY2NlcHRhYmxlXCIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IC4uLmxhbmdcbiAqIEByZXR1cm4ge1N0cmluZ3xBcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xuXG5yZXEuYWNjZXB0c0xhbmd1YWdlcyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBhY2NlcHQgPSBhY2NlcHRzKHRoaXMpO1xuICByZXR1cm4gYWNjZXB0Lmxhbmd1YWdlcy5hcHBseShhY2NlcHQsIGFyZ3VtZW50cyk7XG59O1xuXG5yZXEuYWNjZXB0c0xhbmd1YWdlID0gZGVwcmVjYXRlLmZ1bmN0aW9uKHJlcS5hY2NlcHRzTGFuZ3VhZ2VzLFxuICAncmVxLmFjY2VwdHNMYW5ndWFnZTogVXNlIGFjY2VwdHNMYW5ndWFnZXMgaW5zdGVhZCcpO1xuXG4vKipcbiAqIFBhcnNlIFJhbmdlIGhlYWRlciBmaWVsZCwgY2FwcGluZyB0byB0aGUgZ2l2ZW4gYHNpemVgLlxuICpcbiAqIFVuc3BlY2lmaWVkIHJhbmdlcyBzdWNoIGFzIFwiMC1cIiByZXF1aXJlIGtub3dsZWRnZSBvZiB5b3VyIHJlc291cmNlIGxlbmd0aC4gSW5cbiAqIHRoZSBjYXNlIG9mIGEgYnl0ZSByYW5nZSB0aGlzIGlzIG9mIGNvdXJzZSB0aGUgdG90YWwgbnVtYmVyIG9mIGJ5dGVzLiBJZiB0aGVcbiAqIFJhbmdlIGhlYWRlciBmaWVsZCBpcyBub3QgZ2l2ZW4gYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQsIGAtMWAgd2hlbiB1bnNhdGlzZmlhYmxlLFxuICogYW5kIGAtMmAgd2hlbiBzeW50YWN0aWNhbGx5IGludmFsaWQuXG4gKlxuICogV2hlbiByYW5nZXMgYXJlIHJldHVybmVkLCB0aGUgYXJyYXkgaGFzIGEgXCJ0eXBlXCIgcHJvcGVydHkgd2hpY2ggaXMgdGhlIHR5cGUgb2ZcbiAqIHJhbmdlIHRoYXQgaXMgcmVxdWlyZWQgKG1vc3QgY29tbW9ubHksIFwiYnl0ZXNcIikuIEVhY2ggYXJyYXkgZWxlbWVudCBpcyBhbiBvYmplY3RcbiAqIHdpdGggYSBcInN0YXJ0XCIgYW5kIFwiZW5kXCIgcHJvcGVydHkgZm9yIHRoZSBwb3J0aW9uIG9mIHRoZSByYW5nZS5cbiAqXG4gKiBUaGUgXCJjb21iaW5lXCIgb3B0aW9uIGNhbiBiZSBzZXQgdG8gYHRydWVgIGFuZCBvdmVybGFwcGluZyAmIGFkamFjZW50IHJhbmdlc1xuICogd2lsbCBiZSBjb21iaW5lZCBpbnRvIGEgc2luZ2xlIHJhbmdlLlxuICpcbiAqIE5PVEU6IHJlbWVtYmVyIHRoYXQgcmFuZ2VzIGFyZSBpbmNsdXNpdmUsIHNvIGZvciBleGFtcGxlIFwiUmFuZ2U6IHVzZXJzPTAtM1wiXG4gKiBzaG91bGQgcmVzcG9uZCB3aXRoIDQgdXNlcnMgd2hlbiBhdmFpbGFibGUsIG5vdCAzLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNvbWJpbmU9ZmFsc2VdXG4gKiBAcmV0dXJuIHtudW1iZXJ8YXJyYXl9XG4gKiBAcHVibGljXG4gKi9cblxucmVxLnJhbmdlID0gZnVuY3Rpb24gcmFuZ2Uoc2l6ZSwgb3B0aW9ucykge1xuICB2YXIgcmFuZ2UgPSB0aGlzLmdldCgnUmFuZ2UnKTtcbiAgaWYgKCFyYW5nZSkgcmV0dXJuO1xuICByZXR1cm4gcGFyc2VSYW5nZShzaXplLCByYW5nZSwgb3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgdmFsdWUgb2YgcGFyYW0gYG5hbWVgIHdoZW4gcHJlc2VudCBvciBgZGVmYXVsdFZhbHVlYC5cbiAqXG4gKiAgLSBDaGVja3Mgcm91dGUgcGxhY2Vob2xkZXJzLCBleDogXy91c2VyLzppZF9cbiAqICAtIENoZWNrcyBib2R5IHBhcmFtcywgZXg6IGlkPTEyLCB7XCJpZFwiOjEyfVxuICogIC0gQ2hlY2tzIHF1ZXJ5IHN0cmluZyBwYXJhbXMsIGV4OiA/aWQ9MTJcbiAqXG4gKiBUbyB1dGlsaXplIHJlcXVlc3QgYm9kaWVzLCBgcmVxLmJvZHlgXG4gKiBzaG91bGQgYmUgYW4gb2JqZWN0LiBUaGlzIGNhbiBiZSBkb25lIGJ5IHVzaW5nXG4gKiB0aGUgYGJvZHlQYXJzZXIoKWAgbWlkZGxld2FyZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtNaXhlZH0gW2RlZmF1bHRWYWx1ZV1cbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5yZXEucGFyYW0gPSBmdW5jdGlvbiBwYXJhbShuYW1lLCBkZWZhdWx0VmFsdWUpIHtcbiAgdmFyIHBhcmFtcyA9IHRoaXMucGFyYW1zIHx8IHt9O1xuICB2YXIgYm9keSA9IHRoaXMuYm9keSB8fCB7fTtcbiAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcblxuICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDFcbiAgICA/ICduYW1lJ1xuICAgIDogJ25hbWUsIGRlZmF1bHQnO1xuICBkZXByZWNhdGUoJ3JlcS5wYXJhbSgnICsgYXJncyArICcpOiBVc2UgcmVxLnBhcmFtcywgcmVxLmJvZHksIG9yIHJlcS5xdWVyeSBpbnN0ZWFkJyk7XG5cbiAgaWYgKG51bGwgIT0gcGFyYW1zW25hbWVdICYmIHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgcmV0dXJuIHBhcmFtc1tuYW1lXTtcbiAgaWYgKG51bGwgIT0gYm9keVtuYW1lXSkgcmV0dXJuIGJvZHlbbmFtZV07XG4gIGlmIChudWxsICE9IHF1ZXJ5W25hbWVdKSByZXR1cm4gcXVlcnlbbmFtZV07XG5cbiAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGluY29taW5nIHJlcXVlc3QgY29udGFpbnMgdGhlIFwiQ29udGVudC1UeXBlXCJcbiAqIGhlYWRlciBmaWVsZCwgYW5kIGl0IGNvbnRhaW5zIHRoZSBnaXZlIG1pbWUgYHR5cGVgLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgLy8gV2l0aCBDb250ZW50LVR5cGU6IHRleHQvaHRtbDsgY2hhcnNldD11dGYtOFxuICogICAgICByZXEuaXMoJ2h0bWwnKTtcbiAqICAgICAgcmVxLmlzKCd0ZXh0L2h0bWwnKTtcbiAqICAgICAgcmVxLmlzKCd0ZXh0LyonKTtcbiAqICAgICAgLy8gPT4gdHJ1ZVxuICpcbiAqICAgICAgLy8gV2hlbiBDb250ZW50LVR5cGUgaXMgYXBwbGljYXRpb24vanNvblxuICogICAgICByZXEuaXMoJ2pzb24nKTtcbiAqICAgICAgcmVxLmlzKCdhcHBsaWNhdGlvbi9qc29uJyk7XG4gKiAgICAgIHJlcS5pcygnYXBwbGljYXRpb24vKicpO1xuICogICAgICAvLyA9PiB0cnVlXG4gKlxuICogICAgICByZXEuaXMoJ2h0bWwnKTtcbiAqICAgICAgLy8gPT4gZmFsc2VcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gdHlwZXMuLi5cbiAqIEByZXR1cm4ge1N0cmluZ3xmYWxzZXxudWxsfVxuICogQHB1YmxpY1xuICovXG5cbnJlcS5pcyA9IGZ1bmN0aW9uIGlzKHR5cGVzKSB7XG4gIHZhciBhcnIgPSB0eXBlcztcblxuICAvLyBzdXBwb3J0IGZsYXR0ZW5lZCBhcmd1bWVudHNcbiAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGVzKSkge1xuICAgIGFyciA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgYXJyW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0eXBlaXModGhpcywgYXJyKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBwcm90b2NvbCBzdHJpbmcgXCJodHRwXCIgb3IgXCJodHRwc1wiXG4gKiB3aGVuIHJlcXVlc3RlZCB3aXRoIFRMUy4gV2hlbiB0aGUgXCJ0cnVzdCBwcm94eVwiXG4gKiBzZXR0aW5nIHRydXN0cyB0aGUgc29ja2V0IGFkZHJlc3MsIHRoZVxuICogXCJYLUZvcndhcmRlZC1Qcm90b1wiIGhlYWRlciBmaWVsZCB3aWxsIGJlIHRydXN0ZWRcbiAqIGFuZCB1c2VkIGlmIHByZXNlbnQuXG4gKlxuICogSWYgeW91J3JlIHJ1bm5pbmcgYmVoaW5kIGEgcmV2ZXJzZSBwcm94eSB0aGF0XG4gKiBzdXBwbGllcyBodHRwcyBmb3IgeW91IHRoaXMgbWF5IGJlIGVuYWJsZWQuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQHB1YmxpY1xuICovXG5cbmRlZmluZUdldHRlcihyZXEsICdwcm90b2NvbCcsIGZ1bmN0aW9uIHByb3RvY29sKCl7XG4gIHZhciBwcm90byA9IHRoaXMuY29ubmVjdGlvbi5lbmNyeXB0ZWRcbiAgICA/ICdodHRwcydcbiAgICA6ICdodHRwJztcbiAgdmFyIHRydXN0ID0gdGhpcy5hcHAuZ2V0KCd0cnVzdCBwcm94eSBmbicpO1xuXG4gIGlmICghdHJ1c3QodGhpcy5jb25uZWN0aW9uLnJlbW90ZUFkZHJlc3MsIDApKSB7XG4gICAgcmV0dXJuIHByb3RvO1xuICB9XG5cbiAgLy8gTm90ZTogWC1Gb3J3YXJkZWQtUHJvdG8gaXMgbm9ybWFsbHkgb25seSBldmVyIGFcbiAgLy8gICAgICAgc2luZ2xlIHZhbHVlLCBidXQgdGhpcyBpcyB0byBiZSBzYWZlLlxuICB2YXIgaGVhZGVyID0gdGhpcy5nZXQoJ1gtRm9yd2FyZGVkLVByb3RvJykgfHwgcHJvdG9cbiAgdmFyIGluZGV4ID0gaGVhZGVyLmluZGV4T2YoJywnKVxuXG4gIHJldHVybiBpbmRleCAhPT0gLTFcbiAgICA/IGhlYWRlci5zdWJzdHJpbmcoMCwgaW5kZXgpLnRyaW0oKVxuICAgIDogaGVhZGVyLnRyaW0oKVxufSk7XG5cbi8qKlxuICogU2hvcnQtaGFuZCBmb3I6XG4gKlxuICogICAgcmVxLnByb3RvY29sID09PSAnaHR0cHMnXG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBwdWJsaWNcbiAqL1xuXG5kZWZpbmVHZXR0ZXIocmVxLCAnc2VjdXJlJywgZnVuY3Rpb24gc2VjdXJlKCl7XG4gIHJldHVybiB0aGlzLnByb3RvY29sID09PSAnaHR0cHMnO1xufSk7XG5cbi8qKlxuICogUmV0dXJuIHRoZSByZW1vdGUgYWRkcmVzcyBmcm9tIHRoZSB0cnVzdGVkIHByb3h5LlxuICpcbiAqIFRoZSBpcyB0aGUgcmVtb3RlIGFkZHJlc3Mgb24gdGhlIHNvY2tldCB1bmxlc3NcbiAqIFwidHJ1c3QgcHJveHlcIiBpcyBzZXQuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQHB1YmxpY1xuICovXG5cbmRlZmluZUdldHRlcihyZXEsICdpcCcsIGZ1bmN0aW9uIGlwKCl7XG4gIHZhciB0cnVzdCA9IHRoaXMuYXBwLmdldCgndHJ1c3QgcHJveHkgZm4nKTtcbiAgcmV0dXJuIHByb3h5YWRkcih0aGlzLCB0cnVzdCk7XG59KTtcblxuLyoqXG4gKiBXaGVuIFwidHJ1c3QgcHJveHlcIiBpcyBzZXQsIHRydXN0ZWQgcHJveHkgYWRkcmVzc2VzICsgY2xpZW50LlxuICpcbiAqIEZvciBleGFtcGxlIGlmIHRoZSB2YWx1ZSB3ZXJlIFwiY2xpZW50LCBwcm94eTEsIHByb3h5MlwiXG4gKiB5b3Ugd291bGQgcmVjZWl2ZSB0aGUgYXJyYXkgYFtcImNsaWVudFwiLCBcInByb3h5MVwiLCBcInByb3h5MlwiXWBcbiAqIHdoZXJlIFwicHJveHkyXCIgaXMgdGhlIGZ1cnRoZXN0IGRvd24tc3RyZWFtIGFuZCBcInByb3h5MVwiIGFuZFxuICogXCJwcm94eTJcIiB3ZXJlIHRydXN0ZWQuXG4gKlxuICogQHJldHVybiB7QXJyYXl9XG4gKiBAcHVibGljXG4gKi9cblxuZGVmaW5lR2V0dGVyKHJlcSwgJ2lwcycsIGZ1bmN0aW9uIGlwcygpIHtcbiAgdmFyIHRydXN0ID0gdGhpcy5hcHAuZ2V0KCd0cnVzdCBwcm94eSBmbicpO1xuICB2YXIgYWRkcnMgPSBwcm94eWFkZHIuYWxsKHRoaXMsIHRydXN0KTtcblxuICAvLyByZXZlcnNlIHRoZSBvcmRlciAodG8gZmFydGhlc3QgLT4gY2xvc2VzdClcbiAgLy8gYW5kIHJlbW92ZSBzb2NrZXQgYWRkcmVzc1xuICBhZGRycy5yZXZlcnNlKCkucG9wKClcblxuICByZXR1cm4gYWRkcnNcbn0pO1xuXG4vKipcbiAqIFJldHVybiBzdWJkb21haW5zIGFzIGFuIGFycmF5LlxuICpcbiAqIFN1YmRvbWFpbnMgYXJlIHRoZSBkb3Qtc2VwYXJhdGVkIHBhcnRzIG9mIHRoZSBob3N0IGJlZm9yZSB0aGUgbWFpbiBkb21haW4gb2ZcbiAqIHRoZSBhcHAuIEJ5IGRlZmF1bHQsIHRoZSBkb21haW4gb2YgdGhlIGFwcCBpcyBhc3N1bWVkIHRvIGJlIHRoZSBsYXN0IHR3b1xuICogcGFydHMgb2YgdGhlIGhvc3QuIFRoaXMgY2FuIGJlIGNoYW5nZWQgYnkgc2V0dGluZyBcInN1YmRvbWFpbiBvZmZzZXRcIi5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaWYgdGhlIGRvbWFpbiBpcyBcInRvYmkuZmVycmV0cy5leGFtcGxlLmNvbVwiOlxuICogSWYgXCJzdWJkb21haW4gb2Zmc2V0XCIgaXMgbm90IHNldCwgcmVxLnN1YmRvbWFpbnMgaXMgYFtcImZlcnJldHNcIiwgXCJ0b2JpXCJdYC5cbiAqIElmIFwic3ViZG9tYWluIG9mZnNldFwiIGlzIDMsIHJlcS5zdWJkb21haW5zIGlzIGBbXCJ0b2JpXCJdYC5cbiAqXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xuXG5kZWZpbmVHZXR0ZXIocmVxLCAnc3ViZG9tYWlucycsIGZ1bmN0aW9uIHN1YmRvbWFpbnMoKSB7XG4gIHZhciBob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWU7XG5cbiAgaWYgKCFob3N0bmFtZSkgcmV0dXJuIFtdO1xuXG4gIHZhciBvZmZzZXQgPSB0aGlzLmFwcC5nZXQoJ3N1YmRvbWFpbiBvZmZzZXQnKTtcbiAgdmFyIHN1YmRvbWFpbnMgPSAhaXNJUChob3N0bmFtZSlcbiAgICA/IGhvc3RuYW1lLnNwbGl0KCcuJykucmV2ZXJzZSgpXG4gICAgOiBbaG9zdG5hbWVdO1xuXG4gIHJldHVybiBzdWJkb21haW5zLnNsaWNlKG9mZnNldCk7XG59KTtcblxuLyoqXG4gKiBTaG9ydC1oYW5kIGZvciBgdXJsLnBhcnNlKHJlcS51cmwpLnBhdGhuYW1lYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAcHVibGljXG4gKi9cblxuZGVmaW5lR2V0dGVyKHJlcSwgJ3BhdGgnLCBmdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gcGFyc2UodGhpcykucGF0aG5hbWU7XG59KTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgXCJIb3N0XCIgaGVhZGVyIGZpZWxkIHRvIGEgaG9zdG5hbWUuXG4gKlxuICogV2hlbiB0aGUgXCJ0cnVzdCBwcm94eVwiIHNldHRpbmcgdHJ1c3RzIHRoZSBzb2NrZXRcbiAqIGFkZHJlc3MsIHRoZSBcIlgtRm9yd2FyZGVkLUhvc3RcIiBoZWFkZXIgZmllbGQgd2lsbFxuICogYmUgdHJ1c3RlZC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAcHVibGljXG4gKi9cblxuZGVmaW5lR2V0dGVyKHJlcSwgJ2hvc3RuYW1lJywgZnVuY3Rpb24gaG9zdG5hbWUoKXtcbiAgdmFyIHRydXN0ID0gdGhpcy5hcHAuZ2V0KCd0cnVzdCBwcm94eSBmbicpO1xuICB2YXIgaG9zdCA9IHRoaXMuZ2V0KCdYLUZvcndhcmRlZC1Ib3N0Jyk7XG5cbiAgaWYgKCFob3N0IHx8ICF0cnVzdCh0aGlzLmNvbm5lY3Rpb24ucmVtb3RlQWRkcmVzcywgMCkpIHtcbiAgICBob3N0ID0gdGhpcy5nZXQoJ0hvc3QnKTtcbiAgfSBlbHNlIGlmIChob3N0LmluZGV4T2YoJywnKSAhPT0gLTEpIHtcbiAgICAvLyBOb3RlOiBYLUZvcndhcmRlZC1Ib3N0IGlzIG5vcm1hbGx5IG9ubHkgZXZlciBhXG4gICAgLy8gICAgICAgc2luZ2xlIHZhbHVlLCBidXQgdGhpcyBpcyB0byBiZSBzYWZlLlxuICAgIGhvc3QgPSBob3N0LnN1YnN0cmluZygwLCBob3N0LmluZGV4T2YoJywnKSkudHJpbVJpZ2h0KClcbiAgfVxuXG4gIGlmICghaG9zdCkgcmV0dXJuO1xuXG4gIC8vIElQdjYgbGl0ZXJhbCBzdXBwb3J0XG4gIHZhciBvZmZzZXQgPSBob3N0WzBdID09PSAnWydcbiAgICA/IGhvc3QuaW5kZXhPZignXScpICsgMVxuICAgIDogMDtcbiAgdmFyIGluZGV4ID0gaG9zdC5pbmRleE9mKCc6Jywgb2Zmc2V0KTtcblxuICByZXR1cm4gaW5kZXggIT09IC0xXG4gICAgPyBob3N0LnN1YnN0cmluZygwLCBpbmRleClcbiAgICA6IGhvc3Q7XG59KTtcblxuLy8gVE9ETzogY2hhbmdlIHJlcS5ob3N0IHRvIHJldHVybiBob3N0IGluIG5leHQgbWFqb3JcblxuZGVmaW5lR2V0dGVyKHJlcSwgJ2hvc3QnLCBkZXByZWNhdGUuZnVuY3Rpb24oZnVuY3Rpb24gaG9zdCgpe1xuICByZXR1cm4gdGhpcy5ob3N0bmFtZTtcbn0sICdyZXEuaG9zdDogVXNlIHJlcS5ob3N0bmFtZSBpbnN0ZWFkJykpO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSByZXF1ZXN0IGlzIGZyZXNoLCBha2FcbiAqIExhc3QtTW9kaWZpZWQgYW5kL29yIHRoZSBFVGFnXG4gKiBzdGlsbCBtYXRjaC5cbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQHB1YmxpY1xuICovXG5cbmRlZmluZUdldHRlcihyZXEsICdmcmVzaCcsIGZ1bmN0aW9uKCl7XG4gIHZhciBtZXRob2QgPSB0aGlzLm1ldGhvZDtcbiAgdmFyIHJlcyA9IHRoaXMucmVzXG4gIHZhciBzdGF0dXMgPSByZXMuc3RhdHVzQ29kZVxuXG4gIC8vIEdFVCBvciBIRUFEIGZvciB3ZWFrIGZyZXNobmVzcyB2YWxpZGF0aW9uIG9ubHlcbiAgaWYgKCdHRVQnICE9PSBtZXRob2QgJiYgJ0hFQUQnICE9PSBtZXRob2QpIHJldHVybiBmYWxzZTtcblxuICAvLyAyeHggb3IgMzA0IGFzIHBlciByZmMyNjE2IDE0LjI2XG4gIGlmICgoc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDApIHx8IDMwNCA9PT0gc3RhdHVzKSB7XG4gICAgcmV0dXJuIGZyZXNoKHRoaXMuaGVhZGVycywge1xuICAgICAgJ2V0YWcnOiByZXMuZ2V0KCdFVGFnJyksXG4gICAgICAnbGFzdC1tb2RpZmllZCc6IHJlcy5nZXQoJ0xhc3QtTW9kaWZpZWQnKVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59KTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgcmVxdWVzdCBpcyBzdGFsZSwgYWthXG4gKiBcIkxhc3QtTW9kaWZpZWRcIiBhbmQgLyBvciB0aGUgXCJFVGFnXCIgZm9yIHRoZVxuICogcmVzb3VyY2UgaGFzIGNoYW5nZWQuXG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBwdWJsaWNcbiAqL1xuXG5kZWZpbmVHZXR0ZXIocmVxLCAnc3RhbGUnLCBmdW5jdGlvbiBzdGFsZSgpe1xuICByZXR1cm4gIXRoaXMuZnJlc2g7XG59KTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgcmVxdWVzdCB3YXMgYW4gX1hNTEh0dHBSZXF1ZXN0Xy5cbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQHB1YmxpY1xuICovXG5cbmRlZmluZUdldHRlcihyZXEsICd4aHInLCBmdW5jdGlvbiB4aHIoKXtcbiAgdmFyIHZhbCA9IHRoaXMuZ2V0KCdYLVJlcXVlc3RlZC1XaXRoJykgfHwgJyc7XG4gIHJldHVybiB2YWwudG9Mb3dlckNhc2UoKSA9PT0gJ3htbGh0dHByZXF1ZXN0Jztcbn0pO1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBnZXR0ZXIgb24gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXR0ZXJcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGRlZmluZUdldHRlcihvYmosIG5hbWUsIGdldHRlcikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBuYW1lLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBnZXR0ZXJcbiAgfSk7XG59XG4iLCIvKiFcbiAqIGFjY2VwdHNcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogQ29weXJpZ2h0KGMpIDIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBOZWdvdGlhdG9yID0gcmVxdWlyZSgnbmVnb3RpYXRvcicpXG52YXIgbWltZSA9IHJlcXVpcmUoJ21pbWUtdHlwZXMnKVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQWNjZXB0c1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBBY2NlcHRzIG9iamVjdCBmb3IgdGhlIGdpdmVuIHJlcS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcmVxXG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gQWNjZXB0cyAocmVxKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBBY2NlcHRzKSkge1xuICAgIHJldHVybiBuZXcgQWNjZXB0cyhyZXEpXG4gIH1cblxuICB0aGlzLmhlYWRlcnMgPSByZXEuaGVhZGVyc1xuICB0aGlzLm5lZ290aWF0b3IgPSBuZXcgTmVnb3RpYXRvcihyZXEpXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGB0eXBlKHMpYCBpcyBhY2NlcHRhYmxlLCByZXR1cm5pbmdcbiAqIHRoZSBiZXN0IG1hdGNoIHdoZW4gdHJ1ZSwgb3RoZXJ3aXNlIGB1bmRlZmluZWRgLCBpbiB3aGljaFxuICogY2FzZSB5b3Ugc2hvdWxkIHJlc3BvbmQgd2l0aCA0MDYgXCJOb3QgQWNjZXB0YWJsZVwiLlxuICpcbiAqIFRoZSBgdHlwZWAgdmFsdWUgbWF5IGJlIGEgc2luZ2xlIG1pbWUgdHlwZSBzdHJpbmdcbiAqIHN1Y2ggYXMgXCJhcHBsaWNhdGlvbi9qc29uXCIsIHRoZSBleHRlbnNpb24gbmFtZVxuICogc3VjaCBhcyBcImpzb25cIiBvciBhbiBhcnJheSBgW1wianNvblwiLCBcImh0bWxcIiwgXCJ0ZXh0L3BsYWluXCJdYC4gV2hlbiBhIGxpc3RcbiAqIG9yIGFycmF5IGlzIGdpdmVuIHRoZSBfYmVzdF8gbWF0Y2gsIGlmIGFueSBpcyByZXR1cm5lZC5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICAgLy8gQWNjZXB0OiB0ZXh0L2h0bWxcbiAqICAgICB0aGlzLnR5cGVzKCdodG1sJyk7XG4gKiAgICAgLy8gPT4gXCJodG1sXCJcbiAqXG4gKiAgICAgLy8gQWNjZXB0OiB0ZXh0LyosIGFwcGxpY2F0aW9uL2pzb25cbiAqICAgICB0aGlzLnR5cGVzKCdodG1sJyk7XG4gKiAgICAgLy8gPT4gXCJodG1sXCJcbiAqICAgICB0aGlzLnR5cGVzKCd0ZXh0L2h0bWwnKTtcbiAqICAgICAvLyA9PiBcInRleHQvaHRtbFwiXG4gKiAgICAgdGhpcy50eXBlcygnanNvbicsICd0ZXh0Jyk7XG4gKiAgICAgLy8gPT4gXCJqc29uXCJcbiAqICAgICB0aGlzLnR5cGVzKCdhcHBsaWNhdGlvbi9qc29uJyk7XG4gKiAgICAgLy8gPT4gXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAqXG4gKiAgICAgLy8gQWNjZXB0OiB0ZXh0LyosIGFwcGxpY2F0aW9uL2pzb25cbiAqICAgICB0aGlzLnR5cGVzKCdpbWFnZS9wbmcnKTtcbiAqICAgICB0aGlzLnR5cGVzKCdwbmcnKTtcbiAqICAgICAvLyA9PiB1bmRlZmluZWRcbiAqXG4gKiAgICAgLy8gQWNjZXB0OiB0ZXh0Lyo7cT0uNSwgYXBwbGljYXRpb24vanNvblxuICogICAgIHRoaXMudHlwZXMoWydodG1sJywgJ2pzb24nXSk7XG4gKiAgICAgdGhpcy50eXBlcygnaHRtbCcsICdqc29uJyk7XG4gKiAgICAgLy8gPT4gXCJqc29uXCJcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gdHlwZXMuLi5cbiAqIEByZXR1cm4ge1N0cmluZ3xBcnJheXxCb29sZWFufVxuICogQHB1YmxpY1xuICovXG5cbkFjY2VwdHMucHJvdG90eXBlLnR5cGUgPVxuQWNjZXB0cy5wcm90b3R5cGUudHlwZXMgPSBmdW5jdGlvbiAodHlwZXNfKSB7XG4gIHZhciB0eXBlcyA9IHR5cGVzX1xuXG4gIC8vIHN1cHBvcnQgZmxhdHRlbmVkIGFyZ3VtZW50c1xuICBpZiAodHlwZXMgJiYgIUFycmF5LmlzQXJyYXkodHlwZXMpKSB7XG4gICAgdHlwZXMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0eXBlc1tpXSA9IGFyZ3VtZW50c1tpXVxuICAgIH1cbiAgfVxuXG4gIC8vIG5vIHR5cGVzLCByZXR1cm4gYWxsIHJlcXVlc3RlZCB0eXBlc1xuICBpZiAoIXR5cGVzIHx8IHR5cGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0aGlzLm5lZ290aWF0b3IubWVkaWFUeXBlcygpXG4gIH1cblxuICAvLyBubyBhY2NlcHQgaGVhZGVyLCByZXR1cm4gZmlyc3QgZ2l2ZW4gdHlwZVxuICBpZiAoIXRoaXMuaGVhZGVycy5hY2NlcHQpIHtcbiAgICByZXR1cm4gdHlwZXNbMF1cbiAgfVxuXG4gIHZhciBtaW1lcyA9IHR5cGVzLm1hcChleHRUb01pbWUpXG4gIHZhciBhY2NlcHRzID0gdGhpcy5uZWdvdGlhdG9yLm1lZGlhVHlwZXMobWltZXMuZmlsdGVyKHZhbGlkTWltZSkpXG4gIHZhciBmaXJzdCA9IGFjY2VwdHNbMF1cblxuICByZXR1cm4gZmlyc3RcbiAgICA/IHR5cGVzW21pbWVzLmluZGV4T2YoZmlyc3QpXVxuICAgIDogZmFsc2Vcbn1cblxuLyoqXG4gKiBSZXR1cm4gYWNjZXB0ZWQgZW5jb2RpbmdzIG9yIGJlc3QgZml0IGJhc2VkIG9uIGBlbmNvZGluZ3NgLlxuICpcbiAqIEdpdmVuIGBBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGVgXG4gKiBhbiBhcnJheSBzb3J0ZWQgYnkgcXVhbGl0eSBpcyByZXR1cm5lZDpcbiAqXG4gKiAgICAgWydnemlwJywgJ2RlZmxhdGUnXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBlbmNvZGluZ3MuLi5cbiAqIEByZXR1cm4ge1N0cmluZ3xBcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xuXG5BY2NlcHRzLnByb3RvdHlwZS5lbmNvZGluZyA9XG5BY2NlcHRzLnByb3RvdHlwZS5lbmNvZGluZ3MgPSBmdW5jdGlvbiAoZW5jb2RpbmdzXykge1xuICB2YXIgZW5jb2RpbmdzID0gZW5jb2RpbmdzX1xuXG4gIC8vIHN1cHBvcnQgZmxhdHRlbmVkIGFyZ3VtZW50c1xuICBpZiAoZW5jb2RpbmdzICYmICFBcnJheS5pc0FycmF5KGVuY29kaW5ncykpIHtcbiAgICBlbmNvZGluZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuY29kaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgZW5jb2RpbmdzW2ldID0gYXJndW1lbnRzW2ldXG4gICAgfVxuICB9XG5cbiAgLy8gbm8gZW5jb2RpbmdzLCByZXR1cm4gYWxsIHJlcXVlc3RlZCBlbmNvZGluZ3NcbiAgaWYgKCFlbmNvZGluZ3MgfHwgZW5jb2RpbmdzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0aGlzLm5lZ290aWF0b3IuZW5jb2RpbmdzKClcbiAgfVxuXG4gIHJldHVybiB0aGlzLm5lZ290aWF0b3IuZW5jb2RpbmdzKGVuY29kaW5ncylbMF0gfHwgZmFsc2Vcbn1cblxuLyoqXG4gKiBSZXR1cm4gYWNjZXB0ZWQgY2hhcnNldHMgb3IgYmVzdCBmaXQgYmFzZWQgb24gYGNoYXJzZXRzYC5cbiAqXG4gKiBHaXZlbiBgQWNjZXB0LUNoYXJzZXQ6IHV0Zi04LCBpc28tODg1OS0xO3E9MC4yLCB1dGYtNztxPTAuNWBcbiAqIGFuIGFycmF5IHNvcnRlZCBieSBxdWFsaXR5IGlzIHJldHVybmVkOlxuICpcbiAqICAgICBbJ3V0Zi04JywgJ3V0Zi03JywgJ2lzby04ODU5LTEnXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBjaGFyc2V0cy4uLlxuICogQHJldHVybiB7U3RyaW5nfEFycmF5fVxuICogQHB1YmxpY1xuICovXG5cbkFjY2VwdHMucHJvdG90eXBlLmNoYXJzZXQgPVxuQWNjZXB0cy5wcm90b3R5cGUuY2hhcnNldHMgPSBmdW5jdGlvbiAoY2hhcnNldHNfKSB7XG4gIHZhciBjaGFyc2V0cyA9IGNoYXJzZXRzX1xuXG4gIC8vIHN1cHBvcnQgZmxhdHRlbmVkIGFyZ3VtZW50c1xuICBpZiAoY2hhcnNldHMgJiYgIUFycmF5LmlzQXJyYXkoY2hhcnNldHMpKSB7XG4gICAgY2hhcnNldHMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJzZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGFyc2V0c1tpXSA9IGFyZ3VtZW50c1tpXVxuICAgIH1cbiAgfVxuXG4gIC8vIG5vIGNoYXJzZXRzLCByZXR1cm4gYWxsIHJlcXVlc3RlZCBjaGFyc2V0c1xuICBpZiAoIWNoYXJzZXRzIHx8IGNoYXJzZXRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0aGlzLm5lZ290aWF0b3IuY2hhcnNldHMoKVxuICB9XG5cbiAgcmV0dXJuIHRoaXMubmVnb3RpYXRvci5jaGFyc2V0cyhjaGFyc2V0cylbMF0gfHwgZmFsc2Vcbn1cblxuLyoqXG4gKiBSZXR1cm4gYWNjZXB0ZWQgbGFuZ3VhZ2VzIG9yIGJlc3QgZml0IGJhc2VkIG9uIGBsYW5nc2AuXG4gKlxuICogR2l2ZW4gYEFjY2VwdC1MYW5ndWFnZTogZW47cT0wLjgsIGVzLCBwdGBcbiAqIGFuIGFycmF5IHNvcnRlZCBieSBxdWFsaXR5IGlzIHJldHVybmVkOlxuICpcbiAqICAgICBbJ2VzJywgJ3B0JywgJ2VuJ11cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gbGFuZ3MuLi5cbiAqIEByZXR1cm4ge0FycmF5fFN0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5BY2NlcHRzLnByb3RvdHlwZS5sYW5nID1cbkFjY2VwdHMucHJvdG90eXBlLmxhbmdzID1cbkFjY2VwdHMucHJvdG90eXBlLmxhbmd1YWdlID1cbkFjY2VwdHMucHJvdG90eXBlLmxhbmd1YWdlcyA9IGZ1bmN0aW9uIChsYW5ndWFnZXNfKSB7XG4gIHZhciBsYW5ndWFnZXMgPSBsYW5ndWFnZXNfXG5cbiAgLy8gc3VwcG9ydCBmbGF0dGVuZWQgYXJndW1lbnRzXG4gIGlmIChsYW5ndWFnZXMgJiYgIUFycmF5LmlzQXJyYXkobGFuZ3VhZ2VzKSkge1xuICAgIGxhbmd1YWdlcyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFuZ3VhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsYW5ndWFnZXNbaV0gPSBhcmd1bWVudHNbaV1cbiAgICB9XG4gIH1cblxuICAvLyBubyBsYW5ndWFnZXMsIHJldHVybiBhbGwgcmVxdWVzdGVkIGxhbmd1YWdlc1xuICBpZiAoIWxhbmd1YWdlcyB8fCBsYW5ndWFnZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnb3RpYXRvci5sYW5ndWFnZXMoKVxuICB9XG5cbiAgcmV0dXJuIHRoaXMubmVnb3RpYXRvci5sYW5ndWFnZXMobGFuZ3VhZ2VzKVswXSB8fCBmYWxzZVxufVxuXG4vKipcbiAqIENvbnZlcnQgZXh0bmFtZXMgdG8gbWltZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHJldHVybiB7U3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBleHRUb01pbWUgKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUuaW5kZXhPZignLycpID09PSAtMVxuICAgID8gbWltZS5sb29rdXAodHlwZSlcbiAgICA6IHR5cGVcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBtaW1lIGlzIHZhbGlkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHZhbGlkTWltZSAodHlwZSkge1xuICByZXR1cm4gdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnXG59XG4iLCIvKiFcbiAqIG5lZ290aWF0b3JcbiAqIENvcHlyaWdodChjKSAyMDEyIEZlZGVyaWNvIFJvbWVyb1xuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBJc2FhYyBaLiBTY2hsdWV0ZXJcbiAqIENvcHlyaWdodChjKSAyMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2FjaGVkIGxvYWRlZCBzdWJtb2R1bGVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgbW9kdWxlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBOZWdvdGlhdG9yO1xubW9kdWxlLmV4cG9ydHMuTmVnb3RpYXRvciA9IE5lZ290aWF0b3I7XG5cbi8qKlxuICogQ3JlYXRlIGEgTmVnb3RpYXRvciBpbnN0YW5jZSBmcm9tIGEgcmVxdWVzdC5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXF1ZXN0XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gTmVnb3RpYXRvcihyZXF1ZXN0KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBOZWdvdGlhdG9yKSkge1xuICAgIHJldHVybiBuZXcgTmVnb3RpYXRvcihyZXF1ZXN0KTtcbiAgfVxuXG4gIHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7XG59XG5cbk5lZ290aWF0b3IucHJvdG90eXBlLmNoYXJzZXQgPSBmdW5jdGlvbiBjaGFyc2V0KGF2YWlsYWJsZSkge1xuICB2YXIgc2V0ID0gdGhpcy5jaGFyc2V0cyhhdmFpbGFibGUpO1xuICByZXR1cm4gc2V0ICYmIHNldFswXTtcbn07XG5cbk5lZ290aWF0b3IucHJvdG90eXBlLmNoYXJzZXRzID0gZnVuY3Rpb24gY2hhcnNldHMoYXZhaWxhYmxlKSB7XG4gIHZhciBwcmVmZXJyZWRDaGFyc2V0cyA9IGxvYWRNb2R1bGUoJ2NoYXJzZXQnKS5wcmVmZXJyZWRDaGFyc2V0cztcbiAgcmV0dXJuIHByZWZlcnJlZENoYXJzZXRzKHRoaXMucmVxdWVzdC5oZWFkZXJzWydhY2NlcHQtY2hhcnNldCddLCBhdmFpbGFibGUpO1xufTtcblxuTmVnb3RpYXRvci5wcm90b3R5cGUuZW5jb2RpbmcgPSBmdW5jdGlvbiBlbmNvZGluZyhhdmFpbGFibGUpIHtcbiAgdmFyIHNldCA9IHRoaXMuZW5jb2RpbmdzKGF2YWlsYWJsZSk7XG4gIHJldHVybiBzZXQgJiYgc2V0WzBdO1xufTtcblxuTmVnb3RpYXRvci5wcm90b3R5cGUuZW5jb2RpbmdzID0gZnVuY3Rpb24gZW5jb2RpbmdzKGF2YWlsYWJsZSkge1xuICB2YXIgcHJlZmVycmVkRW5jb2RpbmdzID0gbG9hZE1vZHVsZSgnZW5jb2RpbmcnKS5wcmVmZXJyZWRFbmNvZGluZ3M7XG4gIHJldHVybiBwcmVmZXJyZWRFbmNvZGluZ3ModGhpcy5yZXF1ZXN0LmhlYWRlcnNbJ2FjY2VwdC1lbmNvZGluZyddLCBhdmFpbGFibGUpO1xufTtcblxuTmVnb3RpYXRvci5wcm90b3R5cGUubGFuZ3VhZ2UgPSBmdW5jdGlvbiBsYW5ndWFnZShhdmFpbGFibGUpIHtcbiAgdmFyIHNldCA9IHRoaXMubGFuZ3VhZ2VzKGF2YWlsYWJsZSk7XG4gIHJldHVybiBzZXQgJiYgc2V0WzBdO1xufTtcblxuTmVnb3RpYXRvci5wcm90b3R5cGUubGFuZ3VhZ2VzID0gZnVuY3Rpb24gbGFuZ3VhZ2VzKGF2YWlsYWJsZSkge1xuICB2YXIgcHJlZmVycmVkTGFuZ3VhZ2VzID0gbG9hZE1vZHVsZSgnbGFuZ3VhZ2UnKS5wcmVmZXJyZWRMYW5ndWFnZXM7XG4gIHJldHVybiBwcmVmZXJyZWRMYW5ndWFnZXModGhpcy5yZXF1ZXN0LmhlYWRlcnNbJ2FjY2VwdC1sYW5ndWFnZSddLCBhdmFpbGFibGUpO1xufTtcblxuTmVnb3RpYXRvci5wcm90b3R5cGUubWVkaWFUeXBlID0gZnVuY3Rpb24gbWVkaWFUeXBlKGF2YWlsYWJsZSkge1xuICB2YXIgc2V0ID0gdGhpcy5tZWRpYVR5cGVzKGF2YWlsYWJsZSk7XG4gIHJldHVybiBzZXQgJiYgc2V0WzBdO1xufTtcblxuTmVnb3RpYXRvci5wcm90b3R5cGUubWVkaWFUeXBlcyA9IGZ1bmN0aW9uIG1lZGlhVHlwZXMoYXZhaWxhYmxlKSB7XG4gIHZhciBwcmVmZXJyZWRNZWRpYVR5cGVzID0gbG9hZE1vZHVsZSgnbWVkaWFUeXBlJykucHJlZmVycmVkTWVkaWFUeXBlcztcbiAgcmV0dXJuIHByZWZlcnJlZE1lZGlhVHlwZXModGhpcy5yZXF1ZXN0LmhlYWRlcnMuYWNjZXB0LCBhdmFpbGFibGUpO1xufTtcblxuLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbk5lZ290aWF0b3IucHJvdG90eXBlLnByZWZlcnJlZENoYXJzZXQgPSBOZWdvdGlhdG9yLnByb3RvdHlwZS5jaGFyc2V0O1xuTmVnb3RpYXRvci5wcm90b3R5cGUucHJlZmVycmVkQ2hhcnNldHMgPSBOZWdvdGlhdG9yLnByb3RvdHlwZS5jaGFyc2V0cztcbk5lZ290aWF0b3IucHJvdG90eXBlLnByZWZlcnJlZEVuY29kaW5nID0gTmVnb3RpYXRvci5wcm90b3R5cGUuZW5jb2Rpbmc7XG5OZWdvdGlhdG9yLnByb3RvdHlwZS5wcmVmZXJyZWRFbmNvZGluZ3MgPSBOZWdvdGlhdG9yLnByb3RvdHlwZS5lbmNvZGluZ3M7XG5OZWdvdGlhdG9yLnByb3RvdHlwZS5wcmVmZXJyZWRMYW5ndWFnZSA9IE5lZ290aWF0b3IucHJvdG90eXBlLmxhbmd1YWdlO1xuTmVnb3RpYXRvci5wcm90b3R5cGUucHJlZmVycmVkTGFuZ3VhZ2VzID0gTmVnb3RpYXRvci5wcm90b3R5cGUubGFuZ3VhZ2VzO1xuTmVnb3RpYXRvci5wcm90b3R5cGUucHJlZmVycmVkTWVkaWFUeXBlID0gTmVnb3RpYXRvci5wcm90b3R5cGUubWVkaWFUeXBlO1xuTmVnb3RpYXRvci5wcm90b3R5cGUucHJlZmVycmVkTWVkaWFUeXBlcyA9IE5lZ290aWF0b3IucHJvdG90eXBlLm1lZGlhVHlwZXM7XG5cbi8qKlxuICogTG9hZCB0aGUgZ2l2ZW4gbW9kdWxlLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2FkTW9kdWxlKG1vZHVsZU5hbWUpIHtcbiAgdmFyIG1vZHVsZSA9IG1vZHVsZXNbbW9kdWxlTmFtZV07XG5cbiAgaWYgKG1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG1vZHVsZTtcbiAgfVxuXG4gIC8vIFRoaXMgdXNlcyBhIHN3aXRjaCBmb3Igc3RhdGljIHJlcXVpcmUgYW5hbHlzaXNcbiAgc3dpdGNoIChtb2R1bGVOYW1lKSB7XG4gICAgY2FzZSAnY2hhcnNldCc6XG4gICAgICBtb2R1bGUgPSByZXF1aXJlKCcuL2xpYi9jaGFyc2V0Jyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdlbmNvZGluZyc6XG4gICAgICBtb2R1bGUgPSByZXF1aXJlKCcuL2xpYi9lbmNvZGluZycpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbGFuZ3VhZ2UnOlxuICAgICAgbW9kdWxlID0gcmVxdWlyZSgnLi9saWIvbGFuZ3VhZ2UnKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ21lZGlhVHlwZSc6XG4gICAgICBtb2R1bGUgPSByZXF1aXJlKCcuL2xpYi9tZWRpYVR5cGUnKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIG1vZHVsZSBcXCcnICsgbW9kdWxlTmFtZSArICdcXCcnKTtcbiAgfVxuXG4gIC8vIFN0b3JlIHRvIHByZXZlbnQgaW52b2tpbmcgcmVxdWlyZSgpXG4gIG1vZHVsZXNbbW9kdWxlTmFtZV0gPSBtb2R1bGU7XG5cbiAgcmV0dXJuIG1vZHVsZTtcbn1cbiIsIi8qKlxuICogbmVnb3RpYXRvclxuICogQ29weXJpZ2h0KGMpIDIwMTIgSXNhYWMgWi4gU2NobHVldGVyXG4gKiBDb3B5cmlnaHQoYykgMjAxNCBGZWRlcmljbyBSb21lcm9cbiAqIENvcHlyaWdodChjKSAyMDE0LTIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHByZWZlcnJlZENoYXJzZXRzO1xubW9kdWxlLmV4cG9ydHMucHJlZmVycmVkQ2hhcnNldHMgPSBwcmVmZXJyZWRDaGFyc2V0cztcblxuLyoqXG4gKiBNb2R1bGUgdmFyaWFibGVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgc2ltcGxlQ2hhcnNldFJlZ0V4cCA9IC9eXFxzKihbXlxccztdKylcXHMqKD86OyguKikpPyQvO1xuXG4vKipcbiAqIFBhcnNlIHRoZSBBY2NlcHQtQ2hhcnNldCBoZWFkZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlQWNjZXB0Q2hhcnNldChhY2NlcHQpIHtcbiAgdmFyIGFjY2VwdHMgPSBhY2NlcHQuc3BsaXQoJywnKTtcblxuICBmb3IgKHZhciBpID0gMCwgaiA9IDA7IGkgPCBhY2NlcHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNoYXJzZXQgPSBwYXJzZUNoYXJzZXQoYWNjZXB0c1tpXS50cmltKCksIGkpO1xuXG4gICAgaWYgKGNoYXJzZXQpIHtcbiAgICAgIGFjY2VwdHNbaisrXSA9IGNoYXJzZXQ7XG4gICAgfVxuICB9XG5cbiAgLy8gdHJpbSBhY2NlcHRzXG4gIGFjY2VwdHMubGVuZ3RoID0gajtcblxuICByZXR1cm4gYWNjZXB0cztcbn1cblxuLyoqXG4gKiBQYXJzZSBhIGNoYXJzZXQgZnJvbSB0aGUgQWNjZXB0LUNoYXJzZXQgaGVhZGVyLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZUNoYXJzZXQoc3RyLCBpKSB7XG4gIHZhciBtYXRjaCA9IHNpbXBsZUNoYXJzZXRSZWdFeHAuZXhlYyhzdHIpO1xuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICB2YXIgY2hhcnNldCA9IG1hdGNoWzFdO1xuICB2YXIgcSA9IDE7XG4gIGlmIChtYXRjaFsyXSkge1xuICAgIHZhciBwYXJhbXMgPSBtYXRjaFsyXS5zcGxpdCgnOycpXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBwYXJhbXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBwID0gcGFyYW1zW2pdLnRyaW0oKS5zcGxpdCgnPScpO1xuICAgICAgaWYgKHBbMF0gPT09ICdxJykge1xuICAgICAgICBxID0gcGFyc2VGbG9hdChwWzFdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjaGFyc2V0OiBjaGFyc2V0LFxuICAgIHE6IHEsXG4gICAgaTogaVxuICB9O1xufVxuXG4vKipcbiAqIEdldCB0aGUgcHJpb3JpdHkgb2YgYSBjaGFyc2V0LlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRDaGFyc2V0UHJpb3JpdHkoY2hhcnNldCwgYWNjZXB0ZWQsIGluZGV4KSB7XG4gIHZhciBwcmlvcml0eSA9IHtvOiAtMSwgcTogMCwgczogMH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhY2NlcHRlZC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzcGVjID0gc3BlY2lmeShjaGFyc2V0LCBhY2NlcHRlZFtpXSwgaW5kZXgpO1xuXG4gICAgaWYgKHNwZWMgJiYgKHByaW9yaXR5LnMgLSBzcGVjLnMgfHwgcHJpb3JpdHkucSAtIHNwZWMucSB8fCBwcmlvcml0eS5vIC0gc3BlYy5vKSA8IDApIHtcbiAgICAgIHByaW9yaXR5ID0gc3BlYztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcHJpb3JpdHk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBzcGVjaWZpY2l0eSBvZiB0aGUgY2hhcnNldC5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc3BlY2lmeShjaGFyc2V0LCBzcGVjLCBpbmRleCkge1xuICB2YXIgcyA9IDA7XG4gIGlmKHNwZWMuY2hhcnNldC50b0xvd2VyQ2FzZSgpID09PSBjaGFyc2V0LnRvTG93ZXJDYXNlKCkpe1xuICAgIHMgfD0gMTtcbiAgfSBlbHNlIGlmIChzcGVjLmNoYXJzZXQgIT09ICcqJyApIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpOiBpbmRleCxcbiAgICBvOiBzcGVjLmksXG4gICAgcTogc3BlYy5xLFxuICAgIHM6IHNcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgcHJlZmVycmVkIGNoYXJzZXRzIGZyb20gYW4gQWNjZXB0LUNoYXJzZXQgaGVhZGVyLlxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHByZWZlcnJlZENoYXJzZXRzKGFjY2VwdCwgcHJvdmlkZWQpIHtcbiAgLy8gUkZDIDI2MTYgc2VjIDE0LjI6IG5vIGhlYWRlciA9ICpcbiAgdmFyIGFjY2VwdHMgPSBwYXJzZUFjY2VwdENoYXJzZXQoYWNjZXB0ID09PSB1bmRlZmluZWQgPyAnKicgOiBhY2NlcHQgfHwgJycpO1xuXG4gIGlmICghcHJvdmlkZWQpIHtcbiAgICAvLyBzb3J0ZWQgbGlzdCBvZiBhbGwgY2hhcnNldHNcbiAgICByZXR1cm4gYWNjZXB0c1xuICAgICAgLmZpbHRlcihpc1F1YWxpdHkpXG4gICAgICAuc29ydChjb21wYXJlU3BlY3MpXG4gICAgICAubWFwKGdldEZ1bGxDaGFyc2V0KTtcbiAgfVxuXG4gIHZhciBwcmlvcml0aWVzID0gcHJvdmlkZWQubWFwKGZ1bmN0aW9uIGdldFByaW9yaXR5KHR5cGUsIGluZGV4KSB7XG4gICAgcmV0dXJuIGdldENoYXJzZXRQcmlvcml0eSh0eXBlLCBhY2NlcHRzLCBpbmRleCk7XG4gIH0pO1xuXG4gIC8vIHNvcnRlZCBsaXN0IG9mIGFjY2VwdGVkIGNoYXJzZXRzXG4gIHJldHVybiBwcmlvcml0aWVzLmZpbHRlcihpc1F1YWxpdHkpLnNvcnQoY29tcGFyZVNwZWNzKS5tYXAoZnVuY3Rpb24gZ2V0Q2hhcnNldChwcmlvcml0eSkge1xuICAgIHJldHVybiBwcm92aWRlZFtwcmlvcml0aWVzLmluZGV4T2YocHJpb3JpdHkpXTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ29tcGFyZSB0d28gc3BlY3MuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbXBhcmVTcGVjcyhhLCBiKSB7XG4gIHJldHVybiAoYi5xIC0gYS5xKSB8fCAoYi5zIC0gYS5zKSB8fCAoYS5vIC0gYi5vKSB8fCAoYS5pIC0gYi5pKSB8fCAwO1xufVxuXG4vKipcbiAqIEdldCBmdWxsIGNoYXJzZXQgc3RyaW5nLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRGdWxsQ2hhcnNldChzcGVjKSB7XG4gIHJldHVybiBzcGVjLmNoYXJzZXQ7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzcGVjIGhhcyBhbnkgcXVhbGl0eS5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNRdWFsaXR5KHNwZWMpIHtcbiAgcmV0dXJuIHNwZWMucSA+IDA7XG59XG4iLCIvKipcbiAqIG5lZ290aWF0b3JcbiAqIENvcHlyaWdodChjKSAyMDEyIElzYWFjIFouIFNjaGx1ZXRlclxuICogQ29weXJpZ2h0KGMpIDIwMTQgRmVkZXJpY28gUm9tZXJvXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBwcmVmZXJyZWRFbmNvZGluZ3M7XG5tb2R1bGUuZXhwb3J0cy5wcmVmZXJyZWRFbmNvZGluZ3MgPSBwcmVmZXJyZWRFbmNvZGluZ3M7XG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIHNpbXBsZUVuY29kaW5nUmVnRXhwID0gL15cXHMqKFteXFxzO10rKVxccyooPzo7KC4qKSk/JC87XG5cbi8qKlxuICogUGFyc2UgdGhlIEFjY2VwdC1FbmNvZGluZyBoZWFkZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlQWNjZXB0RW5jb2RpbmcoYWNjZXB0KSB7XG4gIHZhciBhY2NlcHRzID0gYWNjZXB0LnNwbGl0KCcsJyk7XG4gIHZhciBoYXNJZGVudGl0eSA9IGZhbHNlO1xuICB2YXIgbWluUXVhbGl0eSA9IDE7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGogPSAwOyBpIDwgYWNjZXB0cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBlbmNvZGluZyA9IHBhcnNlRW5jb2RpbmcoYWNjZXB0c1tpXS50cmltKCksIGkpO1xuXG4gICAgaWYgKGVuY29kaW5nKSB7XG4gICAgICBhY2NlcHRzW2orK10gPSBlbmNvZGluZztcbiAgICAgIGhhc0lkZW50aXR5ID0gaGFzSWRlbnRpdHkgfHwgc3BlY2lmeSgnaWRlbnRpdHknLCBlbmNvZGluZyk7XG4gICAgICBtaW5RdWFsaXR5ID0gTWF0aC5taW4obWluUXVhbGl0eSwgZW5jb2RpbmcucSB8fCAxKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWhhc0lkZW50aXR5KSB7XG4gICAgLypcbiAgICAgKiBJZiBpZGVudGl0eSBkb2Vzbid0IGV4cGxpY2l0bHkgYXBwZWFyIGluIHRoZSBhY2NlcHQtZW5jb2RpbmcgaGVhZGVyLFxuICAgICAqIGl0J3MgYWRkZWQgdG8gdGhlIGxpc3Qgb2YgYWNjZXB0YWJsZSBlbmNvZGluZyB3aXRoIHRoZSBsb3dlc3QgcVxuICAgICAqL1xuICAgIGFjY2VwdHNbaisrXSA9IHtcbiAgICAgIGVuY29kaW5nOiAnaWRlbnRpdHknLFxuICAgICAgcTogbWluUXVhbGl0eSxcbiAgICAgIGk6IGlcbiAgICB9O1xuICB9XG5cbiAgLy8gdHJpbSBhY2NlcHRzXG4gIGFjY2VwdHMubGVuZ3RoID0gajtcblxuICByZXR1cm4gYWNjZXB0cztcbn1cblxuLyoqXG4gKiBQYXJzZSBhbiBlbmNvZGluZyBmcm9tIHRoZSBBY2NlcHQtRW5jb2RpbmcgaGVhZGVyLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZUVuY29kaW5nKHN0ciwgaSkge1xuICB2YXIgbWF0Y2ggPSBzaW1wbGVFbmNvZGluZ1JlZ0V4cC5leGVjKHN0cik7XG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuXG4gIHZhciBlbmNvZGluZyA9IG1hdGNoWzFdO1xuICB2YXIgcSA9IDE7XG4gIGlmIChtYXRjaFsyXSkge1xuICAgIHZhciBwYXJhbXMgPSBtYXRjaFsyXS5zcGxpdCgnOycpO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcGFyYW1zLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgcCA9IHBhcmFtc1tqXS50cmltKCkuc3BsaXQoJz0nKTtcbiAgICAgIGlmIChwWzBdID09PSAncScpIHtcbiAgICAgICAgcSA9IHBhcnNlRmxvYXQocFsxXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZW5jb2Rpbmc6IGVuY29kaW5nLFxuICAgIHE6IHEsXG4gICAgaTogaVxuICB9O1xufVxuXG4vKipcbiAqIEdldCB0aGUgcHJpb3JpdHkgb2YgYW4gZW5jb2RpbmcuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldEVuY29kaW5nUHJpb3JpdHkoZW5jb2RpbmcsIGFjY2VwdGVkLCBpbmRleCkge1xuICB2YXIgcHJpb3JpdHkgPSB7bzogLTEsIHE6IDAsIHM6IDB9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYWNjZXB0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3BlYyA9IHNwZWNpZnkoZW5jb2RpbmcsIGFjY2VwdGVkW2ldLCBpbmRleCk7XG5cbiAgICBpZiAoc3BlYyAmJiAocHJpb3JpdHkucyAtIHNwZWMucyB8fCBwcmlvcml0eS5xIC0gc3BlYy5xIHx8IHByaW9yaXR5Lm8gLSBzcGVjLm8pIDwgMCkge1xuICAgICAgcHJpb3JpdHkgPSBzcGVjO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwcmlvcml0eTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHNwZWNpZmljaXR5IG9mIHRoZSBlbmNvZGluZy5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc3BlY2lmeShlbmNvZGluZywgc3BlYywgaW5kZXgpIHtcbiAgdmFyIHMgPSAwO1xuICBpZihzcGVjLmVuY29kaW5nLnRvTG93ZXJDYXNlKCkgPT09IGVuY29kaW5nLnRvTG93ZXJDYXNlKCkpe1xuICAgIHMgfD0gMTtcbiAgfSBlbHNlIGlmIChzcGVjLmVuY29kaW5nICE9PSAnKicgKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaTogaW5kZXgsXG4gICAgbzogc3BlYy5pLFxuICAgIHE6IHNwZWMucSxcbiAgICBzOiBzXG4gIH1cbn07XG5cbi8qKlxuICogR2V0IHRoZSBwcmVmZXJyZWQgZW5jb2RpbmdzIGZyb20gYW4gQWNjZXB0LUVuY29kaW5nIGhlYWRlci5cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBwcmVmZXJyZWRFbmNvZGluZ3MoYWNjZXB0LCBwcm92aWRlZCkge1xuICB2YXIgYWNjZXB0cyA9IHBhcnNlQWNjZXB0RW5jb2RpbmcoYWNjZXB0IHx8ICcnKTtcblxuICBpZiAoIXByb3ZpZGVkKSB7XG4gICAgLy8gc29ydGVkIGxpc3Qgb2YgYWxsIGVuY29kaW5nc1xuICAgIHJldHVybiBhY2NlcHRzXG4gICAgICAuZmlsdGVyKGlzUXVhbGl0eSlcbiAgICAgIC5zb3J0KGNvbXBhcmVTcGVjcylcbiAgICAgIC5tYXAoZ2V0RnVsbEVuY29kaW5nKTtcbiAgfVxuXG4gIHZhciBwcmlvcml0aWVzID0gcHJvdmlkZWQubWFwKGZ1bmN0aW9uIGdldFByaW9yaXR5KHR5cGUsIGluZGV4KSB7XG4gICAgcmV0dXJuIGdldEVuY29kaW5nUHJpb3JpdHkodHlwZSwgYWNjZXB0cywgaW5kZXgpO1xuICB9KTtcblxuICAvLyBzb3J0ZWQgbGlzdCBvZiBhY2NlcHRlZCBlbmNvZGluZ3NcbiAgcmV0dXJuIHByaW9yaXRpZXMuZmlsdGVyKGlzUXVhbGl0eSkuc29ydChjb21wYXJlU3BlY3MpLm1hcChmdW5jdGlvbiBnZXRFbmNvZGluZyhwcmlvcml0eSkge1xuICAgIHJldHVybiBwcm92aWRlZFtwcmlvcml0aWVzLmluZGV4T2YocHJpb3JpdHkpXTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ29tcGFyZSB0d28gc3BlY3MuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbXBhcmVTcGVjcyhhLCBiKSB7XG4gIHJldHVybiAoYi5xIC0gYS5xKSB8fCAoYi5zIC0gYS5zKSB8fCAoYS5vIC0gYi5vKSB8fCAoYS5pIC0gYi5pKSB8fCAwO1xufVxuXG4vKipcbiAqIEdldCBmdWxsIGVuY29kaW5nIHN0cmluZy5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ2V0RnVsbEVuY29kaW5nKHNwZWMpIHtcbiAgcmV0dXJuIHNwZWMuZW5jb2Rpbmc7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzcGVjIGhhcyBhbnkgcXVhbGl0eS5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNRdWFsaXR5KHNwZWMpIHtcbiAgcmV0dXJuIHNwZWMucSA+IDA7XG59XG4iLCIvKipcbiAqIG5lZ290aWF0b3JcbiAqIENvcHlyaWdodChjKSAyMDEyIElzYWFjIFouIFNjaGx1ZXRlclxuICogQ29weXJpZ2h0KGMpIDIwMTQgRmVkZXJpY28gUm9tZXJvXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBwcmVmZXJyZWRMYW5ndWFnZXM7XG5tb2R1bGUuZXhwb3J0cy5wcmVmZXJyZWRMYW5ndWFnZXMgPSBwcmVmZXJyZWRMYW5ndWFnZXM7XG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIHNpbXBsZUxhbmd1YWdlUmVnRXhwID0gL15cXHMqKFteXFxzXFwtO10rKSg/Oi0oW15cXHM7XSspKT9cXHMqKD86OyguKikpPyQvO1xuXG4vKipcbiAqIFBhcnNlIHRoZSBBY2NlcHQtTGFuZ3VhZ2UgaGVhZGVyLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZUFjY2VwdExhbmd1YWdlKGFjY2VwdCkge1xuICB2YXIgYWNjZXB0cyA9IGFjY2VwdC5zcGxpdCgnLCcpO1xuXG4gIGZvciAodmFyIGkgPSAwLCBqID0gMDsgaSA8IGFjY2VwdHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbGFuZ3VhZ2UgPSBwYXJzZUxhbmd1YWdlKGFjY2VwdHNbaV0udHJpbSgpLCBpKTtcblxuICAgIGlmIChsYW5ndWFnZSkge1xuICAgICAgYWNjZXB0c1tqKytdID0gbGFuZ3VhZ2U7XG4gICAgfVxuICB9XG5cbiAgLy8gdHJpbSBhY2NlcHRzXG4gIGFjY2VwdHMubGVuZ3RoID0gajtcblxuICByZXR1cm4gYWNjZXB0cztcbn1cblxuLyoqXG4gKiBQYXJzZSBhIGxhbmd1YWdlIGZyb20gdGhlIEFjY2VwdC1MYW5ndWFnZSBoZWFkZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlTGFuZ3VhZ2Uoc3RyLCBpKSB7XG4gIHZhciBtYXRjaCA9IHNpbXBsZUxhbmd1YWdlUmVnRXhwLmV4ZWMoc3RyKTtcbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHByZWZpeCA9IG1hdGNoWzFdLFxuICAgIHN1ZmZpeCA9IG1hdGNoWzJdLFxuICAgIGZ1bGwgPSBwcmVmaXg7XG5cbiAgaWYgKHN1ZmZpeCkgZnVsbCArPSBcIi1cIiArIHN1ZmZpeDtcblxuICB2YXIgcSA9IDE7XG4gIGlmIChtYXRjaFszXSkge1xuICAgIHZhciBwYXJhbXMgPSBtYXRjaFszXS5zcGxpdCgnOycpXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBwYXJhbXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBwID0gcGFyYW1zW2pdLnNwbGl0KCc9Jyk7XG4gICAgICBpZiAocFswXSA9PT0gJ3EnKSBxID0gcGFyc2VGbG9hdChwWzFdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHByZWZpeDogcHJlZml4LFxuICAgIHN1ZmZpeDogc3VmZml4LFxuICAgIHE6IHEsXG4gICAgaTogaSxcbiAgICBmdWxsOiBmdWxsXG4gIH07XG59XG5cbi8qKlxuICogR2V0IHRoZSBwcmlvcml0eSBvZiBhIGxhbmd1YWdlLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRMYW5ndWFnZVByaW9yaXR5KGxhbmd1YWdlLCBhY2NlcHRlZCwgaW5kZXgpIHtcbiAgdmFyIHByaW9yaXR5ID0ge286IC0xLCBxOiAwLCBzOiAwfTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFjY2VwdGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNwZWMgPSBzcGVjaWZ5KGxhbmd1YWdlLCBhY2NlcHRlZFtpXSwgaW5kZXgpO1xuXG4gICAgaWYgKHNwZWMgJiYgKHByaW9yaXR5LnMgLSBzcGVjLnMgfHwgcHJpb3JpdHkucSAtIHNwZWMucSB8fCBwcmlvcml0eS5vIC0gc3BlYy5vKSA8IDApIHtcbiAgICAgIHByaW9yaXR5ID0gc3BlYztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcHJpb3JpdHk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBzcGVjaWZpY2l0eSBvZiB0aGUgbGFuZ3VhZ2UuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNwZWNpZnkobGFuZ3VhZ2UsIHNwZWMsIGluZGV4KSB7XG4gIHZhciBwID0gcGFyc2VMYW5ndWFnZShsYW5ndWFnZSlcbiAgaWYgKCFwKSByZXR1cm4gbnVsbDtcbiAgdmFyIHMgPSAwO1xuICBpZihzcGVjLmZ1bGwudG9Mb3dlckNhc2UoKSA9PT0gcC5mdWxsLnRvTG93ZXJDYXNlKCkpe1xuICAgIHMgfD0gNDtcbiAgfSBlbHNlIGlmIChzcGVjLnByZWZpeC50b0xvd2VyQ2FzZSgpID09PSBwLmZ1bGwudG9Mb3dlckNhc2UoKSkge1xuICAgIHMgfD0gMjtcbiAgfSBlbHNlIGlmIChzcGVjLmZ1bGwudG9Mb3dlckNhc2UoKSA9PT0gcC5wcmVmaXgudG9Mb3dlckNhc2UoKSkge1xuICAgIHMgfD0gMTtcbiAgfSBlbHNlIGlmIChzcGVjLmZ1bGwgIT09ICcqJyApIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpOiBpbmRleCxcbiAgICBvOiBzcGVjLmksXG4gICAgcTogc3BlYy5xLFxuICAgIHM6IHNcbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgdGhlIHByZWZlcnJlZCBsYW5ndWFnZXMgZnJvbSBhbiBBY2NlcHQtTGFuZ3VhZ2UgaGVhZGVyLlxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHByZWZlcnJlZExhbmd1YWdlcyhhY2NlcHQsIHByb3ZpZGVkKSB7XG4gIC8vIFJGQyAyNjE2IHNlYyAxNC40OiBubyBoZWFkZXIgPSAqXG4gIHZhciBhY2NlcHRzID0gcGFyc2VBY2NlcHRMYW5ndWFnZShhY2NlcHQgPT09IHVuZGVmaW5lZCA/ICcqJyA6IGFjY2VwdCB8fCAnJyk7XG5cbiAgaWYgKCFwcm92aWRlZCkge1xuICAgIC8vIHNvcnRlZCBsaXN0IG9mIGFsbCBsYW5ndWFnZXNcbiAgICByZXR1cm4gYWNjZXB0c1xuICAgICAgLmZpbHRlcihpc1F1YWxpdHkpXG4gICAgICAuc29ydChjb21wYXJlU3BlY3MpXG4gICAgICAubWFwKGdldEZ1bGxMYW5ndWFnZSk7XG4gIH1cblxuICB2YXIgcHJpb3JpdGllcyA9IHByb3ZpZGVkLm1hcChmdW5jdGlvbiBnZXRQcmlvcml0eSh0eXBlLCBpbmRleCkge1xuICAgIHJldHVybiBnZXRMYW5ndWFnZVByaW9yaXR5KHR5cGUsIGFjY2VwdHMsIGluZGV4KTtcbiAgfSk7XG5cbiAgLy8gc29ydGVkIGxpc3Qgb2YgYWNjZXB0ZWQgbGFuZ3VhZ2VzXG4gIHJldHVybiBwcmlvcml0aWVzLmZpbHRlcihpc1F1YWxpdHkpLnNvcnQoY29tcGFyZVNwZWNzKS5tYXAoZnVuY3Rpb24gZ2V0TGFuZ3VhZ2UocHJpb3JpdHkpIHtcbiAgICByZXR1cm4gcHJvdmlkZWRbcHJpb3JpdGllcy5pbmRleE9mKHByaW9yaXR5KV07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbXBhcmUgdHdvIHNwZWNzLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb21wYXJlU3BlY3MoYSwgYikge1xuICByZXR1cm4gKGIucSAtIGEucSkgfHwgKGIucyAtIGEucykgfHwgKGEubyAtIGIubykgfHwgKGEuaSAtIGIuaSkgfHwgMDtcbn1cblxuLyoqXG4gKiBHZXQgZnVsbCBsYW5ndWFnZSBzdHJpbmcuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldEZ1bGxMYW5ndWFnZShzcGVjKSB7XG4gIHJldHVybiBzcGVjLmZ1bGw7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzcGVjIGhhcyBhbnkgcXVhbGl0eS5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNRdWFsaXR5KHNwZWMpIHtcbiAgcmV0dXJuIHNwZWMucSA+IDA7XG59XG4iLCIvKipcbiAqIG5lZ290aWF0b3JcbiAqIENvcHlyaWdodChjKSAyMDEyIElzYWFjIFouIFNjaGx1ZXRlclxuICogQ29weXJpZ2h0KGMpIDIwMTQgRmVkZXJpY28gUm9tZXJvXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBwcmVmZXJyZWRNZWRpYVR5cGVzO1xubW9kdWxlLmV4cG9ydHMucHJlZmVycmVkTWVkaWFUeXBlcyA9IHByZWZlcnJlZE1lZGlhVHlwZXM7XG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIHNpbXBsZU1lZGlhVHlwZVJlZ0V4cCA9IC9eXFxzKihbXlxcc1xcLztdKylcXC8oW147XFxzXSspXFxzKig/OjsoLiopKT8kLztcblxuLyoqXG4gKiBQYXJzZSB0aGUgQWNjZXB0IGhlYWRlci5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VBY2NlcHQoYWNjZXB0KSB7XG4gIHZhciBhY2NlcHRzID0gc3BsaXRNZWRpYVR5cGVzKGFjY2VwdCk7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGogPSAwOyBpIDwgYWNjZXB0cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBtZWRpYVR5cGUgPSBwYXJzZU1lZGlhVHlwZShhY2NlcHRzW2ldLnRyaW0oKSwgaSk7XG5cbiAgICBpZiAobWVkaWFUeXBlKSB7XG4gICAgICBhY2NlcHRzW2orK10gPSBtZWRpYVR5cGU7XG4gICAgfVxuICB9XG5cbiAgLy8gdHJpbSBhY2NlcHRzXG4gIGFjY2VwdHMubGVuZ3RoID0gajtcblxuICByZXR1cm4gYWNjZXB0cztcbn1cblxuLyoqXG4gKiBQYXJzZSBhIG1lZGlhIHR5cGUgZnJvbSB0aGUgQWNjZXB0IGhlYWRlci5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VNZWRpYVR5cGUoc3RyLCBpKSB7XG4gIHZhciBtYXRjaCA9IHNpbXBsZU1lZGlhVHlwZVJlZ0V4cC5leGVjKHN0cik7XG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuXG4gIHZhciBwYXJhbXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgcSA9IDE7XG4gIHZhciBzdWJ0eXBlID0gbWF0Y2hbMl07XG4gIHZhciB0eXBlID0gbWF0Y2hbMV07XG5cbiAgaWYgKG1hdGNoWzNdKSB7XG4gICAgdmFyIGt2cHMgPSBzcGxpdFBhcmFtZXRlcnMobWF0Y2hbM10pLm1hcChzcGxpdEtleVZhbHVlUGFpcik7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGt2cHMubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBwYWlyID0ga3Zwc1tqXTtcbiAgICAgIHZhciBrZXkgPSBwYWlyWzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgdmFsID0gcGFpclsxXTtcblxuICAgICAgLy8gZ2V0IHRoZSB2YWx1ZSwgdW53cmFwcGluZyBxdW90ZXNcbiAgICAgIHZhciB2YWx1ZSA9IHZhbCAmJiB2YWxbMF0gPT09ICdcIicgJiYgdmFsW3ZhbC5sZW5ndGggLSAxXSA9PT0gJ1wiJ1xuICAgICAgICA/IHZhbC5zdWJzdHIoMSwgdmFsLmxlbmd0aCAtIDIpXG4gICAgICAgIDogdmFsO1xuXG4gICAgICBpZiAoa2V5ID09PSAncScpIHtcbiAgICAgICAgcSA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgLy8gc3RvcmUgcGFyYW1ldGVyXG4gICAgICBwYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBzdWJ0eXBlOiBzdWJ0eXBlLFxuICAgIHBhcmFtczogcGFyYW1zLFxuICAgIHE6IHEsXG4gICAgaTogaVxuICB9O1xufVxuXG4vKipcbiAqIEdldCB0aGUgcHJpb3JpdHkgb2YgYSBtZWRpYSB0eXBlLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRNZWRpYVR5cGVQcmlvcml0eSh0eXBlLCBhY2NlcHRlZCwgaW5kZXgpIHtcbiAgdmFyIHByaW9yaXR5ID0ge286IC0xLCBxOiAwLCBzOiAwfTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFjY2VwdGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNwZWMgPSBzcGVjaWZ5KHR5cGUsIGFjY2VwdGVkW2ldLCBpbmRleCk7XG5cbiAgICBpZiAoc3BlYyAmJiAocHJpb3JpdHkucyAtIHNwZWMucyB8fCBwcmlvcml0eS5xIC0gc3BlYy5xIHx8IHByaW9yaXR5Lm8gLSBzcGVjLm8pIDwgMCkge1xuICAgICAgcHJpb3JpdHkgPSBzcGVjO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwcmlvcml0eTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHNwZWNpZmljaXR5IG9mIHRoZSBtZWRpYSB0eXBlLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzcGVjaWZ5KHR5cGUsIHNwZWMsIGluZGV4KSB7XG4gIHZhciBwID0gcGFyc2VNZWRpYVR5cGUodHlwZSk7XG4gIHZhciBzID0gMDtcblxuICBpZiAoIXApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmKHNwZWMudHlwZS50b0xvd2VyQ2FzZSgpID09IHAudHlwZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgcyB8PSA0XG4gIH0gZWxzZSBpZihzcGVjLnR5cGUgIT0gJyonKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZihzcGVjLnN1YnR5cGUudG9Mb3dlckNhc2UoKSA9PSBwLnN1YnR5cGUudG9Mb3dlckNhc2UoKSkge1xuICAgIHMgfD0gMlxuICB9IGVsc2UgaWYoc3BlYy5zdWJ0eXBlICE9ICcqJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhzcGVjLnBhcmFtcyk7XG4gIGlmIChrZXlzLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoa2V5cy5ldmVyeShmdW5jdGlvbiAoaykge1xuICAgICAgcmV0dXJuIHNwZWMucGFyYW1zW2tdID09ICcqJyB8fCAoc3BlYy5wYXJhbXNba10gfHwgJycpLnRvTG93ZXJDYXNlKCkgPT0gKHAucGFyYW1zW2tdIHx8ICcnKS50b0xvd2VyQ2FzZSgpO1xuICAgIH0pKSB7XG4gICAgICBzIHw9IDFcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGk6IGluZGV4LFxuICAgIG86IHNwZWMuaSxcbiAgICBxOiBzcGVjLnEsXG4gICAgczogcyxcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgcHJlZmVycmVkIG1lZGlhIHR5cGVzIGZyb20gYW4gQWNjZXB0IGhlYWRlci5cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBwcmVmZXJyZWRNZWRpYVR5cGVzKGFjY2VwdCwgcHJvdmlkZWQpIHtcbiAgLy8gUkZDIDI2MTYgc2VjIDE0LjI6IG5vIGhlYWRlciA9ICovKlxuICB2YXIgYWNjZXB0cyA9IHBhcnNlQWNjZXB0KGFjY2VwdCA9PT0gdW5kZWZpbmVkID8gJyovKicgOiBhY2NlcHQgfHwgJycpO1xuXG4gIGlmICghcHJvdmlkZWQpIHtcbiAgICAvLyBzb3J0ZWQgbGlzdCBvZiBhbGwgdHlwZXNcbiAgICByZXR1cm4gYWNjZXB0c1xuICAgICAgLmZpbHRlcihpc1F1YWxpdHkpXG4gICAgICAuc29ydChjb21wYXJlU3BlY3MpXG4gICAgICAubWFwKGdldEZ1bGxUeXBlKTtcbiAgfVxuXG4gIHZhciBwcmlvcml0aWVzID0gcHJvdmlkZWQubWFwKGZ1bmN0aW9uIGdldFByaW9yaXR5KHR5cGUsIGluZGV4KSB7XG4gICAgcmV0dXJuIGdldE1lZGlhVHlwZVByaW9yaXR5KHR5cGUsIGFjY2VwdHMsIGluZGV4KTtcbiAgfSk7XG5cbiAgLy8gc29ydGVkIGxpc3Qgb2YgYWNjZXB0ZWQgdHlwZXNcbiAgcmV0dXJuIHByaW9yaXRpZXMuZmlsdGVyKGlzUXVhbGl0eSkuc29ydChjb21wYXJlU3BlY3MpLm1hcChmdW5jdGlvbiBnZXRUeXBlKHByaW9yaXR5KSB7XG4gICAgcmV0dXJuIHByb3ZpZGVkW3ByaW9yaXRpZXMuaW5kZXhPZihwcmlvcml0eSldO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDb21wYXJlIHR3byBzcGVjcy5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29tcGFyZVNwZWNzKGEsIGIpIHtcbiAgcmV0dXJuIChiLnEgLSBhLnEpIHx8IChiLnMgLSBhLnMpIHx8IChhLm8gLSBiLm8pIHx8IChhLmkgLSBiLmkpIHx8IDA7XG59XG5cbi8qKlxuICogR2V0IGZ1bGwgdHlwZSBzdHJpbmcuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldEZ1bGxUeXBlKHNwZWMpIHtcbiAgcmV0dXJuIHNwZWMudHlwZSArICcvJyArIHNwZWMuc3VidHlwZTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHNwZWMgaGFzIGFueSBxdWFsaXR5LlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc1F1YWxpdHkoc3BlYykge1xuICByZXR1cm4gc3BlYy5xID4gMDtcbn1cblxuLyoqXG4gKiBDb3VudCB0aGUgbnVtYmVyIG9mIHF1b3RlcyBpbiBhIHN0cmluZy5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcXVvdGVDb3VudChzdHJpbmcpIHtcbiAgdmFyIGNvdW50ID0gMDtcbiAgdmFyIGluZGV4ID0gMDtcblxuICB3aGlsZSAoKGluZGV4ID0gc3RyaW5nLmluZGV4T2YoJ1wiJywgaW5kZXgpKSAhPT0gLTEpIHtcbiAgICBjb3VudCsrO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICByZXR1cm4gY291bnQ7XG59XG5cbi8qKlxuICogU3BsaXQgYSBrZXkgdmFsdWUgcGFpci5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc3BsaXRLZXlWYWx1ZVBhaXIoc3RyKSB7XG4gIHZhciBpbmRleCA9IHN0ci5pbmRleE9mKCc9Jyk7XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG5cbiAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgIGtleSA9IHN0cjtcbiAgfSBlbHNlIHtcbiAgICBrZXkgPSBzdHIuc3Vic3RyKDAsIGluZGV4KTtcbiAgICB2YWwgPSBzdHIuc3Vic3RyKGluZGV4ICsgMSk7XG4gIH1cblxuICByZXR1cm4gW2tleSwgdmFsXTtcbn1cblxuLyoqXG4gKiBTcGxpdCBhbiBBY2NlcHQgaGVhZGVyIGludG8gbWVkaWEgdHlwZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNwbGl0TWVkaWFUeXBlcyhhY2NlcHQpIHtcbiAgdmFyIGFjY2VwdHMgPSBhY2NlcHQuc3BsaXQoJywnKTtcblxuICBmb3IgKHZhciBpID0gMSwgaiA9IDA7IGkgPCBhY2NlcHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHF1b3RlQ291bnQoYWNjZXB0c1tqXSkgJSAyID09IDApIHtcbiAgICAgIGFjY2VwdHNbKytqXSA9IGFjY2VwdHNbaV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY2VwdHNbal0gKz0gJywnICsgYWNjZXB0c1tpXTtcbiAgICB9XG4gIH1cblxuICAvLyB0cmltIGFjY2VwdHNcbiAgYWNjZXB0cy5sZW5ndGggPSBqICsgMTtcblxuICByZXR1cm4gYWNjZXB0cztcbn1cblxuLyoqXG4gKiBTcGxpdCBhIHN0cmluZyBvZiBwYXJhbWV0ZXJzLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzcGxpdFBhcmFtZXRlcnMoc3RyKSB7XG4gIHZhciBwYXJhbWV0ZXJzID0gc3RyLnNwbGl0KCc7Jyk7XG5cbiAgZm9yICh2YXIgaSA9IDEsIGogPSAwOyBpIDwgcGFyYW1ldGVycy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChxdW90ZUNvdW50KHBhcmFtZXRlcnNbal0pICUgMiA9PSAwKSB7XG4gICAgICBwYXJhbWV0ZXJzWysral0gPSBwYXJhbWV0ZXJzW2ldO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJhbWV0ZXJzW2pdICs9ICc7JyArIHBhcmFtZXRlcnNbaV07XG4gICAgfVxuICB9XG5cbiAgLy8gdHJpbSBwYXJhbWV0ZXJzXG4gIHBhcmFtZXRlcnMubGVuZ3RoID0gaiArIDE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbWV0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFyYW1ldGVyc1tpXSA9IHBhcmFtZXRlcnNbaV0udHJpbSgpO1xuICB9XG5cbiAgcmV0dXJuIHBhcmFtZXRlcnM7XG59XG4iLCIvKiFcbiAqIGV4cHJlc3NcbiAqIENvcHlyaWdodChjKSAyMDA5LTIwMTMgVEogSG9sb3dheWNodWtcbiAqIENvcHlyaWdodChjKSAyMDE0LTIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBjb250ZW50RGlzcG9zaXRpb24gPSByZXF1aXJlKCdjb250ZW50LWRpc3Bvc2l0aW9uJyk7XG52YXIgZGVwcmVjYXRlID0gcmVxdWlyZSgnZGVwZCcpKCdleHByZXNzJyk7XG52YXIgZW5jb2RlVXJsID0gcmVxdWlyZSgnZW5jb2RldXJsJyk7XG52YXIgZXNjYXBlSHRtbCA9IHJlcXVpcmUoJ2VzY2FwZS1odG1sJyk7XG52YXIgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbnZhciBpc0Fic29sdXRlID0gcmVxdWlyZSgnLi91dGlscycpLmlzQWJzb2x1dGU7XG52YXIgb25GaW5pc2hlZCA9IHJlcXVpcmUoJ29uLWZpbmlzaGVkJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBzdGF0dXNlcyA9IHJlcXVpcmUoJ3N0YXR1c2VzJylcbnZhciBtZXJnZSA9IHJlcXVpcmUoJ3V0aWxzLW1lcmdlJyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJ2Nvb2tpZS1zaWduYXR1cmUnKS5zaWduO1xudmFyIG5vcm1hbGl6ZVR5cGUgPSByZXF1aXJlKCcuL3V0aWxzJykubm9ybWFsaXplVHlwZTtcbnZhciBub3JtYWxpemVUeXBlcyA9IHJlcXVpcmUoJy4vdXRpbHMnKS5ub3JtYWxpemVUeXBlcztcbnZhciBzZXRDaGFyc2V0ID0gcmVxdWlyZSgnLi91dGlscycpLnNldENoYXJzZXQ7XG52YXIgY29va2llID0gcmVxdWlyZSgnY29va2llJyk7XG52YXIgc2VuZCA9IHJlcXVpcmUoJ3NlbmQnKTtcbnZhciBleHRuYW1lID0gcGF0aC5leHRuYW1lO1xudmFyIG1pbWUgPSBzZW5kLm1pbWU7XG52YXIgcmVzb2x2ZSA9IHBhdGgucmVzb2x2ZTtcbnZhciB2YXJ5ID0gcmVxdWlyZSgndmFyeScpO1xuXG4vKipcbiAqIFJlc3BvbnNlIHByb3RvdHlwZS5cbiAqIEBwdWJsaWNcbiAqL1xuXG52YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShodHRwLlNlcnZlclJlc3BvbnNlLnByb3RvdHlwZSlcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc1xuXG4vKipcbiAqIE1vZHVsZSB2YXJpYWJsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBjaGFyc2V0UmVnRXhwID0gLztcXHMqY2hhcnNldFxccyo9LztcblxuLyoqXG4gKiBTZXQgc3RhdHVzIGBjb2RlYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gY29kZVxuICogQHJldHVybiB7U2VydmVyUmVzcG9uc2V9XG4gKiBAcHVibGljXG4gKi9cblxucmVzLnN0YXR1cyA9IGZ1bmN0aW9uIHN0YXR1cyhjb2RlKSB7XG4gIHRoaXMuc3RhdHVzQ29kZSA9IGNvZGU7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgTGluayBoZWFkZXIgZmllbGQgd2l0aCB0aGUgZ2l2ZW4gYGxpbmtzYC5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICByZXMubGlua3Moe1xuICogICAgICBuZXh0OiAnaHR0cDovL2FwaS5leGFtcGxlLmNvbS91c2Vycz9wYWdlPTInLFxuICogICAgICBsYXN0OiAnaHR0cDovL2FwaS5leGFtcGxlLmNvbS91c2Vycz9wYWdlPTUnXG4gKiAgICB9KTtcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbGlua3NcbiAqIEByZXR1cm4ge1NlcnZlclJlc3BvbnNlfVxuICogQHB1YmxpY1xuICovXG5cbnJlcy5saW5rcyA9IGZ1bmN0aW9uKGxpbmtzKXtcbiAgdmFyIGxpbmsgPSB0aGlzLmdldCgnTGluaycpIHx8ICcnO1xuICBpZiAobGluaykgbGluayArPSAnLCAnO1xuICByZXR1cm4gdGhpcy5zZXQoJ0xpbmsnLCBsaW5rICsgT2JqZWN0LmtleXMobGlua3MpLm1hcChmdW5jdGlvbihyZWwpe1xuICAgIHJldHVybiAnPCcgKyBsaW5rc1tyZWxdICsgJz47IHJlbD1cIicgKyByZWwgKyAnXCInO1xuICB9KS5qb2luKCcsICcpKTtcbn07XG5cbi8qKlxuICogU2VuZCBhIHJlc3BvbnNlLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICByZXMuc2VuZChCdWZmZXIuZnJvbSgnd2Fob28nKSk7XG4gKiAgICAgcmVzLnNlbmQoeyBzb21lOiAnanNvbicgfSk7XG4gKiAgICAgcmVzLnNlbmQoJzxwPnNvbWUgaHRtbDwvcD4nKTtcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8Ym9vbGVhbnxvYmplY3R8QnVmZmVyfSBib2R5XG4gKiBAcHVibGljXG4gKi9cblxucmVzLnNlbmQgPSBmdW5jdGlvbiBzZW5kKGJvZHkpIHtcbiAgdmFyIGNodW5rID0gYm9keTtcbiAgdmFyIGVuY29kaW5nO1xuICB2YXIgcmVxID0gdGhpcy5yZXE7XG4gIHZhciB0eXBlO1xuXG4gIC8vIHNldHRpbmdzXG4gIHZhciBhcHAgPSB0aGlzLmFwcDtcblxuICAvLyBhbGxvdyBzdGF0dXMgLyBib2R5XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgLy8gcmVzLnNlbmQoYm9keSwgc3RhdHVzKSBiYWNrd2FyZHMgY29tcGF0XG4gICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gIT09ICdudW1iZXInICYmIHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICdudW1iZXInKSB7XG4gICAgICBkZXByZWNhdGUoJ3Jlcy5zZW5kKGJvZHksIHN0YXR1cyk6IFVzZSByZXMuc3RhdHVzKHN0YXR1cykuc2VuZChib2R5KSBpbnN0ZWFkJyk7XG4gICAgICB0aGlzLnN0YXR1c0NvZGUgPSBhcmd1bWVudHNbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlcHJlY2F0ZSgncmVzLnNlbmQoc3RhdHVzLCBib2R5KTogVXNlIHJlcy5zdGF0dXMoc3RhdHVzKS5zZW5kKGJvZHkpIGluc3RlYWQnKTtcbiAgICAgIHRoaXMuc3RhdHVzQ29kZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgIGNodW5rID0gYXJndW1lbnRzWzFdO1xuICAgIH1cbiAgfVxuXG4gIC8vIGRpc2FtYmlndWF0ZSByZXMuc2VuZChzdGF0dXMpIGFuZCByZXMuc2VuZChzdGF0dXMsIG51bSlcbiAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ251bWJlcicgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIC8vIHJlcy5zZW5kKHN0YXR1cykgd2lsbCBzZXQgc3RhdHVzIG1lc3NhZ2UgYXMgdGV4dCBzdHJpbmdcbiAgICBpZiAoIXRoaXMuZ2V0KCdDb250ZW50LVR5cGUnKSkge1xuICAgICAgdGhpcy50eXBlKCd0eHQnKTtcbiAgICB9XG5cbiAgICBkZXByZWNhdGUoJ3Jlcy5zZW5kKHN0YXR1cyk6IFVzZSByZXMuc2VuZFN0YXR1cyhzdGF0dXMpIGluc3RlYWQnKTtcbiAgICB0aGlzLnN0YXR1c0NvZGUgPSBjaHVuaztcbiAgICBjaHVuayA9IHN0YXR1c2VzW2NodW5rXVxuICB9XG5cbiAgc3dpdGNoICh0eXBlb2YgY2h1bmspIHtcbiAgICAvLyBzdHJpbmcgZGVmYXVsdGluZyB0byBodG1sXG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGlmICghdGhpcy5nZXQoJ0NvbnRlbnQtVHlwZScpKSB7XG4gICAgICAgIHRoaXMudHlwZSgnaHRtbCcpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgICAgIGNodW5rID0gJyc7XG4gICAgICB9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIHtcbiAgICAgICAgaWYgKCF0aGlzLmdldCgnQ29udGVudC1UeXBlJykpIHtcbiAgICAgICAgICB0aGlzLnR5cGUoJ2JpbicpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5qc29uKGNodW5rKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgLy8gd3JpdGUgc3RyaW5ncyBpbiB1dGYtOFxuICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnO1xuICAgIHR5cGUgPSB0aGlzLmdldCgnQ29udGVudC1UeXBlJyk7XG5cbiAgICAvLyByZWZsZWN0IHRoaXMgaW4gY29udGVudC10eXBlXG4gICAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5zZXQoJ0NvbnRlbnQtVHlwZScsIHNldENoYXJzZXQodHlwZSwgJ3V0Zi04JykpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGRldGVybWluZSBpZiBFVGFnIHNob3VsZCBiZSBnZW5lcmF0ZWRcbiAgdmFyIGV0YWdGbiA9IGFwcC5nZXQoJ2V0YWcgZm4nKVxuICB2YXIgZ2VuZXJhdGVFVGFnID0gIXRoaXMuZ2V0KCdFVGFnJykgJiYgdHlwZW9mIGV0YWdGbiA9PT0gJ2Z1bmN0aW9uJ1xuXG4gIC8vIHBvcHVsYXRlIENvbnRlbnQtTGVuZ3RoXG4gIHZhciBsZW5cbiAgaWYgKGNodW5rICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkge1xuICAgICAgLy8gZ2V0IGxlbmd0aCBvZiBCdWZmZXJcbiAgICAgIGxlbiA9IGNodW5rLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAoIWdlbmVyYXRlRVRhZyAmJiBjaHVuay5sZW5ndGggPCAxMDAwKSB7XG4gICAgICAvLyBqdXN0IGNhbGN1bGF0ZSBsZW5ndGggd2hlbiBubyBFVGFnICsgc21hbGwgY2h1bmtcbiAgICAgIGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKGNodW5rLCBlbmNvZGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gY29udmVydCBjaHVuayB0byBCdWZmZXIgYW5kIGNhbGN1bGF0ZVxuICAgICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpXG4gICAgICBlbmNvZGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIGxlbiA9IGNodW5rLmxlbmd0aFxuICAgIH1cblxuICAgIHRoaXMuc2V0KCdDb250ZW50LUxlbmd0aCcsIGxlbik7XG4gIH1cblxuICAvLyBwb3B1bGF0ZSBFVGFnXG4gIHZhciBldGFnO1xuICBpZiAoZ2VuZXJhdGVFVGFnICYmIGxlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKChldGFnID0gZXRhZ0ZuKGNodW5rLCBlbmNvZGluZykpKSB7XG4gICAgICB0aGlzLnNldCgnRVRhZycsIGV0YWcpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZyZXNobmVzc1xuICBpZiAocmVxLmZyZXNoKSB0aGlzLnN0YXR1c0NvZGUgPSAzMDQ7XG5cbiAgLy8gc3RyaXAgaXJyZWxldmFudCBoZWFkZXJzXG4gIGlmICgyMDQgPT09IHRoaXMuc3RhdHVzQ29kZSB8fCAzMDQgPT09IHRoaXMuc3RhdHVzQ29kZSkge1xuICAgIHRoaXMucmVtb3ZlSGVhZGVyKCdDb250ZW50LVR5cGUnKTtcbiAgICB0aGlzLnJlbW92ZUhlYWRlcignQ29udGVudC1MZW5ndGgnKTtcbiAgICB0aGlzLnJlbW92ZUhlYWRlcignVHJhbnNmZXItRW5jb2RpbmcnKTtcbiAgICBjaHVuayA9ICcnO1xuICB9XG5cbiAgaWYgKHJlcS5tZXRob2QgPT09ICdIRUFEJykge1xuICAgIC8vIHNraXAgYm9keSBmb3IgSEVBRFxuICAgIHRoaXMuZW5kKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVzcG9uZFxuICAgIHRoaXMuZW5kKGNodW5rLCBlbmNvZGluZyk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZCBKU09OIHJlc3BvbnNlLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICByZXMuanNvbihudWxsKTtcbiAqICAgICByZXMuanNvbih7IHVzZXI6ICd0aicgfSk7XG4gKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfGJvb2xlYW58b2JqZWN0fSBvYmpcbiAqIEBwdWJsaWNcbiAqL1xuXG5yZXMuanNvbiA9IGZ1bmN0aW9uIGpzb24ob2JqKSB7XG4gIHZhciB2YWwgPSBvYmo7XG5cbiAgLy8gYWxsb3cgc3RhdHVzIC8gYm9keVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIC8vIHJlcy5qc29uKGJvZHksIHN0YXR1cykgYmFja3dhcmRzIGNvbXBhdFxuICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzFdID09PSAnbnVtYmVyJykge1xuICAgICAgZGVwcmVjYXRlKCdyZXMuanNvbihvYmosIHN0YXR1cyk6IFVzZSByZXMuc3RhdHVzKHN0YXR1cykuanNvbihvYmopIGluc3RlYWQnKTtcbiAgICAgIHRoaXMuc3RhdHVzQ29kZSA9IGFyZ3VtZW50c1sxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVwcmVjYXRlKCdyZXMuanNvbihzdGF0dXMsIG9iaik6IFVzZSByZXMuc3RhdHVzKHN0YXR1cykuanNvbihvYmopIGluc3RlYWQnKTtcbiAgICAgIHRoaXMuc3RhdHVzQ29kZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgIHZhbCA9IGFyZ3VtZW50c1sxXTtcbiAgICB9XG4gIH1cblxuICAvLyBzZXR0aW5nc1xuICB2YXIgYXBwID0gdGhpcy5hcHA7XG4gIHZhciBlc2NhcGUgPSBhcHAuZ2V0KCdqc29uIGVzY2FwZScpXG4gIHZhciByZXBsYWNlciA9IGFwcC5nZXQoJ2pzb24gcmVwbGFjZXInKTtcbiAgdmFyIHNwYWNlcyA9IGFwcC5nZXQoJ2pzb24gc3BhY2VzJyk7XG4gIHZhciBib2R5ID0gc3RyaW5naWZ5KHZhbCwgcmVwbGFjZXIsIHNwYWNlcywgZXNjYXBlKVxuXG4gIC8vIGNvbnRlbnQtdHlwZVxuICBpZiAoIXRoaXMuZ2V0KCdDb250ZW50LVR5cGUnKSkge1xuICAgIHRoaXMuc2V0KCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuc2VuZChib2R5KTtcbn07XG5cbi8qKlxuICogU2VuZCBKU09OIHJlc3BvbnNlIHdpdGggSlNPTlAgY2FsbGJhY2sgc3VwcG9ydC5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICAgcmVzLmpzb25wKG51bGwpO1xuICogICAgIHJlcy5qc29ucCh7IHVzZXI6ICd0aicgfSk7XG4gKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfGJvb2xlYW58b2JqZWN0fSBvYmpcbiAqIEBwdWJsaWNcbiAqL1xuXG5yZXMuanNvbnAgPSBmdW5jdGlvbiBqc29ucChvYmopIHtcbiAgdmFyIHZhbCA9IG9iajtcblxuICAvLyBhbGxvdyBzdGF0dXMgLyBib2R5XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgLy8gcmVzLmpzb24oYm9keSwgc3RhdHVzKSBiYWNrd2FyZHMgY29tcGF0XG4gICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICdudW1iZXInKSB7XG4gICAgICBkZXByZWNhdGUoJ3Jlcy5qc29ucChvYmosIHN0YXR1cyk6IFVzZSByZXMuc3RhdHVzKHN0YXR1cykuanNvbihvYmopIGluc3RlYWQnKTtcbiAgICAgIHRoaXMuc3RhdHVzQ29kZSA9IGFyZ3VtZW50c1sxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVwcmVjYXRlKCdyZXMuanNvbnAoc3RhdHVzLCBvYmopOiBVc2UgcmVzLnN0YXR1cyhzdGF0dXMpLmpzb25wKG9iaikgaW5zdGVhZCcpO1xuICAgICAgdGhpcy5zdGF0dXNDb2RlID0gYXJndW1lbnRzWzBdO1xuICAgICAgdmFsID0gYXJndW1lbnRzWzFdO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNldHRpbmdzXG4gIHZhciBhcHAgPSB0aGlzLmFwcDtcbiAgdmFyIGVzY2FwZSA9IGFwcC5nZXQoJ2pzb24gZXNjYXBlJylcbiAgdmFyIHJlcGxhY2VyID0gYXBwLmdldCgnanNvbiByZXBsYWNlcicpO1xuICB2YXIgc3BhY2VzID0gYXBwLmdldCgnanNvbiBzcGFjZXMnKTtcbiAgdmFyIGJvZHkgPSBzdHJpbmdpZnkodmFsLCByZXBsYWNlciwgc3BhY2VzLCBlc2NhcGUpXG4gIHZhciBjYWxsYmFjayA9IHRoaXMucmVxLnF1ZXJ5W2FwcC5nZXQoJ2pzb25wIGNhbGxiYWNrIG5hbWUnKV07XG5cbiAgLy8gY29udGVudC10eXBlXG4gIGlmICghdGhpcy5nZXQoJ0NvbnRlbnQtVHlwZScpKSB7XG4gICAgdGhpcy5zZXQoJ1gtQ29udGVudC1UeXBlLU9wdGlvbnMnLCAnbm9zbmlmZicpO1xuICAgIHRoaXMuc2V0KCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICB9XG5cbiAgLy8gZml4dXAgY2FsbGJhY2tcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2FsbGJhY2spKSB7XG4gICAgY2FsbGJhY2sgPSBjYWxsYmFja1swXTtcbiAgfVxuXG4gIC8vIGpzb25wXG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnICYmIGNhbGxiYWNrLmxlbmd0aCAhPT0gMCkge1xuICAgIHRoaXMuc2V0KCdYLUNvbnRlbnQtVHlwZS1PcHRpb25zJywgJ25vc25pZmYnKTtcbiAgICB0aGlzLnNldCgnQ29udGVudC1UeXBlJywgJ3RleHQvamF2YXNjcmlwdCcpO1xuXG4gICAgLy8gcmVzdHJpY3QgY2FsbGJhY2sgY2hhcnNldFxuICAgIGNhbGxiYWNrID0gY2FsbGJhY2sucmVwbGFjZSgvW15cXFtcXF1cXHckLl0vZywgJycpO1xuXG4gICAgLy8gcmVwbGFjZSBjaGFycyBub3QgYWxsb3dlZCBpbiBKYXZhU2NyaXB0IHRoYXQgYXJlIGluIEpTT05cbiAgICBib2R5ID0gYm9keVxuICAgICAgLnJlcGxhY2UoL1xcdTIwMjgvZywgJ1xcXFx1MjAyOCcpXG4gICAgICAucmVwbGFjZSgvXFx1MjAyOS9nLCAnXFxcXHUyMDI5Jyk7XG5cbiAgICAvLyB0aGUgLyoqLyBpcyBhIHNwZWNpZmljIHNlY3VyaXR5IG1pdGlnYXRpb24gZm9yIFwiUm9zZXR0YSBGbGFzaCBKU09OUCBhYnVzZVwiXG4gICAgLy8gdGhlIHR5cGVvZiBjaGVjayBpcyBqdXN0IHRvIHJlZHVjZSBjbGllbnQgZXJyb3Igbm9pc2VcbiAgICBib2R5ID0gJy8qKi8gdHlwZW9mICcgKyBjYWxsYmFjayArICcgPT09IFxcJ2Z1bmN0aW9uXFwnICYmICcgKyBjYWxsYmFjayArICcoJyArIGJvZHkgKyAnKTsnO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuc2VuZChib2R5KTtcbn07XG5cbi8qKlxuICogU2VuZCBnaXZlbiBIVFRQIHN0YXR1cyBjb2RlLlxuICpcbiAqIFNldHMgdGhlIHJlc3BvbnNlIHN0YXR1cyB0byBgc3RhdHVzQ29kZWAgYW5kIHRoZSBib2R5IG9mIHRoZVxuICogcmVzcG9uc2UgdG8gdGhlIHN0YW5kYXJkIGRlc2NyaXB0aW9uIGZyb20gbm9kZSdzIGh0dHAuU1RBVFVTX0NPREVTXG4gKiBvciB0aGUgc3RhdHVzQ29kZSBudW1iZXIgaWYgbm8gZGVzY3JpcHRpb24uXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgIHJlcy5zZW5kU3RhdHVzKDIwMCk7XG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXR1c0NvZGVcbiAqIEBwdWJsaWNcbiAqL1xuXG5yZXMuc2VuZFN0YXR1cyA9IGZ1bmN0aW9uIHNlbmRTdGF0dXMoc3RhdHVzQ29kZSkge1xuICB2YXIgYm9keSA9IHN0YXR1c2VzW3N0YXR1c0NvZGVdIHx8IFN0cmluZyhzdGF0dXNDb2RlKVxuXG4gIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gIHRoaXMudHlwZSgndHh0Jyk7XG5cbiAgcmV0dXJuIHRoaXMuc2VuZChib2R5KTtcbn07XG5cbi8qKlxuICogVHJhbnNmZXIgdGhlIGZpbGUgYXQgdGhlIGdpdmVuIGBwYXRoYC5cbiAqXG4gKiBBdXRvbWF0aWNhbGx5IHNldHMgdGhlIF9Db250ZW50LVR5cGVfIHJlc3BvbnNlIGhlYWRlciBmaWVsZC5cbiAqIFRoZSBjYWxsYmFjayBgY2FsbGJhY2soZXJyKWAgaXMgaW52b2tlZCB3aGVuIHRoZSB0cmFuc2ZlciBpcyBjb21wbGV0ZVxuICogb3Igd2hlbiBhbiBlcnJvciBvY2N1cnMuIEJlIHN1cmUgdG8gY2hlY2sgYHJlcy5zZW50SGVhZGVyYFxuICogaWYgeW91IHdpc2ggdG8gYXR0ZW1wdCByZXNwb25kaW5nLCBhcyB0aGUgaGVhZGVyIGFuZCBzb21lIGRhdGFcbiAqIG1heSBoYXZlIGFscmVhZHkgYmVlbiB0cmFuc2ZlcnJlZC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAgLSBgbWF4QWdlYCAgIGRlZmF1bHRpbmcgdG8gMCAoY2FuIGJlIHN0cmluZyBjb252ZXJ0ZWQgYnkgYG1zYClcbiAqICAgLSBgcm9vdGAgICAgIHJvb3QgZGlyZWN0b3J5IGZvciByZWxhdGl2ZSBmaWxlbmFtZXNcbiAqICAgLSBgaGVhZGVyc2AgIG9iamVjdCBvZiBoZWFkZXJzIHRvIHNlcnZlIHdpdGggZmlsZVxuICogICAtIGBkb3RmaWxlc2Agc2VydmUgZG90ZmlsZXMsIGRlZmF1bHRpbmcgdG8gZmFsc2U7IGNhbiBiZSBgXCJhbGxvd1wiYCB0byBzZW5kIHRoZW1cbiAqXG4gKiBPdGhlciBvcHRpb25zIGFyZSBwYXNzZWQgYWxvbmcgdG8gYHNlbmRgLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICBUaGUgZm9sbG93aW5nIGV4YW1wbGUgaWxsdXN0cmF0ZXMgaG93IGByZXMuc2VuZEZpbGUoKWAgbWF5XG4gKiAgYmUgdXNlZCBhcyBhbiBhbHRlcm5hdGl2ZSBmb3IgdGhlIGBzdGF0aWMoKWAgbWlkZGxld2FyZSBmb3JcbiAqICBkeW5hbWljIHNpdHVhdGlvbnMuIFRoZSBjb2RlIGJhY2tpbmcgYHJlcy5zZW5kRmlsZSgpYCBpcyBhY3R1YWxseVxuICogIHRoZSBzYW1lIGNvZGUsIHNvIEhUVFAgY2FjaGUgc3VwcG9ydCBldGMgaXMgaWRlbnRpY2FsLlxuICpcbiAqICAgICBhcHAuZ2V0KCcvdXNlci86dWlkL3Bob3Rvcy86ZmlsZScsIGZ1bmN0aW9uKHJlcSwgcmVzKXtcbiAqICAgICAgIHZhciB1aWQgPSByZXEucGFyYW1zLnVpZFxuICogICAgICAgICAsIGZpbGUgPSByZXEucGFyYW1zLmZpbGU7XG4gKlxuICogICAgICAgcmVxLnVzZXIubWF5Vmlld0ZpbGVzRnJvbSh1aWQsIGZ1bmN0aW9uKHllcyl7XG4gKiAgICAgICAgIGlmICh5ZXMpIHtcbiAqICAgICAgICAgICByZXMuc2VuZEZpbGUoJy91cGxvYWRzLycgKyB1aWQgKyAnLycgKyBmaWxlKTtcbiAqICAgICAgICAgfSBlbHNlIHtcbiAqICAgICAgICAgICByZXMuc2VuZCg0MDMsICdTb3JyeSEgeW91IGNhbnQgc2VlIHRoYXQuJyk7XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH0pO1xuICogICAgIH0pO1xuICpcbiAqIEBwdWJsaWNcbiAqL1xuXG5yZXMuc2VuZEZpbGUgPSBmdW5jdGlvbiBzZW5kRmlsZShwYXRoLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICB2YXIgZG9uZSA9IGNhbGxiYWNrO1xuICB2YXIgcmVxID0gdGhpcy5yZXE7XG4gIHZhciByZXMgPSB0aGlzO1xuICB2YXIgbmV4dCA9IHJlcS5uZXh0O1xuICB2YXIgb3B0cyA9IG9wdGlvbnMgfHwge307XG5cbiAgaWYgKCFwYXRoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGF0aCBhcmd1bWVudCBpcyByZXF1aXJlZCB0byByZXMuc2VuZEZpbGUnKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXRoIG11c3QgYmUgYSBzdHJpbmcgdG8gcmVzLnNlbmRGaWxlJylcbiAgfVxuXG4gIC8vIHN1cHBvcnQgZnVuY3Rpb24gYXMgc2Vjb25kIGFyZ1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBkb25lID0gb3B0aW9ucztcbiAgICBvcHRzID0ge307XG4gIH1cblxuICBpZiAoIW9wdHMucm9vdCAmJiAhaXNBYnNvbHV0ZShwYXRoKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhdGggbXVzdCBiZSBhYnNvbHV0ZSBvciBzcGVjaWZ5IHJvb3QgdG8gcmVzLnNlbmRGaWxlJyk7XG4gIH1cblxuICAvLyBjcmVhdGUgZmlsZSBzdHJlYW1cbiAgdmFyIHBhdGhuYW1lID0gZW5jb2RlVVJJKHBhdGgpO1xuICB2YXIgZmlsZSA9IHNlbmQocmVxLCBwYXRobmFtZSwgb3B0cyk7XG5cbiAgLy8gdHJhbnNmZXJcbiAgc2VuZGZpbGUocmVzLCBmaWxlLCBvcHRzLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGRvbmUpIHJldHVybiBkb25lKGVycik7XG4gICAgaWYgKGVyciAmJiBlcnIuY29kZSA9PT0gJ0VJU0RJUicpIHJldHVybiBuZXh0KCk7XG5cbiAgICAvLyBuZXh0KCkgYWxsIGJ1dCB3cml0ZSBlcnJvcnNcbiAgICBpZiAoZXJyICYmIGVyci5jb2RlICE9PSAnRUNPTk5BQk9SVEVEJyAmJiBlcnIuc3lzY2FsbCAhPT0gJ3dyaXRlJykge1xuICAgICAgbmV4dChlcnIpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIFRyYW5zZmVyIHRoZSBmaWxlIGF0IHRoZSBnaXZlbiBgcGF0aGAuXG4gKlxuICogQXV0b21hdGljYWxseSBzZXRzIHRoZSBfQ29udGVudC1UeXBlXyByZXNwb25zZSBoZWFkZXIgZmllbGQuXG4gKiBUaGUgY2FsbGJhY2sgYGNhbGxiYWNrKGVycilgIGlzIGludm9rZWQgd2hlbiB0aGUgdHJhbnNmZXIgaXMgY29tcGxldGVcbiAqIG9yIHdoZW4gYW4gZXJyb3Igb2NjdXJzLiBCZSBzdXJlIHRvIGNoZWNrIGByZXMuc2VudEhlYWRlcmBcbiAqIGlmIHlvdSB3aXNoIHRvIGF0dGVtcHQgcmVzcG9uZGluZywgYXMgdGhlIGhlYWRlciBhbmQgc29tZSBkYXRhXG4gKiBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gdHJhbnNmZXJyZWQuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgIC0gYG1heEFnZWAgICBkZWZhdWx0aW5nIHRvIDAgKGNhbiBiZSBzdHJpbmcgY29udmVydGVkIGJ5IGBtc2ApXG4gKiAgIC0gYHJvb3RgICAgICByb290IGRpcmVjdG9yeSBmb3IgcmVsYXRpdmUgZmlsZW5hbWVzXG4gKiAgIC0gYGhlYWRlcnNgICBvYmplY3Qgb2YgaGVhZGVycyB0byBzZXJ2ZSB3aXRoIGZpbGVcbiAqICAgLSBgZG90ZmlsZXNgIHNlcnZlIGRvdGZpbGVzLCBkZWZhdWx0aW5nIHRvIGZhbHNlOyBjYW4gYmUgYFwiYWxsb3dcImAgdG8gc2VuZCB0aGVtXG4gKlxuICogT3RoZXIgb3B0aW9ucyBhcmUgcGFzc2VkIGFsb25nIHRvIGBzZW5kYC5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgVGhlIGZvbGxvd2luZyBleGFtcGxlIGlsbHVzdHJhdGVzIGhvdyBgcmVzLnNlbmRmaWxlKClgIG1heVxuICogIGJlIHVzZWQgYXMgYW4gYWx0ZXJuYXRpdmUgZm9yIHRoZSBgc3RhdGljKClgIG1pZGRsZXdhcmUgZm9yXG4gKiAgZHluYW1pYyBzaXR1YXRpb25zLiBUaGUgY29kZSBiYWNraW5nIGByZXMuc2VuZGZpbGUoKWAgaXMgYWN0dWFsbHlcbiAqICB0aGUgc2FtZSBjb2RlLCBzbyBIVFRQIGNhY2hlIHN1cHBvcnQgZXRjIGlzIGlkZW50aWNhbC5cbiAqXG4gKiAgICAgYXBwLmdldCgnL3VzZXIvOnVpZC9waG90b3MvOmZpbGUnLCBmdW5jdGlvbihyZXEsIHJlcyl7XG4gKiAgICAgICB2YXIgdWlkID0gcmVxLnBhcmFtcy51aWRcbiAqICAgICAgICAgLCBmaWxlID0gcmVxLnBhcmFtcy5maWxlO1xuICpcbiAqICAgICAgIHJlcS51c2VyLm1heVZpZXdGaWxlc0Zyb20odWlkLCBmdW5jdGlvbih5ZXMpe1xuICogICAgICAgICBpZiAoeWVzKSB7XG4gKiAgICAgICAgICAgcmVzLnNlbmRmaWxlKCcvdXBsb2Fkcy8nICsgdWlkICsgJy8nICsgZmlsZSk7XG4gKiAgICAgICAgIH0gZWxzZSB7XG4gKiAgICAgICAgICAgcmVzLnNlbmQoNDAzLCAnU29ycnkhIHlvdSBjYW50IHNlZSB0aGF0LicpO1xuICogICAgICAgICB9XG4gKiAgICAgICB9KTtcbiAqICAgICB9KTtcbiAqXG4gKiBAcHVibGljXG4gKi9cblxucmVzLnNlbmRmaWxlID0gZnVuY3Rpb24gKHBhdGgsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBkb25lID0gY2FsbGJhY2s7XG4gIHZhciByZXEgPSB0aGlzLnJlcTtcbiAgdmFyIHJlcyA9IHRoaXM7XG4gIHZhciBuZXh0ID0gcmVxLm5leHQ7XG4gIHZhciBvcHRzID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBzdXBwb3J0IGZ1bmN0aW9uIGFzIHNlY29uZCBhcmdcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZG9uZSA9IG9wdGlvbnM7XG4gICAgb3B0cyA9IHt9O1xuICB9XG5cbiAgLy8gY3JlYXRlIGZpbGUgc3RyZWFtXG4gIHZhciBmaWxlID0gc2VuZChyZXEsIHBhdGgsIG9wdHMpO1xuXG4gIC8vIHRyYW5zZmVyXG4gIHNlbmRmaWxlKHJlcywgZmlsZSwgb3B0cywgZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChkb25lKSByZXR1cm4gZG9uZShlcnIpO1xuICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgPT09ICdFSVNESVInKSByZXR1cm4gbmV4dCgpO1xuXG4gICAgLy8gbmV4dCgpIGFsbCBidXQgd3JpdGUgZXJyb3JzXG4gICAgaWYgKGVyciAmJiBlcnIuY29kZSAhPT0gJ0VDT05OQUJPUlRFRCcgJiYgZXJyLnN5c2NhbGwgIT09ICd3cml0ZScpIHtcbiAgICAgIG5leHQoZXJyKTtcbiAgICB9XG4gIH0pO1xufTtcblxucmVzLnNlbmRmaWxlID0gZGVwcmVjYXRlLmZ1bmN0aW9uKHJlcy5zZW5kZmlsZSxcbiAgJ3Jlcy5zZW5kZmlsZTogVXNlIHJlcy5zZW5kRmlsZSBpbnN0ZWFkJyk7XG5cbi8qKlxuICogVHJhbnNmZXIgdGhlIGZpbGUgYXQgdGhlIGdpdmVuIGBwYXRoYCBhcyBhbiBhdHRhY2htZW50LlxuICpcbiAqIE9wdGlvbmFsbHkgcHJvdmlkaW5nIGFuIGFsdGVybmF0ZSBhdHRhY2htZW50IGBmaWxlbmFtZWAsXG4gKiBhbmQgb3B0aW9uYWwgY2FsbGJhY2sgYGNhbGxiYWNrKGVycilgLiBUaGUgY2FsbGJhY2sgaXMgaW52b2tlZFxuICogd2hlbiB0aGUgZGF0YSB0cmFuc2ZlciBpcyBjb21wbGV0ZSwgb3Igd2hlbiBhbiBlcnJvciBoYXNcbiAqIG9jdXJyZWQuIEJlIHN1cmUgdG8gY2hlY2sgYHJlcy5oZWFkZXJzU2VudGAgaWYgeW91IHBsYW4gdG8gcmVzcG9uZC5cbiAqXG4gKiBPcHRpb25hbGx5IHByb3ZpZGluZyBhbiBgb3B0aW9uc2Agb2JqZWN0IHRvIHVzZSB3aXRoIGByZXMuc2VuZEZpbGUoKWAuXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgc2V0IHRoZSBgQ29udGVudC1EaXNwb3NpdGlvbmAgaGVhZGVyLCBvdmVycmlkaW5nXG4gKiBhbnkgYENvbnRlbnQtRGlzcG9zaXRpb25gIGhlYWRlciBwYXNzZWQgYXMgaGVhZGVyIG9wdGlvbnMgaW4gb3JkZXJcbiAqIHRvIHNldCB0aGUgYXR0YWNobWVudCBhbmQgZmlsZW5hbWUuXG4gKlxuICogVGhpcyBtZXRob2QgdXNlcyBgcmVzLnNlbmRGaWxlKClgLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuXG5yZXMuZG93bmxvYWQgPSBmdW5jdGlvbiBkb3dubG9hZCAocGF0aCwgZmlsZW5hbWUsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBkb25lID0gY2FsbGJhY2s7XG4gIHZhciBuYW1lID0gZmlsZW5hbWU7XG4gIHZhciBvcHRzID0gb3B0aW9ucyB8fCBudWxsXG5cbiAgLy8gc3VwcG9ydCBmdW5jdGlvbiBhcyBzZWNvbmQgb3IgdGhpcmQgYXJnXG4gIGlmICh0eXBlb2YgZmlsZW5hbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBkb25lID0gZmlsZW5hbWU7XG4gICAgbmFtZSA9IG51bGw7XG4gICAgb3B0cyA9IG51bGxcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGRvbmUgPSBvcHRpb25zXG4gICAgb3B0cyA9IG51bGxcbiAgfVxuXG4gIC8vIHNldCBDb250ZW50LURpc3Bvc2l0aW9uIHdoZW4gZmlsZSBpcyBzZW50XG4gIHZhciBoZWFkZXJzID0ge1xuICAgICdDb250ZW50LURpc3Bvc2l0aW9uJzogY29udGVudERpc3Bvc2l0aW9uKG5hbWUgfHwgcGF0aClcbiAgfTtcblxuICAvLyBtZXJnZSB1c2VyLXByb3ZpZGVkIGhlYWRlcnNcbiAgaWYgKG9wdHMgJiYgb3B0cy5oZWFkZXJzKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRzLmhlYWRlcnMpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXVxuICAgICAgaWYgKGtleS50b0xvd2VyQ2FzZSgpICE9PSAnY29udGVudC1kaXNwb3NpdGlvbicpIHtcbiAgICAgICAgaGVhZGVyc1trZXldID0gb3B0cy5oZWFkZXJzW2tleV1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBtZXJnZSB1c2VyLXByb3ZpZGVkIG9wdGlvbnNcbiAgb3B0cyA9IE9iamVjdC5jcmVhdGUob3B0cylcbiAgb3B0cy5oZWFkZXJzID0gaGVhZGVyc1xuXG4gIC8vIFJlc29sdmUgdGhlIGZ1bGwgcGF0aCBmb3Igc2VuZEZpbGVcbiAgdmFyIGZ1bGxQYXRoID0gcmVzb2x2ZShwYXRoKTtcblxuICAvLyBzZW5kIGZpbGVcbiAgcmV0dXJuIHRoaXMuc2VuZEZpbGUoZnVsbFBhdGgsIG9wdHMsIGRvbmUpXG59O1xuXG4vKipcbiAqIFNldCBfQ29udGVudC1UeXBlXyByZXNwb25zZSBoZWFkZXIgd2l0aCBgdHlwZWAgdGhyb3VnaCBgbWltZS5sb29rdXAoKWBcbiAqIHdoZW4gaXQgZG9lcyBub3QgY29udGFpbiBcIi9cIiwgb3Igc2V0IHRoZSBDb250ZW50LVR5cGUgdG8gYHR5cGVgIG90aGVyd2lzZS5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICAgcmVzLnR5cGUoJy5odG1sJyk7XG4gKiAgICAgcmVzLnR5cGUoJ2h0bWwnKTtcbiAqICAgICByZXMudHlwZSgnanNvbicpO1xuICogICAgIHJlcy50eXBlKCdhcHBsaWNhdGlvbi9qc29uJyk7XG4gKiAgICAgcmVzLnR5cGUoJ3BuZycpO1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJuIHtTZXJ2ZXJSZXNwb25zZX0gZm9yIGNoYWluaW5nXG4gKiBAcHVibGljXG4gKi9cblxucmVzLmNvbnRlbnRUeXBlID1cbnJlcy50eXBlID0gZnVuY3Rpb24gY29udGVudFR5cGUodHlwZSkge1xuICB2YXIgY3QgPSB0eXBlLmluZGV4T2YoJy8nKSA9PT0gLTFcbiAgICA/IG1pbWUubG9va3VwKHR5cGUpXG4gICAgOiB0eXBlO1xuXG4gIHJldHVybiB0aGlzLnNldCgnQ29udGVudC1UeXBlJywgY3QpO1xufTtcblxuLyoqXG4gKiBSZXNwb25kIHRvIHRoZSBBY2NlcHRhYmxlIGZvcm1hdHMgdXNpbmcgYW4gYG9iamBcbiAqIG9mIG1pbWUtdHlwZSBjYWxsYmFja3MuXG4gKlxuICogVGhpcyBtZXRob2QgdXNlcyBgcmVxLmFjY2VwdGVkYCwgYW4gYXJyYXkgb2ZcbiAqIGFjY2VwdGFibGUgdHlwZXMgb3JkZXJlZCBieSB0aGVpciBxdWFsaXR5IHZhbHVlcy5cbiAqIFdoZW4gXCJBY2NlcHRcIiBpcyBub3QgcHJlc2VudCB0aGUgX2ZpcnN0XyBjYWxsYmFja1xuICogaXMgaW52b2tlZCwgb3RoZXJ3aXNlIHRoZSBmaXJzdCBtYXRjaCBpcyB1c2VkLiBXaGVuXG4gKiBubyBtYXRjaCBpcyBwZXJmb3JtZWQgdGhlIHNlcnZlciByZXNwb25kcyB3aXRoXG4gKiA0MDYgXCJOb3QgQWNjZXB0YWJsZVwiLlxuICpcbiAqIENvbnRlbnQtVHlwZSBpcyBzZXQgZm9yIHlvdSwgaG93ZXZlciBpZiB5b3UgY2hvb3NlXG4gKiB5b3UgbWF5IGFsdGVyIHRoaXMgd2l0aGluIHRoZSBjYWxsYmFjayB1c2luZyBgcmVzLnR5cGUoKWBcbiAqIG9yIGByZXMuc2V0KCdDb250ZW50LVR5cGUnLCAuLi4pYC5cbiAqXG4gKiAgICByZXMuZm9ybWF0KHtcbiAqICAgICAgJ3RleHQvcGxhaW4nOiBmdW5jdGlvbigpe1xuICogICAgICAgIHJlcy5zZW5kKCdoZXknKTtcbiAqICAgICAgfSxcbiAqXG4gKiAgICAgICd0ZXh0L2h0bWwnOiBmdW5jdGlvbigpe1xuICogICAgICAgIHJlcy5zZW5kKCc8cD5oZXk8L3A+Jyk7XG4gKiAgICAgIH0sXG4gKlxuICogICAgICAnYXBwbGlhdGlvbi9qc29uJzogZnVuY3Rpb24oKXtcbiAqICAgICAgICByZXMuc2VuZCh7IG1lc3NhZ2U6ICdoZXknIH0pO1xuICogICAgICB9XG4gKiAgICB9KTtcbiAqXG4gKiBJbiBhZGRpdGlvbiB0byBjYW5vbmljYWxpemVkIE1JTUUgdHlwZXMgeW91IG1heVxuICogYWxzbyB1c2UgZXh0bmFtZXMgbWFwcGVkIHRvIHRoZXNlIHR5cGVzOlxuICpcbiAqICAgIHJlcy5mb3JtYXQoe1xuICogICAgICB0ZXh0OiBmdW5jdGlvbigpe1xuICogICAgICAgIHJlcy5zZW5kKCdoZXknKTtcbiAqICAgICAgfSxcbiAqXG4gKiAgICAgIGh0bWw6IGZ1bmN0aW9uKCl7XG4gKiAgICAgICAgcmVzLnNlbmQoJzxwPmhleTwvcD4nKTtcbiAqICAgICAgfSxcbiAqXG4gKiAgICAgIGpzb246IGZ1bmN0aW9uKCl7XG4gKiAgICAgICAgcmVzLnNlbmQoeyBtZXNzYWdlOiAnaGV5JyB9KTtcbiAqICAgICAgfVxuICogICAgfSk7XG4gKlxuICogQnkgZGVmYXVsdCBFeHByZXNzIHBhc3NlcyBhbiBgRXJyb3JgXG4gKiB3aXRoIGEgYC5zdGF0dXNgIG9mIDQwNiB0byBgbmV4dChlcnIpYFxuICogaWYgYSBtYXRjaCBpcyBub3QgbWFkZS4gSWYgeW91IHByb3ZpZGVcbiAqIGEgYC5kZWZhdWx0YCBjYWxsYmFjayBpdCB3aWxsIGJlIGludm9rZWRcbiAqIGluc3RlYWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHJldHVybiB7U2VydmVyUmVzcG9uc2V9IGZvciBjaGFpbmluZ1xuICogQHB1YmxpY1xuICovXG5cbnJlcy5mb3JtYXQgPSBmdW5jdGlvbihvYmope1xuICB2YXIgcmVxID0gdGhpcy5yZXE7XG4gIHZhciBuZXh0ID0gcmVxLm5leHQ7XG5cbiAgdmFyIGZuID0gb2JqLmRlZmF1bHQ7XG4gIGlmIChmbikgZGVsZXRlIG9iai5kZWZhdWx0O1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG5cbiAgdmFyIGtleSA9IGtleXMubGVuZ3RoID4gMFxuICAgID8gcmVxLmFjY2VwdHMoa2V5cylcbiAgICA6IGZhbHNlO1xuXG4gIHRoaXMudmFyeShcIkFjY2VwdFwiKTtcblxuICBpZiAoa2V5KSB7XG4gICAgdGhpcy5zZXQoJ0NvbnRlbnQtVHlwZScsIG5vcm1hbGl6ZVR5cGUoa2V5KS52YWx1ZSk7XG4gICAgb2JqW2tleV0ocmVxLCB0aGlzLCBuZXh0KTtcbiAgfSBlbHNlIGlmIChmbikge1xuICAgIGZuKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignTm90IEFjY2VwdGFibGUnKTtcbiAgICBlcnIuc3RhdHVzID0gZXJyLnN0YXR1c0NvZGUgPSA0MDY7XG4gICAgZXJyLnR5cGVzID0gbm9ybWFsaXplVHlwZXMoa2V5cykubWFwKGZ1bmN0aW9uKG8peyByZXR1cm4gby52YWx1ZSB9KTtcbiAgICBuZXh0KGVycik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IF9Db250ZW50LURpc3Bvc2l0aW9uXyBoZWFkZXIgdG8gX2F0dGFjaG1lbnRfIHdpdGggb3B0aW9uYWwgYGZpbGVuYW1lYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmlsZW5hbWVcbiAqIEByZXR1cm4ge1NlcnZlclJlc3BvbnNlfVxuICogQHB1YmxpY1xuICovXG5cbnJlcy5hdHRhY2htZW50ID0gZnVuY3Rpb24gYXR0YWNobWVudChmaWxlbmFtZSkge1xuICBpZiAoZmlsZW5hbWUpIHtcbiAgICB0aGlzLnR5cGUoZXh0bmFtZShmaWxlbmFtZSkpO1xuICB9XG5cbiAgdGhpcy5zZXQoJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCBjb250ZW50RGlzcG9zaXRpb24oZmlsZW5hbWUpKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQXBwZW5kIGFkZGl0aW9uYWwgaGVhZGVyIGBmaWVsZGAgd2l0aCB2YWx1ZSBgdmFsYC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgIHJlcy5hcHBlbmQoJ0xpbmsnLCBbJzxodHRwOi8vbG9jYWxob3N0Lz4nLCAnPGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC8+J10pO1xuICogICAgcmVzLmFwcGVuZCgnU2V0LUNvb2tpZScsICdmb289YmFyOyBQYXRoPS87IEh0dHBPbmx5Jyk7XG4gKiAgICByZXMuYXBwZW5kKCdXYXJuaW5nJywgJzE5OSBNaXNjZWxsYW5lb3VzIHdhcm5pbmcnKTtcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmllbGRcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSB2YWxcbiAqIEByZXR1cm4ge1NlcnZlclJlc3BvbnNlfSBmb3IgY2hhaW5pbmdcbiAqIEBwdWJsaWNcbiAqL1xuXG5yZXMuYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKGZpZWxkLCB2YWwpIHtcbiAgdmFyIHByZXYgPSB0aGlzLmdldChmaWVsZCk7XG4gIHZhciB2YWx1ZSA9IHZhbDtcblxuICBpZiAocHJldikge1xuICAgIC8vIGNvbmNhdCB0aGUgbmV3IGFuZCBwcmV2IHZhbHNcbiAgICB2YWx1ZSA9IEFycmF5LmlzQXJyYXkocHJldikgPyBwcmV2LmNvbmNhdCh2YWwpXG4gICAgICA6IEFycmF5LmlzQXJyYXkodmFsKSA/IFtwcmV2XS5jb25jYXQodmFsKVxuICAgICAgOiBbcHJldiwgdmFsXTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLnNldChmaWVsZCwgdmFsdWUpO1xufTtcblxuLyoqXG4gKiBTZXQgaGVhZGVyIGBmaWVsZGAgdG8gYHZhbGAsIG9yIHBhc3NcbiAqIGFuIG9iamVjdCBvZiBoZWFkZXIgZmllbGRzLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgIHJlcy5zZXQoJ0ZvbycsIFsnYmFyJywgJ2JheiddKTtcbiAqICAgIHJlcy5zZXQoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gKiAgICByZXMuc2V0KHsgQWNjZXB0OiAndGV4dC9wbGFpbicsICdYLUFQSS1LZXknOiAndG9iaScgfSk7XG4gKlxuICogQWxpYXNlZCBhcyBgcmVzLmhlYWRlcigpYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGZpZWxkXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gdmFsXG4gKiBAcmV0dXJuIHtTZXJ2ZXJSZXNwb25zZX0gZm9yIGNoYWluaW5nXG4gKiBAcHVibGljXG4gKi9cblxucmVzLnNldCA9XG5yZXMuaGVhZGVyID0gZnVuY3Rpb24gaGVhZGVyKGZpZWxkLCB2YWwpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICB2YXIgdmFsdWUgPSBBcnJheS5pc0FycmF5KHZhbClcbiAgICAgID8gdmFsLm1hcChTdHJpbmcpXG4gICAgICA6IFN0cmluZyh2YWwpO1xuXG4gICAgLy8gYWRkIGNoYXJzZXQgdG8gY29udGVudC10eXBlXG4gICAgaWYgKGZpZWxkLnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29udGVudC1UeXBlIGNhbm5vdCBiZSBzZXQgdG8gYW4gQXJyYXknKTtcbiAgICAgIH1cbiAgICAgIGlmICghY2hhcnNldFJlZ0V4cC50ZXN0KHZhbHVlKSkge1xuICAgICAgICB2YXIgY2hhcnNldCA9IG1pbWUuY2hhcnNldHMubG9va3VwKHZhbHVlLnNwbGl0KCc7JylbMF0pO1xuICAgICAgICBpZiAoY2hhcnNldCkgdmFsdWUgKz0gJzsgY2hhcnNldD0nICsgY2hhcnNldC50b0xvd2VyQ2FzZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2V0SGVhZGVyKGZpZWxkLCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIga2V5IGluIGZpZWxkKSB7XG4gICAgICB0aGlzLnNldChrZXksIGZpZWxkW2tleV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogR2V0IHZhbHVlIGZvciBoZWFkZXIgYGZpZWxkYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmllbGRcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5yZXMuZ2V0ID0gZnVuY3Rpb24oZmllbGQpe1xuICByZXR1cm4gdGhpcy5nZXRIZWFkZXIoZmllbGQpO1xufTtcblxuLyoqXG4gKiBDbGVhciBjb29raWUgYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtTZXJ2ZXJSZXNwb25zZX0gZm9yIGNoYWluaW5nXG4gKiBAcHVibGljXG4gKi9cblxucmVzLmNsZWFyQ29va2llID0gZnVuY3Rpb24gY2xlYXJDb29raWUobmFtZSwgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IG1lcmdlKHsgZXhwaXJlczogbmV3IERhdGUoMSksIHBhdGg6ICcvJyB9LCBvcHRpb25zKTtcblxuICByZXR1cm4gdGhpcy5jb29raWUobmFtZSwgJycsIG9wdHMpO1xufTtcblxuLyoqXG4gKiBTZXQgY29va2llIGBuYW1lYCB0byBgdmFsdWVgLCB3aXRoIHRoZSBnaXZlbiBgb3B0aW9uc2AuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgICAtIGBtYXhBZ2VgICAgbWF4LWFnZSBpbiBtaWxsaXNlY29uZHMsIGNvbnZlcnRlZCB0byBgZXhwaXJlc2BcbiAqICAgIC0gYHNpZ25lZGAgICBzaWduIHRoZSBjb29raWVcbiAqICAgIC0gYHBhdGhgICAgICBkZWZhdWx0cyB0byBcIi9cIlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgIC8vIFwiUmVtZW1iZXIgTWVcIiBmb3IgMTUgbWludXRlc1xuICogICAgcmVzLmNvb2tpZSgncmVtZW1iZXJtZScsICcxJywgeyBleHBpcmVzOiBuZXcgRGF0ZShEYXRlLm5vdygpICsgOTAwMDAwKSwgaHR0cE9ubHk6IHRydWUgfSk7XG4gKlxuICogICAgLy8gc2FtZSBhcyBhYm92ZVxuICogICAgcmVzLmNvb2tpZSgncmVtZW1iZXJtZScsICcxJywgeyBtYXhBZ2U6IDkwMDAwMCwgaHR0cE9ubHk6IHRydWUgfSlcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSB2YWx1ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybiB7U2VydmVyUmVzcG9uc2V9IGZvciBjaGFpbmluZ1xuICogQHB1YmxpY1xuICovXG5cbnJlcy5jb29raWUgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSBtZXJnZSh7fSwgb3B0aW9ucyk7XG4gIHZhciBzZWNyZXQgPSB0aGlzLnJlcS5zZWNyZXQ7XG4gIHZhciBzaWduZWQgPSBvcHRzLnNpZ25lZDtcblxuICBpZiAoc2lnbmVkICYmICFzZWNyZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nvb2tpZVBhcnNlcihcInNlY3JldFwiKSByZXF1aXJlZCBmb3Igc2lnbmVkIGNvb2tpZXMnKTtcbiAgfVxuXG4gIHZhciB2YWwgPSB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXG4gICAgPyAnajonICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpXG4gICAgOiBTdHJpbmcodmFsdWUpO1xuXG4gIGlmIChzaWduZWQpIHtcbiAgICB2YWwgPSAnczonICsgc2lnbih2YWwsIHNlY3JldCk7XG4gIH1cblxuICBpZiAoJ21heEFnZScgaW4gb3B0cykge1xuICAgIG9wdHMuZXhwaXJlcyA9IG5ldyBEYXRlKERhdGUubm93KCkgKyBvcHRzLm1heEFnZSk7XG4gICAgb3B0cy5tYXhBZ2UgLz0gMTAwMDtcbiAgfVxuXG4gIGlmIChvcHRzLnBhdGggPT0gbnVsbCkge1xuICAgIG9wdHMucGF0aCA9ICcvJztcbiAgfVxuXG4gIHRoaXMuYXBwZW5kKCdTZXQtQ29va2llJywgY29va2llLnNlcmlhbGl6ZShuYW1lLCBTdHJpbmcodmFsKSwgb3B0cykpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGxvY2F0aW9uIGhlYWRlciB0byBgdXJsYC5cbiAqXG4gKiBUaGUgZ2l2ZW4gYHVybGAgY2FuIGFsc28gYmUgXCJiYWNrXCIsIHdoaWNoIHJlZGlyZWN0c1xuICogdG8gdGhlIF9SZWZlcnJlcl8gb3IgX1JlZmVyZXJfIGhlYWRlcnMgb3IgXCIvXCIuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgcmVzLmxvY2F0aW9uKCcvZm9vL2JhcicpLjtcbiAqICAgIHJlcy5sb2NhdGlvbignaHR0cDovL2V4YW1wbGUuY29tJyk7XG4gKiAgICByZXMubG9jYXRpb24oJy4uL2xvZ2luJyk7XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHJldHVybiB7U2VydmVyUmVzcG9uc2V9IGZvciBjaGFpbmluZ1xuICogQHB1YmxpY1xuICovXG5cbnJlcy5sb2NhdGlvbiA9IGZ1bmN0aW9uIGxvY2F0aW9uKHVybCkge1xuICB2YXIgbG9jID0gdXJsO1xuXG4gIC8vIFwiYmFja1wiIGlzIGFuIGFsaWFzIGZvciB0aGUgcmVmZXJyZXJcbiAgaWYgKHVybCA9PT0gJ2JhY2snKSB7XG4gICAgbG9jID0gdGhpcy5yZXEuZ2V0KCdSZWZlcnJlcicpIHx8ICcvJztcbiAgfVxuXG4gIC8vIHNldCBsb2NhdGlvblxuICByZXR1cm4gdGhpcy5zZXQoJ0xvY2F0aW9uJywgZW5jb2RlVXJsKGxvYykpO1xufTtcblxuLyoqXG4gKiBSZWRpcmVjdCB0byB0aGUgZ2l2ZW4gYHVybGAgd2l0aCBvcHRpb25hbCByZXNwb25zZSBgc3RhdHVzYFxuICogZGVmYXVsdGluZyB0byAzMDIuXG4gKlxuICogVGhlIHJlc3VsdGluZyBgdXJsYCBpcyBkZXRlcm1pbmVkIGJ5IGByZXMubG9jYXRpb24oKWAsIHNvXG4gKiBpdCB3aWxsIHBsYXkgbmljZWx5IHdpdGggbW91bnRlZCBhcHBzLCByZWxhdGl2ZSBwYXRocyxcbiAqIGBcImJhY2tcImAgZXRjLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgIHJlcy5yZWRpcmVjdCgnL2Zvby9iYXInKTtcbiAqICAgIHJlcy5yZWRpcmVjdCgnaHR0cDovL2V4YW1wbGUuY29tJyk7XG4gKiAgICByZXMucmVkaXJlY3QoMzAxLCAnaHR0cDovL2V4YW1wbGUuY29tJyk7XG4gKiAgICByZXMucmVkaXJlY3QoJy4uL2xvZ2luJyk7IC8vIC9ibG9nL3Bvc3QvMSAtPiAvYmxvZy9sb2dpblxuICpcbiAqIEBwdWJsaWNcbiAqL1xuXG5yZXMucmVkaXJlY3QgPSBmdW5jdGlvbiByZWRpcmVjdCh1cmwpIHtcbiAgdmFyIGFkZHJlc3MgPSB1cmw7XG4gIHZhciBib2R5O1xuICB2YXIgc3RhdHVzID0gMzAyO1xuXG4gIC8vIGFsbG93IHN0YXR1cyAvIHVybFxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnbnVtYmVyJykge1xuICAgICAgc3RhdHVzID0gYXJndW1lbnRzWzBdO1xuICAgICAgYWRkcmVzcyA9IGFyZ3VtZW50c1sxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVwcmVjYXRlKCdyZXMucmVkaXJlY3QodXJsLCBzdGF0dXMpOiBVc2UgcmVzLnJlZGlyZWN0KHN0YXR1cywgdXJsKSBpbnN0ZWFkJyk7XG4gICAgICBzdGF0dXMgPSBhcmd1bWVudHNbMV07XG4gICAgfVxuICB9XG5cbiAgLy8gU2V0IGxvY2F0aW9uIGhlYWRlclxuICBhZGRyZXNzID0gdGhpcy5sb2NhdGlvbihhZGRyZXNzKS5nZXQoJ0xvY2F0aW9uJyk7XG5cbiAgLy8gU3VwcG9ydCB0ZXh0L3twbGFpbixodG1sfSBieSBkZWZhdWx0XG4gIHRoaXMuZm9ybWF0KHtcbiAgICB0ZXh0OiBmdW5jdGlvbigpe1xuICAgICAgYm9keSA9IHN0YXR1c2VzW3N0YXR1c10gKyAnLiBSZWRpcmVjdGluZyB0byAnICsgYWRkcmVzc1xuICAgIH0sXG5cbiAgICBodG1sOiBmdW5jdGlvbigpe1xuICAgICAgdmFyIHUgPSBlc2NhcGVIdG1sKGFkZHJlc3MpO1xuICAgICAgYm9keSA9ICc8cD4nICsgc3RhdHVzZXNbc3RhdHVzXSArICcuIFJlZGlyZWN0aW5nIHRvIDxhIGhyZWY9XCInICsgdSArICdcIj4nICsgdSArICc8L2E+PC9wPidcbiAgICB9LFxuXG4gICAgZGVmYXVsdDogZnVuY3Rpb24oKXtcbiAgICAgIGJvZHkgPSAnJztcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFJlc3BvbmRcbiAgdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzO1xuICB0aGlzLnNldCgnQ29udGVudC1MZW5ndGgnLCBCdWZmZXIuYnl0ZUxlbmd0aChib2R5KSk7XG5cbiAgaWYgKHRoaXMucmVxLm1ldGhvZCA9PT0gJ0hFQUQnKSB7XG4gICAgdGhpcy5lbmQoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmVuZChib2R5KTtcbiAgfVxufTtcblxuLyoqXG4gKiBBZGQgYGZpZWxkYCB0byBWYXJ5LiBJZiBhbHJlYWR5IHByZXNlbnQgaW4gdGhlIFZhcnkgc2V0LCB0aGVuXG4gKiB0aGlzIGNhbGwgaXMgc2ltcGx5IGlnbm9yZWQuXG4gKlxuICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IGZpZWxkXG4gKiBAcmV0dXJuIHtTZXJ2ZXJSZXNwb25zZX0gZm9yIGNoYWluaW5nXG4gKiBAcHVibGljXG4gKi9cblxucmVzLnZhcnkgPSBmdW5jdGlvbihmaWVsZCl7XG4gIC8vIGNoZWNrcyBmb3IgYmFjay1jb21wYXRcbiAgaWYgKCFmaWVsZCB8fCAoQXJyYXkuaXNBcnJheShmaWVsZCkgJiYgIWZpZWxkLmxlbmd0aCkpIHtcbiAgICBkZXByZWNhdGUoJ3Jlcy52YXJ5KCk6IFByb3ZpZGUgYSBmaWVsZCBuYW1lJyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXJ5KHRoaXMsIGZpZWxkKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVuZGVyIGB2aWV3YCB3aXRoIHRoZSBnaXZlbiBgb3B0aW9uc2AgYW5kIG9wdGlvbmFsIGNhbGxiYWNrIGBmbmAuXG4gKiBXaGVuIGEgY2FsbGJhY2sgZnVuY3Rpb24gaXMgZ2l2ZW4gYSByZXNwb25zZSB3aWxsIF9ub3RfIGJlIG1hZGVcbiAqIGF1dG9tYXRpY2FsbHksIG90aGVyd2lzZSBhIHJlc3BvbnNlIG9mIF8yMDBfIGFuZCBfdGV4dC9odG1sXyBpcyBnaXZlbi5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBjYWNoZWAgICAgIGJvb2xlYW4gaGludGluZyB0byB0aGUgZW5naW5lIGl0IHNob3VsZCBjYWNoZVxuICogIC0gYGZpbGVuYW1lYCAgZmlsZW5hbWUgb2YgdGhlIHZpZXcgYmVpbmcgcmVuZGVyZWRcbiAqXG4gKiBAcHVibGljXG4gKi9cblxucmVzLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih2aWV3LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICB2YXIgYXBwID0gdGhpcy5yZXEuYXBwO1xuICB2YXIgZG9uZSA9IGNhbGxiYWNrO1xuICB2YXIgb3B0cyA9IG9wdGlvbnMgfHwge307XG4gIHZhciByZXEgPSB0aGlzLnJlcTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIHN1cHBvcnQgY2FsbGJhY2sgZnVuY3Rpb24gYXMgc2Vjb25kIGFyZ1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBkb25lID0gb3B0aW9ucztcbiAgICBvcHRzID0ge307XG4gIH1cblxuICAvLyBtZXJnZSByZXMubG9jYWxzXG4gIG9wdHMuX2xvY2FscyA9IHNlbGYubG9jYWxzO1xuXG4gIC8vIGRlZmF1bHQgY2FsbGJhY2sgdG8gcmVzcG9uZFxuICBkb25lID0gZG9uZSB8fCBmdW5jdGlvbiAoZXJyLCBzdHIpIHtcbiAgICBpZiAoZXJyKSByZXR1cm4gcmVxLm5leHQoZXJyKTtcbiAgICBzZWxmLnNlbmQoc3RyKTtcbiAgfTtcblxuICAvLyByZW5kZXJcbiAgYXBwLnJlbmRlcih2aWV3LCBvcHRzLCBkb25lKTtcbn07XG5cbi8vIHBpcGUgdGhlIHNlbmQgZmlsZSBzdHJlYW1cbmZ1bmN0aW9uIHNlbmRmaWxlKHJlcywgZmlsZSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgdmFyIHN0cmVhbWluZztcblxuICAvLyByZXF1ZXN0IGFib3J0ZWRcbiAgZnVuY3Rpb24gb25hYm9ydGVkKCkge1xuICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgZG9uZSA9IHRydWU7XG5cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnKTtcbiAgICBlcnIuY29kZSA9ICdFQ09OTkFCT1JURUQnO1xuICAgIGNhbGxiYWNrKGVycik7XG4gIH1cblxuICAvLyBkaXJlY3RvcnlcbiAgZnVuY3Rpb24gb25kaXJlY3RvcnkoKSB7XG4gICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICBkb25lID0gdHJ1ZTtcblxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0VJU0RJUiwgcmVhZCcpO1xuICAgIGVyci5jb2RlID0gJ0VJU0RJUic7XG4gICAgY2FsbGJhY2soZXJyKTtcbiAgfVxuXG4gIC8vIGVycm9yc1xuICBmdW5jdGlvbiBvbmVycm9yKGVycikge1xuICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgZG9uZSA9IHRydWU7XG4gICAgY2FsbGJhY2soZXJyKTtcbiAgfVxuXG4gIC8vIGVuZGVkXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgZG9uZSA9IHRydWU7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxuXG4gIC8vIGZpbGVcbiAgZnVuY3Rpb24gb25maWxlKCkge1xuICAgIHN0cmVhbWluZyA9IGZhbHNlO1xuICB9XG5cbiAgLy8gZmluaXNoZWRcbiAgZnVuY3Rpb24gb25maW5pc2goZXJyKSB7XG4gICAgaWYgKGVyciAmJiBlcnIuY29kZSA9PT0gJ0VDT05OUkVTRVQnKSByZXR1cm4gb25hYm9ydGVkKCk7XG4gICAgaWYgKGVycikgcmV0dXJuIG9uZXJyb3IoZXJyKTtcbiAgICBpZiAoZG9uZSkgcmV0dXJuO1xuXG4gICAgc2V0SW1tZWRpYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzdHJlYW1pbmcgIT09IGZhbHNlICYmICFkb25lKSB7XG4gICAgICAgIG9uYWJvcnRlZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBzdHJlYW1pbmdcbiAgZnVuY3Rpb24gb25zdHJlYW0oKSB7XG4gICAgc3RyZWFtaW5nID0gdHJ1ZTtcbiAgfVxuXG4gIGZpbGUub24oJ2RpcmVjdG9yeScsIG9uZGlyZWN0b3J5KTtcbiAgZmlsZS5vbignZW5kJywgb25lbmQpO1xuICBmaWxlLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBmaWxlLm9uKCdmaWxlJywgb25maWxlKTtcbiAgZmlsZS5vbignc3RyZWFtJywgb25zdHJlYW0pO1xuICBvbkZpbmlzaGVkKHJlcywgb25maW5pc2gpO1xuXG4gIGlmIChvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAvLyBzZXQgaGVhZGVycyBvbiBzdWNjZXNzZnVsIHRyYW5zZmVyXG4gICAgZmlsZS5vbignaGVhZGVycycsIGZ1bmN0aW9uIGhlYWRlcnMocmVzKSB7XG4gICAgICB2YXIgb2JqID0gb3B0aW9ucy5oZWFkZXJzO1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGsgPSBrZXlzW2ldO1xuICAgICAgICByZXMuc2V0SGVhZGVyKGssIG9ialtrXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvLyBwaXBlXG4gIGZpbGUucGlwZShyZXMpO1xufVxuXG4vKipcbiAqIFN0cmluZ2lmeSBKU09OLCBsaWtlIEpTT04uc3RyaW5naWZ5LCBidXQgdjggb3B0aW1pemVkLCB3aXRoIHRoZVxuICogYWJpbGl0eSB0byBlc2NhcGUgY2hhcmFjdGVycyB0aGF0IGNhbiB0cmlnZ2VyIEhUTUwgc25pZmZpbmcuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gcmVwbGFjZXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBzcGFjZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZXNjYXBlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzdHJpbmdpZnkgKHZhbHVlLCByZXBsYWNlciwgc3BhY2VzLCBlc2NhcGUpIHtcbiAgLy8gdjggY2hlY2tzIGFyZ3VtZW50cy5sZW5ndGggZm9yIG9wdGltaXppbmcgc2ltcGxlIGNhbGxcbiAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDczMFxuICB2YXIganNvbiA9IHJlcGxhY2VyIHx8IHNwYWNlc1xuICAgID8gSlNPTi5zdHJpbmdpZnkodmFsdWUsIHJlcGxhY2VyLCBzcGFjZXMpXG4gICAgOiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG5cbiAgaWYgKGVzY2FwZSkge1xuICAgIGpzb24gPSBqc29uLnJlcGxhY2UoL1s8PiZdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgICBzd2l0Y2ggKGMuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICBjYXNlIDB4M2M6XG4gICAgICAgICAgcmV0dXJuICdcXFxcdTAwM2MnXG4gICAgICAgIGNhc2UgMHgzZTpcbiAgICAgICAgICByZXR1cm4gJ1xcXFx1MDAzZSdcbiAgICAgICAgY2FzZSAweDI2OlxuICAgICAgICAgIHJldHVybiAnXFxcXHUwMDI2J1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogdW5yZWFjaGFibGUgZGVmYXVsdCAqL1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiBqc29uXG59XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuXG4vKipcbiAqIFNpZ24gdGhlIGdpdmVuIGB2YWxgIHdpdGggYHNlY3JldGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHZhbFxuICogQHBhcmFtIHtTdHJpbmd9IHNlY3JldFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5zaWduID0gZnVuY3Rpb24odmFsLCBzZWNyZXQpe1xuICBpZiAoJ3N0cmluZycgIT0gdHlwZW9mIHZhbCkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNvb2tpZSB2YWx1ZSBtdXN0IGJlIHByb3ZpZGVkIGFzIGEgc3RyaW5nLlwiKTtcbiAgaWYgKCdzdHJpbmcnICE9IHR5cGVvZiBzZWNyZXQpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTZWNyZXQgc3RyaW5nIG11c3QgYmUgcHJvdmlkZWQuXCIpO1xuICByZXR1cm4gdmFsICsgJy4nICsgY3J5cHRvXG4gICAgLmNyZWF0ZUhtYWMoJ3NoYTI1NicsIHNlY3JldClcbiAgICAudXBkYXRlKHZhbClcbiAgICAuZGlnZXN0KCdiYXNlNjQnKVxuICAgIC5yZXBsYWNlKC9cXD0rJC8sICcnKTtcbn07XG5cbi8qKlxuICogVW5zaWduIGFuZCBkZWNvZGUgdGhlIGdpdmVuIGB2YWxgIHdpdGggYHNlY3JldGAsXG4gKiByZXR1cm5pbmcgYGZhbHNlYCBpZiB0aGUgc2lnbmF0dXJlIGlzIGludmFsaWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHZhbFxuICogQHBhcmFtIHtTdHJpbmd9IHNlY3JldFxuICogQHJldHVybiB7U3RyaW5nfEJvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLnVuc2lnbiA9IGZ1bmN0aW9uKHZhbCwgc2VjcmV0KXtcbiAgaWYgKCdzdHJpbmcnICE9IHR5cGVvZiB2YWwpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTaWduZWQgY29va2llIHN0cmluZyBtdXN0IGJlIHByb3ZpZGVkLlwiKTtcbiAgaWYgKCdzdHJpbmcnICE9IHR5cGVvZiBzZWNyZXQpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTZWNyZXQgc3RyaW5nIG11c3QgYmUgcHJvdmlkZWQuXCIpO1xuICB2YXIgc3RyID0gdmFsLnNsaWNlKDAsIHZhbC5sYXN0SW5kZXhPZignLicpKVxuICAgICwgbWFjID0gZXhwb3J0cy5zaWduKHN0ciwgc2VjcmV0KTtcbiAgXG4gIHJldHVybiBzaGExKG1hYykgPT0gc2hhMSh2YWwpID8gc3RyIDogZmFsc2U7XG59O1xuXG4vKipcbiAqIFByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzaGExKHN0cil7XG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShzdHIpLmRpZ2VzdCgnaGV4Jyk7XG59XG4iLCIvKiFcbiAqIGNvb2tpZVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBSb21hbiBTaHR5bG1hblxuICogQ29weXJpZ2h0KGMpIDIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLnNlcmlhbGl6ZSA9IHNlcmlhbGl6ZTtcblxuLyoqXG4gKiBNb2R1bGUgdmFyaWFibGVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgZGVjb2RlID0gZGVjb2RlVVJJQ29tcG9uZW50O1xudmFyIGVuY29kZSA9IGVuY29kZVVSSUNvbXBvbmVudDtcbnZhciBwYWlyU3BsaXRSZWdFeHAgPSAvOyAqLztcblxuLyoqXG4gKiBSZWdFeHAgdG8gbWF0Y2ggZmllbGQtY29udGVudCBpbiBSRkMgNzIzMCBzZWMgMy4yXG4gKlxuICogZmllbGQtY29udGVudCA9IGZpZWxkLXZjaGFyIFsgMSooIFNQIC8gSFRBQiApIGZpZWxkLXZjaGFyIF1cbiAqIGZpZWxkLXZjaGFyICAgPSBWQ0hBUiAvIG9icy10ZXh0XG4gKiBvYnMtdGV4dCAgICAgID0gJXg4MC1GRlxuICovXG5cbnZhciBmaWVsZENvbnRlbnRSZWdFeHAgPSAvXltcXHUwMDA5XFx1MDAyMC1cXHUwMDdlXFx1MDA4MC1cXHUwMGZmXSskLztcblxuLyoqXG4gKiBQYXJzZSBhIGNvb2tpZSBoZWFkZXIuXG4gKlxuICogUGFyc2UgdGhlIGdpdmVuIGNvb2tpZSBoZWFkZXIgc3RyaW5nIGludG8gYW4gb2JqZWN0XG4gKiBUaGUgb2JqZWN0IGhhcyB0aGUgdmFyaW91cyBjb29raWVzIGFzIGtleXMobmFtZXMpID0+IHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge29iamVjdH1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgc3RyIG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIHZhciBvYmogPSB7fVxuICB2YXIgb3B0ID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHBhaXJzID0gc3RyLnNwbGl0KHBhaXJTcGxpdFJlZ0V4cCk7XG4gIHZhciBkZWMgPSBvcHQuZGVjb2RlIHx8IGRlY29kZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHBhaXIgPSBwYWlyc1tpXTtcbiAgICB2YXIgZXFfaWR4ID0gcGFpci5pbmRleE9mKCc9Jyk7XG5cbiAgICAvLyBza2lwIHRoaW5ncyB0aGF0IGRvbid0IGxvb2sgbGlrZSBrZXk9dmFsdWVcbiAgICBpZiAoZXFfaWR4IDwgMCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGtleSA9IHBhaXIuc3Vic3RyKDAsIGVxX2lkeCkudHJpbSgpXG4gICAgdmFyIHZhbCA9IHBhaXIuc3Vic3RyKCsrZXFfaWR4LCBwYWlyLmxlbmd0aCkudHJpbSgpO1xuXG4gICAgLy8gcXVvdGVkIHZhbHVlc1xuICAgIGlmICgnXCInID09IHZhbFswXSkge1xuICAgICAgdmFsID0gdmFsLnNsaWNlKDEsIC0xKTtcbiAgICB9XG5cbiAgICAvLyBvbmx5IGFzc2lnbiBvbmNlXG4gICAgaWYgKHVuZGVmaW5lZCA9PSBvYmpba2V5XSkge1xuICAgICAgb2JqW2tleV0gPSB0cnlEZWNvZGUodmFsLCBkZWMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogU2VyaWFsaXplIGRhdGEgaW50byBhIGNvb2tpZSBoZWFkZXIuXG4gKlxuICogU2VyaWFsaXplIHRoZSBhIG5hbWUgdmFsdWUgcGFpciBpbnRvIGEgY29va2llIHN0cmluZyBzdWl0YWJsZSBmb3JcbiAqIGh0dHAgaGVhZGVycy4gQW4gb3B0aW9uYWwgb3B0aW9ucyBvYmplY3Qgc3BlY2lmaWVkIGNvb2tpZSBwYXJhbWV0ZXJzLlxuICpcbiAqIHNlcmlhbGl6ZSgnZm9vJywgJ2JhcicsIHsgaHR0cE9ubHk6IHRydWUgfSlcbiAqICAgPT4gXCJmb289YmFyOyBodHRwT25seVwiXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWxcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzZXJpYWxpemUobmFtZSwgdmFsLCBvcHRpb25zKSB7XG4gIHZhciBvcHQgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgZW5jID0gb3B0LmVuY29kZSB8fCBlbmNvZGU7XG5cbiAgaWYgKHR5cGVvZiBlbmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gZW5jb2RlIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIGlmICghZmllbGRDb250ZW50UmVnRXhwLnRlc3QobmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBuYW1lIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHZhciB2YWx1ZSA9IGVuYyh2YWwpO1xuXG4gIGlmICh2YWx1ZSAmJiAhZmllbGRDb250ZW50UmVnRXhwLnRlc3QodmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgdmFsIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHZhciBzdHIgPSBuYW1lICsgJz0nICsgdmFsdWU7XG5cbiAgaWYgKG51bGwgIT0gb3B0Lm1heEFnZSkge1xuICAgIHZhciBtYXhBZ2UgPSBvcHQubWF4QWdlIC0gMDtcbiAgICBpZiAoaXNOYU4obWF4QWdlKSkgdGhyb3cgbmV3IEVycm9yKCdtYXhBZ2Ugc2hvdWxkIGJlIGEgTnVtYmVyJyk7XG4gICAgc3RyICs9ICc7IE1heC1BZ2U9JyArIE1hdGguZmxvb3IobWF4QWdlKTtcbiAgfVxuXG4gIGlmIChvcHQuZG9tYWluKSB7XG4gICAgaWYgKCFmaWVsZENvbnRlbnRSZWdFeHAudGVzdChvcHQuZG9tYWluKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIGRvbWFpbiBpcyBpbnZhbGlkJyk7XG4gICAgfVxuXG4gICAgc3RyICs9ICc7IERvbWFpbj0nICsgb3B0LmRvbWFpbjtcbiAgfVxuXG4gIGlmIChvcHQucGF0aCkge1xuICAgIGlmICghZmllbGRDb250ZW50UmVnRXhwLnRlc3Qob3B0LnBhdGgpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gcGF0aCBpcyBpbnZhbGlkJyk7XG4gICAgfVxuXG4gICAgc3RyICs9ICc7IFBhdGg9JyArIG9wdC5wYXRoO1xuICB9XG5cbiAgaWYgKG9wdC5leHBpcmVzKSB7XG4gICAgaWYgKHR5cGVvZiBvcHQuZXhwaXJlcy50b1VUQ1N0cmluZyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIGV4cGlyZXMgaXMgaW52YWxpZCcpO1xuICAgIH1cblxuICAgIHN0ciArPSAnOyBFeHBpcmVzPScgKyBvcHQuZXhwaXJlcy50b1VUQ1N0cmluZygpO1xuICB9XG5cbiAgaWYgKG9wdC5odHRwT25seSkge1xuICAgIHN0ciArPSAnOyBIdHRwT25seSc7XG4gIH1cblxuICBpZiAob3B0LnNlY3VyZSkge1xuICAgIHN0ciArPSAnOyBTZWN1cmUnO1xuICB9XG5cbiAgaWYgKG9wdC5zYW1lU2l0ZSkge1xuICAgIHZhciBzYW1lU2l0ZSA9IHR5cGVvZiBvcHQuc2FtZVNpdGUgPT09ICdzdHJpbmcnXG4gICAgICA/IG9wdC5zYW1lU2l0ZS50b0xvd2VyQ2FzZSgpIDogb3B0LnNhbWVTaXRlO1xuXG4gICAgc3dpdGNoIChzYW1lU2l0ZSkge1xuICAgICAgY2FzZSB0cnVlOlxuICAgICAgICBzdHIgKz0gJzsgU2FtZVNpdGU9U3RyaWN0JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdsYXgnOlxuICAgICAgICBzdHIgKz0gJzsgU2FtZVNpdGU9TGF4JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzdHJpY3QnOlxuICAgICAgICBzdHIgKz0gJzsgU2FtZVNpdGU9U3RyaWN0JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdub25lJzpcbiAgICAgICAgc3RyICs9ICc7IFNhbWVTaXRlPU5vbmUnO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBzYW1lU2l0ZSBpcyBpbnZhbGlkJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn1cblxuLyoqXG4gKiBUcnkgZGVjb2RpbmcgYSBzdHJpbmcgdXNpbmcgYSBkZWNvZGluZyBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBkZWNvZGVcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gdHJ5RGVjb2RlKHN0ciwgZGVjb2RlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZShzdHIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuIiwiLyohXG4gKiB2YXJ5XG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE3IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHZhcnlcbm1vZHVsZS5leHBvcnRzLmFwcGVuZCA9IGFwcGVuZFxuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCBmaWVsZC1uYW1lIGluIFJGQyA3MjMwIHNlYyAzLjJcbiAqXG4gKiBmaWVsZC1uYW1lICAgID0gdG9rZW5cbiAqIHRva2VuICAgICAgICAgPSAxKnRjaGFyXG4gKiB0Y2hhciAgICAgICAgID0gXCIhXCIgLyBcIiNcIiAvIFwiJFwiIC8gXCIlXCIgLyBcIiZcIiAvIFwiJ1wiIC8gXCIqXCJcbiAqICAgICAgICAgICAgICAgLyBcIitcIiAvIFwiLVwiIC8gXCIuXCIgLyBcIl5cIiAvIFwiX1wiIC8gXCJgXCIgLyBcInxcIiAvIFwiflwiXG4gKiAgICAgICAgICAgICAgIC8gRElHSVQgLyBBTFBIQVxuICogICAgICAgICAgICAgICA7IGFueSBWQ0hBUiwgZXhjZXB0IGRlbGltaXRlcnNcbiAqL1xuXG52YXIgRklFTERfTkFNRV9SRUdFWFAgPSAvXlshIyQlJicqK1xcLS5eX2B8fjAtOUEtWmEtel0rJC9cblxuLyoqXG4gKiBBcHBlbmQgYSBmaWVsZCB0byBhIHZhcnkgaGVhZGVyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBmaWVsZFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGFwcGVuZCAoaGVhZGVyLCBmaWVsZCkge1xuICBpZiAodHlwZW9mIGhlYWRlciAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdoZWFkZXIgYXJndW1lbnQgaXMgcmVxdWlyZWQnKVxuICB9XG5cbiAgaWYgKCFmaWVsZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ZpZWxkIGFyZ3VtZW50IGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIC8vIGdldCBmaWVsZHMgYXJyYXlcbiAgdmFyIGZpZWxkcyA9ICFBcnJheS5pc0FycmF5KGZpZWxkKVxuICAgID8gcGFyc2UoU3RyaW5nKGZpZWxkKSlcbiAgICA6IGZpZWxkXG5cbiAgLy8gYXNzZXJ0IG9uIGludmFsaWQgZmllbGQgbmFtZXNcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBmaWVsZHMubGVuZ3RoOyBqKyspIHtcbiAgICBpZiAoIUZJRUxEX05BTUVfUkVHRVhQLnRlc3QoZmllbGRzW2pdKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZmllbGQgYXJndW1lbnQgY29udGFpbnMgYW4gaW52YWxpZCBoZWFkZXIgbmFtZScpXG4gICAgfVxuICB9XG5cbiAgLy8gZXhpc3RpbmcsIHVuc3BlY2lmaWVkIHZhcnlcbiAgaWYgKGhlYWRlciA9PT0gJyonKSB7XG4gICAgcmV0dXJuIGhlYWRlclxuICB9XG5cbiAgLy8gZW51bWVyYXRlIGN1cnJlbnQgdmFsdWVzXG4gIHZhciB2YWwgPSBoZWFkZXJcbiAgdmFyIHZhbHMgPSBwYXJzZShoZWFkZXIudG9Mb3dlckNhc2UoKSlcblxuICAvLyB1bnNwZWNpZmllZCB2YXJ5XG4gIGlmIChmaWVsZHMuaW5kZXhPZignKicpICE9PSAtMSB8fCB2YWxzLmluZGV4T2YoJyonKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gJyonXG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBmbGQgPSBmaWVsZHNbaV0udG9Mb3dlckNhc2UoKVxuXG4gICAgLy8gYXBwZW5kIHZhbHVlIChjYXNlLXByZXNlcnZpbmcpXG4gICAgaWYgKHZhbHMuaW5kZXhPZihmbGQpID09PSAtMSkge1xuICAgICAgdmFscy5wdXNoKGZsZClcbiAgICAgIHZhbCA9IHZhbFxuICAgICAgICA/IHZhbCArICcsICcgKyBmaWVsZHNbaV1cbiAgICAgICAgOiBmaWVsZHNbaV1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogUGFyc2UgYSB2YXJ5IGhlYWRlciBpbnRvIGFuIGFycmF5LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJcbiAqIEByZXR1cm4ge0FycmF5fVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZSAoaGVhZGVyKSB7XG4gIHZhciBlbmQgPSAwXG4gIHZhciBsaXN0ID0gW11cbiAgdmFyIHN0YXJ0ID0gMFxuXG4gIC8vIGdhdGhlciB0b2tlbnNcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGhlYWRlci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHN3aXRjaCAoaGVhZGVyLmNoYXJDb2RlQXQoaSkpIHtcbiAgICAgIGNhc2UgMHgyMDogLyogICAqL1xuICAgICAgICBpZiAoc3RhcnQgPT09IGVuZCkge1xuICAgICAgICAgIHN0YXJ0ID0gZW5kID0gaSArIDFcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAweDJjOiAvKiAsICovXG4gICAgICAgIGxpc3QucHVzaChoZWFkZXIuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpKVxuICAgICAgICBzdGFydCA9IGVuZCA9IGkgKyAxXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbmQgPSBpICsgMVxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpbmFsIHRva2VuXG4gIGxpc3QucHVzaChoZWFkZXIuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpKVxuXG4gIHJldHVybiBsaXN0XG59XG5cbi8qKlxuICogTWFyayB0aGF0IGEgcmVxdWVzdCBpcyB2YXJpZWQgb24gYSBoZWFkZXIgZmllbGQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlc1xuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGZpZWxkXG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gdmFyeSAocmVzLCBmaWVsZCkge1xuICBpZiAoIXJlcyB8fCAhcmVzLmdldEhlYWRlciB8fCAhcmVzLnNldEhlYWRlcikge1xuICAgIC8vIHF1YWNrIHF1YWNrXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVzIGFyZ3VtZW50IGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIC8vIGdldCBleGlzdGluZyBoZWFkZXJcbiAgdmFyIHZhbCA9IHJlcy5nZXRIZWFkZXIoJ1ZhcnknKSB8fCAnJ1xuICB2YXIgaGVhZGVyID0gQXJyYXkuaXNBcnJheSh2YWwpXG4gICAgPyB2YWwuam9pbignLCAnKVxuICAgIDogU3RyaW5nKHZhbClcblxuICAvLyBzZXQgbmV3IGhlYWRlclxuICBpZiAoKHZhbCA9IGFwcGVuZChoZWFkZXIsIGZpZWxkKSkpIHtcbiAgICByZXMuc2V0SGVhZGVyKCdWYXJ5JywgdmFsKVxuICB9XG59XG4iLCIvKiFcbiAqIHNlcnZlLXN0YXRpY1xuICogQ29weXJpZ2h0KGMpIDIwMTAgU2VuY2hhIEluYy5cbiAqIENvcHlyaWdodChjKSAyMDExIFRKIEhvbG93YXljaHVrXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE2IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgZW5jb2RlVXJsID0gcmVxdWlyZSgnZW5jb2RldXJsJylcbnZhciBlc2NhcGVIdG1sID0gcmVxdWlyZSgnZXNjYXBlLWh0bWwnKVxudmFyIHBhcnNlVXJsID0gcmVxdWlyZSgncGFyc2V1cmwnKVxudmFyIHJlc29sdmUgPSByZXF1aXJlKCdwYXRoJykucmVzb2x2ZVxudmFyIHNlbmQgPSByZXF1aXJlKCdzZW5kJylcbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gc2VydmVTdGF0aWNcbm1vZHVsZS5leHBvcnRzLm1pbWUgPSBzZW5kLm1pbWVcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcm9vdFxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gc2VydmVTdGF0aWMgKHJvb3QsIG9wdGlvbnMpIHtcbiAgaWYgKCFyb290KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncm9vdCBwYXRoIHJlcXVpcmVkJylcbiAgfVxuXG4gIGlmICh0eXBlb2Ygcm9vdCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyb290IHBhdGggbXVzdCBiZSBhIHN0cmluZycpXG4gIH1cblxuICAvLyBjb3B5IG9wdGlvbnMgb2JqZWN0XG4gIHZhciBvcHRzID0gT2JqZWN0LmNyZWF0ZShvcHRpb25zIHx8IG51bGwpXG5cbiAgLy8gZmFsbC10aG91Z2hcbiAgdmFyIGZhbGx0aHJvdWdoID0gb3B0cy5mYWxsdGhyb3VnaCAhPT0gZmFsc2VcblxuICAvLyBkZWZhdWx0IHJlZGlyZWN0XG4gIHZhciByZWRpcmVjdCA9IG9wdHMucmVkaXJlY3QgIT09IGZhbHNlXG5cbiAgLy8gaGVhZGVycyBsaXN0ZW5lclxuICB2YXIgc2V0SGVhZGVycyA9IG9wdHMuc2V0SGVhZGVyc1xuXG4gIGlmIChzZXRIZWFkZXJzICYmIHR5cGVvZiBzZXRIZWFkZXJzICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIHNldEhlYWRlcnMgbXVzdCBiZSBmdW5jdGlvbicpXG4gIH1cblxuICAvLyBzZXR1cCBvcHRpb25zIGZvciBzZW5kXG4gIG9wdHMubWF4YWdlID0gb3B0cy5tYXhhZ2UgfHwgb3B0cy5tYXhBZ2UgfHwgMFxuICBvcHRzLnJvb3QgPSByZXNvbHZlKHJvb3QpXG5cbiAgLy8gY29uc3RydWN0IGRpcmVjdG9yeSBsaXN0ZW5lclxuICB2YXIgb25EaXJlY3RvcnkgPSByZWRpcmVjdFxuICAgID8gY3JlYXRlUmVkaXJlY3REaXJlY3RvcnlMaXN0ZW5lcigpXG4gICAgOiBjcmVhdGVOb3RGb3VuZERpcmVjdG9yeUxpc3RlbmVyKClcblxuICByZXR1cm4gZnVuY3Rpb24gc2VydmVTdGF0aWMgKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgaWYgKHJlcS5tZXRob2QgIT09ICdHRVQnICYmIHJlcS5tZXRob2QgIT09ICdIRUFEJykge1xuICAgICAgaWYgKGZhbGx0aHJvdWdoKSB7XG4gICAgICAgIHJldHVybiBuZXh0KClcbiAgICAgIH1cblxuICAgICAgLy8gbWV0aG9kIG5vdCBhbGxvd2VkXG4gICAgICByZXMuc3RhdHVzQ29kZSA9IDQwNVxuICAgICAgcmVzLnNldEhlYWRlcignQWxsb3cnLCAnR0VULCBIRUFEJylcbiAgICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtTGVuZ3RoJywgJzAnKVxuICAgICAgcmVzLmVuZCgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgZm9yd2FyZEVycm9yID0gIWZhbGx0aHJvdWdoXG4gICAgdmFyIG9yaWdpbmFsVXJsID0gcGFyc2VVcmwub3JpZ2luYWwocmVxKVxuICAgIHZhciBwYXRoID0gcGFyc2VVcmwocmVxKS5wYXRobmFtZVxuXG4gICAgLy8gbWFrZSBzdXJlIHJlZGlyZWN0IG9jY3VycyBhdCBtb3VudFxuICAgIGlmIChwYXRoID09PSAnLycgJiYgb3JpZ2luYWxVcmwucGF0aG5hbWUuc3Vic3RyKC0xKSAhPT0gJy8nKSB7XG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICAvLyBjcmVhdGUgc2VuZCBzdHJlYW1cbiAgICB2YXIgc3RyZWFtID0gc2VuZChyZXEsIHBhdGgsIG9wdHMpXG5cbiAgICAvLyBhZGQgZGlyZWN0b3J5IGhhbmRsZXJcbiAgICBzdHJlYW0ub24oJ2RpcmVjdG9yeScsIG9uRGlyZWN0b3J5KVxuXG4gICAgLy8gYWRkIGhlYWRlcnMgbGlzdGVuZXJcbiAgICBpZiAoc2V0SGVhZGVycykge1xuICAgICAgc3RyZWFtLm9uKCdoZWFkZXJzJywgc2V0SGVhZGVycylcbiAgICB9XG5cbiAgICAvLyBhZGQgZmlsZSBsaXN0ZW5lciBmb3IgZmFsbHRocm91Z2hcbiAgICBpZiAoZmFsbHRocm91Z2gpIHtcbiAgICAgIHN0cmVhbS5vbignZmlsZScsIGZ1bmN0aW9uIG9uRmlsZSAoKSB7XG4gICAgICAgIC8vIG9uY2UgZmlsZSBpcyBkZXRlcm1pbmVkLCBhbHdheXMgZm9yd2FyZCBlcnJvclxuICAgICAgICBmb3J3YXJkRXJyb3IgPSB0cnVlXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIGZvcndhcmQgZXJyb3JzXG4gICAgc3RyZWFtLm9uKCdlcnJvcicsIGZ1bmN0aW9uIGVycm9yIChlcnIpIHtcbiAgICAgIGlmIChmb3J3YXJkRXJyb3IgfHwgIShlcnIuc3RhdHVzQ29kZSA8IDUwMCkpIHtcbiAgICAgICAgbmV4dChlcnIpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBuZXh0KClcbiAgICB9KVxuXG4gICAgLy8gcGlwZVxuICAgIHN0cmVhbS5waXBlKHJlcylcbiAgfVxufVxuXG4vKipcbiAqIENvbGxhcHNlIGFsbCBsZWFkaW5nIHNsYXNoZXMgaW50byBhIHNpbmdsZSBzbGFzaFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY29sbGFwc2VMZWFkaW5nU2xhc2hlcyAoc3RyKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0ci5jaGFyQ29kZUF0KGkpICE9PSAweDJmIC8qIC8gKi8pIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGkgPiAxXG4gICAgPyAnLycgKyBzdHIuc3Vic3RyKGkpXG4gICAgOiBzdHJcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBtaW5pbWFsIEhUTUwgZG9jdW1lbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlXG4gKiBAcGFyYW0ge3N0cmluZ30gYm9keVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVIdG1sRG9jdW1lbnQgKHRpdGxlLCBib2R5KSB7XG4gIHJldHVybiAnPCFET0NUWVBFIGh0bWw+XFxuJyArXG4gICAgJzxodG1sIGxhbmc9XCJlblwiPlxcbicgK1xuICAgICc8aGVhZD5cXG4nICtcbiAgICAnPG1ldGEgY2hhcnNldD1cInV0Zi04XCI+XFxuJyArXG4gICAgJzx0aXRsZT4nICsgdGl0bGUgKyAnPC90aXRsZT5cXG4nICtcbiAgICAnPC9oZWFkPlxcbicgK1xuICAgICc8Ym9keT5cXG4nICtcbiAgICAnPHByZT4nICsgYm9keSArICc8L3ByZT5cXG4nICtcbiAgICAnPC9ib2R5PlxcbicgK1xuICAgICc8L2h0bWw+XFxuJ1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGRpcmVjdG9yeSBsaXN0ZW5lciB0aGF0IGp1c3QgNDA0cy5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlTm90Rm91bmREaXJlY3RvcnlMaXN0ZW5lciAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBub3RGb3VuZCAoKSB7XG4gICAgdGhpcy5lcnJvcig0MDQpXG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkaXJlY3RvcnkgbGlzdGVuZXIgdGhhdCBwZXJmb3JtcyBhIHJlZGlyZWN0LlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVSZWRpcmVjdERpcmVjdG9yeUxpc3RlbmVyICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlZGlyZWN0IChyZXMpIHtcbiAgICBpZiAodGhpcy5oYXNUcmFpbGluZ1NsYXNoKCkpIHtcbiAgICAgIHRoaXMuZXJyb3IoNDA0KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZ2V0IG9yaWdpbmFsIFVSTFxuICAgIHZhciBvcmlnaW5hbFVybCA9IHBhcnNlVXJsLm9yaWdpbmFsKHRoaXMucmVxKVxuXG4gICAgLy8gYXBwZW5kIHRyYWlsaW5nIHNsYXNoXG4gICAgb3JpZ2luYWxVcmwucGF0aCA9IG51bGxcbiAgICBvcmlnaW5hbFVybC5wYXRobmFtZSA9IGNvbGxhcHNlTGVhZGluZ1NsYXNoZXMob3JpZ2luYWxVcmwucGF0aG5hbWUgKyAnLycpXG5cbiAgICAvLyByZWZvcm1hdCB0aGUgVVJMXG4gICAgdmFyIGxvYyA9IGVuY29kZVVybCh1cmwuZm9ybWF0KG9yaWdpbmFsVXJsKSlcbiAgICB2YXIgZG9jID0gY3JlYXRlSHRtbERvY3VtZW50KCdSZWRpcmVjdGluZycsICdSZWRpcmVjdGluZyB0byA8YSBocmVmPVwiJyArIGVzY2FwZUh0bWwobG9jKSArICdcIj4nICtcbiAgICAgIGVzY2FwZUh0bWwobG9jKSArICc8L2E+JylcblxuICAgIC8vIHNlbmQgcmVkaXJlY3QgcmVzcG9uc2VcbiAgICByZXMuc3RhdHVzQ29kZSA9IDMwMVxuICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICd0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLTgnKVxuICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtTGVuZ3RoJywgQnVmZmVyLmJ5dGVMZW5ndGgoZG9jKSlcbiAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVNlY3VyaXR5LVBvbGljeScsIFwiZGVmYXVsdC1zcmMgJ25vbmUnXCIpXG4gICAgcmVzLnNldEhlYWRlcignWC1Db250ZW50LVR5cGUtT3B0aW9ucycsICdub3NuaWZmJylcbiAgICByZXMuc2V0SGVhZGVyKCdMb2NhdGlvbicsIGxvYylcbiAgICByZXMuZW5kKGRvYylcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==